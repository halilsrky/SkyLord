
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012658  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08012828  08012828  00013828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e28  08012e28  00014214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012e28  08012e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e30  08012e30  00014214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e30  08012e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012e34  08012e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08012e38  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000214  0801304c  00014214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0801304c  00014ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c36b  00000000  00000000  00014244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb8  00000000  00000000  000305af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fb  00000000  00000000  00035a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273cc  00000000  00000000  00036b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddf7  00000000  00000000  0005decf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e58ea  00000000  00000000  0007bcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001615b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  001615f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001687dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012810 	.word	0x08012810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08012810 	.word	0x08012810

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ec2:	f000 b9d3 	b.w	800126c <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f58:	f000 b988 	b.w	800126c <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	468e      	mov	lr, r1
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4688      	mov	r8, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d14a      	bne.n	800101a <__udivmoddi4+0xa6>
 8000f84:	428a      	cmp	r2, r1
 8000f86:	4617      	mov	r7, r2
 8000f88:	d962      	bls.n	8001050 <__udivmoddi4+0xdc>
 8000f8a:	fab2 f682 	clz	r6, r2
 8000f8e:	b14e      	cbz	r6, 8000fa4 <__udivmoddi4+0x30>
 8000f90:	f1c6 0320 	rsb	r3, r6, #32
 8000f94:	fa01 f806 	lsl.w	r8, r1, r6
 8000f98:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9c:	40b7      	lsls	r7, r6
 8000f9e:	ea43 0808 	orr.w	r8, r3, r8
 8000fa2:	40b4      	lsls	r4, r6
 8000fa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa8:	fa1f fc87 	uxth.w	ip, r7
 8000fac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000fb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fba:	fb01 f20c 	mul.w	r2, r1, ip
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d909      	bls.n	8000fd6 <__udivmoddi4+0x62>
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000fc8:	f080 80ea 	bcs.w	80011a0 <__udivmoddi4+0x22c>
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f240 80e7 	bls.w	80011a0 <__udivmoddi4+0x22c>
 8000fd2:	3902      	subs	r1, #2
 8000fd4:	443b      	add	r3, r7
 8000fd6:	1a9a      	subs	r2, r3, r2
 8000fd8:	b2a3      	uxth	r3, r4
 8000fda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fe6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fea:	459c      	cmp	ip, r3
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0x8e>
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ff4:	f080 80d6 	bcs.w	80011a4 <__udivmoddi4+0x230>
 8000ff8:	459c      	cmp	ip, r3
 8000ffa:	f240 80d3 	bls.w	80011a4 <__udivmoddi4+0x230>
 8000ffe:	443b      	add	r3, r7
 8001000:	3802      	subs	r0, #2
 8001002:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001006:	eba3 030c 	sub.w	r3, r3, ip
 800100a:	2100      	movs	r1, #0
 800100c:	b11d      	cbz	r5, 8001016 <__udivmoddi4+0xa2>
 800100e:	40f3      	lsrs	r3, r6
 8001010:	2200      	movs	r2, #0
 8001012:	e9c5 3200 	strd	r3, r2, [r5]
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	428b      	cmp	r3, r1
 800101c:	d905      	bls.n	800102a <__udivmoddi4+0xb6>
 800101e:	b10d      	cbz	r5, 8001024 <__udivmoddi4+0xb0>
 8001020:	e9c5 0100 	strd	r0, r1, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	4608      	mov	r0, r1
 8001028:	e7f5      	b.n	8001016 <__udivmoddi4+0xa2>
 800102a:	fab3 f183 	clz	r1, r3
 800102e:	2900      	cmp	r1, #0
 8001030:	d146      	bne.n	80010c0 <__udivmoddi4+0x14c>
 8001032:	4573      	cmp	r3, lr
 8001034:	d302      	bcc.n	800103c <__udivmoddi4+0xc8>
 8001036:	4282      	cmp	r2, r0
 8001038:	f200 8105 	bhi.w	8001246 <__udivmoddi4+0x2d2>
 800103c:	1a84      	subs	r4, r0, r2
 800103e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001042:	2001      	movs	r0, #1
 8001044:	4690      	mov	r8, r2
 8001046:	2d00      	cmp	r5, #0
 8001048:	d0e5      	beq.n	8001016 <__udivmoddi4+0xa2>
 800104a:	e9c5 4800 	strd	r4, r8, [r5]
 800104e:	e7e2      	b.n	8001016 <__udivmoddi4+0xa2>
 8001050:	2a00      	cmp	r2, #0
 8001052:	f000 8090 	beq.w	8001176 <__udivmoddi4+0x202>
 8001056:	fab2 f682 	clz	r6, r2
 800105a:	2e00      	cmp	r6, #0
 800105c:	f040 80a4 	bne.w	80011a8 <__udivmoddi4+0x234>
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	0c03      	lsrs	r3, r0, #16
 8001064:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001068:	b280      	uxth	r0, r0
 800106a:	b2bc      	uxth	r4, r7
 800106c:	2101      	movs	r1, #1
 800106e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001072:	fb0e 221c 	mls	r2, lr, ip, r2
 8001076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800107a:	fb04 f20c 	mul.w	r2, r4, ip
 800107e:	429a      	cmp	r2, r3
 8001080:	d907      	bls.n	8001092 <__udivmoddi4+0x11e>
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001088:	d202      	bcs.n	8001090 <__udivmoddi4+0x11c>
 800108a:	429a      	cmp	r2, r3
 800108c:	f200 80e0 	bhi.w	8001250 <__udivmoddi4+0x2dc>
 8001090:	46c4      	mov	ip, r8
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	fbb3 f2fe 	udiv	r2, r3, lr
 8001098:	fb0e 3312 	mls	r3, lr, r2, r3
 800109c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80010a0:	fb02 f404 	mul.w	r4, r2, r4
 80010a4:	429c      	cmp	r4, r3
 80010a6:	d907      	bls.n	80010b8 <__udivmoddi4+0x144>
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80010ae:	d202      	bcs.n	80010b6 <__udivmoddi4+0x142>
 80010b0:	429c      	cmp	r4, r3
 80010b2:	f200 80ca 	bhi.w	800124a <__udivmoddi4+0x2d6>
 80010b6:	4602      	mov	r2, r0
 80010b8:	1b1b      	subs	r3, r3, r4
 80010ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80010be:	e7a5      	b.n	800100c <__udivmoddi4+0x98>
 80010c0:	f1c1 0620 	rsb	r6, r1, #32
 80010c4:	408b      	lsls	r3, r1
 80010c6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ca:	431f      	orrs	r7, r3
 80010cc:	fa0e f401 	lsl.w	r4, lr, r1
 80010d0:	fa20 f306 	lsr.w	r3, r0, r6
 80010d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80010d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010dc:	4323      	orrs	r3, r4
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	fa1f fc87 	uxth.w	ip, r7
 80010e6:	fbbe f0f9 	udiv	r0, lr, r9
 80010ea:	0c1c      	lsrs	r4, r3, #16
 80010ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80010f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80010f8:	45a6      	cmp	lr, r4
 80010fa:	fa02 f201 	lsl.w	r2, r2, r1
 80010fe:	d909      	bls.n	8001114 <__udivmoddi4+0x1a0>
 8001100:	193c      	adds	r4, r7, r4
 8001102:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001106:	f080 809c 	bcs.w	8001242 <__udivmoddi4+0x2ce>
 800110a:	45a6      	cmp	lr, r4
 800110c:	f240 8099 	bls.w	8001242 <__udivmoddi4+0x2ce>
 8001110:	3802      	subs	r0, #2
 8001112:	443c      	add	r4, r7
 8001114:	eba4 040e 	sub.w	r4, r4, lr
 8001118:	fa1f fe83 	uxth.w	lr, r3
 800111c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001120:	fb09 4413 	mls	r4, r9, r3, r4
 8001124:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001128:	fb03 fc0c 	mul.w	ip, r3, ip
 800112c:	45a4      	cmp	ip, r4
 800112e:	d908      	bls.n	8001142 <__udivmoddi4+0x1ce>
 8001130:	193c      	adds	r4, r7, r4
 8001132:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001136:	f080 8082 	bcs.w	800123e <__udivmoddi4+0x2ca>
 800113a:	45a4      	cmp	ip, r4
 800113c:	d97f      	bls.n	800123e <__udivmoddi4+0x2ca>
 800113e:	3b02      	subs	r3, #2
 8001140:	443c      	add	r4, r7
 8001142:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001146:	eba4 040c 	sub.w	r4, r4, ip
 800114a:	fba0 ec02 	umull	lr, ip, r0, r2
 800114e:	4564      	cmp	r4, ip
 8001150:	4673      	mov	r3, lr
 8001152:	46e1      	mov	r9, ip
 8001154:	d362      	bcc.n	800121c <__udivmoddi4+0x2a8>
 8001156:	d05f      	beq.n	8001218 <__udivmoddi4+0x2a4>
 8001158:	b15d      	cbz	r5, 8001172 <__udivmoddi4+0x1fe>
 800115a:	ebb8 0203 	subs.w	r2, r8, r3
 800115e:	eb64 0409 	sbc.w	r4, r4, r9
 8001162:	fa04 f606 	lsl.w	r6, r4, r6
 8001166:	fa22 f301 	lsr.w	r3, r2, r1
 800116a:	431e      	orrs	r6, r3
 800116c:	40cc      	lsrs	r4, r1
 800116e:	e9c5 6400 	strd	r6, r4, [r5]
 8001172:	2100      	movs	r1, #0
 8001174:	e74f      	b.n	8001016 <__udivmoddi4+0xa2>
 8001176:	fbb1 fcf2 	udiv	ip, r1, r2
 800117a:	0c01      	lsrs	r1, r0, #16
 800117c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001180:	b280      	uxth	r0, r0
 8001182:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001186:	463b      	mov	r3, r7
 8001188:	4638      	mov	r0, r7
 800118a:	463c      	mov	r4, r7
 800118c:	46b8      	mov	r8, r7
 800118e:	46be      	mov	lr, r7
 8001190:	2620      	movs	r6, #32
 8001192:	fbb1 f1f7 	udiv	r1, r1, r7
 8001196:	eba2 0208 	sub.w	r2, r2, r8
 800119a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800119e:	e766      	b.n	800106e <__udivmoddi4+0xfa>
 80011a0:	4601      	mov	r1, r0
 80011a2:	e718      	b.n	8000fd6 <__udivmoddi4+0x62>
 80011a4:	4610      	mov	r0, r2
 80011a6:	e72c      	b.n	8001002 <__udivmoddi4+0x8e>
 80011a8:	f1c6 0220 	rsb	r2, r6, #32
 80011ac:	fa2e f302 	lsr.w	r3, lr, r2
 80011b0:	40b7      	lsls	r7, r6
 80011b2:	40b1      	lsls	r1, r6
 80011b4:	fa20 f202 	lsr.w	r2, r0, r2
 80011b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011bc:	430a      	orrs	r2, r1
 80011be:	fbb3 f8fe 	udiv	r8, r3, lr
 80011c2:	b2bc      	uxth	r4, r7
 80011c4:	fb0e 3318 	mls	r3, lr, r8, r3
 80011c8:	0c11      	lsrs	r1, r2, #16
 80011ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ce:	fb08 f904 	mul.w	r9, r8, r4
 80011d2:	40b0      	lsls	r0, r6
 80011d4:	4589      	cmp	r9, r1
 80011d6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011da:	b280      	uxth	r0, r0
 80011dc:	d93e      	bls.n	800125c <__udivmoddi4+0x2e8>
 80011de:	1879      	adds	r1, r7, r1
 80011e0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80011e4:	d201      	bcs.n	80011ea <__udivmoddi4+0x276>
 80011e6:	4589      	cmp	r9, r1
 80011e8:	d81f      	bhi.n	800122a <__udivmoddi4+0x2b6>
 80011ea:	eba1 0109 	sub.w	r1, r1, r9
 80011ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80011f2:	fb09 f804 	mul.w	r8, r9, r4
 80011f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80011fa:	b292      	uxth	r2, r2
 80011fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001200:	4542      	cmp	r2, r8
 8001202:	d229      	bcs.n	8001258 <__udivmoddi4+0x2e4>
 8001204:	18ba      	adds	r2, r7, r2
 8001206:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800120a:	d2c4      	bcs.n	8001196 <__udivmoddi4+0x222>
 800120c:	4542      	cmp	r2, r8
 800120e:	d2c2      	bcs.n	8001196 <__udivmoddi4+0x222>
 8001210:	f1a9 0102 	sub.w	r1, r9, #2
 8001214:	443a      	add	r2, r7
 8001216:	e7be      	b.n	8001196 <__udivmoddi4+0x222>
 8001218:	45f0      	cmp	r8, lr
 800121a:	d29d      	bcs.n	8001158 <__udivmoddi4+0x1e4>
 800121c:	ebbe 0302 	subs.w	r3, lr, r2
 8001220:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001224:	3801      	subs	r0, #1
 8001226:	46e1      	mov	r9, ip
 8001228:	e796      	b.n	8001158 <__udivmoddi4+0x1e4>
 800122a:	eba7 0909 	sub.w	r9, r7, r9
 800122e:	4449      	add	r1, r9
 8001230:	f1a8 0c02 	sub.w	ip, r8, #2
 8001234:	fbb1 f9fe 	udiv	r9, r1, lr
 8001238:	fb09 f804 	mul.w	r8, r9, r4
 800123c:	e7db      	b.n	80011f6 <__udivmoddi4+0x282>
 800123e:	4673      	mov	r3, lr
 8001240:	e77f      	b.n	8001142 <__udivmoddi4+0x1ce>
 8001242:	4650      	mov	r0, sl
 8001244:	e766      	b.n	8001114 <__udivmoddi4+0x1a0>
 8001246:	4608      	mov	r0, r1
 8001248:	e6fd      	b.n	8001046 <__udivmoddi4+0xd2>
 800124a:	443b      	add	r3, r7
 800124c:	3a02      	subs	r2, #2
 800124e:	e733      	b.n	80010b8 <__udivmoddi4+0x144>
 8001250:	f1ac 0c02 	sub.w	ip, ip, #2
 8001254:	443b      	add	r3, r7
 8001256:	e71c      	b.n	8001092 <__udivmoddi4+0x11e>
 8001258:	4649      	mov	r1, r9
 800125a:	e79c      	b.n	8001196 <__udivmoddi4+0x222>
 800125c:	eba1 0109 	sub.w	r1, r1, r9
 8001260:	46c4      	mov	ip, r8
 8001262:	fbb1 f9fe 	udiv	r9, r1, lr
 8001266:	fb09 f804 	mul.w	r8, r9, r4
 800126a:	e7c4      	b.n	80011f6 <__udivmoddi4+0x282>

0800126c <__aeabi_idiv0>:
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 8001276:	4b3c      	ldr	r3, [pc, #240]	@ (8001368 <bme280_getVals+0xf8>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2364      	movs	r3, #100	@ 0x64
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030d 	add.w	r3, r7, #13
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	22f3      	movs	r2, #243	@ 0xf3
 800128c:	21ec      	movs	r1, #236	@ 0xec
 800128e:	f008 ff33 	bl	800a0f8 <HAL_I2C_Mem_Read>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001296:	4b35      	ldr	r3, [pc, #212]	@ (800136c <bme280_getVals+0xfc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf0c      	ite	eq
 80012aa:	2301      	moveq	r3, #1
 80012ac:	2300      	movne	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <bme280_getVals+0x100>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d14f      	bne.n	800135a <bme280_getVals+0xea>
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d14c      	bne.n	800135a <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 80012c0:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <bme280_getVals+0xf8>)
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	2314      	movs	r3, #20
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2308      	movs	r3, #8
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	22f7      	movs	r2, #247	@ 0xf7
 80012d4:	21ec      	movs	r1, #236	@ 0xec
 80012d6:	f008 ff0f 	bl	800a0f8 <HAL_I2C_Mem_Read>
 80012da:	4603      	mov	r3, r0
 80012dc:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d13a      	bne.n	800135a <bme280_getVals+0xea>
 80012e4:	4b21      	ldr	r3, [pc, #132]	@ (800136c <bme280_getVals+0xfc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2208      	movs	r2, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d f833 	bl	800e35c <memcmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d02e      	beq.n	800135a <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <bme280_getVals+0xfc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3334      	adds	r3, #52	@ 0x34
 8001302:	461a      	mov	r2, r3
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	cb03      	ldmia	r3!, {r0, r1}
 8001308:	6010      	str	r0, [r2, #0]
 800130a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <bme280_getVals+0xfc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	031a      	lsls	r2, r3, #12
 800131a:	7a3b      	ldrb	r3, [r7, #8]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	431a      	orrs	r2, r3
 8001320:	7a7b      	ldrb	r3, [r7, #9]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4619      	mov	r1, r3
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <bme280_getVals+0xfc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 8001330:	793b      	ldrb	r3, [r7, #4]
 8001332:	031a      	lsls	r2, r3, #12
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	431a      	orrs	r2, r3
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <bme280_getVals+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800134a:	7abb      	ldrb	r3, [r7, #10]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	4619      	mov	r1, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <bme280_getVals+0xfc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <bme280_getVals+0x100>)
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000230 	.word	0x20000230
 800136c:	20000234 	.word	0x20000234
 8001370:	20000000 	.word	0x20000000
 8001374:	00000000 	.word	0x00000000

08001378 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <bme280_calculate_altitude+0x98>)
 8001380:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <bme280_calculate_altitude+0x9c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	ed93 7a06 	vldr	s14, [r3, #24]
 800138a:	edd7 7a01 	vldr	s15, [r7, #4]
 800138e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001392:	ee16 0a90 	vmov	r0, s13
 8001396:	f7ff f8f7 	bl	8000588 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001400 <bme280_calculate_altitude+0x88>
 80013a2:	ec43 2b10 	vmov	d0, r2, r3
 80013a6:	f00e ff09 	bl	80101bc <pow>
 80013aa:	ec53 2b10 	vmov	r2, r3, d0
 80013ae:	f04f 0000 	mov.w	r0, #0
 80013b2:	4919      	ldr	r1, [pc, #100]	@ (8001418 <bme280_calculate_altitude+0xa0>)
 80013b4:	f7fe ff88 	bl	80002c8 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	a311      	add	r3, pc, #68	@ (adr r3, 8001408 <bme280_calculate_altitude+0x90>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f937 	bl	8000638 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fc09 	bl	8000be8 <__aeabi_d2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <bme280_calculate_altitude+0x9c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <bme280_calculate_altitude+0x9c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ed97 7a00 	vldr	s14, [r7]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	ccd9456c 	.word	0xccd9456c
 8001404:	3fc85b95 	.word	0x3fc85b95
 8001408:	00000000 	.word	0x00000000
 800140c:	40e5a540 	.word	0x40e5a540
 8001410:	447d5000 	.word	0x447d5000
 8001414:	20000234 	.word	0x20000234
 8001418:	3ff00000 	.word	0x3ff00000

0800141c <bme280_config>:

void bme280_config()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	@ 0x38
 8001420:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001422:	4b96      	ldr	r3, [pc, #600]	@ (800167c <bme280_config+0x260>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800142c:	4b94      	ldr	r3, [pc, #592]	@ (8001680 <bme280_config+0x264>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f008 fd37 	bl	8009ea4 <HAL_I2C_DeInit>
    HAL_Delay(5);
 8001436:	2005      	movs	r0, #5
 8001438:	f006 ff8e 	bl	8008358 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 800143c:	4b90      	ldr	r3, [pc, #576]	@ (8001680 <bme280_config+0x264>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f008 fbeb 	bl	8009c1c <HAL_I2C_Init>
    HAL_Delay(5);
 8001446:	2005      	movs	r0, #5
 8001448:	f006 ff86 	bl	8008358 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800144c:	4b8c      	ldr	r3, [pc, #560]	@ (8001680 <bme280_config+0x264>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	23c8      	movs	r3, #200	@ 0xc8
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2319      	movs	r3, #25
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	2288      	movs	r2, #136	@ 0x88
 8001460:	21ec      	movs	r1, #236	@ 0xec
 8001462:	f008 fe49 	bl	800a0f8 <HAL_I2C_Mem_Read>
 8001466:	4603      	mov	r3, r0
 8001468:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800146a:	793b      	ldrb	r3, [r7, #4]
 800146c:	4619      	mov	r1, r3
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b81      	ldr	r3, [pc, #516]	@ (800167c <bme280_config+0x260>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	b292      	uxth	r2, r2
 800147e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	b219      	sxth	r1, r3
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	b21b      	sxth	r3, r3
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b7b      	ldr	r3, [pc, #492]	@ (800167c <bme280_config+0x260>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	b212      	sxth	r2, r2
 8001496:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001498:	7a3b      	ldrb	r3, [r7, #8]
 800149a:	b219      	sxth	r1, r3
 800149c:	7a7b      	ldrb	r3, [r7, #9]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b75      	ldr	r3, [pc, #468]	@ (800167c <bme280_config+0x260>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 80014b0:	7abb      	ldrb	r3, [r7, #10]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21a      	sxth	r2, r3
 80014c0:	4b6e      	ldr	r3, [pc, #440]	@ (800167c <bme280_config+0x260>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b292      	uxth	r2, r2
 80014c8:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	b219      	sxth	r1, r3
 80014ce:	7b7b      	ldrb	r3, [r7, #13]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b69      	ldr	r3, [pc, #420]	@ (800167c <bme280_config+0x260>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	b212      	sxth	r2, r2
 80014e0:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	b219      	sxth	r1, r3
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	4b63      	ldr	r3, [pc, #396]	@ (800167c <bme280_config+0x260>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	b212      	sxth	r2, r2
 80014f8:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014fa:	7c3b      	ldrb	r3, [r7, #16]
 80014fc:	b219      	sxth	r1, r3
 80014fe:	7c7b      	ldrb	r3, [r7, #17]
 8001500:	b21b      	sxth	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <bme280_config+0x260>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	b212      	sxth	r2, r2
 8001510:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001512:	7cbb      	ldrb	r3, [r7, #18]
 8001514:	b219      	sxth	r1, r3
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	b21b      	sxth	r3, r3
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b57      	ldr	r3, [pc, #348]	@ (800167c <bme280_config+0x260>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	b212      	sxth	r2, r2
 8001528:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	b219      	sxth	r1, r3
 800152e:	7d7b      	ldrb	r3, [r7, #21]
 8001530:	b21b      	sxth	r3, r3
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b51      	ldr	r3, [pc, #324]	@ (800167c <bme280_config+0x260>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	b212      	sxth	r2, r2
 8001540:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 8001542:	7dbb      	ldrb	r3, [r7, #22]
 8001544:	b219      	sxth	r1, r3
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	b21b      	sxth	r3, r3
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b4b      	ldr	r3, [pc, #300]	@ (800167c <bme280_config+0x260>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	b212      	sxth	r2, r2
 8001558:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 800155a:	7e3b      	ldrb	r3, [r7, #24]
 800155c:	b219      	sxth	r1, r3
 800155e:	7e7b      	ldrb	r3, [r7, #25]
 8001560:	b21b      	sxth	r3, r3
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b45      	ldr	r3, [pc, #276]	@ (800167c <bme280_config+0x260>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 8001572:	7ebb      	ldrb	r3, [r7, #26]
 8001574:	b219      	sxth	r1, r3
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <bme280_config+0x260>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	b212      	sxth	r2, r2
 8001588:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 800158a:	4b3c      	ldr	r3, [pc, #240]	@ (800167c <bme280_config+0x260>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	7f3a      	ldrb	r2, [r7, #28]
 8001592:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 8001594:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <bme280_config+0x264>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	2332      	movs	r3, #50	@ 0x32
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2307      	movs	r3, #7
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	22e1      	movs	r2, #225	@ 0xe1
 80015a8:	21ec      	movs	r1, #236	@ 0xec
 80015aa:	f008 fda5 	bl	800a0f8 <HAL_I2C_Mem_Read>
 80015ae:	4603      	mov	r3, r0
 80015b0:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 80015b2:	793b      	ldrb	r3, [r7, #4]
 80015b4:	b219      	sxth	r1, r3
 80015b6:	797b      	ldrb	r3, [r7, #5]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <bme280_config+0x260>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	b212      	sxth	r2, r2
 80015c8:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <bme280_config+0x260>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	79ba      	ldrb	r2, [r7, #6]
 80015d2:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 80015d4:	7a3b      	ldrb	r3, [r7, #8]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	b219      	sxth	r1, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b25      	ldr	r3, [pc, #148]	@ (800167c <bme280_config+0x260>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	b212      	sxth	r2, r2
 80015f0:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 80015f2:	7a3b      	ldrb	r3, [r7, #8]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	b219      	sxth	r1, r3
 80015fa:	7a7b      	ldrb	r3, [r7, #9]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <bme280_config+0x260>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	b212      	sxth	r2, r2
 800160c:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 800160e:	7aba      	ldrb	r2, [r7, #10]
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <bme280_config+0x260>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b252      	sxtb	r2, r2
 8001618:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <bme280_config+0x260>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	799b      	ldrb	r3, [r3, #6]
 8001626:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <bme280_config+0x264>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	2332      	movs	r3, #50	@ 0x32
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2301      	movs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	1cfb      	adds	r3, r7, #3
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	22f2      	movs	r2, #242	@ 0xf2
 800163c:	21ec      	movs	r1, #236	@ 0xec
 800163e:	f008 fc61 	bl	8009f04 <HAL_I2C_Mem_Write>
 8001642:	4603      	mov	r3, r0
 8001644:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <bme280_config+0x260>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	795b      	ldrb	r3, [r3, #5]
 8001650:	b25a      	sxtb	r2, r3
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <bme280_config+0x260>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	799b      	ldrb	r3, [r3, #6]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	b25b      	sxtb	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b25a      	sxtb	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <bme280_config+0x260>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	799b      	ldrb	r3, [r3, #6]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	b25b      	sxtb	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001676:	4b02      	ldr	r3, [pc, #8]	@ (8001680 <bme280_config+0x264>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	e003      	b.n	8001684 <bme280_config+0x268>
 800167c:	20000234 	.word	0x20000234
 8001680:	20000230 	.word	0x20000230
 8001684:	2332      	movs	r3, #50	@ 0x32
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2301      	movs	r3, #1
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1cfb      	adds	r3, r7, #3
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	22f4      	movs	r2, #244	@ 0xf4
 8001694:	21ec      	movs	r1, #236	@ 0xec
 8001696:	f008 fc35 	bl	8009f04 <HAL_I2C_Mem_Write>
 800169a:	4603      	mov	r3, r0
 800169c:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <bme280_config+0x320>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	79db      	ldrb	r3, [r3, #7]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <bme280_config+0x320>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <bme280_config+0x324>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	2332      	movs	r3, #50	@ 0x32
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	2301      	movs	r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	1cfb      	adds	r3, r7, #3
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	22f5      	movs	r2, #245	@ 0xf5
 80016d6:	21ec      	movs	r1, #236	@ 0xec
 80016d8:	f008 fc14 	bl	8009f04 <HAL_I2C_Mem_Write>
 80016dc:	4603      	mov	r3, r0
 80016de:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	@ 0x64
 80016e8:	f006 fe36 	bl	8008358 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	e011      	b.n	8001716 <bme280_config+0x2fa>
        bme280_update();
 80016f2:	f000 f861 	bl	80017b8 <bme280_update>
        base += BME->altitude;
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <bme280_config+0x320>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80016fe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001706:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 800170a:	201e      	movs	r0, #30
 800170c:	f006 fe24 	bl	8008358 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	3301      	adds	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	2b31      	cmp	r3, #49	@ 0x31
 800171a:	ddea      	ble.n	80016f2 <bme280_config+0x2d6>
    }
    BME->base_altitude = (base / 50.0);
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <bme280_config+0x320>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001724:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001744 <bme280_config+0x328>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 8001730:	f000 f842 	bl	80017b8 <bme280_update>

    UNUSED(retVal);
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000234 	.word	0x20000234
 8001740:	20000230 	.word	0x20000230
 8001744:	42480000 	.word	0x42480000

08001748 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af04      	add	r7, sp, #16
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 8001752:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <bme280_init+0x5c>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 8001758:	4a13      	ldr	r2, [pc, #76]	@ (80017a8 <bme280_init+0x60>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <bme280_init+0x5c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <bme280_init+0x64>)
 8001764:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <bme280_init+0x68>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <bme280_init+0x60>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	2332      	movs	r3, #50	@ 0x32
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2301      	movs	r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	22d0      	movs	r2, #208	@ 0xd0
 8001782:	21ec      	movs	r1, #236	@ 0xec
 8001784:	f008 fcb8 	bl	800a0f8 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001788:	7b3b      	ldrb	r3, [r7, #12]
 800178a:	2b60      	cmp	r3, #96	@ 0x60
 800178c:	d103      	bne.n	8001796 <bme280_init+0x4e>
        is_BME_ok = 1;
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <bme280_init+0x6c>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001794:	e002      	b.n	800179c <bme280_init+0x54>
        is_BME_ok = 0;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <bme280_init+0x6c>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000234 	.word	0x20000234
 80017a8:	20000230 	.word	0x20000230
 80017ac:	20000804 	.word	0x20000804
 80017b0:	20000238 	.word	0x20000238
 80017b4:	20000828 	.word	0x20000828

080017b8 <bme280_update>:

void bme280_update() {
 80017b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017bc:	b0d2      	sub	sp, #328	@ 0x148
 80017be:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 80017c0:	f7ff fd56 	bl	8001270 <bme280_getVals>

    if(BME->isUpdated == 1){
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <bme280_update+0x88>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 840d 	bne.w	8001fec <bme280_update+0x834>

    	if (!bme_started_flag) {
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <bme280_update+0x8c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d112      	bne.n	8001800 <bme280_update+0x48>
    	    bme_started_flag = 1;
 80017da:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <bme280_update+0x8c>)
 80017dc:	2301      	movs	r3, #1
 80017de:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 80017e0:	f006 fdae 	bl	8008340 <HAL_GetTick>
 80017e4:	ee07 0a90 	vmov	s15, r0
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <bme280_update+0x88>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <bme280_update+0x88>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	e041      	b.n	8001884 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 8001800:	f006 fd9e 	bl	8008340 <HAL_GetTick>
 8001804:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001808:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <bme280_update+0x88>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	dd12      	ble.n	800184c <bme280_update+0x94>
 8001826:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001832:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <bme280_update+0x88>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	e007      	b.n	8001850 <bme280_update+0x98>
 8001840:	20000234 	.word	0x20000234
 8001844:	20000238 	.word	0x20000238
 8001848:	00000000 	.word	0x00000000
 800184c:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001848 <bme280_update+0x90>
 8001850:	4bda      	ldr	r3, [pc, #872]	@ (8001bbc <bme280_update+0x404>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 8001858:	4bd8      	ldr	r3, [pc, #864]	@ (8001bbc <bme280_update+0x404>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001860:	4bd6      	ldr	r3, [pc, #856]	@ (8001bbc <bme280_update+0x404>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001bc0 <bme280_update+0x408>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 8001870:	4bd2      	ldr	r3, [pc, #840]	@ (8001bbc <bme280_update+0x404>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001878:	ee07 2a90 	vmov	s15, r2
 800187c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001880:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001884:	4bcd      	ldr	r3, [pc, #820]	@ (8001bbc <bme280_update+0x404>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800188e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001892:	10da      	asrs	r2, r3, #3
 8001894:	4bc9      	ldr	r3, [pc, #804]	@ (8001bbc <bme280_update+0x404>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	4bc6      	ldr	r3, [pc, #792]	@ (8001bbc <bme280_update+0x404>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	12db      	asrs	r3, r3, #11
 80018b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 80018b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018b8:	111a      	asrs	r2, r3, #4
 80018ba:	4bc0      	ldr	r3, [pc, #768]	@ (8001bbc <bme280_update+0x404>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	1ad1      	subs	r1, r2, r3
 80018c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018c8:	111a      	asrs	r2, r3, #4
 80018ca:	4bbc      	ldr	r3, [pc, #752]	@ (8001bbc <bme280_update+0x404>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	131a      	asrs	r2, r3, #12
 80018da:	4bb8      	ldr	r3, [pc, #736]	@ (8001bbc <bme280_update+0x404>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	139b      	asrs	r3, r3, #14
 80018ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 80018ee:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80018f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018f6:	4413      	add	r3, r2
 80018f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 80018fc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3380      	adds	r3, #128	@ 0x80
 8001908:	121b      	asrs	r3, r3, #8
 800190a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800190e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	4ba8      	ldr	r3, [pc, #672]	@ (8001bbc <bme280_update+0x404>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001bc4 <bme280_update+0x40c>
 8001922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001926:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 800192a:	4ba4      	ldr	r3, [pc, #656]	@ (8001bbc <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	17da      	asrs	r2, r3, #31
 8001932:	653b      	str	r3, [r7, #80]	@ 0x50
 8001934:	657a      	str	r2, [r7, #84]	@ 0x54
 8001936:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800193a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800193e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001942:	17da      	asrs	r2, r3, #31
 8001944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001948:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800194c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001950:	460b      	mov	r3, r1
 8001952:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001958:	4613      	mov	r3, r2
 800195a:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800195e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001964:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001968:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800196c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001970:	fb03 f102 	mul.w	r1, r3, r2
 8001974:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001978:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	18ca      	adds	r2, r1, r3
 8001982:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001986:	fba3 4503 	umull	r4, r5, r3, r3
 800198a:	1953      	adds	r3, r2, r5
 800198c:	461d      	mov	r5, r3
 800198e:	4b8b      	ldr	r3, [pc, #556]	@ (8001bbc <bme280_update+0x404>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001998:	b21b      	sxth	r3, r3
 800199a:	17da      	asrs	r2, r3, #31
 800199c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019a4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019a8:	4603      	mov	r3, r0
 80019aa:	fb03 f205 	mul.w	r2, r3, r5
 80019ae:	460b      	mov	r3, r1
 80019b0:	fb04 f303 	mul.w	r3, r4, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	4602      	mov	r2, r0
 80019b8:	fba4 1202 	umull	r1, r2, r4, r2
 80019bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80019c0:	460a      	mov	r2, r1
 80019c2:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80019c6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80019ca:	4413      	add	r3, r2
 80019cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80019d0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 80019d4:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 80019d8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 80019dc:	4b77      	ldr	r3, [pc, #476]	@ (8001bbc <bme280_update+0x404>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	17da      	asrs	r2, r3, #31
 80019ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80019ee:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80019f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019f6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80019fa:	462a      	mov	r2, r5
 80019fc:	fb02 f203 	mul.w	r2, r2, r3
 8001a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a04:	4621      	mov	r1, r4
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	441a      	add	r2, r3
 8001a0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a10:	4621      	mov	r1, r4
 8001a12:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a16:	eb02 030b 	add.w	r3, r2, fp
 8001a1a:	469b      	mov	fp, r3
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a28:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a2c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a30:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a34:	1814      	adds	r4, r2, r0
 8001a36:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a38:	414b      	adcs	r3, r1
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a3c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a40:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a44:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <bme280_update+0x404>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	17da      	asrs	r2, r3, #31
 8001a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a56:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a66:	00d9      	lsls	r1, r3, #3
 8001a68:	2000      	movs	r0, #0
 8001a6a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a6e:	1814      	adds	r4, r2, r0
 8001a70:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a72:	414b      	adcs	r3, r1
 8001a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a76:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a7a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a7e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a82:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a86:	fb03 f102 	mul.w	r1, r3, r2
 8001a8a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	18ca      	adds	r2, r1, r3
 8001a98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a9c:	fba3 8903 	umull	r8, r9, r3, r3
 8001aa0:	eb02 0309 	add.w	r3, r2, r9
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	4b45      	ldr	r3, [pc, #276]	@ (8001bbc <bme280_update+0x404>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	17da      	asrs	r2, r3, #31
 8001ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001abc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	fb03 f209 	mul.w	r2, r3, r9
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	fb08 f303 	mul.w	r3, r8, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	4602      	mov	r2, r0
 8001ad0:	fba8 1202 	umull	r1, r2, r8, r2
 8001ad4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001ad8:	460a      	mov	r2, r1
 8001ada:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001ade:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ae8:	f04f 0000 	mov.w	r0, #0
 8001aec:	f04f 0100 	mov.w	r1, #0
 8001af0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001af4:	4623      	mov	r3, r4
 8001af6:	0a18      	lsrs	r0, r3, #8
 8001af8:	462b      	mov	r3, r5
 8001afa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001afe:	462b      	mov	r3, r5
 8001b00:	1219      	asrs	r1, r3, #8
 8001b02:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <bme280_update+0x404>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	17da      	asrs	r2, r3, #31
 8001b10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b14:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b1c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b20:	464a      	mov	r2, r9
 8001b22:	fb02 f203 	mul.w	r2, r2, r3
 8001b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b2a:	4644      	mov	r4, r8
 8001b2c:	fb04 f303 	mul.w	r3, r4, r3
 8001b30:	441a      	add	r2, r3
 8001b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b36:	4644      	mov	r4, r8
 8001b38:	fba3 4304 	umull	r4, r3, r3, r4
 8001b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b40:	4623      	mov	r3, r4
 8001b42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001b5c:	464c      	mov	r4, r9
 8001b5e:	0323      	lsls	r3, r4, #12
 8001b60:	4644      	mov	r4, r8
 8001b62:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b66:	4644      	mov	r4, r8
 8001b68:	0322      	lsls	r2, r4, #12
 8001b6a:	1884      	adds	r4, r0, r2
 8001b6c:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b6e:	eb41 0303 	adc.w	r3, r1, r3
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b78:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b7c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b80:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b84:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b88:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <bme280_update+0x404>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	88db      	ldrh	r3, [r3, #6]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b9c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ba0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001baa:	4642      	mov	r2, r8
 8001bac:	fb02 f203 	mul.w	r2, r2, r3
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	e005      	b.n	8001bc8 <bme280_update+0x410>
 8001bbc:	20000234 	.word	0x20000234
 8001bc0:	447a0000 	.word	0x447a0000
 8001bc4:	42c80000 	.word	0x42c80000
 8001bc8:	4622      	mov	r2, r4
 8001bca:	4641      	mov	r1, r8
 8001bcc:	fba2 1201 	umull	r1, r2, r2, r1
 8001bd0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001bda:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001bde:	4413      	add	r3, r2
 8001be0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	104a      	asrs	r2, r1, #1
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	17cb      	asrs	r3, r1, #31
 8001bf8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001bfc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c00:	4313      	orrs	r3, r2
 8001c02:	d106      	bne.n	8001c12 <bme280_update+0x45a>
        {
            P = 0;
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c10:	e14b      	b.n	8001eaa <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c12:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c16:	2100      	movs	r1, #0
 8001c18:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c1c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c24:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c28:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c2c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	07d9      	lsls	r1, r3, #31
 8001c3a:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c3e:	07d0      	lsls	r0, r2, #31
 8001c40:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c44:	1a84      	subs	r4, r0, r2
 8001c46:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c52:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	1891      	adds	r1, r2, r2
 8001c5c:	6239      	str	r1, [r7, #32]
 8001c5e:	415b      	adcs	r3, r3
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c66:	4621      	mov	r1, r4
 8001c68:	1851      	adds	r1, r2, r1
 8001c6a:	61b9      	str	r1, [r7, #24]
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	414b      	adcs	r3, r1
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c7e:	4649      	mov	r1, r9
 8001c80:	018b      	lsls	r3, r1, #6
 8001c82:	4641      	mov	r1, r8
 8001c84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c88:	4641      	mov	r1, r8
 8001c8a:	018a      	lsls	r2, r1, #6
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	1889      	adds	r1, r1, r2
 8001c90:	6139      	str	r1, [r7, #16]
 8001c92:	4649      	mov	r1, r9
 8001c94:	eb43 0101 	adc.w	r1, r3, r1
 8001c98:	6179      	str	r1, [r7, #20]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	008b      	lsls	r3, r1, #2
 8001caa:	4641      	mov	r1, r8
 8001cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	008a      	lsls	r2, r1, #2
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4622      	mov	r2, r4
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	462a      	mov	r2, r5
 8001cc4:	eb42 0303 	adc.w	r3, r2, r3
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	008b      	lsls	r3, r1, #2
 8001cda:	4641      	mov	r1, r8
 8001cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	008a      	lsls	r2, r1, #2
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4622      	mov	r2, r4
 8001cec:	189b      	adds	r3, r3, r2
 8001cee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001cf2:	462b      	mov	r3, r5
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	eb42 0303 	adc.w	r3, r2, r3
 8001cfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cfe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d06:	f7ff f8cd 	bl	8000ea4 <__aeabi_ldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d12:	4bb9      	ldr	r3, [pc, #740]	@ (8001ff8 <bme280_update+0x840>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	17da      	asrs	r2, r3, #31
 8001d20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d24:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d28:	f04f 0000 	mov.w	r0, #0
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	0b50      	lsrs	r0, r2, #13
 8001d32:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d36:	1359      	asrs	r1, r3, #13
 8001d38:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	fb00 f203 	mul.w	r2, r0, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	fb03 f301 	mul.w	r3, r3, r1
 8001d48:	4413      	add	r3, r2
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	fba2 1200 	umull	r1, r2, r2, r0
 8001d50:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d54:	460a      	mov	r2, r1
 8001d56:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001d5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001d5e:	4413      	add	r3, r2
 8001d60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d64:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d68:	f04f 0000 	mov.w	r0, #0
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	0b50      	lsrs	r0, r2, #13
 8001d72:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d76:	1359      	asrs	r1, r3, #13
 8001d78:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d7c:	462b      	mov	r3, r5
 8001d7e:	fb00 f203 	mul.w	r2, r0, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	fb03 f301 	mul.w	r3, r3, r1
 8001d88:	4413      	add	r3, r2
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	fba2 1200 	umull	r1, r2, r2, r0
 8001d90:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d94:	460a      	mov	r2, r1
 8001d96:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d9e:	4413      	add	r3, r2
 8001da0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001db0:	4621      	mov	r1, r4
 8001db2:	0e4a      	lsrs	r2, r1, #25
 8001db4:	4629      	mov	r1, r5
 8001db6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001dba:	4629      	mov	r1, r5
 8001dbc:	164b      	asrs	r3, r1, #25
 8001dbe:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff8 <bme280_update+0x840>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	17da      	asrs	r2, r3, #31
 8001dd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dd4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001dd8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001ddc:	462a      	mov	r2, r5
 8001dde:	fb02 f203 	mul.w	r2, r2, r3
 8001de2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001de6:	4621      	mov	r1, r4
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001df2:	4621      	mov	r1, r4
 8001df4:	fba2 1201 	umull	r1, r2, r2, r1
 8001df8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e06:	4413      	add	r3, r2
 8001e08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e18:	4621      	mov	r1, r4
 8001e1a:	0cca      	lsrs	r2, r1, #19
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e22:	4629      	mov	r1, r5
 8001e24:	14cb      	asrs	r3, r1, #19
 8001e26:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e2a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e32:	1884      	adds	r4, r0, r2
 8001e34:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e36:	eb41 0303 	adc.w	r3, r1, r3
 8001e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e3c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e40:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e44:	4621      	mov	r1, r4
 8001e46:	1889      	adds	r1, r1, r2
 8001e48:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	eb43 0101 	adc.w	r1, r3, r1
 8001e50:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e5e:	4623      	mov	r3, r4
 8001e60:	0a18      	lsrs	r0, r3, #8
 8001e62:	462b      	mov	r3, r5
 8001e64:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e68:	462b      	mov	r3, r5
 8001e6a:	1219      	asrs	r1, r3, #8
 8001e6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ff8 <bme280_update+0x840>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	17da      	asrs	r2, r3, #31
 8001e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e7c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e8a:	464c      	mov	r4, r9
 8001e8c:	0123      	lsls	r3, r4, #4
 8001e8e:	4644      	mov	r4, r8
 8001e90:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e94:	4644      	mov	r4, r8
 8001e96:	0122      	lsls	r2, r4, #4
 8001e98:	1884      	adds	r4, r0, r2
 8001e9a:	603c      	str	r4, [r7, #0]
 8001e9c:	eb41 0303 	adc.w	r3, r1, r3
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ea6:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001eaa:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001eae:	f7fe ffbb 	bl	8000e28 <__aeabi_l2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb67 	bl	8000588 <__aeabi_f2d>
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8001ffc <bme280_update+0x844>)
 8001ec0:	f7fe fce4 	bl	800088c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8002000 <bme280_update+0x848>)
 8001ed2:	f7fe fcdb 	bl	800088c <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4947      	ldr	r1, [pc, #284]	@ (8001ff8 <bme280_update+0x840>)
 8001edc:	680c      	ldr	r4, [r1, #0]
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fe81 	bl	8000be8 <__aeabi_d2f>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <bme280_update+0x840>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ef8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001efc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f04:	039a      	lsls	r2, r3, #14
 8001f06:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff8 <bme280_update+0x840>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f10:	051b      	lsls	r3, r3, #20
 8001f12:	1ad2      	subs	r2, r2, r3
 8001f14:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <bme280_update+0x840>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f2e:	0bdb      	lsrs	r3, r3, #15
 8001f30:	4a31      	ldr	r2, [pc, #196]	@ (8001ff8 <bme280_update+0x840>)
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f40:	fb01 f202 	mul.w	r2, r1, r2
 8001f44:	0a92      	lsrs	r2, r2, #10
 8001f46:	492c      	ldr	r1, [pc, #176]	@ (8001ff8 <bme280_update+0x840>)
 8001f48:	6809      	ldr	r1, [r1, #0]
 8001f4a:	6809      	ldr	r1, [r1, #0]
 8001f4c:	7f09      	ldrb	r1, [r1, #28]
 8001f4e:	4608      	mov	r0, r1
 8001f50:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001f54:	fb00 f101 	mul.w	r1, r0, r1
 8001f58:	0ac9      	lsrs	r1, r1, #11
 8001f5a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001f5e:	fb01 f202 	mul.w	r2, r1, r2
 8001f62:	0a92      	lsrs	r2, r2, #10
 8001f64:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f68:	4923      	ldr	r1, [pc, #140]	@ (8001ff8 <bme280_update+0x840>)
 8001f6a:	6809      	ldr	r1, [r1, #0]
 8001f6c:	6809      	ldr	r1, [r1, #0]
 8001f6e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f72:	fb01 f202 	mul.w	r2, r1, r2
 8001f76:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f7a:	0b92      	lsrs	r2, r2, #14
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f88:	0bdb      	lsrs	r3, r3, #15
 8001f8a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8e:	0bd2      	lsrs	r2, r2, #15
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	09db      	lsrs	r3, r3, #7
 8001f96:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <bme280_update+0x840>)
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	7e12      	ldrb	r2, [r2, #24]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fb2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001fb6:	bf28      	it	cs
 8001fb8:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001fbc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fc4:	0b1b      	lsrs	r3, r3, #12
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <bme280_update+0x840>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002004 <bme280_update+0x84c>
 8001fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fda:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001fde:	f7ff f9cb 	bl	8001378 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <bme280_update+0x840>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001fec:	bf00      	nop
 8001fee:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ff8:	20000234 	.word	0x20000234
 8001ffc:	40700000 	.word	0x40700000
 8002000:	40590000 	.word	0x40590000
 8002004:	44800000 	.word	0x44800000

08002008 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af04      	add	r7, sp, #16
 800200e:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 8002020:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <bmi088_init+0xa8>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <bmi088_init+0xac>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002038:	2101      	movs	r1, #1
 800203a:	2018      	movs	r0, #24
 800203c:	f00b fbac 	bl	800d798 <calloc>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68d8      	ldr	r0, [r3, #12]
 800204c:	2332      	movs	r3, #50	@ 0x32
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2301      	movs	r3, #1
 800205c:	2200      	movs	r2, #0
 800205e:	2130      	movs	r1, #48	@ 0x30
 8002060:	f008 f84a 	bl	800a0f8 <HAL_I2C_Mem_Read>
 8002064:	4603      	mov	r3, r0
 8002066:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68d8      	ldr	r0, [r3, #12]
 800206c:	2332      	movs	r3, #50	@ 0x32
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	2301      	movs	r3, #1
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	3301      	adds	r3, #1
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2301      	movs	r3, #1
 800207e:	2200      	movs	r2, #0
 8002080:	21d0      	movs	r1, #208	@ 0xd0
 8002082:	f008 f839 	bl	800a0f8 <HAL_I2C_Mem_Read>
 8002086:	4603      	mov	r3, r0
 8002088:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 800208a:	7b3b      	ldrb	r3, [r7, #12]
 800208c:	2b1e      	cmp	r3, #30
 800208e:	d003      	beq.n	8002098 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	d003      	beq.n	80020a6 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000239 	.word	0x20000239
 80020b4:	2000023a 	.word	0x2000023a

080020b8 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af04      	add	r7, sp, #16
 80020be:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f006 feb9 	bl	8008e3e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f006 feb3 	bl	8008e3e <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80020dc:	2301      	movs	r3, #1
 80020de:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68d8      	ldr	r0, [r3, #12]
 80020e4:	2364      	movs	r3, #100	@ 0x64
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	2301      	movs	r3, #1
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	227c      	movs	r2, #124	@ 0x7c
 80020f6:	2130      	movs	r1, #48	@ 0x30
 80020f8:	f007 ff04 	bl	8009f04 <HAL_I2C_Mem_Write>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	4313      	orrs	r3, r2
 8002104:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68d8      	ldr	r0, [r3, #12]
 800210e:	2364      	movs	r3, #100	@ 0x64
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2301      	movs	r3, #1
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	227d      	movs	r2, #125	@ 0x7d
 8002120:	2130      	movs	r1, #48	@ 0x30
 8002122:	f007 feef 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	4313      	orrs	r3, r2
 800212e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002130:	2014      	movs	r0, #20
 8002132:	f006 f911 	bl	8008358 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002136:	23b6      	movs	r3, #182	@ 0xb6
 8002138:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68d8      	ldr	r0, [r3, #12]
 800213e:	2364      	movs	r3, #100	@ 0x64
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	227e      	movs	r2, #126	@ 0x7e
 8002150:	2130      	movs	r1, #48	@ 0x30
 8002152:	f007 fed7 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	4313      	orrs	r3, r2
 800215e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <bmi088_config+0xb4>
 8002166:	4bb4      	ldr	r3, [pc, #720]	@ (8002438 <bmi088_config+0x380>)
 8002168:	22a1      	movs	r2, #161	@ 0xa1
 800216a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800216c:	200a      	movs	r0, #10
 800216e:	f006 f8f3 	bl	8008358 <HAL_Delay>

	buf[0] = FIFO_RESET;
 8002172:	23b0      	movs	r3, #176	@ 0xb0
 8002174:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68d8      	ldr	r0, [r3, #12]
 800217a:	2364      	movs	r3, #100	@ 0x64
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2301      	movs	r3, #1
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2301      	movs	r3, #1
 800218a:	227e      	movs	r2, #126	@ 0x7e
 800218c:	2130      	movs	r1, #48	@ 0x30
 800218e:	f007 feb9 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	4313      	orrs	r3, r2
 800219a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <bmi088_config+0xf0>
 80021a2:	4ba5      	ldr	r3, [pc, #660]	@ (8002438 <bmi088_config+0x380>)
 80021a4:	22a6      	movs	r2, #166	@ 0xa6
 80021a6:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021a8:	200a      	movs	r0, #10
 80021aa:	f006 f8d5 	bl	8008358 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80021ae:	23b6      	movs	r3, #182	@ 0xb6
 80021b0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68d8      	ldr	r0, [r3, #12]
 80021b6:	2364      	movs	r3, #100	@ 0x64
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	2214      	movs	r2, #20
 80021c8:	21d0      	movs	r1, #208	@ 0xd0
 80021ca:	f007 fe9b 	bl	8009f04 <HAL_I2C_Mem_Write>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <bmi088_config+0x12c>
 80021de:	4b96      	ldr	r3, [pc, #600]	@ (8002438 <bmi088_config+0x380>)
 80021e0:	22ab      	movs	r2, #171	@ 0xab
 80021e2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021e4:	200a      	movs	r0, #10
 80021e6:	f006 f8b7 	bl	8008358 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7a9b      	ldrb	r3, [r3, #10]
 80021ee:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68d8      	ldr	r0, [r3, #12]
 80021f4:	2364      	movs	r3, #100	@ 0x64
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	220f      	movs	r2, #15
 8002206:	21d0      	movs	r1, #208	@ 0xd0
 8002208:	f007 fe7c 	bl	8009f04 <HAL_I2C_Mem_Write>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4313      	orrs	r3, r2
 8002214:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <bmi088_config+0x16a>
 800221c:	4b86      	ldr	r3, [pc, #536]	@ (8002438 <bmi088_config+0x380>)
 800221e:	22b1      	movs	r2, #177	@ 0xb1
 8002220:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7a5b      	ldrb	r3, [r3, #9]
 8002226:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68d8      	ldr	r0, [r3, #12]
 800222c:	2314      	movs	r3, #20
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	2301      	movs	r3, #1
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2301      	movs	r3, #1
 800223c:	2210      	movs	r2, #16
 800223e:	21d0      	movs	r1, #208	@ 0xd0
 8002240:	f007 fe60 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	4313      	orrs	r3, r2
 800224c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <bmi088_config+0x1a2>
 8002254:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <bmi088_config+0x380>)
 8002256:	22b5      	movs	r2, #181	@ 0xb5
 8002258:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7a1b      	ldrb	r3, [r3, #8]
 800225e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68d8      	ldr	r0, [r3, #12]
 8002264:	2314      	movs	r3, #20
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	2211      	movs	r2, #17
 8002276:	21d0      	movs	r1, #208	@ 0xd0
 8002278:	f007 fe44 	bl	8009f04 <HAL_I2C_Mem_Write>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	4313      	orrs	r3, r2
 8002284:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <bmi088_config+0x1da>
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <bmi088_config+0x380>)
 800228e:	22b9      	movs	r2, #185	@ 0xb9
 8002290:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 8002292:	2014      	movs	r0, #20
 8002294:	f006 f860 	bl	8008358 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68d8      	ldr	r0, [r3, #12]
 80022a0:	2314      	movs	r3, #20
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	2215      	movs	r2, #21
 80022b2:	21d0      	movs	r1, #208	@ 0xd0
 80022b4:	f007 fe26 	bl	8009f04 <HAL_I2C_Mem_Write>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	4313      	orrs	r3, r2
 80022c0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <bmi088_config+0x216>
 80022c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002438 <bmi088_config+0x380>)
 80022ca:	22bf      	movs	r2, #191	@ 0xbf
 80022cc:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 80022ce:	2305      	movs	r3, #5
 80022d0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68d8      	ldr	r0, [r3, #12]
 80022d6:	2314      	movs	r3, #20
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2301      	movs	r3, #1
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	2216      	movs	r2, #22
 80022e8:	21d0      	movs	r1, #208	@ 0xd0
 80022ea:	f007 fe0b 	bl	8009f04 <HAL_I2C_Mem_Write>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <bmi088_config+0x24c>
 80022fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002438 <bmi088_config+0x380>)
 8002300:	22c3      	movs	r2, #195	@ 0xc3
 8002302:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002304:	2381      	movs	r3, #129	@ 0x81
 8002306:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68d8      	ldr	r0, [r3, #12]
 800230c:	2314      	movs	r3, #20
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	2218      	movs	r2, #24
 800231e:	21d0      	movs	r1, #208	@ 0xd0
 8002320:	f007 fdf0 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4313      	orrs	r3, r2
 800232c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <bmi088_config+0x282>
 8002334:	4b40      	ldr	r3, [pc, #256]	@ (8002438 <bmi088_config+0x380>)
 8002336:	22c7      	movs	r2, #199	@ 0xc7
 8002338:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800233a:	2304      	movs	r3, #4
 800233c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68d8      	ldr	r0, [r3, #12]
 8002342:	2314      	movs	r3, #20
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	2301      	movs	r3, #1
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	227d      	movs	r2, #125	@ 0x7d
 8002354:	2130      	movs	r1, #48	@ 0x30
 8002356:	f007 fdd5 	bl	8009f04 <HAL_I2C_Mem_Write>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	4313      	orrs	r3, r2
 8002362:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <bmi088_config+0x2b8>
 800236a:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <bmi088_config+0x380>)
 800236c:	22cc      	movs	r2, #204	@ 0xcc
 800236e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002370:	2008      	movs	r0, #8
 8002372:	f005 fff1 	bl	8008358 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	791b      	ldrb	r3, [r3, #4]
 800237a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68d8      	ldr	r0, [r3, #12]
 8002380:	2314      	movs	r3, #20
 8002382:	9302      	str	r3, [sp, #8]
 8002384:	2301      	movs	r3, #1
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2301      	movs	r3, #1
 8002390:	227c      	movs	r2, #124	@ 0x7c
 8002392:	2130      	movs	r1, #48	@ 0x30
 8002394:	f007 fdb6 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4313      	orrs	r3, r2
 80023a0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <bmi088_config+0x2f6>
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <bmi088_config+0x380>)
 80023aa:	22d1      	movs	r2, #209	@ 0xd1
 80023ac:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023ae:	2008      	movs	r0, #8
 80023b0:	f005 ffd2 	bl	8008358 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	799b      	ldrb	r3, [r3, #6]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	b25a      	sxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	79db      	ldrb	r3, [r3, #7]
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68d8      	ldr	r0, [r3, #12]
 80023d0:	2314      	movs	r3, #20
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	2301      	movs	r3, #1
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2301      	movs	r3, #1
 80023e0:	2240      	movs	r2, #64	@ 0x40
 80023e2:	2130      	movs	r1, #48	@ 0x30
 80023e4:	f007 fd8e 	bl	8009f04 <HAL_I2C_Mem_Write>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <bmi088_config+0x346>
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <bmi088_config+0x380>)
 80023fa:	22d6      	movs	r2, #214	@ 0xd6
 80023fc:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	795b      	ldrb	r3, [r3, #5]
 8002402:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68d8      	ldr	r0, [r3, #12]
 8002408:	2314      	movs	r3, #20
 800240a:	9302      	str	r3, [sp, #8]
 800240c:	2301      	movs	r3, #1
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	2241      	movs	r2, #65	@ 0x41
 800241a:	2130      	movs	r1, #48	@ 0x30
 800241c:	f007 fd72 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	4313      	orrs	r3, r2
 8002428:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <bmi088_config+0x384>
 8002430:	4b01      	ldr	r3, [pc, #4]	@ (8002438 <bmi088_config+0x380>)
 8002432:	22da      	movs	r2, #218	@ 0xda
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e001      	b.n	800243c <bmi088_config+0x384>
 8002438:	2000023c 	.word	0x2000023c

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800243c:	230a      	movs	r3, #10
 800243e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68d8      	ldr	r0, [r3, #12]
 8002444:	2314      	movs	r3, #20
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2301      	movs	r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2301      	movs	r3, #1
 8002454:	2253      	movs	r2, #83	@ 0x53
 8002456:	2130      	movs	r1, #48	@ 0x30
 8002458:	f007 fd54 	bl	8009f04 <HAL_I2C_Mem_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	4313      	orrs	r3, r2
 8002464:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002466:	2304      	movs	r3, #4
 8002468:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68d8      	ldr	r0, [r3, #12]
 800246e:	2314      	movs	r3, #20
 8002470:	9302      	str	r3, [sp, #8]
 8002472:	2301      	movs	r3, #1
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	2258      	movs	r2, #88	@ 0x58
 8002480:	2130      	movs	r1, #48	@ 0x30
 8002482:	f007 fd3f 	bl	8009f04 <HAL_I2C_Mem_Write>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4313      	orrs	r3, r2
 800248e:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002496:	4618      	mov	r0, r3
 8002498:	f006 fcc3 	bl	8008e22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f006 fcbd 	bl	8008e22 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 80024a8:	2046      	movs	r0, #70	@ 0x46
 80024aa:	f005 ff55 	bl	8008358 <HAL_Delay>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop

080024b8 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b092      	sub	sp, #72	@ 0x48
 80024bc:	af04      	add	r7, sp, #16
 80024be:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8211 	beq.w	80028f2 <bmi088_update+0x43a>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68d8      	ldr	r0, [r3, #12]
 80024d4:	2314      	movs	r3, #20
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	2309      	movs	r3, #9
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2301      	movs	r3, #1
 80024e4:	2212      	movs	r2, #18
 80024e6:	2130      	movs	r1, #48	@ 0x30
 80024e8:	f007 fe06 	bl	800a0f8 <HAL_I2C_Mem_Read>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68d8      	ldr	r0, [r3, #12]
 80024f6:	2314      	movs	r3, #20
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	2302      	movs	r3, #2
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	2222      	movs	r2, #34	@ 0x22
 8002508:	2130      	movs	r1, #48	@ 0x30
 800250a:	f007 fdf5 	bl	800a0f8 <HAL_I2C_Mem_Read>
 800250e:	4603      	mov	r3, r0
 8002510:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 8002514:	7c3b      	ldrb	r3, [r7, #16]
 8002516:	b21b      	sxth	r3, r3
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	b21a      	sxth	r2, r3
 800251c:	7c7b      	ldrb	r3, [r7, #17]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	b21b      	sxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b21b      	sxth	r3, r3
 8002528:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800252e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002534:	d305      	bcc.n	8002542 <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 8002536:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002538:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800253c:	b29b      	uxth	r3, r3
 800253e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002540:	e023      	b.n	800258a <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 8002542:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002544:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8002546:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	ee17 0a90 	vmov	r0, s15
 8002556:	f7fe f817 	bl	8000588 <__aeabi_f2d>
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002562:	f7fe f869 	bl	8000638 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4bd1      	ldr	r3, [pc, #836]	@ (80028b8 <bmi088_update+0x400>)
 8002574:	f7fd feaa 	bl	80002cc <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fb32 	bl	8000be8 <__aeabi_d2f>
 8002584:	4602      	mov	r2, r0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 800258a:	7f3b      	ldrb	r3, [r7, #28]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	7efb      	ldrb	r3, [r7, #27]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4313      	orrs	r3, r2
 8002594:	7eba      	ldrb	r2, [r7, #26]
 8002596:	4313      	orrs	r3, r2
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 800259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a4:	ee17 0a90 	vmov	r0, s15
 80025a8:	f7fd ffee 	bl	8000588 <__aeabi_f2d>
 80025ac:	a3ba      	add	r3, pc, #744	@ (adr r3, 8002898 <bmi088_update+0x3e0>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fe f841 	bl	8000638 <__aeabi_dmul>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	a3b8      	add	r3, pc, #736	@ (adr r3, 80028a0 <bmi088_update+0x3e8>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f962 	bl	800088c <__aeabi_ddiv>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7fe fb0a 	bl	8000be8 <__aeabi_d2f>
 80025d4:	4602      	mov	r2, r0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 80025da:	7e7b      	ldrb	r3, [r7, #25]
 80025dc:	b21b      	sxth	r3, r3
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	7e3b      	ldrb	r3, [r7, #24]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	b21b      	sxth	r3, r3
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	7dbb      	ldrb	r3, [r7, #22]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 80025fa:	7d7b      	ldrb	r3, [r7, #21]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	b21a      	sxth	r2, r3
 8002602:	7d3b      	ldrb	r3, [r7, #20]
 8002604:	b21b      	sxth	r3, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 800260a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002616:	ee17 0a90 	vmov	r0, s15
 800261a:	f7fd ffb5 	bl	8000588 <__aeabi_f2d>
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	4ba6      	ldr	r3, [pc, #664]	@ (80028bc <bmi088_update+0x404>)
 8002624:	f7fe f932 	bl	800088c <__aeabi_ddiv>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	4ba2      	ldr	r3, [pc, #648]	@ (80028c0 <bmi088_update+0x408>)
 8002636:	f7fd ffff 	bl	8000638 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b9f      	ldr	r3, [pc, #636]	@ (80028c4 <bmi088_update+0x40c>)
 8002648:	f7fd fff6 	bl	8000638 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	795b      	ldrb	r3, [r3, #5]
 8002658:	3301      	adds	r3, #1
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002662:	ee17 0a90 	vmov	r0, s15
 8002666:	f7fd ff8f 	bl	8000588 <__aeabi_f2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	ec43 2b11 	vmov	d1, r2, r3
 8002672:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80028a8 <bmi088_update+0x3f0>
 8002676:	f00d fda1 	bl	80101bc <pow>
 800267a:	ec53 2b10 	vmov	r2, r3, d0
 800267e:	4620      	mov	r0, r4
 8002680:	4629      	mov	r1, r5
 8002682:	f7fd ffd9 	bl	8000638 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	4b8d      	ldr	r3, [pc, #564]	@ (80028c8 <bmi088_update+0x410>)
 8002694:	f7fd fe18 	bl	80002c8 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	a383      	add	r3, pc, #524	@ (adr r3, 80028b0 <bmi088_update+0x3f8>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd ffc7 	bl	8000638 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4b82      	ldr	r3, [pc, #520]	@ (80028c0 <bmi088_update+0x408>)
 80026b8:	f7fe f8e8 	bl	800088c <__aeabi_ddiv>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fa90 	bl	8000be8 <__aeabi_d2f>
 80026c8:	4602      	mov	r2, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 80026ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026da:	ee17 0a90 	vmov	r0, s15
 80026de:	f7fd ff53 	bl	8000588 <__aeabi_f2d>
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	4b75      	ldr	r3, [pc, #468]	@ (80028bc <bmi088_update+0x404>)
 80026e8:	f7fe f8d0 	bl	800088c <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4b71      	ldr	r3, [pc, #452]	@ (80028c0 <bmi088_update+0x408>)
 80026fa:	f7fd ff9d 	bl	8000638 <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4b6e      	ldr	r3, [pc, #440]	@ (80028c4 <bmi088_update+0x40c>)
 800270c:	f7fd ff94 	bl	8000638 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4614      	mov	r4, r2
 8002716:	461d      	mov	r5, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	795b      	ldrb	r3, [r3, #5]
 800271c:	3301      	adds	r3, #1
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002726:	ee17 0a90 	vmov	r0, s15
 800272a:	f7fd ff2d 	bl	8000588 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	ec43 2b11 	vmov	d1, r2, r3
 8002736:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 80028a8 <bmi088_update+0x3f0>
 800273a:	f00d fd3f 	bl	80101bc <pow>
 800273e:	ec53 2b10 	vmov	r2, r3, d0
 8002742:	4620      	mov	r0, r4
 8002744:	4629      	mov	r1, r5
 8002746:	f7fd ff77 	bl	8000638 <__aeabi_dmul>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <bmi088_update+0x414>)
 8002758:	f7fd fdb8 	bl	80002cc <__adddf3>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	a352      	add	r3, pc, #328	@ (adr r3, 80028b0 <bmi088_update+0x3f8>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fd ff65 	bl	8000638 <__aeabi_dmul>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <bmi088_update+0x408>)
 800277c:	f7fe f886 	bl	800088c <__aeabi_ddiv>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa2e 	bl	8000be8 <__aeabi_d2f>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 8002792:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279e:	ee17 0a90 	vmov	r0, s15
 80027a2:	f7fd fef1 	bl	8000588 <__aeabi_f2d>
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	4b44      	ldr	r3, [pc, #272]	@ (80028bc <bmi088_update+0x404>)
 80027ac:	f7fe f86e 	bl	800088c <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <bmi088_update+0x408>)
 80027be:	f7fd ff3b 	bl	8000638 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b3d      	ldr	r3, [pc, #244]	@ (80028c4 <bmi088_update+0x40c>)
 80027d0:	f7fd ff32 	bl	8000638 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	795b      	ldrb	r3, [r3, #5]
 80027e0:	3301      	adds	r3, #1
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ea:	ee17 0a90 	vmov	r0, s15
 80027ee:	f7fd fecb 	bl	8000588 <__aeabi_f2d>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	ec43 2b11 	vmov	d1, r2, r3
 80027fa:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 80028a8 <bmi088_update+0x3f0>
 80027fe:	f00d fcdd 	bl	80101bc <pow>
 8002802:	ec53 2b10 	vmov	r2, r3, d0
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd ff15 	bl	8000638 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <bmi088_update+0x410>)
 800281c:	f7fd fd56 	bl	80002cc <__adddf3>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	a321      	add	r3, pc, #132	@ (adr r3, 80028b0 <bmi088_update+0x3f8>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd ff03 	bl	8000638 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <bmi088_update+0x408>)
 8002840:	f7fe f824 	bl	800088c <__aeabi_ddiv>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f9cc 	bl	8000be8 <__aeabi_d2f>
 8002850:	4602      	mov	r2, r0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <bmi088_update+0x418>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d03c      	beq.n	80028d8 <bmi088_update+0x420>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800286a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002876:	d502      	bpl.n	800287e <bmi088_update+0x3c6>
 8002878:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80028d4 <bmi088_update+0x41c>
 800287c:	e007      	b.n	800288e <bmi088_update+0x3d6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 8002894:	e023      	b.n	80028de <bmi088_update+0x426>
 8002896:	bf00      	nop
 8002898:	00000000 	.word	0x00000000
 800289c:	40438800 	.word	0x40438800
 80028a0:	00000000 	.word	0x00000000
 80028a4:	412e8480 	.word	0x412e8480
 80028a8:	00000000 	.word	0x00000000
 80028ac:	40000000 	.word	0x40000000
 80028b0:	51eb851f 	.word	0x51eb851f
 80028b4:	40239eb8 	.word	0x40239eb8
 80028b8:	40370000 	.word	0x40370000
 80028bc:	40e00000 	.word	0x40e00000
 80028c0:	408f4000 	.word	0x408f4000
 80028c4:	3ff80000 	.word	0x3ff80000
 80028c8:	40100000 	.word	0x40100000
 80028cc:	402e0000 	.word	0x402e0000
 80028d0:	2000023a 	.word	0x2000023a
 80028d4:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 80028d8:	4bcf      	ldr	r3, [pc, #828]	@ (8002c18 <bmi088_update+0x760>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 80028ec:	4bcb      	ldr	r3, [pc, #812]	@ (8002c1c <bmi088_update+0x764>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 81b2 	beq.w	8002c60 <bmi088_update+0x7a8>
 80028fc:	4bc7      	ldr	r3, [pc, #796]	@ (8002c1c <bmi088_update+0x764>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 81ad 	beq.w	8002c60 <bmi088_update+0x7a8>
		{
			if(is_starded){
 8002906:	4bc4      	ldr	r3, [pc, #784]	@ (8002c18 <bmi088_update+0x760>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 81a0 	beq.w	8002c50 <bmi088_update+0x798>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68d8      	ldr	r0, [r3, #12]
 8002914:	230a      	movs	r3, #10
 8002916:	9302      	str	r3, [sp, #8]
 8002918:	2306      	movs	r3, #6
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	2202      	movs	r2, #2
 8002926:	21d0      	movs	r1, #208	@ 0xd0
 8002928:	f007 fbe6 	bl	800a0f8 <HAL_I2C_Mem_Read>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 8002932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8191 	bne.w	8002c5e <bmi088_update+0x7a6>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 800293c:	7a7b      	ldrb	r3, [r7, #9]
 800293e:	b21b      	sxth	r3, r3
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	b21a      	sxth	r2, r3
 8002944:	7a3b      	ldrb	r3, [r7, #8]
 8002946:	b21b      	sxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	b21b      	sxth	r3, r3
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	b21a      	sxth	r2, r3
 8002954:	7abb      	ldrb	r3, [r7, #10]
 8002956:	b21b      	sxth	r3, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 800295c:	7b7b      	ldrb	r3, [r7, #13]
 800295e:	b21b      	sxth	r3, r3
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b21a      	sxth	r2, r3
 8002964:	7b3b      	ldrb	r3, [r7, #12]
 8002966:	b21b      	sxth	r3, r3
 8002968:	4313      	orrs	r3, r2
 800296a:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 800296c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fe04 	bl	8000588 <__aeabi_f2d>
 8002980:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002c08 <bmi088_update+0x750>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd ff81 	bl	800088c <__aeabi_ddiv>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4614      	mov	r4, r2
 8002990:	461d      	mov	r5, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a9b      	ldrb	r3, [r3, #10]
 8002996:	461a      	mov	r2, r3
 8002998:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800299c:	4113      	asrs	r3, r2
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a6:	ee17 0a90 	vmov	r0, s15
 80029aa:	f7fd fded 	bl	8000588 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4620      	mov	r0, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	f7fd fe3f 	bl	8000638 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	461d      	mov	r5, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fddd 	bl	8000588 <__aeabi_f2d>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4620      	mov	r0, r4
 80029d4:	4629      	mov	r1, r5
 80029d6:	f7fd fc77 	bl	80002c8 <__aeabi_dsub>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	a38b      	add	r3, pc, #556	@ (adr r3, 8002c10 <bmi088_update+0x758>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fe26 	bl	8000638 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f8f8 	bl	8000be8 <__aeabi_d2f>
 80029f8:	4602      	mov	r2, r0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 80029fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0a:	ee17 0a90 	vmov	r0, s15
 8002a0e:	f7fd fdbb 	bl	8000588 <__aeabi_f2d>
 8002a12:	a37d      	add	r3, pc, #500	@ (adr r3, 8002c08 <bmi088_update+0x750>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd ff38 	bl	800088c <__aeabi_ddiv>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	461d      	mov	r5, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7a9b      	ldrb	r3, [r3, #10]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a2e:	4113      	asrs	r3, r2
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a38:	ee17 0a90 	vmov	r0, s15
 8002a3c:	f7fd fda4 	bl	8000588 <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fdf6 	bl	8000638 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd94 	bl	8000588 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4620      	mov	r0, r4
 8002a66:	4629      	mov	r1, r5
 8002a68:	f7fd fc2e 	bl	80002c8 <__aeabi_dsub>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	a366      	add	r3, pc, #408	@ (adr r3, 8002c10 <bmi088_update+0x758>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fddd 	bl	8000638 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f8af 	bl	8000be8 <__aeabi_d2f>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002a90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9c:	ee17 0a90 	vmov	r0, s15
 8002aa0:	f7fd fd72 	bl	8000588 <__aeabi_f2d>
 8002aa4:	a358      	add	r3, pc, #352	@ (adr r3, 8002c08 <bmi088_update+0x750>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd feef 	bl	800088c <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4614      	mov	r4, r2
 8002ab4:	461d      	mov	r5, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7a9b      	ldrb	r3, [r3, #10]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ac0:	4113      	asrs	r3, r2
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aca:	ee17 0a90 	vmov	r0, s15
 8002ace:	f7fd fd5b 	bl	8000588 <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fd fdad 	bl	8000638 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd4b 	bl	8000588 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f7fd fbe5 	bl	80002c8 <__aeabi_dsub>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	a342      	add	r3, pc, #264	@ (adr r3, 8002c10 <bmi088_update+0x758>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fd94 	bl	8000638 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	f7fe f866 	bl	8000be8 <__aeabi_d2f>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b2e:	eef1 6a67 	vneg.f32	s13, s15
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002b44:	eef1 7a67 	vneg.f32	s15, s15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002b54:	eeb0 3a64 	vmov.f32	s6, s9
 8002b58:	eef0 2a45 	vmov.f32	s5, s10
 8002b5c:	eeb0 2a67 	vmov.f32	s4, s15
 8002b60:	eef0 1a65 	vmov.f32	s3, s11
 8002b64:	eeb0 1a46 	vmov.f32	s2, s12
 8002b68:	eef0 0a66 	vmov.f32	s1, s13
 8002b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b70:	f003 f9d6 	bl	8005f20 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002b74:	f003 ff70 	bl	8006a58 <quaternionToYaw>
 8002b78:	eef0 7a40 	vmov.f32	s15, s0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002b82:	f003 ffc7 	bl	8006b14 <quaternionToPitch>
 8002b86:	eef0 7a40 	vmov.f32	s15, s0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002b90:	f003 fff8 	bl	8006b84 <quaternionToRoll>
 8002b94:	eef0 7a40 	vmov.f32	s15, s0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002b9e:	f003 fe33 	bl	8006808 <quaternionToThetaZ>
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002bac:	f002 ffa4 	bl	8005af8 <quaternionToYawDegree1>
 8002bb0:	eef0 7a40 	vmov.f32	s15, s0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002bba:	f003 feb5 	bl	8006928 <quaternionToPitchDegree>
 8002bbe:	eef0 7a40 	vmov.f32	s15, s0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002bc8:	f003 fefe 	bl	80069c8 <quaternionToRollDegree>
 8002bcc:	eef0 7a40 	vmov.f32	s15, s0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	edd3 7a06 	vldr	s15, [r3, #24]
 8002be2:	eef1 7a67 	vneg.f32	s15, s15
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 6a08 	vldr	s13, [r3, #32]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002bf2:	eef0 1a46 	vmov.f32	s3, s12
 8002bf6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bfa:	eef0 0a67 	vmov.f32	s1, s15
 8002bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8002c02:	f002 fd5f 	bl	80056c4 <ekf_predict>
 8002c06:	e00b      	b.n	8002c20 <bmi088_update+0x768>
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40dfffc0 	.word	0x40dfffc0
 8002c10:	a0000000 	.word	0xa0000000
 8002c14:	3f91df46 	.word	0x3f91df46
 8002c18:	2000023a 	.word	0x2000023a
 8002c1c:	20000239 	.word	0x20000239
				BMI->datas.yaw1 = quaternionToYaw1();
 8002c20:	f002 fe76 	bl	8005910 <quaternionToYaw1>
 8002c24:	eef0 7a40 	vmov.f32	s15, s0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002c2e:	f002 fecd 	bl	80059cc <quaternionToPitch1>
 8002c32:	eef0 7a40 	vmov.f32	s15, s0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002c3c:	f002 fefe 	bl	8005a3c <quaternionToRoll1>
 8002c40:	eef0 7a40 	vmov.f32	s15, s0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <bmi088_update+0x7b0>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002c56:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <bmi088_update+0x7b4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e000      	b.n	8002c60 <bmi088_update+0x7a8>
					return;
 8002c5e:	bf00      	nop
		}
}
 8002c60:	3738      	adds	r7, #56	@ 0x38
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bdb0      	pop	{r4, r5, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000023b 	.word	0x2000023b
 8002c6c:	20000239 	.word	0x20000239

08002c70 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	705a      	strb	r2, [r3, #1]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff fc01 	bl	80024b8 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d74 <get_offset+0xd0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d1f8      	bne.n	8002cb0 <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cc4:	da2d      	bge.n	8002d22 <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	ed93 7a00 	vldr	s14, [r3]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002d1a:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <get_offset+0xd0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e7c6      	b.n	8002cb0 <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	ed93 7a00 	vldr	s14, [r3]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d78 <get_offset+0xd4>
 8002d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d36:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d78 <get_offset+0xd4>
 8002d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d4e:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d78 <get_offset+0xd4>
 8002d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d66:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002d6a:	bf00      	nop
		}

	}
}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2000023b 	.word	0x2000023b
 8002d78:	447a0000 	.word	0x447a0000

08002d7c <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002d80:	f000 f802 	bl	8002d88 <flight_algorithm_reset>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <flight_algorithm_reset+0x68>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <flight_algorithm_reset+0x6c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002d98:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <flight_algorithm_reset+0x70>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <flight_algorithm_reset+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002da4:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <flight_algorithm_reset+0x78>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002daa:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <flight_algorithm_reset+0x7c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002db0:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <flight_algorithm_reset+0x80>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002db6:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <flight_algorithm_reset+0x84>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <flight_algorithm_reset+0x88>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <flight_algorithm_reset+0x8c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002dca:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <flight_algorithm_reset+0x90>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002dd0:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <flight_algorithm_reset+0x94>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002dd6:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <flight_algorithm_reset+0x98>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <flight_algorithm_reset+0x9c>)
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000240 	.word	0x20000240
 8002df4:	20000241 	.word	0x20000241
 8002df8:	20000014 	.word	0x20000014
 8002dfc:	20000242 	.word	0x20000242
 8002e00:	20000243 	.word	0x20000243
 8002e04:	20000244 	.word	0x20000244
 8002e08:	20000254 	.word	0x20000254
 8002e0c:	2000025c 	.word	0x2000025c
 8002e10:	20000258 	.word	0x20000258
 8002e14:	20000250 	.word	0x20000250
 8002e18:	20000016 	.word	0x20000016
 8002e1c:	20000015 	.word	0x20000015
 8002e20:	20000248 	.word	0x20000248
 8002e24:	2000024c 	.word	0x2000024c

08002e28 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002e34:	68b8      	ldr	r0, [r7, #8]
 8002e36:	f000 f921 	bl	800307c <calculate_total_acceleration>
 8002e3a:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002e3e:	4b7e      	ldr	r3, [pc, #504]	@ (8003038 <flight_algorithm_update+0x210>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	f200 80ed 	bhi.w	8003022 <flight_algorithm_update+0x1fa>
 8002e48:	a201      	add	r2, pc, #4	@ (adr r2, 8002e50 <flight_algorithm_update+0x28>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e65 	.word	0x08002e65
 8002e54:	08002ea1 	.word	0x08002ea1
 8002e58:	08002ed3 	.word	0x08002ed3
 8002e5c:	08003023 	.word	0x08003023
 8002e60:	08003023 	.word	0x08003023
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002e64:	4b75      	ldr	r3, [pc, #468]	@ (800303c <flight_algorithm_update+0x214>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	dc00      	bgt.n	8002e7a <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002e78:	e0d3      	b.n	8003022 <flight_algorithm_update+0x1fa>
                current_phase = PHASE_BOOST;
 8002e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003038 <flight_algorithm_update+0x210>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002e80:	4b6f      	ldr	r3, [pc, #444]	@ (8003040 <flight_algorithm_update+0x218>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002e86:	f005 fa5b 	bl	8008340 <HAL_GetTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a6d      	ldr	r2, [pc, #436]	@ (8003044 <flight_algorithm_update+0x21c>)
 8002e8e:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002e90:	4b6d      	ldr	r3, [pc, #436]	@ (8003048 <flight_algorithm_update+0x220>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003048 <flight_algorithm_update+0x220>)
 8002e9c:	801a      	strh	r2, [r3, #0]
            break;
 8002e9e:	e0c0      	b.n	8003022 <flight_algorithm_update+0x1fa>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002ea0:	f005 fa4e 	bl	8008340 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b67      	ldr	r3, [pc, #412]	@ (8003044 <flight_algorithm_update+0x21c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f240 80b3 	bls.w	800301c <flight_algorithm_update+0x1f4>
                current_phase = PHASE_COAST;
 8002eb6:	4b60      	ldr	r3, [pc, #384]	@ (8003038 <flight_algorithm_update+0x210>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002ebc:	4b63      	ldr	r3, [pc, #396]	@ (800304c <flight_algorithm_update+0x224>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002ec2:	4b61      	ldr	r3, [pc, #388]	@ (8003048 <flight_algorithm_update+0x220>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8003048 <flight_algorithm_update+0x220>)
 8002ece:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002ed0:	e0a4      	b.n	800301c <flight_algorithm_update+0x1f4>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ed8:	4b5d      	ldr	r3, [pc, #372]	@ (8003050 <flight_algorithm_update+0x228>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	dd09      	ble.n	8002efc <flight_algorithm_update+0xd4>
                is_armed = 1;
 8002ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8003054 <flight_algorithm_update+0x22c>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002eee:	4b56      	ldr	r3, [pc, #344]	@ (8003048 <flight_algorithm_update+0x220>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <flight_algorithm_update+0x220>)
 8002efa:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002efc:	4b55      	ldr	r3, [pc, #340]	@ (8003054 <flight_algorithm_update+0x22c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01f      	beq.n	8002f44 <flight_algorithm_update+0x11c>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002f0a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002f0e:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <flight_algorithm_update+0x230>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	dd12      	ble.n	8002f44 <flight_algorithm_update+0x11c>
 8002f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800305c <flight_algorithm_update+0x234>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <flight_algorithm_update+0x11c>
                drogue_deployed = 1;
 8002f26:	4b4e      	ldr	r3, [pc, #312]	@ (8003060 <flight_algorithm_update+0x238>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800305c <flight_algorithm_update+0x234>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002f32:	4b45      	ldr	r3, [pc, #276]	@ (8003048 <flight_algorithm_update+0x220>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	4b42      	ldr	r3, [pc, #264]	@ (8003048 <flight_algorithm_update+0x220>)
 8002f3e:	801a      	strh	r2, [r3, #0]
                deploy_drogue_parachute();
 8002f40:	f000 f906 	bl	8003150 <deploy_drogue_parachute>
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002f44:	4b43      	ldr	r3, [pc, #268]	@ (8003054 <flight_algorithm_update+0x22c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d036      	beq.n	8002fba <flight_algorithm_update+0x192>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	d52e      	bpl.n	8002fba <flight_algorithm_update+0x192>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f62:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <flight_algorithm_update+0x23c>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f70:	d523      	bpl.n	8002fba <flight_algorithm_update+0x192>
 8002f72:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <flight_algorithm_update+0x240>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01f      	beq.n	8002fba <flight_algorithm_update+0x192>
                apogee_counter++;
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800306c <flight_algorithm_update+0x244>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a3a      	ldr	r2, [pc, #232]	@ (800306c <flight_algorithm_update+0x244>)
 8002f82:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <flight_algorithm_update+0x244>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	dd19      	ble.n	8002fc0 <flight_algorithm_update+0x198>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003048 <flight_algorithm_update+0x220>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f043 0310 	orr.w	r3, r3, #16
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <flight_algorithm_update+0x220>)
 8002f98:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <flight_algorithm_update+0x220>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b28      	ldr	r3, [pc, #160]	@ (8003048 <flight_algorithm_update+0x220>)
 8002fa6:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <flight_algorithm_update+0x238>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 8002fae:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <flight_algorithm_update+0x240>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
                    deploy_drogue_parachute();
 8002fb4:	f000 f8cc 	bl	8003150 <deploy_drogue_parachute>
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 8002fb8:	e002      	b.n	8002fc0 <flight_algorithm_update+0x198>
                }
            } else {
                apogee_counter = 0;
 8002fba:	4b2c      	ldr	r3, [pc, #176]	@ (800306c <flight_algorithm_update+0x244>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <flight_algorithm_update+0x23c>)
 8002fc6:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8002fc8:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <flight_algorithm_update+0x238>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d027      	beq.n	8003020 <flight_algorithm_update+0x1f8>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fd6:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <flight_algorithm_update+0x248>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe4:	d400      	bmi.n	8002fe8 <flight_algorithm_update+0x1c0>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                deploy_main_parachute();
            }
            break;
 8002fe6:	e01b      	b.n	8003020 <flight_algorithm_update+0x1f8>
                current_phase = PHASE_MAIN_DESCENT;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <flight_algorithm_update+0x210>)
 8002fea:	2203      	movs	r2, #3
 8002fec:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002fee:	4b16      	ldr	r3, [pc, #88]	@ (8003048 <flight_algorithm_update+0x220>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <flight_algorithm_update+0x220>)
 8002ffa:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002ffc:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <flight_algorithm_update+0x220>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <flight_algorithm_update+0x220>)
 8003008:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 800300a:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <flight_algorithm_update+0x24c>)
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8003010:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <flight_algorithm_update+0x238>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
                deploy_main_parachute();
 8003016:	f000 f8f3 	bl	8003200 <deploy_main_parachute>
            break;
 800301a:	e001      	b.n	8003020 <flight_algorithm_update+0x1f8>
            break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <flight_algorithm_update+0x1fa>
            break;
 8003020:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    deploy_parachute_update();
 8003022:	f000 f8b1 	bl	8003188 <deploy_parachute_update>
    prev_altitude = bme->altitude;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a13      	ldr	r2, [pc, #76]	@ (8003078 <flight_algorithm_update+0x250>)
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000240 	.word	0x20000240
 800303c:	20000004 	.word	0x20000004
 8003040:	20000241 	.word	0x20000241
 8003044:	20000250 	.word	0x20000250
 8003048:	2000025c 	.word	0x2000025c
 800304c:	20000014 	.word	0x20000014
 8003050:	20000008 	.word	0x20000008
 8003054:	20000242 	.word	0x20000242
 8003058:	20000010 	.word	0x20000010
 800305c:	20000015 	.word	0x20000015
 8003060:	20000243 	.word	0x20000243
 8003064:	2000024c 	.word	0x2000024c
 8003068:	20000016 	.word	0x20000016
 800306c:	20000248 	.word	0x20000248
 8003070:	2000000c 	.word	0x2000000c
 8003074:	20000244 	.word	0x20000244
 8003078:	20000258 	.word	0x20000258

0800307c <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003090:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80030a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80030a4:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80030b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	eeb0 0a67 	vmov.f32	s0, s15
 80030c0:	f00d f85e 	bl	8010180 <sqrtf>
 80030c4:	eef0 7a40 	vmov.f32	s15, s0
}
 80030c8:	eeb0 0a67 	vmov.f32	s0, s15
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
    return status_bits;
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <flight_algorithm_get_status_bits+0x14>)
 80030da:	881b      	ldrh	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	2000025c 	.word	0x2000025c

080030ec <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80030f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80030fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80030fe:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 8003102:	4a09      	ldr	r2, [pc, #36]	@ (8003128 <flight_algorithm_set_parameters+0x3c>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 8003108:	4a08      	ldr	r2, [pc, #32]	@ (800312c <flight_algorithm_set_parameters+0x40>)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <flight_algorithm_set_parameters+0x44>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 8003114:	4a07      	ldr	r2, [pc, #28]	@ (8003134 <flight_algorithm_set_parameters+0x48>)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000004 	.word	0x20000004
 800312c:	20000008 	.word	0x20000008
 8003130:	2000000c 	.word	0x2000000c
 8003134:	20000010 	.word	0x20000010

08003138 <flight_algorithm_get_start_time>:

uint32_t flight_algorithm_get_start_time(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
    return flight_start_time;
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <flight_algorithm_get_start_time+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000250 	.word	0x20000250

08003150 <deploy_drogue_parachute>:

void deploy_drogue_parachute(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
    if (!drogue_pulse_active) {
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <deploy_drogue_parachute+0x2c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <deploy_drogue_parachute+0x26>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800315c:	2201      	movs	r2, #1
 800315e:	2140      	movs	r1, #64	@ 0x40
 8003160:	4807      	ldr	r0, [pc, #28]	@ (8003180 <deploy_drogue_parachute+0x30>)
 8003162:	f006 fd29 	bl	8009bb8 <HAL_GPIO_WritePin>
        drogue_pulse_start_time = HAL_GetTick();
 8003166:	f005 f8eb 	bl	8008340 <HAL_GetTick>
 800316a:	4603      	mov	r3, r0
 800316c:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <deploy_drogue_parachute+0x34>)
 800316e:	6013      	str	r3, [r2, #0]
        drogue_pulse_active = 1;
 8003170:	4b02      	ldr	r3, [pc, #8]	@ (800317c <deploy_drogue_parachute+0x2c>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
    }
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000025e 	.word	0x2000025e
 8003180:	40020800 	.word	0x40020800
 8003184:	20000260 	.word	0x20000260

08003188 <deploy_parachute_update>:

void deploy_parachute_update(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
    if (drogue_pulse_active && (HAL_GetTick() - drogue_pulse_start_time >= 1000)) {
 800318c:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <deploy_parachute_update+0x60>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <deploy_parachute_update+0x2e>
 8003194:	f005 f8d4 	bl	8008340 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <deploy_parachute_update+0x64>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031a4:	d307      	bcc.n	80031b6 <deploy_parachute_update+0x2e>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2140      	movs	r1, #64	@ 0x40
 80031aa:	4811      	ldr	r0, [pc, #68]	@ (80031f0 <deploy_parachute_update+0x68>)
 80031ac:	f006 fd04 	bl	8009bb8 <HAL_GPIO_WritePin>
        drogue_pulse_active = 0;
 80031b0:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <deploy_parachute_update+0x60>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
    }
    if (main_pulse_active && (HAL_GetTick() - main_pulse_start_time >= 1000)) {
 80031b6:	4b0f      	ldr	r3, [pc, #60]	@ (80031f4 <deploy_parachute_update+0x6c>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <deploy_parachute_update+0x5a>
 80031be:	f005 f8bf 	bl	8008340 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <deploy_parachute_update+0x70>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031ce:	d308      	bcc.n	80031e2 <deploy_parachute_update+0x5a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80031d0:	2200      	movs	r2, #0
 80031d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031d6:	4809      	ldr	r0, [pc, #36]	@ (80031fc <deploy_parachute_update+0x74>)
 80031d8:	f006 fcee 	bl	8009bb8 <HAL_GPIO_WritePin>
        main_pulse_active = 0;
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <deploy_parachute_update+0x6c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
    }
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	2000025e 	.word	0x2000025e
 80031ec:	20000260 	.word	0x20000260
 80031f0:	40020800 	.word	0x40020800
 80031f4:	20000264 	.word	0x20000264
 80031f8:	20000268 	.word	0x20000268
 80031fc:	40020000 	.word	0x40020000

08003200 <deploy_main_parachute>:

void deploy_main_parachute(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
    if (!main_pulse_active) {
 8003204:	4b09      	ldr	r3, [pc, #36]	@ (800322c <deploy_main_parachute+0x2c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10d      	bne.n	8003228 <deploy_main_parachute+0x28>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003212:	4807      	ldr	r0, [pc, #28]	@ (8003230 <deploy_main_parachute+0x30>)
 8003214:	f006 fcd0 	bl	8009bb8 <HAL_GPIO_WritePin>
        main_pulse_start_time = HAL_GetTick();
 8003218:	f005 f892 	bl	8008340 <HAL_GetTick>
 800321c:	4603      	mov	r3, r0
 800321e:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <deploy_main_parachute+0x34>)
 8003220:	6013      	str	r3, [r2, #0]
        main_pulse_active = 1;
 8003222:	4b02      	ldr	r3, [pc, #8]	@ (800322c <deploy_main_parachute+0x2c>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
    }
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000264 	.word	0x20000264
 8003230:	40020000 	.word	0x40020000
 8003234:	20000268 	.word	0x20000268

08003238 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e01f      	b.n	800329e <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	e016      	b.n	8003292 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	429a      	cmp	r2, r3
 800326a:	d101      	bne.n	8003270 <KalmanFilter_Init+0x38>
 800326c:	491b      	ldr	r1, [pc, #108]	@ (80032dc <KalmanFilter_Init+0xa4>)
 800326e:	e001      	b.n	8003274 <KalmanFilter_Init+0x3c>
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	3302      	adds	r3, #2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4403      	add	r3, r0
 8003288:	3304      	adds	r3, #4
 800328a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3301      	adds	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b02      	cmp	r3, #2
 8003296:	dde5      	ble.n	8003264 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	dddc      	ble.n	800325e <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0e      	ldr	r2, [pc, #56]	@ (80032e0 <KalmanFilter_Init+0xa8>)
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a0d      	ldr	r2, [pc, #52]	@ (80032e4 <KalmanFilter_Init+0xac>)
 80032ae:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0d      	ldr	r2, [pc, #52]	@ (80032e8 <KalmanFilter_Init+0xb0>)
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	42c80000 	.word	0x42c80000
 80032e0:	3c23d70a 	.word	0x3c23d70a
 80032e4:	3ba3d70a 	.word	0x3ba3d70a
 80032e8:	40a00000 	.word	0x40a00000

080032ec <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80032f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80032fc:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	edd3 7a01 	vldr	s15, [r3, #4]
 8003306:	eef0 7ae7 	vabs.f32	s15, s15
 800330a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003370 <KalmanFilter_Update+0x84>
 800330e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	dd0f      	ble.n	8003338 <KalmanFilter_Update+0x4c>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	edd3 7a01 	vldr	s15, [r3, #4]
 800331e:	eef0 7ae7 	vabs.f32	s15, s15
 8003322:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003374 <KalmanFilter_Update+0x88>
 8003326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	d503      	bpl.n	8003338 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	649a      	str	r2, [r3, #72]	@ 0x48
 8003336:	e002      	b.n	800333e <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 800333e:	ed97 0a00 	vldr	s0, [r7]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f818 	bl	8003378 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 8003348:	edd7 0a01 	vldr	s1, [r7, #4]
 800334c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa1d 	bl	8003790 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f001 f96a 	bl	8004630 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	ee07 3a90 	vmov	s15, r3
}
 8003364:	eeb0 0a67 	vmov.f32	s0, s15
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	43960000 	.word	0x43960000
 8003374:	43af0000 	.word	0x43af0000

08003378 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b0b6      	sub	sp, #216	@ 0xd8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003384:	edd7 7a00 	vldr	s15, [r7]
 8003388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800338c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003390:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003394:	edd7 7a00 	vldr	s15, [r7]
 8003398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 80033a0:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80033a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033a8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80033b8:	edd7 7a00 	vldr	s15, [r7]
 80033bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80033ca:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80033ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033d2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80033d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033de:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80033ee:	edd7 7a00 	vldr	s15, [r7]
 80033f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fa:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800340c:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003414:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800341c:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003426:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800342a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800342e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003432:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800343a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800343e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003442:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800344a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800344e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003452:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003456:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800345a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800345e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003462:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800346a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 800346e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003472:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003476:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800347a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003482:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003486:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800348a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003492:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003496:	ed97 7a00 	vldr	s14, [r7]
 800349a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800349e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034a2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 80034a6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80034aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034b2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034ba:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 80034be:	ed97 7a00 	vldr	s14, [r7]
 80034c2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80034c6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80034ca:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80034ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 80034d6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034da:	657b      	str	r3, [r7, #84]	@ 0x54
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 80034e0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80034e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 80034ec:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	673b      	str	r3, [r7, #112]	@ 0x70
 800350c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003510:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 8003512:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003516:	2224      	movs	r2, #36	@ 0x24
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f00a ff2e 	bl	800e37c <memset>
    float FPFT[3][3] = {0};
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	2224      	movs	r2, #36	@ 0x24
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f00a ff27 	bl	800e37c <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003534:	e06a      	b.n	800360c <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800353c:	e05d      	b.n	80035fa <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 800353e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	33d8      	adds	r3, #216	@ 0xd8
 8003552:	443b      	add	r3, r7
 8003554:	3ba8      	subs	r3, #168	@ 0xa8
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003562:	e041      	b.n	80035e8 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003564:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	33d8      	adds	r3, #216	@ 0xd8
 8003578:	443b      	add	r3, r7
 800357a:	3ba8      	subs	r3, #168	@ 0xa8
 800357c:	ed93 7a00 	vldr	s14, [r3]
 8003580:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	33d8      	adds	r3, #216	@ 0xd8
 8003594:	443b      	add	r3, r7
 8003596:	3b84      	subs	r3, #132	@ 0x84
 8003598:	edd3 6a00 	vldr	s13, [r3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035ac:	4413      	add	r3, r2
 80035ae:	3302      	adds	r3, #2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	edd3 7a00 	vldr	s15, [r3]
 80035ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	33d8      	adds	r3, #216	@ 0xd8
 80035d6:	443b      	add	r3, r7
 80035d8:	3ba8      	subs	r3, #168	@ 0xa8
 80035da:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80035de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035e2:	3301      	adds	r3, #1
 80035e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	ddb9      	ble.n	8003564 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 80035f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035f4:	3301      	adds	r3, #1
 80035f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80035fe:	2b02      	cmp	r3, #2
 8003600:	dd9d      	ble.n	800353e <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003606:	3301      	adds	r3, #1
 8003608:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800360c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003610:	2b02      	cmp	r3, #2
 8003612:	dd90      	ble.n	8003536 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800361a:	e069      	b.n	80036f0 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003622:	e05c      	b.n	80036de <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 8003624:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	33d8      	adds	r3, #216	@ 0xd8
 8003638:	443b      	add	r3, r7
 800363a:	3bcc      	subs	r3, #204	@ 0xcc
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003648:	e040      	b.n	80036cc <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 800364a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	33d8      	adds	r3, #216	@ 0xd8
 800365e:	443b      	add	r3, r7
 8003660:	3bcc      	subs	r3, #204	@ 0xcc
 8003662:	ed93 7a00 	vldr	s14, [r3]
 8003666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	33d8      	adds	r3, #216	@ 0xd8
 800367a:	443b      	add	r3, r7
 800367c:	3ba8      	subs	r3, #168	@ 0xa8
 800367e:	edd3 6a00 	vldr	s13, [r3]
 8003682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	33d8      	adds	r3, #216	@ 0xd8
 8003696:	443b      	add	r3, r7
 8003698:	3b84      	subs	r3, #132	@ 0x84
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	33d8      	adds	r3, #216	@ 0xd8
 80036ba:	443b      	add	r3, r7
 80036bc:	3bcc      	subs	r3, #204	@ 0xcc
 80036be:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80036c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036c6:	3301      	adds	r3, #1
 80036c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	ddba      	ble.n	800364a <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 80036d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036d8:	3301      	adds	r3, #1
 80036da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	dd9e      	ble.n	8003624 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 80036e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036ea:	3301      	adds	r3, #1
 80036ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	dd91      	ble.n	800361c <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036fe:	e03e      	b.n	800377e <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003706:	e031      	b.n	800376c <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	33d8      	adds	r3, #216	@ 0xd8
 800371c:	443b      	add	r3, r7
 800371e:	3bcc      	subs	r3, #204	@ 0xcc
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	33d8      	adds	r3, #216	@ 0xd8
 8003738:	443b      	add	r3, r7
 800373a:	3b60      	subs	r3, #96	@ 0x60
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003754:	4413      	add	r3, r2
 8003756:	3302      	adds	r3, #2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3304      	adds	r3, #4
 800375e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003766:	3301      	adds	r3, #1
 8003768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800376c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003770:	2b02      	cmp	r3, #2
 8003772:	ddc9      	ble.n	8003708 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003774:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003778:	3301      	adds	r3, #1
 800377a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800377e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003782:	2b02      	cmp	r3, #2
 8003784:	ddbc      	ble.n	8003700 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	37d8      	adds	r7, #216	@ 0xd8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b0f6      	sub	sp, #472	@ 0x1d8
 8003794:	af00      	add	r7, sp, #0
 8003796:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800379a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800379e:	6018      	str	r0, [r3, #0]
 80037a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037a8:	ed83 0a00 	vstr	s0, [r3]
 80037ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037b4:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 80037b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037bc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 826b 	beq.w	8003ca0 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80037da:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037de:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 80037e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 80037f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037f4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80037fe:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003806:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 800380a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003824:	e044      	b.n	80038b0 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 8003826:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 800382a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800382e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003838:	3302      	adds	r3, #2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	3304      	adds	r3, #4
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003848:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 800384c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003850:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800385a:	3305      	adds	r3, #5
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	edd3 7a00 	vldr	s15, [r3]
 8003866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800386e:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003872:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003876:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003880:	3308      	adds	r3, #8
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003894:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800389e:	443b      	add	r3, r7
 80038a0:	3bac      	subs	r3, #172	@ 0xac
 80038a2:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80038a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038aa:	3301      	adds	r3, #1
 80038ac:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80038b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	ddb6      	ble.n	8003826 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 80038b8:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 80038bc:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80038c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c4:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 80038c8:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80038cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d4:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 80038d8:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80038dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038e8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 80038fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390a:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 800390e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003912:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800391c:	e04f      	b.n	80039be <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 800391e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003922:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	330c      	adds	r3, #12
 8003938:	ed93 7a00 	vldr	s14, [r3]
 800393c:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003944:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003948:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	3304      	adds	r3, #4
 8003960:	edd3 6a00 	vldr	s13, [r3]
 8003964:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003970:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003974:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3314      	adds	r3, #20
 800398a:	edd3 6a00 	vldr	s13, [r3]
 800398e:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800399a:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80039ac:	443b      	add	r3, r7
 80039ae:	3bb8      	subs	r3, #184	@ 0xb8
 80039b0:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80039b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039b8:	3301      	adds	r3, #1
 80039ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80039be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	ddab      	ble.n	800391e <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80039cc:	e029      	b.n	8003a22 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 80039ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	ed93 7a00 	vldr	s14, [r3]
 80039e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80039ee:	443b      	add	r3, r7
 80039f0:	3bb8      	subs	r3, #184	@ 0xb8
 80039f2:	edd3 6a00 	vldr	s13, [r3]
 80039f6:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80039fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a06:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003a18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003a22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	ddd1      	ble.n	80039ce <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003a2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003a32:	4618      	mov	r0, r3
 8003a34:	2324      	movs	r3, #36	@ 0x24
 8003a36:	461a      	mov	r2, r3
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f00a fc9f 	bl	800e37c <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003a3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a42:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003a46:	4618      	mov	r0, r3
 8003a48:	2324      	movs	r3, #36	@ 0x24
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	f00a fc95 	bl	800e37c <memset>

        for (int i = 0; i < 3; i++) {
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003a58:	e062      	b.n	8003b20 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a60:	e055      	b.n	8003b0e <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003a62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a6c:	443b      	add	r3, r7
 8003a6e:	3bb8      	subs	r3, #184	@ 0xb8
 8003a70:	ed93 7a00 	vldr	s14, [r3]
 8003a74:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a7e:	443b      	add	r3, r7
 8003a80:	3ba0      	subs	r3, #160	@ 0xa0
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a8e:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003a92:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003a96:	4613      	mov	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003aaa:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003aae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d102      	bne.n	8003abc <KalmanFilter_MeasurementUpdate+0x32c>
 8003ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aba:	e001      	b.n	8003ac0 <KalmanFilter_MeasurementUpdate+0x330>
 8003abc:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003dac <KalmanFilter_MeasurementUpdate+0x61c>
 8003ac0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ac4:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003ac8:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ae8:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003aec:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003b04:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b0e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	dda5      	ble.n	8003a62 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003b16:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	dd98      	ble.n	8003a5a <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b2e:	e076      	b.n	8003c1e <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b36:	e069      	b.n	8003c0c <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003b38:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b3c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b40:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003b60:	e04b      	b.n	8003bfa <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003b62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b66:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b6a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b6e:	4613      	mov	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	ed93 7a00 	vldr	s14, [r3]
 8003b82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b86:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003b8a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	edd3 6a00 	vldr	s13, [r3]
 8003ba2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ba6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003bba:	4413      	add	r3, r2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bd4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003bd8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003bf0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003bfa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	ddaf      	ble.n	8003b62 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003c02:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c06:	3301      	adds	r3, #1
 8003c08:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003c0c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	dd91      	ble.n	8003b38 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003c14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003c1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	dd84      	ble.n	8003b30 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003c2c:	e032      	b.n	8003c94 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003c34:	e025      	b.n	8003c82 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003c36:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c3a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c3e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c58:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	3304      	adds	r3, #4
 8003c76:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003c78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003c82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	ddd5      	ble.n	8003c36 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003c8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003c94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	ddc8      	ble.n	8003c2e <KalmanFilter_MeasurementUpdate+0x49e>
 8003c9c:	f000 bcc2 	b.w	8004624 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003ca0:	4b43      	ldr	r3, [pc, #268]	@ (8003db0 <KalmanFilter_MeasurementUpdate+0x620>)
 8003ca2:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cb0:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003cb4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cb8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cc2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cc6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003cd0:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003cd4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cd8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	edd3 7a00 	vldr	s15, [r3]
 8003ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce6:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003cea:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003cee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cf2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d00:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003d04:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003d16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2300      	movs	r3, #0
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	6053      	str	r3, [r2, #4]
 8003d26:	6093      	str	r3, [r2, #8]
 8003d28:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003d2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d2e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003d36:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d52:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003d5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d60:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003d68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d70:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003d72:	2300      	movs	r3, #0
 8003d74:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003d78:	e079      	b.n	8003e6e <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003d80:	e06c      	b.n	8003e5c <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003d82:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d98:	443b      	add	r3, r7
 8003d9a:	3bf8      	subs	r3, #248	@ 0xf8
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003da8:	e04f      	b.n	8003e4a <KalmanFilter_MeasurementUpdate+0x6ba>
 8003daa:	bf00      	nop
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08012828 	.word	0x08012828
 8003db4:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003db8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003dce:	443b      	add	r3, r7
 8003dd0:	3bf8      	subs	r3, #248	@ 0xf8
 8003dd2:	ed93 7a00 	vldr	s14, [r3]
 8003dd6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003dec:	443b      	add	r3, r7
 8003dee:	3bd0      	subs	r3, #208	@ 0xd0
 8003df0:	edd3 6a00 	vldr	s13, [r3]
 8003df4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003df8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3302      	adds	r3, #2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3304      	adds	r3, #4
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e22:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003e38:	443b      	add	r3, r7
 8003e3a:	3bf8      	subs	r3, #248	@ 0xf8
 8003e3c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003e40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e44:	3301      	adds	r3, #1
 8003e46:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	ddb2      	ble.n	8003db8 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003e52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e56:	3301      	adds	r3, #1
 8003e58:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	dd8e      	ble.n	8003d82 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003e64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	dd81      	ble.n	8003d7a <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e7c:	e098      	b.n	8003fb0 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e84:	e08a      	b.n	8003f9c <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003e86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e8a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e8e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e92:	0059      	lsls	r1, r3, #1
 8003e94:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e98:	440b      	add	r3, r1
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003eaa:	e042      	b.n	8003f32 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003eac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eb0:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003eb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003eb8:	0059      	lsls	r1, r3, #1
 8003eba:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ebe:	440b      	add	r3, r1
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	ed93 7a00 	vldr	s14, [r3]
 8003ec8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003ecc:	4613      	mov	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ede:	443b      	add	r3, r7
 8003ee0:	3bf8      	subs	r3, #248	@ 0xf8
 8003ee2:	edd3 6a00 	vldr	s13, [r3]
 8003ee6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003efc:	443b      	add	r3, r7
 8003efe:	3bd0      	subs	r3, #208	@ 0xd0
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f10:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f18:	0059      	lsls	r1, r3, #1
 8003f1a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f1e:	440b      	add	r3, r1
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003f28:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003f32:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	ddb8      	ble.n	8003eac <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003f3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f3e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f42:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f46:	0059      	lsls	r1, r3, #1
 8003f48:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f4c:	440b      	add	r3, r1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	ed93 7a00 	vldr	s14, [r3]
 8003f56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f5a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003f5e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f62:	0059      	lsls	r1, r3, #1
 8003f64:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f68:	440b      	add	r3, r1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f7a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f82:	0059      	lsls	r1, r3, #1
 8003f84:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f88:	440b      	add	r3, r1
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003f92:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003f96:	3301      	adds	r3, #1
 8003f98:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f77f af70 	ble.w	8003e86 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003fa6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003faa:	3301      	adds	r3, #1
 8003fac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003fb0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f77f af62 	ble.w	8003e7e <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003fba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fc2:	ed93 7a00 	vldr	s14, [r3]
 8003fc6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fce:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fde:	edd3 6a01 	vldr	s13, [r3, #4]
 8003fe2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fea:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff6:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003ffa:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003ffe:	eef0 7ae7 	vabs.f32	s15, s15
 8004002:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003db4 <KalmanFilter_MeasurementUpdate+0x624>
 8004006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	f100 8308 	bmi.w	8004622 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8004012:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800401a:	edd3 6a03 	vldr	s13, [r3, #12]
 800401e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004022:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004026:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800402a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800402e:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8004032:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800403a:	edd3 7a01 	vldr	s15, [r3, #4]
 800403e:	eef1 6a67 	vneg.f32	s13, s15
 8004042:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004046:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800404a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800404e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004052:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8004056:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800405a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800405e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004062:	eef1 6a67 	vneg.f32	s13, s15
 8004066:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800406a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800406e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004072:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004076:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 800407a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800407e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004082:	edd3 6a00 	vldr	s13, [r3]
 8004086:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800408a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800408e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004092:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004096:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 800409a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800409e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80040a2:	461a      	mov	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	6053      	str	r3, [r2, #4]
 80040aa:	6093      	str	r3, [r2, #8]
 80040ac:	60d3      	str	r3, [r2, #12]
 80040ae:	6113      	str	r3, [r2, #16]
 80040b0:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 80040b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80040ba:	461a      	mov	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	6053      	str	r3, [r2, #4]
 80040c2:	6093      	str	r3, [r2, #8]
 80040c4:	60d3      	str	r3, [r2, #12]
 80040c6:	6113      	str	r3, [r2, #16]
 80040c8:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80040d0:	e06f      	b.n	80041b2 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80040d8:	e062      	b.n	80041a0 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 80040da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040de:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80040e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80040e6:	0059      	lsls	r1, r3, #1
 80040e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80040ec:	440b      	add	r3, r1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80040fe:	e046      	b.n	800418e <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8004100:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004104:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004108:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800410c:	0059      	lsls	r1, r3, #1
 800410e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004112:	440b      	add	r3, r1
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	ed93 7a00 	vldr	s14, [r3]
 800411c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004120:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004124:	6819      	ldr	r1, [r3, #0]
 8004126:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004134:	4413      	add	r3, r2
 8004136:	3302      	adds	r3, #2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	3304      	adds	r3, #4
 800413e:	edd3 6a00 	vldr	s13, [r3]
 8004142:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004158:	443b      	add	r3, r7
 800415a:	3bd0      	subs	r3, #208	@ 0xd0
 800415c:	edd3 7a00 	vldr	s15, [r3]
 8004160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004168:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800416c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004170:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004174:	0059      	lsls	r1, r3, #1
 8004176:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800417a:	440b      	add	r3, r1
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004184:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004188:	3301      	adds	r3, #1
 800418a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800418e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004192:	2b02      	cmp	r3, #2
 8004194:	ddb4      	ble.n	8004100 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8004196:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800419a:	3301      	adds	r3, #1
 800419c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80041a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	dd98      	ble.n	80040da <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 80041a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80041b2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	dd8b      	ble.n	80040d2 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80041c0:	e069      	b.n	8004296 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80041c8:	e05c      	b.n	8004284 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 80041ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041ce:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80041d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041d6:	0059      	lsls	r1, r3, #1
 80041d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80041dc:	440b      	add	r3, r1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80041ee:	e040      	b.n	8004272 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 80041f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041f4:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80041f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80041fc:	0059      	lsls	r1, r3, #1
 80041fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004202:	440b      	add	r3, r1
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	ed93 7a00 	vldr	s14, [r3]
 800420c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004210:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004214:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004218:	0059      	lsls	r1, r3, #1
 800421a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800421e:	440b      	add	r3, r1
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	edd3 6a00 	vldr	s13, [r3]
 8004228:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800422c:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8004230:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004234:	0059      	lsls	r1, r3, #1
 8004236:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800423a:	440b      	add	r3, r1
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	edd3 7a00 	vldr	s15, [r3]
 8004244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004250:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004254:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004258:	0059      	lsls	r1, r3, #1
 800425a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800425e:	440b      	add	r3, r1
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004268:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800426c:	3301      	adds	r3, #1
 800426e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004272:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004276:	2b01      	cmp	r3, #1
 8004278:	ddba      	ble.n	80041f0 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 800427a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800427e:	3301      	adds	r3, #1
 8004280:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004284:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004288:	2b01      	cmp	r3, #1
 800428a:	dd9e      	ble.n	80041ca <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 800428c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004290:	3301      	adds	r3, #1
 8004292:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004296:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800429a:	2b02      	cmp	r3, #2
 800429c:	dd91      	ble.n	80041c2 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80042a4:	e042      	b.n	800432c <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80042ac:	e035      	b.n	800431a <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 80042ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042b2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	ed93 7a00 	vldr	s14, [r3]
 80042c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042c8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80042d0:	0059      	lsls	r1, r3, #1
 80042d2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042d6:	440b      	add	r3, r1
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	edd3 6a00 	vldr	s13, [r3]
 80042e0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80042ea:	443b      	add	r3, r7
 80042ec:	3be0      	subs	r3, #224	@ 0xe0
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042fa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042fe:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004310:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800431a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800431e:	2b01      	cmp	r3, #1
 8004320:	ddc5      	ble.n	80042ae <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 8004322:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004326:	3301      	adds	r3, #1
 8004328:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800432c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004330:	2b02      	cmp	r3, #2
 8004332:	ddb8      	ble.n	80042a6 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8004334:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004338:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800433c:	4618      	mov	r0, r3
 800433e:	2324      	movs	r3, #36	@ 0x24
 8004340:	461a      	mov	r2, r3
 8004342:	2100      	movs	r1, #0
 8004344:	f00a f81a 	bl	800e37c <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8004348:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800434c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004350:	4618      	mov	r0, r3
 8004352:	2324      	movs	r3, #36	@ 0x24
 8004354:	461a      	mov	r2, r3
 8004356:	2100      	movs	r1, #0
 8004358:	f00a f810 	bl	800e37c <memset>

        for (int i = 0; i < 3; i++) {
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004362:	e09e      	b.n	80044a2 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800436a:	e090      	b.n	800448e <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 800436c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004370:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004374:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800438e:	2300      	movs	r3, #0
 8004390:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004394:	e045      	b.n	8004422 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 8004396:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800439a:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800439e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	ed93 7a00 	vldr	s14, [r3]
 80043b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043ba:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80043be:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80043c2:	0059      	lsls	r1, r3, #1
 80043c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80043c8:	440b      	add	r3, r1
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	edd3 6a00 	vldr	s13, [r3]
 80043d2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80043e8:	443b      	add	r3, r7
 80043ea:	3bd0      	subs	r3, #208	@ 0xd0
 80043ec:	edd3 7a00 	vldr	s15, [r3]
 80043f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043fc:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004400:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004404:	4613      	mov	r3, r2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004418:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800441c:	3301      	adds	r3, #1
 800441e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004422:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004426:	2b01      	cmp	r3, #1
 8004428:	ddb5      	ble.n	8004396 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 800442a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800442e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004432:	429a      	cmp	r2, r3
 8004434:	d102      	bne.n	800443c <KalmanFilter_MeasurementUpdate+0xcac>
 8004436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800443a:	e001      	b.n	8004440 <KalmanFilter_MeasurementUpdate+0xcb0>
 800443c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800462c <KalmanFilter_MeasurementUpdate+0xe9c>
 8004440:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004444:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004448:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004464:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004468:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800446c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004484:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004488:	3301      	adds	r3, #1
 800448a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800448e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004492:	2b02      	cmp	r3, #2
 8004494:	f77f af6a 	ble.w	800436c <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004498:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800449c:	3301      	adds	r3, #1
 800449e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80044a2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	f77f af5c 	ble.w	8004364 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80044b2:	e076      	b.n	80045a2 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80044ba:	e069      	b.n	8004590 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 80044bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044c0:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80044c4:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80044e4:	e04b      	b.n	800457e <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80044e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044ea:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80044ee:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	ed93 7a00 	vldr	s14, [r3]
 8004506:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800450a:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800450e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	edd3 6a00 	vldr	s13, [r3]
 8004526:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800452a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800453e:	4413      	add	r3, r2
 8004540:	3302      	adds	r3, #2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	3304      	adds	r3, #4
 8004548:	edd3 7a00 	vldr	s15, [r3]
 800454c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004554:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004558:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800455c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004560:	4613      	mov	r3, r2
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4413      	add	r3, r2
 8004566:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004574:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004578:	3301      	adds	r3, #1
 800457a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800457e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004582:	2b02      	cmp	r3, #2
 8004584:	ddaf      	ble.n	80044e6 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 8004586:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800458a:	3301      	adds	r3, #1
 800458c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004590:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004594:	2b02      	cmp	r3, #2
 8004596:	dd91      	ble.n	80044bc <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004598:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800459c:	3301      	adds	r3, #1
 800459e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80045a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	dd84      	ble.n	80044b4 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80045b0:	e032      	b.n	8004618 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80045b8:	e025      	b.n	8004606 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 80045ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045be:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80045c2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80045f0:	4413      	add	r3, r2
 80045f2:	3302      	adds	r3, #2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4403      	add	r3, r0
 80045f8:	3304      	adds	r3, #4
 80045fa:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80045fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004600:	3301      	adds	r3, #1
 8004602:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004606:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800460a:	2b02      	cmp	r3, #2
 800460c:	ddd5      	ble.n	80045ba <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 800460e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004612:	3301      	adds	r3, #1
 8004614:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004618:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800461c:	2b02      	cmp	r3, #2
 800461e:	ddc8      	ble.n	80045b2 <KalmanFilter_MeasurementUpdate+0xe22>
 8004620:	e000      	b.n	8004624 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 8004622:	bf00      	nop
            }
        }
    }
}
 8004624:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8004628:	46bd      	mov	sp, r7
 800462a:	bdb0      	pop	{r4, r5, r7, pc}
 800462c:	00000000 	.word	0x00000000

08004630 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	edd3 7a01 	vldr	s15, [r3, #4]
 800463e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	d517      	bpl.n	8004678 <KalmanFilter_DetectApogee+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	ed93 7a01 	vldr	s14, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	d50c      	bpl.n	8004678 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	2b04      	cmp	r3, #4
 800466e:	dd06      	ble.n	800467e <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004676:	e002      	b.n	800467e <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	ee07 3a90 	vmov	s15, r3
}
 80046a6:	eeb0 0a67 	vmov.f32	s0, s15
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4603      	mov	r3, r0
 80046d6:	71fb      	strb	r3, [r7, #7]
 80046d8:	460b      	mov	r3, r1
 80046da:	71bb      	strb	r3, [r7, #6]
 80046dc:	4613      	mov	r3, r2
 80046de:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80046e4:	79bb      	ldrb	r3, [r7, #6]
 80046e6:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80046e8:	797b      	ldrb	r3, [r7, #5]
 80046ea:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e00c      	b.n	800470c <send_command+0x40>
        command[3 + i] = data[i];
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	441a      	add	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	3303      	adds	r3, #3
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	3318      	adds	r3, #24
 8004700:	443b      	add	r3, r7
 8004702:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3301      	adds	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b08      	cmp	r3, #8
 8004710:	ddef      	ble.n	80046f2 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 8004712:	f107 0108 	add.w	r1, r7, #8
 8004716:	2364      	movs	r3, #100	@ 0x64
 8004718:	220c      	movs	r2, #12
 800471a:	4803      	ldr	r0, [pc, #12]	@ (8004728 <send_command+0x5c>)
 800471c:	f007 fd7a 	bl	800c214 <HAL_UART_Transmit>
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000584 	.word	0x20000584

0800472c <lora_activate>:

void lora_activate()
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8004730:	2200      	movs	r2, #0
 8004732:	2101      	movs	r1, #1
 8004734:	4804      	ldr	r0, [pc, #16]	@ (8004748 <lora_activate+0x1c>)
 8004736:	f005 fa3f 	bl	8009bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	2102      	movs	r1, #2
 800473e:	4802      	ldr	r0, [pc, #8]	@ (8004748 <lora_activate+0x1c>)
 8004740:	f005 fa3a 	bl	8009bb8 <HAL_GPIO_WritePin>
}
 8004744:	bf00      	nop
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40020000 	.word	0x40020000

0800474c <lora_deactivate>:

void lora_deactivate()
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 8004750:	2201      	movs	r2, #1
 8004752:	2101      	movs	r1, #1
 8004754:	4804      	ldr	r0, [pc, #16]	@ (8004768 <lora_deactivate+0x1c>)
 8004756:	f005 fa2f 	bl	8009bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 800475a:	2201      	movs	r2, #1
 800475c:	2102      	movs	r1, #2
 800475e:	4802      	ldr	r0, [pc, #8]	@ (8004768 <lora_deactivate+0x1c>)
 8004760:	f005 fa2a 	bl	8009bb8 <HAL_GPIO_WritePin>
}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40020000 	.word	0x40020000

0800476c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2208      	movs	r2, #8
 80047a2:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2207      	movs	r2, #7
 80047a8:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	79db      	ldrb	r3, [r3, #7]
 80047ae:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	799b      	ldrb	r3, [r3, #6]
 80047b4:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7a5b      	ldrb	r3, [r3, #9]
 80047ba:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7c5b      	ldrb	r3, [r3, #17]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	789a      	ldrb	r2, [r3, #2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7a9b      	ldrb	r3, [r3, #10]
 80047da:	4313      	orrs	r3, r2
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	78db      	ldrb	r3, [r3, #3]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7a1b      	ldrb	r3, [r3, #8]
 80047ec:	2b53      	cmp	r3, #83	@ 0x53
 80047ee:	d902      	bls.n	80047f6 <lora_configure+0x8a>
    	config->channel = 83;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2253      	movs	r2, #83	@ 0x53
 80047f4:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	7a1b      	ldrb	r3, [r3, #8]
 80047fa:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7ada      	ldrb	r2, [r3, #11]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7b1b      	ldrb	r3, [r3, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7b5b      	ldrb	r3, [r3, #13]
 800480c:	4313      	orrs	r3, r2
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7b9b      	ldrb	r3, [r3, #14]
 8004814:	4313      	orrs	r3, r2
 8004816:	b2da      	uxtb	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7bdb      	ldrb	r3, [r3, #15]
 800481c:	4313      	orrs	r3, r2
 800481e:	b2da      	uxtb	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7c1b      	ldrb	r3, [r3, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	b2db      	uxtb	r3, r3
 8004828:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	795b      	ldrb	r3, [r3, #5]
 800482e:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	791b      	ldrb	r3, [r3, #4]
 8004834:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 8004836:	f107 030c 	add.w	r3, r7, #12
 800483a:	2209      	movs	r2, #9
 800483c:	2100      	movs	r1, #0
 800483e:	20c0      	movs	r0, #192	@ 0xc0
 8004840:	f7ff ff44 	bl	80046cc <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 8004844:	bf00      	nop
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004852:	f003 fd0f 	bl	8008274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004856:	f000 f8c7 	bl	80049e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800485a:	f000 fb75 	bl	8004f48 <MX_GPIO_Init>
  MX_DMA_Init();
 800485e:	f000 fb25 	bl	8004eac <MX_DMA_Init>
  MX_I2C1_Init();
 8004862:	f000 f9d1 	bl	8004c08 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004866:	f000 f9fd 	bl	8004c64 <MX_I2C3_Init>
  MX_TIM2_Init();
 800486a:	f000 fa29 	bl	8004cc0 <MX_TIM2_Init>
  MX_UART5_Init();
 800486e:	f000 fa9f 	bl	8004db0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004872:	f000 fac7 	bl	8004e04 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8004876:	f000 f923 	bl	8004ac0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800487a:	f000 f973 	bl	8004b64 <MX_ADC2_Init>
  MX_UART4_Init();
 800487e:	f000 fa6d 	bl	8004d5c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8004882:	f000 fae9 	bl	8004e58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	MX_TIM2_Init();
 8004886:	f000 fa1b 	bl	8004cc0 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800488a:	4849      	ldr	r0, [pc, #292]	@ (80049b0 <main+0x164>)
 800488c:	f007 f852 	bl	800b934 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004890:	2200      	movs	r2, #0
 8004892:	2101      	movs	r1, #1
 8004894:	201c      	movs	r0, #28
 8004896:	f004 faa8 	bl	8008dea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800489a:	201c      	movs	r0, #28
 800489c:	f004 fac1 	bl	8008e22 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80048a0:	2201      	movs	r2, #1
 80048a2:	2100      	movs	r1, #0
 80048a4:	2028      	movs	r0, #40	@ 0x28
 80048a6:	f004 faa0 	bl	8008dea <HAL_NVIC_SetPriority>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buffer, 2);
 80048aa:	2202      	movs	r2, #2
 80048ac:	4941      	ldr	r1, [pc, #260]	@ (80049b4 <main+0x168>)
 80048ae:	4842      	ldr	r0, [pc, #264]	@ (80049b8 <main+0x16c>)
 80048b0:	f003 fdba 	bl	8008428 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buffer, 2);
 80048b4:	2202      	movs	r2, #2
 80048b6:	4941      	ldr	r1, [pc, #260]	@ (80049bc <main+0x170>)
 80048b8:	4841      	ldr	r0, [pc, #260]	@ (80049c0 <main+0x174>)
 80048ba:	f003 fdb5 	bl	8008428 <HAL_ADC_Start_DMA>

	bme280_begin();
 80048be:	f000 fc27 	bl	8005110 <bme280_begin>
	HAL_Delay(1000);
 80048c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048c6:	f003 fd47 	bl	8008358 <HAL_Delay>
	bme280_config();
 80048ca:	f7fc fda7 	bl	800141c <bme280_config>

	bmi_imu_init();
 80048ce:	f000 fc37 	bl	8005140 <bmi_imu_init>
    bmi088_config(&BMI_sensor);
 80048d2:	483c      	ldr	r0, [pc, #240]	@ (80049c4 <main+0x178>)
 80048d4:	f7fd fbf0 	bl	80020b8 <bmi088_config>
    get_offset(&BMI_sensor);
 80048d8:	483a      	ldr	r0, [pc, #232]	@ (80049c4 <main+0x178>)
 80048da:	f7fe f9e3 	bl	8002ca4 <get_offset>
	bme280_update();
 80048de:	f7fc ff6b 	bl	80017b8 <bme280_update>
    lora_deactivate();
 80048e2:	f7ff ff33 	bl	800474c <lora_deactivate>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80048e6:	2028      	movs	r0, #40	@ 0x28
 80048e8:	f004 fa9b 	bl	8008e22 <HAL_NVIC_EnableIRQ>
	getInitialQuaternion();
 80048ec:	f002 f9a8 	bl	8006c40 <getInitialQuaternion>

	loraBegin();
 80048f0:	f000 fd1c 	bl	800532c <loraBegin>
    lora_activate();
 80048f4:	f7ff ff1a 	bl	800472c <lora_activate>


	sensor_fusion_init(&BME280_sensor);
 80048f8:	4833      	ldr	r0, [pc, #204]	@ (80049c8 <main+0x17c>)
 80048fa:	f002 fc21 	bl	8007140 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, 36);
 80048fe:	2224      	movs	r2, #36	@ 0x24
 8004900:	4932      	ldr	r1, [pc, #200]	@ (80049cc <main+0x180>)
 8004902:	4833      	ldr	r0, [pc, #204]	@ (80049d0 <main+0x184>)
 8004904:	f007 fd8e 	bl	800c424 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(10.0,2000.0,500.0,60.0);
 8004908:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80049d4 <main+0x188>
 800490c:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 80049d8 <main+0x18c>
 8004910:	eddf 0a32 	vldr	s1, [pc, #200]	@ 80049dc <main+0x190>
 8004914:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8004918:	f7fe fbe8 	bl	80030ec <flight_algorithm_set_parameters>


	uart_handler_init();
 800491c:	f003 fae8 	bl	8007ef0 <uart_handler_init>
	flight_algorithm_init();
 8004920:	f7fe fa2c 	bl	8002d7c <flight_algorithm_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bmi088_update(&BMI_sensor);
 8004924:	4827      	ldr	r0, [pc, #156]	@ (80049c4 <main+0x178>)
 8004926:	f7fd fdc7 	bl	80024b8 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 800492a:	492d      	ldr	r1, [pc, #180]	@ (80049e0 <main+0x194>)
 800492c:	4825      	ldr	r0, [pc, #148]	@ (80049c4 <main+0x178>)
 800492e:	f002 fd0d 	bl	800734c <sensor_fusion_update_mahony>
		  bme280_update();
 8004932:	f7fc ff41 	bl	80017b8 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 8004936:	f003 faf5 	bl	8007f24 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 800493a:	f003 fbf1 	bl	8008120 <uart_handler_command_ready>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <main+0x10a>
			  uart_handler_clear_command_flag();
 8004944:	f003 fc1a 	bl	800817c <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 8004948:	f003 fbde 	bl	8008108 <uart_handler_get_mode>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <main+0x10a>
				  flight_algorithm_reset();
 8004952:	f7fe fa19 	bl	8002d88 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 8004956:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <main+0x198>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0e1      	beq.n	8004924 <main+0xd8>
			tx_timer_flag = 0;
 8004960:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <main+0x198>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
			//read_ADC();
			HSD_StatusCheck();
 8004966:	f000 fcab 	bl	80052c0 <HSD_StatusCheck>
		    //IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 800496a:	f003 fbcd 	bl	8008108 <uart_handler_get_mode>
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d016      	beq.n	80049a6 <main+0x15a>
 8004978:	2b02      	cmp	r3, #2
 800497a:	dcd3      	bgt.n	8004924 <main+0xd8>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <main+0x13a>
 8004980:	2b01      	cmp	r3, #1
 8004982:	d00b      	beq.n	800499c <main+0x150>
 8004984:	e012      	b.n	80049ac <main+0x160>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004986:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <main+0x194>)
 8004988:	490e      	ldr	r1, [pc, #56]	@ (80049c4 <main+0x178>)
 800498a:	480f      	ldr	r0, [pc, #60]	@ (80049c8 <main+0x17c>)
 800498c:	f002 fc2c 	bl	80071e8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004990:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <main+0x194>)
 8004992:	490c      	ldr	r1, [pc, #48]	@ (80049c4 <main+0x178>)
 8004994:	480c      	ldr	r0, [pc, #48]	@ (80049c8 <main+0x17c>)
 8004996:	f7fe fa47 	bl	8002e28 <flight_algorithm_update>
						//addDataPacketNormal(&BME280_sensor, &BMI_sensor);
				    	//HAL_UART_Transmit(&huart2, (uint8_t*)normal_paket, 59, 100);
						//uint16_t status_bits = flight_algorithm_get_status_bits();
						//uart_handler_send_status(status_bits);
						break;
 800499a:	e007      	b.n	80049ac <main+0x160>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 800499c:	4909      	ldr	r1, [pc, #36]	@ (80049c4 <main+0x178>)
 800499e:	480a      	ldr	r0, [pc, #40]	@ (80049c8 <main+0x17c>)
 80049a0:	f003 fa22 	bl	8007de8 <test_modes_handle_sit>
						break;
 80049a4:	e002      	b.n	80049ac <main+0x160>

					case MODE_SUT:
						algorithm_update_sut();
 80049a6:	f003 fa39 	bl	8007e1c <algorithm_update_sut>
						break;
 80049aa:	bf00      	nop
	  	  bmi088_update(&BMI_sensor);
 80049ac:	e7ba      	b.n	8004924 <main+0xd8>
 80049ae:	bf00      	nop
 80049b0:	20000464 	.word	0x20000464
 80049b4:	20000834 	.word	0x20000834
 80049b8:	2000026c 	.word	0x2000026c
 80049bc:	20000838 	.word	0x20000838
 80049c0:	200002b4 	.word	0x200002b4
 80049c4:	20000730 	.word	0x20000730
 80049c8:	200006ec 	.word	0x200006ec
 80049cc:	200007e0 	.word	0x200007e0
 80049d0:	200004ac 	.word	0x200004ac
 80049d4:	42700000 	.word	0x42700000
 80049d8:	43fa0000 	.word	0x43fa0000
 80049dc:	44fa0000 	.word	0x44fa0000
 80049e0:	200007b0 	.word	0x200007b0
 80049e4:	20000830 	.word	0x20000830

080049e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b094      	sub	sp, #80	@ 0x50
 80049ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049ee:	f107 031c 	add.w	r3, r7, #28
 80049f2:	2234      	movs	r2, #52	@ 0x34
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f009 fcc0 	bl	800e37c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	4b29      	ldr	r3, [pc, #164]	@ (8004ab8 <SystemClock_Config+0xd0>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	4a28      	ldr	r2, [pc, #160]	@ (8004ab8 <SystemClock_Config+0xd0>)
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a1c:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <SystemClock_Config+0xd0>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4b23      	ldr	r3, [pc, #140]	@ (8004abc <SystemClock_Config+0xd4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	@ (8004abc <SystemClock_Config+0xd4>)
 8004a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b20      	ldr	r3, [pc, #128]	@ (8004abc <SystemClock_Config+0xd4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a58:	2308      	movs	r3, #8
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004a5c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004a60:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a62:	2302      	movs	r3, #2
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004a66:	2302      	movs	r3, #2
 8004a68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a6e:	f107 031c 	add.w	r3, r7, #28
 8004a72:	4618      	mov	r0, r3
 8004a74:	f006 fc70 	bl	800b358 <HAL_RCC_OscConfig>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004a7e:	f000 fc89 	bl	8005394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a82:	230f      	movs	r3, #15
 8004a84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a86:	2302      	movs	r3, #2
 8004a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	2105      	movs	r1, #5
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f006 f90f 	bl	800acc4 <HAL_RCC_ClockConfig>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004aac:	f000 fc72 	bl	8005394 <Error_Handler>
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3750      	adds	r7, #80	@ 0x50
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40007000 	.word	0x40007000

08004ac0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004ad2:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004ad4:	4a21      	ldr	r2, [pc, #132]	@ (8004b5c <MX_ADC1_Init+0x9c>)
 8004ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004ada:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ade:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004af2:	4b19      	ldr	r3, [pc, #100]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004afa:	4b17      	ldr	r3, [pc, #92]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b00:	4b15      	ldr	r3, [pc, #84]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b02:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <MX_ADC1_Init+0xa0>)
 8004b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b06:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004b0c:	4b12      	ldr	r3, [pc, #72]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004b12:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b20:	480d      	ldr	r0, [pc, #52]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b22:	f003 fc3d 	bl	80083a0 <HAL_ADC_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004b2c:	f000 fc32 	bl	8005394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004b30:	2309      	movs	r3, #9
 8004b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004b34:	2301      	movs	r3, #1
 8004b36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004b38:	2307      	movs	r3, #7
 8004b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4805      	ldr	r0, [pc, #20]	@ (8004b58 <MX_ADC1_Init+0x98>)
 8004b42:	f003 fda3 	bl	800868c <HAL_ADC_ConfigChannel>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004b4c:	f000 fc22 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	2000026c 	.word	0x2000026c
 8004b5c:	40012000 	.word	0x40012000
 8004b60:	0f000001 	.word	0x0f000001

08004b64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004b76:	4b21      	ldr	r3, [pc, #132]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004b78:	4a21      	ldr	r2, [pc, #132]	@ (8004c00 <MX_ADC2_Init+0x9c>)
 8004b7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004b7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004b90:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004b96:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b9e:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ba4:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004ba6:	4a17      	ldr	r2, [pc, #92]	@ (8004c04 <MX_ADC2_Init+0xa0>)
 8004ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004baa:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004bb6:	4b11      	ldr	r3, [pc, #68]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004bc4:	480d      	ldr	r0, [pc, #52]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004bc6:	f003 fbeb 	bl	80083a0 <HAL_ADC_Init>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004bd0:	f000 fbe0 	bl	8005394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004bdc:	2307      	movs	r3, #7
 8004bde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004be0:	463b      	mov	r3, r7
 8004be2:	4619      	mov	r1, r3
 8004be4:	4805      	ldr	r0, [pc, #20]	@ (8004bfc <MX_ADC2_Init+0x98>)
 8004be6:	f003 fd51 	bl	800868c <HAL_ADC_ConfigChannel>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004bf0:	f000 fbd0 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200002b4 	.word	0x200002b4
 8004c00:	40012100 	.word	0x40012100
 8004c04:	0f000001 	.word	0x0f000001

08004c08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c0c:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c0e:	4a13      	ldr	r2, [pc, #76]	@ (8004c5c <MX_I2C1_Init+0x54>)
 8004c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004c12:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c14:	4a12      	ldr	r2, [pc, #72]	@ (8004c60 <MX_I2C1_Init+0x58>)
 8004c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c18:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c3e:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c44:	4804      	ldr	r0, [pc, #16]	@ (8004c58 <MX_I2C1_Init+0x50>)
 8004c46:	f004 ffe9 	bl	8009c1c <HAL_I2C_Init>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c50:	f000 fba0 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200003bc 	.word	0x200003bc
 8004c5c:	40005400 	.word	0x40005400
 8004c60:	000186a0 	.word	0x000186a0

08004c64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004c68:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c6a:	4a13      	ldr	r2, [pc, #76]	@ (8004cb8 <MX_I2C3_Init+0x54>)
 8004c6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c70:	4a12      	ldr	r2, [pc, #72]	@ (8004cbc <MX_I2C3_Init+0x58>)
 8004c72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c74:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c80:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c94:	4b07      	ldr	r3, [pc, #28]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004ca0:	4804      	ldr	r0, [pc, #16]	@ (8004cb4 <MX_I2C3_Init+0x50>)
 8004ca2:	f004 ffbb 	bl	8009c1c <HAL_I2C_Init>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004cac:	f000 fb72 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000410 	.word	0x20000410
 8004cb8:	40005c00 	.word	0x40005c00
 8004cbc:	000186a0 	.word	0x000186a0

08004cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004cde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ce2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004ce6:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cec:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004cf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfa:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d06:	4814      	ldr	r0, [pc, #80]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004d08:	f006 fdc4 	bl	800b894 <HAL_TIM_Base_Init>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004d12:	f000 fb3f 	bl	8005394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	4619      	mov	r1, r3
 8004d22:	480d      	ldr	r0, [pc, #52]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004d24:	f006 ff66 	bl	800bbf4 <HAL_TIM_ConfigClockSource>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004d2e:	f000 fb31 	bl	8005394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4806      	ldr	r0, [pc, #24]	@ (8004d58 <MX_TIM2_Init+0x98>)
 8004d40:	f007 f988 	bl	800c054 <HAL_TIMEx_MasterConfigSynchronization>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004d4a:	f000 fb23 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000464 	.word	0x20000464

08004d5c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004d60:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d62:	4a12      	ldr	r2, [pc, #72]	@ (8004dac <MX_UART4_Init+0x50>)
 8004d64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004d66:	4b10      	ldr	r3, [pc, #64]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004d74:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d82:	220c      	movs	r2, #12
 8004d84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d86:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d92:	4805      	ldr	r0, [pc, #20]	@ (8004da8 <MX_UART4_Init+0x4c>)
 8004d94:	f007 f9ee 	bl	800c174 <HAL_UART_Init>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004d9e:	f000 faf9 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200004ac 	.word	0x200004ac
 8004dac:	40004c00 	.word	0x40004c00

08004db0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004db4:	4b11      	ldr	r3, [pc, #68]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <MX_UART5_Init+0x50>)
 8004db8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004dbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004dc0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004dd4:	4b09      	ldr	r3, [pc, #36]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004dd6:	220c      	movs	r2, #12
 8004dd8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dda:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004de6:	4805      	ldr	r0, [pc, #20]	@ (8004dfc <MX_UART5_Init+0x4c>)
 8004de8:	f007 f9c4 	bl	800c174 <HAL_UART_Init>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004df2:	f000 facf 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200004f4 	.word	0x200004f4
 8004e00:	40005000 	.word	0x40005000

08004e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e08:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e0a:	4a12      	ldr	r2, [pc, #72]	@ (8004e54 <MX_USART1_UART_Init+0x50>)
 8004e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e0e:	4b10      	ldr	r3, [pc, #64]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e16:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e22:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e28:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e2a:	220c      	movs	r2, #12
 8004e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e2e:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e3a:	4805      	ldr	r0, [pc, #20]	@ (8004e50 <MX_USART1_UART_Init+0x4c>)
 8004e3c:	f007 f99a 	bl	800c174 <HAL_UART_Init>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e46:	f000 faa5 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	2000053c 	.word	0x2000053c
 8004e54:	40011000 	.word	0x40011000

08004e58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ea8 <MX_USART2_UART_Init+0x50>)
 8004e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004e62:	4b10      	ldr	r3, [pc, #64]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e7e:	220c      	movs	r2, #12
 8004e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e82:	4b08      	ldr	r3, [pc, #32]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e8e:	4805      	ldr	r0, [pc, #20]	@ (8004ea4 <MX_USART2_UART_Init+0x4c>)
 8004e90:	f007 f970 	bl	800c174 <HAL_UART_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e9a:	f000 fa7b 	bl	8005394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000584 	.word	0x20000584
 8004ea8:	40004400 	.word	0x40004400

08004eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <MX_DMA_Init+0x98>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	4a22      	ldr	r2, [pc, #136]	@ (8004f44 <MX_DMA_Init+0x98>)
 8004ebc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec2:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <MX_DMA_Init+0x98>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f44 <MX_DMA_Init+0x98>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f44 <MX_DMA_Init+0x98>)
 8004ed8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ede:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <MX_DMA_Init+0x98>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004eea:	2200      	movs	r2, #0
 8004eec:	2100      	movs	r1, #0
 8004eee:	200b      	movs	r0, #11
 8004ef0:	f003 ff7b 	bl	8008dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004ef4:	200b      	movs	r0, #11
 8004ef6:	f003 ff94 	bl	8008e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2100      	movs	r1, #0
 8004efe:	200d      	movs	r0, #13
 8004f00:	f003 ff73 	bl	8008dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004f04:	200d      	movs	r0, #13
 8004f06:	f003 ff8c 	bl	8008e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	200f      	movs	r0, #15
 8004f10:	f003 ff6b 	bl	8008dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004f14:	200f      	movs	r0, #15
 8004f16:	f003 ff84 	bl	8008e22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	2038      	movs	r0, #56	@ 0x38
 8004f20:	f003 ff63 	bl	8008dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004f24:	2038      	movs	r0, #56	@ 0x38
 8004f26:	f003 ff7c 	bl	8008e22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	203b      	movs	r0, #59	@ 0x3b
 8004f30:	f003 ff5b 	bl	8008dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004f34:	203b      	movs	r0, #59	@ 0x3b
 8004f36:	f003 ff74 	bl	8008e22 <HAL_NVIC_EnableIRQ>

}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800

08004f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	@ 0x28
 8004f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	4b67      	ldr	r3, [pc, #412]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	4a66      	ldr	r2, [pc, #408]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f6e:	4b64      	ldr	r3, [pc, #400]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	4b60      	ldr	r3, [pc, #384]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f82:	4a5f      	ldr	r2, [pc, #380]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	4b59      	ldr	r3, [pc, #356]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	4a58      	ldr	r2, [pc, #352]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fa6:	4b56      	ldr	r3, [pc, #344]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	4b52      	ldr	r3, [pc, #328]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	4a51      	ldr	r2, [pc, #324]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	4a4a      	ldr	r2, [pc, #296]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fd8:	f043 0308 	orr.w	r3, r3, #8
 8004fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fde:	4b48      	ldr	r3, [pc, #288]	@ (8005100 <MX_GPIO_Init+0x1b8>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8004fea:	2200      	movs	r2, #0
 8004fec:	f640 0103 	movw	r1, #2051	@ 0x803
 8004ff0:	4844      	ldr	r0, [pc, #272]	@ (8005104 <MX_GPIO_Init+0x1bc>)
 8004ff2:	f004 fde1 	bl	8009bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGU_LED2_Pin|SGU_LED1_Pin, GPIO_PIN_RESET);
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f240 4104 	movw	r1, #1028	@ 0x404
 8004ffc:	4842      	ldr	r0, [pc, #264]	@ (8005108 <MX_GPIO_Init+0x1c0>)
 8004ffe:	f004 fddb 	bl	8009bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8005002:	2201      	movs	r2, #1
 8005004:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005008:	483f      	ldr	r0, [pc, #252]	@ (8005108 <MX_GPIO_Init+0x1c0>)
 800500a:	f004 fdd5 	bl	8009bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|MCU_LED_Pin, GPIO_PIN_RESET);
 800500e:	2200      	movs	r2, #0
 8005010:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8005014:	483d      	ldr	r0, [pc, #244]	@ (800510c <MX_GPIO_Init+0x1c4>)
 8005016:	f004 fdcf 	bl	8009bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STATUS1_Pin STATUS2_Pin */
  GPIO_InitStruct.Pin = STATUS1_Pin|STATUS2_Pin;
 800501a:	2321      	movs	r3, #33	@ 0x21
 800501c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005026:	f107 0314 	add.w	r3, r7, #20
 800502a:	4619      	mov	r1, r3
 800502c:	4837      	ldr	r0, [pc, #220]	@ (800510c <MX_GPIO_Init+0x1c4>)
 800502e:	f004 fb23 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin PA11 */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin|GPIO_PIN_11;
 8005032:	f640 0303 	movw	r3, #2051	@ 0x803
 8005036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005038:	2301      	movs	r3, #1
 800503a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005040:	2300      	movs	r3, #0
 8005042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4619      	mov	r1, r3
 800504a:	482e      	ldr	r0, [pc, #184]	@ (8005104 <MX_GPIO_Init+0x1bc>)
 800504c:	f004 fb14 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGU_LED2_Pin SGU_LED1_Pin PB14 */
  GPIO_InitStruct.Pin = SGU_LED2_Pin|SGU_LED1_Pin|GPIO_PIN_14;
 8005050:	f244 4304 	movw	r3, #17412	@ 0x4404
 8005054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005056:	2301      	movs	r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005062:	f107 0314 	add.w	r3, r7, #20
 8005066:	4619      	mov	r1, r3
 8005068:	4827      	ldr	r0, [pc, #156]	@ (8005108 <MX_GPIO_Init+0x1c0>)
 800506a:	f004 fb05 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800506e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005074:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	4619      	mov	r1, r3
 8005084:	4820      	ldr	r0, [pc, #128]	@ (8005108 <MX_GPIO_Init+0x1c0>)
 8005086:	f004 faf7 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 MCU_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|MCU_LED_Pin;
 800508a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800508e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005090:	2301      	movs	r3, #1
 8005092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005098:	2300      	movs	r3, #0
 800509a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4619      	mov	r1, r3
 80050a2:	481a      	ldr	r0, [pc, #104]	@ (800510c <MX_GPIO_Init+0x1c4>)
 80050a4:	f004 fae8 	bl	8009678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80050a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	4619      	mov	r1, r3
 80050be:	4811      	ldr	r0, [pc, #68]	@ (8005104 <MX_GPIO_Init+0x1bc>)
 80050c0:	f004 fada 	bl	8009678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050c4:	2200      	movs	r2, #0
 80050c6:	2100      	movs	r1, #0
 80050c8:	2028      	movs	r0, #40	@ 0x28
 80050ca:	f003 fe8e 	bl	8008dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050ce:	2028      	movs	r0, #40	@ 0x28
 80050d0:	f003 fea7 	bl	8008e22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80050d4:	2200      	movs	r2, #0
 80050d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050da:	480b      	ldr	r0, [pc, #44]	@ (8005108 <MX_GPIO_Init+0x1c0>)
 80050dc:	f004 fd6c 	bl	8009bb8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80050e0:	2032      	movs	r0, #50	@ 0x32
 80050e2:	f003 f939 	bl	8008358 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80050e6:	2201      	movs	r2, #1
 80050e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050ec:	4806      	ldr	r0, [pc, #24]	@ (8005108 <MX_GPIO_Init+0x1c0>)
 80050ee:	f004 fd63 	bl	8009bb8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80050f2:	2032      	movs	r0, #50	@ 0x32
 80050f4:	f003 f930 	bl	8008358 <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 80050f8:	bf00      	nop
 80050fa:	3728      	adds	r7, #40	@ 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	40020000 	.word	0x40020000
 8005108:	40020400 	.word	0x40020400
 800510c:	40020800 	.word	0x40020800

08005110 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8005114:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <bme280_begin+0x28>)
 8005116:	2203      	movs	r2, #3
 8005118:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 800511a:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <bme280_begin+0x28>)
 800511c:	2203      	movs	r2, #3
 800511e:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <bme280_begin+0x28>)
 8005122:	2204      	movs	r2, #4
 8005124:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8005126:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <bme280_begin+0x28>)
 8005128:	2207      	movs	r2, #7
 800512a:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 800512c:	4903      	ldr	r1, [pc, #12]	@ (800513c <bme280_begin+0x2c>)
 800512e:	4802      	ldr	r0, [pc, #8]	@ (8005138 <bme280_begin+0x28>)
 8005130:	f7fc fb0a 	bl	8001748 <bme280_init>

}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200006ec 	.word	0x200006ec
 800513c:	200003bc 	.word	0x200003bc

08005140 <bmi_imu_init>:

//BMI sensor struct filled with configuration settings. Then called bmi088_init function.
uint8_t bmi_imu_init(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	//Acc config
	BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8005144:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <bmi_imu_init+0x54>)
 8005146:	2208      	movs	r2, #8
 8005148:	719a      	strb	r2, [r3, #6]
	BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 800514a:	4b12      	ldr	r3, [pc, #72]	@ (8005194 <bmi_imu_init+0x54>)
 800514c:	2209      	movs	r2, #9
 800514e:	71da      	strb	r2, [r3, #7]
	BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8005150:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <bmi_imu_init+0x54>)
 8005152:	2200      	movs	r2, #0
 8005154:	711a      	strb	r2, [r3, #4]
	BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8005156:	4b0f      	ldr	r3, [pc, #60]	@ (8005194 <bmi_imu_init+0x54>)
 8005158:	2203      	movs	r2, #3
 800515a:	715a      	strb	r2, [r3, #5]

	// Gyro config
	BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 800515c:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <bmi_imu_init+0x54>)
 800515e:	2202      	movs	r2, #2
 8005160:	725a      	strb	r2, [r3, #9]
	BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8005162:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <bmi_imu_init+0x54>)
 8005164:	2200      	movs	r2, #0
 8005166:	729a      	strb	r2, [r3, #10]
	BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <bmi_imu_init+0x54>)
 800516a:	2200      	movs	r2, #0
 800516c:	721a      	strb	r2, [r3, #8]

	BMI_sensor.device_config.acc_IRQ = EXTI15_10_IRQn;
 800516e:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <bmi_imu_init+0x54>)
 8005170:	2228      	movs	r2, #40	@ 0x28
 8005172:	741a      	strb	r2, [r3, #16]
	BMI_sensor.device_config.gyro_IRQ = EXTI15_10_IRQn;
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <bmi_imu_init+0x54>)
 8005176:	2228      	movs	r2, #40	@ 0x28
 8005178:	745a      	strb	r2, [r3, #17]
	BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <bmi_imu_init+0x54>)
 800517c:	4a06      	ldr	r2, [pc, #24]	@ (8005198 <bmi_imu_init+0x58>)
 800517e:	60da      	str	r2, [r3, #12]
	BMI_sensor.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 8005180:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <bmi_imu_init+0x54>)
 8005182:	2200      	movs	r2, #0
 8005184:	615a      	str	r2, [r3, #20]

	return	bmi088_init(&BMI_sensor);
 8005186:	4803      	ldr	r0, [pc, #12]	@ (8005194 <bmi_imu_init+0x54>)
 8005188:	f7fc ff3e 	bl	8002008 <bmi088_init>
 800518c:	4603      	mov	r3, r0
}
 800518e:	4618      	mov	r0, r3
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000730 	.word	0x20000730
 8005198:	20000410 	.word	0x20000410

0800519c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12)
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ac:	d102      	bne.n	80051b4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&BMI_sensor);
 80051ae:	4807      	ldr	r0, [pc, #28]	@ (80051cc <HAL_GPIO_EXTI_Callback+0x30>)
 80051b0:	f7fd fd5e 	bl	8002c70 <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ba:	d102      	bne.n	80051c2 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&BMI_sensor);
 80051bc:	4803      	ldr	r0, [pc, #12]	@ (80051cc <HAL_GPIO_EXTI_Callback+0x30>)
 80051be:	f7fd fd64 	bl	8002c8a <bmi088_set_gyro_INT>
	}
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000730 	.word	0x20000730

080051d0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005218 <HAL_UARTEx_RxEventCallback+0x48>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d114      	bne.n	8005210 <HAL_UARTEx_RxEventCallback+0x40>
        usart4_packet_ready = 1;
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <HAL_UARTEx_RxEventCallback+0x4c>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
        usart4_packet_size = Size;
 80051ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005220 <HAL_UARTEx_RxEventCallback+0x50>)
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart4, usart4_rx_buffer, sizeof(usart4_rx_buffer));
 80051f2:	2224      	movs	r2, #36	@ 0x24
 80051f4:	490b      	ldr	r1, [pc, #44]	@ (8005224 <HAL_UARTEx_RxEventCallback+0x54>)
 80051f6:	480c      	ldr	r0, [pc, #48]	@ (8005228 <HAL_UARTEx_RxEventCallback+0x58>)
 80051f8:	f007 f914 	bl	800c424 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart4.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <HAL_UARTEx_RxEventCallback+0x58>)
 80051fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <HAL_UARTEx_RxEventCallback+0x58>)
 8005206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0208 	bic.w	r2, r2, #8
 800520e:	601a      	str	r2, [r3, #0]
    }
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40004c00 	.word	0x40004c00
 800521c:	2000082c 	.word	0x2000082c
 8005220:	2000082e 	.word	0x2000082e
 8005224:	200007e0 	.word	0x200007e0
 8005228:	200004ac 	.word	0x200004ac

0800522c <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523c:	d106      	bne.n	800524c <HAL_TIM_PeriodElapsedCallback+0x20>
        tx_timer_flag++;
 800523e:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	3301      	adds	r3, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800524a:	701a      	strb	r2, [r3, #0]
    }
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000830 	.word	0x20000830

0800525c <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a05      	ldr	r2, [pc, #20]	@ (8005280 <HAL_UART_TxCpltCallback+0x24>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d102      	bne.n	8005274 <HAL_UART_TxCpltCallback+0x18>
        usart4_tx_busy = 0;
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <HAL_UART_TxCpltCallback+0x28>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
    }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40004c00 	.word	0x40004c00
 8005284:	20000831 	.word	0x20000831

08005288 <uart4_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart4_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
    if (!usart4_tx_busy) {
 8005294:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <uart4_send_packet_dma+0x30>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <uart4_send_packet_dma+0x28>
        usart4_tx_busy = 1;
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <uart4_send_packet_dma+0x30>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart4, data, size);
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4804      	ldr	r0, [pc, #16]	@ (80052bc <uart4_send_packet_dma+0x34>)
 80052ac:	f007 f83e 	bl	800c32c <HAL_UART_Transmit_DMA>
    }
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000831 	.word	0x20000831
 80052bc:	200004ac 	.word	0x200004ac

080052c0 <HSD_StatusCheck>:
	// Voltaj
	sprintf(uart_buffer,"Akim: %u  | Voltaj: %u \r\n", v_current_raw, v_voltage_raw);
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
}

void HSD_StatusCheck(){
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
	// PC0 pinini oku
	GPIO_PinState pc0_state = HAL_GPIO_ReadPin(STATUS1_GPIO_Port, STATUS1_Pin);
 80052c6:	2101      	movs	r1, #1
 80052c8:	4816      	ldr	r0, [pc, #88]	@ (8005324 <HSD_StatusCheck+0x64>)
 80052ca:	f004 fc5d 	bl	8009b88 <HAL_GPIO_ReadPin>
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
	if (pc0_state == GPIO_PIN_RESET) { // low ise
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HSD_StatusCheck+0x26>
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_SET); // PB10 LED yak
 80052d8:	2201      	movs	r2, #1
 80052da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052de:	4812      	ldr	r0, [pc, #72]	@ (8005328 <HSD_StatusCheck+0x68>)
 80052e0:	f004 fc6a 	bl	8009bb8 <HAL_GPIO_WritePin>
 80052e4:	e005      	b.n	80052f2 <HSD_StatusCheck+0x32>
	} else {
		HAL_GPIO_WritePin(SGU_LED1_GPIO_Port, SGU_LED1_Pin, GPIO_PIN_RESET); // değilse söndür
 80052e6:	2200      	movs	r2, #0
 80052e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052ec:	480e      	ldr	r0, [pc, #56]	@ (8005328 <HSD_StatusCheck+0x68>)
 80052ee:	f004 fc63 	bl	8009bb8 <HAL_GPIO_WritePin>
	}

	// PC5 pinini oku
	GPIO_PinState pc5_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80052f2:	2120      	movs	r1, #32
 80052f4:	480b      	ldr	r0, [pc, #44]	@ (8005324 <HSD_StatusCheck+0x64>)
 80052f6:	f004 fc47 	bl	8009b88 <HAL_GPIO_ReadPin>
 80052fa:	4603      	mov	r3, r0
 80052fc:	71bb      	strb	r3, [r7, #6]
	if (pc5_state == GPIO_PIN_RESET) { // low ise
 80052fe:	79bb      	ldrb	r3, [r7, #6]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <HSD_StatusCheck+0x50>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_SET); // PB2 LED yak
 8005304:	2201      	movs	r2, #1
 8005306:	2104      	movs	r1, #4
 8005308:	4807      	ldr	r0, [pc, #28]	@ (8005328 <HSD_StatusCheck+0x68>)
 800530a:	f004 fc55 	bl	8009bb8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
	}
}
 800530e:	e004      	b.n	800531a <HSD_StatusCheck+0x5a>
		HAL_GPIO_WritePin(SGU_LED2_GPIO_Port, SGU_LED2_Pin, GPIO_PIN_RESET); // değilse söndür
 8005310:	2200      	movs	r2, #0
 8005312:	2104      	movs	r1, #4
 8005314:	4804      	ldr	r0, [pc, #16]	@ (8005328 <HSD_StatusCheck+0x68>)
 8005316:	f004 fc4f 	bl	8009bb8 <HAL_GPIO_WritePin>
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40020800 	.word	0x40020800
 8005328:	40020400 	.word	0x40020400

0800532c <loraBegin>:

void loraBegin()
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8005330:	2064      	movs	r0, #100	@ 0x64
 8005332:	f003 f811 	bl	8008358 <HAL_Delay>

	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8005336:	2200      	movs	r2, #0
 8005338:	2101      	movs	r1, #1
 800533a:	4814      	ldr	r0, [pc, #80]	@ (800538c <loraBegin+0x60>)
 800533c:	f004 fc3c 	bl	8009bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8005340:	2201      	movs	r2, #1
 8005342:	2102      	movs	r1, #2
 8005344:	4811      	ldr	r0, [pc, #68]	@ (800538c <loraBegin+0x60>)
 8005346:	f004 fc37 	bl	8009bb8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800534a:	2064      	movs	r0, #100	@ 0x64
 800534c:	f003 f804 	bl	8008358 <HAL_Delay>

    e22_lora.baudRate = LORA_BAUD_115200;
 8005350:	4b0f      	ldr	r3, [pc, #60]	@ (8005390 <loraBegin+0x64>)
 8005352:	22e0      	movs	r2, #224	@ 0xe0
 8005354:	701a      	strb	r2, [r3, #0]
    e22_lora.airRate = LORA_AIR_RATE_2_4k;
 8005356:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <loraBegin+0x64>)
 8005358:	2202      	movs	r2, #2
 800535a:	705a      	strb	r2, [r3, #1]
    e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <loraBegin+0x64>)
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	709a      	strb	r2, [r3, #2]
    e22_lora.power = LORA_POWER_37dbm;
 8005362:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <loraBegin+0x64>)
 8005364:	2200      	movs	r2, #0
 8005366:	70da      	strb	r2, [r3, #3]
    e22_lora.loraAddress.address16 = 0x0000;
 8005368:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <loraBegin+0x64>)
 800536a:	2200      	movs	r2, #0
 800536c:	80da      	strh	r2, [r3, #6]
    e22_lora.loraKey.key16 = 0x0000;
 800536e:	4b08      	ldr	r3, [pc, #32]	@ (8005390 <loraBegin+0x64>)
 8005370:	2200      	movs	r2, #0
 8005372:	809a      	strh	r2, [r3, #4]

    e22_lora.channel = ROCKET_TELEM_FREQ;
 8005374:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <loraBegin+0x64>)
 8005376:	2219      	movs	r2, #25
 8005378:	721a      	strb	r2, [r3, #8]

    lora_configure(&e22_lora);
 800537a:	4805      	ldr	r0, [pc, #20]	@ (8005390 <loraBegin+0x64>)
 800537c:	f7ff f9f6 	bl	800476c <lora_configure>
    HAL_Delay(1000);
 8005380:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005384:	f002 ffe8 	bl	8008358 <HAL_Delay>
}
 8005388:	bf00      	nop
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40020000 	.word	0x40020000
 8005390:	200007cc 	.word	0x200007cc

08005394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005398:	b672      	cpsid	i
}
 800539a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <Error_Handler+0x8>

080053a0 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	e00a      	b.n	80053c8 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 80053b2:	4a0e      	ldr	r2, [pc, #56]	@ (80053ec <check_sum_hesapla_sit+0x4c>)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4413      	add	r3, r2
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	dbf0      	blt.n	80053b2 <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	425a      	negs	r2, r3
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	bf58      	it	pl
 80053da:	4253      	negpl	r3, r2
 80053dc:	b2db      	uxtb	r3, r3
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	2000083c 	.word	0x2000083c

080053f0 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	4b10      	ldr	r3, [pc, #64]	@ (8005440 <round2+0x50>)
 8005400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005404:	f7fb f918 	bl	8000638 <__aeabi_dmul>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	ec43 2b17 	vmov	d7, r2, r3
 8005410:	eeb0 0a47 	vmov.f32	s0, s14
 8005414:	eef0 0a67 	vmov.f32	s1, s15
 8005418:	f00b fb30 	bl	8010a7c <round>
 800541c:	ec51 0b10 	vmov	r0, r1, d0
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <round2+0x50>)
 8005426:	f7fb fa31 	bl	800088c <__aeabi_ddiv>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005432:	eeb0 0a47 	vmov.f32	s0, s14
 8005436:	eef0 0a67 	vmov.f32	s1, s15
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40590000 	.word	0x40590000

08005444 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	@ 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 800544e:	4b8f      	ldr	r3, [pc, #572]	@ (800568c <addDataPacketSit+0x248>)
 8005450:	22ab      	movs	r2, #171	@ 0xab
 8005452:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	ee17 0a90 	vmov	r0, s15
 8005468:	f7fb f88e 	bl	8000588 <__aeabi_f2d>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	ec43 2b10 	vmov	d0, r2, r3
 8005474:	f7ff ffbc 	bl	80053f0 <round2>
 8005478:	ec53 2b10 	vmov	r2, r3, d0
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	f7fb fbb2 	bl	8000be8 <__aeabi_d2f>
 8005484:	4603      	mov	r3, r0
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8005488:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800548c:	4b7f      	ldr	r3, [pc, #508]	@ (800568c <addDataPacketSit+0x248>)
 800548e:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8005490:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005494:	4b7d      	ldr	r3, [pc, #500]	@ (800568c <addDataPacketSit+0x248>)
 8005496:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8005498:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800549c:	4b7b      	ldr	r3, [pc, #492]	@ (800568c <addDataPacketSit+0x248>)
 800549e:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 80054a0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80054a4:	4b79      	ldr	r3, [pc, #484]	@ (800568c <addDataPacketSit+0x248>)
 80054a6:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fb f86b 	bl	8000588 <__aeabi_f2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	ec43 2b10 	vmov	d0, r2, r3
 80054ba:	f7ff ff99 	bl	80053f0 <round2>
 80054be:	ec53 2b10 	vmov	r2, r3, d0
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	f7fb fb8f 	bl	8000be8 <__aeabi_d2f>
 80054ca:	4603      	mov	r3, r0
 80054cc:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 80054ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80054d2:	4b6e      	ldr	r3, [pc, #440]	@ (800568c <addDataPacketSit+0x248>)
 80054d4:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 80054d6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80054da:	4b6c      	ldr	r3, [pc, #432]	@ (800568c <addDataPacketSit+0x248>)
 80054dc:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 80054de:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80054e2:	4b6a      	ldr	r3, [pc, #424]	@ (800568c <addDataPacketSit+0x248>)
 80054e4:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 80054e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80054ea:	4b68      	ldr	r3, [pc, #416]	@ (800568c <addDataPacketSit+0x248>)
 80054ec:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f848 	bl	8000588 <__aeabi_f2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	ec43 2b10 	vmov	d0, r2, r3
 8005500:	f7ff ff76 	bl	80053f0 <round2>
 8005504:	ec53 2b10 	vmov	r2, r3, d0
 8005508:	4610      	mov	r0, r2
 800550a:	4619      	mov	r1, r3
 800550c:	f7fb fb6c 	bl	8000be8 <__aeabi_d2f>
 8005510:	4603      	mov	r3, r0
 8005512:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8005514:	7ffa      	ldrb	r2, [r7, #31]
 8005516:	4b5d      	ldr	r3, [pc, #372]	@ (800568c <addDataPacketSit+0x248>)
 8005518:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 800551a:	7fba      	ldrb	r2, [r7, #30]
 800551c:	4b5b      	ldr	r3, [pc, #364]	@ (800568c <addDataPacketSit+0x248>)
 800551e:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8005520:	7f7a      	ldrb	r2, [r7, #29]
 8005522:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <addDataPacketSit+0x248>)
 8005524:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8005526:	7f3a      	ldrb	r2, [r7, #28]
 8005528:	4b58      	ldr	r3, [pc, #352]	@ (800568c <addDataPacketSit+0x248>)
 800552a:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb f829 	bl	8000588 <__aeabi_f2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	ec43 2b10 	vmov	d0, r2, r3
 800553e:	f7ff ff57 	bl	80053f0 <round2>
 8005542:	ec53 2b10 	vmov	r2, r3, d0
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f7fb fb4d 	bl	8000be8 <__aeabi_d2f>
 800554e:	4603      	mov	r3, r0
 8005550:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8005552:	7efa      	ldrb	r2, [r7, #27]
 8005554:	4b4d      	ldr	r3, [pc, #308]	@ (800568c <addDataPacketSit+0x248>)
 8005556:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8005558:	7eba      	ldrb	r2, [r7, #26]
 800555a:	4b4c      	ldr	r3, [pc, #304]	@ (800568c <addDataPacketSit+0x248>)
 800555c:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 800555e:	7e7a      	ldrb	r2, [r7, #25]
 8005560:	4b4a      	ldr	r3, [pc, #296]	@ (800568c <addDataPacketSit+0x248>)
 8005562:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8005564:	7e3a      	ldrb	r2, [r7, #24]
 8005566:	4b49      	ldr	r3, [pc, #292]	@ (800568c <addDataPacketSit+0x248>)
 8005568:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556e:	4618      	mov	r0, r3
 8005570:	f7fb f80a 	bl	8000588 <__aeabi_f2d>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	ec43 2b10 	vmov	d0, r2, r3
 800557c:	f7ff ff38 	bl	80053f0 <round2>
 8005580:	ec53 2b10 	vmov	r2, r3, d0
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	f7fb fb2e 	bl	8000be8 <__aeabi_d2f>
 800558c:	4603      	mov	r3, r0
 800558e:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8005590:	7dfa      	ldrb	r2, [r7, #23]
 8005592:	4b3e      	ldr	r3, [pc, #248]	@ (800568c <addDataPacketSit+0x248>)
 8005594:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8005596:	7dba      	ldrb	r2, [r7, #22]
 8005598:	4b3c      	ldr	r3, [pc, #240]	@ (800568c <addDataPacketSit+0x248>)
 800559a:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 800559c:	7d7a      	ldrb	r2, [r7, #21]
 800559e:	4b3b      	ldr	r3, [pc, #236]	@ (800568c <addDataPacketSit+0x248>)
 80055a0:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 80055a2:	7d3a      	ldrb	r2, [r7, #20]
 80055a4:	4b39      	ldr	r3, [pc, #228]	@ (800568c <addDataPacketSit+0x248>)
 80055a6:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_x); // Jiroskop X degerinin atamasini yapiyoruz.
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fa ffeb 	bl	8000588 <__aeabi_f2d>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	ec43 2b10 	vmov	d0, r2, r3
 80055ba:	f7ff ff19 	bl	80053f0 <round2>
 80055be:	ec53 2b10 	vmov	r2, r3, d0
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	f7fb fb0f 	bl	8000be8 <__aeabi_d2f>
 80055ca:	4603      	mov	r3, r0
 80055cc:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 80055ce:	7cfa      	ldrb	r2, [r7, #19]
 80055d0:	4b2e      	ldr	r3, [pc, #184]	@ (800568c <addDataPacketSit+0x248>)
 80055d2:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 80055d4:	7cba      	ldrb	r2, [r7, #18]
 80055d6:	4b2d      	ldr	r3, [pc, #180]	@ (800568c <addDataPacketSit+0x248>)
 80055d8:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 80055da:	7c7a      	ldrb	r2, [r7, #17]
 80055dc:	4b2b      	ldr	r3, [pc, #172]	@ (800568c <addDataPacketSit+0x248>)
 80055de:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 80055e0:	7c3a      	ldrb	r2, [r7, #16]
 80055e2:	4b2a      	ldr	r3, [pc, #168]	@ (800568c <addDataPacketSit+0x248>)
 80055e4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fa ffcc 	bl	8000588 <__aeabi_f2d>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	ec43 2b10 	vmov	d0, r2, r3
 80055f8:	f7ff fefa 	bl	80053f0 <round2>
 80055fc:	ec53 2b10 	vmov	r2, r3, d0
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	f7fb faf0 	bl	8000be8 <__aeabi_d2f>
 8005608:	4603      	mov	r3, r0
 800560a:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	4b1f      	ldr	r3, [pc, #124]	@ (800568c <addDataPacketSit+0x248>)
 8005610:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8005612:	7bba      	ldrb	r2, [r7, #14]
 8005614:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <addDataPacketSit+0x248>)
 8005616:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8005618:	7b7a      	ldrb	r2, [r7, #13]
 800561a:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <addDataPacketSit+0x248>)
 800561c:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 800561e:	7b3a      	ldrb	r2, [r7, #12]
 8005620:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <addDataPacketSit+0x248>)
 8005622:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa ffad 	bl	8000588 <__aeabi_f2d>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	ec43 2b10 	vmov	d0, r2, r3
 8005636:	f7ff fedb 	bl	80053f0 <round2>
 800563a:	ec53 2b10 	vmov	r2, r3, d0
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f7fb fad1 	bl	8000be8 <__aeabi_d2f>
 8005646:	4603      	mov	r3, r0
 8005648:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 800564a:	7afa      	ldrb	r2, [r7, #11]
 800564c:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <addDataPacketSit+0x248>)
 800564e:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8005650:	7aba      	ldrb	r2, [r7, #10]
 8005652:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <addDataPacketSit+0x248>)
 8005654:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8005656:	7a7a      	ldrb	r2, [r7, #9]
 8005658:	4b0c      	ldr	r3, [pc, #48]	@ (800568c <addDataPacketSit+0x248>)
 800565a:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 800565c:	7a3a      	ldrb	r2, [r7, #8]
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <addDataPacketSit+0x248>)
 8005660:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8005664:	2021      	movs	r0, #33	@ 0x21
 8005666:	f7ff fe9b 	bl	80053a0 <check_sum_hesapla_sit>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	4b07      	ldr	r3, [pc, #28]	@ (800568c <addDataPacketSit+0x248>)
 8005670:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <addDataPacketSit+0x248>)
 8005676:	220d      	movs	r2, #13
 8005678:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 800567c:	4b03      	ldr	r3, [pc, #12]	@ (800568c <addDataPacketSit+0x248>)
 800567e:	220a      	movs	r2, #10
 8005680:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8005684:	bf00      	nop
 8005686:	3728      	adds	r7, #40	@ 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	2000083c 	.word	0x2000083c

08005690 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	78db      	ldrb	r3, [r3, #3]
 800569c:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	789b      	ldrb	r3, [r3, #2]
 80056a2:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	ee07 3a90 	vmov	s15, r3
}
 80056b6:	eeb0 0a67 	vmov.f32	s0, s15
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b09e      	sub	sp, #120	@ 0x78
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80056ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80056d2:	ed87 1a01 	vstr	s2, [r7, #4]
 80056d6:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 80056e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80056e4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80056e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 80056ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80056f0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80056f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 80056f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80056fc:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005700:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8005712:	edd7 7a02 	vldr	s15, [r7, #8]
 8005716:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800571a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8005722:	edd7 7a01 	vldr	s15, [r7, #4]
 8005726:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800572a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	653b      	str	r3, [r7, #80]	@ 0x50
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005740:	edd7 7a03 	vldr	s15, [r7, #12]
 8005744:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005748:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8005760:	2300      	movs	r3, #0
 8005762:	677b      	str	r3, [r7, #116]	@ 0x74
 8005764:	e043      	b.n	80057ee <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8005766:	2300      	movs	r3, #0
 8005768:	673b      	str	r3, [r7, #112]	@ 0x70
 800576a:	e024      	b.n	80057b6 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 800576c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	3378      	adds	r3, #120	@ 0x78
 8005772:	443b      	add	r3, r7
 8005774:	3b68      	subs	r3, #104	@ 0x68
 8005776:	ed93 7a00 	vldr	s14, [r3]
 800577a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800577c:	009a      	lsls	r2, r3, #2
 800577e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	3378      	adds	r3, #120	@ 0x78
 8005786:	443b      	add	r3, r7
 8005788:	3b58      	subs	r3, #88	@ 0x58
 800578a:	edd3 6a00 	vldr	s13, [r3]
 800578e:	4a5d      	ldr	r2, [pc, #372]	@ (8005904 <ekf_predict+0x240>)
 8005790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	edd3 7a00 	vldr	s15, [r3]
 800579a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800579e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	3378      	adds	r3, #120	@ 0x78
 80057a8:	443b      	add	r3, r7
 80057aa:	3b68      	subs	r3, #104	@ 0x68
 80057ac:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 80057b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057b2:	3301      	adds	r3, #1
 80057b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	ddd7      	ble.n	800576c <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 80057bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	3378      	adds	r3, #120	@ 0x78
 80057c2:	443b      	add	r3, r7
 80057c4:	3b68      	subs	r3, #104	@ 0x68
 80057c6:	ed93 7a00 	vldr	s14, [r3]
 80057ca:	edd7 7a00 	vldr	s15, [r7]
 80057ce:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80057d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80057d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	3378      	adds	r3, #120	@ 0x78
 80057e0:	443b      	add	r3, r7
 80057e2:	3b68      	subs	r3, #104	@ 0x68
 80057e4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 80057e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057ea:	3301      	adds	r3, #1
 80057ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80057ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	ddb8      	ble.n	8005766 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057f8:	e017      	b.n	800582a <ekf_predict+0x166>
        q[i] += dq[i];
 80057fa:	4a42      	ldr	r2, [pc, #264]	@ (8005904 <ekf_predict+0x240>)
 80057fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	ed93 7a00 	vldr	s14, [r3]
 8005806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	3378      	adds	r3, #120	@ 0x78
 800580c:	443b      	add	r3, r7
 800580e:	3b68      	subs	r3, #104	@ 0x68
 8005810:	edd3 7a00 	vldr	s15, [r3]
 8005814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005818:	4a3a      	ldr	r2, [pc, #232]	@ (8005904 <ekf_predict+0x240>)
 800581a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005826:	3301      	adds	r3, #1
 8005828:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800582a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800582c:	2b03      	cmp	r3, #3
 800582e:	dde4      	ble.n	80057fa <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005830:	4b34      	ldr	r3, [pc, #208]	@ (8005904 <ekf_predict+0x240>)
 8005832:	ed93 7a00 	vldr	s14, [r3]
 8005836:	4b33      	ldr	r3, [pc, #204]	@ (8005904 <ekf_predict+0x240>)
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005840:	4b30      	ldr	r3, [pc, #192]	@ (8005904 <ekf_predict+0x240>)
 8005842:	edd3 6a01 	vldr	s13, [r3, #4]
 8005846:	4b2f      	ldr	r3, [pc, #188]	@ (8005904 <ekf_predict+0x240>)
 8005848:	edd3 7a01 	vldr	s15, [r3, #4]
 800584c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005854:	4b2b      	ldr	r3, [pc, #172]	@ (8005904 <ekf_predict+0x240>)
 8005856:	edd3 6a02 	vldr	s13, [r3, #8]
 800585a:	4b2a      	ldr	r3, [pc, #168]	@ (8005904 <ekf_predict+0x240>)
 800585c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005868:	4b26      	ldr	r3, [pc, #152]	@ (8005904 <ekf_predict+0x240>)
 800586a:	edd3 6a03 	vldr	s13, [r3, #12]
 800586e:	4b25      	ldr	r3, [pc, #148]	@ (8005904 <ekf_predict+0x240>)
 8005870:	edd3 7a03 	vldr	s15, [r3, #12]
 8005874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587c:	eeb0 0a67 	vmov.f32	s0, s15
 8005880:	f00a fc7e 	bl	8010180 <sqrtf>
 8005884:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8005888:	2300      	movs	r3, #0
 800588a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800588c:	e012      	b.n	80058b4 <ekf_predict+0x1f0>
        q[i] /= norm;
 800588e:	4a1d      	ldr	r2, [pc, #116]	@ (8005904 <ekf_predict+0x240>)
 8005890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	edd3 6a00 	vldr	s13, [r3]
 800589a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800589e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a2:	4a18      	ldr	r2, [pc, #96]	@ (8005904 <ekf_predict+0x240>)
 80058a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80058ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058b0:	3301      	adds	r3, #1
 80058b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	dde9      	ble.n	800588e <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80058be:	e018      	b.n	80058f2 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 80058c0:	4911      	ldr	r1, [pc, #68]	@ (8005908 <ekf_predict+0x244>)
 80058c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	edd3 7a00 	vldr	s15, [r3]
 80058d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800590c <ekf_predict+0x248>
 80058d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058da:	490b      	ldr	r1, [pc, #44]	@ (8005908 <ekf_predict+0x244>)
 80058dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80058ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ee:	3301      	adds	r3, #1
 80058f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80058f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	dde3      	ble.n	80058c0 <ekf_predict+0x1fc>
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3778      	adds	r7, #120	@ 0x78
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000018 	.word	0x20000018
 8005908:	20000860 	.word	0x20000860
 800590c:	3727c5ac 	.word	0x3727c5ac

08005910 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8005916:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005918:	ed93 7a01 	vldr	s14, [r3, #4]
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <quaternionToYaw1+0xb0>)
 800591e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005926:	4b26      	ldr	r3, [pc, #152]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005928:	edd3 6a00 	vldr	s13, [r3]
 800592c:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <quaternionToYaw1+0xb0>)
 800592e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800593a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800593e:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005940:	ed93 7a00 	vldr	s14, [r3]
 8005944:	4b1e      	ldr	r3, [pc, #120]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005946:	edd3 7a00 	vldr	s15, [r3]
 800594a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800594e:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005950:	edd3 6a01 	vldr	s13, [r3, #4]
 8005954:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005956:	edd3 7a01 	vldr	s15, [r3, #4]
 800595a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005962:	4b17      	ldr	r3, [pc, #92]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005964:	edd3 6a02 	vldr	s13, [r3, #8]
 8005968:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <quaternionToYaw1+0xb0>)
 800596a:	edd3 7a02 	vldr	s15, [r3, #8]
 800596e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005976:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <quaternionToYaw1+0xb0>)
 8005978:	edd3 6a03 	vldr	s13, [r3, #12]
 800597c:	4b10      	ldr	r3, [pc, #64]	@ (80059c0 <quaternionToYaw1+0xb0>)
 800597e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800598a:	eef0 0a67 	vmov.f32	s1, s15
 800598e:	eeb0 0a46 	vmov.f32	s0, s12
 8005992:	f00a fbf3 	bl	801017c <atan2f>
 8005996:	eef0 7a40 	vmov.f32	s15, s0
 800599a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80059c4 <quaternionToYaw1+0xb4>
 800599e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059a2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80059c8 <quaternionToYaw1+0xb8>
 80059a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059aa:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	ee07 3a90 	vmov	s15, r3
}
 80059b4:	eeb0 0a67 	vmov.f32	s0, s15
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000018 	.word	0x20000018
 80059c4:	43340000 	.word	0x43340000
 80059c8:	40490fd0 	.word	0x40490fd0

080059cc <quaternionToPitch1>:

float quaternionToPitch1(){
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80059d2:	4b17      	ldr	r3, [pc, #92]	@ (8005a30 <quaternionToPitch1+0x64>)
 80059d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80059d8:	4b15      	ldr	r3, [pc, #84]	@ (8005a30 <quaternionToPitch1+0x64>)
 80059da:	edd3 7a03 	vldr	s15, [r3, #12]
 80059de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059e2:	4b13      	ldr	r3, [pc, #76]	@ (8005a30 <quaternionToPitch1+0x64>)
 80059e4:	edd3 6a00 	vldr	s13, [r3]
 80059e8:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <quaternionToPitch1+0x64>)
 80059ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80059ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059fa:	eeb0 0a67 	vmov.f32	s0, s15
 80059fe:	f00a fb91 	bl	8010124 <asinf>
 8005a02:	eef0 7a40 	vmov.f32	s15, s0
 8005a06:	eef1 7a67 	vneg.f32	s15, s15
 8005a0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005a34 <quaternionToPitch1+0x68>
 8005a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a12:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005a38 <quaternionToPitch1+0x6c>
 8005a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a1a:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	ee07 3a90 	vmov	s15, r3
}
 8005a24:	eeb0 0a67 	vmov.f32	s0, s15
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000018 	.word	0x20000018
 8005a34:	43340000 	.word	0x43340000
 8005a38:	40490fd0 	.word	0x40490fd0

08005a3c <quaternionToRoll1>:

float quaternionToRoll1(){
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8005a42:	4b2a      	ldr	r3, [pc, #168]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a44:	ed93 7a00 	vldr	s14, [r3]
 8005a48:	4b28      	ldr	r3, [pc, #160]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a52:	4b26      	ldr	r3, [pc, #152]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a54:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a58:	4b24      	ldr	r3, [pc, #144]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a66:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005a6a:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a6c:	ed93 7a00 	vldr	s14, [r3]
 8005a70:	4b1e      	ldr	r3, [pc, #120]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a72:	edd3 7a00 	vldr	s15, [r3]
 8005a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a80:	4b1a      	ldr	r3, [pc, #104]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a82:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a8e:	4b17      	ldr	r3, [pc, #92]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a90:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a94:	4b15      	ldr	r3, [pc, #84]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005a96:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005aa2:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005aa4:	edd3 6a03 	vldr	s13, [r3, #12]
 8005aa8:	4b10      	ldr	r3, [pc, #64]	@ (8005aec <quaternionToRoll1+0xb0>)
 8005aaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab6:	eef0 0a67 	vmov.f32	s1, s15
 8005aba:	eeb0 0a46 	vmov.f32	s0, s12
 8005abe:	f00a fb5d 	bl	801017c <atan2f>
 8005ac2:	eef0 7a40 	vmov.f32	s15, s0
 8005ac6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005af0 <quaternionToRoll1+0xb4>
 8005aca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ace:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005af4 <quaternionToRoll1+0xb8>
 8005ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ad6:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	ee07 3a90 	vmov	s15, r3
}
 8005ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000018 	.word	0x20000018
 8005af0:	43340000 	.word	0x43340000
 8005af4:	40490fd0 	.word	0x40490fd0

08005af8 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005afe:	4b20      	ldr	r3, [pc, #128]	@ (8005b80 <quaternionToYawDegree1+0x88>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	4b1e      	ldr	r3, [pc, #120]	@ (8005b80 <quaternionToYawDegree1+0x88>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <quaternionToYawDegree1+0x88>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <quaternionToYawDegree1+0x88>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 8005b16:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b22:	edd7 6a04 	vldr	s13, [r7, #16]
 8005b26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b36:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 8005b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b3e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b5a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 8005b5e:	edd7 0a00 	vldr	s1, [r7]
 8005b62:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b66:	f00a fb09 	bl	801017c <atan2f>
 8005b6a:	eef0 7a40 	vmov.f32	s15, s0
 8005b6e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005b84 <quaternionToYawDegree1+0x8c>
 8005b72:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005b76:	eeb0 0a67 	vmov.f32	s0, s15
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000018 	.word	0x20000018
 8005b84:	42652ee0 	.word	0x42652ee0

08005b88 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08c      	sub	sp, #48	@ 0x30
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b92:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b96:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005b9a:	4bd5      	ldr	r3, [pc, #852]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005b9c:	ed93 7a00 	vldr	s14, [r3]
 8005ba0:	4bd3      	ldr	r3, [pc, #844]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005ba2:	edd3 7a00 	vldr	s15, [r3]
 8005ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005baa:	4bd1      	ldr	r3, [pc, #836]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005bac:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bb0:	4bcf      	ldr	r3, [pc, #828]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005bb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bbe:	4bcc      	ldr	r3, [pc, #816]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005bc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bc4:	4bca      	ldr	r3, [pc, #808]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005bc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd2:	4bc7      	ldr	r3, [pc, #796]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005bd4:	edd3 6a03 	vldr	s13, [r3, #12]
 8005bd8:	4bc5      	ldr	r3, [pc, #788]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005bda:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bea:	f00a fac9 	bl	8010180 <sqrtf>
 8005bee:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8005bf2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005bf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfe:	f000 8172 	beq.w	8005ee6 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8005c02:	4bbb      	ldr	r3, [pc, #748]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c04:	edd3 6a00 	vldr	s13, [r3]
 8005c08:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c10:	4bb7      	ldr	r3, [pc, #732]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c12:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8005c16:	4bb6      	ldr	r3, [pc, #728]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c18:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c1c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c24:	4bb2      	ldr	r3, [pc, #712]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c26:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8005c2a:	4bb1      	ldr	r3, [pc, #708]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c30:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c38:	4bad      	ldr	r3, [pc, #692]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c3a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8005c3e:	4bac      	ldr	r3, [pc, #688]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c40:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c44:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4c:	4ba8      	ldr	r3, [pc, #672]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c4e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005c52:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c54:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c58:	4ba5      	ldr	r3, [pc, #660]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c62:	4ba3      	ldr	r3, [pc, #652]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c64:	edd3 6a00 	vldr	s13, [r3]
 8005c68:	4ba1      	ldr	r3, [pc, #644]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c80:	ed93 7a00 	vldr	s14, [r3]
 8005c84:	4b9a      	ldr	r3, [pc, #616]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c86:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c8e:	4b98      	ldr	r3, [pc, #608]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c90:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c94:	4b96      	ldr	r3, [pc, #600]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005c96:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ca2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ca6:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005caa:	4b91      	ldr	r3, [pc, #580]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cac:	ed93 7a00 	vldr	s14, [r3]
 8005cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cb2:	edd3 7a00 	vldr	s15, [r3]
 8005cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cba:	4b8d      	ldr	r3, [pc, #564]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005cc0:	4b8b      	ldr	r3, [pc, #556]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cce:	4b88      	ldr	r3, [pc, #544]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cd4:	4b86      	ldr	r3, [pc, #536]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ce2:	4b83      	ldr	r3, [pc, #524]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005ce4:	edd3 6a03 	vldr	s13, [r3, #12]
 8005ce8:	4b81      	ldr	r3, [pc, #516]	@ (8005ef0 <UpdateMahonyGains+0x368>)
 8005cea:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8005cfa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005cfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1e:	f001 f8cb 	bl	8006eb8 <invSqrt>
 8005d22:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8005d26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005d36:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005d46:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d76:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7a:	f001 f89d 	bl	8006eb8 <invSqrt>
 8005d7e:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8005d82:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d86:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8e:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8005d92:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8005da2:	ed97 7a01 	vldr	s14, [r7, #4]
 8005da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8005db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8005db6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dbe:	edd7 6a02 	vldr	s13, [r7, #8]
 8005dc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dce:	edd7 6a01 	vldr	s13, [r7, #4]
 8005dd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8005dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dde:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8005de2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	dd02      	ble.n	8005dfa <UpdateMahonyGains+0x272>
 8005df4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8005dfa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005dfe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0a:	d501      	bpl.n	8005e10 <UpdateMahonyGains+0x288>
 8005e0c:	4b39      	ldr	r3, [pc, #228]	@ (8005ef4 <UpdateMahonyGains+0x36c>)
 8005e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005e10:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005e14:	f00a f95a 	bl	80100cc <acosf>
 8005e18:	eef0 7a40 	vmov.f32	s15, s0
 8005e1c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005ef8 <UpdateMahonyGains+0x370>
 8005e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e24:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8005e28:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e2c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	dd0a      	ble.n	8005e50 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8005e3a:	4b30      	ldr	r3, [pc, #192]	@ (8005efc <UpdateMahonyGains+0x374>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005e40:	4b2f      	ldr	r3, [pc, #188]	@ (8005f00 <UpdateMahonyGains+0x378>)
 8005e42:	4a30      	ldr	r2, [pc, #192]	@ (8005f04 <UpdateMahonyGains+0x37c>)
 8005e44:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005e46:	4b30      	ldr	r3, [pc, #192]	@ (8005f08 <UpdateMahonyGains+0x380>)
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e01d      	b.n	8005e8c <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005e50:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	dd0a      	ble.n	8005e78 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8005e62:	4b26      	ldr	r3, [pc, #152]	@ (8005efc <UpdateMahonyGains+0x374>)
 8005e64:	2202      	movs	r2, #2
 8005e66:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005e68:	4b25      	ldr	r3, [pc, #148]	@ (8005f00 <UpdateMahonyGains+0x378>)
 8005e6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005e6e:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005e70:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <UpdateMahonyGains+0x380>)
 8005e72:	4a26      	ldr	r2, [pc, #152]	@ (8005f0c <UpdateMahonyGains+0x384>)
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e009      	b.n	8005e8c <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005e78:	4b20      	ldr	r3, [pc, #128]	@ (8005efc <UpdateMahonyGains+0x374>)
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8005e7e:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <UpdateMahonyGains+0x378>)
 8005e80:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005e84:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005e86:	4b20      	ldr	r3, [pc, #128]	@ (8005f08 <UpdateMahonyGains+0x380>)
 8005e88:	4a21      	ldr	r2, [pc, #132]	@ (8005f10 <UpdateMahonyGains+0x388>)
 8005e8a:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f00 <UpdateMahonyGains+0x378>)
 8005e8e:	edd3 7a00 	vldr	s15, [r3]
 8005e92:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005e96:	eeb0 0a67 	vmov.f32	s0, s15
 8005e9a:	f00a fe52 	bl	8010b42 <fminf>
 8005e9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ea2:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005f14 <UpdateMahonyGains+0x38c>
 8005ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eaa:	f00a fe2d 	bl	8010b08 <fmaxf>
 8005eae:	eef0 7a40 	vmov.f32	s15, s0
 8005eb2:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <UpdateMahonyGains+0x378>)
 8005eb4:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005eb8:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <UpdateMahonyGains+0x380>)
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8005f18 <UpdateMahonyGains+0x390>
 8005ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec6:	f00a fe3c 	bl	8010b42 <fminf>
 8005eca:	eef0 7a40 	vmov.f32	s15, s0
 8005ece:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005f1c <UpdateMahonyGains+0x394>
 8005ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed6:	f00a fe17 	bl	8010b08 <fmaxf>
 8005eda:	eef0 7a40 	vmov.f32	s15, s0
 8005ede:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <UpdateMahonyGains+0x380>)
 8005ee0:	edc3 7a00 	vstr	s15, [r3]
 8005ee4:	e000      	b.n	8005ee8 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8005ee6:	bf00      	nop
}
 8005ee8:	3730      	adds	r7, #48	@ 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000028 	.word	0x20000028
 8005ef4:	bf800000 	.word	0xbf800000
 8005ef8:	42652ee2 	.word	0x42652ee2
 8005efc:	200008ac 	.word	0x200008ac
 8005f00:	20000038 	.word	0x20000038
 8005f04:	3e4ccccd 	.word	0x3e4ccccd
 8005f08:	2000003c 	.word	0x2000003c
 8005f0c:	3c23d70a 	.word	0x3c23d70a
 8005f10:	3d4ccccd 	.word	0x3d4ccccd
 8005f14:	3dcccccd 	.word	0x3dcccccd
 8005f18:	3d4ccccd 	.word	0x3d4ccccd
 8005f1c:	00000000 	.word	0x00000000

08005f20 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	@ 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	ed87 0a07 	vstr	s0, [r7, #28]
 8005f2a:	edc7 0a06 	vstr	s1, [r7, #24]
 8005f2e:	ed87 1a05 	vstr	s2, [r7, #20]
 8005f32:	edc7 1a04 	vstr	s3, [r7, #16]
 8005f36:	ed87 2a03 	vstr	s4, [r7, #12]
 8005f3a:	edc7 2a02 	vstr	s5, [r7, #8]
 8005f3e:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8005f42:	4b60      	ldr	r3, [pc, #384]	@ (80060c4 <Orientation_Update+0x1a4>)
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8005f46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005f4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80060c8 <Orientation_Update+0x1a8>)
 8005f60:	edd3 7a00 	vldr	s15, [r3]
 8005f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f6c:	4b56      	ldr	r3, [pc, #344]	@ (80060c8 <Orientation_Update+0x1a8>)
 8005f6e:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8005f72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f86:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f8a:	4b50      	ldr	r3, [pc, #320]	@ (80060cc <Orientation_Update+0x1ac>)
 8005f8c:	edd3 7a00 	vldr	s15, [r3]
 8005f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f98:	4b4c      	ldr	r3, [pc, #304]	@ (80060cc <Orientation_Update+0x1ac>)
 8005f9a:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8005f9e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005fa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005fb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fb6:	4b46      	ldr	r3, [pc, #280]	@ (80060d0 <Orientation_Update+0x1b0>)
 8005fb8:	edd3 7a00 	vldr	s15, [r3]
 8005fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc4:	4b42      	ldr	r3, [pc, #264]	@ (80060d0 <Orientation_Update+0x1b0>)
 8005fc6:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005fca:	4b3f      	ldr	r3, [pc, #252]	@ (80060c8 <Orientation_Update+0x1a8>)
 8005fcc:	edd3 7a00 	vldr	s15, [r3]
 8005fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80060cc <Orientation_Update+0x1ac>)
 8005fd2:	ed93 7a00 	vldr	s14, [r3]
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80060d0 <Orientation_Update+0x1b0>)
 8005fd8:	edd3 6a00 	vldr	s13, [r3]
 8005fdc:	eeb0 1a66 	vmov.f32	s2, s13
 8005fe0:	eef0 0a47 	vmov.f32	s1, s14
 8005fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fe8:	f7ff fdce 	bl	8005b88 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8005fec:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <Orientation_Update+0x1a8>)
 8005fee:	ed93 7a00 	vldr	s14, [r3]
 8005ff2:	4b35      	ldr	r3, [pc, #212]	@ (80060c8 <Orientation_Update+0x1a8>)
 8005ff4:	edd3 7a00 	vldr	s15, [r3]
 8005ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ffc:	4b33      	ldr	r3, [pc, #204]	@ (80060cc <Orientation_Update+0x1ac>)
 8005ffe:	edd3 6a00 	vldr	s13, [r3]
 8006002:	4b32      	ldr	r3, [pc, #200]	@ (80060cc <Orientation_Update+0x1ac>)
 8006004:	edd3 7a00 	vldr	s15, [r3]
 8006008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800600c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006010:	4b2f      	ldr	r3, [pc, #188]	@ (80060d0 <Orientation_Update+0x1b0>)
 8006012:	edd3 6a00 	vldr	s13, [r3]
 8006016:	4b2e      	ldr	r3, [pc, #184]	@ (80060d0 <Orientation_Update+0x1b0>)
 8006018:	edd3 7a00 	vldr	s15, [r3]
 800601c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006024:	eeb0 0a67 	vmov.f32	s0, s15
 8006028:	f00a f8aa 	bl	8010180 <sqrtf>
 800602c:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8006030:	4b28      	ldr	r3, [pc, #160]	@ (80060d4 <Orientation_Update+0x1b4>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8006038:	edd7 7a08 	vldr	s15, [r7, #32]
 800603c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80060d8 <Orientation_Update+0x1b8>
 8006040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006048:	d50f      	bpl.n	800606a <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 800604a:	4b22      	ldr	r3, [pc, #136]	@ (80060d4 <Orientation_Update+0x1b4>)
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	e00b      	b.n	800606a <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8006052:	edd7 7a08 	vldr	s15, [r7, #32]
 8006056:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80060dc <Orientation_Update+0x1bc>
 800605a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006062:	dd02      	ble.n	800606a <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8006064:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <Orientation_Update+0x1b4>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 800606a:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <Orientation_Update+0x1b4>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8006072:	edd7 1a01 	vldr	s3, [r7, #4]
 8006076:	ed97 1a05 	vldr	s2, [r7, #20]
 800607a:	edd7 0a06 	vldr	s1, [r7, #24]
 800607e:	ed97 0a07 	vldr	s0, [r7, #28]
 8006082:	f000 f82d 	bl	80060e0 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8006086:	e018      	b.n	80060ba <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <Orientation_Update+0x1a8>)
 800608a:	edd3 7a00 	vldr	s15, [r3]
 800608e:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <Orientation_Update+0x1ac>)
 8006090:	ed93 7a00 	vldr	s14, [r3]
 8006094:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <Orientation_Update+0x1b0>)
 8006096:	edd3 6a00 	vldr	s13, [r3]
 800609a:	ed97 3a01 	vldr	s6, [r7, #4]
 800609e:	eef0 2a66 	vmov.f32	s5, s13
 80060a2:	eeb0 2a47 	vmov.f32	s4, s14
 80060a6:	eef0 1a67 	vmov.f32	s3, s15
 80060aa:	ed97 1a05 	vldr	s2, [r7, #20]
 80060ae:	edd7 0a06 	vldr	s1, [r7, #24]
 80060b2:	ed97 0a07 	vldr	s0, [r7, #28]
 80060b6:	f000 f93b 	bl	8006330 <MahonyAHRSupdateIMU>
}
 80060ba:	bf00      	nop
 80060bc:	3728      	adds	r7, #40	@ 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	3e99999a 	.word	0x3e99999a
 80060c8:	200008b0 	.word	0x200008b0
 80060cc:	200008b4 	.word	0x200008b4
 80060d0:	200008b8 	.word	0x200008b8
 80060d4:	200008ad 	.word	0x200008ad
 80060d8:	41d3d2db 	.word	0x41d3d2db
 80060dc:	420172a2 	.word	0x420172a2

080060e0 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	@ 0x28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80060ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80060ee:	ed87 1a01 	vstr	s2, [r7, #4]
 80060f2:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80060f6:	4b8c      	ldr	r3, [pc, #560]	@ (8006328 <updateQuaternion+0x248>)
 80060f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80060fc:	eeb1 7a67 	vneg.f32	s14, s15
 8006100:	edd7 7a03 	vldr	s15, [r7, #12]
 8006104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006108:	4b87      	ldr	r3, [pc, #540]	@ (8006328 <updateQuaternion+0x248>)
 800610a:	edd3 6a02 	vldr	s13, [r3, #8]
 800610e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800611a:	4b83      	ldr	r3, [pc, #524]	@ (8006328 <updateQuaternion+0x248>)
 800611c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006120:	edd7 7a01 	vldr	s15, [r7, #4]
 8006124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800612c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006134:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8006138:	4b7b      	ldr	r3, [pc, #492]	@ (8006328 <updateQuaternion+0x248>)
 800613a:	ed93 7a00 	vldr	s14, [r3]
 800613e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006146:	4b78      	ldr	r3, [pc, #480]	@ (8006328 <updateQuaternion+0x248>)
 8006148:	edd3 6a02 	vldr	s13, [r3, #8]
 800614c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006158:	4b73      	ldr	r3, [pc, #460]	@ (8006328 <updateQuaternion+0x248>)
 800615a:	edd3 6a03 	vldr	s13, [r3, #12]
 800615e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800616a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800616e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006172:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8006176:	4b6c      	ldr	r3, [pc, #432]	@ (8006328 <updateQuaternion+0x248>)
 8006178:	ed93 7a00 	vldr	s14, [r3]
 800617c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006184:	4b68      	ldr	r3, [pc, #416]	@ (8006328 <updateQuaternion+0x248>)
 8006186:	edd3 6a01 	vldr	s13, [r3, #4]
 800618a:	edd7 7a01 	vldr	s15, [r7, #4]
 800618e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006192:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006196:	4b64      	ldr	r3, [pc, #400]	@ (8006328 <updateQuaternion+0x248>)
 8006198:	edd3 6a03 	vldr	s13, [r3, #12]
 800619c:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061b0:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 80061b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006328 <updateQuaternion+0x248>)
 80061b6:	ed93 7a00 	vldr	s14, [r3]
 80061ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80061be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061c2:	4b59      	ldr	r3, [pc, #356]	@ (8006328 <updateQuaternion+0x248>)
 80061c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80061c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80061cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061d4:	4b54      	ldr	r3, [pc, #336]	@ (8006328 <updateQuaternion+0x248>)
 80061d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80061da:	edd7 7a03 	vldr	s15, [r7, #12]
 80061de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ee:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 80061f2:	4b4d      	ldr	r3, [pc, #308]	@ (8006328 <updateQuaternion+0x248>)
 80061f4:	ed93 7a00 	vldr	s14, [r3]
 80061f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061fc:	edd7 7a00 	vldr	s15, [r7]
 8006200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006208:	4b47      	ldr	r3, [pc, #284]	@ (8006328 <updateQuaternion+0x248>)
 800620a:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 800620e:	4b46      	ldr	r3, [pc, #280]	@ (8006328 <updateQuaternion+0x248>)
 8006210:	ed93 7a01 	vldr	s14, [r3, #4]
 8006214:	edd7 6a08 	vldr	s13, [r7, #32]
 8006218:	edd7 7a00 	vldr	s15, [r7]
 800621c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006224:	4b40      	ldr	r3, [pc, #256]	@ (8006328 <updateQuaternion+0x248>)
 8006226:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 800622a:	4b3f      	ldr	r3, [pc, #252]	@ (8006328 <updateQuaternion+0x248>)
 800622c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006230:	edd7 6a07 	vldr	s13, [r7, #28]
 8006234:	edd7 7a00 	vldr	s15, [r7]
 8006238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800623c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006240:	4b39      	ldr	r3, [pc, #228]	@ (8006328 <updateQuaternion+0x248>)
 8006242:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8006246:	4b38      	ldr	r3, [pc, #224]	@ (8006328 <updateQuaternion+0x248>)
 8006248:	ed93 7a03 	vldr	s14, [r3, #12]
 800624c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006250:	edd7 7a00 	vldr	s15, [r7]
 8006254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800625c:	4b32      	ldr	r3, [pc, #200]	@ (8006328 <updateQuaternion+0x248>)
 800625e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8006262:	4b31      	ldr	r3, [pc, #196]	@ (8006328 <updateQuaternion+0x248>)
 8006264:	ed93 7a00 	vldr	s14, [r3]
 8006268:	4b2f      	ldr	r3, [pc, #188]	@ (8006328 <updateQuaternion+0x248>)
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006272:	4b2d      	ldr	r3, [pc, #180]	@ (8006328 <updateQuaternion+0x248>)
 8006274:	edd3 6a01 	vldr	s13, [r3, #4]
 8006278:	4b2b      	ldr	r3, [pc, #172]	@ (8006328 <updateQuaternion+0x248>)
 800627a:	edd3 7a01 	vldr	s15, [r3, #4]
 800627e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006282:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006286:	4b28      	ldr	r3, [pc, #160]	@ (8006328 <updateQuaternion+0x248>)
 8006288:	edd3 6a02 	vldr	s13, [r3, #8]
 800628c:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <updateQuaternion+0x248>)
 800628e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800629a:	4b23      	ldr	r3, [pc, #140]	@ (8006328 <updateQuaternion+0x248>)
 800629c:	edd3 6a03 	vldr	s13, [r3, #12]
 80062a0:	4b21      	ldr	r3, [pc, #132]	@ (8006328 <updateQuaternion+0x248>)
 80062a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80062a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ae:	eeb0 0a67 	vmov.f32	s0, s15
 80062b2:	f009 ff65 	bl	8010180 <sqrtf>
 80062b6:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 80062ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80062be:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800632c <updateQuaternion+0x24c>
 80062c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ca:	dc00      	bgt.n	80062ce <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 80062cc:	e027      	b.n	800631e <updateQuaternion+0x23e>
        q[0] /= norm;
 80062ce:	4b16      	ldr	r3, [pc, #88]	@ (8006328 <updateQuaternion+0x248>)
 80062d0:	edd3 6a00 	vldr	s13, [r3]
 80062d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	4b12      	ldr	r3, [pc, #72]	@ (8006328 <updateQuaternion+0x248>)
 80062de:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 80062e2:	4b11      	ldr	r3, [pc, #68]	@ (8006328 <updateQuaternion+0x248>)
 80062e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80062e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80062ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <updateQuaternion+0x248>)
 80062f2:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 80062f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <updateQuaternion+0x248>)
 80062f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80062fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8006300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006304:	4b08      	ldr	r3, [pc, #32]	@ (8006328 <updateQuaternion+0x248>)
 8006306:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 800630a:	4b07      	ldr	r3, [pc, #28]	@ (8006328 <updateQuaternion+0x248>)
 800630c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006310:	ed97 7a05 	vldr	s14, [r7, #20]
 8006314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006318:	4b03      	ldr	r3, [pc, #12]	@ (8006328 <updateQuaternion+0x248>)
 800631a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800631e:	bf00      	nop
 8006320:	3728      	adds	r7, #40	@ 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000028 	.word	0x20000028
 800632c:	358637bd 	.word	0x358637bd

08006330 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b092      	sub	sp, #72	@ 0x48
 8006334:	af00      	add	r7, sp, #0
 8006336:	ed87 0a07 	vstr	s0, [r7, #28]
 800633a:	edc7 0a06 	vstr	s1, [r7, #24]
 800633e:	ed87 1a05 	vstr	s2, [r7, #20]
 8006342:	edc7 1a04 	vstr	s3, [r7, #16]
 8006346:	ed87 2a03 	vstr	s4, [r7, #12]
 800634a:	edc7 2a02 	vstr	s5, [r7, #8]
 800634e:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8006352:	edd7 7a04 	vldr	s15, [r7, #16]
 8006356:	eef5 7a40 	vcmp.f32	s15, #0.0
 800635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635e:	d10e      	bne.n	800637e <MahonyAHRSupdateIMU+0x4e>
 8006360:	edd7 7a03 	vldr	s15, [r7, #12]
 8006364:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636c:	d107      	bne.n	800637e <MahonyAHRSupdateIMU+0x4e>
 800636e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006372:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	f000 8138 	beq.w	80065ee <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 800637e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006382:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006386:	edd7 7a03 	vldr	s15, [r7, #12]
 800638a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800638e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006392:	edd7 7a02 	vldr	s15, [r7, #8]
 8006396:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800639a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800639e:	eeb0 0a67 	vmov.f32	s0, s15
 80063a2:	f000 fd89 	bl	8006eb8 <invSqrt>
 80063a6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 80063aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80063ae:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80063b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b6:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 80063ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80063be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80063c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c6:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 80063ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80063ce:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80063d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d6:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 80063da:	4b66      	ldr	r3, [pc, #408]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 80063dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80063e0:	4b64      	ldr	r3, [pc, #400]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 80063e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80063e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ea:	4b62      	ldr	r3, [pc, #392]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 80063ec:	edd3 6a00 	vldr	s13, [r3]
 80063f0:	4b60      	ldr	r3, [pc, #384]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 80063f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80063f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8006402:	4b5c      	ldr	r3, [pc, #368]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 8006404:	ed93 7a00 	vldr	s14, [r3]
 8006408:	4b5a      	ldr	r3, [pc, #360]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 800640a:	edd3 7a01 	vldr	s15, [r3, #4]
 800640e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006412:	4b58      	ldr	r3, [pc, #352]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 8006414:	edd3 6a02 	vldr	s13, [r3, #8]
 8006418:	4b56      	ldr	r3, [pc, #344]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 800641a:	edd3 7a03 	vldr	s15, [r3, #12]
 800641e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006426:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 800642a:	4b52      	ldr	r3, [pc, #328]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 800642c:	ed93 7a00 	vldr	s14, [r3]
 8006430:	4b50      	ldr	r3, [pc, #320]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 8006432:	edd3 7a00 	vldr	s15, [r3]
 8006436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800643e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006442:	4b4c      	ldr	r3, [pc, #304]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 8006444:	edd3 6a03 	vldr	s13, [r3, #12]
 8006448:	4b4a      	ldr	r3, [pc, #296]	@ (8006574 <MahonyAHRSupdateIMU+0x244>)
 800644a:	edd3 7a03 	vldr	s15, [r3, #12]
 800644e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006456:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 800645a:	ed97 7a03 	vldr	s14, [r7, #12]
 800645e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006466:	edd7 6a02 	vldr	s13, [r7, #8]
 800646a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800646e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006476:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 800647a:	ed97 7a02 	vldr	s14, [r7, #8]
 800647e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006486:	edd7 6a04 	vldr	s13, [r7, #16]
 800648a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800648e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006496:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 800649a:	ed97 7a04 	vldr	s14, [r7, #16]
 800649e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80064a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80064aa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80064ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 80064ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006578 <MahonyAHRSupdateIMU+0x248>)
 80064bc:	edd3 7a00 	vldr	s15, [r3]
 80064c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	dd5e      	ble.n	8006588 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 80064ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006578 <MahonyAHRSupdateIMU+0x248>)
 80064cc:	ed93 7a00 	vldr	s14, [r3]
 80064d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80064d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80064dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064e0:	4b26      	ldr	r3, [pc, #152]	@ (800657c <MahonyAHRSupdateIMU+0x24c>)
 80064e2:	edd3 7a00 	vldr	s15, [r3]
 80064e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ea:	4b24      	ldr	r3, [pc, #144]	@ (800657c <MahonyAHRSupdateIMU+0x24c>)
 80064ec:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 80064f0:	4b21      	ldr	r3, [pc, #132]	@ (8006578 <MahonyAHRSupdateIMU+0x248>)
 80064f2:	ed93 7a00 	vldr	s14, [r3]
 80064f6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80064fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8006502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006506:	4b1e      	ldr	r3, [pc, #120]	@ (8006580 <MahonyAHRSupdateIMU+0x250>)
 8006508:	edd3 7a00 	vldr	s15, [r3]
 800650c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006510:	4b1b      	ldr	r3, [pc, #108]	@ (8006580 <MahonyAHRSupdateIMU+0x250>)
 8006512:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8006516:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <MahonyAHRSupdateIMU+0x248>)
 8006518:	ed93 7a00 	vldr	s14, [r3]
 800651c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006524:	edd7 7a01 	vldr	s15, [r7, #4]
 8006528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800652c:	4b15      	ldr	r3, [pc, #84]	@ (8006584 <MahonyAHRSupdateIMU+0x254>)
 800652e:	edd3 7a00 	vldr	s15, [r3]
 8006532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006536:	4b13      	ldr	r3, [pc, #76]	@ (8006584 <MahonyAHRSupdateIMU+0x254>)
 8006538:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 800653c:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <MahonyAHRSupdateIMU+0x24c>)
 800653e:	edd3 7a00 	vldr	s15, [r3]
 8006542:	ed97 7a07 	vldr	s14, [r7, #28]
 8006546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 800654e:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <MahonyAHRSupdateIMU+0x250>)
 8006550:	edd3 7a00 	vldr	s15, [r3]
 8006554:	ed97 7a06 	vldr	s14, [r7, #24]
 8006558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655c:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8006560:	4b08      	ldr	r3, [pc, #32]	@ (8006584 <MahonyAHRSupdateIMU+0x254>)
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	ed97 7a05 	vldr	s14, [r7, #20]
 800656a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800656e:	edc7 7a05 	vstr	s15, [r7, #20]
 8006572:	e015      	b.n	80065a0 <MahonyAHRSupdateIMU+0x270>
 8006574:	20000028 	.word	0x20000028
 8006578:	2000003c 	.word	0x2000003c
 800657c:	200008a0 	.word	0x200008a0
 8006580:	200008a4 	.word	0x200008a4
 8006584:	200008a8 	.word	0x200008a8
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006588:	4b9a      	ldr	r3, [pc, #616]	@ (80067f4 <MahonyAHRSupdateIMU+0x4c4>)
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006590:	4b99      	ldr	r3, [pc, #612]	@ (80067f8 <MahonyAHRSupdateIMU+0x4c8>)
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006598:	4b98      	ldr	r3, [pc, #608]	@ (80067fc <MahonyAHRSupdateIMU+0x4cc>)
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 80065a0:	4b97      	ldr	r3, [pc, #604]	@ (8006800 <MahonyAHRSupdateIMU+0x4d0>)
 80065a2:	ed93 7a00 	vldr	s14, [r3]
 80065a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80065aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80065b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b6:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 80065ba:	4b91      	ldr	r3, [pc, #580]	@ (8006800 <MahonyAHRSupdateIMU+0x4d0>)
 80065bc:	ed93 7a00 	vldr	s14, [r3]
 80065c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80065c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80065cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d0:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 80065d4:	4b8a      	ldr	r3, [pc, #552]	@ (8006800 <MahonyAHRSupdateIMU+0x4d0>)
 80065d6:	ed93 7a00 	vldr	s14, [r3]
 80065da:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80065e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ea:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 80065ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80065f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8006606:	edd7 7a01 	vldr	s15, [r7, #4]
 800660a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800660e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006612:	ed97 7a06 	vldr	s14, [r7, #24]
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 800661e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006622:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800662a:	ed97 7a05 	vldr	s14, [r7, #20]
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006636:	4b73      	ldr	r3, [pc, #460]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 800663c:	4b71      	ldr	r3, [pc, #452]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8006642:	4b70      	ldr	r3, [pc, #448]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006648:	4b6e      	ldr	r3, [pc, #440]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800664a:	ed93 7a00 	vldr	s14, [r3]
 800664e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006652:	eef1 6a67 	vneg.f32	s13, s15
 8006656:	edd7 7a07 	vldr	s15, [r7, #28]
 800665a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800665e:	ed97 6a08 	vldr	s12, [r7, #32]
 8006662:	edd7 7a06 	vldr	s15, [r7, #24]
 8006666:	ee66 7a27 	vmul.f32	s15, s12, s15
 800666a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800666e:	4b65      	ldr	r3, [pc, #404]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006670:	ed93 6a03 	vldr	s12, [r3, #12]
 8006674:	edd7 7a05 	vldr	s15, [r7, #20]
 8006678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800667c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006684:	4b5f      	ldr	r3, [pc, #380]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006686:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 800668a:	4b5e      	ldr	r3, [pc, #376]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800668c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006690:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006694:	edd7 7a07 	vldr	s15, [r7, #28]
 8006698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800669c:	ed97 6a08 	vldr	s12, [r7, #32]
 80066a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80066a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80066ac:	4b55      	ldr	r3, [pc, #340]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80066ae:	ed93 6a03 	vldr	s12, [r3, #12]
 80066b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80066b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c2:	4b50      	ldr	r3, [pc, #320]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80066c4:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 80066c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80066ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80066ce:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80066d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80066d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80066da:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80066de:	edd7 7a05 	vldr	s15, [r7, #20]
 80066e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80066ea:	4b46      	ldr	r3, [pc, #280]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80066ec:	ed93 6a03 	vldr	s12, [r3, #12]
 80066f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80066f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006700:	4b40      	ldr	r3, [pc, #256]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006702:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8006706:	4b3f      	ldr	r3, [pc, #252]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006708:	ed93 7a03 	vldr	s14, [r3, #12]
 800670c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006710:	edd7 7a05 	vldr	s15, [r7, #20]
 8006714:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006718:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800671c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006720:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006724:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006728:	ed97 6a08 	vldr	s12, [r7, #32]
 800672c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006730:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006734:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800673c:	4b31      	ldr	r3, [pc, #196]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800673e:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8006742:	4b30      	ldr	r3, [pc, #192]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006744:	ed93 7a00 	vldr	s14, [r3]
 8006748:	4b2e      	ldr	r3, [pc, #184]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800674a:	edd3 7a00 	vldr	s15, [r3]
 800674e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006752:	4b2c      	ldr	r3, [pc, #176]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006754:	edd3 6a01 	vldr	s13, [r3, #4]
 8006758:	4b2a      	ldr	r3, [pc, #168]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800675a:	edd3 7a01 	vldr	s15, [r3, #4]
 800675e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006766:	4b27      	ldr	r3, [pc, #156]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006768:	edd3 6a02 	vldr	s13, [r3, #8]
 800676c:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800676e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800677a:	4b22      	ldr	r3, [pc, #136]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800677c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006780:	4b20      	ldr	r3, [pc, #128]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 8006782:	edd3 7a03 	vldr	s15, [r3, #12]
 8006786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800678a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800678e:	eeb0 0a67 	vmov.f32	s0, s15
 8006792:	f000 fb91 	bl	8006eb8 <invSqrt>
 8006796:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 800679a:	4b1a      	ldr	r3, [pc, #104]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 800679c:	ed93 7a00 	vldr	s14, [r3]
 80067a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80067a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a8:	4b16      	ldr	r3, [pc, #88]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067aa:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 80067ae:	4b15      	ldr	r3, [pc, #84]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80067b4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80067b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067bc:	4b11      	ldr	r3, [pc, #68]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067be:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80067c8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80067cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067d2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80067dc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80067e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e4:	4b07      	ldr	r3, [pc, #28]	@ (8006804 <MahonyAHRSupdateIMU+0x4d4>)
 80067e6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80067ea:	bf00      	nop
 80067ec:	3748      	adds	r7, #72	@ 0x48
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200008a0 	.word	0x200008a0
 80067f8:	200008a4 	.word	0x200008a4
 80067fc:	200008a8 	.word	0x200008a8
 8006800:	20000038 	.word	0x20000038
 8006804:	20000028 	.word	0x20000028

08006808 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 800680e:	4b44      	ldr	r3, [pc, #272]	@ (8006920 <quaternionToThetaZ+0x118>)
 8006810:	edd3 7a01 	vldr	s15, [r3, #4]
 8006814:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006818:	4b41      	ldr	r3, [pc, #260]	@ (8006920 <quaternionToThetaZ+0x118>)
 800681a:	edd3 7a03 	vldr	s15, [r3, #12]
 800681e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006822:	4b3f      	ldr	r3, [pc, #252]	@ (8006920 <quaternionToThetaZ+0x118>)
 8006824:	edd3 7a02 	vldr	s15, [r3, #8]
 8006828:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800682c:	4b3c      	ldr	r3, [pc, #240]	@ (8006920 <quaternionToThetaZ+0x118>)
 800682e:	edd3 7a00 	vldr	s15, [r3]
 8006832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683a:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800683e:	4b38      	ldr	r3, [pc, #224]	@ (8006920 <quaternionToThetaZ+0x118>)
 8006840:	edd3 7a02 	vldr	s15, [r3, #8]
 8006844:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006848:	4b35      	ldr	r3, [pc, #212]	@ (8006920 <quaternionToThetaZ+0x118>)
 800684a:	edd3 7a03 	vldr	s15, [r3, #12]
 800684e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006852:	4b33      	ldr	r3, [pc, #204]	@ (8006920 <quaternionToThetaZ+0x118>)
 8006854:	edd3 7a01 	vldr	s15, [r3, #4]
 8006858:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800685c:	4b30      	ldr	r3, [pc, #192]	@ (8006920 <quaternionToThetaZ+0x118>)
 800685e:	edd3 7a00 	vldr	s15, [r3]
 8006862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800686a:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800686e:	4b2c      	ldr	r3, [pc, #176]	@ (8006920 <quaternionToThetaZ+0x118>)
 8006870:	edd3 7a01 	vldr	s15, [r3, #4]
 8006874:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006878:	4b29      	ldr	r3, [pc, #164]	@ (8006920 <quaternionToThetaZ+0x118>)
 800687a:	edd3 7a01 	vldr	s15, [r3, #4]
 800687e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800688a:	4b25      	ldr	r3, [pc, #148]	@ (8006920 <quaternionToThetaZ+0x118>)
 800688c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006890:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006894:	4b22      	ldr	r3, [pc, #136]	@ (8006920 <quaternionToThetaZ+0x118>)
 8006896:	edd3 7a02 	vldr	s15, [r3, #8]
 800689a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800689e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a2:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 80068aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80068ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80068b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80068b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068be:	edd7 7a03 	vldr	s15, [r7, #12]
 80068c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ca:	eeb0 0a67 	vmov.f32	s0, s15
 80068ce:	f009 fc57 	bl	8010180 <sqrtf>
 80068d2:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 80068d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80068da:	edd7 7a01 	vldr	s15, [r7, #4]
 80068de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068e2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80068e6:	eeb0 0a66 	vmov.f32	s0, s13
 80068ea:	f00a f92a 	bl	8010b42 <fminf>
 80068ee:	eef0 7a40 	vmov.f32	s15, s0
 80068f2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80068f6:	eeb0 0a67 	vmov.f32	s0, s15
 80068fa:	f00a f905 	bl	8010b08 <fmaxf>
 80068fe:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8006902:	ed97 0a00 	vldr	s0, [r7]
 8006906:	f009 fbe1 	bl	80100cc <acosf>
 800690a:	eef0 7a40 	vmov.f32	s15, s0
 800690e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006924 <quaternionToThetaZ+0x11c>
 8006912:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006916:	eeb0 0a67 	vmov.f32	s0, s15
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000028 	.word	0x20000028
 8006924:	42654ca3 	.word	0x42654ca3

08006928 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800692e:	4b22      	ldr	r3, [pc, #136]	@ (80069b8 <quaternionToPitchDegree+0x90>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <quaternionToPitchDegree+0x90>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	4b1f      	ldr	r3, [pc, #124]	@ (80069b8 <quaternionToPitchDegree+0x90>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <quaternionToPitchDegree+0x90>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 8006946:	ed97 7a05 	vldr	s14, [r7, #20]
 800694a:	edd7 7a03 	vldr	s15, [r7, #12]
 800694e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006952:	edd7 6a02 	vldr	s13, [r7, #8]
 8006956:	edd7 7a04 	vldr	s15, [r7, #16]
 800695a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800695e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006962:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006966:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 800696a:	edd7 7a01 	vldr	s15, [r7, #4]
 800696e:	eef0 7ae7 	vabs.f32	s15, s15
 8006972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	db0c      	blt.n	800699a <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8006980:	edd7 7a01 	vldr	s15, [r7, #4]
 8006984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698c:	dd02      	ble.n	8006994 <quaternionToPitchDegree+0x6c>
 800698e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80069bc <quaternionToPitchDegree+0x94>
 8006992:	e00c      	b.n	80069ae <quaternionToPitchDegree+0x86>
 8006994:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80069c0 <quaternionToPitchDegree+0x98>
 8006998:	e009      	b.n	80069ae <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800699a:	ed97 0a01 	vldr	s0, [r7, #4]
 800699e:	f009 fbc1 	bl	8010124 <asinf>
 80069a2:	eef0 7a40 	vmov.f32	s15, s0
 80069a6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80069c4 <quaternionToPitchDegree+0x9c>
 80069aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80069ae:	eeb0 0a67 	vmov.f32	s0, s15
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000028 	.word	0x20000028
 80069bc:	42b40000 	.word	0x42b40000
 80069c0:	c2b40000 	.word	0xc2b40000
 80069c4:	42652ee0 	.word	0x42652ee0

080069c8 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80069ce:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <quaternionToRollDegree+0x88>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a50 <quaternionToRollDegree+0x88>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <quaternionToRollDegree+0x88>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006a50 <quaternionToRollDegree+0x88>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80069e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80069ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80069ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069f2:	edd7 6a03 	vldr	s13, [r7, #12]
 80069f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80069fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a06:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 8006a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a0e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a2a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 8006a2e:	edd7 0a00 	vldr	s1, [r7]
 8006a32:	ed97 0a01 	vldr	s0, [r7, #4]
 8006a36:	f009 fba1 	bl	801017c <atan2f>
 8006a3a:	eef0 7a40 	vmov.f32	s15, s0
 8006a3e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006a54 <quaternionToRollDegree+0x8c>
 8006a42:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006a46:	eeb0 0a67 	vmov.f32	s0, s15
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000028 	.word	0x20000028
 8006a54:	42652ee0 	.word	0x42652ee0

08006a58 <quaternionToYaw>:


float quaternionToYaw(){
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8006a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a60:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a64:	4b28      	ldr	r3, [pc, #160]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a66:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a6e:	4b26      	ldr	r3, [pc, #152]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a70:	edd3 6a00 	vldr	s13, [r3]
 8006a74:	4b24      	ldr	r3, [pc, #144]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a76:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a82:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006a86:	4b20      	ldr	r3, [pc, #128]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a88:	ed93 7a00 	vldr	s14, [r3]
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a8e:	edd3 7a00 	vldr	s15, [r3]
 8006a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a96:	4b1c      	ldr	r3, [pc, #112]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a98:	edd3 6a01 	vldr	s13, [r3, #4]
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006a9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006aaa:	4b17      	ldr	r3, [pc, #92]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006aac:	edd3 6a02 	vldr	s13, [r3, #8]
 8006ab0:	4b15      	ldr	r3, [pc, #84]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006ab2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006abe:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006ac0:	edd3 6a03 	vldr	s13, [r3, #12]
 8006ac4:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <quaternionToYaw+0xb0>)
 8006ac6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad2:	eef0 0a67 	vmov.f32	s1, s15
 8006ad6:	eeb0 0a46 	vmov.f32	s0, s12
 8006ada:	f009 fb4f 	bl	801017c <atan2f>
 8006ade:	eef0 7a40 	vmov.f32	s15, s0
 8006ae2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006b0c <quaternionToYaw+0xb4>
 8006ae6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006aea:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006b10 <quaternionToYaw+0xb8>
 8006aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006af2:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	ee07 3a90 	vmov	s15, r3
}
 8006afc:	eeb0 0a67 	vmov.f32	s0, s15
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000028 	.word	0x20000028
 8006b0c:	43340000 	.word	0x43340000
 8006b10:	40490fd0 	.word	0x40490fd0

08006b14 <quaternionToPitch>:

float quaternionToPitch(){
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 8006b1a:	4b17      	ldr	r3, [pc, #92]	@ (8006b78 <quaternionToPitch+0x64>)
 8006b1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006b20:	4b15      	ldr	r3, [pc, #84]	@ (8006b78 <quaternionToPitch+0x64>)
 8006b22:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b2a:	4b13      	ldr	r3, [pc, #76]	@ (8006b78 <quaternionToPitch+0x64>)
 8006b2c:	edd3 6a00 	vldr	s13, [r3]
 8006b30:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <quaternionToPitch+0x64>)
 8006b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006b42:	eeb0 0a67 	vmov.f32	s0, s15
 8006b46:	f009 faed 	bl	8010124 <asinf>
 8006b4a:	eef0 7a40 	vmov.f32	s15, s0
 8006b4e:	eef1 7a67 	vneg.f32	s15, s15
 8006b52:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006b7c <quaternionToPitch+0x68>
 8006b56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b5a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006b80 <quaternionToPitch+0x6c>
 8006b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b62:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	ee07 3a90 	vmov	s15, r3
}
 8006b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000028 	.word	0x20000028
 8006b7c:	43340000 	.word	0x43340000
 8006b80:	40490fd0 	.word	0x40490fd0

08006b84 <quaternionToRoll>:

float quaternionToRoll(){
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006b8c:	ed93 7a00 	vldr	s14, [r3]
 8006b90:	4b28      	ldr	r3, [pc, #160]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006b92:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b9a:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006b9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006ba0:	4b24      	ldr	r3, [pc, #144]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006ba2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bae:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006bb2:	4b20      	ldr	r3, [pc, #128]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bb4:	ed93 7a00 	vldr	s14, [r3]
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bba:	edd3 7a00 	vldr	s15, [r3]
 8006bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bc4:	edd3 6a01 	vldr	s13, [r3, #4]
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8006bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bd6:	4b17      	ldr	r3, [pc, #92]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bd8:	edd3 6a02 	vldr	s13, [r3, #8]
 8006bdc:	4b15      	ldr	r3, [pc, #84]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bde:	edd3 7a02 	vldr	s15, [r3, #8]
 8006be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006be6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bea:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bec:	edd3 6a03 	vldr	s13, [r3, #12]
 8006bf0:	4b10      	ldr	r3, [pc, #64]	@ (8006c34 <quaternionToRoll+0xb0>)
 8006bf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bfe:	eef0 0a67 	vmov.f32	s1, s15
 8006c02:	eeb0 0a46 	vmov.f32	s0, s12
 8006c06:	f009 fab9 	bl	801017c <atan2f>
 8006c0a:	eef0 7a40 	vmov.f32	s15, s0
 8006c0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006c38 <quaternionToRoll+0xb4>
 8006c12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c16:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006c3c <quaternionToRoll+0xb8>
 8006c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c1e:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	ee07 3a90 	vmov	s15, r3
}
 8006c28:	eeb0 0a67 	vmov.f32	s0, s15
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000028 	.word	0x20000028
 8006c38:	43340000 	.word	0x43340000
 8006c3c:	40490fd0 	.word	0x40490fd0

08006c40 <getInitialQuaternion>:

void getInitialQuaternion() {
 8006c40:	b5b0      	push	{r4, r5, r7, lr}
 8006c42:	b092      	sub	sp, #72	@ 0x48
 8006c44:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8006c46:	4b98      	ldr	r3, [pc, #608]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c48:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8006c4c:	4b96      	ldr	r3, [pc, #600]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c4e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c56:	4b94      	ldr	r3, [pc, #592]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c58:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8006c5c:	4b92      	ldr	r3, [pc, #584]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c5e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8006c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c6c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8006c70:	4b8d      	ldr	r3, [pc, #564]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c72:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8006c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c7e:	ee17 0a90 	vmov	r0, s15
 8006c82:	f7f9 fc81 	bl	8000588 <__aeabi_f2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	ec43 2b10 	vmov	d0, r2, r3
 8006c8e:	f009 fb05 	bl	801029c <sqrt>
 8006c92:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8006c96:	4b84      	ldr	r3, [pc, #528]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7f9 fc74 	bl	8000588 <__aeabi_f2d>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006ca8:	4b7f      	ldr	r3, [pc, #508]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006caa:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006cae:	eef1 7a67 	vneg.f32	s15, s15
 8006cb2:	ee17 3a90 	vmov	r3, s15
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7f9 fc66 	bl	8000588 <__aeabi_f2d>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8006cc4:	4b78      	ldr	r3, [pc, #480]	@ (8006ea8 <getInitialQuaternion+0x268>)
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7f9 fc5d 	bl	8000588 <__aeabi_f2d>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006cd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cde:	f7f9 fdd5 	bl	800088c <__aeabi_ddiv>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8006cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cf2:	f7f9 fdcb 	bl	800088c <__aeabi_ddiv>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8006cfe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d06:	f7f9 fdc1 	bl	800088c <__aeabi_ddiv>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8006d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d16:	f04f 0000 	mov.w	r0, #0
 8006d1a:	4964      	ldr	r1, [pc, #400]	@ (8006eac <getInitialQuaternion+0x26c>)
 8006d1c:	f7f9 fad4 	bl	80002c8 <__aeabi_dsub>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	ec43 2b17 	vmov	d7, r2, r3
 8006d28:	eeb0 0a47 	vmov.f32	s0, s14
 8006d2c:	eef0 0a67 	vmov.f32	s1, s15
 8006d30:	f009 fab4 	bl	801029c <sqrt>
 8006d34:	ec51 0b10 	vmov	r0, r1, d0
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006eb0 <getInitialQuaternion+0x270>)
 8006d3e:	f7f9 fc7b 	bl	8000638 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4e:	f04f 0000 	mov.w	r0, #0
 8006d52:	4957      	ldr	r1, [pc, #348]	@ (8006eb0 <getInitialQuaternion+0x270>)
 8006d54:	f7f9 fd9a 	bl	800088c <__aeabi_ddiv>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006d60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d68:	f7f9 fc66 	bl	8000638 <__aeabi_dmul>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4610      	mov	r0, r2
 8006d72:	4619      	mov	r1, r3
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	4b4d      	ldr	r3, [pc, #308]	@ (8006eb0 <getInitialQuaternion+0x270>)
 8006d7a:	f7f9 fc5d 	bl	8000638 <__aeabi_dmul>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006d86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006d8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d8e:	f7f9 fc53 	bl	8000638 <__aeabi_dmul>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4610      	mov	r0, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	4b44      	ldr	r3, [pc, #272]	@ (8006eb0 <getInitialQuaternion+0x270>)
 8006da0:	f7f9 fc4a 	bl	8000638 <__aeabi_dmul>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc0:	f7f9 fc3a 	bl	8000638 <__aeabi_dmul>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd4:	f7f9 fc30 	bl	8000638 <__aeabi_dmul>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 fa74 	bl	80002cc <__adddf3>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	461d      	mov	r5, r3
 8006dec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006df0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006df4:	f7f9 fc20 	bl	8000638 <__aeabi_dmul>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	4629      	mov	r1, r5
 8006e00:	f7f9 fa64 	bl	80002cc <__adddf3>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e14:	f7f9 fc10 	bl	8000638 <__aeabi_dmul>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fa54 	bl	80002cc <__adddf3>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	ec43 2b17 	vmov	d7, r2, r3
 8006e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8006e30:	eef0 0a67 	vmov.f32	s1, s15
 8006e34:	f009 fa32 	bl	801029c <sqrt>
 8006e38:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e44:	f7f9 fd22 	bl	800088c <__aeabi_ddiv>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f7f9 feca 	bl	8000be8 <__aeabi_d2f>
 8006e54:	4603      	mov	r3, r0
 8006e56:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <getInitialQuaternion+0x274>)
 8006e58:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e62:	f7f9 fd13 	bl	800088c <__aeabi_ddiv>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7f9 febb 	bl	8000be8 <__aeabi_d2f>
 8006e72:	4603      	mov	r3, r0
 8006e74:	4a0f      	ldr	r2, [pc, #60]	@ (8006eb4 <getInitialQuaternion+0x274>)
 8006e76:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e80:	f7f9 fd04 	bl	800088c <__aeabi_ddiv>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7f9 feac 	bl	8000be8 <__aeabi_d2f>
 8006e90:	4603      	mov	r3, r0
 8006e92:	4a08      	ldr	r2, [pc, #32]	@ (8006eb4 <getInitialQuaternion+0x274>)
 8006e94:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006e96:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <getInitialQuaternion+0x274>)
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
}
 8006e9e:	bf00      	nop
 8006ea0:	3748      	adds	r7, #72	@ 0x48
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000730 	.word	0x20000730
 8006eac:	3ff00000 	.word	0x3ff00000
 8006eb0:	3fe00000 	.word	0x3fe00000
 8006eb4:	20000028 	.word	0x20000028

08006eb8 <invSqrt>:

float invSqrt(float x) {
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ec6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ece:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006ed6:	f107 0310 	add.w	r3, r7, #16
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	105a      	asrs	r2, r3, #1
 8006ee2:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <invSqrt+0x74>)
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006ee8:	f107 030c 	add.w	r3, r7, #12
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006ef0:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f04:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f14:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	ee07 3a90 	vmov	s15, r3
}
 8006f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	5f3759df 	.word	0x5f3759df

08006f30 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006f36:	4b3d      	ldr	r3, [pc, #244]	@ (800702c <calculate_accel_std_deviation+0xfc>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <calculate_accel_std_deviation+0x1c>
 8006f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8007030 <calculate_accel_std_deviation+0x100>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d802      	bhi.n	8006f4c <calculate_accel_std_deviation+0x1c>
 8006f46:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8007034 <calculate_accel_std_deviation+0x104>
 8006f4a:	e069      	b.n	8007020 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006f4c:	4b37      	ldr	r3, [pc, #220]	@ (800702c <calculate_accel_std_deviation+0xfc>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <calculate_accel_std_deviation+0x2a>
 8006f54:	4b36      	ldr	r3, [pc, #216]	@ (8007030 <calculate_accel_std_deviation+0x100>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	e000      	b.n	8006f5c <calculate_accel_std_deviation+0x2c>
 8006f5a:	2305      	movs	r3, #5
 8006f5c:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e00e      	b.n	8006f94 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006f76:	4a30      	ldr	r2, [pc, #192]	@ (8007038 <calculate_accel_std_deviation+0x108>)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	edd3 7a00 	vldr	s15, [r3]
 8006f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f8a:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	dbec      	blt.n	8006f76 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fa6:	edd7 6a05 	vldr	s13, [r7, #20]
 8006faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fae:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	e01e      	b.n	8006ff6 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8007038 <calculate_accel_std_deviation+0x108>)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	ed93 7a00 	vldr	s14, [r3]
 8006fc4:	edd7 7a00 	vldr	s15, [r7]
 8006fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8007038 <calculate_accel_std_deviation+0x108>)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	edd3 6a00 	vldr	s13, [r3]
 8006fd8:	edd7 7a00 	vldr	s15, [r7]
 8006fdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe4:	ed97 7a04 	vldr	s14, [r7, #16]
 8006fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fec:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	dbdc      	blt.n	8006fb8 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007008:	edd7 6a04 	vldr	s13, [r7, #16]
 800700c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007010:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8007014:	ed97 0a04 	vldr	s0, [r7, #16]
 8007018:	f009 f8b2 	bl	8010180 <sqrtf>
 800701c:	eef0 7a40 	vmov.f32	s15, s0
}
 8007020:	eeb0 0a67 	vmov.f32	s0, s15
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2000092d 	.word	0x2000092d
 8007030:	2000092c 	.word	0x2000092c
 8007034:	00000000 	.word	0x00000000
 8007038:	20000918 	.word	0x20000918

0800703c <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8007046:	edd7 7a01 	vldr	s15, [r7, #4]
 800704a:	eef0 7ae7 	vabs.f32	s15, s15
 800704e:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8007052:	4b31      	ldr	r3, [pc, #196]	@ (8007118 <detect_accel_failure+0xdc>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	4a31      	ldr	r2, [pc, #196]	@ (800711c <detect_accel_failure+0xe0>)
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8007060:	4b2d      	ldr	r3, [pc, #180]	@ (8007118 <detect_accel_failure+0xdc>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	4b2e      	ldr	r3, [pc, #184]	@ (8007120 <detect_accel_failure+0xe4>)
 8007068:	fb83 1302 	smull	r1, r3, r3, r2
 800706c:	1059      	asrs	r1, r3, #1
 800706e:	17d3      	asrs	r3, r2, #31
 8007070:	1ac9      	subs	r1, r1, r3
 8007072:	460b      	mov	r3, r1
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	1ad1      	subs	r1, r2, r3
 800707a:	b2ca      	uxtb	r2, r1
 800707c:	4b26      	ldr	r3, [pc, #152]	@ (8007118 <detect_accel_failure+0xdc>)
 800707e:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8007080:	4b25      	ldr	r3, [pc, #148]	@ (8007118 <detect_accel_failure+0xdc>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8007088:	4b26      	ldr	r3, [pc, #152]	@ (8007124 <detect_accel_failure+0xe8>)
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 800708e:	f7ff ff4f 	bl	8006f30 <calculate_accel_std_deviation>
 8007092:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8007096:	f7fc f84f 	bl	8003138 <flight_algorithm_get_start_time>
 800709a:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 80070a2:	4a21      	ldr	r2, [pc, #132]	@ (8007128 <detect_accel_failure+0xec>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 80070a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007128 <detect_accel_failure+0xec>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 80070b0:	4b1e      	ldr	r3, [pc, #120]	@ (800712c <detect_accel_failure+0xf0>)
 80070b2:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 80070b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <detect_accel_failure+0xf4>)
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	e014      	b.n	80070e4 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 80070ba:	f001 f941 	bl	8008340 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	4b19      	ldr	r3, [pc, #100]	@ (8007128 <detect_accel_failure+0xec>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d804      	bhi.n	80070dc <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 80070d2:	4b18      	ldr	r3, [pc, #96]	@ (8007134 <detect_accel_failure+0xf8>)
 80070d4:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 80070d6:	4b18      	ldr	r3, [pc, #96]	@ (8007138 <detect_accel_failure+0xfc>)
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e003      	b.n	80070e4 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 80070dc:	4b16      	ldr	r3, [pc, #88]	@ (8007138 <detect_accel_failure+0xfc>)
 80070de:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 80070e0:	4b16      	ldr	r3, [pc, #88]	@ (800713c <detect_accel_failure+0x100>)
 80070e2:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 80070e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80070e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80070ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f4:	dc08      	bgt.n	8007108 <detect_accel_failure+0xcc>
 80070f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80070fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80070fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007106:	dd01      	ble.n	800710c <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	2000092c 	.word	0x2000092c
 800711c:	20000918 	.word	0x20000918
 8007120:	66666667 	.word	0x66666667
 8007124:	2000092d 	.word	0x2000092d
 8007128:	20000914 	.word	0x20000914
 800712c:	43480000 	.word	0x43480000
 8007130:	42c80000 	.word	0x42c80000
 8007134:	43160000 	.word	0x43160000
 8007138:	42480000 	.word	0x42480000
 800713c:	41700000 	.word	0x41700000

08007140 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8007148:	481b      	ldr	r0, [pc, #108]	@ (80071b8 <sensor_fusion_init+0x78>)
 800714a:	f7fc f875 	bl	8003238 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 800714e:	4b1a      	ldr	r3, [pc, #104]	@ (80071b8 <sensor_fusion_init+0x78>)
 8007150:	4a1a      	ldr	r2, [pc, #104]	@ (80071bc <sensor_fusion_init+0x7c>)
 8007152:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8007154:	4b18      	ldr	r3, [pc, #96]	@ (80071b8 <sensor_fusion_init+0x78>)
 8007156:	4a1a      	ldr	r2, [pc, #104]	@ (80071c0 <sensor_fusion_init+0x80>)
 8007158:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 800715a:	4b17      	ldr	r3, [pc, #92]	@ (80071b8 <sensor_fusion_init+0x78>)
 800715c:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <sensor_fusion_init+0x84>)
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e009      	b.n	800717a <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8007166:	4a18      	ldr	r2, [pc, #96]	@ (80071c8 <sensor_fusion_init+0x88>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b04      	cmp	r3, #4
 800717e:	ddf2      	ble.n	8007166 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8007180:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <sensor_fusion_init+0x8c>)
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8007186:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <sensor_fusion_init+0x90>)
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 800718c:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <sensor_fusion_init+0x94>)
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8007192:	4b11      	ldr	r3, [pc, #68]	@ (80071d8 <sensor_fusion_init+0x98>)
 8007194:	2201      	movs	r2, #1
 8007196:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	4a0f      	ldr	r2, [pc, #60]	@ (80071dc <sensor_fusion_init+0x9c>)
 800719e:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 80071a0:	f001 f8ce 	bl	8008340 <HAL_GetTick>
 80071a4:	4603      	mov	r3, r0
 80071a6:	4a0e      	ldr	r2, [pc, #56]	@ (80071e0 <sensor_fusion_init+0xa0>)
 80071a8:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 80071aa:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <sensor_fusion_init+0xa4>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	200008bc 	.word	0x200008bc
 80071bc:	3dcccccd 	.word	0x3dcccccd
 80071c0:	3ba3d70a 	.word	0x3ba3d70a
 80071c4:	40a00000 	.word	0x40a00000
 80071c8:	20000918 	.word	0x20000918
 80071cc:	2000092c 	.word	0x2000092c
 80071d0:	2000092d 	.word	0x2000092d
 80071d4:	2000092e 	.word	0x2000092e
 80071d8:	20000908 	.word	0x20000908
 80071dc:	2000090c 	.word	0x2000090c
 80071e0:	20000910 	.word	0x20000910
 80071e4:	20000914 	.word	0x20000914

080071e8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	@ 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 80071f4:	f001 f8a4 	bl	8008340 <HAL_GetTick>
 80071f8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 80071fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007328 <sensor_fusion_update_kalman+0x140>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800720a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800732c <sensor_fusion_update_kalman+0x144>
 800720e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007212:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8007216:	4a44      	ldr	r2, [pc, #272]	@ (8007328 <sensor_fusion_update_kalman+0x140>)
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8007222:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007226:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007330 <sensor_fusion_update_kalman+0x148>
 800722a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800722e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007232:	d801      	bhi.n	8007238 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8007234:	4b3f      	ldr	r3, [pc, #252]	@ (8007334 <sensor_fusion_update_kalman+0x14c>)
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	4618      	mov	r0, r3
 800723e:	f7f9 f9a3 	bl	8000588 <__aeabi_f2d>
 8007242:	a335      	add	r3, pc, #212	@ (adr r3, 8007318 <sensor_fusion_update_kalman+0x130>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f9f6 	bl	8000638 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4610      	mov	r0, r2
 8007252:	4619      	mov	r1, r3
 8007254:	f7f9 fcc8 	bl	8000be8 <__aeabi_d2f>
 8007258:	4603      	mov	r3, r0
 800725a:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 800725c:	69b8      	ldr	r0, [r7, #24]
 800725e:	f7f9 f993 	bl	8000588 <__aeabi_f2d>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	ec43 2b10 	vmov	d0, r2, r3
 800726a:	f009 f84d 	bl	8010308 <cos>
 800726e:	ec51 0b10 	vmov	r0, r1, d0
 8007272:	a32b      	add	r3, pc, #172	@ (adr r3, 8007320 <sensor_fusion_update_kalman+0x138>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9de 	bl	8000638 <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	f7f9 fcb0 	bl	8000be8 <__aeabi_d2f>
 8007288:	4603      	mov	r3, r0
 800728a:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8007292:	edd7 7a05 	vldr	s15, [r7, #20]
 8007296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800729a:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 800729e:	ed97 0a04 	vldr	s0, [r7, #16]
 80072a2:	f7ff fecb 	bl	800703c <detect_accel_failure>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	4b23      	ldr	r3, [pc, #140]	@ (8007338 <sensor_fusion_update_kalman+0x150>)
 80072ac:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 80072ae:	4b22      	ldr	r3, [pc, #136]	@ (8007338 <sensor_fusion_update_kalman+0x150>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 80072b6:	4b21      	ldr	r3, [pc, #132]	@ (800733c <sensor_fusion_update_kalman+0x154>)
 80072b8:	4a21      	ldr	r2, [pc, #132]	@ (8007340 <sensor_fusion_update_kalman+0x158>)
 80072ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80072bc:	e002      	b.n	80072c4 <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 80072be:	4b1f      	ldr	r3, [pc, #124]	@ (800733c <sensor_fusion_update_kalman+0x154>)
 80072c0:	4a20      	ldr	r2, [pc, #128]	@ (8007344 <sensor_fusion_update_kalman+0x15c>)
 80072c2:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 80072c4:	4b20      	ldr	r3, [pc, #128]	@ (8007348 <sensor_fusion_update_kalman+0x160>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d020      	beq.n	800730e <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 80072cc:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 80072d0:	edd7 0a04 	vldr	s1, [r7, #16]
 80072d4:	ed97 0a07 	vldr	s0, [r7, #28]
 80072d8:	4818      	ldr	r0, [pc, #96]	@ (800733c <sensor_fusion_update_kalman+0x154>)
 80072da:	f7fc f807 	bl	80032ec <KalmanFilter_Update>
 80072de:	eef0 7a40 	vmov.f32	s15, s0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 80072e8:	4814      	ldr	r0, [pc, #80]	@ (800733c <sensor_fusion_update_kalman+0x154>)
 80072ea:	f7fd f9e3 	bl	80046b4 <KalmanFilter_IsApogeeDetected>
 80072ee:	4603      	mov	r3, r0
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 80072f6:	4811      	ldr	r0, [pc, #68]	@ (800733c <sensor_fusion_update_kalman+0x154>)
 80072f8:	f7fd f9cd 	bl	8004696 <Kalman_Get_Velocity>
 80072fc:	eef0 7a40 	vmov.f32	s15, s0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8007306:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <sensor_fusion_update_kalman+0x150>)
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	765a      	strb	r2, [r3, #25]
    }
}
 800730e:	bf00      	nop
 8007310:	3728      	adds	r7, #40	@ 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	a2529d39 	.word	0xa2529d39
 800731c:	3f91df46 	.word	0x3f91df46
 8007320:	60000000 	.word	0x60000000
 8007324:	40239eb8 	.word	0x40239eb8
 8007328:	20000910 	.word	0x20000910
 800732c:	447a0000 	.word	0x447a0000
 8007330:	3a83126f 	.word	0x3a83126f
 8007334:	3c23d70a 	.word	0x3c23d70a
 8007338:	2000092e 	.word	0x2000092e
 800733c:	200008bc 	.word	0x200008bc
 8007340:	42480000 	.word	0x42480000
 8007344:	3e99999a 	.word	0x3e99999a
 8007348:	20000908 	.word	0x20000908

0800734c <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	4b10      	ldr	r3, [pc, #64]	@ (80073b0 <HAL_MspInit+0x4c>)
 8007370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007372:	4a0f      	ldr	r2, [pc, #60]	@ (80073b0 <HAL_MspInit+0x4c>)
 8007374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007378:	6453      	str	r3, [r2, #68]	@ 0x44
 800737a:	4b0d      	ldr	r3, [pc, #52]	@ (80073b0 <HAL_MspInit+0x4c>)
 800737c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007382:	607b      	str	r3, [r7, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007386:	2300      	movs	r3, #0
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	4b09      	ldr	r3, [pc, #36]	@ (80073b0 <HAL_MspInit+0x4c>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	4a08      	ldr	r2, [pc, #32]	@ (80073b0 <HAL_MspInit+0x4c>)
 8007390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007394:	6413      	str	r3, [r2, #64]	@ 0x40
 8007396:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <HAL_MspInit+0x4c>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800

080073b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08c      	sub	sp, #48	@ 0x30
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073bc:	f107 031c 	add.w	r3, r7, #28
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	609a      	str	r2, [r3, #8]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a5e      	ldr	r2, [pc, #376]	@ (800754c <HAL_ADC_MspInit+0x198>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d158      	bne.n	8007488 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073d6:	2300      	movs	r3, #0
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	4b5d      	ldr	r3, [pc, #372]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80073dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073de:	4a5c      	ldr	r2, [pc, #368]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80073e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80073e6:	4b5a      	ldr	r3, [pc, #360]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ee:	61bb      	str	r3, [r7, #24]
 80073f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	4b56      	ldr	r3, [pc, #344]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fa:	4a55      	ldr	r2, [pc, #340]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80073fc:	f043 0302 	orr.w	r3, r3, #2
 8007400:	6313      	str	r3, [r2, #48]	@ 0x30
 8007402:	4b53      	ldr	r3, [pc, #332]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800740e:	2302      	movs	r3, #2
 8007410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007412:	2303      	movs	r3, #3
 8007414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800741a:	f107 031c 	add.w	r3, r7, #28
 800741e:	4619      	mov	r1, r3
 8007420:	484c      	ldr	r0, [pc, #304]	@ (8007554 <HAL_ADC_MspInit+0x1a0>)
 8007422:	f002 f929 	bl	8009678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007426:	4b4c      	ldr	r3, [pc, #304]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007428:	4a4c      	ldr	r2, [pc, #304]	@ (800755c <HAL_ADC_MspInit+0x1a8>)
 800742a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800742c:	4b4a      	ldr	r3, [pc, #296]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 800742e:	2200      	movs	r2, #0
 8007430:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007432:	4b49      	ldr	r3, [pc, #292]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007434:	2200      	movs	r2, #0
 8007436:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007438:	4b47      	ldr	r3, [pc, #284]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 800743a:	2200      	movs	r2, #0
 800743c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800743e:	4b46      	ldr	r3, [pc, #280]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007440:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007444:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007446:	4b44      	ldr	r3, [pc, #272]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800744c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800744e:	4b42      	ldr	r3, [pc, #264]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007450:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007454:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007456:	4b40      	ldr	r3, [pc, #256]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007458:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800745c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800745e:	4b3e      	ldr	r3, [pc, #248]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007460:	2200      	movs	r2, #0
 8007462:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007464:	4b3c      	ldr	r3, [pc, #240]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007466:	2200      	movs	r2, #0
 8007468:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800746a:	483b      	ldr	r0, [pc, #236]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 800746c:	f001 fd02 	bl	8008e74 <HAL_DMA_Init>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007476:	f7fd ff8d 	bl	8005394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a36      	ldr	r2, [pc, #216]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 800747e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007480:	4a35      	ldr	r2, [pc, #212]	@ (8007558 <HAL_ADC_MspInit+0x1a4>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007486:	e05d      	b.n	8007544 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a34      	ldr	r2, [pc, #208]	@ (8007560 <HAL_ADC_MspInit+0x1ac>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d158      	bne.n	8007544 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	4b2e      	ldr	r3, [pc, #184]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	4a2d      	ldr	r2, [pc, #180]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 800749c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80074a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	4b27      	ldr	r3, [pc, #156]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	4a26      	ldr	r2, [pc, #152]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80074b8:	f043 0302 	orr.w	r3, r3, #2
 80074bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80074be:	4b24      	ldr	r3, [pc, #144]	@ (8007550 <HAL_ADC_MspInit+0x19c>)
 80074c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80074ca:	2301      	movs	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074ce:	2303      	movs	r3, #3
 80074d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074d6:	f107 031c 	add.w	r3, r7, #28
 80074da:	4619      	mov	r1, r3
 80074dc:	481d      	ldr	r0, [pc, #116]	@ (8007554 <HAL_ADC_MspInit+0x1a0>)
 80074de:	f002 f8cb 	bl	8009678 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 80074e2:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 80074e4:	4a20      	ldr	r2, [pc, #128]	@ (8007568 <HAL_ADC_MspInit+0x1b4>)
 80074e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80074e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 80074ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80074ee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80074f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80074fc:	4b19      	ldr	r3, [pc, #100]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 80074fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007502:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007504:	4b17      	ldr	r3, [pc, #92]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 8007506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800750a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800750c:	4b15      	ldr	r3, [pc, #84]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 800750e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007512:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007514:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 8007516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800751a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800751c:	4b11      	ldr	r3, [pc, #68]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 800751e:	2200      	movs	r2, #0
 8007520:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007522:	4b10      	ldr	r3, [pc, #64]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 8007524:	2200      	movs	r2, #0
 8007526:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007528:	480e      	ldr	r0, [pc, #56]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 800752a:	f001 fca3 	bl	8008e74 <HAL_DMA_Init>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8007534:	f7fd ff2e 	bl	8005394 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a0a      	ldr	r2, [pc, #40]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 800753c:	639a      	str	r2, [r3, #56]	@ 0x38
 800753e:	4a09      	ldr	r2, [pc, #36]	@ (8007564 <HAL_ADC_MspInit+0x1b0>)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007544:	bf00      	nop
 8007546:	3730      	adds	r7, #48	@ 0x30
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40012000 	.word	0x40012000
 8007550:	40023800 	.word	0x40023800
 8007554:	40020400 	.word	0x40020400
 8007558:	200002fc 	.word	0x200002fc
 800755c:	40026410 	.word	0x40026410
 8007560:	40012100 	.word	0x40012100
 8007564:	2000035c 	.word	0x2000035c
 8007568:	40026458 	.word	0x40026458

0800756c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	@ 0x30
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007574:	f107 031c 	add.w	r3, r7, #28
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	609a      	str	r2, [r3, #8]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a42      	ldr	r2, [pc, #264]	@ (8007694 <HAL_I2C_MspInit+0x128>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d12d      	bne.n	80075ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	4b41      	ldr	r3, [pc, #260]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	4a40      	ldr	r2, [pc, #256]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007598:	f043 0302 	orr.w	r3, r3, #2
 800759c:	6313      	str	r3, [r2, #48]	@ 0x30
 800759e:	4b3e      	ldr	r3, [pc, #248]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80075aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80075ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075b0:	2312      	movs	r3, #18
 80075b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075b8:	2303      	movs	r3, #3
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80075bc:	2304      	movs	r3, #4
 80075be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075c0:	f107 031c 	add.w	r3, r7, #28
 80075c4:	4619      	mov	r1, r3
 80075c6:	4835      	ldr	r0, [pc, #212]	@ (800769c <HAL_I2C_MspInit+0x130>)
 80075c8:	f002 f856 	bl	8009678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	4b31      	ldr	r3, [pc, #196]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	4a30      	ldr	r2, [pc, #192]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 80075d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075da:	6413      	str	r3, [r2, #64]	@ 0x40
 80075dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80075e8:	e050      	b.n	800768c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2c      	ldr	r2, [pc, #176]	@ (80076a0 <HAL_I2C_MspInit+0x134>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d14b      	bne.n	800768c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	4b27      	ldr	r3, [pc, #156]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 80075fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fc:	4a26      	ldr	r2, [pc, #152]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	6313      	str	r3, [r2, #48]	@ 0x30
 8007604:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	4b20      	ldr	r3, [pc, #128]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	4a1f      	ldr	r2, [pc, #124]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007620:	4b1d      	ldr	r3, [pc, #116]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800762c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007632:	2312      	movs	r3, #18
 8007634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007636:	2301      	movs	r3, #1
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800763a:	2303      	movs	r3, #3
 800763c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800763e:	2304      	movs	r3, #4
 8007640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007642:	f107 031c 	add.w	r3, r7, #28
 8007646:	4619      	mov	r1, r3
 8007648:	4816      	ldr	r0, [pc, #88]	@ (80076a4 <HAL_I2C_MspInit+0x138>)
 800764a:	f002 f815 	bl	8009678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800764e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007654:	2312      	movs	r3, #18
 8007656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007658:	2301      	movs	r3, #1
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800765c:	2303      	movs	r3, #3
 800765e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007660:	2304      	movs	r3, #4
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007664:	f107 031c 	add.w	r3, r7, #28
 8007668:	4619      	mov	r1, r3
 800766a:	480f      	ldr	r0, [pc, #60]	@ (80076a8 <HAL_I2C_MspInit+0x13c>)
 800766c:	f002 f804 	bl	8009678 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007670:	2300      	movs	r3, #0
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	4b08      	ldr	r3, [pc, #32]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007678:	4a07      	ldr	r2, [pc, #28]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 800767a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800767e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007680:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <HAL_I2C_MspInit+0x12c>)
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007688:	60bb      	str	r3, [r7, #8]
 800768a:	68bb      	ldr	r3, [r7, #8]
}
 800768c:	bf00      	nop
 800768e:	3730      	adds	r7, #48	@ 0x30
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40005400 	.word	0x40005400
 8007698:	40023800 	.word	0x40023800
 800769c:	40020400 	.word	0x40020400
 80076a0:	40005c00 	.word	0x40005c00
 80076a4:	40020800 	.word	0x40020800
 80076a8:	40020000 	.word	0x40020000

080076ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a15      	ldr	r2, [pc, #84]	@ (8007710 <HAL_I2C_MspDeInit+0x64>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d10f      	bne.n	80076de <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80076be:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <HAL_I2C_MspDeInit+0x68>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	4a14      	ldr	r2, [pc, #80]	@ (8007714 <HAL_I2C_MspDeInit+0x68>)
 80076c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076c8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80076ca:	2180      	movs	r1, #128	@ 0x80
 80076cc:	4812      	ldr	r0, [pc, #72]	@ (8007718 <HAL_I2C_MspDeInit+0x6c>)
 80076ce:	f002 f967 	bl	80099a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80076d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076d6:	4810      	ldr	r0, [pc, #64]	@ (8007718 <HAL_I2C_MspDeInit+0x6c>)
 80076d8:	f002 f962 	bl	80099a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80076dc:	e014      	b.n	8007708 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	@ (800771c <HAL_I2C_MspDeInit+0x70>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10f      	bne.n	8007708 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <HAL_I2C_MspDeInit+0x68>)
 80076ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ec:	4a09      	ldr	r2, [pc, #36]	@ (8007714 <HAL_I2C_MspDeInit+0x68>)
 80076ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80076f2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80076f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076f8:	4809      	ldr	r0, [pc, #36]	@ (8007720 <HAL_I2C_MspDeInit+0x74>)
 80076fa:	f002 f951 	bl	80099a0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80076fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007702:	4808      	ldr	r0, [pc, #32]	@ (8007724 <HAL_I2C_MspDeInit+0x78>)
 8007704:	f002 f94c 	bl	80099a0 <HAL_GPIO_DeInit>
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40005400 	.word	0x40005400
 8007714:	40023800 	.word	0x40023800
 8007718:	40020400 	.word	0x40020400
 800771c:	40005c00 	.word	0x40005c00
 8007720:	40020800 	.word	0x40020800
 8007724:	40020000 	.word	0x40020000

08007728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007738:	d115      	bne.n	8007766 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <HAL_TIM_Base_MspInit+0x48>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	4a0b      	ldr	r2, [pc, #44]	@ (8007770 <HAL_TIM_Base_MspInit+0x48>)
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	6413      	str	r3, [r2, #64]	@ 0x40
 800774a:	4b09      	ldr	r3, [pc, #36]	@ (8007770 <HAL_TIM_Base_MspInit+0x48>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	201c      	movs	r0, #28
 800775c:	f001 fb45 	bl	8008dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007760:	201c      	movs	r0, #28
 8007762:	f001 fb5e 	bl	8008e22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40023800 	.word	0x40023800

08007774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b092      	sub	sp, #72	@ 0x48
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	609a      	str	r2, [r3, #8]
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a90      	ldr	r2, [pc, #576]	@ (80079d4 <HAL_UART_MspInit+0x260>)
 8007792:	4293      	cmp	r3, r2
 8007794:	f040 8094 	bne.w	80078c0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007798:	2300      	movs	r3, #0
 800779a:	633b      	str	r3, [r7, #48]	@ 0x30
 800779c:	4b8e      	ldr	r3, [pc, #568]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a0:	4a8d      	ldr	r2, [pc, #564]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80077a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80077a8:	4b8b      	ldr	r3, [pc, #556]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077b4:	2300      	movs	r3, #0
 80077b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b8:	4b87      	ldr	r3, [pc, #540]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	4a86      	ldr	r2, [pc, #536]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80077be:	f043 0304 	orr.w	r3, r3, #4
 80077c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80077c4:	4b84      	ldr	r3, [pc, #528]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80077d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d6:	2302      	movs	r3, #2
 80077d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077de:	2303      	movs	r3, #3
 80077e0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80077e2:	2308      	movs	r3, #8
 80077e4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80077ea:	4619      	mov	r1, r3
 80077ec:	487b      	ldr	r0, [pc, #492]	@ (80079dc <HAL_UART_MspInit+0x268>)
 80077ee:	f001 ff43 	bl	8009678 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80077f2:	4b7b      	ldr	r3, [pc, #492]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 80077f4:	4a7b      	ldr	r2, [pc, #492]	@ (80079e4 <HAL_UART_MspInit+0x270>)
 80077f6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80077f8:	4b79      	ldr	r3, [pc, #484]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 80077fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80077fe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007800:	4b77      	ldr	r3, [pc, #476]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007806:	4b76      	ldr	r3, [pc, #472]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007808:	2200      	movs	r2, #0
 800780a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800780c:	4b74      	ldr	r3, [pc, #464]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 800780e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007812:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007814:	4b72      	ldr	r3, [pc, #456]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007816:	2200      	movs	r2, #0
 8007818:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800781a:	4b71      	ldr	r3, [pc, #452]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 800781c:	2200      	movs	r2, #0
 800781e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8007820:	4b6f      	ldr	r3, [pc, #444]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007822:	2200      	movs	r2, #0
 8007824:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007826:	4b6e      	ldr	r3, [pc, #440]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007828:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800782c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800782e:	4b6c      	ldr	r3, [pc, #432]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007830:	2200      	movs	r2, #0
 8007832:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8007834:	486a      	ldr	r0, [pc, #424]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007836:	f001 fb1d 	bl	8008e74 <HAL_DMA_Init>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8007840:	f7fd fda8 	bl	8005394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a66      	ldr	r2, [pc, #408]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 8007848:	63da      	str	r2, [r3, #60]	@ 0x3c
 800784a:	4a65      	ldr	r2, [pc, #404]	@ (80079e0 <HAL_UART_MspInit+0x26c>)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007850:	4b65      	ldr	r3, [pc, #404]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007852:	4a66      	ldr	r2, [pc, #408]	@ (80079ec <HAL_UART_MspInit+0x278>)
 8007854:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007856:	4b64      	ldr	r3, [pc, #400]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007858:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800785c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800785e:	4b62      	ldr	r3, [pc, #392]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007860:	2240      	movs	r2, #64	@ 0x40
 8007862:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007864:	4b60      	ldr	r3, [pc, #384]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007866:	2200      	movs	r2, #0
 8007868:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800786a:	4b5f      	ldr	r3, [pc, #380]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 800786c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007870:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007872:	4b5d      	ldr	r3, [pc, #372]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007874:	2200      	movs	r2, #0
 8007876:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007878:	4b5b      	ldr	r3, [pc, #364]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 800787a:	2200      	movs	r2, #0
 800787c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800787e:	4b5a      	ldr	r3, [pc, #360]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007880:	2200      	movs	r2, #0
 8007882:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007884:	4b58      	ldr	r3, [pc, #352]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800788a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800788c:	4b56      	ldr	r3, [pc, #344]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 800788e:	2200      	movs	r2, #0
 8007890:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007892:	4855      	ldr	r0, [pc, #340]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 8007894:	f001 faee 	bl	8008e74 <HAL_DMA_Init>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800789e:	f7fd fd79 	bl	8005394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a50      	ldr	r2, [pc, #320]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 80078a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80078a8:	4a4f      	ldr	r2, [pc, #316]	@ (80079e8 <HAL_UART_MspInit+0x274>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	2034      	movs	r0, #52	@ 0x34
 80078b4:	f001 fa99 	bl	8008dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80078b8:	2034      	movs	r0, #52	@ 0x34
 80078ba:	f001 fab2 	bl	8008e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80078be:	e121      	b.n	8007b04 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a4a      	ldr	r2, [pc, #296]	@ (80079f0 <HAL_UART_MspInit+0x27c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f040 809a 	bne.w	8007a00 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80078cc:	2300      	movs	r3, #0
 80078ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078d0:	4b41      	ldr	r3, [pc, #260]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80078d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d4:	4a40      	ldr	r2, [pc, #256]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80078d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078da:	6413      	str	r3, [r2, #64]	@ 0x40
 80078dc:	4b3e      	ldr	r3, [pc, #248]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078e8:	2300      	movs	r3, #0
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ec:	4b3a      	ldr	r3, [pc, #232]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f0:	4a39      	ldr	r2, [pc, #228]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80078f2:	f043 0304 	orr.w	r3, r3, #4
 80078f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80078f8:	4b37      	ldr	r3, [pc, #220]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 80078fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007904:	2300      	movs	r3, #0
 8007906:	623b      	str	r3, [r7, #32]
 8007908:	4b33      	ldr	r3, [pc, #204]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	4a32      	ldr	r2, [pc, #200]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 800790e:	f043 0308 	orr.w	r3, r3, #8
 8007912:	6313      	str	r3, [r2, #48]	@ 0x30
 8007914:	4b30      	ldr	r3, [pc, #192]	@ (80079d8 <HAL_UART_MspInit+0x264>)
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007926:	2302      	movs	r3, #2
 8007928:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	2300      	movs	r3, #0
 800792c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800792e:	2303      	movs	r3, #3
 8007930:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007932:	2308      	movs	r3, #8
 8007934:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007936:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800793a:	4619      	mov	r1, r3
 800793c:	4827      	ldr	r0, [pc, #156]	@ (80079dc <HAL_UART_MspInit+0x268>)
 800793e:	f001 fe9b 	bl	8009678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007942:	2304      	movs	r3, #4
 8007944:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007946:	2302      	movs	r3, #2
 8007948:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794a:	2300      	movs	r3, #0
 800794c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794e:	2303      	movs	r3, #3
 8007950:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007952:	2308      	movs	r3, #8
 8007954:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007956:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800795a:	4619      	mov	r1, r3
 800795c:	4825      	ldr	r0, [pc, #148]	@ (80079f4 <HAL_UART_MspInit+0x280>)
 800795e:	f001 fe8b 	bl	8009678 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007962:	4b25      	ldr	r3, [pc, #148]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 8007964:	4a25      	ldr	r2, [pc, #148]	@ (80079fc <HAL_UART_MspInit+0x288>)
 8007966:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8007968:	4b23      	ldr	r3, [pc, #140]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 800796a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800796e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007970:	4b21      	ldr	r3, [pc, #132]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007976:	4b20      	ldr	r3, [pc, #128]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 8007978:	2200      	movs	r2, #0
 800797a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800797c:	4b1e      	ldr	r3, [pc, #120]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 800797e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007982:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007984:	4b1c      	ldr	r3, [pc, #112]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 8007986:	2200      	movs	r2, #0
 8007988:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800798a:	4b1b      	ldr	r3, [pc, #108]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 800798c:	2200      	movs	r2, #0
 800798e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8007990:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 8007992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007996:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007998:	4b17      	ldr	r3, [pc, #92]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 800799a:	2200      	movs	r2, #0
 800799c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800799e:	4b16      	ldr	r3, [pc, #88]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80079a4:	4814      	ldr	r0, [pc, #80]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 80079a6:	f001 fa65 	bl	8008e74 <HAL_DMA_Init>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80079b0:	f7fd fcf0 	bl	8005394 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a10      	ldr	r2, [pc, #64]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 80079b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80079ba:	4a0f      	ldr	r2, [pc, #60]	@ (80079f8 <HAL_UART_MspInit+0x284>)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80079c0:	2200      	movs	r2, #0
 80079c2:	2100      	movs	r1, #0
 80079c4:	2035      	movs	r0, #53	@ 0x35
 80079c6:	f001 fa10 	bl	8008dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80079ca:	2035      	movs	r0, #53	@ 0x35
 80079cc:	f001 fa29 	bl	8008e22 <HAL_NVIC_EnableIRQ>
}
 80079d0:	e098      	b.n	8007b04 <HAL_UART_MspInit+0x390>
 80079d2:	bf00      	nop
 80079d4:	40004c00 	.word	0x40004c00
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40020800 	.word	0x40020800
 80079e0:	200005cc 	.word	0x200005cc
 80079e4:	40026040 	.word	0x40026040
 80079e8:	2000062c 	.word	0x2000062c
 80079ec:	40026070 	.word	0x40026070
 80079f0:	40005000 	.word	0x40005000
 80079f4:	40020c00 	.word	0x40020c00
 80079f8:	2000068c 	.word	0x2000068c
 80079fc:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a41      	ldr	r2, [pc, #260]	@ (8007b0c <HAL_UART_MspInit+0x398>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d14b      	bne.n	8007aa2 <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	4b40      	ldr	r3, [pc, #256]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a12:	4a3f      	ldr	r2, [pc, #252]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a14:	f043 0310 	orr.w	r3, r3, #16
 8007a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a26:	2300      	movs	r3, #0
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	4b39      	ldr	r3, [pc, #228]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	4a38      	ldr	r2, [pc, #224]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a30:	f043 0301 	orr.w	r3, r3, #1
 8007a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a36:	4b36      	ldr	r3, [pc, #216]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	4b32      	ldr	r3, [pc, #200]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4a:	4a31      	ldr	r2, [pc, #196]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a52:	4b2f      	ldr	r3, [pc, #188]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a64:	2302      	movs	r3, #2
 8007a66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007a70:	2307      	movs	r3, #7
 8007a72:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4826      	ldr	r0, [pc, #152]	@ (8007b14 <HAL_UART_MspInit+0x3a0>)
 8007a7c:	f001 fdfc 	bl	8009678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007a80:	2340      	movs	r3, #64	@ 0x40
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a84:	2302      	movs	r3, #2
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007a90:	2307      	movs	r3, #7
 8007a92:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007a98:	4619      	mov	r1, r3
 8007a9a:	481f      	ldr	r0, [pc, #124]	@ (8007b18 <HAL_UART_MspInit+0x3a4>)
 8007a9c:	f001 fdec 	bl	8009678 <HAL_GPIO_Init>
}
 8007aa0:	e030      	b.n	8007b04 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b1c <HAL_UART_MspInit+0x3a8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d12b      	bne.n	8007b04 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	4b17      	ldr	r3, [pc, #92]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	4a16      	ldr	r2, [pc, #88]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aba:	6413      	str	r3, [r2, #64]	@ 0x40
 8007abc:	4b14      	ldr	r3, [pc, #80]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac4:	613b      	str	r3, [r7, #16]
 8007ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <HAL_UART_MspInit+0x39c>)
 8007ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af0:	2303      	movs	r3, #3
 8007af2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007af4:	2307      	movs	r3, #7
 8007af6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007af8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007afc:	4619      	mov	r1, r3
 8007afe:	4805      	ldr	r0, [pc, #20]	@ (8007b14 <HAL_UART_MspInit+0x3a0>)
 8007b00:	f001 fdba 	bl	8009678 <HAL_GPIO_Init>
}
 8007b04:	bf00      	nop
 8007b06:	3748      	adds	r7, #72	@ 0x48
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40011000 	.word	0x40011000
 8007b10:	40023800 	.word	0x40023800
 8007b14:	40020000 	.word	0x40020000
 8007b18:	40020400 	.word	0x40020400
 8007b1c:	40004400 	.word	0x40004400

08007b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <NMI_Handler+0x4>

08007b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b2c:	bf00      	nop
 8007b2e:	e7fd      	b.n	8007b2c <HardFault_Handler+0x4>

08007b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <MemManage_Handler+0x4>

08007b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <BusFault_Handler+0x4>

08007b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <UsageFault_Handler+0x4>

08007b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b4c:	bf00      	nop
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b56:	b480      	push	{r7}
 8007b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b5a:	bf00      	nop
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b68:	bf00      	nop
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b76:	f000 fbcf 	bl	8008318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8007b84:	4802      	ldr	r0, [pc, #8]	@ (8007b90 <DMA1_Stream0_IRQHandler+0x10>)
 8007b86:	f001 fb0d 	bl	80091a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000068c 	.word	0x2000068c

08007b94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8007b98:	4802      	ldr	r0, [pc, #8]	@ (8007ba4 <DMA1_Stream2_IRQHandler+0x10>)
 8007b9a:	f001 fb03 	bl	80091a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007b9e:	bf00      	nop
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200005cc 	.word	0x200005cc

08007ba8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8007bac:	4802      	ldr	r0, [pc, #8]	@ (8007bb8 <DMA1_Stream4_IRQHandler+0x10>)
 8007bae:	f001 faf9 	bl	80091a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007bb2:	bf00      	nop
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	2000062c 	.word	0x2000062c

08007bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007bc0:	4802      	ldr	r0, [pc, #8]	@ (8007bcc <TIM2_IRQHandler+0x10>)
 8007bc2:	f003 ff27 	bl	800ba14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007bc6:	bf00      	nop
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000464 	.word	0x20000464

08007bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007bd4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007bd8:	f002 f808 	bl	8009bec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007bdc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007be0:	f002 f804 	bl	8009bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007bec:	4802      	ldr	r0, [pc, #8]	@ (8007bf8 <UART4_IRQHandler+0x10>)
 8007bee:	f004 fc73 	bl	800c4d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	200004ac 	.word	0x200004ac

08007bfc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007c00:	4802      	ldr	r0, [pc, #8]	@ (8007c0c <UART5_IRQHandler+0x10>)
 8007c02:	f004 fc69 	bl	800c4d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8007c06:	bf00      	nop
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200004f4 	.word	0x200004f4

08007c10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007c14:	4802      	ldr	r0, [pc, #8]	@ (8007c20 <DMA2_Stream0_IRQHandler+0x10>)
 8007c16:	f001 fac5 	bl	80091a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007c1a:	bf00      	nop
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200002fc 	.word	0x200002fc

08007c24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007c28:	4802      	ldr	r0, [pc, #8]	@ (8007c34 <DMA2_Stream3_IRQHandler+0x10>)
 8007c2a:	f001 fabb 	bl	80091a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007c2e:	bf00      	nop
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	2000035c 	.word	0x2000035c

08007c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  return 1;
 8007c3c:	2301      	movs	r3, #1
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <_kill>:

int _kill(int pid, int sig)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007c52:	f006 fbab 	bl	800e3ac <__errno>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2216      	movs	r2, #22
 8007c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_exit>:

void _exit (int status)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007c70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ffe7 	bl	8007c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <_exit+0x12>

08007c7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e00a      	b.n	8007ca6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007c90:	f3af 8000 	nop.w
 8007c94:	4601      	mov	r1, r0
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	60ba      	str	r2, [r7, #8]
 8007c9c:	b2ca      	uxtb	r2, r1
 8007c9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	dbf0      	blt.n	8007c90 <_read+0x12>
  }

  return len;
 8007cae:	687b      	ldr	r3, [r7, #4]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e009      	b.n	8007cde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	60ba      	str	r2, [r7, #8]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	dbf1      	blt.n	8007cca <_write+0x12>
  }
  return len;
 8007ce6:	687b      	ldr	r3, [r7, #4]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_close>:

int _close(int file)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007d18:	605a      	str	r2, [r3, #4]
  return 0;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <_isatty>:

int _isatty(int file)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007d30:	2301      	movs	r3, #1
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d60:	4a14      	ldr	r2, [pc, #80]	@ (8007db4 <_sbrk+0x5c>)
 8007d62:	4b15      	ldr	r3, [pc, #84]	@ (8007db8 <_sbrk+0x60>)
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007d6c:	4b13      	ldr	r3, [pc, #76]	@ (8007dbc <_sbrk+0x64>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d74:	4b11      	ldr	r3, [pc, #68]	@ (8007dbc <_sbrk+0x64>)
 8007d76:	4a12      	ldr	r2, [pc, #72]	@ (8007dc0 <_sbrk+0x68>)
 8007d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d7a:	4b10      	ldr	r3, [pc, #64]	@ (8007dbc <_sbrk+0x64>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4413      	add	r3, r2
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d207      	bcs.n	8007d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d88:	f006 fb10 	bl	800e3ac <__errno>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	220c      	movs	r2, #12
 8007d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d96:	e009      	b.n	8007dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d98:	4b08      	ldr	r3, [pc, #32]	@ (8007dbc <_sbrk+0x64>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d9e:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <_sbrk+0x64>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4413      	add	r3, r2
 8007da6:	4a05      	ldr	r2, [pc, #20]	@ (8007dbc <_sbrk+0x64>)
 8007da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007daa:	68fb      	ldr	r3, [r7, #12]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20020000 	.word	0x20020000
 8007db8:	00000400 	.word	0x00000400
 8007dbc:	20000930 	.word	0x20000930
 8007dc0:	20000ab0 	.word	0x20000ab0

08007dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <SystemInit+0x20>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	4a05      	ldr	r2, [pc, #20]	@ (8007de4 <SystemInit+0x20>)
 8007dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fd fb25 	bl	8005444 <addDataPacketSit>
    if (!usart4_tx_busy) {
 8007dfa:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <test_modes_handle_sit+0x2c>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <test_modes_handle_sit+0x24>
        uart4_send_packet_dma((uint8_t*)sit_paket, 36);
 8007e04:	2124      	movs	r1, #36	@ 0x24
 8007e06:	4804      	ldr	r0, [pc, #16]	@ (8007e18 <test_modes_handle_sit+0x30>)
 8007e08:	f7fd fa3e 	bl	8005288 <uart4_send_packet_dma>
    	//HAL_UART_Transmit(&huart4, (uint8_t*)sit_paket, 36, 100);
    }
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000831 	.word	0x20000831
 8007e18:	2000083c 	.word	0x2000083c

08007e1c <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	@ 0x28
 8007e20:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 8007e22:	f000 f989 	bl	8008138 <uart_handler_sut_data_ready>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d013      	beq.n	8007e54 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 8007e2c:	f000 f9b2 	bl	8008194 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 8007e30:	1d3b      	adds	r3, r7, #4
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f98c 	bl	8008150 <uart_handler_get_sut_data>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	4906      	ldr	r1, [pc, #24]	@ (8007e5c <algorithm_update_sut+0x40>)
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 f80c 	bl	8007e60 <test_modes_handle_sut>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 8007e4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f9ac 	bl	80081ac <uart_handler_send_status>
        }
    }
}
 8007e54:	bf00      	nop
 8007e56:	3728      	adds	r7, #40	@ 0x28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200007b0 	.word	0x200007b0

08007e60 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b0b4      	sub	sp, #208	@ 0xd0
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 8007e6a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007e6e:	2244      	movs	r2, #68	@ 0x44
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f006 fa82 	bl	800e37c <memset>
    bmi088_struct_t bmi_sut = {0};
 8007e78:	f107 0308 	add.w	r3, r7, #8
 8007e7c:	2280      	movs	r2, #128	@ 0x80
 8007e7e:	2100      	movs	r1, #0
 8007e80:	4618      	mov	r0, r3
 8007e82:	f006 fa7b 	bl	800e37c <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bme_sut.pressure = sut_data->pressure;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Fill BMI data
    bmi_sut.datas.acc_x = sut_data->acc_x;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	663b      	str	r3, [r7, #96]	@ 0x60
    bmi_sut.datas.acc_y = sut_data->acc_y;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	667b      	str	r3, [r7, #100]	@ 0x64
    bmi_sut.datas.acc_z = sut_data->acc_z;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
    bmi_sut.datas.gyro_x = sut_data->gyro_x;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	623b      	str	r3, [r7, #32]
    bmi_sut.datas.angle_y = sut_data->gyro_y;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    bmi_sut.datas.gyro_z = sut_data->gyro_z;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 8007eba:	f107 0108 	add.w	r1, r7, #8
 8007ebe:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff f98f 	bl	80071e8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 8007eca:	f107 0108 	add.w	r1, r7, #8
 8007ece:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fa ffa7 	bl	8002e28 <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 8007eda:	f7fb f8fb 	bl	80030d4 <flight_algorithm_get_status_bits>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

    return status_bits;
 8007ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	37d0      	adds	r7, #208	@ 0xd0
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 8007ef4:	4b07      	ldr	r3, [pc, #28]	@ (8007f14 <uart_handler_init+0x24>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 8007efa:	4b07      	ldr	r3, [pc, #28]	@ (8007f18 <uart_handler_init+0x28>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007f00:	4b06      	ldr	r3, [pc, #24]	@ (8007f1c <uart_handler_init+0x2c>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 8007f06:	2220      	movs	r2, #32
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4805      	ldr	r0, [pc, #20]	@ (8007f20 <uart_handler_init+0x30>)
 8007f0c:	f006 fa36 	bl	800e37c <memset>
}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000934 	.word	0x20000934
 8007f18:	20000935 	.word	0x20000935
 8007f1c:	20000936 	.word	0x20000936
 8007f20:	20000938 	.word	0x20000938

08007f24 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
    if (usart4_packet_ready) {
 8007f28:	4b14      	ldr	r3, [pc, #80]	@ (8007f7c <uart_handler_process_packets+0x58>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d021      	beq.n	8007f76 <uart_handler_process_packets+0x52>
        usart4_packet_ready = 0; // Clear flag immediately
 8007f32:	4b12      	ldr	r3, [pc, #72]	@ (8007f7c <uart_handler_process_packets+0x58>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart4_rx_buffer[0] == CMD_HEADER && usart4_packet_size == 5) {
 8007f38:	4b11      	ldr	r3, [pc, #68]	@ (8007f80 <uart_handler_process_packets+0x5c>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2baa      	cmp	r3, #170	@ 0xaa
 8007f3e:	d10b      	bne.n	8007f58 <uart_handler_process_packets+0x34>
 8007f40:	4b10      	ldr	r3, [pc, #64]	@ (8007f84 <uart_handler_process_packets+0x60>)
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d106      	bne.n	8007f58 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 8007f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f88 <uart_handler_process_packets+0x64>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart4_rx_buffer);
 8007f50:	480b      	ldr	r0, [pc, #44]	@ (8007f80 <uart_handler_process_packets+0x5c>)
 8007f52:	f000 f81d 	bl	8007f90 <process_command_packet>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart4_rx_buffer);
        }
    }
}
 8007f56:	e00e      	b.n	8007f76 <uart_handler_process_packets+0x52>
        else if (usart4_rx_buffer[0] == PACKET_HEADER && usart4_packet_size == 36) {
 8007f58:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <uart_handler_process_packets+0x5c>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2bab      	cmp	r3, #171	@ 0xab
 8007f5e:	d10a      	bne.n	8007f76 <uart_handler_process_packets+0x52>
 8007f60:	4b08      	ldr	r3, [pc, #32]	@ (8007f84 <uart_handler_process_packets+0x60>)
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b24      	cmp	r3, #36	@ 0x24
 8007f68:	d105      	bne.n	8007f76 <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 8007f6a:	4b08      	ldr	r3, [pc, #32]	@ (8007f8c <uart_handler_process_packets+0x68>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart4_rx_buffer);
 8007f70:	4803      	ldr	r0, [pc, #12]	@ (8007f80 <uart_handler_process_packets+0x5c>)
 8007f72:	f000 f843 	bl	8007ffc <process_sut_packet>
}
 8007f76:	bf00      	nop
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	2000082c 	.word	0x2000082c
 8007f80:	200007e0 	.word	0x200007e0
 8007f84:	2000082e 	.word	0x2000082e
 8007f88:	20000935 	.word	0x20000935
 8007f8c:	20000936 	.word	0x20000936

08007f90 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2baa      	cmp	r3, #170	@ 0xaa
 8007f9e:	d124      	bne.n	8007fea <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	78db      	ldrb	r3, [r3, #3]
 8007faa:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b0d      	cmp	r3, #13
 8007fb6:	d118      	bne.n	8007fea <process_command_packet+0x5a>
 8007fb8:	7b7b      	ldrb	r3, [r7, #13]
 8007fba:	2b0a      	cmp	r3, #10
 8007fbc:	d115      	bne.n	8007fea <process_command_packet+0x5a>
            switch (command) {
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b24      	cmp	r3, #36	@ 0x24
 8007fc2:	d00e      	beq.n	8007fe2 <process_command_packet+0x52>
 8007fc4:	2b24      	cmp	r3, #36	@ 0x24
 8007fc6:	dc10      	bgt.n	8007fea <process_command_packet+0x5a>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d002      	beq.n	8007fd2 <process_command_packet+0x42>
 8007fcc:	2b22      	cmp	r3, #34	@ 0x22
 8007fce:	d004      	beq.n	8007fda <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 8007fd0:	e00b      	b.n	8007fea <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 8007fd2:	4b09      	ldr	r3, [pc, #36]	@ (8007ff8 <process_command_packet+0x68>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
                    break;
 8007fd8:	e007      	b.n	8007fea <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 8007fda:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <process_command_packet+0x68>)
 8007fdc:	2202      	movs	r2, #2
 8007fde:	701a      	strb	r2, [r3, #0]
                    break;
 8007fe0:	e003      	b.n	8007fea <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 8007fe2:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <process_command_packet+0x68>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
                    break;
 8007fe8:	bf00      	nop
}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000934 	.word	0x20000934

08007ffc <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2bab      	cmp	r3, #171	@ 0xab
 800800a:	d172      	bne.n	80080f2 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3322      	adds	r3, #34	@ 0x22
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b0d      	cmp	r3, #13
 8008014:	d16f      	bne.n	80080f6 <process_sut_packet+0xfa>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3323      	adds	r3, #35	@ 0x23
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b0a      	cmp	r3, #10
 800801e:	d16a      	bne.n	80080f6 <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8008024:	2300      	movs	r3, #0
 8008026:	60bb      	str	r3, [r7, #8]
 8008028:	e009      	b.n	800803e <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	4413      	add	r3, r2
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	4413      	add	r3, r2
 8008036:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3301      	adds	r3, #1
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b20      	cmp	r3, #32
 8008042:	ddf2      	ble.n	800802a <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3321      	adds	r3, #33	@ 0x21
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	7bfa      	ldrb	r2, [r7, #15]
 800804c:	429a      	cmp	r2, r3
 800804e:	d154      	bne.n	80080fa <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3301      	adds	r3, #1
 8008054:	4618      	mov	r0, r3
 8008056:	f7fd fb1b 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 800805a:	eef0 7a40 	vmov.f32	s15, s0
 800805e:	4b29      	ldr	r3, [pc, #164]	@ (8008104 <process_sut_packet+0x108>)
 8008060:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3305      	adds	r3, #5
 8008068:	4618      	mov	r0, r3
 800806a:	f7fd fb11 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 800806e:	eef0 7a40 	vmov.f32	s15, s0
 8008072:	4b24      	ldr	r3, [pc, #144]	@ (8008104 <process_sut_packet+0x108>)
 8008074:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3309      	adds	r3, #9
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd fb07 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 8008082:	eef0 7a40 	vmov.f32	s15, s0
 8008086:	4b1f      	ldr	r3, [pc, #124]	@ (8008104 <process_sut_packet+0x108>)
 8008088:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	330d      	adds	r3, #13
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd fafd 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 8008096:	eef0 7a40 	vmov.f32	s15, s0
 800809a:	4b1a      	ldr	r3, [pc, #104]	@ (8008104 <process_sut_packet+0x108>)
 800809c:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3311      	adds	r3, #17
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd faf3 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 80080aa:	eef0 7a40 	vmov.f32	s15, s0
 80080ae:	4b15      	ldr	r3, [pc, #84]	@ (8008104 <process_sut_packet+0x108>)
 80080b0:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3315      	adds	r3, #21
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fd fae9 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 80080be:	eef0 7a40 	vmov.f32	s15, s0
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <process_sut_packet+0x108>)
 80080c4:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3319      	adds	r3, #25
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fd fadf 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 80080d2:	eef0 7a40 	vmov.f32	s15, s0
 80080d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <process_sut_packet+0x108>)
 80080d8:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	331d      	adds	r3, #29
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd fad5 	bl	8005690 <uint8_arrayi_float32_ye_donustur>
 80080e6:	eef0 7a40 	vmov.f32	s15, s0
 80080ea:	4b06      	ldr	r3, [pc, #24]	@ (8008104 <process_sut_packet+0x108>)
 80080ec:	edc3 7a07 	vstr	s15, [r3, #28]
 80080f0:	e004      	b.n	80080fc <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 80080fa:	bf00      	nop
}
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000938 	.word	0x20000938

08008108 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
    return current_mode;
 800810c:	4b03      	ldr	r3, [pc, #12]	@ (800811c <uart_handler_get_mode+0x14>)
 800810e:	781b      	ldrb	r3, [r3, #0]
}
 8008110:	4618      	mov	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000934 	.word	0x20000934

08008120 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8008124:	4b03      	ldr	r3, [pc, #12]	@ (8008134 <uart_handler_command_ready+0x14>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b2db      	uxtb	r3, r3
}
 800812a:	4618      	mov	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20000935 	.word	0x20000935

08008138 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 800813c:	4b03      	ldr	r3, [pc, #12]	@ (800814c <uart_handler_sut_data_ready+0x14>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b2db      	uxtb	r3, r3
}
 8008142:	4618      	mov	r0, r3
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20000936 	.word	0x20000936

08008150 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <uart_handler_get_sut_data+0x12>
 800815e:	2300      	movs	r3, #0
 8008160:	e005      	b.n	800816e <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 8008162:	2220      	movs	r2, #32
 8008164:	4904      	ldr	r1, [pc, #16]	@ (8008178 <uart_handler_get_sut_data+0x28>)
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f006 f952 	bl	800e410 <memcpy>
    return 1;
 800816c:	2301      	movs	r3, #1
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000938 	.word	0x20000938

0800817c <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8008180:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <uart_handler_clear_command_flag+0x14>)
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
}
 8008186:	bf00      	nop
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	20000935 	.word	0x20000935

08008194 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 8008198:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <uart_handler_clear_sut_flag+0x14>)
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
}
 800819e:	bf00      	nop
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	20000936 	.word	0x20000936

080081ac <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	80fb      	strh	r3, [r7, #6]
    if (!usart4_tx_busy) {
 80081b6:	4b18      	ldr	r3, [pc, #96]	@ (8008218 <uart_handler_send_status+0x6c>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d127      	bne.n	8008210 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = 0xAA;
 80081c0:	4b16      	ldr	r3, [pc, #88]	@ (800821c <uart_handler_send_status+0x70>)
 80081c2:	22aa      	movs	r2, #170	@ 0xaa
 80081c4:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	4b14      	ldr	r3, [pc, #80]	@ (800821c <uart_handler_send_status+0x70>)
 80081cc:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	4b11      	ldr	r3, [pc, #68]	@ (800821c <uart_handler_send_status+0x70>)
 80081d8:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 80081da:	4b10      	ldr	r3, [pc, #64]	@ (800821c <uart_handler_send_status+0x70>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	4b0e      	ldr	r3, [pc, #56]	@ (800821c <uart_handler_send_status+0x70>)
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	4413      	add	r3, r2
 80081e6:	4a0d      	ldr	r2, [pc, #52]	@ (800821c <uart_handler_send_status+0x70>)
 80081e8:	7892      	ldrb	r2, [r2, #2]
 80081ea:	4413      	add	r3, r2
 80081ec:	425a      	negs	r2, r3
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	bf58      	it	pl
 80081f4:	4253      	negpl	r3, r2
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	4b08      	ldr	r3, [pc, #32]	@ (800821c <uart_handler_send_status+0x70>)
 80081fa:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = 0x0D;
 80081fc:	4b07      	ldr	r3, [pc, #28]	@ (800821c <uart_handler_send_status+0x70>)
 80081fe:	220d      	movs	r2, #13
 8008200:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = 0x0A;
 8008202:	4b06      	ldr	r3, [pc, #24]	@ (800821c <uart_handler_send_status+0x70>)
 8008204:	220a      	movs	r2, #10
 8008206:	715a      	strb	r2, [r3, #5]

        uart4_send_packet_dma(status_packet_dma, 6);
 8008208:	2106      	movs	r1, #6
 800820a:	4804      	ldr	r0, [pc, #16]	@ (800821c <uart_handler_send_status+0x70>)
 800820c:	f7fd f83c 	bl	8005288 <uart4_send_packet_dma>
    }
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000831 	.word	0x20000831
 800821c:	20000958 	.word	0x20000958

08008220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008258 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008224:	f7ff fdce 	bl	8007dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008228:	480c      	ldr	r0, [pc, #48]	@ (800825c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800822a:	490d      	ldr	r1, [pc, #52]	@ (8008260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800822c:	4a0d      	ldr	r2, [pc, #52]	@ (8008264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800822e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008230:	e002      	b.n	8008238 <LoopCopyDataInit>

08008232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008236:	3304      	adds	r3, #4

08008238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800823a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800823c:	d3f9      	bcc.n	8008232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800823e:	4a0a      	ldr	r2, [pc, #40]	@ (8008268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008240:	4c0a      	ldr	r4, [pc, #40]	@ (800826c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008244:	e001      	b.n	800824a <LoopFillZerobss>

08008246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008248:	3204      	adds	r2, #4

0800824a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800824a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800824c:	d3fb      	bcc.n	8008246 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800824e:	f006 f8b3 	bl	800e3b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008252:	f7fc fafb 	bl	800484c <main>
  bx  lr    
 8008256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800825c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008260:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8008264:	08012e38 	.word	0x08012e38
  ldr r2, =_sbss
 8008268:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800826c:	20000ab0 	.word	0x20000ab0

08008270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008270:	e7fe      	b.n	8008270 <ADC_IRQHandler>
	...

08008274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008278:	4b0e      	ldr	r3, [pc, #56]	@ (80082b4 <HAL_Init+0x40>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a0d      	ldr	r2, [pc, #52]	@ (80082b4 <HAL_Init+0x40>)
 800827e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008284:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <HAL_Init+0x40>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a0a      	ldr	r2, [pc, #40]	@ (80082b4 <HAL_Init+0x40>)
 800828a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800828e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008290:	4b08      	ldr	r3, [pc, #32]	@ (80082b4 <HAL_Init+0x40>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a07      	ldr	r2, [pc, #28]	@ (80082b4 <HAL_Init+0x40>)
 8008296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800829a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800829c:	2003      	movs	r0, #3
 800829e:	f000 fd99 	bl	8008dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082a2:	200f      	movs	r0, #15
 80082a4:	f000 f808 	bl	80082b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082a8:	f7ff f85c 	bl	8007364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	40023c00 	.word	0x40023c00

080082b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082c0:	4b12      	ldr	r3, [pc, #72]	@ (800830c <HAL_InitTick+0x54>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	4b12      	ldr	r3, [pc, #72]	@ (8008310 <HAL_InitTick+0x58>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80082ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80082d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fdbf 	bl	8008e5a <HAL_SYSTICK_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e00e      	b.n	8008304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b0f      	cmp	r3, #15
 80082ea:	d80a      	bhi.n	8008302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082ec:	2200      	movs	r2, #0
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082f4:	f000 fd79 	bl	8008dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082f8:	4a06      	ldr	r2, [pc, #24]	@ (8008314 <HAL_InitTick+0x5c>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000040 	.word	0x20000040
 8008310:	20000048 	.word	0x20000048
 8008314:	20000044 	.word	0x20000044

08008318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800831c:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <HAL_IncTick+0x20>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	4b06      	ldr	r3, [pc, #24]	@ (800833c <HAL_IncTick+0x24>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4413      	add	r3, r2
 8008328:	4a04      	ldr	r2, [pc, #16]	@ (800833c <HAL_IncTick+0x24>)
 800832a:	6013      	str	r3, [r2, #0]
}
 800832c:	bf00      	nop
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20000048 	.word	0x20000048
 800833c:	20000960 	.word	0x20000960

08008340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  return uwTick;
 8008344:	4b03      	ldr	r3, [pc, #12]	@ (8008354 <HAL_GetTick+0x14>)
 8008346:	681b      	ldr	r3, [r3, #0]
}
 8008348:	4618      	mov	r0, r3
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000960 	.word	0x20000960

08008358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008360:	f7ff ffee 	bl	8008340 <HAL_GetTick>
 8008364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008370:	d005      	beq.n	800837e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008372:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <HAL_Delay+0x44>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800837e:	bf00      	nop
 8008380:	f7ff ffde 	bl	8008340 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	429a      	cmp	r2, r3
 800838e:	d8f7      	bhi.n	8008380 <HAL_Delay+0x28>
  {
  }
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000048 	.word	0x20000048

080083a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e033      	b.n	800841e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d109      	bne.n	80083d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fe fff8 	bl	80073b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d118      	bne.n	8008410 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80083e6:	f023 0302 	bic.w	r3, r3, #2
 80083ea:	f043 0202 	orr.w	r2, r3, #2
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa7c 	bl	80088f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	f043 0201 	orr.w	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	641a      	str	r2, [r3, #64]	@ 0x40
 800840e:	e001      	b.n	8008414 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_ADC_Start_DMA+0x22>
 8008446:	2302      	movs	r3, #2
 8008448:	e0eb      	b.n	8008622 <HAL_ADC_Start_DMA+0x1fa>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b01      	cmp	r3, #1
 800845e:	d018      	beq.n	8008492 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008470:	4b6e      	ldr	r3, [pc, #440]	@ (800862c <HAL_ADC_Start_DMA+0x204>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a6e      	ldr	r2, [pc, #440]	@ (8008630 <HAL_ADC_Start_DMA+0x208>)
 8008476:	fba2 2303 	umull	r2, r3, r2, r3
 800847a:	0c9a      	lsrs	r2, r3, #18
 800847c:	4613      	mov	r3, r2
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	4413      	add	r3, r2
 8008482:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8008484:	e002      	b.n	800848c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	3b01      	subs	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f9      	bne.n	8008486 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a0:	d107      	bne.n	80084b2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084b0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b01      	cmp	r3, #1
 80084be:	f040 80a3 	bne.w	8008608 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80084ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008500:	d106      	bne.n	8008510 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008506:	f023 0206 	bic.w	r2, r3, #6
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	645a      	str	r2, [r3, #68]	@ 0x44
 800850e:	e002      	b.n	8008516 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800851e:	4b45      	ldr	r3, [pc, #276]	@ (8008634 <HAL_ADC_Start_DMA+0x20c>)
 8008520:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	4a44      	ldr	r2, [pc, #272]	@ (8008638 <HAL_ADC_Start_DMA+0x210>)
 8008528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852e:	4a43      	ldr	r2, [pc, #268]	@ (800863c <HAL_ADC_Start_DMA+0x214>)
 8008530:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008536:	4a42      	ldr	r2, [pc, #264]	@ (8008640 <HAL_ADC_Start_DMA+0x218>)
 8008538:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008542:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8008552:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008562:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	334c      	adds	r3, #76	@ 0x4c
 800856e:	4619      	mov	r1, r3
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f000 fd2c 	bl	8008fd0 <HAL_DMA_Start_IT>
 8008578:	4603      	mov	r3, r0
 800857a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	2b00      	cmp	r3, #0
 8008586:	d12a      	bne.n	80085de <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2d      	ldr	r2, [pc, #180]	@ (8008644 <HAL_ADC_Start_DMA+0x21c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d015      	beq.n	80085be <HAL_ADC_Start_DMA+0x196>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2c      	ldr	r2, [pc, #176]	@ (8008648 <HAL_ADC_Start_DMA+0x220>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d105      	bne.n	80085a8 <HAL_ADC_Start_DMA+0x180>
 800859c:	4b25      	ldr	r3, [pc, #148]	@ (8008634 <HAL_ADC_Start_DMA+0x20c>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a27      	ldr	r2, [pc, #156]	@ (800864c <HAL_ADC_Start_DMA+0x224>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d136      	bne.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
 80085b2:	4b20      	ldr	r3, [pc, #128]	@ (8008634 <HAL_ADC_Start_DMA+0x20c>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f003 0310 	and.w	r3, r3, #16
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d130      	bne.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d129      	bne.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80085da:	609a      	str	r2, [r3, #8]
 80085dc:	e020      	b.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a18      	ldr	r2, [pc, #96]	@ (8008644 <HAL_ADC_Start_DMA+0x21c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d11b      	bne.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d114      	bne.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008604:	609a      	str	r2, [r3, #8]
 8008606:	e00b      	b.n	8008620 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860c:	f043 0210 	orr.w	r2, r3, #16
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008618:	f043 0201 	orr.w	r2, r3, #1
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8008620:	7ffb      	ldrb	r3, [r7, #31]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3720      	adds	r7, #32
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000040 	.word	0x20000040
 8008630:	431bde83 	.word	0x431bde83
 8008634:	40012300 	.word	0x40012300
 8008638:	08008ae9 	.word	0x08008ae9
 800863c:	08008ba3 	.word	0x08008ba3
 8008640:	08008bbf 	.word	0x08008bbf
 8008644:	40012000 	.word	0x40012000
 8008648:	40012100 	.word	0x40012100
 800864c:	40012200 	.word	0x40012200

08008650 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <HAL_ADC_ConfigChannel+0x1c>
 80086a4:	2302      	movs	r3, #2
 80086a6:	e113      	b.n	80088d0 <HAL_ADC_ConfigChannel+0x244>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d925      	bls.n	8008704 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68d9      	ldr	r1, [r3, #12]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	461a      	mov	r2, r3
 80086c6:	4613      	mov	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4413      	add	r3, r2
 80086cc:	3b1e      	subs	r3, #30
 80086ce:	2207      	movs	r2, #7
 80086d0:	fa02 f303 	lsl.w	r3, r2, r3
 80086d4:	43da      	mvns	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	400a      	ands	r2, r1
 80086dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68d9      	ldr	r1, [r3, #12]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	4618      	mov	r0, r3
 80086f0:	4603      	mov	r3, r0
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	4403      	add	r3, r0
 80086f6:	3b1e      	subs	r3, #30
 80086f8:	409a      	lsls	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	60da      	str	r2, [r3, #12]
 8008702:	e022      	b.n	800874a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6919      	ldr	r1, [r3, #16]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	2207      	movs	r2, #7
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	43da      	mvns	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	400a      	ands	r2, r1
 8008726:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6919      	ldr	r1, [r3, #16]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	b29b      	uxth	r3, r3
 8008738:	4618      	mov	r0, r3
 800873a:	4603      	mov	r3, r0
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4403      	add	r3, r0
 8008740:	409a      	lsls	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2b06      	cmp	r3, #6
 8008750:	d824      	bhi.n	800879c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	3b05      	subs	r3, #5
 8008764:	221f      	movs	r2, #31
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	43da      	mvns	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	400a      	ands	r2, r1
 8008772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	b29b      	uxth	r3, r3
 8008780:	4618      	mov	r0, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	3b05      	subs	r3, #5
 800878e:	fa00 f203 	lsl.w	r2, r0, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	635a      	str	r2, [r3, #52]	@ 0x34
 800879a:	e04c      	b.n	8008836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	d824      	bhi.n	80087ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	3b23      	subs	r3, #35	@ 0x23
 80087b6:	221f      	movs	r2, #31
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	43da      	mvns	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	400a      	ands	r2, r1
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	4618      	mov	r0, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	3b23      	subs	r3, #35	@ 0x23
 80087e0:	fa00 f203 	lsl.w	r2, r0, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80087ec:	e023      	b.n	8008836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	3b41      	subs	r3, #65	@ 0x41
 8008800:	221f      	movs	r2, #31
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	43da      	mvns	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	400a      	ands	r2, r1
 800880e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	4618      	mov	r0, r3
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	3b41      	subs	r3, #65	@ 0x41
 800882a:	fa00 f203 	lsl.w	r2, r0, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008836:	4b29      	ldr	r3, [pc, #164]	@ (80088dc <HAL_ADC_ConfigChannel+0x250>)
 8008838:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a28      	ldr	r2, [pc, #160]	@ (80088e0 <HAL_ADC_ConfigChannel+0x254>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10f      	bne.n	8008864 <HAL_ADC_ConfigChannel+0x1d8>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b12      	cmp	r3, #18
 800884a:	d10b      	bne.n	8008864 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1d      	ldr	r2, [pc, #116]	@ (80088e0 <HAL_ADC_ConfigChannel+0x254>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d12b      	bne.n	80088c6 <HAL_ADC_ConfigChannel+0x23a>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1c      	ldr	r2, [pc, #112]	@ (80088e4 <HAL_ADC_ConfigChannel+0x258>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <HAL_ADC_ConfigChannel+0x1f4>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b11      	cmp	r3, #17
 800887e:	d122      	bne.n	80088c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a11      	ldr	r2, [pc, #68]	@ (80088e4 <HAL_ADC_ConfigChannel+0x258>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d111      	bne.n	80088c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80088a2:	4b11      	ldr	r3, [pc, #68]	@ (80088e8 <HAL_ADC_ConfigChannel+0x25c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a11      	ldr	r2, [pc, #68]	@ (80088ec <HAL_ADC_ConfigChannel+0x260>)
 80088a8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ac:	0c9a      	lsrs	r2, r3, #18
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80088b8:	e002      	b.n	80088c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	3b01      	subs	r3, #1
 80088be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1f9      	bne.n	80088ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	40012300 	.word	0x40012300
 80088e0:	40012000 	.word	0x40012000
 80088e4:	10000012 	.word	0x10000012
 80088e8:	20000040 	.word	0x20000040
 80088ec:	431bde83 	.word	0x431bde83

080088f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80088f8:	4b79      	ldr	r3, [pc, #484]	@ (8008ae0 <ADC_Init+0x1f0>)
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	431a      	orrs	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6859      	ldr	r1, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	021a      	lsls	r2, r3, #8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6859      	ldr	r1, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800896a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6899      	ldr	r1, [r3, #8]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008982:	4a58      	ldr	r2, [pc, #352]	@ (8008ae4 <ADC_Init+0x1f4>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d022      	beq.n	80089ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6899      	ldr	r1, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80089b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6899      	ldr	r1, [r3, #8]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	609a      	str	r2, [r3, #8]
 80089cc:	e00f      	b.n	80089ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80089dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80089ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0202 	bic.w	r2, r2, #2
 80089fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6899      	ldr	r1, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7e1b      	ldrb	r3, [r3, #24]
 8008a08:	005a      	lsls	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6859      	ldr	r1, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a46:	3b01      	subs	r3, #1
 8008a48:	035a      	lsls	r2, r3, #13
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	e007      	b.n	8008a64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	051a      	lsls	r2, r3, #20
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6899      	ldr	r1, [r3, #8]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008aa6:	025a      	lsls	r2, r3, #9
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6899      	ldr	r1, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	029a      	lsls	r2, r3, #10
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	609a      	str	r2, [r3, #8]
}
 8008ad4:	bf00      	nop
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40012300 	.word	0x40012300
 8008ae4:	0f000001 	.word	0x0f000001

08008ae8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d13c      	bne.n	8008b7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d12b      	bne.n	8008b74 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d127      	bne.n	8008b74 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d006      	beq.n	8008b40 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d119      	bne.n	8008b74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0220 	bic.w	r2, r2, #32
 8008b4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d105      	bne.n	8008b74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6c:	f043 0201 	orr.w	r2, r3, #1
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fd6b 	bl	8008650 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008b7a:	e00e      	b.n	8008b9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b80:	f003 0310 	and.w	r3, r3, #16
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff fd75 	bl	8008678 <HAL_ADC_ErrorCallback>
}
 8008b8e:	e004      	b.n	8008b9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff fd57 	bl	8008664 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2240      	movs	r2, #64	@ 0x40
 8008bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd6:	f043 0204 	orr.w	r2, r3, #4
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff fd4a 	bl	8008678 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <__NVIC_SetPriorityGrouping+0x44>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008c08:	4013      	ands	r3, r2
 8008c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c1e:	4a04      	ldr	r2, [pc, #16]	@ (8008c30 <__NVIC_SetPriorityGrouping+0x44>)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	60d3      	str	r3, [r2, #12]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c38:	4b04      	ldr	r3, [pc, #16]	@ (8008c4c <__NVIC_GetPriorityGrouping+0x18>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	f003 0307 	and.w	r3, r3, #7
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	e000ed00 	.word	0xe000ed00

08008c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	db0b      	blt.n	8008c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	f003 021f 	and.w	r2, r3, #31
 8008c68:	4907      	ldr	r1, [pc, #28]	@ (8008c88 <__NVIC_EnableIRQ+0x38>)
 8008c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	2001      	movs	r0, #1
 8008c72:	fa00 f202 	lsl.w	r2, r0, r2
 8008c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	e000e100 	.word	0xe000e100

08008c8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	db12      	blt.n	8008cc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	f003 021f 	and.w	r2, r3, #31
 8008ca4:	490a      	ldr	r1, [pc, #40]	@ (8008cd0 <__NVIC_DisableIRQ+0x44>)
 8008ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008caa:	095b      	lsrs	r3, r3, #5
 8008cac:	2001      	movs	r0, #1
 8008cae:	fa00 f202 	lsl.w	r2, r0, r2
 8008cb2:	3320      	adds	r3, #32
 8008cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cb8:	f3bf 8f4f 	dsb	sy
}
 8008cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cbe:	f3bf 8f6f 	isb	sy
}
 8008cc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	e000e100 	.word	0xe000e100

08008cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	db0a      	blt.n	8008cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	490c      	ldr	r1, [pc, #48]	@ (8008d20 <__NVIC_SetPriority+0x4c>)
 8008cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf2:	0112      	lsls	r2, r2, #4
 8008cf4:	b2d2      	uxtb	r2, r2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008cfc:	e00a      	b.n	8008d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	4908      	ldr	r1, [pc, #32]	@ (8008d24 <__NVIC_SetPriority+0x50>)
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	3b04      	subs	r3, #4
 8008d0c:	0112      	lsls	r2, r2, #4
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	440b      	add	r3, r1
 8008d12:	761a      	strb	r2, [r3, #24]
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	e000e100 	.word	0xe000e100
 8008d24:	e000ed00 	.word	0xe000ed00

08008d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b089      	sub	sp, #36	@ 0x24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f1c3 0307 	rsb	r3, r3, #7
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	bf28      	it	cs
 8008d46:	2304      	movcs	r3, #4
 8008d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	2b06      	cmp	r3, #6
 8008d50:	d902      	bls.n	8008d58 <NVIC_EncodePriority+0x30>
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	3b03      	subs	r3, #3
 8008d56:	e000      	b.n	8008d5a <NVIC_EncodePriority+0x32>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	43da      	mvns	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7a:	43d9      	mvns	r1, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d80:	4313      	orrs	r3, r2
         );
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3724      	adds	r7, #36	@ 0x24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
	...

08008d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008da0:	d301      	bcc.n	8008da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008da2:	2301      	movs	r3, #1
 8008da4:	e00f      	b.n	8008dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008da6:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd0 <SysTick_Config+0x40>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dae:	210f      	movs	r1, #15
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db4:	f7ff ff8e 	bl	8008cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008db8:	4b05      	ldr	r3, [pc, #20]	@ (8008dd0 <SysTick_Config+0x40>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008dbe:	4b04      	ldr	r3, [pc, #16]	@ (8008dd0 <SysTick_Config+0x40>)
 8008dc0:	2207      	movs	r2, #7
 8008dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	e000e010 	.word	0xe000e010

08008dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ff05 	bl	8008bec <__NVIC_SetPriorityGrouping>
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	4603      	mov	r3, r0
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008dfc:	f7ff ff1a 	bl	8008c34 <__NVIC_GetPriorityGrouping>
 8008e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	f7ff ff8e 	bl	8008d28 <NVIC_EncodePriority>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff ff5d 	bl	8008cd4 <__NVIC_SetPriority>
}
 8008e1a:	bf00      	nop
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	4603      	mov	r3, r0
 8008e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff ff0d 	bl	8008c50 <__NVIC_EnableIRQ>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	4603      	mov	r3, r0
 8008e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff ff1d 	bl	8008c8c <__NVIC_DisableIRQ>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff ff94 	bl	8008d90 <SysTick_Config>
 8008e68:	4603      	mov	r3, r0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008e80:	f7ff fa5e 	bl	8008340 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e099      	b.n	8008fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 0201 	bic.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008eb0:	e00f      	b.n	8008ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008eb2:	f7ff fa45 	bl	8008340 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b05      	cmp	r3, #5
 8008ebe:	d908      	bls.n	8008ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e078      	b.n	8008fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e8      	bne.n	8008eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	4b38      	ldr	r3, [pc, #224]	@ (8008fcc <HAL_DMA_Init+0x158>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d107      	bne.n	8008f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f34:	4313      	orrs	r3, r2
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f023 0307 	bic.w	r3, r3, #7
 8008f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d117      	bne.n	8008f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fb01 	bl	8009580 <DMA_CheckFifoParam>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2240      	movs	r2, #64	@ 0x40
 8008f88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008f92:	2301      	movs	r3, #1
 8008f94:	e016      	b.n	8008fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fab8 	bl	8009514 <DMA_CalcBaseAndBitshift>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fac:	223f      	movs	r2, #63	@ 0x3f
 8008fae:	409a      	lsls	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	f010803f 	.word	0xf010803f

08008fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <HAL_DMA_Start_IT+0x26>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e040      	b.n	8009078 <HAL_DMA_Start_IT+0xa8>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b01      	cmp	r3, #1
 8009008:	d12f      	bne.n	800906a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2202      	movs	r2, #2
 800900e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fa4a 	bl	80094b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009028:	223f      	movs	r2, #63	@ 0x3f
 800902a:	409a      	lsls	r2, r3
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0216 	orr.w	r2, r2, #22
 800903e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0208 	orr.w	r2, r2, #8
 8009056:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e005      	b.n	8009076 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009072:	2302      	movs	r3, #2
 8009074:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800908c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800908e:	f7ff f957 	bl	8008340 <HAL_GetTick>
 8009092:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d008      	beq.n	80090b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2280      	movs	r2, #128	@ 0x80
 80090a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e052      	b.n	8009158 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0216 	bic.w	r2, r2, #22
 80090c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695a      	ldr	r2, [r3, #20]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <HAL_DMA_Abort+0x62>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0208 	bic.w	r2, r2, #8
 80090f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009102:	e013      	b.n	800912c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009104:	f7ff f91c 	bl	8008340 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b05      	cmp	r3, #5
 8009110:	d90c      	bls.n	800912c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2203      	movs	r2, #3
 800911c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e015      	b.n	8009158 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e4      	bne.n	8009104 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800913e:	223f      	movs	r2, #63	@ 0x3f
 8009140:	409a      	lsls	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d004      	beq.n	800917e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2280      	movs	r2, #128	@ 0x80
 8009178:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e00c      	b.n	8009198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2205      	movs	r2, #5
 8009182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0201 	bic.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80091b0:	4b8e      	ldr	r3, [pc, #568]	@ (80093ec <HAL_DMA_IRQHandler+0x248>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a8e      	ldr	r2, [pc, #568]	@ (80093f0 <HAL_DMA_IRQHandler+0x24c>)
 80091b6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ba:	0a9b      	lsrs	r3, r3, #10
 80091bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ce:	2208      	movs	r2, #8
 80091d0:	409a      	lsls	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4013      	ands	r3, r2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01a      	beq.n	8009210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d013      	beq.n	8009210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0204 	bic.w	r2, r2, #4
 80091f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091fc:	2208      	movs	r2, #8
 80091fe:	409a      	lsls	r2, r3
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009208:	f043 0201 	orr.w	r2, r3, #1
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009214:	2201      	movs	r2, #1
 8009216:	409a      	lsls	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d012      	beq.n	8009246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009232:	2201      	movs	r2, #1
 8009234:	409a      	lsls	r2, r3
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800923e:	f043 0202 	orr.w	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924a:	2204      	movs	r2, #4
 800924c:	409a      	lsls	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4013      	ands	r3, r2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d012      	beq.n	800927c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00b      	beq.n	800927c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009268:	2204      	movs	r2, #4
 800926a:	409a      	lsls	r2, r3
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009274:	f043 0204 	orr.w	r2, r3, #4
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009280:	2210      	movs	r2, #16
 8009282:	409a      	lsls	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4013      	ands	r3, r2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d043      	beq.n	8009314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d03c      	beq.n	8009314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929e:	2210      	movs	r2, #16
 80092a0:	409a      	lsls	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d018      	beq.n	80092e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d108      	bne.n	80092d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d024      	beq.n	8009314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
 80092d2:	e01f      	b.n	8009314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01b      	beq.n	8009314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
 80092e4:	e016      	b.n	8009314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d107      	bne.n	8009304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0208 	bic.w	r2, r2, #8
 8009302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009318:	2220      	movs	r2, #32
 800931a:	409a      	lsls	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4013      	ands	r3, r2
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 808f 	beq.w	8009444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8087 	beq.w	8009444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800933a:	2220      	movs	r2, #32
 800933c:	409a      	lsls	r2, r3
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b05      	cmp	r3, #5
 800934c:	d136      	bne.n	80093bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0216 	bic.w	r2, r2, #22
 800935c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800936c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d103      	bne.n	800937e <HAL_DMA_IRQHandler+0x1da>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0208 	bic.w	r2, r2, #8
 800938c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009392:	223f      	movs	r2, #63	@ 0x3f
 8009394:	409a      	lsls	r2, r3
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d07e      	beq.n	80094b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	4798      	blx	r3
        }
        return;
 80093ba:	e079      	b.n	80094b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d01d      	beq.n	8009406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10d      	bne.n	80093f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d031      	beq.n	8009444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
 80093e8:	e02c      	b.n	8009444 <HAL_DMA_IRQHandler+0x2a0>
 80093ea:	bf00      	nop
 80093ec:	20000040 	.word	0x20000040
 80093f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d023      	beq.n	8009444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	4798      	blx	r3
 8009404:	e01e      	b.n	8009444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10f      	bne.n	8009434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 0210 	bic.w	r2, r2, #16
 8009422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009448:	2b00      	cmp	r3, #0
 800944a:	d032      	beq.n	80094b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d022      	beq.n	800949e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2205      	movs	r2, #5
 800945c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	3301      	adds	r3, #1
 8009474:	60bb      	str	r3, [r7, #8]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d307      	bcc.n	800948c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1f2      	bne.n	8009470 <HAL_DMA_IRQHandler+0x2cc>
 800948a:	e000      	b.n	800948e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800948c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
 80094ae:	e000      	b.n	80094b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80094b0:	bf00      	nop
    }
  }
}
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80094d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	2b40      	cmp	r3, #64	@ 0x40
 80094e4:	d108      	bne.n	80094f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80094f6:	e007      	b.n	8009508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	60da      	str	r2, [r3, #12]
}
 8009508:	bf00      	nop
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	3b10      	subs	r3, #16
 8009524:	4a14      	ldr	r2, [pc, #80]	@ (8009578 <DMA_CalcBaseAndBitshift+0x64>)
 8009526:	fba2 2303 	umull	r2, r3, r2, r3
 800952a:	091b      	lsrs	r3, r3, #4
 800952c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800952e:	4a13      	ldr	r2, [pc, #76]	@ (800957c <DMA_CalcBaseAndBitshift+0x68>)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4413      	add	r3, r2
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b03      	cmp	r3, #3
 8009540:	d909      	bls.n	8009556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	1d1a      	adds	r2, r3, #4
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	659a      	str	r2, [r3, #88]	@ 0x58
 8009554:	e007      	b.n	8009566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	aaaaaaab 	.word	0xaaaaaaab
 800957c:	08012858 	.word	0x08012858

08009580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d11f      	bne.n	80095da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b03      	cmp	r3, #3
 800959e:	d856      	bhi.n	800964e <DMA_CheckFifoParam+0xce>
 80095a0:	a201      	add	r2, pc, #4	@ (adr r2, 80095a8 <DMA_CheckFifoParam+0x28>)
 80095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	080095b9 	.word	0x080095b9
 80095ac:	080095cb 	.word	0x080095cb
 80095b0:	080095b9 	.word	0x080095b9
 80095b4:	0800964f 	.word	0x0800964f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d046      	beq.n	8009652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095c8:	e043      	b.n	8009652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80095d2:	d140      	bne.n	8009656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095d8:	e03d      	b.n	8009656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e2:	d121      	bne.n	8009628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d837      	bhi.n	800965a <DMA_CheckFifoParam+0xda>
 80095ea:	a201      	add	r2, pc, #4	@ (adr r2, 80095f0 <DMA_CheckFifoParam+0x70>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009607 	.word	0x08009607
 80095f8:	08009601 	.word	0x08009601
 80095fc:	08009619 	.word	0x08009619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
      break;
 8009604:	e030      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d025      	beq.n	800965e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009616:	e022      	b.n	800965e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009620:	d11f      	bne.n	8009662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009626:	e01c      	b.n	8009662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d903      	bls.n	8009636 <DMA_CheckFifoParam+0xb6>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b03      	cmp	r3, #3
 8009632:	d003      	beq.n	800963c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009634:	e018      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	73fb      	strb	r3, [r7, #15]
      break;
 800963a:	e015      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	73fb      	strb	r3, [r7, #15]
      break;
 800964c:	e00b      	b.n	8009666 <DMA_CheckFifoParam+0xe6>
      break;
 800964e:	bf00      	nop
 8009650:	e00a      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      break;
 8009652:	bf00      	nop
 8009654:	e008      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      break;
 8009656:	bf00      	nop
 8009658:	e006      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      break;
 800965a:	bf00      	nop
 800965c:	e004      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      break;
 800965e:	bf00      	nop
 8009660:	e002      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      break;   
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
      break;
 8009666:	bf00      	nop
    }
  } 
  
  return status; 
 8009668:	7bfb      	ldrb	r3, [r7, #15]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop

08009678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009678:	b480      	push	{r7}
 800967a:	b089      	sub	sp, #36	@ 0x24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800968a:	2300      	movs	r3, #0
 800968c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	e165      	b.n	8009960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009694:	2201      	movs	r2, #1
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	fa02 f303 	lsl.w	r3, r2, r3
 800969c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4013      	ands	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	f040 8154 	bne.w	800995a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d005      	beq.n	80096ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d130      	bne.n	800972c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	2203      	movs	r2, #3
 80096d6:	fa02 f303 	lsl.w	r3, r2, r3
 80096da:	43db      	mvns	r3, r3
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	4013      	ands	r3, r2
 80096e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	fa02 f303 	lsl.w	r3, r2, r3
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009700:	2201      	movs	r2, #1
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	43db      	mvns	r3, r3
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	4013      	ands	r3, r2
 800970e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	091b      	lsrs	r3, r3, #4
 8009716:	f003 0201 	and.w	r2, r3, #1
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	fa02 f303 	lsl.w	r3, r2, r3
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	4313      	orrs	r3, r2
 8009724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	2b03      	cmp	r3, #3
 8009736:	d017      	beq.n	8009768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	2203      	movs	r2, #3
 8009744:	fa02 f303 	lsl.w	r3, r2, r3
 8009748:	43db      	mvns	r3, r3
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	4013      	ands	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	fa02 f303 	lsl.w	r3, r2, r3
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	4313      	orrs	r3, r2
 8009760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d123      	bne.n	80097bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	08da      	lsrs	r2, r3, #3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3208      	adds	r2, #8
 800977c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	220f      	movs	r2, #15
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	43db      	mvns	r3, r3
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	4013      	ands	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	691a      	ldr	r2, [r3, #16]
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	fa02 f303 	lsl.w	r3, r2, r3
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	08da      	lsrs	r2, r3, #3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3208      	adds	r2, #8
 80097b6:	69b9      	ldr	r1, [r7, #24]
 80097b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	2203      	movs	r2, #3
 80097c8:	fa02 f303 	lsl.w	r3, r2, r3
 80097cc:	43db      	mvns	r3, r3
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	4013      	ands	r3, r2
 80097d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f003 0203 	and.w	r2, r3, #3
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80ae 	beq.w	800995a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
 8009802:	4b5d      	ldr	r3, [pc, #372]	@ (8009978 <HAL_GPIO_Init+0x300>)
 8009804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009806:	4a5c      	ldr	r2, [pc, #368]	@ (8009978 <HAL_GPIO_Init+0x300>)
 8009808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800980c:	6453      	str	r3, [r2, #68]	@ 0x44
 800980e:	4b5a      	ldr	r3, [pc, #360]	@ (8009978 <HAL_GPIO_Init+0x300>)
 8009810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800981a:	4a58      	ldr	r2, [pc, #352]	@ (800997c <HAL_GPIO_Init+0x304>)
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	089b      	lsrs	r3, r3, #2
 8009820:	3302      	adds	r3, #2
 8009822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	220f      	movs	r2, #15
 8009832:	fa02 f303 	lsl.w	r3, r2, r3
 8009836:	43db      	mvns	r3, r3
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	4013      	ands	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a4f      	ldr	r2, [pc, #316]	@ (8009980 <HAL_GPIO_Init+0x308>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d025      	beq.n	8009892 <HAL_GPIO_Init+0x21a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a4e      	ldr	r2, [pc, #312]	@ (8009984 <HAL_GPIO_Init+0x30c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d01f      	beq.n	800988e <HAL_GPIO_Init+0x216>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a4d      	ldr	r2, [pc, #308]	@ (8009988 <HAL_GPIO_Init+0x310>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d019      	beq.n	800988a <HAL_GPIO_Init+0x212>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a4c      	ldr	r2, [pc, #304]	@ (800998c <HAL_GPIO_Init+0x314>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d013      	beq.n	8009886 <HAL_GPIO_Init+0x20e>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a4b      	ldr	r2, [pc, #300]	@ (8009990 <HAL_GPIO_Init+0x318>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00d      	beq.n	8009882 <HAL_GPIO_Init+0x20a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a4a      	ldr	r2, [pc, #296]	@ (8009994 <HAL_GPIO_Init+0x31c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d007      	beq.n	800987e <HAL_GPIO_Init+0x206>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a49      	ldr	r2, [pc, #292]	@ (8009998 <HAL_GPIO_Init+0x320>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d101      	bne.n	800987a <HAL_GPIO_Init+0x202>
 8009876:	2306      	movs	r3, #6
 8009878:	e00c      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 800987a:	2307      	movs	r3, #7
 800987c:	e00a      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 800987e:	2305      	movs	r3, #5
 8009880:	e008      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 8009882:	2304      	movs	r3, #4
 8009884:	e006      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 8009886:	2303      	movs	r3, #3
 8009888:	e004      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 800988a:	2302      	movs	r3, #2
 800988c:	e002      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 800988e:	2301      	movs	r3, #1
 8009890:	e000      	b.n	8009894 <HAL_GPIO_Init+0x21c>
 8009892:	2300      	movs	r3, #0
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	f002 0203 	and.w	r2, r2, #3
 800989a:	0092      	lsls	r2, r2, #2
 800989c:	4093      	lsls	r3, r2
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098a4:	4935      	ldr	r1, [pc, #212]	@ (800997c <HAL_GPIO_Init+0x304>)
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	089b      	lsrs	r3, r3, #2
 80098aa:	3302      	adds	r3, #2
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80098b2:	4b3a      	ldr	r3, [pc, #232]	@ (800999c <HAL_GPIO_Init+0x324>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	43db      	mvns	r3, r3
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	4013      	ands	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80098d6:	4a31      	ldr	r2, [pc, #196]	@ (800999c <HAL_GPIO_Init+0x324>)
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80098dc:	4b2f      	ldr	r3, [pc, #188]	@ (800999c <HAL_GPIO_Init+0x324>)
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	4013      	ands	r3, r2
 80098ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009900:	4a26      	ldr	r2, [pc, #152]	@ (800999c <HAL_GPIO_Init+0x324>)
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009906:	4b25      	ldr	r3, [pc, #148]	@ (800999c <HAL_GPIO_Init+0x324>)
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	43db      	mvns	r3, r3
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	4013      	ands	r3, r2
 8009914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4313      	orrs	r3, r2
 8009928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800992a:	4a1c      	ldr	r2, [pc, #112]	@ (800999c <HAL_GPIO_Init+0x324>)
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009930:	4b1a      	ldr	r3, [pc, #104]	@ (800999c <HAL_GPIO_Init+0x324>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	43db      	mvns	r3, r3
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	4013      	ands	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009954:	4a11      	ldr	r2, [pc, #68]	@ (800999c <HAL_GPIO_Init+0x324>)
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	3301      	adds	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	2b0f      	cmp	r3, #15
 8009964:	f67f ae96 	bls.w	8009694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	3724      	adds	r7, #36	@ 0x24
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40023800 	.word	0x40023800
 800997c:	40013800 	.word	0x40013800
 8009980:	40020000 	.word	0x40020000
 8009984:	40020400 	.word	0x40020400
 8009988:	40020800 	.word	0x40020800
 800998c:	40020c00 	.word	0x40020c00
 8009990:	40021000 	.word	0x40021000
 8009994:	40021400 	.word	0x40021400
 8009998:	40021800 	.word	0x40021800
 800999c:	40013c00 	.word	0x40013c00

080099a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e0c7      	b.n	8009b4c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099bc:	2201      	movs	r2, #1
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	fa02 f303 	lsl.w	r3, r2, r3
 80099c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	4013      	ands	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	f040 80b7 	bne.w	8009b46 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80099d8:	4a62      	ldr	r2, [pc, #392]	@ (8009b64 <HAL_GPIO_DeInit+0x1c4>)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	089b      	lsrs	r3, r3, #2
 80099de:	3302      	adds	r3, #2
 80099e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f003 0303 	and.w	r3, r3, #3
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	220f      	movs	r2, #15
 80099f0:	fa02 f303 	lsl.w	r3, r2, r3
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a5a      	ldr	r2, [pc, #360]	@ (8009b68 <HAL_GPIO_DeInit+0x1c8>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d025      	beq.n	8009a4e <HAL_GPIO_DeInit+0xae>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a59      	ldr	r2, [pc, #356]	@ (8009b6c <HAL_GPIO_DeInit+0x1cc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01f      	beq.n	8009a4a <HAL_GPIO_DeInit+0xaa>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a58      	ldr	r2, [pc, #352]	@ (8009b70 <HAL_GPIO_DeInit+0x1d0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d019      	beq.n	8009a46 <HAL_GPIO_DeInit+0xa6>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a57      	ldr	r2, [pc, #348]	@ (8009b74 <HAL_GPIO_DeInit+0x1d4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d013      	beq.n	8009a42 <HAL_GPIO_DeInit+0xa2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a56      	ldr	r2, [pc, #344]	@ (8009b78 <HAL_GPIO_DeInit+0x1d8>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d00d      	beq.n	8009a3e <HAL_GPIO_DeInit+0x9e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a55      	ldr	r2, [pc, #340]	@ (8009b7c <HAL_GPIO_DeInit+0x1dc>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d007      	beq.n	8009a3a <HAL_GPIO_DeInit+0x9a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a54      	ldr	r2, [pc, #336]	@ (8009b80 <HAL_GPIO_DeInit+0x1e0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d101      	bne.n	8009a36 <HAL_GPIO_DeInit+0x96>
 8009a32:	2306      	movs	r3, #6
 8009a34:	e00c      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a36:	2307      	movs	r3, #7
 8009a38:	e00a      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a3a:	2305      	movs	r3, #5
 8009a3c:	e008      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a3e:	2304      	movs	r3, #4
 8009a40:	e006      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a42:	2303      	movs	r3, #3
 8009a44:	e004      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e002      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <HAL_GPIO_DeInit+0xb0>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	f002 0203 	and.w	r2, r2, #3
 8009a56:	0092      	lsls	r2, r2, #2
 8009a58:	4093      	lsls	r3, r2
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d132      	bne.n	8009ac6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009a60:	4b48      	ldr	r3, [pc, #288]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	43db      	mvns	r3, r3
 8009a68:	4946      	ldr	r1, [pc, #280]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009a6e:	4b45      	ldr	r3, [pc, #276]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	43db      	mvns	r3, r3
 8009a76:	4943      	ldr	r1, [pc, #268]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009a7c:	4b41      	ldr	r3, [pc, #260]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	43db      	mvns	r3, r3
 8009a84:	493f      	ldr	r1, [pc, #252]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a86:	4013      	ands	r3, r2
 8009a88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	43db      	mvns	r3, r3
 8009a92:	493c      	ldr	r1, [pc, #240]	@ (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	220f      	movs	r2, #15
 8009aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8009b64 <HAL_GPIO_DeInit+0x1c4>)
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	089b      	lsrs	r3, r3, #2
 8009aae:	3302      	adds	r3, #2
 8009ab0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	43da      	mvns	r2, r3
 8009ab8:	482a      	ldr	r0, [pc, #168]	@ (8009b64 <HAL_GPIO_DeInit+0x1c4>)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	089b      	lsrs	r3, r3, #2
 8009abe:	400a      	ands	r2, r1
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	2103      	movs	r1, #3
 8009ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	401a      	ands	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	08da      	lsrs	r2, r3, #3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3208      	adds	r2, #8
 8009ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	220f      	movs	r2, #15
 8009af2:	fa02 f303 	lsl.w	r3, r2, r3
 8009af6:	43db      	mvns	r3, r3
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	08d2      	lsrs	r2, r2, #3
 8009afc:	4019      	ands	r1, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3208      	adds	r2, #8
 8009b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	2103      	movs	r1, #3
 8009b10:	fa01 f303 	lsl.w	r3, r1, r3
 8009b14:	43db      	mvns	r3, r3
 8009b16:	401a      	ands	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	2101      	movs	r1, #1
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	fa01 f303 	lsl.w	r3, r1, r3
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	401a      	ands	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	2103      	movs	r1, #3
 8009b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3e:	43db      	mvns	r3, r3
 8009b40:	401a      	ands	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	f67f af34 	bls.w	80099bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40013800 	.word	0x40013800
 8009b68:	40020000 	.word	0x40020000
 8009b6c:	40020400 	.word	0x40020400
 8009b70:	40020800 	.word	0x40020800
 8009b74:	40020c00 	.word	0x40020c00
 8009b78:	40021000 	.word	0x40021000
 8009b7c:	40021400 	.word	0x40021400
 8009b80:	40021800 	.word	0x40021800
 8009b84:	40013c00 	.word	0x40013c00

08009b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691a      	ldr	r2, [r3, #16]
 8009b98:	887b      	ldrh	r3, [r7, #2]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
 8009ba4:	e001      	b.n	8009baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	807b      	strh	r3, [r7, #2]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bc8:	787b      	ldrb	r3, [r7, #1]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bce:	887a      	ldrh	r2, [r7, #2]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009bd4:	e003      	b.n	8009bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009bd6:	887b      	ldrh	r3, [r7, #2]
 8009bd8:	041a      	lsls	r2, r3, #16
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	619a      	str	r2, [r3, #24]
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009bf6:	4b08      	ldr	r3, [pc, #32]	@ (8009c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009bf8:	695a      	ldr	r2, [r3, #20]
 8009bfa:	88fb      	ldrh	r3, [r7, #6]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d006      	beq.n	8009c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009c02:	4a05      	ldr	r2, [pc, #20]	@ (8009c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fb fac6 	bl	800519c <HAL_GPIO_EXTI_Callback>
  }
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	40013c00 	.word	0x40013c00

08009c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e12b      	b.n	8009e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7fd fc92 	bl	800756c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2224      	movs	r2, #36	@ 0x24
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c80:	f001 f912 	bl	800aea8 <HAL_RCC_GetPCLK1Freq>
 8009c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	4a81      	ldr	r2, [pc, #516]	@ (8009e90 <HAL_I2C_Init+0x274>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d807      	bhi.n	8009ca0 <HAL_I2C_Init+0x84>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4a80      	ldr	r2, [pc, #512]	@ (8009e94 <HAL_I2C_Init+0x278>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	bf94      	ite	ls
 8009c98:	2301      	movls	r3, #1
 8009c9a:	2300      	movhi	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	e006      	b.n	8009cae <HAL_I2C_Init+0x92>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8009e98 <HAL_I2C_Init+0x27c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bf94      	ite	ls
 8009ca8:	2301      	movls	r3, #1
 8009caa:	2300      	movhi	r3, #0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e0e7      	b.n	8009e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4a78      	ldr	r2, [pc, #480]	@ (8009e9c <HAL_I2C_Init+0x280>)
 8009cba:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbe:	0c9b      	lsrs	r3, r3, #18
 8009cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a6a      	ldr	r2, [pc, #424]	@ (8009e90 <HAL_I2C_Init+0x274>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d802      	bhi.n	8009cf0 <HAL_I2C_Init+0xd4>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3301      	adds	r3, #1
 8009cee:	e009      	b.n	8009d04 <HAL_I2C_Init+0xe8>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009cf6:	fb02 f303 	mul.w	r3, r2, r3
 8009cfa:	4a69      	ldr	r2, [pc, #420]	@ (8009ea0 <HAL_I2C_Init+0x284>)
 8009cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009d00:	099b      	lsrs	r3, r3, #6
 8009d02:	3301      	adds	r3, #1
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009d16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	495c      	ldr	r1, [pc, #368]	@ (8009e90 <HAL_I2C_Init+0x274>)
 8009d20:	428b      	cmp	r3, r1
 8009d22:	d819      	bhi.n	8009d58 <HAL_I2C_Init+0x13c>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	1e59      	subs	r1, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d38:	400b      	ands	r3, r1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <HAL_I2C_Init+0x138>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1e59      	subs	r1, r3, #1
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d52:	e051      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009d54:	2304      	movs	r3, #4
 8009d56:	e04f      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d111      	bne.n	8009d84 <HAL_I2C_Init+0x168>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	1e58      	subs	r0, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6859      	ldr	r1, [r3, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	005b      	lsls	r3, r3, #1
 8009d6c:	440b      	add	r3, r1
 8009d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d72:	3301      	adds	r3, #1
 8009d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2301      	moveq	r3, #1
 8009d7e:	2300      	movne	r3, #0
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	e012      	b.n	8009daa <HAL_I2C_Init+0x18e>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	1e58      	subs	r0, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6859      	ldr	r1, [r3, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	0099      	lsls	r1, r3, #2
 8009d94:	440b      	add	r3, r1
 8009d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bf0c      	ite	eq
 8009da4:	2301      	moveq	r3, #1
 8009da6:	2300      	movne	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <HAL_I2C_Init+0x196>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e022      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10e      	bne.n	8009dd8 <HAL_I2C_Init+0x1bc>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	1e58      	subs	r0, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6859      	ldr	r1, [r3, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	440b      	add	r3, r1
 8009dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd6:	e00f      	b.n	8009df8 <HAL_I2C_Init+0x1dc>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	1e58      	subs	r0, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6859      	ldr	r1, [r3, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	0099      	lsls	r1, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dee:	3301      	adds	r3, #1
 8009df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	6809      	ldr	r1, [r1, #0]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69da      	ldr	r2, [r3, #28]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009e26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	6911      	ldr	r1, [r2, #16]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	68d2      	ldr	r2, [r2, #12]
 8009e32:	4311      	orrs	r1, r2
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695a      	ldr	r2, [r3, #20]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	000186a0 	.word	0x000186a0
 8009e94:	001e847f 	.word	0x001e847f
 8009e98:	003d08ff 	.word	0x003d08ff
 8009e9c:	431bde83 	.word	0x431bde83
 8009ea0:	10624dd3 	.word	0x10624dd3

08009ea4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e021      	b.n	8009efa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2224      	movs	r2, #36	@ 0x24
 8009eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0201 	bic.w	r2, r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7fd fbec 	bl	80076ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	4608      	mov	r0, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	817b      	strh	r3, [r7, #10]
 8009f16:	460b      	mov	r3, r1
 8009f18:	813b      	strh	r3, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f1e:	f7fe fa0f 	bl	8008340 <HAL_GetTick>
 8009f22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	f040 80d9 	bne.w	800a0e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	2319      	movs	r3, #25
 8009f38:	2201      	movs	r2, #1
 8009f3a:	496d      	ldr	r1, [pc, #436]	@ (800a0f0 <HAL_I2C_Mem_Write+0x1ec>)
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 fc8b 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e0cc      	b.n	800a0e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_I2C_Mem_Write+0x56>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e0c5      	b.n	800a0e6 <HAL_I2C_Mem_Write+0x1e2>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d007      	beq.n	8009f80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f042 0201 	orr.w	r2, r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2221      	movs	r2, #33	@ 0x21
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2240      	movs	r2, #64	@ 0x40
 8009f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a3a      	ldr	r2, [r7, #32]
 8009faa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a4d      	ldr	r2, [pc, #308]	@ (800a0f4 <HAL_I2C_Mem_Write+0x1f0>)
 8009fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fc2:	88f8      	ldrh	r0, [r7, #6]
 8009fc4:	893a      	ldrh	r2, [r7, #8]
 8009fc6:	8979      	ldrh	r1, [r7, #10]
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	9301      	str	r3, [sp, #4]
 8009fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fac2 	bl	800a55c <I2C_RequestMemoryWrite>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d052      	beq.n	800a084 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e081      	b.n	800a0e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fd50 	bl	800aa8c <I2C_WaitOnTXEFlagUntilTimeout>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00d      	beq.n	800a00e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff6:	2b04      	cmp	r3, #4
 8009ff8:	d107      	bne.n	800a00a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e06b      	b.n	800a0e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a028:	3b01      	subs	r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a034:	b29b      	uxth	r3, r3
 800a036:	3b01      	subs	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d11b      	bne.n	800a084 <HAL_I2C_Mem_Write+0x180>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a050:	2b00      	cmp	r3, #0
 800a052:	d017      	beq.n	800a084 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	781a      	ldrb	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a06e:	3b01      	subs	r3, #1
 800a070:	b29a      	uxth	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1aa      	bne.n	8009fe2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 fd43 	bl	800ab1c <I2C_WaitOnBTFFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00d      	beq.n	800a0b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d107      	bne.n	800a0b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e016      	b.n	800a0e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e000      	b.n	800a0e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a0e4:	2302      	movs	r3, #2
  }
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	00100002 	.word	0x00100002
 800a0f4:	ffff0000 	.word	0xffff0000

0800a0f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08c      	sub	sp, #48	@ 0x30
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	461a      	mov	r2, r3
 800a106:	4603      	mov	r3, r0
 800a108:	817b      	strh	r3, [r7, #10]
 800a10a:	460b      	mov	r3, r1
 800a10c:	813b      	strh	r3, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a112:	f7fe f915 	bl	8008340 <HAL_GetTick>
 800a116:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b20      	cmp	r3, #32
 800a122:	f040 8214 	bne.w	800a54e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	2319      	movs	r3, #25
 800a12c:	2201      	movs	r2, #1
 800a12e:	497b      	ldr	r1, [pc, #492]	@ (800a31c <HAL_I2C_Mem_Read+0x224>)
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fb91 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a13c:	2302      	movs	r3, #2
 800a13e:	e207      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d101      	bne.n	800a14e <HAL_I2C_Mem_Read+0x56>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e200      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b01      	cmp	r3, #1
 800a162:	d007      	beq.n	800a174 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2222      	movs	r2, #34	@ 0x22
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2240      	movs	r2, #64	@ 0x40
 800a190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a1a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4a5b      	ldr	r2, [pc, #364]	@ (800a320 <HAL_I2C_Mem_Read+0x228>)
 800a1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1b6:	88f8      	ldrh	r0, [r7, #6]
 800a1b8:	893a      	ldrh	r2, [r7, #8]
 800a1ba:	8979      	ldrh	r1, [r7, #10]
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 fa5e 	bl	800a688 <I2C_RequestMemoryRead>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e1bc      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d113      	bne.n	800a206 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	623b      	str	r3, [r7, #32]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	623b      	str	r3, [r7, #32]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	623b      	str	r3, [r7, #32]
 800a1f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	e190      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d11b      	bne.n	800a246 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a21c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	61fb      	str	r3, [r7, #28]
 800a232:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e170      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d11b      	bne.n	800a286 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a25c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a26c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a26e:	2300      	movs	r3, #0
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	e150      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a29c:	e144      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	f200 80f1 	bhi.w	800a48a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d123      	bne.n	800a2f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fc79 	bl	800abac <I2C_WaitOnRXNEFlagUntilTimeout>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e145      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a2f6:	e117      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d14e      	bne.n	800a39e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a306:	2200      	movs	r2, #0
 800a308:	4906      	ldr	r1, [pc, #24]	@ (800a324 <HAL_I2C_Mem_Read+0x22c>)
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 faa4 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d008      	beq.n	800a328 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e11a      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
 800a31a:	bf00      	nop
 800a31c:	00100002 	.word	0x00100002
 800a320:	ffff0000 	.word	0xffff0000
 800a324:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691a      	ldr	r2, [r3, #16]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a342:	b2d2      	uxtb	r2, r2
 800a344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	b29a      	uxth	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	b2d2      	uxtb	r2, r2
 800a376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a386:	3b01      	subs	r3, #1
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a392:	b29b      	uxth	r3, r3
 800a394:	3b01      	subs	r3, #1
 800a396:	b29a      	uxth	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a39c:	e0c4      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	496c      	ldr	r1, [pc, #432]	@ (800a558 <HAL_I2C_Mem_Read+0x460>)
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fa55 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0cb      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	2200      	movs	r2, #0
 800a402:	4955      	ldr	r1, [pc, #340]	@ (800a558 <HAL_I2C_Mem_Read+0x460>)
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 fa27 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e09d      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691a      	ldr	r2, [r3, #16]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42e:	b2d2      	uxtb	r2, r2
 800a430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	691a      	ldr	r2, [r3, #16]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a460:	b2d2      	uxtb	r2, r2
 800a462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a472:	3b01      	subs	r3, #1
 800a474:	b29a      	uxth	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a47e:	b29b      	uxth	r3, r3
 800a480:	3b01      	subs	r3, #1
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a488:	e04e      	b.n	800a528 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a48a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a48c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fb8c 	bl	800abac <I2C_WaitOnRXNEFlagUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e058      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a8:	b2d2      	uxtb	r2, r2
 800a4aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	f003 0304 	and.w	r3, r3, #4
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	d124      	bne.n	800a528 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d107      	bne.n	800a4f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a512:	3b01      	subs	r3, #1
 800a514:	b29a      	uxth	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a51e:	b29b      	uxth	r3, r3
 800a520:	3b01      	subs	r3, #1
 800a522:	b29a      	uxth	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f47f aeb6 	bne.w	800a29e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2220      	movs	r2, #32
 800a536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e000      	b.n	800a550 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a54e:	2302      	movs	r3, #2
  }
}
 800a550:	4618      	mov	r0, r3
 800a552:	3728      	adds	r7, #40	@ 0x28
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	00010004 	.word	0x00010004

0800a55c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af02      	add	r7, sp, #8
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	4608      	mov	r0, r1
 800a566:	4611      	mov	r1, r2
 800a568:	461a      	mov	r2, r3
 800a56a:	4603      	mov	r3, r0
 800a56c:	817b      	strh	r3, [r7, #10]
 800a56e:	460b      	mov	r3, r1
 800a570:	813b      	strh	r3, [r7, #8]
 800a572:	4613      	mov	r3, r2
 800a574:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f960 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00d      	beq.n	800a5ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ac:	d103      	bne.n	800a5b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e05f      	b.n	800a67a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5ba:	897b      	ldrh	r3, [r7, #10]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a5c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	6a3a      	ldr	r2, [r7, #32]
 800a5ce:	492d      	ldr	r1, [pc, #180]	@ (800a684 <I2C_RequestMemoryWrite+0x128>)
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 f9bb 	bl	800a94c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e04c      	b.n	800a67a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f8:	6a39      	ldr	r1, [r7, #32]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 fa46 	bl	800aa8c <I2C_WaitOnTXEFlagUntilTimeout>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00d      	beq.n	800a622 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d107      	bne.n	800a61e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a61c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e02b      	b.n	800a67a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d105      	bne.n	800a634 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a628:	893b      	ldrh	r3, [r7, #8]
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	611a      	str	r2, [r3, #16]
 800a632:	e021      	b.n	800a678 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a634:	893b      	ldrh	r3, [r7, #8]
 800a636:	0a1b      	lsrs	r3, r3, #8
 800a638:	b29b      	uxth	r3, r3
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a644:	6a39      	ldr	r1, [r7, #32]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 fa20 	bl	800aa8c <I2C_WaitOnTXEFlagUntilTimeout>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00d      	beq.n	800a66e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a656:	2b04      	cmp	r3, #4
 800a658:	d107      	bne.n	800a66a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e005      	b.n	800a67a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a66e:	893b      	ldrh	r3, [r7, #8]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	00010002 	.word	0x00010002

0800a688 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	4608      	mov	r0, r1
 800a692:	4611      	mov	r1, r2
 800a694:	461a      	mov	r2, r3
 800a696:	4603      	mov	r3, r0
 800a698:	817b      	strh	r3, [r7, #10]
 800a69a:	460b      	mov	r3, r1
 800a69c:	813b      	strh	r3, [r7, #8]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 f8c2 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00d      	beq.n	800a6f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6e8:	d103      	bne.n	800a6f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e0aa      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6f6:	897b      	ldrh	r3, [r7, #10]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a704:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a708:	6a3a      	ldr	r2, [r7, #32]
 800a70a:	4952      	ldr	r1, [pc, #328]	@ (800a854 <I2C_RequestMemoryRead+0x1cc>)
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f91d 	bl	800a94c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e097      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a734:	6a39      	ldr	r1, [r7, #32]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 f9a8 	bl	800aa8c <I2C_WaitOnTXEFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00d      	beq.n	800a75e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a746:	2b04      	cmp	r3, #4
 800a748:	d107      	bne.n	800a75a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e076      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d105      	bne.n	800a770 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a764:	893b      	ldrh	r3, [r7, #8]
 800a766:	b2da      	uxtb	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	611a      	str	r2, [r3, #16]
 800a76e:	e021      	b.n	800a7b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a770:	893b      	ldrh	r3, [r7, #8]
 800a772:	0a1b      	lsrs	r3, r3, #8
 800a774:	b29b      	uxth	r3, r3
 800a776:	b2da      	uxtb	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a77e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a780:	6a39      	ldr	r1, [r7, #32]
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f000 f982 	bl	800aa8c <I2C_WaitOnTXEFlagUntilTimeout>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00d      	beq.n	800a7aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	2b04      	cmp	r3, #4
 800a794:	d107      	bne.n	800a7a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e050      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7aa:	893b      	ldrh	r3, [r7, #8]
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7b6:	6a39      	ldr	r1, [r7, #32]
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 f967 	bl	800aa8c <I2C_WaitOnTXEFlagUntilTimeout>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00d      	beq.n	800a7e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d107      	bne.n	800a7dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e035      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f82b 	bl	800a858 <I2C_WaitOnFlagUntilTimeout>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00d      	beq.n	800a824 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a816:	d103      	bne.n	800a820 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a81e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e013      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a824:	897b      	ldrh	r3, [r7, #10]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f043 0301 	orr.w	r3, r3, #1
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	6a3a      	ldr	r2, [r7, #32]
 800a838:	4906      	ldr	r1, [pc, #24]	@ (800a854 <I2C_RequestMemoryRead+0x1cc>)
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 f886 	bl	800a94c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	00010002 	.word	0x00010002

0800a858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	4613      	mov	r3, r2
 800a866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a868:	e048      	b.n	800a8fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a870:	d044      	beq.n	800a8fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a872:	f7fd fd65 	bl	8008340 <HAL_GetTick>
 800a876:	4602      	mov	r2, r0
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d302      	bcc.n	800a888 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d139      	bne.n	800a8fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d10d      	bne.n	800a8ae <I2C_WaitOnFlagUntilTimeout+0x56>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	43da      	mvns	r2, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	4013      	ands	r3, r2
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bf0c      	ite	eq
 800a8a4:	2301      	moveq	r3, #1
 800a8a6:	2300      	movne	r3, #0
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	e00c      	b.n	800a8c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	43da      	mvns	r2, r3
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bf0c      	ite	eq
 800a8c0:	2301      	moveq	r3, #1
 800a8c2:	2300      	movne	r3, #0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d116      	bne.n	800a8fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e8:	f043 0220 	orr.w	r2, r3, #32
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e023      	b.n	800a944 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	0c1b      	lsrs	r3, r3, #16
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b01      	cmp	r3, #1
 800a904:	d10d      	bne.n	800a922 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	43da      	mvns	r2, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	4013      	ands	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	bf0c      	ite	eq
 800a918:	2301      	moveq	r3, #1
 800a91a:	2300      	movne	r3, #0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	e00c      	b.n	800a93c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	43da      	mvns	r2, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	4013      	ands	r3, r2
 800a92e:	b29b      	uxth	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	bf0c      	ite	eq
 800a934:	2301      	moveq	r3, #1
 800a936:	2300      	movne	r3, #0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	461a      	mov	r2, r3
 800a93c:	79fb      	ldrb	r3, [r7, #7]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d093      	beq.n	800a86a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a95a:	e071      	b.n	800aa40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a96a:	d123      	bne.n	800a9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a97a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a984:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a0:	f043 0204 	orr.w	r2, r3, #4
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e067      	b.n	800aa84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9ba:	d041      	beq.n	800aa40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9bc:	f7fd fcc0 	bl	8008340 <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d302      	bcc.n	800a9d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d136      	bne.n	800aa40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	0c1b      	lsrs	r3, r3, #16
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10c      	bne.n	800a9f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	43da      	mvns	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	bf14      	ite	ne
 800a9ee:	2301      	movne	r3, #1
 800a9f0:	2300      	moveq	r3, #0
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	e00b      	b.n	800aa0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	43da      	mvns	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	4013      	ands	r3, r2
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bf14      	ite	ne
 800aa08:	2301      	movne	r3, #1
 800aa0a:	2300      	moveq	r3, #0
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d016      	beq.n	800aa40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2c:	f043 0220 	orr.w	r2, r3, #32
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e021      	b.n	800aa84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	0c1b      	lsrs	r3, r3, #16
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10c      	bne.n	800aa64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	43da      	mvns	r2, r3
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	4013      	ands	r3, r2
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bf14      	ite	ne
 800aa5c:	2301      	movne	r3, #1
 800aa5e:	2300      	moveq	r3, #0
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	e00b      	b.n	800aa7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	43da      	mvns	r2, r3
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bf14      	ite	ne
 800aa76:	2301      	movne	r3, #1
 800aa78:	2300      	moveq	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f47f af6d 	bne.w	800a95c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa98:	e034      	b.n	800ab04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f8e3 	bl	800ac66 <I2C_IsAcknowledgeFailed>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e034      	b.n	800ab14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aab0:	d028      	beq.n	800ab04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aab2:	f7fd fc45 	bl	8008340 <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d302      	bcc.n	800aac8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d11d      	bne.n	800ab04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aad2:	2b80      	cmp	r3, #128	@ 0x80
 800aad4:	d016      	beq.n	800ab04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf0:	f043 0220 	orr.w	r2, r3, #32
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e007      	b.n	800ab14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab0e:	2b80      	cmp	r3, #128	@ 0x80
 800ab10:	d1c3      	bne.n	800aa9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab28:	e034      	b.n	800ab94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f89b 	bl	800ac66 <I2C_IsAcknowledgeFailed>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e034      	b.n	800aba4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab40:	d028      	beq.n	800ab94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab42:	f7fd fbfd 	bl	8008340 <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d302      	bcc.n	800ab58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d11d      	bne.n	800ab94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	d016      	beq.n	800ab94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab80:	f043 0220 	orr.w	r2, r3, #32
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e007      	b.n	800aba4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	f003 0304 	and.w	r3, r3, #4
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d1c3      	bne.n	800ab2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800abb8:	e049      	b.n	800ac4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d119      	bne.n	800abfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f06f 0210 	mvn.w	r2, #16
 800abd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2220      	movs	r2, #32
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e030      	b.n	800ac5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abfc:	f7fd fba0 	bl	8008340 <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d11d      	bne.n	800ac4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac1c:	2b40      	cmp	r3, #64	@ 0x40
 800ac1e:	d016      	beq.n	800ac4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	f043 0220 	orr.w	r2, r3, #32
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e007      	b.n	800ac5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac58:	2b40      	cmp	r3, #64	@ 0x40
 800ac5a:	d1ae      	bne.n	800abba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac7c:	d11b      	bne.n	800acb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ac86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2220      	movs	r2, #32
 800ac92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca2:	f043 0204 	orr.w	r2, r3, #4
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e000      	b.n	800acb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e0cc      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acd8:	4b68      	ldr	r3, [pc, #416]	@ (800ae7c <HAL_RCC_ClockConfig+0x1b8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 030f 	and.w	r3, r3, #15
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d90c      	bls.n	800ad00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ace6:	4b65      	ldr	r3, [pc, #404]	@ (800ae7c <HAL_RCC_ClockConfig+0x1b8>)
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	b2d2      	uxtb	r2, r2
 800acec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acee:	4b63      	ldr	r3, [pc, #396]	@ (800ae7c <HAL_RCC_ClockConfig+0x1b8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d001      	beq.n	800ad00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0b8      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d020      	beq.n	800ad4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d005      	beq.n	800ad24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad18:	4b59      	ldr	r3, [pc, #356]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	4a58      	ldr	r2, [pc, #352]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ad22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d005      	beq.n	800ad3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad30:	4b53      	ldr	r3, [pc, #332]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4a52      	ldr	r2, [pc, #328]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ad3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad3c:	4b50      	ldr	r3, [pc, #320]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	494d      	ldr	r1, [pc, #308]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d044      	beq.n	800ade4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d107      	bne.n	800ad72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad62:	4b47      	ldr	r3, [pc, #284]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d119      	bne.n	800ada2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e07f      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d003      	beq.n	800ad82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d107      	bne.n	800ad92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad82:	4b3f      	ldr	r3, [pc, #252]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e06f      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad92:	4b3b      	ldr	r3, [pc, #236]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e067      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ada2:	4b37      	ldr	r3, [pc, #220]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f023 0203 	bic.w	r2, r3, #3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	4934      	ldr	r1, [pc, #208]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adb4:	f7fd fac4 	bl	8008340 <HAL_GetTick>
 800adb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adba:	e00a      	b.n	800add2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adbc:	f7fd fac0 	bl	8008340 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adca:	4293      	cmp	r3, r2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e04f      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800add2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f003 020c 	and.w	r2, r3, #12
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d1eb      	bne.n	800adbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ade4:	4b25      	ldr	r3, [pc, #148]	@ (800ae7c <HAL_RCC_ClockConfig+0x1b8>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 030f 	and.w	r3, r3, #15
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d20c      	bcs.n	800ae0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adf2:	4b22      	ldr	r3, [pc, #136]	@ (800ae7c <HAL_RCC_ClockConfig+0x1b8>)
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfa:	4b20      	ldr	r3, [pc, #128]	@ (800ae7c <HAL_RCC_ClockConfig+0x1b8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 030f 	and.w	r3, r3, #15
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d001      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e032      	b.n	800ae72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d008      	beq.n	800ae2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae18:	4b19      	ldr	r3, [pc, #100]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	4916      	ldr	r1, [pc, #88]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d009      	beq.n	800ae4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae36:	4b12      	ldr	r3, [pc, #72]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	490e      	ldr	r1, [pc, #56]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae4a:	f000 f855 	bl	800aef8 <HAL_RCC_GetSysClockFreq>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	4b0b      	ldr	r3, [pc, #44]	@ (800ae80 <HAL_RCC_ClockConfig+0x1bc>)
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	091b      	lsrs	r3, r3, #4
 800ae56:	f003 030f 	and.w	r3, r3, #15
 800ae5a:	490a      	ldr	r1, [pc, #40]	@ (800ae84 <HAL_RCC_ClockConfig+0x1c0>)
 800ae5c:	5ccb      	ldrb	r3, [r1, r3]
 800ae5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae62:	4a09      	ldr	r2, [pc, #36]	@ (800ae88 <HAL_RCC_ClockConfig+0x1c4>)
 800ae64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ae66:	4b09      	ldr	r3, [pc, #36]	@ (800ae8c <HAL_RCC_ClockConfig+0x1c8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd fa24 	bl	80082b8 <HAL_InitTick>

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	40023c00 	.word	0x40023c00
 800ae80:	40023800 	.word	0x40023800
 800ae84:	08012840 	.word	0x08012840
 800ae88:	20000040 	.word	0x20000040
 800ae8c:	20000044 	.word	0x20000044

0800ae90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae94:	4b03      	ldr	r3, [pc, #12]	@ (800aea4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ae96:	681b      	ldr	r3, [r3, #0]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	20000040 	.word	0x20000040

0800aea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aeac:	f7ff fff0 	bl	800ae90 <HAL_RCC_GetHCLKFreq>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	4b05      	ldr	r3, [pc, #20]	@ (800aec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	0a9b      	lsrs	r3, r3, #10
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	4903      	ldr	r1, [pc, #12]	@ (800aecc <HAL_RCC_GetPCLK1Freq+0x24>)
 800aebe:	5ccb      	ldrb	r3, [r1, r3]
 800aec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	40023800 	.word	0x40023800
 800aecc:	08012850 	.word	0x08012850

0800aed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aed4:	f7ff ffdc 	bl	800ae90 <HAL_RCC_GetHCLKFreq>
 800aed8:	4602      	mov	r2, r0
 800aeda:	4b05      	ldr	r3, [pc, #20]	@ (800aef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	0b5b      	lsrs	r3, r3, #13
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	4903      	ldr	r1, [pc, #12]	@ (800aef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aee6:	5ccb      	ldrb	r3, [r1, r3]
 800aee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	40023800 	.word	0x40023800
 800aef4:	08012850 	.word	0x08012850

0800aef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aefc:	b0ae      	sub	sp, #184	@ 0xb8
 800aefe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800af00:	2300      	movs	r3, #0
 800af02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af1e:	4bcb      	ldr	r3, [pc, #812]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	f003 030c 	and.w	r3, r3, #12
 800af26:	2b0c      	cmp	r3, #12
 800af28:	f200 8206 	bhi.w	800b338 <HAL_RCC_GetSysClockFreq+0x440>
 800af2c:	a201      	add	r2, pc, #4	@ (adr r2, 800af34 <HAL_RCC_GetSysClockFreq+0x3c>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800af69 	.word	0x0800af69
 800af38:	0800b339 	.word	0x0800b339
 800af3c:	0800b339 	.word	0x0800b339
 800af40:	0800b339 	.word	0x0800b339
 800af44:	0800af71 	.word	0x0800af71
 800af48:	0800b339 	.word	0x0800b339
 800af4c:	0800b339 	.word	0x0800b339
 800af50:	0800b339 	.word	0x0800b339
 800af54:	0800af79 	.word	0x0800af79
 800af58:	0800b339 	.word	0x0800b339
 800af5c:	0800b339 	.word	0x0800b339
 800af60:	0800b339 	.word	0x0800b339
 800af64:	0800b169 	.word	0x0800b169
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af68:	4bb9      	ldr	r3, [pc, #740]	@ (800b250 <HAL_RCC_GetSysClockFreq+0x358>)
 800af6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800af6e:	e1e7      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af70:	4bb8      	ldr	r3, [pc, #736]	@ (800b254 <HAL_RCC_GetSysClockFreq+0x35c>)
 800af72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800af76:	e1e3      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af78:	4bb4      	ldr	r3, [pc, #720]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af84:	4bb1      	ldr	r3, [pc, #708]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d071      	beq.n	800b074 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af90:	4bae      	ldr	r3, [pc, #696]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	099b      	lsrs	r3, r3, #6
 800af96:	2200      	movs	r2, #0
 800af98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800afa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afac:	2300      	movs	r3, #0
 800afae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800afb6:	4622      	mov	r2, r4
 800afb8:	462b      	mov	r3, r5
 800afba:	f04f 0000 	mov.w	r0, #0
 800afbe:	f04f 0100 	mov.w	r1, #0
 800afc2:	0159      	lsls	r1, r3, #5
 800afc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800afc8:	0150      	lsls	r0, r2, #5
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4621      	mov	r1, r4
 800afd0:	1a51      	subs	r1, r2, r1
 800afd2:	6439      	str	r1, [r7, #64]	@ 0x40
 800afd4:	4629      	mov	r1, r5
 800afd6:	eb63 0301 	sbc.w	r3, r3, r1
 800afda:	647b      	str	r3, [r7, #68]	@ 0x44
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800afe8:	4649      	mov	r1, r9
 800afea:	018b      	lsls	r3, r1, #6
 800afec:	4641      	mov	r1, r8
 800afee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aff2:	4641      	mov	r1, r8
 800aff4:	018a      	lsls	r2, r1, #6
 800aff6:	4641      	mov	r1, r8
 800aff8:	1a51      	subs	r1, r2, r1
 800affa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800affc:	4649      	mov	r1, r9
 800affe:	eb63 0301 	sbc.w	r3, r3, r1
 800b002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b004:	f04f 0200 	mov.w	r2, #0
 800b008:	f04f 0300 	mov.w	r3, #0
 800b00c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800b010:	4649      	mov	r1, r9
 800b012:	00cb      	lsls	r3, r1, #3
 800b014:	4641      	mov	r1, r8
 800b016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b01a:	4641      	mov	r1, r8
 800b01c:	00ca      	lsls	r2, r1, #3
 800b01e:	4610      	mov	r0, r2
 800b020:	4619      	mov	r1, r3
 800b022:	4603      	mov	r3, r0
 800b024:	4622      	mov	r2, r4
 800b026:	189b      	adds	r3, r3, r2
 800b028:	633b      	str	r3, [r7, #48]	@ 0x30
 800b02a:	462b      	mov	r3, r5
 800b02c:	460a      	mov	r2, r1
 800b02e:	eb42 0303 	adc.w	r3, r2, r3
 800b032:	637b      	str	r3, [r7, #52]	@ 0x34
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b040:	4629      	mov	r1, r5
 800b042:	024b      	lsls	r3, r1, #9
 800b044:	4621      	mov	r1, r4
 800b046:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b04a:	4621      	mov	r1, r4
 800b04c:	024a      	lsls	r2, r1, #9
 800b04e:	4610      	mov	r0, r2
 800b050:	4619      	mov	r1, r3
 800b052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b056:	2200      	movs	r2, #0
 800b058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b05c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b060:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b064:	f7f5 ff6e 	bl	8000f44 <__aeabi_uldivmod>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4613      	mov	r3, r2
 800b06e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b072:	e067      	b.n	800b144 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b074:	4b75      	ldr	r3, [pc, #468]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	099b      	lsrs	r3, r3, #6
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b080:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800b084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b08e:	2300      	movs	r3, #0
 800b090:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b092:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800b096:	4622      	mov	r2, r4
 800b098:	462b      	mov	r3, r5
 800b09a:	f04f 0000 	mov.w	r0, #0
 800b09e:	f04f 0100 	mov.w	r1, #0
 800b0a2:	0159      	lsls	r1, r3, #5
 800b0a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b0a8:	0150      	lsls	r0, r2, #5
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	1a51      	subs	r1, r2, r1
 800b0b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	eb63 0301 	sbc.w	r3, r3, r1
 800b0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0bc:	f04f 0200 	mov.w	r2, #0
 800b0c0:	f04f 0300 	mov.w	r3, #0
 800b0c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	018b      	lsls	r3, r1, #6
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	018a      	lsls	r2, r1, #6
 800b0d6:	4641      	mov	r1, r8
 800b0d8:	ebb2 0a01 	subs.w	sl, r2, r1
 800b0dc:	4649      	mov	r1, r9
 800b0de:	eb63 0b01 	sbc.w	fp, r3, r1
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0f6:	4692      	mov	sl, r2
 800b0f8:	469b      	mov	fp, r3
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	eb1a 0303 	adds.w	r3, sl, r3
 800b100:	623b      	str	r3, [r7, #32]
 800b102:	462b      	mov	r3, r5
 800b104:	eb4b 0303 	adc.w	r3, fp, r3
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
 800b10a:	f04f 0200 	mov.w	r2, #0
 800b10e:	f04f 0300 	mov.w	r3, #0
 800b112:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b116:	4629      	mov	r1, r5
 800b118:	028b      	lsls	r3, r1, #10
 800b11a:	4621      	mov	r1, r4
 800b11c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b120:	4621      	mov	r1, r4
 800b122:	028a      	lsls	r2, r1, #10
 800b124:	4610      	mov	r0, r2
 800b126:	4619      	mov	r1, r3
 800b128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b12c:	2200      	movs	r2, #0
 800b12e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b130:	677a      	str	r2, [r7, #116]	@ 0x74
 800b132:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800b136:	f7f5 ff05 	bl	8000f44 <__aeabi_uldivmod>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4613      	mov	r3, r2
 800b140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b144:	4b41      	ldr	r3, [pc, #260]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	0c1b      	lsrs	r3, r3, #16
 800b14a:	f003 0303 	and.w	r3, r3, #3
 800b14e:	3301      	adds	r3, #1
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800b156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b15a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b166:	e0eb      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b168:	4b38      	ldr	r3, [pc, #224]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b174:	4b35      	ldr	r3, [pc, #212]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d06b      	beq.n	800b258 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b180:	4b32      	ldr	r3, [pc, #200]	@ (800b24c <HAL_RCC_GetSysClockFreq+0x354>)
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	099b      	lsrs	r3, r3, #6
 800b186:	2200      	movs	r2, #0
 800b188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b18a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b18c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b192:	663b      	str	r3, [r7, #96]	@ 0x60
 800b194:	2300      	movs	r3, #0
 800b196:	667b      	str	r3, [r7, #100]	@ 0x64
 800b198:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b19c:	4622      	mov	r2, r4
 800b19e:	462b      	mov	r3, r5
 800b1a0:	f04f 0000 	mov.w	r0, #0
 800b1a4:	f04f 0100 	mov.w	r1, #0
 800b1a8:	0159      	lsls	r1, r3, #5
 800b1aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b1ae:	0150      	lsls	r0, r2, #5
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	1a51      	subs	r1, r2, r1
 800b1b8:	61b9      	str	r1, [r7, #24]
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	eb63 0301 	sbc.w	r3, r3, r1
 800b1c0:	61fb      	str	r3, [r7, #28]
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	018b      	lsls	r3, r1, #6
 800b1d2:	4651      	mov	r1, sl
 800b1d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b1d8:	4651      	mov	r1, sl
 800b1da:	018a      	lsls	r2, r1, #6
 800b1dc:	4651      	mov	r1, sl
 800b1de:	ebb2 0801 	subs.w	r8, r2, r1
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	eb63 0901 	sbc.w	r9, r3, r1
 800b1e8:	f04f 0200 	mov.w	r2, #0
 800b1ec:	f04f 0300 	mov.w	r3, #0
 800b1f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1fc:	4690      	mov	r8, r2
 800b1fe:	4699      	mov	r9, r3
 800b200:	4623      	mov	r3, r4
 800b202:	eb18 0303 	adds.w	r3, r8, r3
 800b206:	613b      	str	r3, [r7, #16]
 800b208:	462b      	mov	r3, r5
 800b20a:	eb49 0303 	adc.w	r3, r9, r3
 800b20e:	617b      	str	r3, [r7, #20]
 800b210:	f04f 0200 	mov.w	r2, #0
 800b214:	f04f 0300 	mov.w	r3, #0
 800b218:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b21c:	4629      	mov	r1, r5
 800b21e:	024b      	lsls	r3, r1, #9
 800b220:	4621      	mov	r1, r4
 800b222:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b226:	4621      	mov	r1, r4
 800b228:	024a      	lsls	r2, r1, #9
 800b22a:	4610      	mov	r0, r2
 800b22c:	4619      	mov	r1, r3
 800b22e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b232:	2200      	movs	r2, #0
 800b234:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b236:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b238:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b23c:	f7f5 fe82 	bl	8000f44 <__aeabi_uldivmod>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	4613      	mov	r3, r2
 800b246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b24a:	e065      	b.n	800b318 <HAL_RCC_GetSysClockFreq+0x420>
 800b24c:	40023800 	.word	0x40023800
 800b250:	00f42400 	.word	0x00f42400
 800b254:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b258:	4b3d      	ldr	r3, [pc, #244]	@ (800b350 <HAL_RCC_GetSysClockFreq+0x458>)
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	099b      	lsrs	r3, r3, #6
 800b25e:	2200      	movs	r2, #0
 800b260:	4618      	mov	r0, r3
 800b262:	4611      	mov	r1, r2
 800b264:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b268:	653b      	str	r3, [r7, #80]	@ 0x50
 800b26a:	2300      	movs	r3, #0
 800b26c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b26e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800b272:	4642      	mov	r2, r8
 800b274:	464b      	mov	r3, r9
 800b276:	f04f 0000 	mov.w	r0, #0
 800b27a:	f04f 0100 	mov.w	r1, #0
 800b27e:	0159      	lsls	r1, r3, #5
 800b280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b284:	0150      	lsls	r0, r2, #5
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4641      	mov	r1, r8
 800b28c:	1a51      	subs	r1, r2, r1
 800b28e:	60b9      	str	r1, [r7, #8]
 800b290:	4649      	mov	r1, r9
 800b292:	eb63 0301 	sbc.w	r3, r3, r1
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	f04f 0200 	mov.w	r2, #0
 800b29c:	f04f 0300 	mov.w	r3, #0
 800b2a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b2a4:	4659      	mov	r1, fp
 800b2a6:	018b      	lsls	r3, r1, #6
 800b2a8:	4651      	mov	r1, sl
 800b2aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b2ae:	4651      	mov	r1, sl
 800b2b0:	018a      	lsls	r2, r1, #6
 800b2b2:	4651      	mov	r1, sl
 800b2b4:	1a54      	subs	r4, r2, r1
 800b2b6:	4659      	mov	r1, fp
 800b2b8:	eb63 0501 	sbc.w	r5, r3, r1
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	00eb      	lsls	r3, r5, #3
 800b2c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2ca:	00e2      	lsls	r2, r4, #3
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	461d      	mov	r5, r3
 800b2d0:	4643      	mov	r3, r8
 800b2d2:	18e3      	adds	r3, r4, r3
 800b2d4:	603b      	str	r3, [r7, #0]
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	eb45 0303 	adc.w	r3, r5, r3
 800b2dc:	607b      	str	r3, [r7, #4]
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	028b      	lsls	r3, r1, #10
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	028a      	lsls	r2, r1, #10
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b300:	2200      	movs	r2, #0
 800b302:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b304:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b306:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b30a:	f7f5 fe1b 	bl	8000f44 <__aeabi_uldivmod>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4613      	mov	r3, r2
 800b314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b318:	4b0d      	ldr	r3, [pc, #52]	@ (800b350 <HAL_RCC_GetSysClockFreq+0x458>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	0f1b      	lsrs	r3, r3, #28
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800b326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b32a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b332:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b336:	e003      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b338:	4b06      	ldr	r3, [pc, #24]	@ (800b354 <HAL_RCC_GetSysClockFreq+0x45c>)
 800b33a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800b33e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b340:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800b344:	4618      	mov	r0, r3
 800b346:	37b8      	adds	r7, #184	@ 0xb8
 800b348:	46bd      	mov	sp, r7
 800b34a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b34e:	bf00      	nop
 800b350:	40023800 	.word	0x40023800
 800b354:	00f42400 	.word	0x00f42400

0800b358 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e28d      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8083 	beq.w	800b47e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b378:	4b94      	ldr	r3, [pc, #592]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f003 030c 	and.w	r3, r3, #12
 800b380:	2b04      	cmp	r3, #4
 800b382:	d019      	beq.n	800b3b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800b384:	4b91      	ldr	r3, [pc, #580]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f003 030c 	and.w	r3, r3, #12
        || \
 800b38c:	2b08      	cmp	r3, #8
 800b38e:	d106      	bne.n	800b39e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800b390:	4b8e      	ldr	r3, [pc, #568]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b39c:	d00c      	beq.n	800b3b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b39e:	4b8b      	ldr	r3, [pc, #556]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800b3a6:	2b0c      	cmp	r3, #12
 800b3a8:	d112      	bne.n	800b3d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3aa:	4b88      	ldr	r3, [pc, #544]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3b6:	d10b      	bne.n	800b3d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3b8:	4b84      	ldr	r3, [pc, #528]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05b      	beq.n	800b47c <HAL_RCC_OscConfig+0x124>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d157      	bne.n	800b47c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e25a      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3d8:	d106      	bne.n	800b3e8 <HAL_RCC_OscConfig+0x90>
 800b3da:	4b7c      	ldr	r3, [pc, #496]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a7b      	ldr	r2, [pc, #492]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	e01d      	b.n	800b424 <HAL_RCC_OscConfig+0xcc>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b3f0:	d10c      	bne.n	800b40c <HAL_RCC_OscConfig+0xb4>
 800b3f2:	4b76      	ldr	r3, [pc, #472]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a75      	ldr	r2, [pc, #468]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b3f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	4b73      	ldr	r3, [pc, #460]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a72      	ldr	r2, [pc, #456]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	e00b      	b.n	800b424 <HAL_RCC_OscConfig+0xcc>
 800b40c:	4b6f      	ldr	r3, [pc, #444]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a6e      	ldr	r2, [pc, #440]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	4b6c      	ldr	r3, [pc, #432]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a6b      	ldr	r2, [pc, #428]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b41e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d013      	beq.n	800b454 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b42c:	f7fc ff88 	bl	8008340 <HAL_GetTick>
 800b430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b432:	e008      	b.n	800b446 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b434:	f7fc ff84 	bl	8008340 <HAL_GetTick>
 800b438:	4602      	mov	r2, r0
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	2b64      	cmp	r3, #100	@ 0x64
 800b440:	d901      	bls.n	800b446 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e21f      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b446:	4b61      	ldr	r3, [pc, #388]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0f0      	beq.n	800b434 <HAL_RCC_OscConfig+0xdc>
 800b452:	e014      	b.n	800b47e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b454:	f7fc ff74 	bl	8008340 <HAL_GetTick>
 800b458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b45a:	e008      	b.n	800b46e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b45c:	f7fc ff70 	bl	8008340 <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	2b64      	cmp	r3, #100	@ 0x64
 800b468:	d901      	bls.n	800b46e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e20b      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b46e:	4b57      	ldr	r3, [pc, #348]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1f0      	bne.n	800b45c <HAL_RCC_OscConfig+0x104>
 800b47a:	e000      	b.n	800b47e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b47c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d06f      	beq.n	800b56a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b48a:	4b50      	ldr	r3, [pc, #320]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f003 030c 	and.w	r3, r3, #12
 800b492:	2b00      	cmp	r3, #0
 800b494:	d017      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b496:	4b4d      	ldr	r3, [pc, #308]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 030c 	and.w	r3, r3, #12
        || \
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d105      	bne.n	800b4ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b4a2:	4b4a      	ldr	r3, [pc, #296]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00b      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4ae:	4b47      	ldr	r3, [pc, #284]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800b4b6:	2b0c      	cmp	r3, #12
 800b4b8:	d11c      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4ba:	4b44      	ldr	r3, [pc, #272]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d116      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4c6:	4b41      	ldr	r3, [pc, #260]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d005      	beq.n	800b4de <HAL_RCC_OscConfig+0x186>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d001      	beq.n	800b4de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e1d3      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4de:	4b3b      	ldr	r3, [pc, #236]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	4937      	ldr	r1, [pc, #220]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4f2:	e03a      	b.n	800b56a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d020      	beq.n	800b53e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4fc:	4b34      	ldr	r3, [pc, #208]	@ (800b5d0 <HAL_RCC_OscConfig+0x278>)
 800b4fe:	2201      	movs	r2, #1
 800b500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b502:	f7fc ff1d 	bl	8008340 <HAL_GetTick>
 800b506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b508:	e008      	b.n	800b51c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b50a:	f7fc ff19 	bl	8008340 <HAL_GetTick>
 800b50e:	4602      	mov	r2, r0
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	2b02      	cmp	r3, #2
 800b516:	d901      	bls.n	800b51c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b518:	2303      	movs	r3, #3
 800b51a:	e1b4      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b51c:	4b2b      	ldr	r3, [pc, #172]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0302 	and.w	r3, r3, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0f0      	beq.n	800b50a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b528:	4b28      	ldr	r3, [pc, #160]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	4925      	ldr	r1, [pc, #148]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	600b      	str	r3, [r1, #0]
 800b53c:	e015      	b.n	800b56a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b53e:	4b24      	ldr	r3, [pc, #144]	@ (800b5d0 <HAL_RCC_OscConfig+0x278>)
 800b540:	2200      	movs	r2, #0
 800b542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b544:	f7fc fefc 	bl	8008340 <HAL_GetTick>
 800b548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b54a:	e008      	b.n	800b55e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b54c:	f7fc fef8 	bl	8008340 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d901      	bls.n	800b55e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e193      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b55e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f0      	bne.n	800b54c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0308 	and.w	r3, r3, #8
 800b572:	2b00      	cmp	r3, #0
 800b574:	d036      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d016      	beq.n	800b5ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b57e:	4b15      	ldr	r3, [pc, #84]	@ (800b5d4 <HAL_RCC_OscConfig+0x27c>)
 800b580:	2201      	movs	r2, #1
 800b582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b584:	f7fc fedc 	bl	8008340 <HAL_GetTick>
 800b588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b58a:	e008      	b.n	800b59e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b58c:	f7fc fed8 	bl	8008340 <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	2b02      	cmp	r3, #2
 800b598:	d901      	bls.n	800b59e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e173      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b59e:	4b0b      	ldr	r3, [pc, #44]	@ (800b5cc <HAL_RCC_OscConfig+0x274>)
 800b5a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0f0      	beq.n	800b58c <HAL_RCC_OscConfig+0x234>
 800b5aa:	e01b      	b.n	800b5e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5ac:	4b09      	ldr	r3, [pc, #36]	@ (800b5d4 <HAL_RCC_OscConfig+0x27c>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5b2:	f7fc fec5 	bl	8008340 <HAL_GetTick>
 800b5b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5b8:	e00e      	b.n	800b5d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5ba:	f7fc fec1 	bl	8008340 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d907      	bls.n	800b5d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e15c      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
 800b5cc:	40023800 	.word	0x40023800
 800b5d0:	42470000 	.word	0x42470000
 800b5d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5d8:	4b8a      	ldr	r3, [pc, #552]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b5da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1ea      	bne.n	800b5ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 0304 	and.w	r3, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8097 	beq.w	800b720 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5f6:	4b83      	ldr	r3, [pc, #524]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10f      	bne.n	800b622 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b602:	2300      	movs	r3, #0
 800b604:	60bb      	str	r3, [r7, #8]
 800b606:	4b7f      	ldr	r3, [pc, #508]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60a:	4a7e      	ldr	r2, [pc, #504]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b60c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b610:	6413      	str	r3, [r2, #64]	@ 0x40
 800b612:	4b7c      	ldr	r3, [pc, #496]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b61a:	60bb      	str	r3, [r7, #8]
 800b61c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b61e:	2301      	movs	r3, #1
 800b620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b622:	4b79      	ldr	r3, [pc, #484]	@ (800b808 <HAL_RCC_OscConfig+0x4b0>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d118      	bne.n	800b660 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b62e:	4b76      	ldr	r3, [pc, #472]	@ (800b808 <HAL_RCC_OscConfig+0x4b0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a75      	ldr	r2, [pc, #468]	@ (800b808 <HAL_RCC_OscConfig+0x4b0>)
 800b634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b63a:	f7fc fe81 	bl	8008340 <HAL_GetTick>
 800b63e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b640:	e008      	b.n	800b654 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b642:	f7fc fe7d 	bl	8008340 <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d901      	bls.n	800b654 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e118      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b654:	4b6c      	ldr	r3, [pc, #432]	@ (800b808 <HAL_RCC_OscConfig+0x4b0>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0f0      	beq.n	800b642 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d106      	bne.n	800b676 <HAL_RCC_OscConfig+0x31e>
 800b668:	4b66      	ldr	r3, [pc, #408]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b66c:	4a65      	ldr	r2, [pc, #404]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b66e:	f043 0301 	orr.w	r3, r3, #1
 800b672:	6713      	str	r3, [r2, #112]	@ 0x70
 800b674:	e01c      	b.n	800b6b0 <HAL_RCC_OscConfig+0x358>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	2b05      	cmp	r3, #5
 800b67c:	d10c      	bne.n	800b698 <HAL_RCC_OscConfig+0x340>
 800b67e:	4b61      	ldr	r3, [pc, #388]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b682:	4a60      	ldr	r2, [pc, #384]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b684:	f043 0304 	orr.w	r3, r3, #4
 800b688:	6713      	str	r3, [r2, #112]	@ 0x70
 800b68a:	4b5e      	ldr	r3, [pc, #376]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b68c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b68e:	4a5d      	ldr	r2, [pc, #372]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b690:	f043 0301 	orr.w	r3, r3, #1
 800b694:	6713      	str	r3, [r2, #112]	@ 0x70
 800b696:	e00b      	b.n	800b6b0 <HAL_RCC_OscConfig+0x358>
 800b698:	4b5a      	ldr	r3, [pc, #360]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b69a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b69c:	4a59      	ldr	r2, [pc, #356]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b69e:	f023 0301 	bic.w	r3, r3, #1
 800b6a2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6a4:	4b57      	ldr	r3, [pc, #348]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b6a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6a8:	4a56      	ldr	r2, [pc, #344]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b6aa:	f023 0304 	bic.w	r3, r3, #4
 800b6ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d015      	beq.n	800b6e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6b8:	f7fc fe42 	bl	8008340 <HAL_GetTick>
 800b6bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6be:	e00a      	b.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6c0:	f7fc fe3e 	bl	8008340 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d901      	bls.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e0d7      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6d6:	4b4b      	ldr	r3, [pc, #300]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0ee      	beq.n	800b6c0 <HAL_RCC_OscConfig+0x368>
 800b6e2:	e014      	b.n	800b70e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6e4:	f7fc fe2c 	bl	8008340 <HAL_GetTick>
 800b6e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6ea:	e00a      	b.n	800b702 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ec:	f7fc fe28 	bl	8008340 <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d901      	bls.n	800b702 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e0c1      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b702:	4b40      	ldr	r3, [pc, #256]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b706:	f003 0302 	and.w	r3, r3, #2
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1ee      	bne.n	800b6ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d105      	bne.n	800b720 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b714:	4b3b      	ldr	r3, [pc, #236]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b718:	4a3a      	ldr	r2, [pc, #232]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b71a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b71e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	f000 80ad 	beq.w	800b884 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b72a:	4b36      	ldr	r3, [pc, #216]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f003 030c 	and.w	r3, r3, #12
 800b732:	2b08      	cmp	r3, #8
 800b734:	d060      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d145      	bne.n	800b7ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b73e:	4b33      	ldr	r3, [pc, #204]	@ (800b80c <HAL_RCC_OscConfig+0x4b4>)
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b744:	f7fc fdfc 	bl	8008340 <HAL_GetTick>
 800b748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b74a:	e008      	b.n	800b75e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b74c:	f7fc fdf8 	bl	8008340 <HAL_GetTick>
 800b750:	4602      	mov	r2, r0
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b02      	cmp	r3, #2
 800b758:	d901      	bls.n	800b75e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e093      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b75e:	4b29      	ldr	r3, [pc, #164]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1f0      	bne.n	800b74c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	69da      	ldr	r2, [r3, #28]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b778:	019b      	lsls	r3, r3, #6
 800b77a:	431a      	orrs	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b780:	085b      	lsrs	r3, r3, #1
 800b782:	3b01      	subs	r3, #1
 800b784:	041b      	lsls	r3, r3, #16
 800b786:	431a      	orrs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78c:	061b      	lsls	r3, r3, #24
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b794:	071b      	lsls	r3, r3, #28
 800b796:	491b      	ldr	r1, [pc, #108]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b798:	4313      	orrs	r3, r2
 800b79a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b79c:	4b1b      	ldr	r3, [pc, #108]	@ (800b80c <HAL_RCC_OscConfig+0x4b4>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7a2:	f7fc fdcd 	bl	8008340 <HAL_GetTick>
 800b7a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7a8:	e008      	b.n	800b7bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7aa:	f7fc fdc9 	bl	8008340 <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d901      	bls.n	800b7bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e064      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7bc:	4b11      	ldr	r3, [pc, #68]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d0f0      	beq.n	800b7aa <HAL_RCC_OscConfig+0x452>
 800b7c8:	e05c      	b.n	800b884 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7ca:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <HAL_RCC_OscConfig+0x4b4>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d0:	f7fc fdb6 	bl	8008340 <HAL_GetTick>
 800b7d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7d6:	e008      	b.n	800b7ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7d8:	f7fc fdb2 	bl	8008340 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d901      	bls.n	800b7ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e04d      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7ea:	4b06      	ldr	r3, [pc, #24]	@ (800b804 <HAL_RCC_OscConfig+0x4ac>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1f0      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x480>
 800b7f6:	e045      	b.n	800b884 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d107      	bne.n	800b810 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e040      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
 800b804:	40023800 	.word	0x40023800
 800b808:	40007000 	.word	0x40007000
 800b80c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b810:	4b1f      	ldr	r3, [pc, #124]	@ (800b890 <HAL_RCC_OscConfig+0x538>)
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d030      	beq.n	800b880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b828:	429a      	cmp	r2, r3
 800b82a:	d129      	bne.n	800b880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b836:	429a      	cmp	r2, r3
 800b838:	d122      	bne.n	800b880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b840:	4013      	ands	r3, r2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b848:	4293      	cmp	r3, r2
 800b84a:	d119      	bne.n	800b880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b856:	085b      	lsrs	r3, r3, #1
 800b858:	3b01      	subs	r3, #1
 800b85a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d10f      	bne.n	800b880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d107      	bne.n	800b880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b87a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d001      	beq.n	800b884 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e000      	b.n	800b886 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	40023800 	.word	0x40023800

0800b894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e041      	b.n	800b92a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7fb ff34 	bl	8007728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	f000 fa7e 	bl	800bdd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b01      	cmp	r3, #1
 800b946:	d001      	beq.n	800b94c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e04e      	b.n	800b9ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f042 0201 	orr.w	r2, r2, #1
 800b962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a23      	ldr	r2, [pc, #140]	@ (800b9f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d022      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b976:	d01d      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a1f      	ldr	r2, [pc, #124]	@ (800b9fc <HAL_TIM_Base_Start_IT+0xc8>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d018      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a1e      	ldr	r2, [pc, #120]	@ (800ba00 <HAL_TIM_Base_Start_IT+0xcc>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d013      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a1c      	ldr	r2, [pc, #112]	@ (800ba04 <HAL_TIM_Base_Start_IT+0xd0>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00e      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a1b      	ldr	r2, [pc, #108]	@ (800ba08 <HAL_TIM_Base_Start_IT+0xd4>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d009      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a19      	ldr	r2, [pc, #100]	@ (800ba0c <HAL_TIM_Base_Start_IT+0xd8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d004      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a18      	ldr	r2, [pc, #96]	@ (800ba10 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d111      	bne.n	800b9d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	f003 0307 	and.w	r3, r3, #7
 800b9be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b06      	cmp	r3, #6
 800b9c4:	d010      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f042 0201 	orr.w	r2, r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d6:	e007      	b.n	800b9e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f042 0201 	orr.w	r2, r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3714      	adds	r7, #20
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	40000400 	.word	0x40000400
 800ba00:	40000800 	.word	0x40000800
 800ba04:	40000c00 	.word	0x40000c00
 800ba08:	40010400 	.word	0x40010400
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	40001800 	.word	0x40001800

0800ba14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d020      	beq.n	800ba78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f003 0302 	and.w	r3, r3, #2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01b      	beq.n	800ba78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f06f 0202 	mvn.w	r2, #2
 800ba48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	f003 0303 	and.w	r3, r3, #3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f999 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800ba64:	e005      	b.n	800ba72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f98b 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f99c 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f003 0304 	and.w	r3, r3, #4
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d020      	beq.n	800bac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f003 0304 	and.w	r3, r3, #4
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01b      	beq.n	800bac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f06f 0204 	mvn.w	r2, #4
 800ba94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2202      	movs	r2, #2
 800ba9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f973 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800bab0:	e005      	b.n	800babe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f965 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f976 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d020      	beq.n	800bb10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d01b      	beq.n	800bb10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f06f 0208 	mvn.w	r2, #8
 800bae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2204      	movs	r2, #4
 800bae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f94d 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800bafc:	e005      	b.n	800bb0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f93f 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f950 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f003 0310 	and.w	r3, r3, #16
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d020      	beq.n	800bb5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d01b      	beq.n	800bb5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f06f 0210 	mvn.w	r2, #16
 800bb2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2208      	movs	r2, #8
 800bb32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f927 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800bb48:	e005      	b.n	800bb56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f919 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f92a 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00c      	beq.n	800bb80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f06f 0201 	mvn.w	r2, #1
 800bb78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7f9 fb56 	bl	800522c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00c      	beq.n	800bba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bb9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fade 	bl	800c160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00c      	beq.n	800bbc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d007      	beq.n	800bbc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f8fb 	bl	800bdbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00c      	beq.n	800bbec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f06f 0220 	mvn.w	r2, #32
 800bbe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fab0 	bl	800c14c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbec:	bf00      	nop
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d101      	bne.n	800bc10 <HAL_TIM_ConfigClockSource+0x1c>
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	e0b4      	b.n	800bd7a <HAL_TIM_ConfigClockSource+0x186>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bc2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc48:	d03e      	beq.n	800bcc8 <HAL_TIM_ConfigClockSource+0xd4>
 800bc4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc4e:	f200 8087 	bhi.w	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc56:	f000 8086 	beq.w	800bd66 <HAL_TIM_ConfigClockSource+0x172>
 800bc5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc5e:	d87f      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc60:	2b70      	cmp	r3, #112	@ 0x70
 800bc62:	d01a      	beq.n	800bc9a <HAL_TIM_ConfigClockSource+0xa6>
 800bc64:	2b70      	cmp	r3, #112	@ 0x70
 800bc66:	d87b      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc68:	2b60      	cmp	r3, #96	@ 0x60
 800bc6a:	d050      	beq.n	800bd0e <HAL_TIM_ConfigClockSource+0x11a>
 800bc6c:	2b60      	cmp	r3, #96	@ 0x60
 800bc6e:	d877      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc70:	2b50      	cmp	r3, #80	@ 0x50
 800bc72:	d03c      	beq.n	800bcee <HAL_TIM_ConfigClockSource+0xfa>
 800bc74:	2b50      	cmp	r3, #80	@ 0x50
 800bc76:	d873      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc78:	2b40      	cmp	r3, #64	@ 0x40
 800bc7a:	d058      	beq.n	800bd2e <HAL_TIM_ConfigClockSource+0x13a>
 800bc7c:	2b40      	cmp	r3, #64	@ 0x40
 800bc7e:	d86f      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc80:	2b30      	cmp	r3, #48	@ 0x30
 800bc82:	d064      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc84:	2b30      	cmp	r3, #48	@ 0x30
 800bc86:	d86b      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc88:	2b20      	cmp	r3, #32
 800bc8a:	d060      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	d867      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d05c      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc94:	2b10      	cmp	r3, #16
 800bc96:	d05a      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc98:	e062      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcaa:	f000 f9b3 	bl	800c014 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bcbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	609a      	str	r2, [r3, #8]
      break;
 800bcc6:	e04f      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcd8:	f000 f99c 	bl	800c014 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bcea:	609a      	str	r2, [r3, #8]
      break;
 800bcec:	e03c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f000 f910 	bl	800bf20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2150      	movs	r1, #80	@ 0x50
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f969 	bl	800bfde <TIM_ITRx_SetConfig>
      break;
 800bd0c:	e02c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f000 f92f 	bl	800bf7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2160      	movs	r1, #96	@ 0x60
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 f959 	bl	800bfde <TIM_ITRx_SetConfig>
      break;
 800bd2c:	e01c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f000 f8f0 	bl	800bf20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2140      	movs	r1, #64	@ 0x40
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 f949 	bl	800bfde <TIM_ITRx_SetConfig>
      break;
 800bd4c:	e00c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f000 f940 	bl	800bfde <TIM_ITRx_SetConfig>
      break;
 800bd5e:	e003      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
      break;
 800bd64:	e000      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd8a:	bf00      	nop
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdb2:	bf00      	nop
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a43      	ldr	r2, [pc, #268]	@ (800bef4 <TIM_Base_SetConfig+0x120>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d013      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdf2:	d00f      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a40      	ldr	r2, [pc, #256]	@ (800bef8 <TIM_Base_SetConfig+0x124>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00b      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a3f      	ldr	r2, [pc, #252]	@ (800befc <TIM_Base_SetConfig+0x128>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d007      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a3e      	ldr	r2, [pc, #248]	@ (800bf00 <TIM_Base_SetConfig+0x12c>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d003      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a3d      	ldr	r2, [pc, #244]	@ (800bf04 <TIM_Base_SetConfig+0x130>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d108      	bne.n	800be26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a32      	ldr	r2, [pc, #200]	@ (800bef4 <TIM_Base_SetConfig+0x120>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d02b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be34:	d027      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a2f      	ldr	r2, [pc, #188]	@ (800bef8 <TIM_Base_SetConfig+0x124>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d023      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a2e      	ldr	r2, [pc, #184]	@ (800befc <TIM_Base_SetConfig+0x128>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d01f      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a2d      	ldr	r2, [pc, #180]	@ (800bf00 <TIM_Base_SetConfig+0x12c>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d01b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a2c      	ldr	r2, [pc, #176]	@ (800bf04 <TIM_Base_SetConfig+0x130>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d017      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a2b      	ldr	r2, [pc, #172]	@ (800bf08 <TIM_Base_SetConfig+0x134>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d013      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a2a      	ldr	r2, [pc, #168]	@ (800bf0c <TIM_Base_SetConfig+0x138>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00f      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a29      	ldr	r2, [pc, #164]	@ (800bf10 <TIM_Base_SetConfig+0x13c>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a28      	ldr	r2, [pc, #160]	@ (800bf14 <TIM_Base_SetConfig+0x140>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d007      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a27      	ldr	r2, [pc, #156]	@ (800bf18 <TIM_Base_SetConfig+0x144>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d003      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a26      	ldr	r2, [pc, #152]	@ (800bf1c <TIM_Base_SetConfig+0x148>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d108      	bne.n	800be98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	4313      	orrs	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a0e      	ldr	r2, [pc, #56]	@ (800bef4 <TIM_Base_SetConfig+0x120>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d003      	beq.n	800bec6 <TIM_Base_SetConfig+0xf2>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a10      	ldr	r2, [pc, #64]	@ (800bf04 <TIM_Base_SetConfig+0x130>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d103      	bne.n	800bece <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	691a      	ldr	r2, [r3, #16]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f043 0204 	orr.w	r2, r3, #4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2201      	movs	r2, #1
 800bede:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	601a      	str	r2, [r3, #0]
}
 800bee6:	bf00      	nop
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	40010000 	.word	0x40010000
 800bef8:	40000400 	.word	0x40000400
 800befc:	40000800 	.word	0x40000800
 800bf00:	40000c00 	.word	0x40000c00
 800bf04:	40010400 	.word	0x40010400
 800bf08:	40014000 	.word	0x40014000
 800bf0c:	40014400 	.word	0x40014400
 800bf10:	40014800 	.word	0x40014800
 800bf14:	40001800 	.word	0x40001800
 800bf18:	40001c00 	.word	0x40001c00
 800bf1c:	40002000 	.word	0x40002000

0800bf20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	f023 0201 	bic.w	r2, r3, #1
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f023 030a 	bic.w	r3, r3, #10
 800bf5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	621a      	str	r2, [r3, #32]
}
 800bf72:	bf00      	nop
 800bf74:	371c      	adds	r7, #28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b087      	sub	sp, #28
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	60f8      	str	r0, [r7, #12]
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	f023 0210 	bic.w	r2, r3, #16
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bfa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	031b      	lsls	r3, r3, #12
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bfba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	621a      	str	r2, [r3, #32]
}
 800bfd2:	bf00      	nop
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	f043 0307 	orr.w	r3, r3, #7
 800c000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	609a      	str	r2, [r3, #8]
}
 800c008:	bf00      	nop
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c02e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	021a      	lsls	r2, r3, #8
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	431a      	orrs	r2, r3
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	4313      	orrs	r3, r2
 800c040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	609a      	str	r2, [r3, #8]
}
 800c048:	bf00      	nop
 800c04a:	371c      	adds	r7, #28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c064:	2b01      	cmp	r3, #1
 800c066:	d101      	bne.n	800c06c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c068:	2302      	movs	r3, #2
 800c06a:	e05a      	b.n	800c122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2202      	movs	r2, #2
 800c078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a21      	ldr	r2, [pc, #132]	@ (800c130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d022      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b8:	d01d      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a1d      	ldr	r2, [pc, #116]	@ (800c134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d018      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d013      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a1a      	ldr	r2, [pc, #104]	@ (800c13c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d00e      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a18      	ldr	r2, [pc, #96]	@ (800c140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d009      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a17      	ldr	r2, [pc, #92]	@ (800c144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d004      	beq.n	800c0f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a15      	ldr	r2, [pc, #84]	@ (800c148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d10c      	bne.n	800c110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	4313      	orrs	r3, r2
 800c106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	40010000 	.word	0x40010000
 800c134:	40000400 	.word	0x40000400
 800c138:	40000800 	.word	0x40000800
 800c13c:	40000c00 	.word	0x40000c00
 800c140:	40010400 	.word	0x40010400
 800c144:	40014000 	.word	0x40014000
 800c148:	40001800 	.word	0x40001800

0800c14c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e042      	b.n	800c20c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fb faea 	bl	8007774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2224      	movs	r2, #36	@ 0x24
 800c1a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c1b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f001 f879 	bl	800d2b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	691a      	ldr	r2, [r3, #16]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	695a      	ldr	r2, [r3, #20]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68da      	ldr	r2, [r3, #12]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2220      	movs	r2, #32
 800c200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b08a      	sub	sp, #40	@ 0x28
 800c218:	af02      	add	r7, sp, #8
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c224:	2300      	movs	r3, #0
 800c226:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b20      	cmp	r3, #32
 800c232:	d175      	bne.n	800c320 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <HAL_UART_Transmit+0x2c>
 800c23a:	88fb      	ldrh	r3, [r7, #6]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e06e      	b.n	800c322 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2221      	movs	r2, #33	@ 0x21
 800c24e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c252:	f7fc f875 	bl	8008340 <HAL_GetTick>
 800c256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	88fa      	ldrh	r2, [r7, #6]
 800c25c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	88fa      	ldrh	r2, [r7, #6]
 800c262:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c26c:	d108      	bne.n	800c280 <HAL_UART_Transmit+0x6c>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d104      	bne.n	800c280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	e003      	b.n	800c288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c288:	e02e      	b.n	800c2e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2200      	movs	r2, #0
 800c292:	2180      	movs	r1, #128	@ 0x80
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 fd4a 	bl	800cd2e <UART_WaitOnFlagUntilTimeout>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e03a      	b.n	800c322 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10b      	bne.n	800c2ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	3302      	adds	r3, #2
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	e007      	b.n	800c2da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1cb      	bne.n	800c28a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2140      	movs	r1, #64	@ 0x40
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 fd16 	bl	800cd2e <UART_WaitOnFlagUntilTimeout>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d005      	beq.n	800c314 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c310:	2303      	movs	r3, #3
 800c312:	e006      	b.n	800c322 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2220      	movs	r2, #32
 800c318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e000      	b.n	800c322 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c320:	2302      	movs	r3, #2
  }
}
 800c322:	4618      	mov	r0, r3
 800c324:	3720      	adds	r7, #32
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08c      	sub	sp, #48	@ 0x30
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c340:	b2db      	uxtb	r3, r3
 800c342:	2b20      	cmp	r3, #32
 800c344:	d162      	bne.n	800c40c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <HAL_UART_Transmit_DMA+0x26>
 800c34c:	88fb      	ldrh	r3, [r7, #6]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c352:	2301      	movs	r3, #1
 800c354:	e05b      	b.n	800c40e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	88fa      	ldrh	r2, [r7, #6]
 800c360:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	88fa      	ldrh	r2, [r7, #6]
 800c366:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2221      	movs	r2, #33	@ 0x21
 800c372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37a:	4a27      	ldr	r2, [pc, #156]	@ (800c418 <HAL_UART_Transmit_DMA+0xec>)
 800c37c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c382:	4a26      	ldr	r2, [pc, #152]	@ (800c41c <HAL_UART_Transmit_DMA+0xf0>)
 800c384:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38a:	4a25      	ldr	r2, [pc, #148]	@ (800c420 <HAL_UART_Transmit_DMA+0xf4>)
 800c38c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c392:	2200      	movs	r2, #0
 800c394:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c396:	f107 0308 	add.w	r3, r7, #8
 800c39a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	88fb      	ldrh	r3, [r7, #6]
 800c3ae:	f7fc fe0f 	bl	8008fd0 <HAL_DMA_Start_IT>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2210      	movs	r2, #16
 800c3bc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e021      	b.n	800c40e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3314      	adds	r3, #20
 800c3da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	e853 3f00 	ldrex	r3, [r3]
 800c3e2:	617b      	str	r3, [r7, #20]
   return(result);
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3314      	adds	r3, #20
 800c3f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3f4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	6a39      	ldr	r1, [r7, #32]
 800c3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	61fb      	str	r3, [r7, #28]
   return(result);
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e5      	bne.n	800c3d4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	e000      	b.n	800c40e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800c40c:	2302      	movs	r3, #2
  }
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3730      	adds	r7, #48	@ 0x30
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	0800ca7d 	.word	0x0800ca7d
 800c41c:	0800cb17 	.word	0x0800cb17
 800c420:	0800cc9b 	.word	0x0800cc9b

0800c424 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08c      	sub	sp, #48	@ 0x30
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	4613      	mov	r3, r2
 800c430:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b20      	cmp	r3, #32
 800c43c:	d146      	bne.n	800c4cc <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800c444:	88fb      	ldrh	r3, [r7, #6]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e03f      	b.n	800c4ce <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2201      	movs	r2, #1
 800c452:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	461a      	mov	r2, r3
 800c45e:	68b9      	ldr	r1, [r7, #8]
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 fcbd 	bl	800cde0 <UART_Start_Receive_DMA>
 800c466:	4603      	mov	r3, r0
 800c468:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c470:	2b01      	cmp	r3, #1
 800c472:	d125      	bne.n	800c4c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c474:	2300      	movs	r3, #0
 800c476:	613b      	str	r3, [r7, #16]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	613b      	str	r3, [r7, #16]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	330c      	adds	r3, #12
 800c490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	617b      	str	r3, [r7, #20]
   return(result);
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f043 0310 	orr.w	r3, r3, #16
 800c4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ae:	6a39      	ldr	r1, [r7, #32]
 800c4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4b2:	e841 2300 	strex	r3, r2, [r1]
 800c4b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1e5      	bne.n	800c48a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800c4be:	e002      	b.n	800c4c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800c4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4ca:	e000      	b.n	800c4ce <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800c4cc:	2302      	movs	r3, #2
  }
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3730      	adds	r7, #48	@ 0x30
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b0ba      	sub	sp, #232	@ 0xe8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c504:	2300      	movs	r3, #0
 800c506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c50e:	f003 030f 	and.w	r3, r3, #15
 800c512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10f      	bne.n	800c53e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c522:	f003 0320 	and.w	r3, r3, #32
 800c526:	2b00      	cmp	r3, #0
 800c528:	d009      	beq.n	800c53e <HAL_UART_IRQHandler+0x66>
 800c52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c52e:	f003 0320 	and.w	r3, r3, #32
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fdfc 	bl	800d134 <UART_Receive_IT>
      return;
 800c53c:	e273      	b.n	800ca26 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c53e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 80de 	beq.w	800c704 <HAL_UART_IRQHandler+0x22c>
 800c548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	d106      	bne.n	800c562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 80d1 	beq.w	800c704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00b      	beq.n	800c586 <HAL_UART_IRQHandler+0xae>
 800c56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c576:	2b00      	cmp	r3, #0
 800c578:	d005      	beq.n	800c586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57e:	f043 0201 	orr.w	r2, r3, #1
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c58a:	f003 0304 	and.w	r3, r3, #4
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00b      	beq.n	800c5aa <HAL_UART_IRQHandler+0xd2>
 800c592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c596:	f003 0301 	and.w	r3, r3, #1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5a2:	f043 0202 	orr.w	r2, r3, #2
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00b      	beq.n	800c5ce <HAL_UART_IRQHandler+0xf6>
 800c5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c6:	f043 0204 	orr.w	r2, r3, #4
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5d2:	f003 0308 	and.w	r3, r3, #8
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d011      	beq.n	800c5fe <HAL_UART_IRQHandler+0x126>
 800c5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5de:	f003 0320 	and.w	r3, r3, #32
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d105      	bne.n	800c5f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c5e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d005      	beq.n	800c5fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f6:	f043 0208 	orr.w	r2, r3, #8
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 820a 	beq.w	800ca1c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c60c:	f003 0320 	and.w	r3, r3, #32
 800c610:	2b00      	cmp	r3, #0
 800c612:	d008      	beq.n	800c626 <HAL_UART_IRQHandler+0x14e>
 800c614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c618:	f003 0320 	and.w	r3, r3, #32
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fd87 	bl	800d134 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c630:	2b40      	cmp	r3, #64	@ 0x40
 800c632:	bf0c      	ite	eq
 800c634:	2301      	moveq	r3, #1
 800c636:	2300      	movne	r3, #0
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c642:	f003 0308 	and.w	r3, r3, #8
 800c646:	2b00      	cmp	r3, #0
 800c648:	d103      	bne.n	800c652 <HAL_UART_IRQHandler+0x17a>
 800c64a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d04f      	beq.n	800c6f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fc92 	bl	800cf7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c662:	2b40      	cmp	r3, #64	@ 0x40
 800c664:	d141      	bne.n	800c6ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3314      	adds	r3, #20
 800c66c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c67c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3314      	adds	r3, #20
 800c68e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c69e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c6aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1d9      	bne.n	800c666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d013      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6be:	4a8a      	ldr	r2, [pc, #552]	@ (800c8e8 <HAL_UART_IRQHandler+0x410>)
 800c6c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fc fd4a 	bl	8009160 <HAL_DMA_Abort_IT>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d016      	beq.n	800c700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e0:	e00e      	b.n	800c700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f9c0 	bl	800ca68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e8:	e00a      	b.n	800c700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f9bc 	bl	800ca68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6f0:	e006      	b.n	800c700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f9b8 	bl	800ca68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c6fe:	e18d      	b.n	800ca1c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c700:	bf00      	nop
    return;
 800c702:	e18b      	b.n	800ca1c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c708:	2b01      	cmp	r3, #1
 800c70a:	f040 8167 	bne.w	800c9dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c712:	f003 0310 	and.w	r3, r3, #16
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 8160 	beq.w	800c9dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c720:	f003 0310 	and.w	r3, r3, #16
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 8159 	beq.w	800c9dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c72a:	2300      	movs	r3, #0
 800c72c:	60bb      	str	r3, [r7, #8]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60bb      	str	r3, [r7, #8]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	60bb      	str	r3, [r7, #8]
 800c73e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c74a:	2b40      	cmp	r3, #64	@ 0x40
 800c74c:	f040 80ce 	bne.w	800c8ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c75c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 80a9 	beq.w	800c8b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c76a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c76e:	429a      	cmp	r2, r3
 800c770:	f080 80a2 	bcs.w	800c8b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c77a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c786:	f000 8088 	beq.w	800c89a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	330c      	adds	r3, #12
 800c790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c798:	e853 3f00 	ldrex	r3, [r3]
 800c79c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c7a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c7a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	330c      	adds	r3, #12
 800c7b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c7b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c7ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c7c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c7c6:	e841 2300 	strex	r3, r2, [r1]
 800c7ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c7ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1d9      	bne.n	800c78a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3314      	adds	r3, #20
 800c7dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c7e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7e8:	f023 0301 	bic.w	r3, r3, #1
 800c7ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3314      	adds	r3, #20
 800c7f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c80c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e1      	bne.n	800c7d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3314      	adds	r3, #20
 800c818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3314      	adds	r3, #20
 800c832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c838:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c83c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c83e:	e841 2300 	strex	r3, r2, [r1]
 800c842:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1e3      	bne.n	800c812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2220      	movs	r2, #32
 800c84e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	330c      	adds	r3, #12
 800c85e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c862:	e853 3f00 	ldrex	r3, [r3]
 800c866:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c86a:	f023 0310 	bic.w	r3, r3, #16
 800c86e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	330c      	adds	r3, #12
 800c878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c87c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c87e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c88a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e3      	bne.n	800c858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c894:	4618      	mov	r0, r3
 800c896:	f7fc fbf3 	bl	8009080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2202      	movs	r2, #2
 800c89e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7f8 fc8d 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c8b6:	e0b3      	b.n	800ca20 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c8bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	f040 80ad 	bne.w	800ca20 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8ca:	69db      	ldr	r3, [r3, #28]
 800c8cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8d0:	f040 80a6 	bne.w	800ca20 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7f8 fc75 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
      return;
 800c8e6:	e09b      	b.n	800ca20 <HAL_UART_IRQHandler+0x548>
 800c8e8:	0800d043 	.word	0x0800d043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c900:	b29b      	uxth	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 808e 	beq.w	800ca24 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f000 8089 	beq.w	800ca24 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	330c      	adds	r3, #12
 800c918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	330c      	adds	r3, #12
 800c932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c936:	647a      	str	r2, [r7, #68]	@ 0x44
 800c938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c93c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e3      	bne.n	800c912 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3314      	adds	r3, #20
 800c950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c954:	e853 3f00 	ldrex	r3, [r3]
 800c958:	623b      	str	r3, [r7, #32]
   return(result);
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	f023 0301 	bic.w	r3, r3, #1
 800c960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3314      	adds	r3, #20
 800c96a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c96e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c976:	e841 2300 	strex	r3, r2, [r1]
 800c97a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1e3      	bne.n	800c94a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2220      	movs	r2, #32
 800c986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	330c      	adds	r3, #12
 800c996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	e853 3f00 	ldrex	r3, [r3]
 800c99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0310 	bic.w	r3, r3, #16
 800c9a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	330c      	adds	r3, #12
 800c9b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c9b4:	61fa      	str	r2, [r7, #28]
 800c9b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b8:	69b9      	ldr	r1, [r7, #24]
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	e841 2300 	strex	r3, r2, [r1]
 800c9c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1e3      	bne.n	800c990 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7f8 fbfb 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c9da:	e023      	b.n	800ca24 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d009      	beq.n	800c9fc <HAL_UART_IRQHandler+0x524>
 800c9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d003      	beq.n	800c9fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fb35 	bl	800d064 <UART_Transmit_IT>
    return;
 800c9fa:	e014      	b.n	800ca26 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00e      	beq.n	800ca26 <HAL_UART_IRQHandler+0x54e>
 800ca08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d008      	beq.n	800ca26 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fb75 	bl	800d104 <UART_EndTransmit_IT>
    return;
 800ca1a:	e004      	b.n	800ca26 <HAL_UART_IRQHandler+0x54e>
    return;
 800ca1c:	bf00      	nop
 800ca1e:	e002      	b.n	800ca26 <HAL_UART_IRQHandler+0x54e>
      return;
 800ca20:	bf00      	nop
 800ca22:	e000      	b.n	800ca26 <HAL_UART_IRQHandler+0x54e>
      return;
 800ca24:	bf00      	nop
  }
}
 800ca26:	37e8      	adds	r7, #232	@ 0xe8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca70:	bf00      	nop
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b090      	sub	sp, #64	@ 0x40
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d137      	bne.n	800cb08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ca98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3314      	adds	r3, #20
 800caa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	e853 3f00 	ldrex	r3, [r3]
 800caac:	623b      	str	r3, [r7, #32]
   return(result);
 800caae:	6a3b      	ldr	r3, [r7, #32]
 800cab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3314      	adds	r3, #20
 800cabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cabe:	633a      	str	r2, [r7, #48]	@ 0x30
 800cac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac6:	e841 2300 	strex	r3, r2, [r1]
 800caca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1e5      	bne.n	800ca9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	330c      	adds	r3, #12
 800cad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	e853 3f00 	ldrex	r3, [r3]
 800cae0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cae8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	330c      	adds	r3, #12
 800caf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caf2:	61fa      	str	r2, [r7, #28]
 800caf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf6:	69b9      	ldr	r1, [r7, #24]
 800caf8:	69fa      	ldr	r2, [r7, #28]
 800cafa:	e841 2300 	strex	r3, r2, [r1]
 800cafe:	617b      	str	r3, [r7, #20]
   return(result);
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1e5      	bne.n	800cad2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb06:	e002      	b.n	800cb0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cb08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cb0a:	f7f8 fba7 	bl	800525c <HAL_UART_TxCpltCallback>
}
 800cb0e:	bf00      	nop
 800cb10:	3740      	adds	r7, #64	@ 0x40
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b084      	sub	sp, #16
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f7ff ff81 	bl	800ca2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb2a:	bf00      	nop
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b09c      	sub	sp, #112	@ 0x70
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d172      	bne.n	800cc34 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cb4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb50:	2200      	movs	r2, #0
 800cb52:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	330c      	adds	r3, #12
 800cb5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	330c      	adds	r3, #12
 800cb72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb74:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cb76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e5      	bne.n	800cb54 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3314      	adds	r3, #20
 800cb8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb92:	e853 3f00 	ldrex	r3, [r3]
 800cb96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9a:	f023 0301 	bic.w	r3, r3, #1
 800cb9e:	667b      	str	r3, [r7, #100]	@ 0x64
 800cba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3314      	adds	r3, #20
 800cba6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cba8:	647a      	str	r2, [r7, #68]	@ 0x44
 800cbaa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cbae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbb0:	e841 2300 	strex	r3, r2, [r1]
 800cbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e5      	bne.n	800cb88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3314      	adds	r3, #20
 800cbc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	e853 3f00 	ldrex	r3, [r3]
 800cbca:	623b      	str	r3, [r7, #32]
   return(result);
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbd2:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3314      	adds	r3, #20
 800cbda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbdc:	633a      	str	r2, [r7, #48]	@ 0x30
 800cbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbe4:	e841 2300 	strex	r3, r2, [r1]
 800cbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e5      	bne.n	800cbbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cbf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d119      	bne.n	800cc34 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	330c      	adds	r3, #12
 800cc06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	e853 3f00 	ldrex	r3, [r3]
 800cc0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f023 0310 	bic.w	r3, r3, #16
 800cc16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc20:	61fa      	str	r2, [r7, #28]
 800cc22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc24:	69b9      	ldr	r1, [r7, #24]
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	e841 2300 	strex	r3, r2, [r1]
 800cc2c:	617b      	str	r3, [r7, #20]
   return(result);
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e5      	bne.n	800cc00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc36:	2200      	movs	r2, #0
 800cc38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d106      	bne.n	800cc50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc46:	4619      	mov	r1, r3
 800cc48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc4a:	f7f8 fac1 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc4e:	e002      	b.n	800cc56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cc50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc52:	f7ff fef5 	bl	800ca40 <HAL_UART_RxCpltCallback>
}
 800cc56:	bf00      	nop
 800cc58:	3770      	adds	r7, #112	@ 0x70
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b084      	sub	sp, #16
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d108      	bne.n	800cc8c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc7e:	085b      	lsrs	r3, r3, #1
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	4619      	mov	r1, r3
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7f8 faa3 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc8a:	e002      	b.n	800cc92 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fee1 	bl	800ca54 <HAL_UART_RxHalfCpltCallback>
}
 800cc92:	bf00      	nop
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccb6:	2b80      	cmp	r3, #128	@ 0x80
 800ccb8:	bf0c      	ite	eq
 800ccba:	2301      	moveq	r3, #1
 800ccbc:	2300      	movne	r3, #0
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b21      	cmp	r3, #33	@ 0x21
 800cccc:	d108      	bne.n	800cce0 <UART_DMAError+0x46>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d005      	beq.n	800cce0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ccda:	68b8      	ldr	r0, [r7, #8]
 800ccdc:	f000 f926 	bl	800cf2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccea:	2b40      	cmp	r3, #64	@ 0x40
 800ccec:	bf0c      	ite	eq
 800ccee:	2301      	moveq	r3, #1
 800ccf0:	2300      	movne	r3, #0
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b22      	cmp	r3, #34	@ 0x22
 800cd00:	d108      	bne.n	800cd14 <UART_DMAError+0x7a>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d005      	beq.n	800cd14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800cd0e:	68b8      	ldr	r0, [r7, #8]
 800cd10:	f000 f934 	bl	800cf7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd18:	f043 0210 	orr.w	r2, r3, #16
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd20:	68b8      	ldr	r0, [r7, #8]
 800cd22:	f7ff fea1 	bl	800ca68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b086      	sub	sp, #24
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60f8      	str	r0, [r7, #12]
 800cd36:	60b9      	str	r1, [r7, #8]
 800cd38:	603b      	str	r3, [r7, #0]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd3e:	e03b      	b.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd40:	6a3b      	ldr	r3, [r7, #32]
 800cd42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd46:	d037      	beq.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd48:	f7fb fafa 	bl	8008340 <HAL_GetTick>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	6a3a      	ldr	r2, [r7, #32]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d302      	bcc.n	800cd5e <UART_WaitOnFlagUntilTimeout+0x30>
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d101      	bne.n	800cd62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	e03a      	b.n	800cdd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d023      	beq.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b80      	cmp	r3, #128	@ 0x80
 800cd74:	d020      	beq.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	2b40      	cmp	r3, #64	@ 0x40
 800cd7a:	d01d      	beq.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 0308 	and.w	r3, r3, #8
 800cd86:	2b08      	cmp	r3, #8
 800cd88:	d116      	bne.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	617b      	str	r3, [r7, #20]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	617b      	str	r3, [r7, #20]
 800cd9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 f8eb 	bl	800cf7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2208      	movs	r2, #8
 800cdaa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e00f      	b.n	800cdd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	bf0c      	ite	eq
 800cdc8:	2301      	moveq	r3, #1
 800cdca:	2300      	movne	r3, #0
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	461a      	mov	r2, r3
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d0b4      	beq.n	800cd40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b098      	sub	sp, #96	@ 0x60
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	4613      	mov	r3, r2
 800cdec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	88fa      	ldrh	r2, [r7, #6]
 800cdf8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2222      	movs	r2, #34	@ 0x22
 800ce04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0c:	4a44      	ldr	r2, [pc, #272]	@ (800cf20 <UART_Start_Receive_DMA+0x140>)
 800ce0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce14:	4a43      	ldr	r2, [pc, #268]	@ (800cf24 <UART_Start_Receive_DMA+0x144>)
 800ce16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1c:	4a42      	ldr	r2, [pc, #264]	@ (800cf28 <UART_Start_Receive_DMA+0x148>)
 800ce1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce24:	2200      	movs	r2, #0
 800ce26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ce28:	f107 0308 	add.w	r3, r7, #8
 800ce2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	3304      	adds	r3, #4
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	88fb      	ldrh	r3, [r7, #6]
 800ce40:	f7fc f8c6 	bl	8008fd0 <HAL_DMA_Start_IT>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d008      	beq.n	800ce5c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2210      	movs	r2, #16
 800ce4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2220      	movs	r2, #32
 800ce54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e05d      	b.n	800cf18 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	613b      	str	r3, [r7, #16]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	613b      	str	r3, [r7, #16]
 800ce70:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d019      	beq.n	800ceae <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	330c      	adds	r3, #12
 800ce80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce84:	e853 3f00 	ldrex	r3, [r3]
 800ce88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce90:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	330c      	adds	r3, #12
 800ce98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce9a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ce9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800cea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cea2:	e841 2300 	strex	r3, r2, [r1]
 800cea6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1e5      	bne.n	800ce7a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3314      	adds	r3, #20
 800ceb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb8:	e853 3f00 	ldrex	r3, [r3]
 800cebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	f043 0301 	orr.w	r3, r3, #1
 800cec4:	657b      	str	r3, [r7, #84]	@ 0x54
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3314      	adds	r3, #20
 800cecc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cece:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ced0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ced4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ced6:	e841 2300 	strex	r3, r2, [r1]
 800ceda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1e5      	bne.n	800ceae <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	3314      	adds	r3, #20
 800cee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	e853 3f00 	ldrex	r3, [r3]
 800cef0:	617b      	str	r3, [r7, #20]
   return(result);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cef8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3314      	adds	r3, #20
 800cf00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf02:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	6a39      	ldr	r1, [r7, #32]
 800cf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e5      	bne.n	800cee2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3760      	adds	r7, #96	@ 0x60
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	0800cb33 	.word	0x0800cb33
 800cf24:	0800cc5f 	.word	0x0800cc5f
 800cf28:	0800cc9b 	.word	0x0800cc9b

0800cf2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b089      	sub	sp, #36	@ 0x24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	330c      	adds	r3, #12
 800cf3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	e853 3f00 	ldrex	r3, [r3]
 800cf42:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	330c      	adds	r3, #12
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	61ba      	str	r2, [r7, #24]
 800cf56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf58:	6979      	ldr	r1, [r7, #20]
 800cf5a:	69ba      	ldr	r2, [r7, #24]
 800cf5c:	e841 2300 	strex	r3, r2, [r1]
 800cf60:	613b      	str	r3, [r7, #16]
   return(result);
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e5      	bne.n	800cf34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800cf70:	bf00      	nop
 800cf72:	3724      	adds	r7, #36	@ 0x24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b095      	sub	sp, #84	@ 0x54
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	330c      	adds	r3, #12
 800cf8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf8e:	e853 3f00 	ldrex	r3, [r3]
 800cf92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	330c      	adds	r3, #12
 800cfa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cfa4:	643a      	str	r2, [r7, #64]	@ 0x40
 800cfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cfaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfac:	e841 2300 	strex	r3, r2, [r1]
 800cfb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1e5      	bne.n	800cf84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	e853 3f00 	ldrex	r3, [r3]
 800cfc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	f023 0301 	bic.w	r3, r3, #1
 800cfce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	3314      	adds	r3, #20
 800cfd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfe0:	e841 2300 	strex	r3, r2, [r1]
 800cfe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1e5      	bne.n	800cfb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d119      	bne.n	800d028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	330c      	adds	r3, #12
 800cffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	e853 3f00 	ldrex	r3, [r3]
 800d002:	60bb      	str	r3, [r7, #8]
   return(result);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	f023 0310 	bic.w	r3, r3, #16
 800d00a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	330c      	adds	r3, #12
 800d012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d014:	61ba      	str	r2, [r7, #24]
 800d016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d018:	6979      	ldr	r1, [r7, #20]
 800d01a:	69ba      	ldr	r2, [r7, #24]
 800d01c:	e841 2300 	strex	r3, r2, [r1]
 800d020:	613b      	str	r3, [r7, #16]
   return(result);
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1e5      	bne.n	800cff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2220      	movs	r2, #32
 800d02c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d036:	bf00      	nop
 800d038:	3754      	adds	r7, #84	@ 0x54
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d04e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff fd06 	bl	800ca68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b21      	cmp	r3, #33	@ 0x21
 800d076:	d13e      	bne.n	800d0f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d080:	d114      	bne.n	800d0ac <UART_Transmit_IT+0x48>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d110      	bne.n	800d0ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d09e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a1b      	ldr	r3, [r3, #32]
 800d0a4:	1c9a      	adds	r2, r3, #2
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	621a      	str	r2, [r3, #32]
 800d0aa:	e008      	b.n	800d0be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a1b      	ldr	r3, [r3, #32]
 800d0b0:	1c59      	adds	r1, r3, #1
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	6211      	str	r1, [r2, #32]
 800d0b6:	781a      	ldrb	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10f      	bne.n	800d0f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68da      	ldr	r2, [r3, #12]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68da      	ldr	r2, [r3, #12]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e000      	b.n	800d0f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0f6:	2302      	movs	r3, #2
  }
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d11a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2220      	movs	r2, #32
 800d120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7f8 f899 	bl	800525c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08c      	sub	sp, #48	@ 0x30
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800d13c:	2300      	movs	r3, #0
 800d13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800d140:	2300      	movs	r3, #0
 800d142:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b22      	cmp	r3, #34	@ 0x22
 800d14e:	f040 80aa 	bne.w	800d2a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d15a:	d115      	bne.n	800d188 <UART_Receive_IT+0x54>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d111      	bne.n	800d188 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d168:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	b29b      	uxth	r3, r3
 800d172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d176:	b29a      	uxth	r2, r3
 800d178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d180:	1c9a      	adds	r2, r3, #2
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	629a      	str	r2, [r3, #40]	@ 0x28
 800d186:	e024      	b.n	800d1d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d196:	d007      	beq.n	800d1a8 <UART_Receive_IT+0x74>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <UART_Receive_IT+0x82>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d106      	bne.n	800d1b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b2:	701a      	strb	r2, [r3, #0]
 800d1b4:	e008      	b.n	800d1c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d15d      	bne.n	800d2a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68da      	ldr	r2, [r3, #12]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0220 	bic.w	r2, r2, #32
 800d1f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	695a      	ldr	r2, [r3, #20]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f022 0201 	bic.w	r2, r2, #1
 800d214:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d135      	bne.n	800d298 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	330c      	adds	r3, #12
 800d238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	e853 3f00 	ldrex	r3, [r3]
 800d240:	613b      	str	r3, [r7, #16]
   return(result);
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f023 0310 	bic.w	r3, r3, #16
 800d248:	627b      	str	r3, [r7, #36]	@ 0x24
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	330c      	adds	r3, #12
 800d250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d252:	623a      	str	r2, [r7, #32]
 800d254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d256:	69f9      	ldr	r1, [r7, #28]
 800d258:	6a3a      	ldr	r2, [r7, #32]
 800d25a:	e841 2300 	strex	r3, r2, [r1]
 800d25e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1e5      	bne.n	800d232 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b10      	cmp	r3, #16
 800d272:	d10a      	bne.n	800d28a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	60fb      	str	r3, [r7, #12]
 800d288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d28e:	4619      	mov	r1, r3
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7f7 ff9d 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
 800d296:	e002      	b.n	800d29e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff fbd1 	bl	800ca40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e002      	b.n	800d2a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e000      	b.n	800d2a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d2a6:	2302      	movs	r3, #2
  }
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3730      	adds	r7, #48	@ 0x30
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2b4:	b0c0      	sub	sp, #256	@ 0x100
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2cc:	68d9      	ldr	r1, [r3, #12]
 800d2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	ea40 0301 	orr.w	r3, r0, r1
 800d2d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d2da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2de:	689a      	ldr	r2, [r3, #8]
 800d2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ec:	695b      	ldr	r3, [r3, #20]
 800d2ee:	431a      	orrs	r2, r3
 800d2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d308:	f021 010c 	bic.w	r1, r1, #12
 800d30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d316:	430b      	orrs	r3, r1
 800d318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d32a:	6999      	ldr	r1, [r3, #24]
 800d32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	ea40 0301 	orr.w	r3, r0, r1
 800d336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	4b8f      	ldr	r3, [pc, #572]	@ (800d57c <UART_SetConfig+0x2cc>)
 800d340:	429a      	cmp	r2, r3
 800d342:	d005      	beq.n	800d350 <UART_SetConfig+0xa0>
 800d344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	4b8d      	ldr	r3, [pc, #564]	@ (800d580 <UART_SetConfig+0x2d0>)
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d104      	bne.n	800d35a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d350:	f7fd fdbe 	bl	800aed0 <HAL_RCC_GetPCLK2Freq>
 800d354:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d358:	e003      	b.n	800d362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d35a:	f7fd fda5 	bl	800aea8 <HAL_RCC_GetPCLK1Freq>
 800d35e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d36c:	f040 810c 	bne.w	800d588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d374:	2200      	movs	r2, #0
 800d376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d37a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d37e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d382:	4622      	mov	r2, r4
 800d384:	462b      	mov	r3, r5
 800d386:	1891      	adds	r1, r2, r2
 800d388:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d38a:	415b      	adcs	r3, r3
 800d38c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d38e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d392:	4621      	mov	r1, r4
 800d394:	eb12 0801 	adds.w	r8, r2, r1
 800d398:	4629      	mov	r1, r5
 800d39a:	eb43 0901 	adc.w	r9, r3, r1
 800d39e:	f04f 0200 	mov.w	r2, #0
 800d3a2:	f04f 0300 	mov.w	r3, #0
 800d3a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d3aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d3ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d3b2:	4690      	mov	r8, r2
 800d3b4:	4699      	mov	r9, r3
 800d3b6:	4623      	mov	r3, r4
 800d3b8:	eb18 0303 	adds.w	r3, r8, r3
 800d3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d3c0:	462b      	mov	r3, r5
 800d3c2:	eb49 0303 	adc.w	r3, r9, r3
 800d3c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d3d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d3da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d3de:	460b      	mov	r3, r1
 800d3e0:	18db      	adds	r3, r3, r3
 800d3e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	eb42 0303 	adc.w	r3, r2, r3
 800d3ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d3f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d3f4:	f7f3 fda6 	bl	8000f44 <__aeabi_uldivmod>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4b61      	ldr	r3, [pc, #388]	@ (800d584 <UART_SetConfig+0x2d4>)
 800d3fe:	fba3 2302 	umull	r2, r3, r3, r2
 800d402:	095b      	lsrs	r3, r3, #5
 800d404:	011c      	lsls	r4, r3, #4
 800d406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d40a:	2200      	movs	r2, #0
 800d40c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d410:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d418:	4642      	mov	r2, r8
 800d41a:	464b      	mov	r3, r9
 800d41c:	1891      	adds	r1, r2, r2
 800d41e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d420:	415b      	adcs	r3, r3
 800d422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d428:	4641      	mov	r1, r8
 800d42a:	eb12 0a01 	adds.w	sl, r2, r1
 800d42e:	4649      	mov	r1, r9
 800d430:	eb43 0b01 	adc.w	fp, r3, r1
 800d434:	f04f 0200 	mov.w	r2, #0
 800d438:	f04f 0300 	mov.w	r3, #0
 800d43c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d448:	4692      	mov	sl, r2
 800d44a:	469b      	mov	fp, r3
 800d44c:	4643      	mov	r3, r8
 800d44e:	eb1a 0303 	adds.w	r3, sl, r3
 800d452:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d456:	464b      	mov	r3, r9
 800d458:	eb4b 0303 	adc.w	r3, fp, r3
 800d45c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d46c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d474:	460b      	mov	r3, r1
 800d476:	18db      	adds	r3, r3, r3
 800d478:	643b      	str	r3, [r7, #64]	@ 0x40
 800d47a:	4613      	mov	r3, r2
 800d47c:	eb42 0303 	adc.w	r3, r2, r3
 800d480:	647b      	str	r3, [r7, #68]	@ 0x44
 800d482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d48a:	f7f3 fd5b 	bl	8000f44 <__aeabi_uldivmod>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4611      	mov	r1, r2
 800d494:	4b3b      	ldr	r3, [pc, #236]	@ (800d584 <UART_SetConfig+0x2d4>)
 800d496:	fba3 2301 	umull	r2, r3, r3, r1
 800d49a:	095b      	lsrs	r3, r3, #5
 800d49c:	2264      	movs	r2, #100	@ 0x64
 800d49e:	fb02 f303 	mul.w	r3, r2, r3
 800d4a2:	1acb      	subs	r3, r1, r3
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d4aa:	4b36      	ldr	r3, [pc, #216]	@ (800d584 <UART_SetConfig+0x2d4>)
 800d4ac:	fba3 2302 	umull	r2, r3, r3, r2
 800d4b0:	095b      	lsrs	r3, r3, #5
 800d4b2:	005b      	lsls	r3, r3, #1
 800d4b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d4b8:	441c      	add	r4, r3
 800d4ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d4c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d4cc:	4642      	mov	r2, r8
 800d4ce:	464b      	mov	r3, r9
 800d4d0:	1891      	adds	r1, r2, r2
 800d4d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d4d4:	415b      	adcs	r3, r3
 800d4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d4dc:	4641      	mov	r1, r8
 800d4de:	1851      	adds	r1, r2, r1
 800d4e0:	6339      	str	r1, [r7, #48]	@ 0x30
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	414b      	adcs	r3, r1
 800d4e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e8:	f04f 0200 	mov.w	r2, #0
 800d4ec:	f04f 0300 	mov.w	r3, #0
 800d4f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d4f4:	4659      	mov	r1, fp
 800d4f6:	00cb      	lsls	r3, r1, #3
 800d4f8:	4651      	mov	r1, sl
 800d4fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4fe:	4651      	mov	r1, sl
 800d500:	00ca      	lsls	r2, r1, #3
 800d502:	4610      	mov	r0, r2
 800d504:	4619      	mov	r1, r3
 800d506:	4603      	mov	r3, r0
 800d508:	4642      	mov	r2, r8
 800d50a:	189b      	adds	r3, r3, r2
 800d50c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d510:	464b      	mov	r3, r9
 800d512:	460a      	mov	r2, r1
 800d514:	eb42 0303 	adc.w	r3, r2, r3
 800d518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d528:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d52c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d530:	460b      	mov	r3, r1
 800d532:	18db      	adds	r3, r3, r3
 800d534:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d536:	4613      	mov	r3, r2
 800d538:	eb42 0303 	adc.w	r3, r2, r3
 800d53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d53e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d546:	f7f3 fcfd 	bl	8000f44 <__aeabi_uldivmod>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4b0d      	ldr	r3, [pc, #52]	@ (800d584 <UART_SetConfig+0x2d4>)
 800d550:	fba3 1302 	umull	r1, r3, r3, r2
 800d554:	095b      	lsrs	r3, r3, #5
 800d556:	2164      	movs	r1, #100	@ 0x64
 800d558:	fb01 f303 	mul.w	r3, r1, r3
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	00db      	lsls	r3, r3, #3
 800d560:	3332      	adds	r3, #50	@ 0x32
 800d562:	4a08      	ldr	r2, [pc, #32]	@ (800d584 <UART_SetConfig+0x2d4>)
 800d564:	fba2 2303 	umull	r2, r3, r2, r3
 800d568:	095b      	lsrs	r3, r3, #5
 800d56a:	f003 0207 	and.w	r2, r3, #7
 800d56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4422      	add	r2, r4
 800d576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d578:	e106      	b.n	800d788 <UART_SetConfig+0x4d8>
 800d57a:	bf00      	nop
 800d57c:	40011000 	.word	0x40011000
 800d580:	40011400 	.word	0x40011400
 800d584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d58c:	2200      	movs	r2, #0
 800d58e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d592:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d59a:	4642      	mov	r2, r8
 800d59c:	464b      	mov	r3, r9
 800d59e:	1891      	adds	r1, r2, r2
 800d5a0:	6239      	str	r1, [r7, #32]
 800d5a2:	415b      	adcs	r3, r3
 800d5a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	1854      	adds	r4, r2, r1
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	eb43 0501 	adc.w	r5, r3, r1
 800d5b4:	f04f 0200 	mov.w	r2, #0
 800d5b8:	f04f 0300 	mov.w	r3, #0
 800d5bc:	00eb      	lsls	r3, r5, #3
 800d5be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d5c2:	00e2      	lsls	r2, r4, #3
 800d5c4:	4614      	mov	r4, r2
 800d5c6:	461d      	mov	r5, r3
 800d5c8:	4643      	mov	r3, r8
 800d5ca:	18e3      	adds	r3, r4, r3
 800d5cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5d0:	464b      	mov	r3, r9
 800d5d2:	eb45 0303 	adc.w	r3, r5, r3
 800d5d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d5e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d5ea:	f04f 0200 	mov.w	r2, #0
 800d5ee:	f04f 0300 	mov.w	r3, #0
 800d5f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	008b      	lsls	r3, r1, #2
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d600:	4621      	mov	r1, r4
 800d602:	008a      	lsls	r2, r1, #2
 800d604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d608:	f7f3 fc9c 	bl	8000f44 <__aeabi_uldivmod>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4b60      	ldr	r3, [pc, #384]	@ (800d794 <UART_SetConfig+0x4e4>)
 800d612:	fba3 2302 	umull	r2, r3, r3, r2
 800d616:	095b      	lsrs	r3, r3, #5
 800d618:	011c      	lsls	r4, r3, #4
 800d61a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d61e:	2200      	movs	r2, #0
 800d620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d624:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d62c:	4642      	mov	r2, r8
 800d62e:	464b      	mov	r3, r9
 800d630:	1891      	adds	r1, r2, r2
 800d632:	61b9      	str	r1, [r7, #24]
 800d634:	415b      	adcs	r3, r3
 800d636:	61fb      	str	r3, [r7, #28]
 800d638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d63c:	4641      	mov	r1, r8
 800d63e:	1851      	adds	r1, r2, r1
 800d640:	6139      	str	r1, [r7, #16]
 800d642:	4649      	mov	r1, r9
 800d644:	414b      	adcs	r3, r1
 800d646:	617b      	str	r3, [r7, #20]
 800d648:	f04f 0200 	mov.w	r2, #0
 800d64c:	f04f 0300 	mov.w	r3, #0
 800d650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d654:	4659      	mov	r1, fp
 800d656:	00cb      	lsls	r3, r1, #3
 800d658:	4651      	mov	r1, sl
 800d65a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d65e:	4651      	mov	r1, sl
 800d660:	00ca      	lsls	r2, r1, #3
 800d662:	4610      	mov	r0, r2
 800d664:	4619      	mov	r1, r3
 800d666:	4603      	mov	r3, r0
 800d668:	4642      	mov	r2, r8
 800d66a:	189b      	adds	r3, r3, r2
 800d66c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d670:	464b      	mov	r3, r9
 800d672:	460a      	mov	r2, r1
 800d674:	eb42 0303 	adc.w	r3, r2, r3
 800d678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d686:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d688:	f04f 0200 	mov.w	r2, #0
 800d68c:	f04f 0300 	mov.w	r3, #0
 800d690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d694:	4649      	mov	r1, r9
 800d696:	008b      	lsls	r3, r1, #2
 800d698:	4641      	mov	r1, r8
 800d69a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d69e:	4641      	mov	r1, r8
 800d6a0:	008a      	lsls	r2, r1, #2
 800d6a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d6a6:	f7f3 fc4d 	bl	8000f44 <__aeabi_uldivmod>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4b38      	ldr	r3, [pc, #224]	@ (800d794 <UART_SetConfig+0x4e4>)
 800d6b2:	fba3 2301 	umull	r2, r3, r3, r1
 800d6b6:	095b      	lsrs	r3, r3, #5
 800d6b8:	2264      	movs	r2, #100	@ 0x64
 800d6ba:	fb02 f303 	mul.w	r3, r2, r3
 800d6be:	1acb      	subs	r3, r1, r3
 800d6c0:	011b      	lsls	r3, r3, #4
 800d6c2:	3332      	adds	r3, #50	@ 0x32
 800d6c4:	4a33      	ldr	r2, [pc, #204]	@ (800d794 <UART_SetConfig+0x4e4>)
 800d6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6ca:	095b      	lsrs	r3, r3, #5
 800d6cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6d0:	441c      	add	r4, r3
 800d6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d6da:	677a      	str	r2, [r7, #116]	@ 0x74
 800d6dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d6e0:	4642      	mov	r2, r8
 800d6e2:	464b      	mov	r3, r9
 800d6e4:	1891      	adds	r1, r2, r2
 800d6e6:	60b9      	str	r1, [r7, #8]
 800d6e8:	415b      	adcs	r3, r3
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6f0:	4641      	mov	r1, r8
 800d6f2:	1851      	adds	r1, r2, r1
 800d6f4:	6039      	str	r1, [r7, #0]
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	414b      	adcs	r3, r1
 800d6fa:	607b      	str	r3, [r7, #4]
 800d6fc:	f04f 0200 	mov.w	r2, #0
 800d700:	f04f 0300 	mov.w	r3, #0
 800d704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d708:	4659      	mov	r1, fp
 800d70a:	00cb      	lsls	r3, r1, #3
 800d70c:	4651      	mov	r1, sl
 800d70e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d712:	4651      	mov	r1, sl
 800d714:	00ca      	lsls	r2, r1, #3
 800d716:	4610      	mov	r0, r2
 800d718:	4619      	mov	r1, r3
 800d71a:	4603      	mov	r3, r0
 800d71c:	4642      	mov	r2, r8
 800d71e:	189b      	adds	r3, r3, r2
 800d720:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d722:	464b      	mov	r3, r9
 800d724:	460a      	mov	r2, r1
 800d726:	eb42 0303 	adc.w	r3, r2, r3
 800d72a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	663b      	str	r3, [r7, #96]	@ 0x60
 800d736:	667a      	str	r2, [r7, #100]	@ 0x64
 800d738:	f04f 0200 	mov.w	r2, #0
 800d73c:	f04f 0300 	mov.w	r3, #0
 800d740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d744:	4649      	mov	r1, r9
 800d746:	008b      	lsls	r3, r1, #2
 800d748:	4641      	mov	r1, r8
 800d74a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d74e:	4641      	mov	r1, r8
 800d750:	008a      	lsls	r2, r1, #2
 800d752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d756:	f7f3 fbf5 	bl	8000f44 <__aeabi_uldivmod>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	4b0d      	ldr	r3, [pc, #52]	@ (800d794 <UART_SetConfig+0x4e4>)
 800d760:	fba3 1302 	umull	r1, r3, r3, r2
 800d764:	095b      	lsrs	r3, r3, #5
 800d766:	2164      	movs	r1, #100	@ 0x64
 800d768:	fb01 f303 	mul.w	r3, r1, r3
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	011b      	lsls	r3, r3, #4
 800d770:	3332      	adds	r3, #50	@ 0x32
 800d772:	4a08      	ldr	r2, [pc, #32]	@ (800d794 <UART_SetConfig+0x4e4>)
 800d774:	fba2 2303 	umull	r2, r3, r2, r3
 800d778:	095b      	lsrs	r3, r3, #5
 800d77a:	f003 020f 	and.w	r2, r3, #15
 800d77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4422      	add	r2, r4
 800d786:	609a      	str	r2, [r3, #8]
}
 800d788:	bf00      	nop
 800d78a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d78e:	46bd      	mov	sp, r7
 800d790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d794:	51eb851f 	.word	0x51eb851f

0800d798 <calloc>:
 800d798:	4b02      	ldr	r3, [pc, #8]	@ (800d7a4 <calloc+0xc>)
 800d79a:	460a      	mov	r2, r1
 800d79c:	4601      	mov	r1, r0
 800d79e:	6818      	ldr	r0, [r3, #0]
 800d7a0:	f000 b802 	b.w	800d7a8 <_calloc_r>
 800d7a4:	20000058 	.word	0x20000058

0800d7a8 <_calloc_r>:
 800d7a8:	b570      	push	{r4, r5, r6, lr}
 800d7aa:	fba1 5402 	umull	r5, r4, r1, r2
 800d7ae:	b934      	cbnz	r4, 800d7be <_calloc_r+0x16>
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	f000 faf9 	bl	800dda8 <_malloc_r>
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	b928      	cbnz	r0, 800d7c6 <_calloc_r+0x1e>
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	bd70      	pop	{r4, r5, r6, pc}
 800d7be:	220c      	movs	r2, #12
 800d7c0:	6002      	str	r2, [r0, #0]
 800d7c2:	2600      	movs	r6, #0
 800d7c4:	e7f9      	b.n	800d7ba <_calloc_r+0x12>
 800d7c6:	462a      	mov	r2, r5
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	f000 fdd7 	bl	800e37c <memset>
 800d7ce:	e7f4      	b.n	800d7ba <_calloc_r+0x12>

0800d7d0 <__cvt>:
 800d7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d4:	ec57 6b10 	vmov	r6, r7, d0
 800d7d8:	2f00      	cmp	r7, #0
 800d7da:	460c      	mov	r4, r1
 800d7dc:	4619      	mov	r1, r3
 800d7de:	463b      	mov	r3, r7
 800d7e0:	bfbb      	ittet	lt
 800d7e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d7e6:	461f      	movlt	r7, r3
 800d7e8:	2300      	movge	r3, #0
 800d7ea:	232d      	movlt	r3, #45	@ 0x2d
 800d7ec:	700b      	strb	r3, [r1, #0]
 800d7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d7f4:	4691      	mov	r9, r2
 800d7f6:	f023 0820 	bic.w	r8, r3, #32
 800d7fa:	bfbc      	itt	lt
 800d7fc:	4632      	movlt	r2, r6
 800d7fe:	4616      	movlt	r6, r2
 800d800:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d804:	d005      	beq.n	800d812 <__cvt+0x42>
 800d806:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d80a:	d100      	bne.n	800d80e <__cvt+0x3e>
 800d80c:	3401      	adds	r4, #1
 800d80e:	2102      	movs	r1, #2
 800d810:	e000      	b.n	800d814 <__cvt+0x44>
 800d812:	2103      	movs	r1, #3
 800d814:	ab03      	add	r3, sp, #12
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	ab02      	add	r3, sp, #8
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	ec47 6b10 	vmov	d0, r6, r7
 800d820:	4653      	mov	r3, sl
 800d822:	4622      	mov	r2, r4
 800d824:	f000 fe8c 	bl	800e540 <_dtoa_r>
 800d828:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d82c:	4605      	mov	r5, r0
 800d82e:	d119      	bne.n	800d864 <__cvt+0x94>
 800d830:	f019 0f01 	tst.w	r9, #1
 800d834:	d00e      	beq.n	800d854 <__cvt+0x84>
 800d836:	eb00 0904 	add.w	r9, r0, r4
 800d83a:	2200      	movs	r2, #0
 800d83c:	2300      	movs	r3, #0
 800d83e:	4630      	mov	r0, r6
 800d840:	4639      	mov	r1, r7
 800d842:	f7f3 f961 	bl	8000b08 <__aeabi_dcmpeq>
 800d846:	b108      	cbz	r0, 800d84c <__cvt+0x7c>
 800d848:	f8cd 900c 	str.w	r9, [sp, #12]
 800d84c:	2230      	movs	r2, #48	@ 0x30
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	454b      	cmp	r3, r9
 800d852:	d31e      	bcc.n	800d892 <__cvt+0xc2>
 800d854:	9b03      	ldr	r3, [sp, #12]
 800d856:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d858:	1b5b      	subs	r3, r3, r5
 800d85a:	4628      	mov	r0, r5
 800d85c:	6013      	str	r3, [r2, #0]
 800d85e:	b004      	add	sp, #16
 800d860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d864:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d868:	eb00 0904 	add.w	r9, r0, r4
 800d86c:	d1e5      	bne.n	800d83a <__cvt+0x6a>
 800d86e:	7803      	ldrb	r3, [r0, #0]
 800d870:	2b30      	cmp	r3, #48	@ 0x30
 800d872:	d10a      	bne.n	800d88a <__cvt+0xba>
 800d874:	2200      	movs	r2, #0
 800d876:	2300      	movs	r3, #0
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f3 f944 	bl	8000b08 <__aeabi_dcmpeq>
 800d880:	b918      	cbnz	r0, 800d88a <__cvt+0xba>
 800d882:	f1c4 0401 	rsb	r4, r4, #1
 800d886:	f8ca 4000 	str.w	r4, [sl]
 800d88a:	f8da 3000 	ldr.w	r3, [sl]
 800d88e:	4499      	add	r9, r3
 800d890:	e7d3      	b.n	800d83a <__cvt+0x6a>
 800d892:	1c59      	adds	r1, r3, #1
 800d894:	9103      	str	r1, [sp, #12]
 800d896:	701a      	strb	r2, [r3, #0]
 800d898:	e7d9      	b.n	800d84e <__cvt+0x7e>

0800d89a <__exponent>:
 800d89a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d89c:	2900      	cmp	r1, #0
 800d89e:	bfba      	itte	lt
 800d8a0:	4249      	neglt	r1, r1
 800d8a2:	232d      	movlt	r3, #45	@ 0x2d
 800d8a4:	232b      	movge	r3, #43	@ 0x2b
 800d8a6:	2909      	cmp	r1, #9
 800d8a8:	7002      	strb	r2, [r0, #0]
 800d8aa:	7043      	strb	r3, [r0, #1]
 800d8ac:	dd29      	ble.n	800d902 <__exponent+0x68>
 800d8ae:	f10d 0307 	add.w	r3, sp, #7
 800d8b2:	461d      	mov	r5, r3
 800d8b4:	270a      	movs	r7, #10
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d8bc:	fb07 1416 	mls	r4, r7, r6, r1
 800d8c0:	3430      	adds	r4, #48	@ 0x30
 800d8c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	2c63      	cmp	r4, #99	@ 0x63
 800d8ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	dcf1      	bgt.n	800d8b6 <__exponent+0x1c>
 800d8d2:	3130      	adds	r1, #48	@ 0x30
 800d8d4:	1e94      	subs	r4, r2, #2
 800d8d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d8da:	1c41      	adds	r1, r0, #1
 800d8dc:	4623      	mov	r3, r4
 800d8de:	42ab      	cmp	r3, r5
 800d8e0:	d30a      	bcc.n	800d8f8 <__exponent+0x5e>
 800d8e2:	f10d 0309 	add.w	r3, sp, #9
 800d8e6:	1a9b      	subs	r3, r3, r2
 800d8e8:	42ac      	cmp	r4, r5
 800d8ea:	bf88      	it	hi
 800d8ec:	2300      	movhi	r3, #0
 800d8ee:	3302      	adds	r3, #2
 800d8f0:	4403      	add	r3, r0
 800d8f2:	1a18      	subs	r0, r3, r0
 800d8f4:	b003      	add	sp, #12
 800d8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d8fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d900:	e7ed      	b.n	800d8de <__exponent+0x44>
 800d902:	2330      	movs	r3, #48	@ 0x30
 800d904:	3130      	adds	r1, #48	@ 0x30
 800d906:	7083      	strb	r3, [r0, #2]
 800d908:	70c1      	strb	r1, [r0, #3]
 800d90a:	1d03      	adds	r3, r0, #4
 800d90c:	e7f1      	b.n	800d8f2 <__exponent+0x58>
	...

0800d910 <_printf_float>:
 800d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	b08d      	sub	sp, #52	@ 0x34
 800d916:	460c      	mov	r4, r1
 800d918:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d91c:	4616      	mov	r6, r2
 800d91e:	461f      	mov	r7, r3
 800d920:	4605      	mov	r5, r0
 800d922:	f000 fd71 	bl	800e408 <_localeconv_r>
 800d926:	6803      	ldr	r3, [r0, #0]
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7f2 fcc0 	bl	80002b0 <strlen>
 800d930:	2300      	movs	r3, #0
 800d932:	930a      	str	r3, [sp, #40]	@ 0x28
 800d934:	f8d8 3000 	ldr.w	r3, [r8]
 800d938:	9005      	str	r0, [sp, #20]
 800d93a:	3307      	adds	r3, #7
 800d93c:	f023 0307 	bic.w	r3, r3, #7
 800d940:	f103 0208 	add.w	r2, r3, #8
 800d944:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d948:	f8d4 b000 	ldr.w	fp, [r4]
 800d94c:	f8c8 2000 	str.w	r2, [r8]
 800d950:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d954:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d958:	9307      	str	r3, [sp, #28]
 800d95a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d95e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d966:	4b9c      	ldr	r3, [pc, #624]	@ (800dbd8 <_printf_float+0x2c8>)
 800d968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d96c:	f7f3 f8fe 	bl	8000b6c <__aeabi_dcmpun>
 800d970:	bb70      	cbnz	r0, 800d9d0 <_printf_float+0xc0>
 800d972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d976:	4b98      	ldr	r3, [pc, #608]	@ (800dbd8 <_printf_float+0x2c8>)
 800d978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d97c:	f7f3 f8d8 	bl	8000b30 <__aeabi_dcmple>
 800d980:	bb30      	cbnz	r0, 800d9d0 <_printf_float+0xc0>
 800d982:	2200      	movs	r2, #0
 800d984:	2300      	movs	r3, #0
 800d986:	4640      	mov	r0, r8
 800d988:	4649      	mov	r1, r9
 800d98a:	f7f3 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800d98e:	b110      	cbz	r0, 800d996 <_printf_float+0x86>
 800d990:	232d      	movs	r3, #45	@ 0x2d
 800d992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d996:	4a91      	ldr	r2, [pc, #580]	@ (800dbdc <_printf_float+0x2cc>)
 800d998:	4b91      	ldr	r3, [pc, #580]	@ (800dbe0 <_printf_float+0x2d0>)
 800d99a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d99e:	bf8c      	ite	hi
 800d9a0:	4690      	movhi	r8, r2
 800d9a2:	4698      	movls	r8, r3
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	6123      	str	r3, [r4, #16]
 800d9a8:	f02b 0304 	bic.w	r3, fp, #4
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	f04f 0900 	mov.w	r9, #0
 800d9b2:	9700      	str	r7, [sp, #0]
 800d9b4:	4633      	mov	r3, r6
 800d9b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f000 fa74 	bl	800dea8 <_printf_common>
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	f040 808d 	bne.w	800dae0 <_printf_float+0x1d0>
 800d9c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9ca:	b00d      	add	sp, #52	@ 0x34
 800d9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	f7f3 f8c8 	bl	8000b6c <__aeabi_dcmpun>
 800d9dc:	b140      	cbz	r0, 800d9f0 <_printf_float+0xe0>
 800d9de:	464b      	mov	r3, r9
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	bfbc      	itt	lt
 800d9e4:	232d      	movlt	r3, #45	@ 0x2d
 800d9e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d9ea:	4a7e      	ldr	r2, [pc, #504]	@ (800dbe4 <_printf_float+0x2d4>)
 800d9ec:	4b7e      	ldr	r3, [pc, #504]	@ (800dbe8 <_printf_float+0x2d8>)
 800d9ee:	e7d4      	b.n	800d99a <_printf_float+0x8a>
 800d9f0:	6863      	ldr	r3, [r4, #4]
 800d9f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d9f6:	9206      	str	r2, [sp, #24]
 800d9f8:	1c5a      	adds	r2, r3, #1
 800d9fa:	d13b      	bne.n	800da74 <_printf_float+0x164>
 800d9fc:	2306      	movs	r3, #6
 800d9fe:	6063      	str	r3, [r4, #4]
 800da00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800da04:	2300      	movs	r3, #0
 800da06:	6022      	str	r2, [r4, #0]
 800da08:	9303      	str	r3, [sp, #12]
 800da0a:	ab0a      	add	r3, sp, #40	@ 0x28
 800da0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800da10:	ab09      	add	r3, sp, #36	@ 0x24
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	6861      	ldr	r1, [r4, #4]
 800da16:	ec49 8b10 	vmov	d0, r8, r9
 800da1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800da1e:	4628      	mov	r0, r5
 800da20:	f7ff fed6 	bl	800d7d0 <__cvt>
 800da24:	9b06      	ldr	r3, [sp, #24]
 800da26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da28:	2b47      	cmp	r3, #71	@ 0x47
 800da2a:	4680      	mov	r8, r0
 800da2c:	d129      	bne.n	800da82 <_printf_float+0x172>
 800da2e:	1cc8      	adds	r0, r1, #3
 800da30:	db02      	blt.n	800da38 <_printf_float+0x128>
 800da32:	6863      	ldr	r3, [r4, #4]
 800da34:	4299      	cmp	r1, r3
 800da36:	dd41      	ble.n	800dabc <_printf_float+0x1ac>
 800da38:	f1aa 0a02 	sub.w	sl, sl, #2
 800da3c:	fa5f fa8a 	uxtb.w	sl, sl
 800da40:	3901      	subs	r1, #1
 800da42:	4652      	mov	r2, sl
 800da44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da48:	9109      	str	r1, [sp, #36]	@ 0x24
 800da4a:	f7ff ff26 	bl	800d89a <__exponent>
 800da4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da50:	1813      	adds	r3, r2, r0
 800da52:	2a01      	cmp	r2, #1
 800da54:	4681      	mov	r9, r0
 800da56:	6123      	str	r3, [r4, #16]
 800da58:	dc02      	bgt.n	800da60 <_printf_float+0x150>
 800da5a:	6822      	ldr	r2, [r4, #0]
 800da5c:	07d2      	lsls	r2, r2, #31
 800da5e:	d501      	bpl.n	800da64 <_printf_float+0x154>
 800da60:	3301      	adds	r3, #1
 800da62:	6123      	str	r3, [r4, #16]
 800da64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d0a2      	beq.n	800d9b2 <_printf_float+0xa2>
 800da6c:	232d      	movs	r3, #45	@ 0x2d
 800da6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da72:	e79e      	b.n	800d9b2 <_printf_float+0xa2>
 800da74:	9a06      	ldr	r2, [sp, #24]
 800da76:	2a47      	cmp	r2, #71	@ 0x47
 800da78:	d1c2      	bne.n	800da00 <_printf_float+0xf0>
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1c0      	bne.n	800da00 <_printf_float+0xf0>
 800da7e:	2301      	movs	r3, #1
 800da80:	e7bd      	b.n	800d9fe <_printf_float+0xee>
 800da82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800da86:	d9db      	bls.n	800da40 <_printf_float+0x130>
 800da88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800da8c:	d118      	bne.n	800dac0 <_printf_float+0x1b0>
 800da8e:	2900      	cmp	r1, #0
 800da90:	6863      	ldr	r3, [r4, #4]
 800da92:	dd0b      	ble.n	800daac <_printf_float+0x19c>
 800da94:	6121      	str	r1, [r4, #16]
 800da96:	b913      	cbnz	r3, 800da9e <_printf_float+0x18e>
 800da98:	6822      	ldr	r2, [r4, #0]
 800da9a:	07d0      	lsls	r0, r2, #31
 800da9c:	d502      	bpl.n	800daa4 <_printf_float+0x194>
 800da9e:	3301      	adds	r3, #1
 800daa0:	440b      	add	r3, r1
 800daa2:	6123      	str	r3, [r4, #16]
 800daa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800daa6:	f04f 0900 	mov.w	r9, #0
 800daaa:	e7db      	b.n	800da64 <_printf_float+0x154>
 800daac:	b913      	cbnz	r3, 800dab4 <_printf_float+0x1a4>
 800daae:	6822      	ldr	r2, [r4, #0]
 800dab0:	07d2      	lsls	r2, r2, #31
 800dab2:	d501      	bpl.n	800dab8 <_printf_float+0x1a8>
 800dab4:	3302      	adds	r3, #2
 800dab6:	e7f4      	b.n	800daa2 <_printf_float+0x192>
 800dab8:	2301      	movs	r3, #1
 800daba:	e7f2      	b.n	800daa2 <_printf_float+0x192>
 800dabc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dac2:	4299      	cmp	r1, r3
 800dac4:	db05      	blt.n	800dad2 <_printf_float+0x1c2>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	6121      	str	r1, [r4, #16]
 800daca:	07d8      	lsls	r0, r3, #31
 800dacc:	d5ea      	bpl.n	800daa4 <_printf_float+0x194>
 800dace:	1c4b      	adds	r3, r1, #1
 800dad0:	e7e7      	b.n	800daa2 <_printf_float+0x192>
 800dad2:	2900      	cmp	r1, #0
 800dad4:	bfd4      	ite	le
 800dad6:	f1c1 0202 	rsble	r2, r1, #2
 800dada:	2201      	movgt	r2, #1
 800dadc:	4413      	add	r3, r2
 800dade:	e7e0      	b.n	800daa2 <_printf_float+0x192>
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	055a      	lsls	r2, r3, #21
 800dae4:	d407      	bmi.n	800daf6 <_printf_float+0x1e6>
 800dae6:	6923      	ldr	r3, [r4, #16]
 800dae8:	4642      	mov	r2, r8
 800daea:	4631      	mov	r1, r6
 800daec:	4628      	mov	r0, r5
 800daee:	47b8      	blx	r7
 800daf0:	3001      	adds	r0, #1
 800daf2:	d12b      	bne.n	800db4c <_printf_float+0x23c>
 800daf4:	e767      	b.n	800d9c6 <_printf_float+0xb6>
 800daf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dafa:	f240 80dd 	bls.w	800dcb8 <_printf_float+0x3a8>
 800dafe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db02:	2200      	movs	r2, #0
 800db04:	2300      	movs	r3, #0
 800db06:	f7f2 ffff 	bl	8000b08 <__aeabi_dcmpeq>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d033      	beq.n	800db76 <_printf_float+0x266>
 800db0e:	4a37      	ldr	r2, [pc, #220]	@ (800dbec <_printf_float+0x2dc>)
 800db10:	2301      	movs	r3, #1
 800db12:	4631      	mov	r1, r6
 800db14:	4628      	mov	r0, r5
 800db16:	47b8      	blx	r7
 800db18:	3001      	adds	r0, #1
 800db1a:	f43f af54 	beq.w	800d9c6 <_printf_float+0xb6>
 800db1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800db22:	4543      	cmp	r3, r8
 800db24:	db02      	blt.n	800db2c <_printf_float+0x21c>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	07d8      	lsls	r0, r3, #31
 800db2a:	d50f      	bpl.n	800db4c <_printf_float+0x23c>
 800db2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db30:	4631      	mov	r1, r6
 800db32:	4628      	mov	r0, r5
 800db34:	47b8      	blx	r7
 800db36:	3001      	adds	r0, #1
 800db38:	f43f af45 	beq.w	800d9c6 <_printf_float+0xb6>
 800db3c:	f04f 0900 	mov.w	r9, #0
 800db40:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800db44:	f104 0a1a 	add.w	sl, r4, #26
 800db48:	45c8      	cmp	r8, r9
 800db4a:	dc09      	bgt.n	800db60 <_printf_float+0x250>
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	079b      	lsls	r3, r3, #30
 800db50:	f100 8103 	bmi.w	800dd5a <_printf_float+0x44a>
 800db54:	68e0      	ldr	r0, [r4, #12]
 800db56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db58:	4298      	cmp	r0, r3
 800db5a:	bfb8      	it	lt
 800db5c:	4618      	movlt	r0, r3
 800db5e:	e734      	b.n	800d9ca <_printf_float+0xba>
 800db60:	2301      	movs	r3, #1
 800db62:	4652      	mov	r2, sl
 800db64:	4631      	mov	r1, r6
 800db66:	4628      	mov	r0, r5
 800db68:	47b8      	blx	r7
 800db6a:	3001      	adds	r0, #1
 800db6c:	f43f af2b 	beq.w	800d9c6 <_printf_float+0xb6>
 800db70:	f109 0901 	add.w	r9, r9, #1
 800db74:	e7e8      	b.n	800db48 <_printf_float+0x238>
 800db76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dc39      	bgt.n	800dbf0 <_printf_float+0x2e0>
 800db7c:	4a1b      	ldr	r2, [pc, #108]	@ (800dbec <_printf_float+0x2dc>)
 800db7e:	2301      	movs	r3, #1
 800db80:	4631      	mov	r1, r6
 800db82:	4628      	mov	r0, r5
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	f43f af1d 	beq.w	800d9c6 <_printf_float+0xb6>
 800db8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800db90:	ea59 0303 	orrs.w	r3, r9, r3
 800db94:	d102      	bne.n	800db9c <_printf_float+0x28c>
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	07d9      	lsls	r1, r3, #31
 800db9a:	d5d7      	bpl.n	800db4c <_printf_float+0x23c>
 800db9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dba0:	4631      	mov	r1, r6
 800dba2:	4628      	mov	r0, r5
 800dba4:	47b8      	blx	r7
 800dba6:	3001      	adds	r0, #1
 800dba8:	f43f af0d 	beq.w	800d9c6 <_printf_float+0xb6>
 800dbac:	f04f 0a00 	mov.w	sl, #0
 800dbb0:	f104 0b1a 	add.w	fp, r4, #26
 800dbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbb6:	425b      	negs	r3, r3
 800dbb8:	4553      	cmp	r3, sl
 800dbba:	dc01      	bgt.n	800dbc0 <_printf_float+0x2b0>
 800dbbc:	464b      	mov	r3, r9
 800dbbe:	e793      	b.n	800dae8 <_printf_float+0x1d8>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	465a      	mov	r2, fp
 800dbc4:	4631      	mov	r1, r6
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47b8      	blx	r7
 800dbca:	3001      	adds	r0, #1
 800dbcc:	f43f aefb 	beq.w	800d9c6 <_printf_float+0xb6>
 800dbd0:	f10a 0a01 	add.w	sl, sl, #1
 800dbd4:	e7ee      	b.n	800dbb4 <_printf_float+0x2a4>
 800dbd6:	bf00      	nop
 800dbd8:	7fefffff 	.word	0x7fefffff
 800dbdc:	08012864 	.word	0x08012864
 800dbe0:	08012860 	.word	0x08012860
 800dbe4:	0801286c 	.word	0x0801286c
 800dbe8:	08012868 	.word	0x08012868
 800dbec:	08012870 	.word	0x08012870
 800dbf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dbf2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dbf6:	4553      	cmp	r3, sl
 800dbf8:	bfa8      	it	ge
 800dbfa:	4653      	movge	r3, sl
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	4699      	mov	r9, r3
 800dc00:	dc36      	bgt.n	800dc70 <_printf_float+0x360>
 800dc02:	f04f 0b00 	mov.w	fp, #0
 800dc06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc0a:	f104 021a 	add.w	r2, r4, #26
 800dc0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc10:	9306      	str	r3, [sp, #24]
 800dc12:	eba3 0309 	sub.w	r3, r3, r9
 800dc16:	455b      	cmp	r3, fp
 800dc18:	dc31      	bgt.n	800dc7e <_printf_float+0x36e>
 800dc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc1c:	459a      	cmp	sl, r3
 800dc1e:	dc3a      	bgt.n	800dc96 <_printf_float+0x386>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	07da      	lsls	r2, r3, #31
 800dc24:	d437      	bmi.n	800dc96 <_printf_float+0x386>
 800dc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc28:	ebaa 0903 	sub.w	r9, sl, r3
 800dc2c:	9b06      	ldr	r3, [sp, #24]
 800dc2e:	ebaa 0303 	sub.w	r3, sl, r3
 800dc32:	4599      	cmp	r9, r3
 800dc34:	bfa8      	it	ge
 800dc36:	4699      	movge	r9, r3
 800dc38:	f1b9 0f00 	cmp.w	r9, #0
 800dc3c:	dc33      	bgt.n	800dca6 <_printf_float+0x396>
 800dc3e:	f04f 0800 	mov.w	r8, #0
 800dc42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc46:	f104 0b1a 	add.w	fp, r4, #26
 800dc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc4c:	ebaa 0303 	sub.w	r3, sl, r3
 800dc50:	eba3 0309 	sub.w	r3, r3, r9
 800dc54:	4543      	cmp	r3, r8
 800dc56:	f77f af79 	ble.w	800db4c <_printf_float+0x23c>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	465a      	mov	r2, fp
 800dc5e:	4631      	mov	r1, r6
 800dc60:	4628      	mov	r0, r5
 800dc62:	47b8      	blx	r7
 800dc64:	3001      	adds	r0, #1
 800dc66:	f43f aeae 	beq.w	800d9c6 <_printf_float+0xb6>
 800dc6a:	f108 0801 	add.w	r8, r8, #1
 800dc6e:	e7ec      	b.n	800dc4a <_printf_float+0x33a>
 800dc70:	4642      	mov	r2, r8
 800dc72:	4631      	mov	r1, r6
 800dc74:	4628      	mov	r0, r5
 800dc76:	47b8      	blx	r7
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d1c2      	bne.n	800dc02 <_printf_float+0x2f2>
 800dc7c:	e6a3      	b.n	800d9c6 <_printf_float+0xb6>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4631      	mov	r1, r6
 800dc82:	4628      	mov	r0, r5
 800dc84:	9206      	str	r2, [sp, #24]
 800dc86:	47b8      	blx	r7
 800dc88:	3001      	adds	r0, #1
 800dc8a:	f43f ae9c 	beq.w	800d9c6 <_printf_float+0xb6>
 800dc8e:	9a06      	ldr	r2, [sp, #24]
 800dc90:	f10b 0b01 	add.w	fp, fp, #1
 800dc94:	e7bb      	b.n	800dc0e <_printf_float+0x2fe>
 800dc96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	47b8      	blx	r7
 800dca0:	3001      	adds	r0, #1
 800dca2:	d1c0      	bne.n	800dc26 <_printf_float+0x316>
 800dca4:	e68f      	b.n	800d9c6 <_printf_float+0xb6>
 800dca6:	9a06      	ldr	r2, [sp, #24]
 800dca8:	464b      	mov	r3, r9
 800dcaa:	4442      	add	r2, r8
 800dcac:	4631      	mov	r1, r6
 800dcae:	4628      	mov	r0, r5
 800dcb0:	47b8      	blx	r7
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	d1c3      	bne.n	800dc3e <_printf_float+0x32e>
 800dcb6:	e686      	b.n	800d9c6 <_printf_float+0xb6>
 800dcb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dcbc:	f1ba 0f01 	cmp.w	sl, #1
 800dcc0:	dc01      	bgt.n	800dcc6 <_printf_float+0x3b6>
 800dcc2:	07db      	lsls	r3, r3, #31
 800dcc4:	d536      	bpl.n	800dd34 <_printf_float+0x424>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	4642      	mov	r2, r8
 800dcca:	4631      	mov	r1, r6
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b8      	blx	r7
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f43f ae78 	beq.w	800d9c6 <_printf_float+0xb6>
 800dcd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcda:	4631      	mov	r1, r6
 800dcdc:	4628      	mov	r0, r5
 800dcde:	47b8      	blx	r7
 800dce0:	3001      	adds	r0, #1
 800dce2:	f43f ae70 	beq.w	800d9c6 <_printf_float+0xb6>
 800dce6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dcea:	2200      	movs	r2, #0
 800dcec:	2300      	movs	r3, #0
 800dcee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800dcf2:	f7f2 ff09 	bl	8000b08 <__aeabi_dcmpeq>
 800dcf6:	b9c0      	cbnz	r0, 800dd2a <_printf_float+0x41a>
 800dcf8:	4653      	mov	r3, sl
 800dcfa:	f108 0201 	add.w	r2, r8, #1
 800dcfe:	4631      	mov	r1, r6
 800dd00:	4628      	mov	r0, r5
 800dd02:	47b8      	blx	r7
 800dd04:	3001      	adds	r0, #1
 800dd06:	d10c      	bne.n	800dd22 <_printf_float+0x412>
 800dd08:	e65d      	b.n	800d9c6 <_printf_float+0xb6>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	465a      	mov	r2, fp
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4628      	mov	r0, r5
 800dd12:	47b8      	blx	r7
 800dd14:	3001      	adds	r0, #1
 800dd16:	f43f ae56 	beq.w	800d9c6 <_printf_float+0xb6>
 800dd1a:	f108 0801 	add.w	r8, r8, #1
 800dd1e:	45d0      	cmp	r8, sl
 800dd20:	dbf3      	blt.n	800dd0a <_printf_float+0x3fa>
 800dd22:	464b      	mov	r3, r9
 800dd24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dd28:	e6df      	b.n	800daea <_printf_float+0x1da>
 800dd2a:	f04f 0800 	mov.w	r8, #0
 800dd2e:	f104 0b1a 	add.w	fp, r4, #26
 800dd32:	e7f4      	b.n	800dd1e <_printf_float+0x40e>
 800dd34:	2301      	movs	r3, #1
 800dd36:	4642      	mov	r2, r8
 800dd38:	e7e1      	b.n	800dcfe <_printf_float+0x3ee>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	464a      	mov	r2, r9
 800dd3e:	4631      	mov	r1, r6
 800dd40:	4628      	mov	r0, r5
 800dd42:	47b8      	blx	r7
 800dd44:	3001      	adds	r0, #1
 800dd46:	f43f ae3e 	beq.w	800d9c6 <_printf_float+0xb6>
 800dd4a:	f108 0801 	add.w	r8, r8, #1
 800dd4e:	68e3      	ldr	r3, [r4, #12]
 800dd50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd52:	1a5b      	subs	r3, r3, r1
 800dd54:	4543      	cmp	r3, r8
 800dd56:	dcf0      	bgt.n	800dd3a <_printf_float+0x42a>
 800dd58:	e6fc      	b.n	800db54 <_printf_float+0x244>
 800dd5a:	f04f 0800 	mov.w	r8, #0
 800dd5e:	f104 0919 	add.w	r9, r4, #25
 800dd62:	e7f4      	b.n	800dd4e <_printf_float+0x43e>

0800dd64 <sbrk_aligned>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	4e0f      	ldr	r6, [pc, #60]	@ (800dda4 <sbrk_aligned+0x40>)
 800dd68:	460c      	mov	r4, r1
 800dd6a:	6831      	ldr	r1, [r6, #0]
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	b911      	cbnz	r1, 800dd76 <sbrk_aligned+0x12>
 800dd70:	f000 fb0c 	bl	800e38c <_sbrk_r>
 800dd74:	6030      	str	r0, [r6, #0]
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 fb07 	bl	800e38c <_sbrk_r>
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	d103      	bne.n	800dd8a <sbrk_aligned+0x26>
 800dd82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dd86:	4620      	mov	r0, r4
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	1cc4      	adds	r4, r0, #3
 800dd8c:	f024 0403 	bic.w	r4, r4, #3
 800dd90:	42a0      	cmp	r0, r4
 800dd92:	d0f8      	beq.n	800dd86 <sbrk_aligned+0x22>
 800dd94:	1a21      	subs	r1, r4, r0
 800dd96:	4628      	mov	r0, r5
 800dd98:	f000 faf8 	bl	800e38c <_sbrk_r>
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	d1f2      	bne.n	800dd86 <sbrk_aligned+0x22>
 800dda0:	e7ef      	b.n	800dd82 <sbrk_aligned+0x1e>
 800dda2:	bf00      	nop
 800dda4:	20000964 	.word	0x20000964

0800dda8 <_malloc_r>:
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddac:	1ccd      	adds	r5, r1, #3
 800ddae:	f025 0503 	bic.w	r5, r5, #3
 800ddb2:	3508      	adds	r5, #8
 800ddb4:	2d0c      	cmp	r5, #12
 800ddb6:	bf38      	it	cc
 800ddb8:	250c      	movcc	r5, #12
 800ddba:	2d00      	cmp	r5, #0
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	db01      	blt.n	800ddc4 <_malloc_r+0x1c>
 800ddc0:	42a9      	cmp	r1, r5
 800ddc2:	d904      	bls.n	800ddce <_malloc_r+0x26>
 800ddc4:	230c      	movs	r3, #12
 800ddc6:	6033      	str	r3, [r6, #0]
 800ddc8:	2000      	movs	r0, #0
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dea4 <_malloc_r+0xfc>
 800ddd2:	f000 f9f5 	bl	800e1c0 <__malloc_lock>
 800ddd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddda:	461c      	mov	r4, r3
 800dddc:	bb44      	cbnz	r4, 800de30 <_malloc_r+0x88>
 800ddde:	4629      	mov	r1, r5
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7ff ffbf 	bl	800dd64 <sbrk_aligned>
 800dde6:	1c43      	adds	r3, r0, #1
 800dde8:	4604      	mov	r4, r0
 800ddea:	d158      	bne.n	800de9e <_malloc_r+0xf6>
 800ddec:	f8d8 4000 	ldr.w	r4, [r8]
 800ddf0:	4627      	mov	r7, r4
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	d143      	bne.n	800de7e <_malloc_r+0xd6>
 800ddf6:	2c00      	cmp	r4, #0
 800ddf8:	d04b      	beq.n	800de92 <_malloc_r+0xea>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4630      	mov	r0, r6
 800de00:	eb04 0903 	add.w	r9, r4, r3
 800de04:	f000 fac2 	bl	800e38c <_sbrk_r>
 800de08:	4581      	cmp	r9, r0
 800de0a:	d142      	bne.n	800de92 <_malloc_r+0xea>
 800de0c:	6821      	ldr	r1, [r4, #0]
 800de0e:	1a6d      	subs	r5, r5, r1
 800de10:	4629      	mov	r1, r5
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff ffa6 	bl	800dd64 <sbrk_aligned>
 800de18:	3001      	adds	r0, #1
 800de1a:	d03a      	beq.n	800de92 <_malloc_r+0xea>
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	442b      	add	r3, r5
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	f8d8 3000 	ldr.w	r3, [r8]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	bb62      	cbnz	r2, 800de84 <_malloc_r+0xdc>
 800de2a:	f8c8 7000 	str.w	r7, [r8]
 800de2e:	e00f      	b.n	800de50 <_malloc_r+0xa8>
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	1b52      	subs	r2, r2, r5
 800de34:	d420      	bmi.n	800de78 <_malloc_r+0xd0>
 800de36:	2a0b      	cmp	r2, #11
 800de38:	d917      	bls.n	800de6a <_malloc_r+0xc2>
 800de3a:	1961      	adds	r1, r4, r5
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	6025      	str	r5, [r4, #0]
 800de40:	bf18      	it	ne
 800de42:	6059      	strne	r1, [r3, #4]
 800de44:	6863      	ldr	r3, [r4, #4]
 800de46:	bf08      	it	eq
 800de48:	f8c8 1000 	streq.w	r1, [r8]
 800de4c:	5162      	str	r2, [r4, r5]
 800de4e:	604b      	str	r3, [r1, #4]
 800de50:	4630      	mov	r0, r6
 800de52:	f000 f9bb 	bl	800e1cc <__malloc_unlock>
 800de56:	f104 000b 	add.w	r0, r4, #11
 800de5a:	1d23      	adds	r3, r4, #4
 800de5c:	f020 0007 	bic.w	r0, r0, #7
 800de60:	1ac2      	subs	r2, r0, r3
 800de62:	bf1c      	itt	ne
 800de64:	1a1b      	subne	r3, r3, r0
 800de66:	50a3      	strne	r3, [r4, r2]
 800de68:	e7af      	b.n	800ddca <_malloc_r+0x22>
 800de6a:	6862      	ldr	r2, [r4, #4]
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	bf0c      	ite	eq
 800de70:	f8c8 2000 	streq.w	r2, [r8]
 800de74:	605a      	strne	r2, [r3, #4]
 800de76:	e7eb      	b.n	800de50 <_malloc_r+0xa8>
 800de78:	4623      	mov	r3, r4
 800de7a:	6864      	ldr	r4, [r4, #4]
 800de7c:	e7ae      	b.n	800dddc <_malloc_r+0x34>
 800de7e:	463c      	mov	r4, r7
 800de80:	687f      	ldr	r7, [r7, #4]
 800de82:	e7b6      	b.n	800ddf2 <_malloc_r+0x4a>
 800de84:	461a      	mov	r2, r3
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	42a3      	cmp	r3, r4
 800de8a:	d1fb      	bne.n	800de84 <_malloc_r+0xdc>
 800de8c:	2300      	movs	r3, #0
 800de8e:	6053      	str	r3, [r2, #4]
 800de90:	e7de      	b.n	800de50 <_malloc_r+0xa8>
 800de92:	230c      	movs	r3, #12
 800de94:	6033      	str	r3, [r6, #0]
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f998 	bl	800e1cc <__malloc_unlock>
 800de9c:	e794      	b.n	800ddc8 <_malloc_r+0x20>
 800de9e:	6005      	str	r5, [r0, #0]
 800dea0:	e7d6      	b.n	800de50 <_malloc_r+0xa8>
 800dea2:	bf00      	nop
 800dea4:	20000968 	.word	0x20000968

0800dea8 <_printf_common>:
 800dea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deac:	4616      	mov	r6, r2
 800deae:	4698      	mov	r8, r3
 800deb0:	688a      	ldr	r2, [r1, #8]
 800deb2:	690b      	ldr	r3, [r1, #16]
 800deb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800deb8:	4293      	cmp	r3, r2
 800deba:	bfb8      	it	lt
 800debc:	4613      	movlt	r3, r2
 800debe:	6033      	str	r3, [r6, #0]
 800dec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dec4:	4607      	mov	r7, r0
 800dec6:	460c      	mov	r4, r1
 800dec8:	b10a      	cbz	r2, 800dece <_printf_common+0x26>
 800deca:	3301      	adds	r3, #1
 800decc:	6033      	str	r3, [r6, #0]
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	0699      	lsls	r1, r3, #26
 800ded2:	bf42      	ittt	mi
 800ded4:	6833      	ldrmi	r3, [r6, #0]
 800ded6:	3302      	addmi	r3, #2
 800ded8:	6033      	strmi	r3, [r6, #0]
 800deda:	6825      	ldr	r5, [r4, #0]
 800dedc:	f015 0506 	ands.w	r5, r5, #6
 800dee0:	d106      	bne.n	800def0 <_printf_common+0x48>
 800dee2:	f104 0a19 	add.w	sl, r4, #25
 800dee6:	68e3      	ldr	r3, [r4, #12]
 800dee8:	6832      	ldr	r2, [r6, #0]
 800deea:	1a9b      	subs	r3, r3, r2
 800deec:	42ab      	cmp	r3, r5
 800deee:	dc26      	bgt.n	800df3e <_printf_common+0x96>
 800def0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800def4:	6822      	ldr	r2, [r4, #0]
 800def6:	3b00      	subs	r3, #0
 800def8:	bf18      	it	ne
 800defa:	2301      	movne	r3, #1
 800defc:	0692      	lsls	r2, r2, #26
 800defe:	d42b      	bmi.n	800df58 <_printf_common+0xb0>
 800df00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df04:	4641      	mov	r1, r8
 800df06:	4638      	mov	r0, r7
 800df08:	47c8      	blx	r9
 800df0a:	3001      	adds	r0, #1
 800df0c:	d01e      	beq.n	800df4c <_printf_common+0xa4>
 800df0e:	6823      	ldr	r3, [r4, #0]
 800df10:	6922      	ldr	r2, [r4, #16]
 800df12:	f003 0306 	and.w	r3, r3, #6
 800df16:	2b04      	cmp	r3, #4
 800df18:	bf02      	ittt	eq
 800df1a:	68e5      	ldreq	r5, [r4, #12]
 800df1c:	6833      	ldreq	r3, [r6, #0]
 800df1e:	1aed      	subeq	r5, r5, r3
 800df20:	68a3      	ldr	r3, [r4, #8]
 800df22:	bf0c      	ite	eq
 800df24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df28:	2500      	movne	r5, #0
 800df2a:	4293      	cmp	r3, r2
 800df2c:	bfc4      	itt	gt
 800df2e:	1a9b      	subgt	r3, r3, r2
 800df30:	18ed      	addgt	r5, r5, r3
 800df32:	2600      	movs	r6, #0
 800df34:	341a      	adds	r4, #26
 800df36:	42b5      	cmp	r5, r6
 800df38:	d11a      	bne.n	800df70 <_printf_common+0xc8>
 800df3a:	2000      	movs	r0, #0
 800df3c:	e008      	b.n	800df50 <_printf_common+0xa8>
 800df3e:	2301      	movs	r3, #1
 800df40:	4652      	mov	r2, sl
 800df42:	4641      	mov	r1, r8
 800df44:	4638      	mov	r0, r7
 800df46:	47c8      	blx	r9
 800df48:	3001      	adds	r0, #1
 800df4a:	d103      	bne.n	800df54 <_printf_common+0xac>
 800df4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df54:	3501      	adds	r5, #1
 800df56:	e7c6      	b.n	800dee6 <_printf_common+0x3e>
 800df58:	18e1      	adds	r1, r4, r3
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	2030      	movs	r0, #48	@ 0x30
 800df5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df62:	4422      	add	r2, r4
 800df64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df6c:	3302      	adds	r3, #2
 800df6e:	e7c7      	b.n	800df00 <_printf_common+0x58>
 800df70:	2301      	movs	r3, #1
 800df72:	4622      	mov	r2, r4
 800df74:	4641      	mov	r1, r8
 800df76:	4638      	mov	r0, r7
 800df78:	47c8      	blx	r9
 800df7a:	3001      	adds	r0, #1
 800df7c:	d0e6      	beq.n	800df4c <_printf_common+0xa4>
 800df7e:	3601      	adds	r6, #1
 800df80:	e7d9      	b.n	800df36 <_printf_common+0x8e>
	...

0800df84 <_printf_i>:
 800df84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df88:	7e0f      	ldrb	r7, [r1, #24]
 800df8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df8c:	2f78      	cmp	r7, #120	@ 0x78
 800df8e:	4691      	mov	r9, r2
 800df90:	4680      	mov	r8, r0
 800df92:	460c      	mov	r4, r1
 800df94:	469a      	mov	sl, r3
 800df96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df9a:	d807      	bhi.n	800dfac <_printf_i+0x28>
 800df9c:	2f62      	cmp	r7, #98	@ 0x62
 800df9e:	d80a      	bhi.n	800dfb6 <_printf_i+0x32>
 800dfa0:	2f00      	cmp	r7, #0
 800dfa2:	f000 80d1 	beq.w	800e148 <_printf_i+0x1c4>
 800dfa6:	2f58      	cmp	r7, #88	@ 0x58
 800dfa8:	f000 80b8 	beq.w	800e11c <_printf_i+0x198>
 800dfac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dfb4:	e03a      	b.n	800e02c <_printf_i+0xa8>
 800dfb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dfba:	2b15      	cmp	r3, #21
 800dfbc:	d8f6      	bhi.n	800dfac <_printf_i+0x28>
 800dfbe:	a101      	add	r1, pc, #4	@ (adr r1, 800dfc4 <_printf_i+0x40>)
 800dfc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfc4:	0800e01d 	.word	0x0800e01d
 800dfc8:	0800e031 	.word	0x0800e031
 800dfcc:	0800dfad 	.word	0x0800dfad
 800dfd0:	0800dfad 	.word	0x0800dfad
 800dfd4:	0800dfad 	.word	0x0800dfad
 800dfd8:	0800dfad 	.word	0x0800dfad
 800dfdc:	0800e031 	.word	0x0800e031
 800dfe0:	0800dfad 	.word	0x0800dfad
 800dfe4:	0800dfad 	.word	0x0800dfad
 800dfe8:	0800dfad 	.word	0x0800dfad
 800dfec:	0800dfad 	.word	0x0800dfad
 800dff0:	0800e12f 	.word	0x0800e12f
 800dff4:	0800e05b 	.word	0x0800e05b
 800dff8:	0800e0e9 	.word	0x0800e0e9
 800dffc:	0800dfad 	.word	0x0800dfad
 800e000:	0800dfad 	.word	0x0800dfad
 800e004:	0800e151 	.word	0x0800e151
 800e008:	0800dfad 	.word	0x0800dfad
 800e00c:	0800e05b 	.word	0x0800e05b
 800e010:	0800dfad 	.word	0x0800dfad
 800e014:	0800dfad 	.word	0x0800dfad
 800e018:	0800e0f1 	.word	0x0800e0f1
 800e01c:	6833      	ldr	r3, [r6, #0]
 800e01e:	1d1a      	adds	r2, r3, #4
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6032      	str	r2, [r6, #0]
 800e024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e02c:	2301      	movs	r3, #1
 800e02e:	e09c      	b.n	800e16a <_printf_i+0x1e6>
 800e030:	6833      	ldr	r3, [r6, #0]
 800e032:	6820      	ldr	r0, [r4, #0]
 800e034:	1d19      	adds	r1, r3, #4
 800e036:	6031      	str	r1, [r6, #0]
 800e038:	0606      	lsls	r6, r0, #24
 800e03a:	d501      	bpl.n	800e040 <_printf_i+0xbc>
 800e03c:	681d      	ldr	r5, [r3, #0]
 800e03e:	e003      	b.n	800e048 <_printf_i+0xc4>
 800e040:	0645      	lsls	r5, r0, #25
 800e042:	d5fb      	bpl.n	800e03c <_printf_i+0xb8>
 800e044:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e048:	2d00      	cmp	r5, #0
 800e04a:	da03      	bge.n	800e054 <_printf_i+0xd0>
 800e04c:	232d      	movs	r3, #45	@ 0x2d
 800e04e:	426d      	negs	r5, r5
 800e050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e054:	4858      	ldr	r0, [pc, #352]	@ (800e1b8 <_printf_i+0x234>)
 800e056:	230a      	movs	r3, #10
 800e058:	e011      	b.n	800e07e <_printf_i+0xfa>
 800e05a:	6821      	ldr	r1, [r4, #0]
 800e05c:	6833      	ldr	r3, [r6, #0]
 800e05e:	0608      	lsls	r0, r1, #24
 800e060:	f853 5b04 	ldr.w	r5, [r3], #4
 800e064:	d402      	bmi.n	800e06c <_printf_i+0xe8>
 800e066:	0649      	lsls	r1, r1, #25
 800e068:	bf48      	it	mi
 800e06a:	b2ad      	uxthmi	r5, r5
 800e06c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e06e:	4852      	ldr	r0, [pc, #328]	@ (800e1b8 <_printf_i+0x234>)
 800e070:	6033      	str	r3, [r6, #0]
 800e072:	bf14      	ite	ne
 800e074:	230a      	movne	r3, #10
 800e076:	2308      	moveq	r3, #8
 800e078:	2100      	movs	r1, #0
 800e07a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e07e:	6866      	ldr	r6, [r4, #4]
 800e080:	60a6      	str	r6, [r4, #8]
 800e082:	2e00      	cmp	r6, #0
 800e084:	db05      	blt.n	800e092 <_printf_i+0x10e>
 800e086:	6821      	ldr	r1, [r4, #0]
 800e088:	432e      	orrs	r6, r5
 800e08a:	f021 0104 	bic.w	r1, r1, #4
 800e08e:	6021      	str	r1, [r4, #0]
 800e090:	d04b      	beq.n	800e12a <_printf_i+0x1a6>
 800e092:	4616      	mov	r6, r2
 800e094:	fbb5 f1f3 	udiv	r1, r5, r3
 800e098:	fb03 5711 	mls	r7, r3, r1, r5
 800e09c:	5dc7      	ldrb	r7, [r0, r7]
 800e09e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0a2:	462f      	mov	r7, r5
 800e0a4:	42bb      	cmp	r3, r7
 800e0a6:	460d      	mov	r5, r1
 800e0a8:	d9f4      	bls.n	800e094 <_printf_i+0x110>
 800e0aa:	2b08      	cmp	r3, #8
 800e0ac:	d10b      	bne.n	800e0c6 <_printf_i+0x142>
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	07df      	lsls	r7, r3, #31
 800e0b2:	d508      	bpl.n	800e0c6 <_printf_i+0x142>
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	6861      	ldr	r1, [r4, #4]
 800e0b8:	4299      	cmp	r1, r3
 800e0ba:	bfde      	ittt	le
 800e0bc:	2330      	movle	r3, #48	@ 0x30
 800e0be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e0c6:	1b92      	subs	r2, r2, r6
 800e0c8:	6122      	str	r2, [r4, #16]
 800e0ca:	f8cd a000 	str.w	sl, [sp]
 800e0ce:	464b      	mov	r3, r9
 800e0d0:	aa03      	add	r2, sp, #12
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	f7ff fee7 	bl	800dea8 <_printf_common>
 800e0da:	3001      	adds	r0, #1
 800e0dc:	d14a      	bne.n	800e174 <_printf_i+0x1f0>
 800e0de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0e2:	b004      	add	sp, #16
 800e0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e8:	6823      	ldr	r3, [r4, #0]
 800e0ea:	f043 0320 	orr.w	r3, r3, #32
 800e0ee:	6023      	str	r3, [r4, #0]
 800e0f0:	4832      	ldr	r0, [pc, #200]	@ (800e1bc <_printf_i+0x238>)
 800e0f2:	2778      	movs	r7, #120	@ 0x78
 800e0f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0f8:	6823      	ldr	r3, [r4, #0]
 800e0fa:	6831      	ldr	r1, [r6, #0]
 800e0fc:	061f      	lsls	r7, r3, #24
 800e0fe:	f851 5b04 	ldr.w	r5, [r1], #4
 800e102:	d402      	bmi.n	800e10a <_printf_i+0x186>
 800e104:	065f      	lsls	r7, r3, #25
 800e106:	bf48      	it	mi
 800e108:	b2ad      	uxthmi	r5, r5
 800e10a:	6031      	str	r1, [r6, #0]
 800e10c:	07d9      	lsls	r1, r3, #31
 800e10e:	bf44      	itt	mi
 800e110:	f043 0320 	orrmi.w	r3, r3, #32
 800e114:	6023      	strmi	r3, [r4, #0]
 800e116:	b11d      	cbz	r5, 800e120 <_printf_i+0x19c>
 800e118:	2310      	movs	r3, #16
 800e11a:	e7ad      	b.n	800e078 <_printf_i+0xf4>
 800e11c:	4826      	ldr	r0, [pc, #152]	@ (800e1b8 <_printf_i+0x234>)
 800e11e:	e7e9      	b.n	800e0f4 <_printf_i+0x170>
 800e120:	6823      	ldr	r3, [r4, #0]
 800e122:	f023 0320 	bic.w	r3, r3, #32
 800e126:	6023      	str	r3, [r4, #0]
 800e128:	e7f6      	b.n	800e118 <_printf_i+0x194>
 800e12a:	4616      	mov	r6, r2
 800e12c:	e7bd      	b.n	800e0aa <_printf_i+0x126>
 800e12e:	6833      	ldr	r3, [r6, #0]
 800e130:	6825      	ldr	r5, [r4, #0]
 800e132:	6961      	ldr	r1, [r4, #20]
 800e134:	1d18      	adds	r0, r3, #4
 800e136:	6030      	str	r0, [r6, #0]
 800e138:	062e      	lsls	r6, r5, #24
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	d501      	bpl.n	800e142 <_printf_i+0x1be>
 800e13e:	6019      	str	r1, [r3, #0]
 800e140:	e002      	b.n	800e148 <_printf_i+0x1c4>
 800e142:	0668      	lsls	r0, r5, #25
 800e144:	d5fb      	bpl.n	800e13e <_printf_i+0x1ba>
 800e146:	8019      	strh	r1, [r3, #0]
 800e148:	2300      	movs	r3, #0
 800e14a:	6123      	str	r3, [r4, #16]
 800e14c:	4616      	mov	r6, r2
 800e14e:	e7bc      	b.n	800e0ca <_printf_i+0x146>
 800e150:	6833      	ldr	r3, [r6, #0]
 800e152:	1d1a      	adds	r2, r3, #4
 800e154:	6032      	str	r2, [r6, #0]
 800e156:	681e      	ldr	r6, [r3, #0]
 800e158:	6862      	ldr	r2, [r4, #4]
 800e15a:	2100      	movs	r1, #0
 800e15c:	4630      	mov	r0, r6
 800e15e:	f7f2 f857 	bl	8000210 <memchr>
 800e162:	b108      	cbz	r0, 800e168 <_printf_i+0x1e4>
 800e164:	1b80      	subs	r0, r0, r6
 800e166:	6060      	str	r0, [r4, #4]
 800e168:	6863      	ldr	r3, [r4, #4]
 800e16a:	6123      	str	r3, [r4, #16]
 800e16c:	2300      	movs	r3, #0
 800e16e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e172:	e7aa      	b.n	800e0ca <_printf_i+0x146>
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	4632      	mov	r2, r6
 800e178:	4649      	mov	r1, r9
 800e17a:	4640      	mov	r0, r8
 800e17c:	47d0      	blx	sl
 800e17e:	3001      	adds	r0, #1
 800e180:	d0ad      	beq.n	800e0de <_printf_i+0x15a>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	079b      	lsls	r3, r3, #30
 800e186:	d413      	bmi.n	800e1b0 <_printf_i+0x22c>
 800e188:	68e0      	ldr	r0, [r4, #12]
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	4298      	cmp	r0, r3
 800e18e:	bfb8      	it	lt
 800e190:	4618      	movlt	r0, r3
 800e192:	e7a6      	b.n	800e0e2 <_printf_i+0x15e>
 800e194:	2301      	movs	r3, #1
 800e196:	4632      	mov	r2, r6
 800e198:	4649      	mov	r1, r9
 800e19a:	4640      	mov	r0, r8
 800e19c:	47d0      	blx	sl
 800e19e:	3001      	adds	r0, #1
 800e1a0:	d09d      	beq.n	800e0de <_printf_i+0x15a>
 800e1a2:	3501      	adds	r5, #1
 800e1a4:	68e3      	ldr	r3, [r4, #12]
 800e1a6:	9903      	ldr	r1, [sp, #12]
 800e1a8:	1a5b      	subs	r3, r3, r1
 800e1aa:	42ab      	cmp	r3, r5
 800e1ac:	dcf2      	bgt.n	800e194 <_printf_i+0x210>
 800e1ae:	e7eb      	b.n	800e188 <_printf_i+0x204>
 800e1b0:	2500      	movs	r5, #0
 800e1b2:	f104 0619 	add.w	r6, r4, #25
 800e1b6:	e7f5      	b.n	800e1a4 <_printf_i+0x220>
 800e1b8:	08012872 	.word	0x08012872
 800e1bc:	08012883 	.word	0x08012883

0800e1c0 <__malloc_lock>:
 800e1c0:	4801      	ldr	r0, [pc, #4]	@ (800e1c8 <__malloc_lock+0x8>)
 800e1c2:	f000 b91e 	b.w	800e402 <__retarget_lock_acquire_recursive>
 800e1c6:	bf00      	nop
 800e1c8:	20000aa8 	.word	0x20000aa8

0800e1cc <__malloc_unlock>:
 800e1cc:	4801      	ldr	r0, [pc, #4]	@ (800e1d4 <__malloc_unlock+0x8>)
 800e1ce:	f000 b919 	b.w	800e404 <__retarget_lock_release_recursive>
 800e1d2:	bf00      	nop
 800e1d4:	20000aa8 	.word	0x20000aa8

0800e1d8 <std>:
 800e1d8:	2300      	movs	r3, #0
 800e1da:	b510      	push	{r4, lr}
 800e1dc:	4604      	mov	r4, r0
 800e1de:	e9c0 3300 	strd	r3, r3, [r0]
 800e1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1e6:	6083      	str	r3, [r0, #8]
 800e1e8:	8181      	strh	r1, [r0, #12]
 800e1ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800e1ec:	81c2      	strh	r2, [r0, #14]
 800e1ee:	6183      	str	r3, [r0, #24]
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	2208      	movs	r2, #8
 800e1f4:	305c      	adds	r0, #92	@ 0x5c
 800e1f6:	f000 f8c1 	bl	800e37c <memset>
 800e1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e230 <std+0x58>)
 800e1fc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e234 <std+0x5c>)
 800e200:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e202:	4b0d      	ldr	r3, [pc, #52]	@ (800e238 <std+0x60>)
 800e204:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e206:	4b0d      	ldr	r3, [pc, #52]	@ (800e23c <std+0x64>)
 800e208:	6323      	str	r3, [r4, #48]	@ 0x30
 800e20a:	4b0d      	ldr	r3, [pc, #52]	@ (800e240 <std+0x68>)
 800e20c:	6224      	str	r4, [r4, #32]
 800e20e:	429c      	cmp	r4, r3
 800e210:	d006      	beq.n	800e220 <std+0x48>
 800e212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e216:	4294      	cmp	r4, r2
 800e218:	d002      	beq.n	800e220 <std+0x48>
 800e21a:	33d0      	adds	r3, #208	@ 0xd0
 800e21c:	429c      	cmp	r4, r3
 800e21e:	d105      	bne.n	800e22c <std+0x54>
 800e220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e228:	f000 b8ea 	b.w	800e400 <__retarget_lock_init_recursive>
 800e22c:	bd10      	pop	{r4, pc}
 800e22e:	bf00      	nop
 800e230:	0800f9d1 	.word	0x0800f9d1
 800e234:	0800f9f3 	.word	0x0800f9f3
 800e238:	0800fa2b 	.word	0x0800fa2b
 800e23c:	0800fa4f 	.word	0x0800fa4f
 800e240:	2000096c 	.word	0x2000096c

0800e244 <stdio_exit_handler>:
 800e244:	4a02      	ldr	r2, [pc, #8]	@ (800e250 <stdio_exit_handler+0xc>)
 800e246:	4903      	ldr	r1, [pc, #12]	@ (800e254 <stdio_exit_handler+0x10>)
 800e248:	4803      	ldr	r0, [pc, #12]	@ (800e258 <stdio_exit_handler+0x14>)
 800e24a:	f000 b869 	b.w	800e320 <_fwalk_sglue>
 800e24e:	bf00      	nop
 800e250:	2000004c 	.word	0x2000004c
 800e254:	0800f28d 	.word	0x0800f28d
 800e258:	2000005c 	.word	0x2000005c

0800e25c <cleanup_stdio>:
 800e25c:	6841      	ldr	r1, [r0, #4]
 800e25e:	4b0c      	ldr	r3, [pc, #48]	@ (800e290 <cleanup_stdio+0x34>)
 800e260:	4299      	cmp	r1, r3
 800e262:	b510      	push	{r4, lr}
 800e264:	4604      	mov	r4, r0
 800e266:	d001      	beq.n	800e26c <cleanup_stdio+0x10>
 800e268:	f001 f810 	bl	800f28c <_fflush_r>
 800e26c:	68a1      	ldr	r1, [r4, #8]
 800e26e:	4b09      	ldr	r3, [pc, #36]	@ (800e294 <cleanup_stdio+0x38>)
 800e270:	4299      	cmp	r1, r3
 800e272:	d002      	beq.n	800e27a <cleanup_stdio+0x1e>
 800e274:	4620      	mov	r0, r4
 800e276:	f001 f809 	bl	800f28c <_fflush_r>
 800e27a:	68e1      	ldr	r1, [r4, #12]
 800e27c:	4b06      	ldr	r3, [pc, #24]	@ (800e298 <cleanup_stdio+0x3c>)
 800e27e:	4299      	cmp	r1, r3
 800e280:	d004      	beq.n	800e28c <cleanup_stdio+0x30>
 800e282:	4620      	mov	r0, r4
 800e284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e288:	f001 b800 	b.w	800f28c <_fflush_r>
 800e28c:	bd10      	pop	{r4, pc}
 800e28e:	bf00      	nop
 800e290:	2000096c 	.word	0x2000096c
 800e294:	200009d4 	.word	0x200009d4
 800e298:	20000a3c 	.word	0x20000a3c

0800e29c <global_stdio_init.part.0>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	4b0b      	ldr	r3, [pc, #44]	@ (800e2cc <global_stdio_init.part.0+0x30>)
 800e2a0:	4c0b      	ldr	r4, [pc, #44]	@ (800e2d0 <global_stdio_init.part.0+0x34>)
 800e2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800e2d4 <global_stdio_init.part.0+0x38>)
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2104      	movs	r1, #4
 800e2ac:	f7ff ff94 	bl	800e1d8 <std>
 800e2b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	2109      	movs	r1, #9
 800e2b8:	f7ff ff8e 	bl	800e1d8 <std>
 800e2bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c6:	2112      	movs	r1, #18
 800e2c8:	f7ff bf86 	b.w	800e1d8 <std>
 800e2cc:	20000aa4 	.word	0x20000aa4
 800e2d0:	2000096c 	.word	0x2000096c
 800e2d4:	0800e245 	.word	0x0800e245

0800e2d8 <__sfp_lock_acquire>:
 800e2d8:	4801      	ldr	r0, [pc, #4]	@ (800e2e0 <__sfp_lock_acquire+0x8>)
 800e2da:	f000 b892 	b.w	800e402 <__retarget_lock_acquire_recursive>
 800e2de:	bf00      	nop
 800e2e0:	20000aa9 	.word	0x20000aa9

0800e2e4 <__sfp_lock_release>:
 800e2e4:	4801      	ldr	r0, [pc, #4]	@ (800e2ec <__sfp_lock_release+0x8>)
 800e2e6:	f000 b88d 	b.w	800e404 <__retarget_lock_release_recursive>
 800e2ea:	bf00      	nop
 800e2ec:	20000aa9 	.word	0x20000aa9

0800e2f0 <__sinit>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	f7ff fff0 	bl	800e2d8 <__sfp_lock_acquire>
 800e2f8:	6a23      	ldr	r3, [r4, #32]
 800e2fa:	b11b      	cbz	r3, 800e304 <__sinit+0x14>
 800e2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e300:	f7ff bff0 	b.w	800e2e4 <__sfp_lock_release>
 800e304:	4b04      	ldr	r3, [pc, #16]	@ (800e318 <__sinit+0x28>)
 800e306:	6223      	str	r3, [r4, #32]
 800e308:	4b04      	ldr	r3, [pc, #16]	@ (800e31c <__sinit+0x2c>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1f5      	bne.n	800e2fc <__sinit+0xc>
 800e310:	f7ff ffc4 	bl	800e29c <global_stdio_init.part.0>
 800e314:	e7f2      	b.n	800e2fc <__sinit+0xc>
 800e316:	bf00      	nop
 800e318:	0800e25d 	.word	0x0800e25d
 800e31c:	20000aa4 	.word	0x20000aa4

0800e320 <_fwalk_sglue>:
 800e320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e324:	4607      	mov	r7, r0
 800e326:	4688      	mov	r8, r1
 800e328:	4614      	mov	r4, r2
 800e32a:	2600      	movs	r6, #0
 800e32c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e330:	f1b9 0901 	subs.w	r9, r9, #1
 800e334:	d505      	bpl.n	800e342 <_fwalk_sglue+0x22>
 800e336:	6824      	ldr	r4, [r4, #0]
 800e338:	2c00      	cmp	r4, #0
 800e33a:	d1f7      	bne.n	800e32c <_fwalk_sglue+0xc>
 800e33c:	4630      	mov	r0, r6
 800e33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	2b01      	cmp	r3, #1
 800e346:	d907      	bls.n	800e358 <_fwalk_sglue+0x38>
 800e348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e34c:	3301      	adds	r3, #1
 800e34e:	d003      	beq.n	800e358 <_fwalk_sglue+0x38>
 800e350:	4629      	mov	r1, r5
 800e352:	4638      	mov	r0, r7
 800e354:	47c0      	blx	r8
 800e356:	4306      	orrs	r6, r0
 800e358:	3568      	adds	r5, #104	@ 0x68
 800e35a:	e7e9      	b.n	800e330 <_fwalk_sglue+0x10>

0800e35c <memcmp>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	3901      	subs	r1, #1
 800e360:	4402      	add	r2, r0
 800e362:	4290      	cmp	r0, r2
 800e364:	d101      	bne.n	800e36a <memcmp+0xe>
 800e366:	2000      	movs	r0, #0
 800e368:	e005      	b.n	800e376 <memcmp+0x1a>
 800e36a:	7803      	ldrb	r3, [r0, #0]
 800e36c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e370:	42a3      	cmp	r3, r4
 800e372:	d001      	beq.n	800e378 <memcmp+0x1c>
 800e374:	1b18      	subs	r0, r3, r4
 800e376:	bd10      	pop	{r4, pc}
 800e378:	3001      	adds	r0, #1
 800e37a:	e7f2      	b.n	800e362 <memcmp+0x6>

0800e37c <memset>:
 800e37c:	4402      	add	r2, r0
 800e37e:	4603      	mov	r3, r0
 800e380:	4293      	cmp	r3, r2
 800e382:	d100      	bne.n	800e386 <memset+0xa>
 800e384:	4770      	bx	lr
 800e386:	f803 1b01 	strb.w	r1, [r3], #1
 800e38a:	e7f9      	b.n	800e380 <memset+0x4>

0800e38c <_sbrk_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4d06      	ldr	r5, [pc, #24]	@ (800e3a8 <_sbrk_r+0x1c>)
 800e390:	2300      	movs	r3, #0
 800e392:	4604      	mov	r4, r0
 800e394:	4608      	mov	r0, r1
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	f7f9 fcde 	bl	8007d58 <_sbrk>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d102      	bne.n	800e3a6 <_sbrk_r+0x1a>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	b103      	cbz	r3, 800e3a6 <_sbrk_r+0x1a>
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	20000aac 	.word	0x20000aac

0800e3ac <__errno>:
 800e3ac:	4b01      	ldr	r3, [pc, #4]	@ (800e3b4 <__errno+0x8>)
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20000058 	.word	0x20000058

0800e3b8 <__libc_init_array>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	4d0d      	ldr	r5, [pc, #52]	@ (800e3f0 <__libc_init_array+0x38>)
 800e3bc:	4c0d      	ldr	r4, [pc, #52]	@ (800e3f4 <__libc_init_array+0x3c>)
 800e3be:	1b64      	subs	r4, r4, r5
 800e3c0:	10a4      	asrs	r4, r4, #2
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	42a6      	cmp	r6, r4
 800e3c6:	d109      	bne.n	800e3dc <__libc_init_array+0x24>
 800e3c8:	4d0b      	ldr	r5, [pc, #44]	@ (800e3f8 <__libc_init_array+0x40>)
 800e3ca:	4c0c      	ldr	r4, [pc, #48]	@ (800e3fc <__libc_init_array+0x44>)
 800e3cc:	f004 fa20 	bl	8012810 <_init>
 800e3d0:	1b64      	subs	r4, r4, r5
 800e3d2:	10a4      	asrs	r4, r4, #2
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	42a6      	cmp	r6, r4
 800e3d8:	d105      	bne.n	800e3e6 <__libc_init_array+0x2e>
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e0:	4798      	blx	r3
 800e3e2:	3601      	adds	r6, #1
 800e3e4:	e7ee      	b.n	800e3c4 <__libc_init_array+0xc>
 800e3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ea:	4798      	blx	r3
 800e3ec:	3601      	adds	r6, #1
 800e3ee:	e7f2      	b.n	800e3d6 <__libc_init_array+0x1e>
 800e3f0:	08012e30 	.word	0x08012e30
 800e3f4:	08012e30 	.word	0x08012e30
 800e3f8:	08012e30 	.word	0x08012e30
 800e3fc:	08012e34 	.word	0x08012e34

0800e400 <__retarget_lock_init_recursive>:
 800e400:	4770      	bx	lr

0800e402 <__retarget_lock_acquire_recursive>:
 800e402:	4770      	bx	lr

0800e404 <__retarget_lock_release_recursive>:
 800e404:	4770      	bx	lr
	...

0800e408 <_localeconv_r>:
 800e408:	4800      	ldr	r0, [pc, #0]	@ (800e40c <_localeconv_r+0x4>)
 800e40a:	4770      	bx	lr
 800e40c:	20000198 	.word	0x20000198

0800e410 <memcpy>:
 800e410:	440a      	add	r2, r1
 800e412:	4291      	cmp	r1, r2
 800e414:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e418:	d100      	bne.n	800e41c <memcpy+0xc>
 800e41a:	4770      	bx	lr
 800e41c:	b510      	push	{r4, lr}
 800e41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e422:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e426:	4291      	cmp	r1, r2
 800e428:	d1f9      	bne.n	800e41e <memcpy+0xe>
 800e42a:	bd10      	pop	{r4, pc}

0800e42c <quorem>:
 800e42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e430:	6903      	ldr	r3, [r0, #16]
 800e432:	690c      	ldr	r4, [r1, #16]
 800e434:	42a3      	cmp	r3, r4
 800e436:	4607      	mov	r7, r0
 800e438:	db7e      	blt.n	800e538 <quorem+0x10c>
 800e43a:	3c01      	subs	r4, #1
 800e43c:	f101 0814 	add.w	r8, r1, #20
 800e440:	00a3      	lsls	r3, r4, #2
 800e442:	f100 0514 	add.w	r5, r0, #20
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e456:	3301      	adds	r3, #1
 800e458:	429a      	cmp	r2, r3
 800e45a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e45e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e462:	d32e      	bcc.n	800e4c2 <quorem+0x96>
 800e464:	f04f 0a00 	mov.w	sl, #0
 800e468:	46c4      	mov	ip, r8
 800e46a:	46ae      	mov	lr, r5
 800e46c:	46d3      	mov	fp, sl
 800e46e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e472:	b298      	uxth	r0, r3
 800e474:	fb06 a000 	mla	r0, r6, r0, sl
 800e478:	0c02      	lsrs	r2, r0, #16
 800e47a:	0c1b      	lsrs	r3, r3, #16
 800e47c:	fb06 2303 	mla	r3, r6, r3, r2
 800e480:	f8de 2000 	ldr.w	r2, [lr]
 800e484:	b280      	uxth	r0, r0
 800e486:	b292      	uxth	r2, r2
 800e488:	1a12      	subs	r2, r2, r0
 800e48a:	445a      	add	r2, fp
 800e48c:	f8de 0000 	ldr.w	r0, [lr]
 800e490:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e494:	b29b      	uxth	r3, r3
 800e496:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e49a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e49e:	b292      	uxth	r2, r2
 800e4a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e4a4:	45e1      	cmp	r9, ip
 800e4a6:	f84e 2b04 	str.w	r2, [lr], #4
 800e4aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e4ae:	d2de      	bcs.n	800e46e <quorem+0x42>
 800e4b0:	9b00      	ldr	r3, [sp, #0]
 800e4b2:	58eb      	ldr	r3, [r5, r3]
 800e4b4:	b92b      	cbnz	r3, 800e4c2 <quorem+0x96>
 800e4b6:	9b01      	ldr	r3, [sp, #4]
 800e4b8:	3b04      	subs	r3, #4
 800e4ba:	429d      	cmp	r5, r3
 800e4bc:	461a      	mov	r2, r3
 800e4be:	d32f      	bcc.n	800e520 <quorem+0xf4>
 800e4c0:	613c      	str	r4, [r7, #16]
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f001 f97c 	bl	800f7c0 <__mcmp>
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	db25      	blt.n	800e518 <quorem+0xec>
 800e4cc:	4629      	mov	r1, r5
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4d4:	f8d1 c000 	ldr.w	ip, [r1]
 800e4d8:	fa1f fe82 	uxth.w	lr, r2
 800e4dc:	fa1f f38c 	uxth.w	r3, ip
 800e4e0:	eba3 030e 	sub.w	r3, r3, lr
 800e4e4:	4403      	add	r3, r0
 800e4e6:	0c12      	lsrs	r2, r2, #16
 800e4e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e4ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4f6:	45c1      	cmp	r9, r8
 800e4f8:	f841 3b04 	str.w	r3, [r1], #4
 800e4fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e500:	d2e6      	bcs.n	800e4d0 <quorem+0xa4>
 800e502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e50a:	b922      	cbnz	r2, 800e516 <quorem+0xea>
 800e50c:	3b04      	subs	r3, #4
 800e50e:	429d      	cmp	r5, r3
 800e510:	461a      	mov	r2, r3
 800e512:	d30b      	bcc.n	800e52c <quorem+0x100>
 800e514:	613c      	str	r4, [r7, #16]
 800e516:	3601      	adds	r6, #1
 800e518:	4630      	mov	r0, r6
 800e51a:	b003      	add	sp, #12
 800e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e520:	6812      	ldr	r2, [r2, #0]
 800e522:	3b04      	subs	r3, #4
 800e524:	2a00      	cmp	r2, #0
 800e526:	d1cb      	bne.n	800e4c0 <quorem+0x94>
 800e528:	3c01      	subs	r4, #1
 800e52a:	e7c6      	b.n	800e4ba <quorem+0x8e>
 800e52c:	6812      	ldr	r2, [r2, #0]
 800e52e:	3b04      	subs	r3, #4
 800e530:	2a00      	cmp	r2, #0
 800e532:	d1ef      	bne.n	800e514 <quorem+0xe8>
 800e534:	3c01      	subs	r4, #1
 800e536:	e7ea      	b.n	800e50e <quorem+0xe2>
 800e538:	2000      	movs	r0, #0
 800e53a:	e7ee      	b.n	800e51a <quorem+0xee>
 800e53c:	0000      	movs	r0, r0
	...

0800e540 <_dtoa_r>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	69c7      	ldr	r7, [r0, #28]
 800e546:	b097      	sub	sp, #92	@ 0x5c
 800e548:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e54c:	ec55 4b10 	vmov	r4, r5, d0
 800e550:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e552:	9107      	str	r1, [sp, #28]
 800e554:	4681      	mov	r9, r0
 800e556:	920c      	str	r2, [sp, #48]	@ 0x30
 800e558:	9311      	str	r3, [sp, #68]	@ 0x44
 800e55a:	b97f      	cbnz	r7, 800e57c <_dtoa_r+0x3c>
 800e55c:	2010      	movs	r0, #16
 800e55e:	f000 fe09 	bl	800f174 <malloc>
 800e562:	4602      	mov	r2, r0
 800e564:	f8c9 001c 	str.w	r0, [r9, #28]
 800e568:	b920      	cbnz	r0, 800e574 <_dtoa_r+0x34>
 800e56a:	4ba9      	ldr	r3, [pc, #676]	@ (800e810 <_dtoa_r+0x2d0>)
 800e56c:	21ef      	movs	r1, #239	@ 0xef
 800e56e:	48a9      	ldr	r0, [pc, #676]	@ (800e814 <_dtoa_r+0x2d4>)
 800e570:	f001 fab8 	bl	800fae4 <__assert_func>
 800e574:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e578:	6007      	str	r7, [r0, #0]
 800e57a:	60c7      	str	r7, [r0, #12]
 800e57c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e580:	6819      	ldr	r1, [r3, #0]
 800e582:	b159      	cbz	r1, 800e59c <_dtoa_r+0x5c>
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	604a      	str	r2, [r1, #4]
 800e588:	2301      	movs	r3, #1
 800e58a:	4093      	lsls	r3, r2
 800e58c:	608b      	str	r3, [r1, #8]
 800e58e:	4648      	mov	r0, r9
 800e590:	f000 fee4 	bl	800f35c <_Bfree>
 800e594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	1e2b      	subs	r3, r5, #0
 800e59e:	bfb9      	ittee	lt
 800e5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e5a4:	9305      	strlt	r3, [sp, #20]
 800e5a6:	2300      	movge	r3, #0
 800e5a8:	6033      	strge	r3, [r6, #0]
 800e5aa:	9f05      	ldr	r7, [sp, #20]
 800e5ac:	4b9a      	ldr	r3, [pc, #616]	@ (800e818 <_dtoa_r+0x2d8>)
 800e5ae:	bfbc      	itt	lt
 800e5b0:	2201      	movlt	r2, #1
 800e5b2:	6032      	strlt	r2, [r6, #0]
 800e5b4:	43bb      	bics	r3, r7
 800e5b6:	d112      	bne.n	800e5de <_dtoa_r+0x9e>
 800e5b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5c4:	4323      	orrs	r3, r4
 800e5c6:	f000 855a 	beq.w	800f07e <_dtoa_r+0xb3e>
 800e5ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e82c <_dtoa_r+0x2ec>
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 855c 	beq.w	800f08e <_dtoa_r+0xb4e>
 800e5d6:	f10a 0303 	add.w	r3, sl, #3
 800e5da:	f000 bd56 	b.w	800f08a <_dtoa_r+0xb4a>
 800e5de:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	ec51 0b17 	vmov	r0, r1, d7
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e5ee:	f7f2 fa8b 	bl	8000b08 <__aeabi_dcmpeq>
 800e5f2:	4680      	mov	r8, r0
 800e5f4:	b158      	cbz	r0, 800e60e <_dtoa_r+0xce>
 800e5f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5fe:	b113      	cbz	r3, 800e606 <_dtoa_r+0xc6>
 800e600:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e602:	4b86      	ldr	r3, [pc, #536]	@ (800e81c <_dtoa_r+0x2dc>)
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e830 <_dtoa_r+0x2f0>
 800e60a:	f000 bd40 	b.w	800f08e <_dtoa_r+0xb4e>
 800e60e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e612:	aa14      	add	r2, sp, #80	@ 0x50
 800e614:	a915      	add	r1, sp, #84	@ 0x54
 800e616:	4648      	mov	r0, r9
 800e618:	f001 f982 	bl	800f920 <__d2b>
 800e61c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e620:	9002      	str	r0, [sp, #8]
 800e622:	2e00      	cmp	r6, #0
 800e624:	d078      	beq.n	800e718 <_dtoa_r+0x1d8>
 800e626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e628:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e62c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e630:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e634:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e638:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e63c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e640:	4619      	mov	r1, r3
 800e642:	2200      	movs	r2, #0
 800e644:	4b76      	ldr	r3, [pc, #472]	@ (800e820 <_dtoa_r+0x2e0>)
 800e646:	f7f1 fe3f 	bl	80002c8 <__aeabi_dsub>
 800e64a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e7f8 <_dtoa_r+0x2b8>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	f7f1 fff2 	bl	8000638 <__aeabi_dmul>
 800e654:	a36a      	add	r3, pc, #424	@ (adr r3, 800e800 <_dtoa_r+0x2c0>)
 800e656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65a:	f7f1 fe37 	bl	80002cc <__adddf3>
 800e65e:	4604      	mov	r4, r0
 800e660:	4630      	mov	r0, r6
 800e662:	460d      	mov	r5, r1
 800e664:	f7f1 ff7e 	bl	8000564 <__aeabi_i2d>
 800e668:	a367      	add	r3, pc, #412	@ (adr r3, 800e808 <_dtoa_r+0x2c8>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 ffe3 	bl	8000638 <__aeabi_dmul>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	4620      	mov	r0, r4
 800e678:	4629      	mov	r1, r5
 800e67a:	f7f1 fe27 	bl	80002cc <__adddf3>
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
 800e682:	f7f2 fa89 	bl	8000b98 <__aeabi_d2iz>
 800e686:	2200      	movs	r2, #0
 800e688:	4607      	mov	r7, r0
 800e68a:	2300      	movs	r3, #0
 800e68c:	4620      	mov	r0, r4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7f2 fa44 	bl	8000b1c <__aeabi_dcmplt>
 800e694:	b140      	cbz	r0, 800e6a8 <_dtoa_r+0x168>
 800e696:	4638      	mov	r0, r7
 800e698:	f7f1 ff64 	bl	8000564 <__aeabi_i2d>
 800e69c:	4622      	mov	r2, r4
 800e69e:	462b      	mov	r3, r5
 800e6a0:	f7f2 fa32 	bl	8000b08 <__aeabi_dcmpeq>
 800e6a4:	b900      	cbnz	r0, 800e6a8 <_dtoa_r+0x168>
 800e6a6:	3f01      	subs	r7, #1
 800e6a8:	2f16      	cmp	r7, #22
 800e6aa:	d852      	bhi.n	800e752 <_dtoa_r+0x212>
 800e6ac:	4b5d      	ldr	r3, [pc, #372]	@ (800e824 <_dtoa_r+0x2e4>)
 800e6ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e6ba:	f7f2 fa2f 	bl	8000b1c <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d049      	beq.n	800e756 <_dtoa_r+0x216>
 800e6c2:	3f01      	subs	r7, #1
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6ca:	1b9b      	subs	r3, r3, r6
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	bf45      	ittet	mi
 800e6d0:	f1c3 0301 	rsbmi	r3, r3, #1
 800e6d4:	9300      	strmi	r3, [sp, #0]
 800e6d6:	2300      	movpl	r3, #0
 800e6d8:	2300      	movmi	r3, #0
 800e6da:	9206      	str	r2, [sp, #24]
 800e6dc:	bf54      	ite	pl
 800e6de:	9300      	strpl	r3, [sp, #0]
 800e6e0:	9306      	strmi	r3, [sp, #24]
 800e6e2:	2f00      	cmp	r7, #0
 800e6e4:	db39      	blt.n	800e75a <_dtoa_r+0x21a>
 800e6e6:	9b06      	ldr	r3, [sp, #24]
 800e6e8:	970d      	str	r7, [sp, #52]	@ 0x34
 800e6ea:	443b      	add	r3, r7
 800e6ec:	9306      	str	r3, [sp, #24]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	9308      	str	r3, [sp, #32]
 800e6f2:	9b07      	ldr	r3, [sp, #28]
 800e6f4:	2b09      	cmp	r3, #9
 800e6f6:	d863      	bhi.n	800e7c0 <_dtoa_r+0x280>
 800e6f8:	2b05      	cmp	r3, #5
 800e6fa:	bfc4      	itt	gt
 800e6fc:	3b04      	subgt	r3, #4
 800e6fe:	9307      	strgt	r3, [sp, #28]
 800e700:	9b07      	ldr	r3, [sp, #28]
 800e702:	f1a3 0302 	sub.w	r3, r3, #2
 800e706:	bfcc      	ite	gt
 800e708:	2400      	movgt	r4, #0
 800e70a:	2401      	movle	r4, #1
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	d863      	bhi.n	800e7d8 <_dtoa_r+0x298>
 800e710:	e8df f003 	tbb	[pc, r3]
 800e714:	2b375452 	.word	0x2b375452
 800e718:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e71c:	441e      	add	r6, r3
 800e71e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e722:	2b20      	cmp	r3, #32
 800e724:	bfc1      	itttt	gt
 800e726:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e72a:	409f      	lslgt	r7, r3
 800e72c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e730:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e734:	bfd6      	itet	le
 800e736:	f1c3 0320 	rsble	r3, r3, #32
 800e73a:	ea47 0003 	orrgt.w	r0, r7, r3
 800e73e:	fa04 f003 	lslle.w	r0, r4, r3
 800e742:	f7f1 feff 	bl	8000544 <__aeabi_ui2d>
 800e746:	2201      	movs	r2, #1
 800e748:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e74c:	3e01      	subs	r6, #1
 800e74e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e750:	e776      	b.n	800e640 <_dtoa_r+0x100>
 800e752:	2301      	movs	r3, #1
 800e754:	e7b7      	b.n	800e6c6 <_dtoa_r+0x186>
 800e756:	9010      	str	r0, [sp, #64]	@ 0x40
 800e758:	e7b6      	b.n	800e6c8 <_dtoa_r+0x188>
 800e75a:	9b00      	ldr	r3, [sp, #0]
 800e75c:	1bdb      	subs	r3, r3, r7
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	427b      	negs	r3, r7
 800e762:	9308      	str	r3, [sp, #32]
 800e764:	2300      	movs	r3, #0
 800e766:	930d      	str	r3, [sp, #52]	@ 0x34
 800e768:	e7c3      	b.n	800e6f2 <_dtoa_r+0x1b2>
 800e76a:	2301      	movs	r3, #1
 800e76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e76e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e770:	eb07 0b03 	add.w	fp, r7, r3
 800e774:	f10b 0301 	add.w	r3, fp, #1
 800e778:	2b01      	cmp	r3, #1
 800e77a:	9303      	str	r3, [sp, #12]
 800e77c:	bfb8      	it	lt
 800e77e:	2301      	movlt	r3, #1
 800e780:	e006      	b.n	800e790 <_dtoa_r+0x250>
 800e782:	2301      	movs	r3, #1
 800e784:	9309      	str	r3, [sp, #36]	@ 0x24
 800e786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e788:	2b00      	cmp	r3, #0
 800e78a:	dd28      	ble.n	800e7de <_dtoa_r+0x29e>
 800e78c:	469b      	mov	fp, r3
 800e78e:	9303      	str	r3, [sp, #12]
 800e790:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e794:	2100      	movs	r1, #0
 800e796:	2204      	movs	r2, #4
 800e798:	f102 0514 	add.w	r5, r2, #20
 800e79c:	429d      	cmp	r5, r3
 800e79e:	d926      	bls.n	800e7ee <_dtoa_r+0x2ae>
 800e7a0:	6041      	str	r1, [r0, #4]
 800e7a2:	4648      	mov	r0, r9
 800e7a4:	f000 fd9a 	bl	800f2dc <_Balloc>
 800e7a8:	4682      	mov	sl, r0
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d142      	bne.n	800e834 <_dtoa_r+0x2f4>
 800e7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e828 <_dtoa_r+0x2e8>)
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	f240 11af 	movw	r1, #431	@ 0x1af
 800e7b6:	e6da      	b.n	800e56e <_dtoa_r+0x2e>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e7e3      	b.n	800e784 <_dtoa_r+0x244>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	e7d5      	b.n	800e76c <_dtoa_r+0x22c>
 800e7c0:	2401      	movs	r4, #1
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	9307      	str	r3, [sp, #28]
 800e7c6:	9409      	str	r4, [sp, #36]	@ 0x24
 800e7c8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f8cd b00c 	str.w	fp, [sp, #12]
 800e7d2:	2312      	movs	r3, #18
 800e7d4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e7d6:	e7db      	b.n	800e790 <_dtoa_r+0x250>
 800e7d8:	2301      	movs	r3, #1
 800e7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7dc:	e7f4      	b.n	800e7c8 <_dtoa_r+0x288>
 800e7de:	f04f 0b01 	mov.w	fp, #1
 800e7e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800e7e6:	465b      	mov	r3, fp
 800e7e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e7ec:	e7d0      	b.n	800e790 <_dtoa_r+0x250>
 800e7ee:	3101      	adds	r1, #1
 800e7f0:	0052      	lsls	r2, r2, #1
 800e7f2:	e7d1      	b.n	800e798 <_dtoa_r+0x258>
 800e7f4:	f3af 8000 	nop.w
 800e7f8:	636f4361 	.word	0x636f4361
 800e7fc:	3fd287a7 	.word	0x3fd287a7
 800e800:	8b60c8b3 	.word	0x8b60c8b3
 800e804:	3fc68a28 	.word	0x3fc68a28
 800e808:	509f79fb 	.word	0x509f79fb
 800e80c:	3fd34413 	.word	0x3fd34413
 800e810:	080128a1 	.word	0x080128a1
 800e814:	080128b8 	.word	0x080128b8
 800e818:	7ff00000 	.word	0x7ff00000
 800e81c:	08012871 	.word	0x08012871
 800e820:	3ff80000 	.word	0x3ff80000
 800e824:	08012a08 	.word	0x08012a08
 800e828:	08012910 	.word	0x08012910
 800e82c:	0801289d 	.word	0x0801289d
 800e830:	08012870 	.word	0x08012870
 800e834:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e838:	6018      	str	r0, [r3, #0]
 800e83a:	9b03      	ldr	r3, [sp, #12]
 800e83c:	2b0e      	cmp	r3, #14
 800e83e:	f200 80a1 	bhi.w	800e984 <_dtoa_r+0x444>
 800e842:	2c00      	cmp	r4, #0
 800e844:	f000 809e 	beq.w	800e984 <_dtoa_r+0x444>
 800e848:	2f00      	cmp	r7, #0
 800e84a:	dd33      	ble.n	800e8b4 <_dtoa_r+0x374>
 800e84c:	4b9c      	ldr	r3, [pc, #624]	@ (800eac0 <_dtoa_r+0x580>)
 800e84e:	f007 020f 	and.w	r2, r7, #15
 800e852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e856:	ed93 7b00 	vldr	d7, [r3]
 800e85a:	05f8      	lsls	r0, r7, #23
 800e85c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e860:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e864:	d516      	bpl.n	800e894 <_dtoa_r+0x354>
 800e866:	4b97      	ldr	r3, [pc, #604]	@ (800eac4 <_dtoa_r+0x584>)
 800e868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e86c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e870:	f7f2 f80c 	bl	800088c <__aeabi_ddiv>
 800e874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e878:	f004 040f 	and.w	r4, r4, #15
 800e87c:	2603      	movs	r6, #3
 800e87e:	4d91      	ldr	r5, [pc, #580]	@ (800eac4 <_dtoa_r+0x584>)
 800e880:	b954      	cbnz	r4, 800e898 <_dtoa_r+0x358>
 800e882:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e88a:	f7f1 ffff 	bl	800088c <__aeabi_ddiv>
 800e88e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e892:	e028      	b.n	800e8e6 <_dtoa_r+0x3a6>
 800e894:	2602      	movs	r6, #2
 800e896:	e7f2      	b.n	800e87e <_dtoa_r+0x33e>
 800e898:	07e1      	lsls	r1, r4, #31
 800e89a:	d508      	bpl.n	800e8ae <_dtoa_r+0x36e>
 800e89c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e8a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8a4:	f7f1 fec8 	bl	8000638 <__aeabi_dmul>
 800e8a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e8ac:	3601      	adds	r6, #1
 800e8ae:	1064      	asrs	r4, r4, #1
 800e8b0:	3508      	adds	r5, #8
 800e8b2:	e7e5      	b.n	800e880 <_dtoa_r+0x340>
 800e8b4:	f000 80af 	beq.w	800ea16 <_dtoa_r+0x4d6>
 800e8b8:	427c      	negs	r4, r7
 800e8ba:	4b81      	ldr	r3, [pc, #516]	@ (800eac0 <_dtoa_r+0x580>)
 800e8bc:	4d81      	ldr	r5, [pc, #516]	@ (800eac4 <_dtoa_r+0x584>)
 800e8be:	f004 020f 	and.w	r2, r4, #15
 800e8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e8ce:	f7f1 feb3 	bl	8000638 <__aeabi_dmul>
 800e8d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8d6:	1124      	asrs	r4, r4, #4
 800e8d8:	2300      	movs	r3, #0
 800e8da:	2602      	movs	r6, #2
 800e8dc:	2c00      	cmp	r4, #0
 800e8de:	f040 808f 	bne.w	800ea00 <_dtoa_r+0x4c0>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1d3      	bne.n	800e88e <_dtoa_r+0x34e>
 800e8e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f000 8094 	beq.w	800ea1a <_dtoa_r+0x4da>
 800e8f2:	4b75      	ldr	r3, [pc, #468]	@ (800eac8 <_dtoa_r+0x588>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f2 f90f 	bl	8000b1c <__aeabi_dcmplt>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f000 808b 	beq.w	800ea1a <_dtoa_r+0x4da>
 800e904:	9b03      	ldr	r3, [sp, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	f000 8087 	beq.w	800ea1a <_dtoa_r+0x4da>
 800e90c:	f1bb 0f00 	cmp.w	fp, #0
 800e910:	dd34      	ble.n	800e97c <_dtoa_r+0x43c>
 800e912:	4620      	mov	r0, r4
 800e914:	4b6d      	ldr	r3, [pc, #436]	@ (800eacc <_dtoa_r+0x58c>)
 800e916:	2200      	movs	r2, #0
 800e918:	4629      	mov	r1, r5
 800e91a:	f7f1 fe8d 	bl	8000638 <__aeabi_dmul>
 800e91e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e922:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e926:	3601      	adds	r6, #1
 800e928:	465c      	mov	r4, fp
 800e92a:	4630      	mov	r0, r6
 800e92c:	f7f1 fe1a 	bl	8000564 <__aeabi_i2d>
 800e930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e934:	f7f1 fe80 	bl	8000638 <__aeabi_dmul>
 800e938:	4b65      	ldr	r3, [pc, #404]	@ (800ead0 <_dtoa_r+0x590>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	f7f1 fcc6 	bl	80002cc <__adddf3>
 800e940:	4605      	mov	r5, r0
 800e942:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e946:	2c00      	cmp	r4, #0
 800e948:	d16a      	bne.n	800ea20 <_dtoa_r+0x4e0>
 800e94a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e94e:	4b61      	ldr	r3, [pc, #388]	@ (800ead4 <_dtoa_r+0x594>)
 800e950:	2200      	movs	r2, #0
 800e952:	f7f1 fcb9 	bl	80002c8 <__aeabi_dsub>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e95e:	462a      	mov	r2, r5
 800e960:	4633      	mov	r3, r6
 800e962:	f7f2 f8f9 	bl	8000b58 <__aeabi_dcmpgt>
 800e966:	2800      	cmp	r0, #0
 800e968:	f040 8298 	bne.w	800ee9c <_dtoa_r+0x95c>
 800e96c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e970:	462a      	mov	r2, r5
 800e972:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e976:	f7f2 f8d1 	bl	8000b1c <__aeabi_dcmplt>
 800e97a:	bb38      	cbnz	r0, 800e9cc <_dtoa_r+0x48c>
 800e97c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e980:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e984:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e986:	2b00      	cmp	r3, #0
 800e988:	f2c0 8157 	blt.w	800ec3a <_dtoa_r+0x6fa>
 800e98c:	2f0e      	cmp	r7, #14
 800e98e:	f300 8154 	bgt.w	800ec3a <_dtoa_r+0x6fa>
 800e992:	4b4b      	ldr	r3, [pc, #300]	@ (800eac0 <_dtoa_r+0x580>)
 800e994:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e998:	ed93 7b00 	vldr	d7, [r3]
 800e99c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	ed8d 7b00 	vstr	d7, [sp]
 800e9a4:	f280 80e5 	bge.w	800eb72 <_dtoa_r+0x632>
 800e9a8:	9b03      	ldr	r3, [sp, #12]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f300 80e1 	bgt.w	800eb72 <_dtoa_r+0x632>
 800e9b0:	d10c      	bne.n	800e9cc <_dtoa_r+0x48c>
 800e9b2:	4b48      	ldr	r3, [pc, #288]	@ (800ead4 <_dtoa_r+0x594>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	ec51 0b17 	vmov	r0, r1, d7
 800e9ba:	f7f1 fe3d 	bl	8000638 <__aeabi_dmul>
 800e9be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9c2:	f7f2 f8bf 	bl	8000b44 <__aeabi_dcmpge>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f000 8266 	beq.w	800ee98 <_dtoa_r+0x958>
 800e9cc:	2400      	movs	r4, #0
 800e9ce:	4625      	mov	r5, r4
 800e9d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9d2:	4656      	mov	r6, sl
 800e9d4:	ea6f 0803 	mvn.w	r8, r3
 800e9d8:	2700      	movs	r7, #0
 800e9da:	4621      	mov	r1, r4
 800e9dc:	4648      	mov	r0, r9
 800e9de:	f000 fcbd 	bl	800f35c <_Bfree>
 800e9e2:	2d00      	cmp	r5, #0
 800e9e4:	f000 80bd 	beq.w	800eb62 <_dtoa_r+0x622>
 800e9e8:	b12f      	cbz	r7, 800e9f6 <_dtoa_r+0x4b6>
 800e9ea:	42af      	cmp	r7, r5
 800e9ec:	d003      	beq.n	800e9f6 <_dtoa_r+0x4b6>
 800e9ee:	4639      	mov	r1, r7
 800e9f0:	4648      	mov	r0, r9
 800e9f2:	f000 fcb3 	bl	800f35c <_Bfree>
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	4648      	mov	r0, r9
 800e9fa:	f000 fcaf 	bl	800f35c <_Bfree>
 800e9fe:	e0b0      	b.n	800eb62 <_dtoa_r+0x622>
 800ea00:	07e2      	lsls	r2, r4, #31
 800ea02:	d505      	bpl.n	800ea10 <_dtoa_r+0x4d0>
 800ea04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea08:	f7f1 fe16 	bl	8000638 <__aeabi_dmul>
 800ea0c:	3601      	adds	r6, #1
 800ea0e:	2301      	movs	r3, #1
 800ea10:	1064      	asrs	r4, r4, #1
 800ea12:	3508      	adds	r5, #8
 800ea14:	e762      	b.n	800e8dc <_dtoa_r+0x39c>
 800ea16:	2602      	movs	r6, #2
 800ea18:	e765      	b.n	800e8e6 <_dtoa_r+0x3a6>
 800ea1a:	9c03      	ldr	r4, [sp, #12]
 800ea1c:	46b8      	mov	r8, r7
 800ea1e:	e784      	b.n	800e92a <_dtoa_r+0x3ea>
 800ea20:	4b27      	ldr	r3, [pc, #156]	@ (800eac0 <_dtoa_r+0x580>)
 800ea22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea2c:	4454      	add	r4, sl
 800ea2e:	2900      	cmp	r1, #0
 800ea30:	d054      	beq.n	800eadc <_dtoa_r+0x59c>
 800ea32:	4929      	ldr	r1, [pc, #164]	@ (800ead8 <_dtoa_r+0x598>)
 800ea34:	2000      	movs	r0, #0
 800ea36:	f7f1 ff29 	bl	800088c <__aeabi_ddiv>
 800ea3a:	4633      	mov	r3, r6
 800ea3c:	462a      	mov	r2, r5
 800ea3e:	f7f1 fc43 	bl	80002c8 <__aeabi_dsub>
 800ea42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea46:	4656      	mov	r6, sl
 800ea48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea4c:	f7f2 f8a4 	bl	8000b98 <__aeabi_d2iz>
 800ea50:	4605      	mov	r5, r0
 800ea52:	f7f1 fd87 	bl	8000564 <__aeabi_i2d>
 800ea56:	4602      	mov	r2, r0
 800ea58:	460b      	mov	r3, r1
 800ea5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea5e:	f7f1 fc33 	bl	80002c8 <__aeabi_dsub>
 800ea62:	3530      	adds	r5, #48	@ 0x30
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea6c:	f806 5b01 	strb.w	r5, [r6], #1
 800ea70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea74:	f7f2 f852 	bl	8000b1c <__aeabi_dcmplt>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d172      	bne.n	800eb62 <_dtoa_r+0x622>
 800ea7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea80:	4911      	ldr	r1, [pc, #68]	@ (800eac8 <_dtoa_r+0x588>)
 800ea82:	2000      	movs	r0, #0
 800ea84:	f7f1 fc20 	bl	80002c8 <__aeabi_dsub>
 800ea88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea8c:	f7f2 f846 	bl	8000b1c <__aeabi_dcmplt>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	f040 80b4 	bne.w	800ebfe <_dtoa_r+0x6be>
 800ea96:	42a6      	cmp	r6, r4
 800ea98:	f43f af70 	beq.w	800e97c <_dtoa_r+0x43c>
 800ea9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eaa0:	4b0a      	ldr	r3, [pc, #40]	@ (800eacc <_dtoa_r+0x58c>)
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f7f1 fdc8 	bl	8000638 <__aeabi_dmul>
 800eaa8:	4b08      	ldr	r3, [pc, #32]	@ (800eacc <_dtoa_r+0x58c>)
 800eaaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eaae:	2200      	movs	r2, #0
 800eab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eab4:	f7f1 fdc0 	bl	8000638 <__aeabi_dmul>
 800eab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eabc:	e7c4      	b.n	800ea48 <_dtoa_r+0x508>
 800eabe:	bf00      	nop
 800eac0:	08012a08 	.word	0x08012a08
 800eac4:	080129e0 	.word	0x080129e0
 800eac8:	3ff00000 	.word	0x3ff00000
 800eacc:	40240000 	.word	0x40240000
 800ead0:	401c0000 	.word	0x401c0000
 800ead4:	40140000 	.word	0x40140000
 800ead8:	3fe00000 	.word	0x3fe00000
 800eadc:	4631      	mov	r1, r6
 800eade:	4628      	mov	r0, r5
 800eae0:	f7f1 fdaa 	bl	8000638 <__aeabi_dmul>
 800eae4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eae8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eaea:	4656      	mov	r6, sl
 800eaec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaf0:	f7f2 f852 	bl	8000b98 <__aeabi_d2iz>
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	f7f1 fd35 	bl	8000564 <__aeabi_i2d>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb02:	f7f1 fbe1 	bl	80002c8 <__aeabi_dsub>
 800eb06:	3530      	adds	r5, #48	@ 0x30
 800eb08:	f806 5b01 	strb.w	r5, [r6], #1
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	42a6      	cmp	r6, r4
 800eb12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb16:	f04f 0200 	mov.w	r2, #0
 800eb1a:	d124      	bne.n	800eb66 <_dtoa_r+0x626>
 800eb1c:	4baf      	ldr	r3, [pc, #700]	@ (800eddc <_dtoa_r+0x89c>)
 800eb1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eb22:	f7f1 fbd3 	bl	80002cc <__adddf3>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb2e:	f7f2 f813 	bl	8000b58 <__aeabi_dcmpgt>
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d163      	bne.n	800ebfe <_dtoa_r+0x6be>
 800eb36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eb3a:	49a8      	ldr	r1, [pc, #672]	@ (800eddc <_dtoa_r+0x89c>)
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	f7f1 fbc3 	bl	80002c8 <__aeabi_dsub>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb4a:	f7f1 ffe7 	bl	8000b1c <__aeabi_dcmplt>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	f43f af14 	beq.w	800e97c <_dtoa_r+0x43c>
 800eb54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eb56:	1e73      	subs	r3, r6, #1
 800eb58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb5e:	2b30      	cmp	r3, #48	@ 0x30
 800eb60:	d0f8      	beq.n	800eb54 <_dtoa_r+0x614>
 800eb62:	4647      	mov	r7, r8
 800eb64:	e03b      	b.n	800ebde <_dtoa_r+0x69e>
 800eb66:	4b9e      	ldr	r3, [pc, #632]	@ (800ede0 <_dtoa_r+0x8a0>)
 800eb68:	f7f1 fd66 	bl	8000638 <__aeabi_dmul>
 800eb6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb70:	e7bc      	b.n	800eaec <_dtoa_r+0x5ac>
 800eb72:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eb76:	4656      	mov	r6, sl
 800eb78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	4629      	mov	r1, r5
 800eb80:	f7f1 fe84 	bl	800088c <__aeabi_ddiv>
 800eb84:	f7f2 f808 	bl	8000b98 <__aeabi_d2iz>
 800eb88:	4680      	mov	r8, r0
 800eb8a:	f7f1 fceb 	bl	8000564 <__aeabi_i2d>
 800eb8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb92:	f7f1 fd51 	bl	8000638 <__aeabi_dmul>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eba2:	f7f1 fb91 	bl	80002c8 <__aeabi_dsub>
 800eba6:	f806 4b01 	strb.w	r4, [r6], #1
 800ebaa:	9d03      	ldr	r5, [sp, #12]
 800ebac:	eba6 040a 	sub.w	r4, r6, sl
 800ebb0:	42a5      	cmp	r5, r4
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	d133      	bne.n	800ec20 <_dtoa_r+0x6e0>
 800ebb8:	f7f1 fb88 	bl	80002cc <__adddf3>
 800ebbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	460d      	mov	r5, r1
 800ebc4:	f7f1 ffc8 	bl	8000b58 <__aeabi_dcmpgt>
 800ebc8:	b9c0      	cbnz	r0, 800ebfc <_dtoa_r+0x6bc>
 800ebca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebce:	4620      	mov	r0, r4
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	f7f1 ff99 	bl	8000b08 <__aeabi_dcmpeq>
 800ebd6:	b110      	cbz	r0, 800ebde <_dtoa_r+0x69e>
 800ebd8:	f018 0f01 	tst.w	r8, #1
 800ebdc:	d10e      	bne.n	800ebfc <_dtoa_r+0x6bc>
 800ebde:	9902      	ldr	r1, [sp, #8]
 800ebe0:	4648      	mov	r0, r9
 800ebe2:	f000 fbbb 	bl	800f35c <_Bfree>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	7033      	strb	r3, [r6, #0]
 800ebea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebec:	3701      	adds	r7, #1
 800ebee:	601f      	str	r7, [r3, #0]
 800ebf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 824b 	beq.w	800f08e <_dtoa_r+0xb4e>
 800ebf8:	601e      	str	r6, [r3, #0]
 800ebfa:	e248      	b.n	800f08e <_dtoa_r+0xb4e>
 800ebfc:	46b8      	mov	r8, r7
 800ebfe:	4633      	mov	r3, r6
 800ec00:	461e      	mov	r6, r3
 800ec02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec06:	2a39      	cmp	r2, #57	@ 0x39
 800ec08:	d106      	bne.n	800ec18 <_dtoa_r+0x6d8>
 800ec0a:	459a      	cmp	sl, r3
 800ec0c:	d1f8      	bne.n	800ec00 <_dtoa_r+0x6c0>
 800ec0e:	2230      	movs	r2, #48	@ 0x30
 800ec10:	f108 0801 	add.w	r8, r8, #1
 800ec14:	f88a 2000 	strb.w	r2, [sl]
 800ec18:	781a      	ldrb	r2, [r3, #0]
 800ec1a:	3201      	adds	r2, #1
 800ec1c:	701a      	strb	r2, [r3, #0]
 800ec1e:	e7a0      	b.n	800eb62 <_dtoa_r+0x622>
 800ec20:	4b6f      	ldr	r3, [pc, #444]	@ (800ede0 <_dtoa_r+0x8a0>)
 800ec22:	2200      	movs	r2, #0
 800ec24:	f7f1 fd08 	bl	8000638 <__aeabi_dmul>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	f7f1 ff6a 	bl	8000b08 <__aeabi_dcmpeq>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d09f      	beq.n	800eb78 <_dtoa_r+0x638>
 800ec38:	e7d1      	b.n	800ebde <_dtoa_r+0x69e>
 800ec3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec3c:	2a00      	cmp	r2, #0
 800ec3e:	f000 80ea 	beq.w	800ee16 <_dtoa_r+0x8d6>
 800ec42:	9a07      	ldr	r2, [sp, #28]
 800ec44:	2a01      	cmp	r2, #1
 800ec46:	f300 80cd 	bgt.w	800ede4 <_dtoa_r+0x8a4>
 800ec4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec4c:	2a00      	cmp	r2, #0
 800ec4e:	f000 80c1 	beq.w	800edd4 <_dtoa_r+0x894>
 800ec52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec56:	9c08      	ldr	r4, [sp, #32]
 800ec58:	9e00      	ldr	r6, [sp, #0]
 800ec5a:	9a00      	ldr	r2, [sp, #0]
 800ec5c:	441a      	add	r2, r3
 800ec5e:	9200      	str	r2, [sp, #0]
 800ec60:	9a06      	ldr	r2, [sp, #24]
 800ec62:	2101      	movs	r1, #1
 800ec64:	441a      	add	r2, r3
 800ec66:	4648      	mov	r0, r9
 800ec68:	9206      	str	r2, [sp, #24]
 800ec6a:	f000 fc2b 	bl	800f4c4 <__i2b>
 800ec6e:	4605      	mov	r5, r0
 800ec70:	b166      	cbz	r6, 800ec8c <_dtoa_r+0x74c>
 800ec72:	9b06      	ldr	r3, [sp, #24]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	dd09      	ble.n	800ec8c <_dtoa_r+0x74c>
 800ec78:	42b3      	cmp	r3, r6
 800ec7a:	9a00      	ldr	r2, [sp, #0]
 800ec7c:	bfa8      	it	ge
 800ec7e:	4633      	movge	r3, r6
 800ec80:	1ad2      	subs	r2, r2, r3
 800ec82:	9200      	str	r2, [sp, #0]
 800ec84:	9a06      	ldr	r2, [sp, #24]
 800ec86:	1af6      	subs	r6, r6, r3
 800ec88:	1ad3      	subs	r3, r2, r3
 800ec8a:	9306      	str	r3, [sp, #24]
 800ec8c:	9b08      	ldr	r3, [sp, #32]
 800ec8e:	b30b      	cbz	r3, 800ecd4 <_dtoa_r+0x794>
 800ec90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f000 80c6 	beq.w	800ee24 <_dtoa_r+0x8e4>
 800ec98:	2c00      	cmp	r4, #0
 800ec9a:	f000 80c0 	beq.w	800ee1e <_dtoa_r+0x8de>
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4622      	mov	r2, r4
 800eca2:	4648      	mov	r0, r9
 800eca4:	f000 fcc6 	bl	800f634 <__pow5mult>
 800eca8:	9a02      	ldr	r2, [sp, #8]
 800ecaa:	4601      	mov	r1, r0
 800ecac:	4605      	mov	r5, r0
 800ecae:	4648      	mov	r0, r9
 800ecb0:	f000 fc1e 	bl	800f4f0 <__multiply>
 800ecb4:	9902      	ldr	r1, [sp, #8]
 800ecb6:	4680      	mov	r8, r0
 800ecb8:	4648      	mov	r0, r9
 800ecba:	f000 fb4f 	bl	800f35c <_Bfree>
 800ecbe:	9b08      	ldr	r3, [sp, #32]
 800ecc0:	1b1b      	subs	r3, r3, r4
 800ecc2:	9308      	str	r3, [sp, #32]
 800ecc4:	f000 80b1 	beq.w	800ee2a <_dtoa_r+0x8ea>
 800ecc8:	9a08      	ldr	r2, [sp, #32]
 800ecca:	4641      	mov	r1, r8
 800eccc:	4648      	mov	r0, r9
 800ecce:	f000 fcb1 	bl	800f634 <__pow5mult>
 800ecd2:	9002      	str	r0, [sp, #8]
 800ecd4:	2101      	movs	r1, #1
 800ecd6:	4648      	mov	r0, r9
 800ecd8:	f000 fbf4 	bl	800f4c4 <__i2b>
 800ecdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ecde:	4604      	mov	r4, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f000 81d8 	beq.w	800f096 <_dtoa_r+0xb56>
 800ece6:	461a      	mov	r2, r3
 800ece8:	4601      	mov	r1, r0
 800ecea:	4648      	mov	r0, r9
 800ecec:	f000 fca2 	bl	800f634 <__pow5mult>
 800ecf0:	9b07      	ldr	r3, [sp, #28]
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	f300 809f 	bgt.w	800ee38 <_dtoa_r+0x8f8>
 800ecfa:	9b04      	ldr	r3, [sp, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f040 8097 	bne.w	800ee30 <_dtoa_r+0x8f0>
 800ed02:	9b05      	ldr	r3, [sp, #20]
 800ed04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f040 8093 	bne.w	800ee34 <_dtoa_r+0x8f4>
 800ed0e:	9b05      	ldr	r3, [sp, #20]
 800ed10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed14:	0d1b      	lsrs	r3, r3, #20
 800ed16:	051b      	lsls	r3, r3, #20
 800ed18:	b133      	cbz	r3, 800ed28 <_dtoa_r+0x7e8>
 800ed1a:	9b00      	ldr	r3, [sp, #0]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	9b06      	ldr	r3, [sp, #24]
 800ed22:	3301      	adds	r3, #1
 800ed24:	9306      	str	r3, [sp, #24]
 800ed26:	2301      	movs	r3, #1
 800ed28:	9308      	str	r3, [sp, #32]
 800ed2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f000 81b8 	beq.w	800f0a2 <_dtoa_r+0xb62>
 800ed32:	6923      	ldr	r3, [r4, #16]
 800ed34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed38:	6918      	ldr	r0, [r3, #16]
 800ed3a:	f000 fb77 	bl	800f42c <__hi0bits>
 800ed3e:	f1c0 0020 	rsb	r0, r0, #32
 800ed42:	9b06      	ldr	r3, [sp, #24]
 800ed44:	4418      	add	r0, r3
 800ed46:	f010 001f 	ands.w	r0, r0, #31
 800ed4a:	f000 8082 	beq.w	800ee52 <_dtoa_r+0x912>
 800ed4e:	f1c0 0320 	rsb	r3, r0, #32
 800ed52:	2b04      	cmp	r3, #4
 800ed54:	dd73      	ble.n	800ee3e <_dtoa_r+0x8fe>
 800ed56:	9b00      	ldr	r3, [sp, #0]
 800ed58:	f1c0 001c 	rsb	r0, r0, #28
 800ed5c:	4403      	add	r3, r0
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	9b06      	ldr	r3, [sp, #24]
 800ed62:	4403      	add	r3, r0
 800ed64:	4406      	add	r6, r0
 800ed66:	9306      	str	r3, [sp, #24]
 800ed68:	9b00      	ldr	r3, [sp, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	dd05      	ble.n	800ed7a <_dtoa_r+0x83a>
 800ed6e:	9902      	ldr	r1, [sp, #8]
 800ed70:	461a      	mov	r2, r3
 800ed72:	4648      	mov	r0, r9
 800ed74:	f000 fcb8 	bl	800f6e8 <__lshift>
 800ed78:	9002      	str	r0, [sp, #8]
 800ed7a:	9b06      	ldr	r3, [sp, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	dd05      	ble.n	800ed8c <_dtoa_r+0x84c>
 800ed80:	4621      	mov	r1, r4
 800ed82:	461a      	mov	r2, r3
 800ed84:	4648      	mov	r0, r9
 800ed86:	f000 fcaf 	bl	800f6e8 <__lshift>
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d061      	beq.n	800ee56 <_dtoa_r+0x916>
 800ed92:	9802      	ldr	r0, [sp, #8]
 800ed94:	4621      	mov	r1, r4
 800ed96:	f000 fd13 	bl	800f7c0 <__mcmp>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	da5b      	bge.n	800ee56 <_dtoa_r+0x916>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	9902      	ldr	r1, [sp, #8]
 800eda2:	220a      	movs	r2, #10
 800eda4:	4648      	mov	r0, r9
 800eda6:	f000 fafb 	bl	800f3a0 <__multadd>
 800edaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edac:	9002      	str	r0, [sp, #8]
 800edae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f000 8177 	beq.w	800f0a6 <_dtoa_r+0xb66>
 800edb8:	4629      	mov	r1, r5
 800edba:	2300      	movs	r3, #0
 800edbc:	220a      	movs	r2, #10
 800edbe:	4648      	mov	r0, r9
 800edc0:	f000 faee 	bl	800f3a0 <__multadd>
 800edc4:	f1bb 0f00 	cmp.w	fp, #0
 800edc8:	4605      	mov	r5, r0
 800edca:	dc6f      	bgt.n	800eeac <_dtoa_r+0x96c>
 800edcc:	9b07      	ldr	r3, [sp, #28]
 800edce:	2b02      	cmp	r3, #2
 800edd0:	dc49      	bgt.n	800ee66 <_dtoa_r+0x926>
 800edd2:	e06b      	b.n	800eeac <_dtoa_r+0x96c>
 800edd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800edd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800edda:	e73c      	b.n	800ec56 <_dtoa_r+0x716>
 800eddc:	3fe00000 	.word	0x3fe00000
 800ede0:	40240000 	.word	0x40240000
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	1e5c      	subs	r4, r3, #1
 800ede8:	9b08      	ldr	r3, [sp, #32]
 800edea:	42a3      	cmp	r3, r4
 800edec:	db09      	blt.n	800ee02 <_dtoa_r+0x8c2>
 800edee:	1b1c      	subs	r4, r3, r4
 800edf0:	9b03      	ldr	r3, [sp, #12]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f6bf af30 	bge.w	800ec58 <_dtoa_r+0x718>
 800edf8:	9b00      	ldr	r3, [sp, #0]
 800edfa:	9a03      	ldr	r2, [sp, #12]
 800edfc:	1a9e      	subs	r6, r3, r2
 800edfe:	2300      	movs	r3, #0
 800ee00:	e72b      	b.n	800ec5a <_dtoa_r+0x71a>
 800ee02:	9b08      	ldr	r3, [sp, #32]
 800ee04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee06:	9408      	str	r4, [sp, #32]
 800ee08:	1ae3      	subs	r3, r4, r3
 800ee0a:	441a      	add	r2, r3
 800ee0c:	9e00      	ldr	r6, [sp, #0]
 800ee0e:	9b03      	ldr	r3, [sp, #12]
 800ee10:	920d      	str	r2, [sp, #52]	@ 0x34
 800ee12:	2400      	movs	r4, #0
 800ee14:	e721      	b.n	800ec5a <_dtoa_r+0x71a>
 800ee16:	9c08      	ldr	r4, [sp, #32]
 800ee18:	9e00      	ldr	r6, [sp, #0]
 800ee1a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ee1c:	e728      	b.n	800ec70 <_dtoa_r+0x730>
 800ee1e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ee22:	e751      	b.n	800ecc8 <_dtoa_r+0x788>
 800ee24:	9a08      	ldr	r2, [sp, #32]
 800ee26:	9902      	ldr	r1, [sp, #8]
 800ee28:	e750      	b.n	800eccc <_dtoa_r+0x78c>
 800ee2a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee2e:	e751      	b.n	800ecd4 <_dtoa_r+0x794>
 800ee30:	2300      	movs	r3, #0
 800ee32:	e779      	b.n	800ed28 <_dtoa_r+0x7e8>
 800ee34:	9b04      	ldr	r3, [sp, #16]
 800ee36:	e777      	b.n	800ed28 <_dtoa_r+0x7e8>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	9308      	str	r3, [sp, #32]
 800ee3c:	e779      	b.n	800ed32 <_dtoa_r+0x7f2>
 800ee3e:	d093      	beq.n	800ed68 <_dtoa_r+0x828>
 800ee40:	9a00      	ldr	r2, [sp, #0]
 800ee42:	331c      	adds	r3, #28
 800ee44:	441a      	add	r2, r3
 800ee46:	9200      	str	r2, [sp, #0]
 800ee48:	9a06      	ldr	r2, [sp, #24]
 800ee4a:	441a      	add	r2, r3
 800ee4c:	441e      	add	r6, r3
 800ee4e:	9206      	str	r2, [sp, #24]
 800ee50:	e78a      	b.n	800ed68 <_dtoa_r+0x828>
 800ee52:	4603      	mov	r3, r0
 800ee54:	e7f4      	b.n	800ee40 <_dtoa_r+0x900>
 800ee56:	9b03      	ldr	r3, [sp, #12]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	46b8      	mov	r8, r7
 800ee5c:	dc20      	bgt.n	800eea0 <_dtoa_r+0x960>
 800ee5e:	469b      	mov	fp, r3
 800ee60:	9b07      	ldr	r3, [sp, #28]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	dd1e      	ble.n	800eea4 <_dtoa_r+0x964>
 800ee66:	f1bb 0f00 	cmp.w	fp, #0
 800ee6a:	f47f adb1 	bne.w	800e9d0 <_dtoa_r+0x490>
 800ee6e:	4621      	mov	r1, r4
 800ee70:	465b      	mov	r3, fp
 800ee72:	2205      	movs	r2, #5
 800ee74:	4648      	mov	r0, r9
 800ee76:	f000 fa93 	bl	800f3a0 <__multadd>
 800ee7a:	4601      	mov	r1, r0
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	9802      	ldr	r0, [sp, #8]
 800ee80:	f000 fc9e 	bl	800f7c0 <__mcmp>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	f77f ada3 	ble.w	800e9d0 <_dtoa_r+0x490>
 800ee8a:	4656      	mov	r6, sl
 800ee8c:	2331      	movs	r3, #49	@ 0x31
 800ee8e:	f806 3b01 	strb.w	r3, [r6], #1
 800ee92:	f108 0801 	add.w	r8, r8, #1
 800ee96:	e59f      	b.n	800e9d8 <_dtoa_r+0x498>
 800ee98:	9c03      	ldr	r4, [sp, #12]
 800ee9a:	46b8      	mov	r8, r7
 800ee9c:	4625      	mov	r5, r4
 800ee9e:	e7f4      	b.n	800ee8a <_dtoa_r+0x94a>
 800eea0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800eea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f000 8101 	beq.w	800f0ae <_dtoa_r+0xb6e>
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	dd05      	ble.n	800eebc <_dtoa_r+0x97c>
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4632      	mov	r2, r6
 800eeb4:	4648      	mov	r0, r9
 800eeb6:	f000 fc17 	bl	800f6e8 <__lshift>
 800eeba:	4605      	mov	r5, r0
 800eebc:	9b08      	ldr	r3, [sp, #32]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d05c      	beq.n	800ef7c <_dtoa_r+0xa3c>
 800eec2:	6869      	ldr	r1, [r5, #4]
 800eec4:	4648      	mov	r0, r9
 800eec6:	f000 fa09 	bl	800f2dc <_Balloc>
 800eeca:	4606      	mov	r6, r0
 800eecc:	b928      	cbnz	r0, 800eeda <_dtoa_r+0x99a>
 800eece:	4b82      	ldr	r3, [pc, #520]	@ (800f0d8 <_dtoa_r+0xb98>)
 800eed0:	4602      	mov	r2, r0
 800eed2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eed6:	f7ff bb4a 	b.w	800e56e <_dtoa_r+0x2e>
 800eeda:	692a      	ldr	r2, [r5, #16]
 800eedc:	3202      	adds	r2, #2
 800eede:	0092      	lsls	r2, r2, #2
 800eee0:	f105 010c 	add.w	r1, r5, #12
 800eee4:	300c      	adds	r0, #12
 800eee6:	f7ff fa93 	bl	800e410 <memcpy>
 800eeea:	2201      	movs	r2, #1
 800eeec:	4631      	mov	r1, r6
 800eeee:	4648      	mov	r0, r9
 800eef0:	f000 fbfa 	bl	800f6e8 <__lshift>
 800eef4:	f10a 0301 	add.w	r3, sl, #1
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	eb0a 030b 	add.w	r3, sl, fp
 800eefe:	9308      	str	r3, [sp, #32]
 800ef00:	9b04      	ldr	r3, [sp, #16]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	462f      	mov	r7, r5
 800ef08:	9306      	str	r3, [sp, #24]
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	9b00      	ldr	r3, [sp, #0]
 800ef0e:	9802      	ldr	r0, [sp, #8]
 800ef10:	4621      	mov	r1, r4
 800ef12:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ef16:	f7ff fa89 	bl	800e42c <quorem>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	3330      	adds	r3, #48	@ 0x30
 800ef1e:	9003      	str	r0, [sp, #12]
 800ef20:	4639      	mov	r1, r7
 800ef22:	9802      	ldr	r0, [sp, #8]
 800ef24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef26:	f000 fc4b 	bl	800f7c0 <__mcmp>
 800ef2a:	462a      	mov	r2, r5
 800ef2c:	9004      	str	r0, [sp, #16]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	4648      	mov	r0, r9
 800ef32:	f000 fc61 	bl	800f7f8 <__mdiff>
 800ef36:	68c2      	ldr	r2, [r0, #12]
 800ef38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef3a:	4606      	mov	r6, r0
 800ef3c:	bb02      	cbnz	r2, 800ef80 <_dtoa_r+0xa40>
 800ef3e:	4601      	mov	r1, r0
 800ef40:	9802      	ldr	r0, [sp, #8]
 800ef42:	f000 fc3d 	bl	800f7c0 <__mcmp>
 800ef46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef48:	4602      	mov	r2, r0
 800ef4a:	4631      	mov	r1, r6
 800ef4c:	4648      	mov	r0, r9
 800ef4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef52:	f000 fa03 	bl	800f35c <_Bfree>
 800ef56:	9b07      	ldr	r3, [sp, #28]
 800ef58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef5a:	9e00      	ldr	r6, [sp, #0]
 800ef5c:	ea42 0103 	orr.w	r1, r2, r3
 800ef60:	9b06      	ldr	r3, [sp, #24]
 800ef62:	4319      	orrs	r1, r3
 800ef64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef66:	d10d      	bne.n	800ef84 <_dtoa_r+0xa44>
 800ef68:	2b39      	cmp	r3, #57	@ 0x39
 800ef6a:	d027      	beq.n	800efbc <_dtoa_r+0xa7c>
 800ef6c:	9a04      	ldr	r2, [sp, #16]
 800ef6e:	2a00      	cmp	r2, #0
 800ef70:	dd01      	ble.n	800ef76 <_dtoa_r+0xa36>
 800ef72:	9b03      	ldr	r3, [sp, #12]
 800ef74:	3331      	adds	r3, #49	@ 0x31
 800ef76:	f88b 3000 	strb.w	r3, [fp]
 800ef7a:	e52e      	b.n	800e9da <_dtoa_r+0x49a>
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	e7b9      	b.n	800eef4 <_dtoa_r+0x9b4>
 800ef80:	2201      	movs	r2, #1
 800ef82:	e7e2      	b.n	800ef4a <_dtoa_r+0xa0a>
 800ef84:	9904      	ldr	r1, [sp, #16]
 800ef86:	2900      	cmp	r1, #0
 800ef88:	db04      	blt.n	800ef94 <_dtoa_r+0xa54>
 800ef8a:	9807      	ldr	r0, [sp, #28]
 800ef8c:	4301      	orrs	r1, r0
 800ef8e:	9806      	ldr	r0, [sp, #24]
 800ef90:	4301      	orrs	r1, r0
 800ef92:	d120      	bne.n	800efd6 <_dtoa_r+0xa96>
 800ef94:	2a00      	cmp	r2, #0
 800ef96:	ddee      	ble.n	800ef76 <_dtoa_r+0xa36>
 800ef98:	9902      	ldr	r1, [sp, #8]
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	4648      	mov	r0, r9
 800efa0:	f000 fba2 	bl	800f6e8 <__lshift>
 800efa4:	4621      	mov	r1, r4
 800efa6:	9002      	str	r0, [sp, #8]
 800efa8:	f000 fc0a 	bl	800f7c0 <__mcmp>
 800efac:	2800      	cmp	r0, #0
 800efae:	9b00      	ldr	r3, [sp, #0]
 800efb0:	dc02      	bgt.n	800efb8 <_dtoa_r+0xa78>
 800efb2:	d1e0      	bne.n	800ef76 <_dtoa_r+0xa36>
 800efb4:	07da      	lsls	r2, r3, #31
 800efb6:	d5de      	bpl.n	800ef76 <_dtoa_r+0xa36>
 800efb8:	2b39      	cmp	r3, #57	@ 0x39
 800efba:	d1da      	bne.n	800ef72 <_dtoa_r+0xa32>
 800efbc:	2339      	movs	r3, #57	@ 0x39
 800efbe:	f88b 3000 	strb.w	r3, [fp]
 800efc2:	4633      	mov	r3, r6
 800efc4:	461e      	mov	r6, r3
 800efc6:	3b01      	subs	r3, #1
 800efc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efcc:	2a39      	cmp	r2, #57	@ 0x39
 800efce:	d04e      	beq.n	800f06e <_dtoa_r+0xb2e>
 800efd0:	3201      	adds	r2, #1
 800efd2:	701a      	strb	r2, [r3, #0]
 800efd4:	e501      	b.n	800e9da <_dtoa_r+0x49a>
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	dd03      	ble.n	800efe2 <_dtoa_r+0xaa2>
 800efda:	2b39      	cmp	r3, #57	@ 0x39
 800efdc:	d0ee      	beq.n	800efbc <_dtoa_r+0xa7c>
 800efde:	3301      	adds	r3, #1
 800efe0:	e7c9      	b.n	800ef76 <_dtoa_r+0xa36>
 800efe2:	9a00      	ldr	r2, [sp, #0]
 800efe4:	9908      	ldr	r1, [sp, #32]
 800efe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800efea:	428a      	cmp	r2, r1
 800efec:	d028      	beq.n	800f040 <_dtoa_r+0xb00>
 800efee:	9902      	ldr	r1, [sp, #8]
 800eff0:	2300      	movs	r3, #0
 800eff2:	220a      	movs	r2, #10
 800eff4:	4648      	mov	r0, r9
 800eff6:	f000 f9d3 	bl	800f3a0 <__multadd>
 800effa:	42af      	cmp	r7, r5
 800effc:	9002      	str	r0, [sp, #8]
 800effe:	f04f 0300 	mov.w	r3, #0
 800f002:	f04f 020a 	mov.w	r2, #10
 800f006:	4639      	mov	r1, r7
 800f008:	4648      	mov	r0, r9
 800f00a:	d107      	bne.n	800f01c <_dtoa_r+0xadc>
 800f00c:	f000 f9c8 	bl	800f3a0 <__multadd>
 800f010:	4607      	mov	r7, r0
 800f012:	4605      	mov	r5, r0
 800f014:	9b00      	ldr	r3, [sp, #0]
 800f016:	3301      	adds	r3, #1
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	e777      	b.n	800ef0c <_dtoa_r+0x9cc>
 800f01c:	f000 f9c0 	bl	800f3a0 <__multadd>
 800f020:	4629      	mov	r1, r5
 800f022:	4607      	mov	r7, r0
 800f024:	2300      	movs	r3, #0
 800f026:	220a      	movs	r2, #10
 800f028:	4648      	mov	r0, r9
 800f02a:	f000 f9b9 	bl	800f3a0 <__multadd>
 800f02e:	4605      	mov	r5, r0
 800f030:	e7f0      	b.n	800f014 <_dtoa_r+0xad4>
 800f032:	f1bb 0f00 	cmp.w	fp, #0
 800f036:	bfcc      	ite	gt
 800f038:	465e      	movgt	r6, fp
 800f03a:	2601      	movle	r6, #1
 800f03c:	4456      	add	r6, sl
 800f03e:	2700      	movs	r7, #0
 800f040:	9902      	ldr	r1, [sp, #8]
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	2201      	movs	r2, #1
 800f046:	4648      	mov	r0, r9
 800f048:	f000 fb4e 	bl	800f6e8 <__lshift>
 800f04c:	4621      	mov	r1, r4
 800f04e:	9002      	str	r0, [sp, #8]
 800f050:	f000 fbb6 	bl	800f7c0 <__mcmp>
 800f054:	2800      	cmp	r0, #0
 800f056:	dcb4      	bgt.n	800efc2 <_dtoa_r+0xa82>
 800f058:	d102      	bne.n	800f060 <_dtoa_r+0xb20>
 800f05a:	9b00      	ldr	r3, [sp, #0]
 800f05c:	07db      	lsls	r3, r3, #31
 800f05e:	d4b0      	bmi.n	800efc2 <_dtoa_r+0xa82>
 800f060:	4633      	mov	r3, r6
 800f062:	461e      	mov	r6, r3
 800f064:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f068:	2a30      	cmp	r2, #48	@ 0x30
 800f06a:	d0fa      	beq.n	800f062 <_dtoa_r+0xb22>
 800f06c:	e4b5      	b.n	800e9da <_dtoa_r+0x49a>
 800f06e:	459a      	cmp	sl, r3
 800f070:	d1a8      	bne.n	800efc4 <_dtoa_r+0xa84>
 800f072:	2331      	movs	r3, #49	@ 0x31
 800f074:	f108 0801 	add.w	r8, r8, #1
 800f078:	f88a 3000 	strb.w	r3, [sl]
 800f07c:	e4ad      	b.n	800e9da <_dtoa_r+0x49a>
 800f07e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f080:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f0dc <_dtoa_r+0xb9c>
 800f084:	b11b      	cbz	r3, 800f08e <_dtoa_r+0xb4e>
 800f086:	f10a 0308 	add.w	r3, sl, #8
 800f08a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	4650      	mov	r0, sl
 800f090:	b017      	add	sp, #92	@ 0x5c
 800f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f096:	9b07      	ldr	r3, [sp, #28]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	f77f ae2e 	ble.w	800ecfa <_dtoa_r+0x7ba>
 800f09e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0a0:	9308      	str	r3, [sp, #32]
 800f0a2:	2001      	movs	r0, #1
 800f0a4:	e64d      	b.n	800ed42 <_dtoa_r+0x802>
 800f0a6:	f1bb 0f00 	cmp.w	fp, #0
 800f0aa:	f77f aed9 	ble.w	800ee60 <_dtoa_r+0x920>
 800f0ae:	4656      	mov	r6, sl
 800f0b0:	9802      	ldr	r0, [sp, #8]
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	f7ff f9ba 	bl	800e42c <quorem>
 800f0b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f0bc:	f806 3b01 	strb.w	r3, [r6], #1
 800f0c0:	eba6 020a 	sub.w	r2, r6, sl
 800f0c4:	4593      	cmp	fp, r2
 800f0c6:	ddb4      	ble.n	800f032 <_dtoa_r+0xaf2>
 800f0c8:	9902      	ldr	r1, [sp, #8]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	220a      	movs	r2, #10
 800f0ce:	4648      	mov	r0, r9
 800f0d0:	f000 f966 	bl	800f3a0 <__multadd>
 800f0d4:	9002      	str	r0, [sp, #8]
 800f0d6:	e7eb      	b.n	800f0b0 <_dtoa_r+0xb70>
 800f0d8:	08012910 	.word	0x08012910
 800f0dc:	08012894 	.word	0x08012894

0800f0e0 <_free_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	d041      	beq.n	800f16c <_free_r+0x8c>
 800f0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0ec:	1f0c      	subs	r4, r1, #4
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	bfb8      	it	lt
 800f0f2:	18e4      	addlt	r4, r4, r3
 800f0f4:	f7ff f864 	bl	800e1c0 <__malloc_lock>
 800f0f8:	4a1d      	ldr	r2, [pc, #116]	@ (800f170 <_free_r+0x90>)
 800f0fa:	6813      	ldr	r3, [r2, #0]
 800f0fc:	b933      	cbnz	r3, 800f10c <_free_r+0x2c>
 800f0fe:	6063      	str	r3, [r4, #4]
 800f100:	6014      	str	r4, [r2, #0]
 800f102:	4628      	mov	r0, r5
 800f104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f108:	f7ff b860 	b.w	800e1cc <__malloc_unlock>
 800f10c:	42a3      	cmp	r3, r4
 800f10e:	d908      	bls.n	800f122 <_free_r+0x42>
 800f110:	6820      	ldr	r0, [r4, #0]
 800f112:	1821      	adds	r1, r4, r0
 800f114:	428b      	cmp	r3, r1
 800f116:	bf01      	itttt	eq
 800f118:	6819      	ldreq	r1, [r3, #0]
 800f11a:	685b      	ldreq	r3, [r3, #4]
 800f11c:	1809      	addeq	r1, r1, r0
 800f11e:	6021      	streq	r1, [r4, #0]
 800f120:	e7ed      	b.n	800f0fe <_free_r+0x1e>
 800f122:	461a      	mov	r2, r3
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	b10b      	cbz	r3, 800f12c <_free_r+0x4c>
 800f128:	42a3      	cmp	r3, r4
 800f12a:	d9fa      	bls.n	800f122 <_free_r+0x42>
 800f12c:	6811      	ldr	r1, [r2, #0]
 800f12e:	1850      	adds	r0, r2, r1
 800f130:	42a0      	cmp	r0, r4
 800f132:	d10b      	bne.n	800f14c <_free_r+0x6c>
 800f134:	6820      	ldr	r0, [r4, #0]
 800f136:	4401      	add	r1, r0
 800f138:	1850      	adds	r0, r2, r1
 800f13a:	4283      	cmp	r3, r0
 800f13c:	6011      	str	r1, [r2, #0]
 800f13e:	d1e0      	bne.n	800f102 <_free_r+0x22>
 800f140:	6818      	ldr	r0, [r3, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	6053      	str	r3, [r2, #4]
 800f146:	4408      	add	r0, r1
 800f148:	6010      	str	r0, [r2, #0]
 800f14a:	e7da      	b.n	800f102 <_free_r+0x22>
 800f14c:	d902      	bls.n	800f154 <_free_r+0x74>
 800f14e:	230c      	movs	r3, #12
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	e7d6      	b.n	800f102 <_free_r+0x22>
 800f154:	6820      	ldr	r0, [r4, #0]
 800f156:	1821      	adds	r1, r4, r0
 800f158:	428b      	cmp	r3, r1
 800f15a:	bf04      	itt	eq
 800f15c:	6819      	ldreq	r1, [r3, #0]
 800f15e:	685b      	ldreq	r3, [r3, #4]
 800f160:	6063      	str	r3, [r4, #4]
 800f162:	bf04      	itt	eq
 800f164:	1809      	addeq	r1, r1, r0
 800f166:	6021      	streq	r1, [r4, #0]
 800f168:	6054      	str	r4, [r2, #4]
 800f16a:	e7ca      	b.n	800f102 <_free_r+0x22>
 800f16c:	bd38      	pop	{r3, r4, r5, pc}
 800f16e:	bf00      	nop
 800f170:	20000968 	.word	0x20000968

0800f174 <malloc>:
 800f174:	4b02      	ldr	r3, [pc, #8]	@ (800f180 <malloc+0xc>)
 800f176:	4601      	mov	r1, r0
 800f178:	6818      	ldr	r0, [r3, #0]
 800f17a:	f7fe be15 	b.w	800dda8 <_malloc_r>
 800f17e:	bf00      	nop
 800f180:	20000058 	.word	0x20000058

0800f184 <__sflush_r>:
 800f184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18c:	0716      	lsls	r6, r2, #28
 800f18e:	4605      	mov	r5, r0
 800f190:	460c      	mov	r4, r1
 800f192:	d454      	bmi.n	800f23e <__sflush_r+0xba>
 800f194:	684b      	ldr	r3, [r1, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	dc02      	bgt.n	800f1a0 <__sflush_r+0x1c>
 800f19a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	dd48      	ble.n	800f232 <__sflush_r+0xae>
 800f1a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1a2:	2e00      	cmp	r6, #0
 800f1a4:	d045      	beq.n	800f232 <__sflush_r+0xae>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f1ac:	682f      	ldr	r7, [r5, #0]
 800f1ae:	6a21      	ldr	r1, [r4, #32]
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	d030      	beq.n	800f216 <__sflush_r+0x92>
 800f1b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1b6:	89a3      	ldrh	r3, [r4, #12]
 800f1b8:	0759      	lsls	r1, r3, #29
 800f1ba:	d505      	bpl.n	800f1c8 <__sflush_r+0x44>
 800f1bc:	6863      	ldr	r3, [r4, #4]
 800f1be:	1ad2      	subs	r2, r2, r3
 800f1c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1c2:	b10b      	cbz	r3, 800f1c8 <__sflush_r+0x44>
 800f1c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1c6:	1ad2      	subs	r2, r2, r3
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1cc:	6a21      	ldr	r1, [r4, #32]
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	47b0      	blx	r6
 800f1d2:	1c43      	adds	r3, r0, #1
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	d106      	bne.n	800f1e6 <__sflush_r+0x62>
 800f1d8:	6829      	ldr	r1, [r5, #0]
 800f1da:	291d      	cmp	r1, #29
 800f1dc:	d82b      	bhi.n	800f236 <__sflush_r+0xb2>
 800f1de:	4a2a      	ldr	r2, [pc, #168]	@ (800f288 <__sflush_r+0x104>)
 800f1e0:	40ca      	lsrs	r2, r1
 800f1e2:	07d6      	lsls	r6, r2, #31
 800f1e4:	d527      	bpl.n	800f236 <__sflush_r+0xb2>
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	6062      	str	r2, [r4, #4]
 800f1ea:	04d9      	lsls	r1, r3, #19
 800f1ec:	6922      	ldr	r2, [r4, #16]
 800f1ee:	6022      	str	r2, [r4, #0]
 800f1f0:	d504      	bpl.n	800f1fc <__sflush_r+0x78>
 800f1f2:	1c42      	adds	r2, r0, #1
 800f1f4:	d101      	bne.n	800f1fa <__sflush_r+0x76>
 800f1f6:	682b      	ldr	r3, [r5, #0]
 800f1f8:	b903      	cbnz	r3, 800f1fc <__sflush_r+0x78>
 800f1fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1fe:	602f      	str	r7, [r5, #0]
 800f200:	b1b9      	cbz	r1, 800f232 <__sflush_r+0xae>
 800f202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f206:	4299      	cmp	r1, r3
 800f208:	d002      	beq.n	800f210 <__sflush_r+0x8c>
 800f20a:	4628      	mov	r0, r5
 800f20c:	f7ff ff68 	bl	800f0e0 <_free_r>
 800f210:	2300      	movs	r3, #0
 800f212:	6363      	str	r3, [r4, #52]	@ 0x34
 800f214:	e00d      	b.n	800f232 <__sflush_r+0xae>
 800f216:	2301      	movs	r3, #1
 800f218:	4628      	mov	r0, r5
 800f21a:	47b0      	blx	r6
 800f21c:	4602      	mov	r2, r0
 800f21e:	1c50      	adds	r0, r2, #1
 800f220:	d1c9      	bne.n	800f1b6 <__sflush_r+0x32>
 800f222:	682b      	ldr	r3, [r5, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0c6      	beq.n	800f1b6 <__sflush_r+0x32>
 800f228:	2b1d      	cmp	r3, #29
 800f22a:	d001      	beq.n	800f230 <__sflush_r+0xac>
 800f22c:	2b16      	cmp	r3, #22
 800f22e:	d11e      	bne.n	800f26e <__sflush_r+0xea>
 800f230:	602f      	str	r7, [r5, #0]
 800f232:	2000      	movs	r0, #0
 800f234:	e022      	b.n	800f27c <__sflush_r+0xf8>
 800f236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f23a:	b21b      	sxth	r3, r3
 800f23c:	e01b      	b.n	800f276 <__sflush_r+0xf2>
 800f23e:	690f      	ldr	r7, [r1, #16]
 800f240:	2f00      	cmp	r7, #0
 800f242:	d0f6      	beq.n	800f232 <__sflush_r+0xae>
 800f244:	0793      	lsls	r3, r2, #30
 800f246:	680e      	ldr	r6, [r1, #0]
 800f248:	bf08      	it	eq
 800f24a:	694b      	ldreq	r3, [r1, #20]
 800f24c:	600f      	str	r7, [r1, #0]
 800f24e:	bf18      	it	ne
 800f250:	2300      	movne	r3, #0
 800f252:	eba6 0807 	sub.w	r8, r6, r7
 800f256:	608b      	str	r3, [r1, #8]
 800f258:	f1b8 0f00 	cmp.w	r8, #0
 800f25c:	dde9      	ble.n	800f232 <__sflush_r+0xae>
 800f25e:	6a21      	ldr	r1, [r4, #32]
 800f260:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f262:	4643      	mov	r3, r8
 800f264:	463a      	mov	r2, r7
 800f266:	4628      	mov	r0, r5
 800f268:	47b0      	blx	r6
 800f26a:	2800      	cmp	r0, #0
 800f26c:	dc08      	bgt.n	800f280 <__sflush_r+0xfc>
 800f26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f276:	81a3      	strh	r3, [r4, #12]
 800f278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f280:	4407      	add	r7, r0
 800f282:	eba8 0800 	sub.w	r8, r8, r0
 800f286:	e7e7      	b.n	800f258 <__sflush_r+0xd4>
 800f288:	20400001 	.word	0x20400001

0800f28c <_fflush_r>:
 800f28c:	b538      	push	{r3, r4, r5, lr}
 800f28e:	690b      	ldr	r3, [r1, #16]
 800f290:	4605      	mov	r5, r0
 800f292:	460c      	mov	r4, r1
 800f294:	b913      	cbnz	r3, 800f29c <_fflush_r+0x10>
 800f296:	2500      	movs	r5, #0
 800f298:	4628      	mov	r0, r5
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	b118      	cbz	r0, 800f2a6 <_fflush_r+0x1a>
 800f29e:	6a03      	ldr	r3, [r0, #32]
 800f2a0:	b90b      	cbnz	r3, 800f2a6 <_fflush_r+0x1a>
 800f2a2:	f7ff f825 	bl	800e2f0 <__sinit>
 800f2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d0f3      	beq.n	800f296 <_fflush_r+0xa>
 800f2ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2b0:	07d0      	lsls	r0, r2, #31
 800f2b2:	d404      	bmi.n	800f2be <_fflush_r+0x32>
 800f2b4:	0599      	lsls	r1, r3, #22
 800f2b6:	d402      	bmi.n	800f2be <_fflush_r+0x32>
 800f2b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2ba:	f7ff f8a2 	bl	800e402 <__retarget_lock_acquire_recursive>
 800f2be:	4628      	mov	r0, r5
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	f7ff ff5f 	bl	800f184 <__sflush_r>
 800f2c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2c8:	07da      	lsls	r2, r3, #31
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	d4e4      	bmi.n	800f298 <_fflush_r+0xc>
 800f2ce:	89a3      	ldrh	r3, [r4, #12]
 800f2d0:	059b      	lsls	r3, r3, #22
 800f2d2:	d4e1      	bmi.n	800f298 <_fflush_r+0xc>
 800f2d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2d6:	f7ff f895 	bl	800e404 <__retarget_lock_release_recursive>
 800f2da:	e7dd      	b.n	800f298 <_fflush_r+0xc>

0800f2dc <_Balloc>:
 800f2dc:	b570      	push	{r4, r5, r6, lr}
 800f2de:	69c6      	ldr	r6, [r0, #28]
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	b976      	cbnz	r6, 800f304 <_Balloc+0x28>
 800f2e6:	2010      	movs	r0, #16
 800f2e8:	f7ff ff44 	bl	800f174 <malloc>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	61e0      	str	r0, [r4, #28]
 800f2f0:	b920      	cbnz	r0, 800f2fc <_Balloc+0x20>
 800f2f2:	4b18      	ldr	r3, [pc, #96]	@ (800f354 <_Balloc+0x78>)
 800f2f4:	4818      	ldr	r0, [pc, #96]	@ (800f358 <_Balloc+0x7c>)
 800f2f6:	216b      	movs	r1, #107	@ 0x6b
 800f2f8:	f000 fbf4 	bl	800fae4 <__assert_func>
 800f2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f300:	6006      	str	r6, [r0, #0]
 800f302:	60c6      	str	r6, [r0, #12]
 800f304:	69e6      	ldr	r6, [r4, #28]
 800f306:	68f3      	ldr	r3, [r6, #12]
 800f308:	b183      	cbz	r3, 800f32c <_Balloc+0x50>
 800f30a:	69e3      	ldr	r3, [r4, #28]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f312:	b9b8      	cbnz	r0, 800f344 <_Balloc+0x68>
 800f314:	2101      	movs	r1, #1
 800f316:	fa01 f605 	lsl.w	r6, r1, r5
 800f31a:	1d72      	adds	r2, r6, #5
 800f31c:	0092      	lsls	r2, r2, #2
 800f31e:	4620      	mov	r0, r4
 800f320:	f7fe fa42 	bl	800d7a8 <_calloc_r>
 800f324:	b160      	cbz	r0, 800f340 <_Balloc+0x64>
 800f326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f32a:	e00e      	b.n	800f34a <_Balloc+0x6e>
 800f32c:	2221      	movs	r2, #33	@ 0x21
 800f32e:	2104      	movs	r1, #4
 800f330:	4620      	mov	r0, r4
 800f332:	f7fe fa39 	bl	800d7a8 <_calloc_r>
 800f336:	69e3      	ldr	r3, [r4, #28]
 800f338:	60f0      	str	r0, [r6, #12]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1e4      	bne.n	800f30a <_Balloc+0x2e>
 800f340:	2000      	movs	r0, #0
 800f342:	bd70      	pop	{r4, r5, r6, pc}
 800f344:	6802      	ldr	r2, [r0, #0]
 800f346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f34a:	2300      	movs	r3, #0
 800f34c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f350:	e7f7      	b.n	800f342 <_Balloc+0x66>
 800f352:	bf00      	nop
 800f354:	080128a1 	.word	0x080128a1
 800f358:	08012921 	.word	0x08012921

0800f35c <_Bfree>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	69c6      	ldr	r6, [r0, #28]
 800f360:	4605      	mov	r5, r0
 800f362:	460c      	mov	r4, r1
 800f364:	b976      	cbnz	r6, 800f384 <_Bfree+0x28>
 800f366:	2010      	movs	r0, #16
 800f368:	f7ff ff04 	bl	800f174 <malloc>
 800f36c:	4602      	mov	r2, r0
 800f36e:	61e8      	str	r0, [r5, #28]
 800f370:	b920      	cbnz	r0, 800f37c <_Bfree+0x20>
 800f372:	4b09      	ldr	r3, [pc, #36]	@ (800f398 <_Bfree+0x3c>)
 800f374:	4809      	ldr	r0, [pc, #36]	@ (800f39c <_Bfree+0x40>)
 800f376:	218f      	movs	r1, #143	@ 0x8f
 800f378:	f000 fbb4 	bl	800fae4 <__assert_func>
 800f37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f380:	6006      	str	r6, [r0, #0]
 800f382:	60c6      	str	r6, [r0, #12]
 800f384:	b13c      	cbz	r4, 800f396 <_Bfree+0x3a>
 800f386:	69eb      	ldr	r3, [r5, #28]
 800f388:	6862      	ldr	r2, [r4, #4]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f390:	6021      	str	r1, [r4, #0]
 800f392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f396:	bd70      	pop	{r4, r5, r6, pc}
 800f398:	080128a1 	.word	0x080128a1
 800f39c:	08012921 	.word	0x08012921

0800f3a0 <__multadd>:
 800f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a4:	690d      	ldr	r5, [r1, #16]
 800f3a6:	4607      	mov	r7, r0
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	461e      	mov	r6, r3
 800f3ac:	f101 0c14 	add.w	ip, r1, #20
 800f3b0:	2000      	movs	r0, #0
 800f3b2:	f8dc 3000 	ldr.w	r3, [ip]
 800f3b6:	b299      	uxth	r1, r3
 800f3b8:	fb02 6101 	mla	r1, r2, r1, r6
 800f3bc:	0c1e      	lsrs	r6, r3, #16
 800f3be:	0c0b      	lsrs	r3, r1, #16
 800f3c0:	fb02 3306 	mla	r3, r2, r6, r3
 800f3c4:	b289      	uxth	r1, r1
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3cc:	4285      	cmp	r5, r0
 800f3ce:	f84c 1b04 	str.w	r1, [ip], #4
 800f3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3d6:	dcec      	bgt.n	800f3b2 <__multadd+0x12>
 800f3d8:	b30e      	cbz	r6, 800f41e <__multadd+0x7e>
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	42ab      	cmp	r3, r5
 800f3de:	dc19      	bgt.n	800f414 <__multadd+0x74>
 800f3e0:	6861      	ldr	r1, [r4, #4]
 800f3e2:	4638      	mov	r0, r7
 800f3e4:	3101      	adds	r1, #1
 800f3e6:	f7ff ff79 	bl	800f2dc <_Balloc>
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	b928      	cbnz	r0, 800f3fa <__multadd+0x5a>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f424 <__multadd+0x84>)
 800f3f2:	480d      	ldr	r0, [pc, #52]	@ (800f428 <__multadd+0x88>)
 800f3f4:	21ba      	movs	r1, #186	@ 0xba
 800f3f6:	f000 fb75 	bl	800fae4 <__assert_func>
 800f3fa:	6922      	ldr	r2, [r4, #16]
 800f3fc:	3202      	adds	r2, #2
 800f3fe:	f104 010c 	add.w	r1, r4, #12
 800f402:	0092      	lsls	r2, r2, #2
 800f404:	300c      	adds	r0, #12
 800f406:	f7ff f803 	bl	800e410 <memcpy>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7ff ffa5 	bl	800f35c <_Bfree>
 800f412:	4644      	mov	r4, r8
 800f414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f418:	3501      	adds	r5, #1
 800f41a:	615e      	str	r6, [r3, #20]
 800f41c:	6125      	str	r5, [r4, #16]
 800f41e:	4620      	mov	r0, r4
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f424:	08012910 	.word	0x08012910
 800f428:	08012921 	.word	0x08012921

0800f42c <__hi0bits>:
 800f42c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f430:	4603      	mov	r3, r0
 800f432:	bf36      	itet	cc
 800f434:	0403      	lslcc	r3, r0, #16
 800f436:	2000      	movcs	r0, #0
 800f438:	2010      	movcc	r0, #16
 800f43a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f43e:	bf3c      	itt	cc
 800f440:	021b      	lslcc	r3, r3, #8
 800f442:	3008      	addcc	r0, #8
 800f444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f448:	bf3c      	itt	cc
 800f44a:	011b      	lslcc	r3, r3, #4
 800f44c:	3004      	addcc	r0, #4
 800f44e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f452:	bf3c      	itt	cc
 800f454:	009b      	lslcc	r3, r3, #2
 800f456:	3002      	addcc	r0, #2
 800f458:	2b00      	cmp	r3, #0
 800f45a:	db05      	blt.n	800f468 <__hi0bits+0x3c>
 800f45c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f460:	f100 0001 	add.w	r0, r0, #1
 800f464:	bf08      	it	eq
 800f466:	2020      	moveq	r0, #32
 800f468:	4770      	bx	lr

0800f46a <__lo0bits>:
 800f46a:	6803      	ldr	r3, [r0, #0]
 800f46c:	4602      	mov	r2, r0
 800f46e:	f013 0007 	ands.w	r0, r3, #7
 800f472:	d00b      	beq.n	800f48c <__lo0bits+0x22>
 800f474:	07d9      	lsls	r1, r3, #31
 800f476:	d421      	bmi.n	800f4bc <__lo0bits+0x52>
 800f478:	0798      	lsls	r0, r3, #30
 800f47a:	bf49      	itett	mi
 800f47c:	085b      	lsrmi	r3, r3, #1
 800f47e:	089b      	lsrpl	r3, r3, #2
 800f480:	2001      	movmi	r0, #1
 800f482:	6013      	strmi	r3, [r2, #0]
 800f484:	bf5c      	itt	pl
 800f486:	6013      	strpl	r3, [r2, #0]
 800f488:	2002      	movpl	r0, #2
 800f48a:	4770      	bx	lr
 800f48c:	b299      	uxth	r1, r3
 800f48e:	b909      	cbnz	r1, 800f494 <__lo0bits+0x2a>
 800f490:	0c1b      	lsrs	r3, r3, #16
 800f492:	2010      	movs	r0, #16
 800f494:	b2d9      	uxtb	r1, r3
 800f496:	b909      	cbnz	r1, 800f49c <__lo0bits+0x32>
 800f498:	3008      	adds	r0, #8
 800f49a:	0a1b      	lsrs	r3, r3, #8
 800f49c:	0719      	lsls	r1, r3, #28
 800f49e:	bf04      	itt	eq
 800f4a0:	091b      	lsreq	r3, r3, #4
 800f4a2:	3004      	addeq	r0, #4
 800f4a4:	0799      	lsls	r1, r3, #30
 800f4a6:	bf04      	itt	eq
 800f4a8:	089b      	lsreq	r3, r3, #2
 800f4aa:	3002      	addeq	r0, #2
 800f4ac:	07d9      	lsls	r1, r3, #31
 800f4ae:	d403      	bmi.n	800f4b8 <__lo0bits+0x4e>
 800f4b0:	085b      	lsrs	r3, r3, #1
 800f4b2:	f100 0001 	add.w	r0, r0, #1
 800f4b6:	d003      	beq.n	800f4c0 <__lo0bits+0x56>
 800f4b8:	6013      	str	r3, [r2, #0]
 800f4ba:	4770      	bx	lr
 800f4bc:	2000      	movs	r0, #0
 800f4be:	4770      	bx	lr
 800f4c0:	2020      	movs	r0, #32
 800f4c2:	4770      	bx	lr

0800f4c4 <__i2b>:
 800f4c4:	b510      	push	{r4, lr}
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	2101      	movs	r1, #1
 800f4ca:	f7ff ff07 	bl	800f2dc <_Balloc>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	b928      	cbnz	r0, 800f4de <__i2b+0x1a>
 800f4d2:	4b05      	ldr	r3, [pc, #20]	@ (800f4e8 <__i2b+0x24>)
 800f4d4:	4805      	ldr	r0, [pc, #20]	@ (800f4ec <__i2b+0x28>)
 800f4d6:	f240 1145 	movw	r1, #325	@ 0x145
 800f4da:	f000 fb03 	bl	800fae4 <__assert_func>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	6144      	str	r4, [r0, #20]
 800f4e2:	6103      	str	r3, [r0, #16]
 800f4e4:	bd10      	pop	{r4, pc}
 800f4e6:	bf00      	nop
 800f4e8:	08012910 	.word	0x08012910
 800f4ec:	08012921 	.word	0x08012921

0800f4f0 <__multiply>:
 800f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	4617      	mov	r7, r2
 800f4f6:	690a      	ldr	r2, [r1, #16]
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	bfa8      	it	ge
 800f4fe:	463b      	movge	r3, r7
 800f500:	4689      	mov	r9, r1
 800f502:	bfa4      	itt	ge
 800f504:	460f      	movge	r7, r1
 800f506:	4699      	movge	r9, r3
 800f508:	693d      	ldr	r5, [r7, #16]
 800f50a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	6879      	ldr	r1, [r7, #4]
 800f512:	eb05 060a 	add.w	r6, r5, sl
 800f516:	42b3      	cmp	r3, r6
 800f518:	b085      	sub	sp, #20
 800f51a:	bfb8      	it	lt
 800f51c:	3101      	addlt	r1, #1
 800f51e:	f7ff fedd 	bl	800f2dc <_Balloc>
 800f522:	b930      	cbnz	r0, 800f532 <__multiply+0x42>
 800f524:	4602      	mov	r2, r0
 800f526:	4b41      	ldr	r3, [pc, #260]	@ (800f62c <__multiply+0x13c>)
 800f528:	4841      	ldr	r0, [pc, #260]	@ (800f630 <__multiply+0x140>)
 800f52a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f52e:	f000 fad9 	bl	800fae4 <__assert_func>
 800f532:	f100 0414 	add.w	r4, r0, #20
 800f536:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f53a:	4623      	mov	r3, r4
 800f53c:	2200      	movs	r2, #0
 800f53e:	4573      	cmp	r3, lr
 800f540:	d320      	bcc.n	800f584 <__multiply+0x94>
 800f542:	f107 0814 	add.w	r8, r7, #20
 800f546:	f109 0114 	add.w	r1, r9, #20
 800f54a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f54e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f552:	9302      	str	r3, [sp, #8]
 800f554:	1beb      	subs	r3, r5, r7
 800f556:	3b15      	subs	r3, #21
 800f558:	f023 0303 	bic.w	r3, r3, #3
 800f55c:	3304      	adds	r3, #4
 800f55e:	3715      	adds	r7, #21
 800f560:	42bd      	cmp	r5, r7
 800f562:	bf38      	it	cc
 800f564:	2304      	movcc	r3, #4
 800f566:	9301      	str	r3, [sp, #4]
 800f568:	9b02      	ldr	r3, [sp, #8]
 800f56a:	9103      	str	r1, [sp, #12]
 800f56c:	428b      	cmp	r3, r1
 800f56e:	d80c      	bhi.n	800f58a <__multiply+0x9a>
 800f570:	2e00      	cmp	r6, #0
 800f572:	dd03      	ble.n	800f57c <__multiply+0x8c>
 800f574:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d055      	beq.n	800f628 <__multiply+0x138>
 800f57c:	6106      	str	r6, [r0, #16]
 800f57e:	b005      	add	sp, #20
 800f580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f584:	f843 2b04 	str.w	r2, [r3], #4
 800f588:	e7d9      	b.n	800f53e <__multiply+0x4e>
 800f58a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f58e:	f1ba 0f00 	cmp.w	sl, #0
 800f592:	d01f      	beq.n	800f5d4 <__multiply+0xe4>
 800f594:	46c4      	mov	ip, r8
 800f596:	46a1      	mov	r9, r4
 800f598:	2700      	movs	r7, #0
 800f59a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f59e:	f8d9 3000 	ldr.w	r3, [r9]
 800f5a2:	fa1f fb82 	uxth.w	fp, r2
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f5ac:	443b      	add	r3, r7
 800f5ae:	f8d9 7000 	ldr.w	r7, [r9]
 800f5b2:	0c12      	lsrs	r2, r2, #16
 800f5b4:	0c3f      	lsrs	r7, r7, #16
 800f5b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f5ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5c4:	4565      	cmp	r5, ip
 800f5c6:	f849 3b04 	str.w	r3, [r9], #4
 800f5ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f5ce:	d8e4      	bhi.n	800f59a <__multiply+0xaa>
 800f5d0:	9b01      	ldr	r3, [sp, #4]
 800f5d2:	50e7      	str	r7, [r4, r3]
 800f5d4:	9b03      	ldr	r3, [sp, #12]
 800f5d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f5da:	3104      	adds	r1, #4
 800f5dc:	f1b9 0f00 	cmp.w	r9, #0
 800f5e0:	d020      	beq.n	800f624 <__multiply+0x134>
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	4647      	mov	r7, r8
 800f5e6:	46a4      	mov	ip, r4
 800f5e8:	f04f 0a00 	mov.w	sl, #0
 800f5ec:	f8b7 b000 	ldrh.w	fp, [r7]
 800f5f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f5f4:	fb09 220b 	mla	r2, r9, fp, r2
 800f5f8:	4452      	add	r2, sl
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f600:	f84c 3b04 	str.w	r3, [ip], #4
 800f604:	f857 3b04 	ldr.w	r3, [r7], #4
 800f608:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f60c:	f8bc 3000 	ldrh.w	r3, [ip]
 800f610:	fb09 330a 	mla	r3, r9, sl, r3
 800f614:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f618:	42bd      	cmp	r5, r7
 800f61a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f61e:	d8e5      	bhi.n	800f5ec <__multiply+0xfc>
 800f620:	9a01      	ldr	r2, [sp, #4]
 800f622:	50a3      	str	r3, [r4, r2]
 800f624:	3404      	adds	r4, #4
 800f626:	e79f      	b.n	800f568 <__multiply+0x78>
 800f628:	3e01      	subs	r6, #1
 800f62a:	e7a1      	b.n	800f570 <__multiply+0x80>
 800f62c:	08012910 	.word	0x08012910
 800f630:	08012921 	.word	0x08012921

0800f634 <__pow5mult>:
 800f634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f638:	4615      	mov	r5, r2
 800f63a:	f012 0203 	ands.w	r2, r2, #3
 800f63e:	4607      	mov	r7, r0
 800f640:	460e      	mov	r6, r1
 800f642:	d007      	beq.n	800f654 <__pow5mult+0x20>
 800f644:	4c25      	ldr	r4, [pc, #148]	@ (800f6dc <__pow5mult+0xa8>)
 800f646:	3a01      	subs	r2, #1
 800f648:	2300      	movs	r3, #0
 800f64a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f64e:	f7ff fea7 	bl	800f3a0 <__multadd>
 800f652:	4606      	mov	r6, r0
 800f654:	10ad      	asrs	r5, r5, #2
 800f656:	d03d      	beq.n	800f6d4 <__pow5mult+0xa0>
 800f658:	69fc      	ldr	r4, [r7, #28]
 800f65a:	b97c      	cbnz	r4, 800f67c <__pow5mult+0x48>
 800f65c:	2010      	movs	r0, #16
 800f65e:	f7ff fd89 	bl	800f174 <malloc>
 800f662:	4602      	mov	r2, r0
 800f664:	61f8      	str	r0, [r7, #28]
 800f666:	b928      	cbnz	r0, 800f674 <__pow5mult+0x40>
 800f668:	4b1d      	ldr	r3, [pc, #116]	@ (800f6e0 <__pow5mult+0xac>)
 800f66a:	481e      	ldr	r0, [pc, #120]	@ (800f6e4 <__pow5mult+0xb0>)
 800f66c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f670:	f000 fa38 	bl	800fae4 <__assert_func>
 800f674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f678:	6004      	str	r4, [r0, #0]
 800f67a:	60c4      	str	r4, [r0, #12]
 800f67c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f684:	b94c      	cbnz	r4, 800f69a <__pow5mult+0x66>
 800f686:	f240 2171 	movw	r1, #625	@ 0x271
 800f68a:	4638      	mov	r0, r7
 800f68c:	f7ff ff1a 	bl	800f4c4 <__i2b>
 800f690:	2300      	movs	r3, #0
 800f692:	f8c8 0008 	str.w	r0, [r8, #8]
 800f696:	4604      	mov	r4, r0
 800f698:	6003      	str	r3, [r0, #0]
 800f69a:	f04f 0900 	mov.w	r9, #0
 800f69e:	07eb      	lsls	r3, r5, #31
 800f6a0:	d50a      	bpl.n	800f6b8 <__pow5mult+0x84>
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	4622      	mov	r2, r4
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	f7ff ff22 	bl	800f4f0 <__multiply>
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	4680      	mov	r8, r0
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	f7ff fe53 	bl	800f35c <_Bfree>
 800f6b6:	4646      	mov	r6, r8
 800f6b8:	106d      	asrs	r5, r5, #1
 800f6ba:	d00b      	beq.n	800f6d4 <__pow5mult+0xa0>
 800f6bc:	6820      	ldr	r0, [r4, #0]
 800f6be:	b938      	cbnz	r0, 800f6d0 <__pow5mult+0x9c>
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	4621      	mov	r1, r4
 800f6c4:	4638      	mov	r0, r7
 800f6c6:	f7ff ff13 	bl	800f4f0 <__multiply>
 800f6ca:	6020      	str	r0, [r4, #0]
 800f6cc:	f8c0 9000 	str.w	r9, [r0]
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	e7e4      	b.n	800f69e <__pow5mult+0x6a>
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6da:	bf00      	nop
 800f6dc:	080129d4 	.word	0x080129d4
 800f6e0:	080128a1 	.word	0x080128a1
 800f6e4:	08012921 	.word	0x08012921

0800f6e8 <__lshift>:
 800f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	6849      	ldr	r1, [r1, #4]
 800f6f0:	6923      	ldr	r3, [r4, #16]
 800f6f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6f6:	68a3      	ldr	r3, [r4, #8]
 800f6f8:	4607      	mov	r7, r0
 800f6fa:	4691      	mov	r9, r2
 800f6fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f700:	f108 0601 	add.w	r6, r8, #1
 800f704:	42b3      	cmp	r3, r6
 800f706:	db0b      	blt.n	800f720 <__lshift+0x38>
 800f708:	4638      	mov	r0, r7
 800f70a:	f7ff fde7 	bl	800f2dc <_Balloc>
 800f70e:	4605      	mov	r5, r0
 800f710:	b948      	cbnz	r0, 800f726 <__lshift+0x3e>
 800f712:	4602      	mov	r2, r0
 800f714:	4b28      	ldr	r3, [pc, #160]	@ (800f7b8 <__lshift+0xd0>)
 800f716:	4829      	ldr	r0, [pc, #164]	@ (800f7bc <__lshift+0xd4>)
 800f718:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f71c:	f000 f9e2 	bl	800fae4 <__assert_func>
 800f720:	3101      	adds	r1, #1
 800f722:	005b      	lsls	r3, r3, #1
 800f724:	e7ee      	b.n	800f704 <__lshift+0x1c>
 800f726:	2300      	movs	r3, #0
 800f728:	f100 0114 	add.w	r1, r0, #20
 800f72c:	f100 0210 	add.w	r2, r0, #16
 800f730:	4618      	mov	r0, r3
 800f732:	4553      	cmp	r3, sl
 800f734:	db33      	blt.n	800f79e <__lshift+0xb6>
 800f736:	6920      	ldr	r0, [r4, #16]
 800f738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f73c:	f104 0314 	add.w	r3, r4, #20
 800f740:	f019 091f 	ands.w	r9, r9, #31
 800f744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f74c:	d02b      	beq.n	800f7a6 <__lshift+0xbe>
 800f74e:	f1c9 0e20 	rsb	lr, r9, #32
 800f752:	468a      	mov	sl, r1
 800f754:	2200      	movs	r2, #0
 800f756:	6818      	ldr	r0, [r3, #0]
 800f758:	fa00 f009 	lsl.w	r0, r0, r9
 800f75c:	4310      	orrs	r0, r2
 800f75e:	f84a 0b04 	str.w	r0, [sl], #4
 800f762:	f853 2b04 	ldr.w	r2, [r3], #4
 800f766:	459c      	cmp	ip, r3
 800f768:	fa22 f20e 	lsr.w	r2, r2, lr
 800f76c:	d8f3      	bhi.n	800f756 <__lshift+0x6e>
 800f76e:	ebac 0304 	sub.w	r3, ip, r4
 800f772:	3b15      	subs	r3, #21
 800f774:	f023 0303 	bic.w	r3, r3, #3
 800f778:	3304      	adds	r3, #4
 800f77a:	f104 0015 	add.w	r0, r4, #21
 800f77e:	4560      	cmp	r0, ip
 800f780:	bf88      	it	hi
 800f782:	2304      	movhi	r3, #4
 800f784:	50ca      	str	r2, [r1, r3]
 800f786:	b10a      	cbz	r2, 800f78c <__lshift+0xa4>
 800f788:	f108 0602 	add.w	r6, r8, #2
 800f78c:	3e01      	subs	r6, #1
 800f78e:	4638      	mov	r0, r7
 800f790:	612e      	str	r6, [r5, #16]
 800f792:	4621      	mov	r1, r4
 800f794:	f7ff fde2 	bl	800f35c <_Bfree>
 800f798:	4628      	mov	r0, r5
 800f79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	e7c5      	b.n	800f732 <__lshift+0x4a>
 800f7a6:	3904      	subs	r1, #4
 800f7a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7b0:	459c      	cmp	ip, r3
 800f7b2:	d8f9      	bhi.n	800f7a8 <__lshift+0xc0>
 800f7b4:	e7ea      	b.n	800f78c <__lshift+0xa4>
 800f7b6:	bf00      	nop
 800f7b8:	08012910 	.word	0x08012910
 800f7bc:	08012921 	.word	0x08012921

0800f7c0 <__mcmp>:
 800f7c0:	690a      	ldr	r2, [r1, #16]
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	6900      	ldr	r0, [r0, #16]
 800f7c6:	1a80      	subs	r0, r0, r2
 800f7c8:	b530      	push	{r4, r5, lr}
 800f7ca:	d10e      	bne.n	800f7ea <__mcmp+0x2a>
 800f7cc:	3314      	adds	r3, #20
 800f7ce:	3114      	adds	r1, #20
 800f7d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f7d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f7d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f7dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f7e0:	4295      	cmp	r5, r2
 800f7e2:	d003      	beq.n	800f7ec <__mcmp+0x2c>
 800f7e4:	d205      	bcs.n	800f7f2 <__mcmp+0x32>
 800f7e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7ea:	bd30      	pop	{r4, r5, pc}
 800f7ec:	42a3      	cmp	r3, r4
 800f7ee:	d3f3      	bcc.n	800f7d8 <__mcmp+0x18>
 800f7f0:	e7fb      	b.n	800f7ea <__mcmp+0x2a>
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	e7f9      	b.n	800f7ea <__mcmp+0x2a>
	...

0800f7f8 <__mdiff>:
 800f7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fc:	4689      	mov	r9, r1
 800f7fe:	4606      	mov	r6, r0
 800f800:	4611      	mov	r1, r2
 800f802:	4648      	mov	r0, r9
 800f804:	4614      	mov	r4, r2
 800f806:	f7ff ffdb 	bl	800f7c0 <__mcmp>
 800f80a:	1e05      	subs	r5, r0, #0
 800f80c:	d112      	bne.n	800f834 <__mdiff+0x3c>
 800f80e:	4629      	mov	r1, r5
 800f810:	4630      	mov	r0, r6
 800f812:	f7ff fd63 	bl	800f2dc <_Balloc>
 800f816:	4602      	mov	r2, r0
 800f818:	b928      	cbnz	r0, 800f826 <__mdiff+0x2e>
 800f81a:	4b3f      	ldr	r3, [pc, #252]	@ (800f918 <__mdiff+0x120>)
 800f81c:	f240 2137 	movw	r1, #567	@ 0x237
 800f820:	483e      	ldr	r0, [pc, #248]	@ (800f91c <__mdiff+0x124>)
 800f822:	f000 f95f 	bl	800fae4 <__assert_func>
 800f826:	2301      	movs	r3, #1
 800f828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f82c:	4610      	mov	r0, r2
 800f82e:	b003      	add	sp, #12
 800f830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f834:	bfbc      	itt	lt
 800f836:	464b      	movlt	r3, r9
 800f838:	46a1      	movlt	r9, r4
 800f83a:	4630      	mov	r0, r6
 800f83c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f840:	bfba      	itte	lt
 800f842:	461c      	movlt	r4, r3
 800f844:	2501      	movlt	r5, #1
 800f846:	2500      	movge	r5, #0
 800f848:	f7ff fd48 	bl	800f2dc <_Balloc>
 800f84c:	4602      	mov	r2, r0
 800f84e:	b918      	cbnz	r0, 800f858 <__mdiff+0x60>
 800f850:	4b31      	ldr	r3, [pc, #196]	@ (800f918 <__mdiff+0x120>)
 800f852:	f240 2145 	movw	r1, #581	@ 0x245
 800f856:	e7e3      	b.n	800f820 <__mdiff+0x28>
 800f858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f85c:	6926      	ldr	r6, [r4, #16]
 800f85e:	60c5      	str	r5, [r0, #12]
 800f860:	f109 0310 	add.w	r3, r9, #16
 800f864:	f109 0514 	add.w	r5, r9, #20
 800f868:	f104 0e14 	add.w	lr, r4, #20
 800f86c:	f100 0b14 	add.w	fp, r0, #20
 800f870:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f874:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f878:	9301      	str	r3, [sp, #4]
 800f87a:	46d9      	mov	r9, fp
 800f87c:	f04f 0c00 	mov.w	ip, #0
 800f880:	9b01      	ldr	r3, [sp, #4]
 800f882:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f886:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f88a:	9301      	str	r3, [sp, #4]
 800f88c:	fa1f f38a 	uxth.w	r3, sl
 800f890:	4619      	mov	r1, r3
 800f892:	b283      	uxth	r3, r0
 800f894:	1acb      	subs	r3, r1, r3
 800f896:	0c00      	lsrs	r0, r0, #16
 800f898:	4463      	add	r3, ip
 800f89a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f89e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f8a8:	4576      	cmp	r6, lr
 800f8aa:	f849 3b04 	str.w	r3, [r9], #4
 800f8ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8b2:	d8e5      	bhi.n	800f880 <__mdiff+0x88>
 800f8b4:	1b33      	subs	r3, r6, r4
 800f8b6:	3b15      	subs	r3, #21
 800f8b8:	f023 0303 	bic.w	r3, r3, #3
 800f8bc:	3415      	adds	r4, #21
 800f8be:	3304      	adds	r3, #4
 800f8c0:	42a6      	cmp	r6, r4
 800f8c2:	bf38      	it	cc
 800f8c4:	2304      	movcc	r3, #4
 800f8c6:	441d      	add	r5, r3
 800f8c8:	445b      	add	r3, fp
 800f8ca:	461e      	mov	r6, r3
 800f8cc:	462c      	mov	r4, r5
 800f8ce:	4544      	cmp	r4, r8
 800f8d0:	d30e      	bcc.n	800f8f0 <__mdiff+0xf8>
 800f8d2:	f108 0103 	add.w	r1, r8, #3
 800f8d6:	1b49      	subs	r1, r1, r5
 800f8d8:	f021 0103 	bic.w	r1, r1, #3
 800f8dc:	3d03      	subs	r5, #3
 800f8de:	45a8      	cmp	r8, r5
 800f8e0:	bf38      	it	cc
 800f8e2:	2100      	movcc	r1, #0
 800f8e4:	440b      	add	r3, r1
 800f8e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8ea:	b191      	cbz	r1, 800f912 <__mdiff+0x11a>
 800f8ec:	6117      	str	r7, [r2, #16]
 800f8ee:	e79d      	b.n	800f82c <__mdiff+0x34>
 800f8f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f8f4:	46e6      	mov	lr, ip
 800f8f6:	0c08      	lsrs	r0, r1, #16
 800f8f8:	fa1c fc81 	uxtah	ip, ip, r1
 800f8fc:	4471      	add	r1, lr
 800f8fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f902:	b289      	uxth	r1, r1
 800f904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f908:	f846 1b04 	str.w	r1, [r6], #4
 800f90c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f910:	e7dd      	b.n	800f8ce <__mdiff+0xd6>
 800f912:	3f01      	subs	r7, #1
 800f914:	e7e7      	b.n	800f8e6 <__mdiff+0xee>
 800f916:	bf00      	nop
 800f918:	08012910 	.word	0x08012910
 800f91c:	08012921 	.word	0x08012921

0800f920 <__d2b>:
 800f920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f924:	460f      	mov	r7, r1
 800f926:	2101      	movs	r1, #1
 800f928:	ec59 8b10 	vmov	r8, r9, d0
 800f92c:	4616      	mov	r6, r2
 800f92e:	f7ff fcd5 	bl	800f2dc <_Balloc>
 800f932:	4604      	mov	r4, r0
 800f934:	b930      	cbnz	r0, 800f944 <__d2b+0x24>
 800f936:	4602      	mov	r2, r0
 800f938:	4b23      	ldr	r3, [pc, #140]	@ (800f9c8 <__d2b+0xa8>)
 800f93a:	4824      	ldr	r0, [pc, #144]	@ (800f9cc <__d2b+0xac>)
 800f93c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f940:	f000 f8d0 	bl	800fae4 <__assert_func>
 800f944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f94c:	b10d      	cbz	r5, 800f952 <__d2b+0x32>
 800f94e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f952:	9301      	str	r3, [sp, #4]
 800f954:	f1b8 0300 	subs.w	r3, r8, #0
 800f958:	d023      	beq.n	800f9a2 <__d2b+0x82>
 800f95a:	4668      	mov	r0, sp
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	f7ff fd84 	bl	800f46a <__lo0bits>
 800f962:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f966:	b1d0      	cbz	r0, 800f99e <__d2b+0x7e>
 800f968:	f1c0 0320 	rsb	r3, r0, #32
 800f96c:	fa02 f303 	lsl.w	r3, r2, r3
 800f970:	430b      	orrs	r3, r1
 800f972:	40c2      	lsrs	r2, r0
 800f974:	6163      	str	r3, [r4, #20]
 800f976:	9201      	str	r2, [sp, #4]
 800f978:	9b01      	ldr	r3, [sp, #4]
 800f97a:	61a3      	str	r3, [r4, #24]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bf0c      	ite	eq
 800f980:	2201      	moveq	r2, #1
 800f982:	2202      	movne	r2, #2
 800f984:	6122      	str	r2, [r4, #16]
 800f986:	b1a5      	cbz	r5, 800f9b2 <__d2b+0x92>
 800f988:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f98c:	4405      	add	r5, r0
 800f98e:	603d      	str	r5, [r7, #0]
 800f990:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f994:	6030      	str	r0, [r6, #0]
 800f996:	4620      	mov	r0, r4
 800f998:	b003      	add	sp, #12
 800f99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f99e:	6161      	str	r1, [r4, #20]
 800f9a0:	e7ea      	b.n	800f978 <__d2b+0x58>
 800f9a2:	a801      	add	r0, sp, #4
 800f9a4:	f7ff fd61 	bl	800f46a <__lo0bits>
 800f9a8:	9b01      	ldr	r3, [sp, #4]
 800f9aa:	6163      	str	r3, [r4, #20]
 800f9ac:	3020      	adds	r0, #32
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	e7e8      	b.n	800f984 <__d2b+0x64>
 800f9b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f9ba:	6038      	str	r0, [r7, #0]
 800f9bc:	6918      	ldr	r0, [r3, #16]
 800f9be:	f7ff fd35 	bl	800f42c <__hi0bits>
 800f9c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9c6:	e7e5      	b.n	800f994 <__d2b+0x74>
 800f9c8:	08012910 	.word	0x08012910
 800f9cc:	08012921 	.word	0x08012921

0800f9d0 <__sread>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9d8:	f000 f850 	bl	800fa7c <_read_r>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	bfab      	itete	ge
 800f9e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800f9e4:	181b      	addge	r3, r3, r0
 800f9e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9ea:	bfac      	ite	ge
 800f9ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9ee:	81a3      	strhlt	r3, [r4, #12]
 800f9f0:	bd10      	pop	{r4, pc}

0800f9f2 <__swrite>:
 800f9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f6:	461f      	mov	r7, r3
 800f9f8:	898b      	ldrh	r3, [r1, #12]
 800f9fa:	05db      	lsls	r3, r3, #23
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	460c      	mov	r4, r1
 800fa00:	4616      	mov	r6, r2
 800fa02:	d505      	bpl.n	800fa10 <__swrite+0x1e>
 800fa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa08:	2302      	movs	r3, #2
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f000 f824 	bl	800fa58 <_lseek_r>
 800fa10:	89a3      	ldrh	r3, [r4, #12]
 800fa12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa1a:	81a3      	strh	r3, [r4, #12]
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	463b      	mov	r3, r7
 800fa20:	4628      	mov	r0, r5
 800fa22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa26:	f000 b83b 	b.w	800faa0 <_write_r>

0800fa2a <__sseek>:
 800fa2a:	b510      	push	{r4, lr}
 800fa2c:	460c      	mov	r4, r1
 800fa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa32:	f000 f811 	bl	800fa58 <_lseek_r>
 800fa36:	1c43      	adds	r3, r0, #1
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	bf15      	itete	ne
 800fa3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa46:	81a3      	strheq	r3, [r4, #12]
 800fa48:	bf18      	it	ne
 800fa4a:	81a3      	strhne	r3, [r4, #12]
 800fa4c:	bd10      	pop	{r4, pc}

0800fa4e <__sclose>:
 800fa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa52:	f000 b837 	b.w	800fac4 <_close_r>
	...

0800fa58 <_lseek_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	4d07      	ldr	r5, [pc, #28]	@ (800fa78 <_lseek_r+0x20>)
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	4608      	mov	r0, r1
 800fa60:	4611      	mov	r1, r2
 800fa62:	2200      	movs	r2, #0
 800fa64:	602a      	str	r2, [r5, #0]
 800fa66:	461a      	mov	r2, r3
 800fa68:	f7f8 f969 	bl	8007d3e <_lseek>
 800fa6c:	1c43      	adds	r3, r0, #1
 800fa6e:	d102      	bne.n	800fa76 <_lseek_r+0x1e>
 800fa70:	682b      	ldr	r3, [r5, #0]
 800fa72:	b103      	cbz	r3, 800fa76 <_lseek_r+0x1e>
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	20000aac 	.word	0x20000aac

0800fa7c <_read_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d07      	ldr	r5, [pc, #28]	@ (800fa9c <_read_r+0x20>)
 800fa80:	4604      	mov	r4, r0
 800fa82:	4608      	mov	r0, r1
 800fa84:	4611      	mov	r1, r2
 800fa86:	2200      	movs	r2, #0
 800fa88:	602a      	str	r2, [r5, #0]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	f7f8 f8f7 	bl	8007c7e <_read>
 800fa90:	1c43      	adds	r3, r0, #1
 800fa92:	d102      	bne.n	800fa9a <_read_r+0x1e>
 800fa94:	682b      	ldr	r3, [r5, #0]
 800fa96:	b103      	cbz	r3, 800fa9a <_read_r+0x1e>
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	bd38      	pop	{r3, r4, r5, pc}
 800fa9c:	20000aac 	.word	0x20000aac

0800faa0 <_write_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	4d07      	ldr	r5, [pc, #28]	@ (800fac0 <_write_r+0x20>)
 800faa4:	4604      	mov	r4, r0
 800faa6:	4608      	mov	r0, r1
 800faa8:	4611      	mov	r1, r2
 800faaa:	2200      	movs	r2, #0
 800faac:	602a      	str	r2, [r5, #0]
 800faae:	461a      	mov	r2, r3
 800fab0:	f7f8 f902 	bl	8007cb8 <_write>
 800fab4:	1c43      	adds	r3, r0, #1
 800fab6:	d102      	bne.n	800fabe <_write_r+0x1e>
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	b103      	cbz	r3, 800fabe <_write_r+0x1e>
 800fabc:	6023      	str	r3, [r4, #0]
 800fabe:	bd38      	pop	{r3, r4, r5, pc}
 800fac0:	20000aac 	.word	0x20000aac

0800fac4 <_close_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4d06      	ldr	r5, [pc, #24]	@ (800fae0 <_close_r+0x1c>)
 800fac8:	2300      	movs	r3, #0
 800faca:	4604      	mov	r4, r0
 800facc:	4608      	mov	r0, r1
 800face:	602b      	str	r3, [r5, #0]
 800fad0:	f7f8 f90e 	bl	8007cf0 <_close>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_close_r+0x1a>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	b103      	cbz	r3, 800fade <_close_r+0x1a>
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	20000aac 	.word	0x20000aac

0800fae4 <__assert_func>:
 800fae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fae6:	4614      	mov	r4, r2
 800fae8:	461a      	mov	r2, r3
 800faea:	4b09      	ldr	r3, [pc, #36]	@ (800fb10 <__assert_func+0x2c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4605      	mov	r5, r0
 800faf0:	68d8      	ldr	r0, [r3, #12]
 800faf2:	b14c      	cbz	r4, 800fb08 <__assert_func+0x24>
 800faf4:	4b07      	ldr	r3, [pc, #28]	@ (800fb14 <__assert_func+0x30>)
 800faf6:	9100      	str	r1, [sp, #0]
 800faf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fafc:	4906      	ldr	r1, [pc, #24]	@ (800fb18 <__assert_func+0x34>)
 800fafe:	462b      	mov	r3, r5
 800fb00:	f000 f820 	bl	800fb44 <fiprintf>
 800fb04:	f000 f83d 	bl	800fb82 <abort>
 800fb08:	4b04      	ldr	r3, [pc, #16]	@ (800fb1c <__assert_func+0x38>)
 800fb0a:	461c      	mov	r4, r3
 800fb0c:	e7f3      	b.n	800faf6 <__assert_func+0x12>
 800fb0e:	bf00      	nop
 800fb10:	20000058 	.word	0x20000058
 800fb14:	08012984 	.word	0x08012984
 800fb18:	08012991 	.word	0x08012991
 800fb1c:	080129bf 	.word	0x080129bf

0800fb20 <__ascii_mbtowc>:
 800fb20:	b082      	sub	sp, #8
 800fb22:	b901      	cbnz	r1, 800fb26 <__ascii_mbtowc+0x6>
 800fb24:	a901      	add	r1, sp, #4
 800fb26:	b142      	cbz	r2, 800fb3a <__ascii_mbtowc+0x1a>
 800fb28:	b14b      	cbz	r3, 800fb3e <__ascii_mbtowc+0x1e>
 800fb2a:	7813      	ldrb	r3, [r2, #0]
 800fb2c:	600b      	str	r3, [r1, #0]
 800fb2e:	7812      	ldrb	r2, [r2, #0]
 800fb30:	1e10      	subs	r0, r2, #0
 800fb32:	bf18      	it	ne
 800fb34:	2001      	movne	r0, #1
 800fb36:	b002      	add	sp, #8
 800fb38:	4770      	bx	lr
 800fb3a:	4610      	mov	r0, r2
 800fb3c:	e7fb      	b.n	800fb36 <__ascii_mbtowc+0x16>
 800fb3e:	f06f 0001 	mvn.w	r0, #1
 800fb42:	e7f8      	b.n	800fb36 <__ascii_mbtowc+0x16>

0800fb44 <fiprintf>:
 800fb44:	b40e      	push	{r1, r2, r3}
 800fb46:	b503      	push	{r0, r1, lr}
 800fb48:	4601      	mov	r1, r0
 800fb4a:	ab03      	add	r3, sp, #12
 800fb4c:	4805      	ldr	r0, [pc, #20]	@ (800fb64 <fiprintf+0x20>)
 800fb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb52:	6800      	ldr	r0, [r0, #0]
 800fb54:	9301      	str	r3, [sp, #4]
 800fb56:	f000 f845 	bl	800fbe4 <_vfiprintf_r>
 800fb5a:	b002      	add	sp, #8
 800fb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb60:	b003      	add	sp, #12
 800fb62:	4770      	bx	lr
 800fb64:	20000058 	.word	0x20000058

0800fb68 <__ascii_wctomb>:
 800fb68:	4603      	mov	r3, r0
 800fb6a:	4608      	mov	r0, r1
 800fb6c:	b141      	cbz	r1, 800fb80 <__ascii_wctomb+0x18>
 800fb6e:	2aff      	cmp	r2, #255	@ 0xff
 800fb70:	d904      	bls.n	800fb7c <__ascii_wctomb+0x14>
 800fb72:	228a      	movs	r2, #138	@ 0x8a
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb7a:	4770      	bx	lr
 800fb7c:	700a      	strb	r2, [r1, #0]
 800fb7e:	2001      	movs	r0, #1
 800fb80:	4770      	bx	lr

0800fb82 <abort>:
 800fb82:	b508      	push	{r3, lr}
 800fb84:	2006      	movs	r0, #6
 800fb86:	f000 fa63 	bl	8010050 <raise>
 800fb8a:	2001      	movs	r0, #1
 800fb8c:	f7f8 f86c 	bl	8007c68 <_exit>

0800fb90 <__sfputc_r>:
 800fb90:	6893      	ldr	r3, [r2, #8]
 800fb92:	3b01      	subs	r3, #1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	b410      	push	{r4}
 800fb98:	6093      	str	r3, [r2, #8]
 800fb9a:	da08      	bge.n	800fbae <__sfputc_r+0x1e>
 800fb9c:	6994      	ldr	r4, [r2, #24]
 800fb9e:	42a3      	cmp	r3, r4
 800fba0:	db01      	blt.n	800fba6 <__sfputc_r+0x16>
 800fba2:	290a      	cmp	r1, #10
 800fba4:	d103      	bne.n	800fbae <__sfputc_r+0x1e>
 800fba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbaa:	f000 b933 	b.w	800fe14 <__swbuf_r>
 800fbae:	6813      	ldr	r3, [r2, #0]
 800fbb0:	1c58      	adds	r0, r3, #1
 800fbb2:	6010      	str	r0, [r2, #0]
 800fbb4:	7019      	strb	r1, [r3, #0]
 800fbb6:	4608      	mov	r0, r1
 800fbb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <__sfputs_r>:
 800fbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	460f      	mov	r7, r1
 800fbc4:	4614      	mov	r4, r2
 800fbc6:	18d5      	adds	r5, r2, r3
 800fbc8:	42ac      	cmp	r4, r5
 800fbca:	d101      	bne.n	800fbd0 <__sfputs_r+0x12>
 800fbcc:	2000      	movs	r0, #0
 800fbce:	e007      	b.n	800fbe0 <__sfputs_r+0x22>
 800fbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbd4:	463a      	mov	r2, r7
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	f7ff ffda 	bl	800fb90 <__sfputc_r>
 800fbdc:	1c43      	adds	r3, r0, #1
 800fbde:	d1f3      	bne.n	800fbc8 <__sfputs_r+0xa>
 800fbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbe4 <_vfiprintf_r>:
 800fbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe8:	460d      	mov	r5, r1
 800fbea:	b09d      	sub	sp, #116	@ 0x74
 800fbec:	4614      	mov	r4, r2
 800fbee:	4698      	mov	r8, r3
 800fbf0:	4606      	mov	r6, r0
 800fbf2:	b118      	cbz	r0, 800fbfc <_vfiprintf_r+0x18>
 800fbf4:	6a03      	ldr	r3, [r0, #32]
 800fbf6:	b90b      	cbnz	r3, 800fbfc <_vfiprintf_r+0x18>
 800fbf8:	f7fe fb7a 	bl	800e2f0 <__sinit>
 800fbfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbfe:	07d9      	lsls	r1, r3, #31
 800fc00:	d405      	bmi.n	800fc0e <_vfiprintf_r+0x2a>
 800fc02:	89ab      	ldrh	r3, [r5, #12]
 800fc04:	059a      	lsls	r2, r3, #22
 800fc06:	d402      	bmi.n	800fc0e <_vfiprintf_r+0x2a>
 800fc08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc0a:	f7fe fbfa 	bl	800e402 <__retarget_lock_acquire_recursive>
 800fc0e:	89ab      	ldrh	r3, [r5, #12]
 800fc10:	071b      	lsls	r3, r3, #28
 800fc12:	d501      	bpl.n	800fc18 <_vfiprintf_r+0x34>
 800fc14:	692b      	ldr	r3, [r5, #16]
 800fc16:	b99b      	cbnz	r3, 800fc40 <_vfiprintf_r+0x5c>
 800fc18:	4629      	mov	r1, r5
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f000 f938 	bl	800fe90 <__swsetup_r>
 800fc20:	b170      	cbz	r0, 800fc40 <_vfiprintf_r+0x5c>
 800fc22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc24:	07dc      	lsls	r4, r3, #31
 800fc26:	d504      	bpl.n	800fc32 <_vfiprintf_r+0x4e>
 800fc28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc2c:	b01d      	add	sp, #116	@ 0x74
 800fc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc32:	89ab      	ldrh	r3, [r5, #12]
 800fc34:	0598      	lsls	r0, r3, #22
 800fc36:	d4f7      	bmi.n	800fc28 <_vfiprintf_r+0x44>
 800fc38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc3a:	f7fe fbe3 	bl	800e404 <__retarget_lock_release_recursive>
 800fc3e:	e7f3      	b.n	800fc28 <_vfiprintf_r+0x44>
 800fc40:	2300      	movs	r3, #0
 800fc42:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc44:	2320      	movs	r3, #32
 800fc46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc4e:	2330      	movs	r3, #48	@ 0x30
 800fc50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe00 <_vfiprintf_r+0x21c>
 800fc54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc58:	f04f 0901 	mov.w	r9, #1
 800fc5c:	4623      	mov	r3, r4
 800fc5e:	469a      	mov	sl, r3
 800fc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc64:	b10a      	cbz	r2, 800fc6a <_vfiprintf_r+0x86>
 800fc66:	2a25      	cmp	r2, #37	@ 0x25
 800fc68:	d1f9      	bne.n	800fc5e <_vfiprintf_r+0x7a>
 800fc6a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc6e:	d00b      	beq.n	800fc88 <_vfiprintf_r+0xa4>
 800fc70:	465b      	mov	r3, fp
 800fc72:	4622      	mov	r2, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7ff ffa1 	bl	800fbbe <__sfputs_r>
 800fc7c:	3001      	adds	r0, #1
 800fc7e:	f000 80a7 	beq.w	800fdd0 <_vfiprintf_r+0x1ec>
 800fc82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc84:	445a      	add	r2, fp
 800fc86:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc88:	f89a 3000 	ldrb.w	r3, [sl]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 809f 	beq.w	800fdd0 <_vfiprintf_r+0x1ec>
 800fc92:	2300      	movs	r3, #0
 800fc94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fc98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc9c:	f10a 0a01 	add.w	sl, sl, #1
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	9307      	str	r3, [sp, #28]
 800fca4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fca8:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcaa:	4654      	mov	r4, sl
 800fcac:	2205      	movs	r2, #5
 800fcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb2:	4853      	ldr	r0, [pc, #332]	@ (800fe00 <_vfiprintf_r+0x21c>)
 800fcb4:	f7f0 faac 	bl	8000210 <memchr>
 800fcb8:	9a04      	ldr	r2, [sp, #16]
 800fcba:	b9d8      	cbnz	r0, 800fcf4 <_vfiprintf_r+0x110>
 800fcbc:	06d1      	lsls	r1, r2, #27
 800fcbe:	bf44      	itt	mi
 800fcc0:	2320      	movmi	r3, #32
 800fcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcc6:	0713      	lsls	r3, r2, #28
 800fcc8:	bf44      	itt	mi
 800fcca:	232b      	movmi	r3, #43	@ 0x2b
 800fccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcd6:	d015      	beq.n	800fd04 <_vfiprintf_r+0x120>
 800fcd8:	9a07      	ldr	r2, [sp, #28]
 800fcda:	4654      	mov	r4, sl
 800fcdc:	2000      	movs	r0, #0
 800fcde:	f04f 0c0a 	mov.w	ip, #10
 800fce2:	4621      	mov	r1, r4
 800fce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce8:	3b30      	subs	r3, #48	@ 0x30
 800fcea:	2b09      	cmp	r3, #9
 800fcec:	d94b      	bls.n	800fd86 <_vfiprintf_r+0x1a2>
 800fcee:	b1b0      	cbz	r0, 800fd1e <_vfiprintf_r+0x13a>
 800fcf0:	9207      	str	r2, [sp, #28]
 800fcf2:	e014      	b.n	800fd1e <_vfiprintf_r+0x13a>
 800fcf4:	eba0 0308 	sub.w	r3, r0, r8
 800fcf8:	fa09 f303 	lsl.w	r3, r9, r3
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	9304      	str	r3, [sp, #16]
 800fd00:	46a2      	mov	sl, r4
 800fd02:	e7d2      	b.n	800fcaa <_vfiprintf_r+0xc6>
 800fd04:	9b03      	ldr	r3, [sp, #12]
 800fd06:	1d19      	adds	r1, r3, #4
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	9103      	str	r1, [sp, #12]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	bfbb      	ittet	lt
 800fd10:	425b      	neglt	r3, r3
 800fd12:	f042 0202 	orrlt.w	r2, r2, #2
 800fd16:	9307      	strge	r3, [sp, #28]
 800fd18:	9307      	strlt	r3, [sp, #28]
 800fd1a:	bfb8      	it	lt
 800fd1c:	9204      	strlt	r2, [sp, #16]
 800fd1e:	7823      	ldrb	r3, [r4, #0]
 800fd20:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd22:	d10a      	bne.n	800fd3a <_vfiprintf_r+0x156>
 800fd24:	7863      	ldrb	r3, [r4, #1]
 800fd26:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd28:	d132      	bne.n	800fd90 <_vfiprintf_r+0x1ac>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	1d1a      	adds	r2, r3, #4
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	9203      	str	r2, [sp, #12]
 800fd32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd36:	3402      	adds	r4, #2
 800fd38:	9305      	str	r3, [sp, #20]
 800fd3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe10 <_vfiprintf_r+0x22c>
 800fd3e:	7821      	ldrb	r1, [r4, #0]
 800fd40:	2203      	movs	r2, #3
 800fd42:	4650      	mov	r0, sl
 800fd44:	f7f0 fa64 	bl	8000210 <memchr>
 800fd48:	b138      	cbz	r0, 800fd5a <_vfiprintf_r+0x176>
 800fd4a:	9b04      	ldr	r3, [sp, #16]
 800fd4c:	eba0 000a 	sub.w	r0, r0, sl
 800fd50:	2240      	movs	r2, #64	@ 0x40
 800fd52:	4082      	lsls	r2, r0
 800fd54:	4313      	orrs	r3, r2
 800fd56:	3401      	adds	r4, #1
 800fd58:	9304      	str	r3, [sp, #16]
 800fd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd5e:	4829      	ldr	r0, [pc, #164]	@ (800fe04 <_vfiprintf_r+0x220>)
 800fd60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd64:	2206      	movs	r2, #6
 800fd66:	f7f0 fa53 	bl	8000210 <memchr>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d03f      	beq.n	800fdee <_vfiprintf_r+0x20a>
 800fd6e:	4b26      	ldr	r3, [pc, #152]	@ (800fe08 <_vfiprintf_r+0x224>)
 800fd70:	bb1b      	cbnz	r3, 800fdba <_vfiprintf_r+0x1d6>
 800fd72:	9b03      	ldr	r3, [sp, #12]
 800fd74:	3307      	adds	r3, #7
 800fd76:	f023 0307 	bic.w	r3, r3, #7
 800fd7a:	3308      	adds	r3, #8
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd80:	443b      	add	r3, r7
 800fd82:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd84:	e76a      	b.n	800fc5c <_vfiprintf_r+0x78>
 800fd86:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	e7a8      	b.n	800fce2 <_vfiprintf_r+0xfe>
 800fd90:	2300      	movs	r3, #0
 800fd92:	3401      	adds	r4, #1
 800fd94:	9305      	str	r3, [sp, #20]
 800fd96:	4619      	mov	r1, r3
 800fd98:	f04f 0c0a 	mov.w	ip, #10
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fda2:	3a30      	subs	r2, #48	@ 0x30
 800fda4:	2a09      	cmp	r2, #9
 800fda6:	d903      	bls.n	800fdb0 <_vfiprintf_r+0x1cc>
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d0c6      	beq.n	800fd3a <_vfiprintf_r+0x156>
 800fdac:	9105      	str	r1, [sp, #20]
 800fdae:	e7c4      	b.n	800fd3a <_vfiprintf_r+0x156>
 800fdb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e7f0      	b.n	800fd9c <_vfiprintf_r+0x1b8>
 800fdba:	ab03      	add	r3, sp, #12
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	462a      	mov	r2, r5
 800fdc0:	4b12      	ldr	r3, [pc, #72]	@ (800fe0c <_vfiprintf_r+0x228>)
 800fdc2:	a904      	add	r1, sp, #16
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7fd fda3 	bl	800d910 <_printf_float>
 800fdca:	4607      	mov	r7, r0
 800fdcc:	1c78      	adds	r0, r7, #1
 800fdce:	d1d6      	bne.n	800fd7e <_vfiprintf_r+0x19a>
 800fdd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdd2:	07d9      	lsls	r1, r3, #31
 800fdd4:	d405      	bmi.n	800fde2 <_vfiprintf_r+0x1fe>
 800fdd6:	89ab      	ldrh	r3, [r5, #12]
 800fdd8:	059a      	lsls	r2, r3, #22
 800fdda:	d402      	bmi.n	800fde2 <_vfiprintf_r+0x1fe>
 800fddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdde:	f7fe fb11 	bl	800e404 <__retarget_lock_release_recursive>
 800fde2:	89ab      	ldrh	r3, [r5, #12]
 800fde4:	065b      	lsls	r3, r3, #25
 800fde6:	f53f af1f 	bmi.w	800fc28 <_vfiprintf_r+0x44>
 800fdea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdec:	e71e      	b.n	800fc2c <_vfiprintf_r+0x48>
 800fdee:	ab03      	add	r3, sp, #12
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	462a      	mov	r2, r5
 800fdf4:	4b05      	ldr	r3, [pc, #20]	@ (800fe0c <_vfiprintf_r+0x228>)
 800fdf6:	a904      	add	r1, sp, #16
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7fe f8c3 	bl	800df84 <_printf_i>
 800fdfe:	e7e4      	b.n	800fdca <_vfiprintf_r+0x1e6>
 800fe00:	080129c0 	.word	0x080129c0
 800fe04:	080129ca 	.word	0x080129ca
 800fe08:	0800d911 	.word	0x0800d911
 800fe0c:	0800fbbf 	.word	0x0800fbbf
 800fe10:	080129c6 	.word	0x080129c6

0800fe14 <__swbuf_r>:
 800fe14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe16:	460e      	mov	r6, r1
 800fe18:	4614      	mov	r4, r2
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	b118      	cbz	r0, 800fe26 <__swbuf_r+0x12>
 800fe1e:	6a03      	ldr	r3, [r0, #32]
 800fe20:	b90b      	cbnz	r3, 800fe26 <__swbuf_r+0x12>
 800fe22:	f7fe fa65 	bl	800e2f0 <__sinit>
 800fe26:	69a3      	ldr	r3, [r4, #24]
 800fe28:	60a3      	str	r3, [r4, #8]
 800fe2a:	89a3      	ldrh	r3, [r4, #12]
 800fe2c:	071a      	lsls	r2, r3, #28
 800fe2e:	d501      	bpl.n	800fe34 <__swbuf_r+0x20>
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	b943      	cbnz	r3, 800fe46 <__swbuf_r+0x32>
 800fe34:	4621      	mov	r1, r4
 800fe36:	4628      	mov	r0, r5
 800fe38:	f000 f82a 	bl	800fe90 <__swsetup_r>
 800fe3c:	b118      	cbz	r0, 800fe46 <__swbuf_r+0x32>
 800fe3e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fe42:	4638      	mov	r0, r7
 800fe44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe46:	6823      	ldr	r3, [r4, #0]
 800fe48:	6922      	ldr	r2, [r4, #16]
 800fe4a:	1a98      	subs	r0, r3, r2
 800fe4c:	6963      	ldr	r3, [r4, #20]
 800fe4e:	b2f6      	uxtb	r6, r6
 800fe50:	4283      	cmp	r3, r0
 800fe52:	4637      	mov	r7, r6
 800fe54:	dc05      	bgt.n	800fe62 <__swbuf_r+0x4e>
 800fe56:	4621      	mov	r1, r4
 800fe58:	4628      	mov	r0, r5
 800fe5a:	f7ff fa17 	bl	800f28c <_fflush_r>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d1ed      	bne.n	800fe3e <__swbuf_r+0x2a>
 800fe62:	68a3      	ldr	r3, [r4, #8]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	60a3      	str	r3, [r4, #8]
 800fe68:	6823      	ldr	r3, [r4, #0]
 800fe6a:	1c5a      	adds	r2, r3, #1
 800fe6c:	6022      	str	r2, [r4, #0]
 800fe6e:	701e      	strb	r6, [r3, #0]
 800fe70:	6962      	ldr	r2, [r4, #20]
 800fe72:	1c43      	adds	r3, r0, #1
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d004      	beq.n	800fe82 <__swbuf_r+0x6e>
 800fe78:	89a3      	ldrh	r3, [r4, #12]
 800fe7a:	07db      	lsls	r3, r3, #31
 800fe7c:	d5e1      	bpl.n	800fe42 <__swbuf_r+0x2e>
 800fe7e:	2e0a      	cmp	r6, #10
 800fe80:	d1df      	bne.n	800fe42 <__swbuf_r+0x2e>
 800fe82:	4621      	mov	r1, r4
 800fe84:	4628      	mov	r0, r5
 800fe86:	f7ff fa01 	bl	800f28c <_fflush_r>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d0d9      	beq.n	800fe42 <__swbuf_r+0x2e>
 800fe8e:	e7d6      	b.n	800fe3e <__swbuf_r+0x2a>

0800fe90 <__swsetup_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	4b29      	ldr	r3, [pc, #164]	@ (800ff38 <__swsetup_r+0xa8>)
 800fe94:	4605      	mov	r5, r0
 800fe96:	6818      	ldr	r0, [r3, #0]
 800fe98:	460c      	mov	r4, r1
 800fe9a:	b118      	cbz	r0, 800fea4 <__swsetup_r+0x14>
 800fe9c:	6a03      	ldr	r3, [r0, #32]
 800fe9e:	b90b      	cbnz	r3, 800fea4 <__swsetup_r+0x14>
 800fea0:	f7fe fa26 	bl	800e2f0 <__sinit>
 800fea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fea8:	0719      	lsls	r1, r3, #28
 800feaa:	d422      	bmi.n	800fef2 <__swsetup_r+0x62>
 800feac:	06da      	lsls	r2, r3, #27
 800feae:	d407      	bmi.n	800fec0 <__swsetup_r+0x30>
 800feb0:	2209      	movs	r2, #9
 800feb2:	602a      	str	r2, [r5, #0]
 800feb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feb8:	81a3      	strh	r3, [r4, #12]
 800feba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800febe:	e033      	b.n	800ff28 <__swsetup_r+0x98>
 800fec0:	0758      	lsls	r0, r3, #29
 800fec2:	d512      	bpl.n	800feea <__swsetup_r+0x5a>
 800fec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fec6:	b141      	cbz	r1, 800feda <__swsetup_r+0x4a>
 800fec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fecc:	4299      	cmp	r1, r3
 800fece:	d002      	beq.n	800fed6 <__swsetup_r+0x46>
 800fed0:	4628      	mov	r0, r5
 800fed2:	f7ff f905 	bl	800f0e0 <_free_r>
 800fed6:	2300      	movs	r3, #0
 800fed8:	6363      	str	r3, [r4, #52]	@ 0x34
 800feda:	89a3      	ldrh	r3, [r4, #12]
 800fedc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fee0:	81a3      	strh	r3, [r4, #12]
 800fee2:	2300      	movs	r3, #0
 800fee4:	6063      	str	r3, [r4, #4]
 800fee6:	6923      	ldr	r3, [r4, #16]
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	f043 0308 	orr.w	r3, r3, #8
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	b94b      	cbnz	r3, 800ff0a <__swsetup_r+0x7a>
 800fef6:	89a3      	ldrh	r3, [r4, #12]
 800fef8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fefc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff00:	d003      	beq.n	800ff0a <__swsetup_r+0x7a>
 800ff02:	4621      	mov	r1, r4
 800ff04:	4628      	mov	r0, r5
 800ff06:	f000 f83f 	bl	800ff88 <__smakebuf_r>
 800ff0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff0e:	f013 0201 	ands.w	r2, r3, #1
 800ff12:	d00a      	beq.n	800ff2a <__swsetup_r+0x9a>
 800ff14:	2200      	movs	r2, #0
 800ff16:	60a2      	str	r2, [r4, #8]
 800ff18:	6962      	ldr	r2, [r4, #20]
 800ff1a:	4252      	negs	r2, r2
 800ff1c:	61a2      	str	r2, [r4, #24]
 800ff1e:	6922      	ldr	r2, [r4, #16]
 800ff20:	b942      	cbnz	r2, 800ff34 <__swsetup_r+0xa4>
 800ff22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff26:	d1c5      	bne.n	800feb4 <__swsetup_r+0x24>
 800ff28:	bd38      	pop	{r3, r4, r5, pc}
 800ff2a:	0799      	lsls	r1, r3, #30
 800ff2c:	bf58      	it	pl
 800ff2e:	6962      	ldrpl	r2, [r4, #20]
 800ff30:	60a2      	str	r2, [r4, #8]
 800ff32:	e7f4      	b.n	800ff1e <__swsetup_r+0x8e>
 800ff34:	2000      	movs	r0, #0
 800ff36:	e7f7      	b.n	800ff28 <__swsetup_r+0x98>
 800ff38:	20000058 	.word	0x20000058

0800ff3c <__swhatbuf_r>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	460c      	mov	r4, r1
 800ff40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff44:	2900      	cmp	r1, #0
 800ff46:	b096      	sub	sp, #88	@ 0x58
 800ff48:	4615      	mov	r5, r2
 800ff4a:	461e      	mov	r6, r3
 800ff4c:	da0d      	bge.n	800ff6a <__swhatbuf_r+0x2e>
 800ff4e:	89a3      	ldrh	r3, [r4, #12]
 800ff50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff54:	f04f 0100 	mov.w	r1, #0
 800ff58:	bf14      	ite	ne
 800ff5a:	2340      	movne	r3, #64	@ 0x40
 800ff5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff60:	2000      	movs	r0, #0
 800ff62:	6031      	str	r1, [r6, #0]
 800ff64:	602b      	str	r3, [r5, #0]
 800ff66:	b016      	add	sp, #88	@ 0x58
 800ff68:	bd70      	pop	{r4, r5, r6, pc}
 800ff6a:	466a      	mov	r2, sp
 800ff6c:	f000 f89c 	bl	80100a8 <_fstat_r>
 800ff70:	2800      	cmp	r0, #0
 800ff72:	dbec      	blt.n	800ff4e <__swhatbuf_r+0x12>
 800ff74:	9901      	ldr	r1, [sp, #4]
 800ff76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff7e:	4259      	negs	r1, r3
 800ff80:	4159      	adcs	r1, r3
 800ff82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff86:	e7eb      	b.n	800ff60 <__swhatbuf_r+0x24>

0800ff88 <__smakebuf_r>:
 800ff88:	898b      	ldrh	r3, [r1, #12]
 800ff8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff8c:	079d      	lsls	r5, r3, #30
 800ff8e:	4606      	mov	r6, r0
 800ff90:	460c      	mov	r4, r1
 800ff92:	d507      	bpl.n	800ffa4 <__smakebuf_r+0x1c>
 800ff94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	6123      	str	r3, [r4, #16]
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	6163      	str	r3, [r4, #20]
 800ffa0:	b003      	add	sp, #12
 800ffa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa4:	ab01      	add	r3, sp, #4
 800ffa6:	466a      	mov	r2, sp
 800ffa8:	f7ff ffc8 	bl	800ff3c <__swhatbuf_r>
 800ffac:	9f00      	ldr	r7, [sp, #0]
 800ffae:	4605      	mov	r5, r0
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	f7fd fef8 	bl	800dda8 <_malloc_r>
 800ffb8:	b948      	cbnz	r0, 800ffce <__smakebuf_r+0x46>
 800ffba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffbe:	059a      	lsls	r2, r3, #22
 800ffc0:	d4ee      	bmi.n	800ffa0 <__smakebuf_r+0x18>
 800ffc2:	f023 0303 	bic.w	r3, r3, #3
 800ffc6:	f043 0302 	orr.w	r3, r3, #2
 800ffca:	81a3      	strh	r3, [r4, #12]
 800ffcc:	e7e2      	b.n	800ff94 <__smakebuf_r+0xc>
 800ffce:	89a3      	ldrh	r3, [r4, #12]
 800ffd0:	6020      	str	r0, [r4, #0]
 800ffd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffd6:	81a3      	strh	r3, [r4, #12]
 800ffd8:	9b01      	ldr	r3, [sp, #4]
 800ffda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ffde:	b15b      	cbz	r3, 800fff8 <__smakebuf_r+0x70>
 800ffe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	f000 f83b 	bl	8010060 <_isatty_r>
 800ffea:	b128      	cbz	r0, 800fff8 <__smakebuf_r+0x70>
 800ffec:	89a3      	ldrh	r3, [r4, #12]
 800ffee:	f023 0303 	bic.w	r3, r3, #3
 800fff2:	f043 0301 	orr.w	r3, r3, #1
 800fff6:	81a3      	strh	r3, [r4, #12]
 800fff8:	89a3      	ldrh	r3, [r4, #12]
 800fffa:	431d      	orrs	r5, r3
 800fffc:	81a5      	strh	r5, [r4, #12]
 800fffe:	e7cf      	b.n	800ffa0 <__smakebuf_r+0x18>

08010000 <_raise_r>:
 8010000:	291f      	cmp	r1, #31
 8010002:	b538      	push	{r3, r4, r5, lr}
 8010004:	4605      	mov	r5, r0
 8010006:	460c      	mov	r4, r1
 8010008:	d904      	bls.n	8010014 <_raise_r+0x14>
 801000a:	2316      	movs	r3, #22
 801000c:	6003      	str	r3, [r0, #0]
 801000e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010012:	bd38      	pop	{r3, r4, r5, pc}
 8010014:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010016:	b112      	cbz	r2, 801001e <_raise_r+0x1e>
 8010018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801001c:	b94b      	cbnz	r3, 8010032 <_raise_r+0x32>
 801001e:	4628      	mov	r0, r5
 8010020:	f000 f840 	bl	80100a4 <_getpid_r>
 8010024:	4622      	mov	r2, r4
 8010026:	4601      	mov	r1, r0
 8010028:	4628      	mov	r0, r5
 801002a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801002e:	f000 b827 	b.w	8010080 <_kill_r>
 8010032:	2b01      	cmp	r3, #1
 8010034:	d00a      	beq.n	801004c <_raise_r+0x4c>
 8010036:	1c59      	adds	r1, r3, #1
 8010038:	d103      	bne.n	8010042 <_raise_r+0x42>
 801003a:	2316      	movs	r3, #22
 801003c:	6003      	str	r3, [r0, #0]
 801003e:	2001      	movs	r0, #1
 8010040:	e7e7      	b.n	8010012 <_raise_r+0x12>
 8010042:	2100      	movs	r1, #0
 8010044:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010048:	4620      	mov	r0, r4
 801004a:	4798      	blx	r3
 801004c:	2000      	movs	r0, #0
 801004e:	e7e0      	b.n	8010012 <_raise_r+0x12>

08010050 <raise>:
 8010050:	4b02      	ldr	r3, [pc, #8]	@ (801005c <raise+0xc>)
 8010052:	4601      	mov	r1, r0
 8010054:	6818      	ldr	r0, [r3, #0]
 8010056:	f7ff bfd3 	b.w	8010000 <_raise_r>
 801005a:	bf00      	nop
 801005c:	20000058 	.word	0x20000058

08010060 <_isatty_r>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	4d06      	ldr	r5, [pc, #24]	@ (801007c <_isatty_r+0x1c>)
 8010064:	2300      	movs	r3, #0
 8010066:	4604      	mov	r4, r0
 8010068:	4608      	mov	r0, r1
 801006a:	602b      	str	r3, [r5, #0]
 801006c:	f7f7 fe5c 	bl	8007d28 <_isatty>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d102      	bne.n	801007a <_isatty_r+0x1a>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	b103      	cbz	r3, 801007a <_isatty_r+0x1a>
 8010078:	6023      	str	r3, [r4, #0]
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	20000aac 	.word	0x20000aac

08010080 <_kill_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4d07      	ldr	r5, [pc, #28]	@ (80100a0 <_kill_r+0x20>)
 8010084:	2300      	movs	r3, #0
 8010086:	4604      	mov	r4, r0
 8010088:	4608      	mov	r0, r1
 801008a:	4611      	mov	r1, r2
 801008c:	602b      	str	r3, [r5, #0]
 801008e:	f7f7 fddb 	bl	8007c48 <_kill>
 8010092:	1c43      	adds	r3, r0, #1
 8010094:	d102      	bne.n	801009c <_kill_r+0x1c>
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	b103      	cbz	r3, 801009c <_kill_r+0x1c>
 801009a:	6023      	str	r3, [r4, #0]
 801009c:	bd38      	pop	{r3, r4, r5, pc}
 801009e:	bf00      	nop
 80100a0:	20000aac 	.word	0x20000aac

080100a4 <_getpid_r>:
 80100a4:	f7f7 bdc8 	b.w	8007c38 <_getpid>

080100a8 <_fstat_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d07      	ldr	r5, [pc, #28]	@ (80100c8 <_fstat_r+0x20>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	4611      	mov	r1, r2
 80100b4:	602b      	str	r3, [r5, #0]
 80100b6:	f7f7 fe27 	bl	8007d08 <_fstat>
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	d102      	bne.n	80100c4 <_fstat_r+0x1c>
 80100be:	682b      	ldr	r3, [r5, #0]
 80100c0:	b103      	cbz	r3, 80100c4 <_fstat_r+0x1c>
 80100c2:	6023      	str	r3, [r4, #0]
 80100c4:	bd38      	pop	{r3, r4, r5, pc}
 80100c6:	bf00      	nop
 80100c8:	20000aac 	.word	0x20000aac

080100cc <acosf>:
 80100cc:	b508      	push	{r3, lr}
 80100ce:	ed2d 8b02 	vpush	{d8}
 80100d2:	eeb0 8a40 	vmov.f32	s16, s0
 80100d6:	f000 f97d 	bl	80103d4 <__ieee754_acosf>
 80100da:	eeb4 8a48 	vcmp.f32	s16, s16
 80100de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e2:	eef0 8a40 	vmov.f32	s17, s0
 80100e6:	d615      	bvs.n	8010114 <acosf+0x48>
 80100e8:	eeb0 0a48 	vmov.f32	s0, s16
 80100ec:	f000 f902 	bl	80102f4 <fabsf>
 80100f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80100f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80100f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fc:	dd0a      	ble.n	8010114 <acosf+0x48>
 80100fe:	f7fe f955 	bl	800e3ac <__errno>
 8010102:	ecbd 8b02 	vpop	{d8}
 8010106:	2321      	movs	r3, #33	@ 0x21
 8010108:	6003      	str	r3, [r0, #0]
 801010a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801010e:	4804      	ldr	r0, [pc, #16]	@ (8010120 <acosf+0x54>)
 8010110:	f000 b94e 	b.w	80103b0 <nanf>
 8010114:	eeb0 0a68 	vmov.f32	s0, s17
 8010118:	ecbd 8b02 	vpop	{d8}
 801011c:	bd08      	pop	{r3, pc}
 801011e:	bf00      	nop
 8010120:	080129bf 	.word	0x080129bf

08010124 <asinf>:
 8010124:	b508      	push	{r3, lr}
 8010126:	ed2d 8b02 	vpush	{d8}
 801012a:	eeb0 8a40 	vmov.f32	s16, s0
 801012e:	f000 fa47 	bl	80105c0 <__ieee754_asinf>
 8010132:	eeb4 8a48 	vcmp.f32	s16, s16
 8010136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013a:	eef0 8a40 	vmov.f32	s17, s0
 801013e:	d615      	bvs.n	801016c <asinf+0x48>
 8010140:	eeb0 0a48 	vmov.f32	s0, s16
 8010144:	f000 f8d6 	bl	80102f4 <fabsf>
 8010148:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801014c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010154:	dd0a      	ble.n	801016c <asinf+0x48>
 8010156:	f7fe f929 	bl	800e3ac <__errno>
 801015a:	ecbd 8b02 	vpop	{d8}
 801015e:	2321      	movs	r3, #33	@ 0x21
 8010160:	6003      	str	r3, [r0, #0]
 8010162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010166:	4804      	ldr	r0, [pc, #16]	@ (8010178 <asinf+0x54>)
 8010168:	f000 b922 	b.w	80103b0 <nanf>
 801016c:	eeb0 0a68 	vmov.f32	s0, s17
 8010170:	ecbd 8b02 	vpop	{d8}
 8010174:	bd08      	pop	{r3, pc}
 8010176:	bf00      	nop
 8010178:	080129bf 	.word	0x080129bf

0801017c <atan2f>:
 801017c:	f000 bb04 	b.w	8010788 <__ieee754_atan2f>

08010180 <sqrtf>:
 8010180:	b508      	push	{r3, lr}
 8010182:	ed2d 8b02 	vpush	{d8}
 8010186:	eeb0 8a40 	vmov.f32	s16, s0
 801018a:	f000 fc73 	bl	8010a74 <__ieee754_sqrtf>
 801018e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010196:	d60c      	bvs.n	80101b2 <sqrtf+0x32>
 8010198:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80101b8 <sqrtf+0x38>
 801019c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80101a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a4:	d505      	bpl.n	80101b2 <sqrtf+0x32>
 80101a6:	f7fe f901 	bl	800e3ac <__errno>
 80101aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80101ae:	2321      	movs	r3, #33	@ 0x21
 80101b0:	6003      	str	r3, [r0, #0]
 80101b2:	ecbd 8b02 	vpop	{d8}
 80101b6:	bd08      	pop	{r3, pc}
 80101b8:	00000000 	.word	0x00000000

080101bc <pow>:
 80101bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101be:	ed2d 8b02 	vpush	{d8}
 80101c2:	eeb0 8a40 	vmov.f32	s16, s0
 80101c6:	eef0 8a60 	vmov.f32	s17, s1
 80101ca:	ec55 4b11 	vmov	r4, r5, d1
 80101ce:	f000 fcf3 	bl	8010bb8 <__ieee754_pow>
 80101d2:	4622      	mov	r2, r4
 80101d4:	462b      	mov	r3, r5
 80101d6:	4620      	mov	r0, r4
 80101d8:	4629      	mov	r1, r5
 80101da:	ec57 6b10 	vmov	r6, r7, d0
 80101de:	f7f0 fcc5 	bl	8000b6c <__aeabi_dcmpun>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d13b      	bne.n	801025e <pow+0xa2>
 80101e6:	ec51 0b18 	vmov	r0, r1, d8
 80101ea:	2200      	movs	r2, #0
 80101ec:	2300      	movs	r3, #0
 80101ee:	f7f0 fc8b 	bl	8000b08 <__aeabi_dcmpeq>
 80101f2:	b1b8      	cbz	r0, 8010224 <pow+0x68>
 80101f4:	2200      	movs	r2, #0
 80101f6:	2300      	movs	r3, #0
 80101f8:	4620      	mov	r0, r4
 80101fa:	4629      	mov	r1, r5
 80101fc:	f7f0 fc84 	bl	8000b08 <__aeabi_dcmpeq>
 8010200:	2800      	cmp	r0, #0
 8010202:	d146      	bne.n	8010292 <pow+0xd6>
 8010204:	ec45 4b10 	vmov	d0, r4, r5
 8010208:	f000 f8d8 	bl	80103bc <finite>
 801020c:	b338      	cbz	r0, 801025e <pow+0xa2>
 801020e:	2200      	movs	r2, #0
 8010210:	2300      	movs	r3, #0
 8010212:	4620      	mov	r0, r4
 8010214:	4629      	mov	r1, r5
 8010216:	f7f0 fc81 	bl	8000b1c <__aeabi_dcmplt>
 801021a:	b300      	cbz	r0, 801025e <pow+0xa2>
 801021c:	f7fe f8c6 	bl	800e3ac <__errno>
 8010220:	2322      	movs	r3, #34	@ 0x22
 8010222:	e01b      	b.n	801025c <pow+0xa0>
 8010224:	ec47 6b10 	vmov	d0, r6, r7
 8010228:	f000 f8c8 	bl	80103bc <finite>
 801022c:	b9e0      	cbnz	r0, 8010268 <pow+0xac>
 801022e:	eeb0 0a48 	vmov.f32	s0, s16
 8010232:	eef0 0a68 	vmov.f32	s1, s17
 8010236:	f000 f8c1 	bl	80103bc <finite>
 801023a:	b1a8      	cbz	r0, 8010268 <pow+0xac>
 801023c:	ec45 4b10 	vmov	d0, r4, r5
 8010240:	f000 f8bc 	bl	80103bc <finite>
 8010244:	b180      	cbz	r0, 8010268 <pow+0xac>
 8010246:	4632      	mov	r2, r6
 8010248:	463b      	mov	r3, r7
 801024a:	4630      	mov	r0, r6
 801024c:	4639      	mov	r1, r7
 801024e:	f7f0 fc8d 	bl	8000b6c <__aeabi_dcmpun>
 8010252:	2800      	cmp	r0, #0
 8010254:	d0e2      	beq.n	801021c <pow+0x60>
 8010256:	f7fe f8a9 	bl	800e3ac <__errno>
 801025a:	2321      	movs	r3, #33	@ 0x21
 801025c:	6003      	str	r3, [r0, #0]
 801025e:	ecbd 8b02 	vpop	{d8}
 8010262:	ec47 6b10 	vmov	d0, r6, r7
 8010266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010268:	2200      	movs	r2, #0
 801026a:	2300      	movs	r3, #0
 801026c:	4630      	mov	r0, r6
 801026e:	4639      	mov	r1, r7
 8010270:	f7f0 fc4a 	bl	8000b08 <__aeabi_dcmpeq>
 8010274:	2800      	cmp	r0, #0
 8010276:	d0f2      	beq.n	801025e <pow+0xa2>
 8010278:	eeb0 0a48 	vmov.f32	s0, s16
 801027c:	eef0 0a68 	vmov.f32	s1, s17
 8010280:	f000 f89c 	bl	80103bc <finite>
 8010284:	2800      	cmp	r0, #0
 8010286:	d0ea      	beq.n	801025e <pow+0xa2>
 8010288:	ec45 4b10 	vmov	d0, r4, r5
 801028c:	f000 f896 	bl	80103bc <finite>
 8010290:	e7c3      	b.n	801021a <pow+0x5e>
 8010292:	4f01      	ldr	r7, [pc, #4]	@ (8010298 <pow+0xdc>)
 8010294:	2600      	movs	r6, #0
 8010296:	e7e2      	b.n	801025e <pow+0xa2>
 8010298:	3ff00000 	.word	0x3ff00000

0801029c <sqrt>:
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	ed2d 8b02 	vpush	{d8}
 80102a2:	ec55 4b10 	vmov	r4, r5, d0
 80102a6:	f000 fb0f 	bl	80108c8 <__ieee754_sqrt>
 80102aa:	4622      	mov	r2, r4
 80102ac:	462b      	mov	r3, r5
 80102ae:	4620      	mov	r0, r4
 80102b0:	4629      	mov	r1, r5
 80102b2:	eeb0 8a40 	vmov.f32	s16, s0
 80102b6:	eef0 8a60 	vmov.f32	s17, s1
 80102ba:	f7f0 fc57 	bl	8000b6c <__aeabi_dcmpun>
 80102be:	b990      	cbnz	r0, 80102e6 <sqrt+0x4a>
 80102c0:	2200      	movs	r2, #0
 80102c2:	2300      	movs	r3, #0
 80102c4:	4620      	mov	r0, r4
 80102c6:	4629      	mov	r1, r5
 80102c8:	f7f0 fc28 	bl	8000b1c <__aeabi_dcmplt>
 80102cc:	b158      	cbz	r0, 80102e6 <sqrt+0x4a>
 80102ce:	f7fe f86d 	bl	800e3ac <__errno>
 80102d2:	2321      	movs	r3, #33	@ 0x21
 80102d4:	6003      	str	r3, [r0, #0]
 80102d6:	2200      	movs	r2, #0
 80102d8:	2300      	movs	r3, #0
 80102da:	4610      	mov	r0, r2
 80102dc:	4619      	mov	r1, r3
 80102de:	f7f0 fad5 	bl	800088c <__aeabi_ddiv>
 80102e2:	ec41 0b18 	vmov	d8, r0, r1
 80102e6:	eeb0 0a48 	vmov.f32	s0, s16
 80102ea:	eef0 0a68 	vmov.f32	s1, s17
 80102ee:	ecbd 8b02 	vpop	{d8}
 80102f2:	bd38      	pop	{r3, r4, r5, pc}

080102f4 <fabsf>:
 80102f4:	ee10 3a10 	vmov	r3, s0
 80102f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102fc:	ee00 3a10 	vmov	s0, r3
 8010300:	4770      	bx	lr
 8010302:	0000      	movs	r0, r0
 8010304:	0000      	movs	r0, r0
	...

08010308 <cos>:
 8010308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801030a:	ec53 2b10 	vmov	r2, r3, d0
 801030e:	4826      	ldr	r0, [pc, #152]	@ (80103a8 <cos+0xa0>)
 8010310:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010314:	4281      	cmp	r1, r0
 8010316:	d806      	bhi.n	8010326 <cos+0x1e>
 8010318:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80103a0 <cos+0x98>
 801031c:	b005      	add	sp, #20
 801031e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010322:	f001 bf1d 	b.w	8012160 <__kernel_cos>
 8010326:	4821      	ldr	r0, [pc, #132]	@ (80103ac <cos+0xa4>)
 8010328:	4281      	cmp	r1, r0
 801032a:	d908      	bls.n	801033e <cos+0x36>
 801032c:	4610      	mov	r0, r2
 801032e:	4619      	mov	r1, r3
 8010330:	f7ef ffca 	bl	80002c8 <__aeabi_dsub>
 8010334:	ec41 0b10 	vmov	d0, r0, r1
 8010338:	b005      	add	sp, #20
 801033a:	f85d fb04 	ldr.w	pc, [sp], #4
 801033e:	4668      	mov	r0, sp
 8010340:	f001 f986 	bl	8011650 <__ieee754_rem_pio2>
 8010344:	f000 0003 	and.w	r0, r0, #3
 8010348:	2801      	cmp	r0, #1
 801034a:	d00b      	beq.n	8010364 <cos+0x5c>
 801034c:	2802      	cmp	r0, #2
 801034e:	d015      	beq.n	801037c <cos+0x74>
 8010350:	b9d8      	cbnz	r0, 801038a <cos+0x82>
 8010352:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010356:	ed9d 0b00 	vldr	d0, [sp]
 801035a:	f001 ff01 	bl	8012160 <__kernel_cos>
 801035e:	ec51 0b10 	vmov	r0, r1, d0
 8010362:	e7e7      	b.n	8010334 <cos+0x2c>
 8010364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010368:	ed9d 0b00 	vldr	d0, [sp]
 801036c:	f001 ffc0 	bl	80122f0 <__kernel_sin>
 8010370:	ec53 2b10 	vmov	r2, r3, d0
 8010374:	4610      	mov	r0, r2
 8010376:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801037a:	e7db      	b.n	8010334 <cos+0x2c>
 801037c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010380:	ed9d 0b00 	vldr	d0, [sp]
 8010384:	f001 feec 	bl	8012160 <__kernel_cos>
 8010388:	e7f2      	b.n	8010370 <cos+0x68>
 801038a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801038e:	ed9d 0b00 	vldr	d0, [sp]
 8010392:	2001      	movs	r0, #1
 8010394:	f001 ffac 	bl	80122f0 <__kernel_sin>
 8010398:	e7e1      	b.n	801035e <cos+0x56>
 801039a:	bf00      	nop
 801039c:	f3af 8000 	nop.w
	...
 80103a8:	3fe921fb 	.word	0x3fe921fb
 80103ac:	7fefffff 	.word	0x7fefffff

080103b0 <nanf>:
 80103b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80103b8 <nanf+0x8>
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	7fc00000 	.word	0x7fc00000

080103bc <finite>:
 80103bc:	b082      	sub	sp, #8
 80103be:	ed8d 0b00 	vstr	d0, [sp]
 80103c2:	9801      	ldr	r0, [sp, #4]
 80103c4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80103c8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80103cc:	0fc0      	lsrs	r0, r0, #31
 80103ce:	b002      	add	sp, #8
 80103d0:	4770      	bx	lr
	...

080103d4 <__ieee754_acosf>:
 80103d4:	b508      	push	{r3, lr}
 80103d6:	ee10 3a10 	vmov	r3, s0
 80103da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80103de:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80103e2:	ed2d 8b0c 	vpush	{d8-d13}
 80103e6:	d10a      	bne.n	80103fe <__ieee754_acosf+0x2a>
 80103e8:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 801057c <__ieee754_acosf+0x1a8>
 80103ec:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010580 <__ieee754_acosf+0x1ac>
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	bfc8      	it	gt
 80103f4:	eeb0 0a67 	vmovgt.f32	s0, s15
 80103f8:	ecbd 8b0c 	vpop	{d8-d13}
 80103fc:	bd08      	pop	{r3, pc}
 80103fe:	d904      	bls.n	801040a <__ieee754_acosf+0x36>
 8010400:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010404:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010408:	e7f6      	b.n	80103f8 <__ieee754_acosf+0x24>
 801040a:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801040e:	d23c      	bcs.n	801048a <__ieee754_acosf+0xb6>
 8010410:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8010414:	f240 80af 	bls.w	8010576 <__ieee754_acosf+0x1a2>
 8010418:	ee60 7a00 	vmul.f32	s15, s0, s0
 801041c:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010584 <__ieee754_acosf+0x1b0>
 8010420:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010588 <__ieee754_acosf+0x1b4>
 8010424:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 801058c <__ieee754_acosf+0x1b8>
 8010428:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801042c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8010590 <__ieee754_acosf+0x1bc>
 8010430:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010434:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8010594 <__ieee754_acosf+0x1c0>
 8010438:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801043c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8010598 <__ieee754_acosf+0x1c4>
 8010440:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010444:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801059c <__ieee754_acosf+0x1c8>
 8010448:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801044c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80105a0 <__ieee754_acosf+0x1cc>
 8010450:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010454:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80105a4 <__ieee754_acosf+0x1d0>
 8010458:	eee6 6a27 	vfma.f32	s13, s12, s15
 801045c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80105a8 <__ieee754_acosf+0x1d4>
 8010460:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010468:	eee6 6a27 	vfma.f32	s13, s12, s15
 801046c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010470:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80105ac <__ieee754_acosf+0x1d8>
 8010474:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010478:	eee0 7a46 	vfms.f32	s15, s0, s12
 801047c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010480:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80105b0 <__ieee754_acosf+0x1dc>
 8010484:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010488:	e7b6      	b.n	80103f8 <__ieee754_acosf+0x24>
 801048a:	2b00      	cmp	r3, #0
 801048c:	eddf da3d 	vldr	s27, [pc, #244]	@ 8010584 <__ieee754_acosf+0x1b0>
 8010490:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8010588 <__ieee754_acosf+0x1b4>
 8010494:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8010590 <__ieee754_acosf+0x1bc>
 8010498:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8010594 <__ieee754_acosf+0x1c0>
 801049c:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8010598 <__ieee754_acosf+0x1c4>
 80104a0:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 801059c <__ieee754_acosf+0x1c8>
 80104a4:	ed9f da3e 	vldr	s26, [pc, #248]	@ 80105a0 <__ieee754_acosf+0x1cc>
 80104a8:	eddf aa38 	vldr	s21, [pc, #224]	@ 801058c <__ieee754_acosf+0x1b8>
 80104ac:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 80105a4 <__ieee754_acosf+0x1d0>
 80104b0:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 80105a8 <__ieee754_acosf+0x1d4>
 80104b4:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80104b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80104bc:	da28      	bge.n	8010510 <__ieee754_acosf+0x13c>
 80104be:	ee30 8a09 	vadd.f32	s16, s0, s18
 80104c2:	ee28 0a27 	vmul.f32	s0, s16, s15
 80104c6:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80104ca:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80104ce:	eeac ca80 	vfma.f32	s24, s25, s0
 80104d2:	eeaa aa80 	vfma.f32	s20, s21, s0
 80104d6:	eeec ba00 	vfma.f32	s23, s24, s0
 80104da:	eeea 9a00 	vfma.f32	s19, s20, s0
 80104de:	eeab ba80 	vfma.f32	s22, s23, s0
 80104e2:	eea9 9a80 	vfma.f32	s18, s19, s0
 80104e6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80104ea:	ee68 8a80 	vmul.f32	s17, s17, s0
 80104ee:	f000 fac1 	bl	8010a74 <__ieee754_sqrtf>
 80104f2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80104f6:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80105b4 <__ieee754_acosf+0x1e0>
 80104fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80104fe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010502:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010506:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80105b8 <__ieee754_acosf+0x1e4>
 801050a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801050e:	e773      	b.n	80103f8 <__ieee754_acosf+0x24>
 8010510:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010514:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010518:	eeb0 0a48 	vmov.f32	s0, s16
 801051c:	f000 faaa 	bl	8010a74 <__ieee754_sqrtf>
 8010520:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010524:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010528:	eeac ca88 	vfma.f32	s24, s25, s16
 801052c:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010530:	eeec ba08 	vfma.f32	s23, s24, s16
 8010534:	ee10 3a10 	vmov	r3, s0
 8010538:	eeab ba88 	vfma.f32	s22, s23, s16
 801053c:	f36f 030b 	bfc	r3, #0, #12
 8010540:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010544:	ee07 3a90 	vmov	s15, r3
 8010548:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801054c:	eeb0 6a48 	vmov.f32	s12, s16
 8010550:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010554:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010558:	ee70 6a27 	vadd.f32	s13, s0, s15
 801055c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010560:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010564:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010568:	eea0 7a26 	vfma.f32	s14, s0, s13
 801056c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010570:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010574:	e740      	b.n	80103f8 <__ieee754_acosf+0x24>
 8010576:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80105bc <__ieee754_acosf+0x1e8>
 801057a:	e73d      	b.n	80103f8 <__ieee754_acosf+0x24>
 801057c:	40490fdb 	.word	0x40490fdb
 8010580:	00000000 	.word	0x00000000
 8010584:	3811ef08 	.word	0x3811ef08
 8010588:	3a4f7f04 	.word	0x3a4f7f04
 801058c:	bf303361 	.word	0xbf303361
 8010590:	bd241146 	.word	0xbd241146
 8010594:	3e4e0aa8 	.word	0x3e4e0aa8
 8010598:	bea6b090 	.word	0xbea6b090
 801059c:	3e2aaaab 	.word	0x3e2aaaab
 80105a0:	3d9dc62e 	.word	0x3d9dc62e
 80105a4:	4001572d 	.word	0x4001572d
 80105a8:	c019d139 	.word	0xc019d139
 80105ac:	33a22168 	.word	0x33a22168
 80105b0:	3fc90fda 	.word	0x3fc90fda
 80105b4:	b3a22168 	.word	0xb3a22168
 80105b8:	40490fda 	.word	0x40490fda
 80105bc:	3fc90fdb 	.word	0x3fc90fdb

080105c0 <__ieee754_asinf>:
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	ee10 5a10 	vmov	r5, s0
 80105c6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80105ca:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80105ce:	ed2d 8b04 	vpush	{d8-d9}
 80105d2:	d10c      	bne.n	80105ee <__ieee754_asinf+0x2e>
 80105d4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010748 <__ieee754_asinf+0x188>
 80105d8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801074c <__ieee754_asinf+0x18c>
 80105dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80105e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80105e4:	eeb0 0a67 	vmov.f32	s0, s15
 80105e8:	ecbd 8b04 	vpop	{d8-d9}
 80105ec:	bd38      	pop	{r3, r4, r5, pc}
 80105ee:	d904      	bls.n	80105fa <__ieee754_asinf+0x3a>
 80105f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80105f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80105f8:	e7f6      	b.n	80105e8 <__ieee754_asinf+0x28>
 80105fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80105fe:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010602:	d20b      	bcs.n	801061c <__ieee754_asinf+0x5c>
 8010604:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010608:	d252      	bcs.n	80106b0 <__ieee754_asinf+0xf0>
 801060a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8010750 <__ieee754_asinf+0x190>
 801060e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010612:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061a:	dce5      	bgt.n	80105e8 <__ieee754_asinf+0x28>
 801061c:	f7ff fe6a 	bl	80102f4 <fabsf>
 8010620:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010624:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010628:	ee28 8a27 	vmul.f32	s16, s16, s15
 801062c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010754 <__ieee754_asinf+0x194>
 8010630:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010758 <__ieee754_asinf+0x198>
 8010634:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 801075c <__ieee754_asinf+0x19c>
 8010638:	eea8 7a27 	vfma.f32	s14, s16, s15
 801063c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8010760 <__ieee754_asinf+0x1a0>
 8010640:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010644:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8010764 <__ieee754_asinf+0x1a4>
 8010648:	eea7 7a88 	vfma.f32	s14, s15, s16
 801064c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8010768 <__ieee754_asinf+0x1a8>
 8010650:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010654:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801076c <__ieee754_asinf+0x1ac>
 8010658:	eea7 9a88 	vfma.f32	s18, s15, s16
 801065c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8010770 <__ieee754_asinf+0x1b0>
 8010660:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010664:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8010774 <__ieee754_asinf+0x1b4>
 8010668:	eea7 7a88 	vfma.f32	s14, s15, s16
 801066c:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8010778 <__ieee754_asinf+0x1b8>
 8010670:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010674:	eeb0 0a48 	vmov.f32	s0, s16
 8010678:	eee7 8a88 	vfma.f32	s17, s15, s16
 801067c:	f000 f9fa 	bl	8010a74 <__ieee754_sqrtf>
 8010680:	4b3e      	ldr	r3, [pc, #248]	@ (801077c <__ieee754_asinf+0x1bc>)
 8010682:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010686:	429c      	cmp	r4, r3
 8010688:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801068c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010690:	d93d      	bls.n	801070e <__ieee754_asinf+0x14e>
 8010692:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010696:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8010780 <__ieee754_asinf+0x1c0>
 801069a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801069e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801074c <__ieee754_asinf+0x18c>
 80106a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106a6:	2d00      	cmp	r5, #0
 80106a8:	bfd8      	it	le
 80106aa:	eeb1 0a40 	vnegle.f32	s0, s0
 80106ae:	e79b      	b.n	80105e8 <__ieee754_asinf+0x28>
 80106b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80106b4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8010758 <__ieee754_asinf+0x198>
 80106b8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010754 <__ieee754_asinf+0x194>
 80106bc:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801076c <__ieee754_asinf+0x1ac>
 80106c0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80106c4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8010760 <__ieee754_asinf+0x1a0>
 80106c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80106cc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8010764 <__ieee754_asinf+0x1a4>
 80106d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106d4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8010768 <__ieee754_asinf+0x1a8>
 80106d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80106dc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801075c <__ieee754_asinf+0x19c>
 80106e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106e4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8010770 <__ieee754_asinf+0x1b0>
 80106e8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80106ec:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8010774 <__ieee754_asinf+0x1b4>
 80106f0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80106f4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8010778 <__ieee754_asinf+0x1b8>
 80106f8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80106fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010700:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010704:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010708:	eea0 0a27 	vfma.f32	s0, s0, s15
 801070c:	e76c      	b.n	80105e8 <__ieee754_asinf+0x28>
 801070e:	ee10 3a10 	vmov	r3, s0
 8010712:	f36f 030b 	bfc	r3, #0, #12
 8010716:	ee07 3a10 	vmov	s14, r3
 801071a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801071e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010722:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010726:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010748 <__ieee754_asinf+0x188>
 801072a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801072e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010784 <__ieee754_asinf+0x1c4>
 8010732:	eee5 7a66 	vfms.f32	s15, s10, s13
 8010736:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801073a:	eeb0 6a40 	vmov.f32	s12, s0
 801073e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010742:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010746:	e7ac      	b.n	80106a2 <__ieee754_asinf+0xe2>
 8010748:	b33bbd2e 	.word	0xb33bbd2e
 801074c:	3fc90fdb 	.word	0x3fc90fdb
 8010750:	7149f2ca 	.word	0x7149f2ca
 8010754:	3a4f7f04 	.word	0x3a4f7f04
 8010758:	3811ef08 	.word	0x3811ef08
 801075c:	3e2aaaab 	.word	0x3e2aaaab
 8010760:	bd241146 	.word	0xbd241146
 8010764:	3e4e0aa8 	.word	0x3e4e0aa8
 8010768:	bea6b090 	.word	0xbea6b090
 801076c:	3d9dc62e 	.word	0x3d9dc62e
 8010770:	bf303361 	.word	0xbf303361
 8010774:	4001572d 	.word	0x4001572d
 8010778:	c019d139 	.word	0xc019d139
 801077c:	3f799999 	.word	0x3f799999
 8010780:	333bbd2e 	.word	0x333bbd2e
 8010784:	3f490fdb 	.word	0x3f490fdb

08010788 <__ieee754_atan2f>:
 8010788:	ee10 2a90 	vmov	r2, s1
 801078c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010790:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010794:	b510      	push	{r4, lr}
 8010796:	eef0 7a40 	vmov.f32	s15, s0
 801079a:	d806      	bhi.n	80107aa <__ieee754_atan2f+0x22>
 801079c:	ee10 0a10 	vmov	r0, s0
 80107a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80107a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80107a8:	d904      	bls.n	80107b4 <__ieee754_atan2f+0x2c>
 80107aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80107ae:	eeb0 0a67 	vmov.f32	s0, s15
 80107b2:	bd10      	pop	{r4, pc}
 80107b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80107b8:	d103      	bne.n	80107c2 <__ieee754_atan2f+0x3a>
 80107ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107be:	f001 be51 	b.w	8012464 <atanf>
 80107c2:	1794      	asrs	r4, r2, #30
 80107c4:	f004 0402 	and.w	r4, r4, #2
 80107c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80107cc:	b943      	cbnz	r3, 80107e0 <__ieee754_atan2f+0x58>
 80107ce:	2c02      	cmp	r4, #2
 80107d0:	d05e      	beq.n	8010890 <__ieee754_atan2f+0x108>
 80107d2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80108a4 <__ieee754_atan2f+0x11c>
 80107d6:	2c03      	cmp	r4, #3
 80107d8:	bf08      	it	eq
 80107da:	eef0 7a47 	vmoveq.f32	s15, s14
 80107de:	e7e6      	b.n	80107ae <__ieee754_atan2f+0x26>
 80107e0:	b941      	cbnz	r1, 80107f4 <__ieee754_atan2f+0x6c>
 80107e2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80108a8 <__ieee754_atan2f+0x120>
 80107e6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80108ac <__ieee754_atan2f+0x124>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	bfa8      	it	ge
 80107ee:	eef0 7a47 	vmovge.f32	s15, s14
 80107f2:	e7dc      	b.n	80107ae <__ieee754_atan2f+0x26>
 80107f4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80107f8:	d110      	bne.n	801081c <__ieee754_atan2f+0x94>
 80107fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80107fe:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8010802:	d107      	bne.n	8010814 <__ieee754_atan2f+0x8c>
 8010804:	2c02      	cmp	r4, #2
 8010806:	d846      	bhi.n	8010896 <__ieee754_atan2f+0x10e>
 8010808:	4b29      	ldr	r3, [pc, #164]	@ (80108b0 <__ieee754_atan2f+0x128>)
 801080a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801080e:	edd3 7a00 	vldr	s15, [r3]
 8010812:	e7cc      	b.n	80107ae <__ieee754_atan2f+0x26>
 8010814:	2c02      	cmp	r4, #2
 8010816:	d841      	bhi.n	801089c <__ieee754_atan2f+0x114>
 8010818:	4b26      	ldr	r3, [pc, #152]	@ (80108b4 <__ieee754_atan2f+0x12c>)
 801081a:	e7f6      	b.n	801080a <__ieee754_atan2f+0x82>
 801081c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010820:	d0df      	beq.n	80107e2 <__ieee754_atan2f+0x5a>
 8010822:	1a5b      	subs	r3, r3, r1
 8010824:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010828:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801082c:	da1a      	bge.n	8010864 <__ieee754_atan2f+0xdc>
 801082e:	2a00      	cmp	r2, #0
 8010830:	da01      	bge.n	8010836 <__ieee754_atan2f+0xae>
 8010832:	313c      	adds	r1, #60	@ 0x3c
 8010834:	db19      	blt.n	801086a <__ieee754_atan2f+0xe2>
 8010836:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801083a:	f7ff fd5b 	bl	80102f4 <fabsf>
 801083e:	f001 fe11 	bl	8012464 <atanf>
 8010842:	eef0 7a40 	vmov.f32	s15, s0
 8010846:	2c01      	cmp	r4, #1
 8010848:	d012      	beq.n	8010870 <__ieee754_atan2f+0xe8>
 801084a:	2c02      	cmp	r4, #2
 801084c:	d017      	beq.n	801087e <__ieee754_atan2f+0xf6>
 801084e:	2c00      	cmp	r4, #0
 8010850:	d0ad      	beq.n	80107ae <__ieee754_atan2f+0x26>
 8010852:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80108b8 <__ieee754_atan2f+0x130>
 8010856:	ee77 7a87 	vadd.f32	s15, s15, s14
 801085a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80108bc <__ieee754_atan2f+0x134>
 801085e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010862:	e7a4      	b.n	80107ae <__ieee754_atan2f+0x26>
 8010864:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80108ac <__ieee754_atan2f+0x124>
 8010868:	e7ed      	b.n	8010846 <__ieee754_atan2f+0xbe>
 801086a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80108c0 <__ieee754_atan2f+0x138>
 801086e:	e7ea      	b.n	8010846 <__ieee754_atan2f+0xbe>
 8010870:	ee17 3a90 	vmov	r3, s15
 8010874:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010878:	ee07 3a90 	vmov	s15, r3
 801087c:	e797      	b.n	80107ae <__ieee754_atan2f+0x26>
 801087e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80108b8 <__ieee754_atan2f+0x130>
 8010882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010886:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80108bc <__ieee754_atan2f+0x134>
 801088a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801088e:	e78e      	b.n	80107ae <__ieee754_atan2f+0x26>
 8010890:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80108bc <__ieee754_atan2f+0x134>
 8010894:	e78b      	b.n	80107ae <__ieee754_atan2f+0x26>
 8010896:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80108c4 <__ieee754_atan2f+0x13c>
 801089a:	e788      	b.n	80107ae <__ieee754_atan2f+0x26>
 801089c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80108c0 <__ieee754_atan2f+0x138>
 80108a0:	e785      	b.n	80107ae <__ieee754_atan2f+0x26>
 80108a2:	bf00      	nop
 80108a4:	c0490fdb 	.word	0xc0490fdb
 80108a8:	bfc90fdb 	.word	0xbfc90fdb
 80108ac:	3fc90fdb 	.word	0x3fc90fdb
 80108b0:	08012be0 	.word	0x08012be0
 80108b4:	08012bd4 	.word	0x08012bd4
 80108b8:	33bbbd2e 	.word	0x33bbbd2e
 80108bc:	40490fdb 	.word	0x40490fdb
 80108c0:	00000000 	.word	0x00000000
 80108c4:	3f490fdb 	.word	0x3f490fdb

080108c8 <__ieee754_sqrt>:
 80108c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	4a66      	ldr	r2, [pc, #408]	@ (8010a68 <__ieee754_sqrt+0x1a0>)
 80108ce:	ec55 4b10 	vmov	r4, r5, d0
 80108d2:	43aa      	bics	r2, r5
 80108d4:	462b      	mov	r3, r5
 80108d6:	4621      	mov	r1, r4
 80108d8:	d110      	bne.n	80108fc <__ieee754_sqrt+0x34>
 80108da:	4622      	mov	r2, r4
 80108dc:	4620      	mov	r0, r4
 80108de:	4629      	mov	r1, r5
 80108e0:	f7ef feaa 	bl	8000638 <__aeabi_dmul>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	4620      	mov	r0, r4
 80108ea:	4629      	mov	r1, r5
 80108ec:	f7ef fcee 	bl	80002cc <__adddf3>
 80108f0:	4604      	mov	r4, r0
 80108f2:	460d      	mov	r5, r1
 80108f4:	ec45 4b10 	vmov	d0, r4, r5
 80108f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fc:	2d00      	cmp	r5, #0
 80108fe:	dc0e      	bgt.n	801091e <__ieee754_sqrt+0x56>
 8010900:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010904:	4322      	orrs	r2, r4
 8010906:	d0f5      	beq.n	80108f4 <__ieee754_sqrt+0x2c>
 8010908:	b19d      	cbz	r5, 8010932 <__ieee754_sqrt+0x6a>
 801090a:	4622      	mov	r2, r4
 801090c:	4620      	mov	r0, r4
 801090e:	4629      	mov	r1, r5
 8010910:	f7ef fcda 	bl	80002c8 <__aeabi_dsub>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	f7ef ffb8 	bl	800088c <__aeabi_ddiv>
 801091c:	e7e8      	b.n	80108f0 <__ieee754_sqrt+0x28>
 801091e:	152a      	asrs	r2, r5, #20
 8010920:	d115      	bne.n	801094e <__ieee754_sqrt+0x86>
 8010922:	2000      	movs	r0, #0
 8010924:	e009      	b.n	801093a <__ieee754_sqrt+0x72>
 8010926:	0acb      	lsrs	r3, r1, #11
 8010928:	3a15      	subs	r2, #21
 801092a:	0549      	lsls	r1, r1, #21
 801092c:	2b00      	cmp	r3, #0
 801092e:	d0fa      	beq.n	8010926 <__ieee754_sqrt+0x5e>
 8010930:	e7f7      	b.n	8010922 <__ieee754_sqrt+0x5a>
 8010932:	462a      	mov	r2, r5
 8010934:	e7fa      	b.n	801092c <__ieee754_sqrt+0x64>
 8010936:	005b      	lsls	r3, r3, #1
 8010938:	3001      	adds	r0, #1
 801093a:	02dc      	lsls	r4, r3, #11
 801093c:	d5fb      	bpl.n	8010936 <__ieee754_sqrt+0x6e>
 801093e:	1e44      	subs	r4, r0, #1
 8010940:	1b12      	subs	r2, r2, r4
 8010942:	f1c0 0420 	rsb	r4, r0, #32
 8010946:	fa21 f404 	lsr.w	r4, r1, r4
 801094a:	4323      	orrs	r3, r4
 801094c:	4081      	lsls	r1, r0
 801094e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010952:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8010956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801095a:	07d2      	lsls	r2, r2, #31
 801095c:	bf5c      	itt	pl
 801095e:	005b      	lslpl	r3, r3, #1
 8010960:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010964:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010968:	bf58      	it	pl
 801096a:	0049      	lslpl	r1, r1, #1
 801096c:	2600      	movs	r6, #0
 801096e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010972:	107f      	asrs	r7, r7, #1
 8010974:	0049      	lsls	r1, r1, #1
 8010976:	2016      	movs	r0, #22
 8010978:	4632      	mov	r2, r6
 801097a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801097e:	1915      	adds	r5, r2, r4
 8010980:	429d      	cmp	r5, r3
 8010982:	bfde      	ittt	le
 8010984:	192a      	addle	r2, r5, r4
 8010986:	1b5b      	suble	r3, r3, r5
 8010988:	1936      	addle	r6, r6, r4
 801098a:	0fcd      	lsrs	r5, r1, #31
 801098c:	3801      	subs	r0, #1
 801098e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010992:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010996:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801099a:	d1f0      	bne.n	801097e <__ieee754_sqrt+0xb6>
 801099c:	4605      	mov	r5, r0
 801099e:	2420      	movs	r4, #32
 80109a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80109a4:	4293      	cmp	r3, r2
 80109a6:	eb0c 0e00 	add.w	lr, ip, r0
 80109aa:	dc02      	bgt.n	80109b2 <__ieee754_sqrt+0xea>
 80109ac:	d113      	bne.n	80109d6 <__ieee754_sqrt+0x10e>
 80109ae:	458e      	cmp	lr, r1
 80109b0:	d811      	bhi.n	80109d6 <__ieee754_sqrt+0x10e>
 80109b2:	f1be 0f00 	cmp.w	lr, #0
 80109b6:	eb0e 000c 	add.w	r0, lr, ip
 80109ba:	da3f      	bge.n	8010a3c <__ieee754_sqrt+0x174>
 80109bc:	2800      	cmp	r0, #0
 80109be:	db3d      	blt.n	8010a3c <__ieee754_sqrt+0x174>
 80109c0:	f102 0801 	add.w	r8, r2, #1
 80109c4:	1a9b      	subs	r3, r3, r2
 80109c6:	458e      	cmp	lr, r1
 80109c8:	bf88      	it	hi
 80109ca:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80109ce:	eba1 010e 	sub.w	r1, r1, lr
 80109d2:	4465      	add	r5, ip
 80109d4:	4642      	mov	r2, r8
 80109d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80109da:	3c01      	subs	r4, #1
 80109dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80109e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80109e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80109e8:	d1dc      	bne.n	80109a4 <__ieee754_sqrt+0xdc>
 80109ea:	4319      	orrs	r1, r3
 80109ec:	d01b      	beq.n	8010a26 <__ieee754_sqrt+0x15e>
 80109ee:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8010a6c <__ieee754_sqrt+0x1a4>
 80109f2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8010a70 <__ieee754_sqrt+0x1a8>
 80109f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80109fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80109fe:	f7ef fc63 	bl	80002c8 <__aeabi_dsub>
 8010a02:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a06:	4602      	mov	r2, r0
 8010a08:	460b      	mov	r3, r1
 8010a0a:	4640      	mov	r0, r8
 8010a0c:	4649      	mov	r1, r9
 8010a0e:	f7f0 f88f 	bl	8000b30 <__aeabi_dcmple>
 8010a12:	b140      	cbz	r0, 8010a26 <__ieee754_sqrt+0x15e>
 8010a14:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8010a18:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a20:	d10e      	bne.n	8010a40 <__ieee754_sqrt+0x178>
 8010a22:	3601      	adds	r6, #1
 8010a24:	4625      	mov	r5, r4
 8010a26:	1073      	asrs	r3, r6, #1
 8010a28:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8010a2c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8010a30:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8010a34:	086b      	lsrs	r3, r5, #1
 8010a36:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8010a3a:	e759      	b.n	80108f0 <__ieee754_sqrt+0x28>
 8010a3c:	4690      	mov	r8, r2
 8010a3e:	e7c1      	b.n	80109c4 <__ieee754_sqrt+0xfc>
 8010a40:	f7ef fc44 	bl	80002cc <__adddf3>
 8010a44:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	4640      	mov	r0, r8
 8010a4e:	4649      	mov	r1, r9
 8010a50:	f7f0 f864 	bl	8000b1c <__aeabi_dcmplt>
 8010a54:	b120      	cbz	r0, 8010a60 <__ieee754_sqrt+0x198>
 8010a56:	1cab      	adds	r3, r5, #2
 8010a58:	bf08      	it	eq
 8010a5a:	3601      	addeq	r6, #1
 8010a5c:	3502      	adds	r5, #2
 8010a5e:	e7e2      	b.n	8010a26 <__ieee754_sqrt+0x15e>
 8010a60:	1c6b      	adds	r3, r5, #1
 8010a62:	f023 0501 	bic.w	r5, r3, #1
 8010a66:	e7de      	b.n	8010a26 <__ieee754_sqrt+0x15e>
 8010a68:	7ff00000 	.word	0x7ff00000
 8010a6c:	08012bf8 	.word	0x08012bf8
 8010a70:	08012bf0 	.word	0x08012bf0

08010a74 <__ieee754_sqrtf>:
 8010a74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010a78:	4770      	bx	lr
	...

08010a7c <round>:
 8010a7c:	ec51 0b10 	vmov	r0, r1, d0
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8010a86:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8010a8a:	2a13      	cmp	r2, #19
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	4605      	mov	r5, r0
 8010a90:	dc1b      	bgt.n	8010aca <round+0x4e>
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	da0b      	bge.n	8010aae <round+0x32>
 8010a96:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010a9a:	3201      	adds	r2, #1
 8010a9c:	bf04      	itt	eq
 8010a9e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8010aa2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	4610      	mov	r0, r2
 8010aac:	e015      	b.n	8010ada <round+0x5e>
 8010aae:	4c15      	ldr	r4, [pc, #84]	@ (8010b04 <round+0x88>)
 8010ab0:	4114      	asrs	r4, r2
 8010ab2:	ea04 0601 	and.w	r6, r4, r1
 8010ab6:	4306      	orrs	r6, r0
 8010ab8:	d00f      	beq.n	8010ada <round+0x5e>
 8010aba:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8010abe:	fa41 f202 	asr.w	r2, r1, r2
 8010ac2:	4413      	add	r3, r2
 8010ac4:	ea23 0304 	bic.w	r3, r3, r4
 8010ac8:	e7ed      	b.n	8010aa6 <round+0x2a>
 8010aca:	2a33      	cmp	r2, #51	@ 0x33
 8010acc:	dd08      	ble.n	8010ae0 <round+0x64>
 8010ace:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8010ad2:	d102      	bne.n	8010ada <round+0x5e>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	f7ef fbf9 	bl	80002cc <__adddf3>
 8010ada:	ec41 0b10 	vmov	d0, r0, r1
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
 8010ae0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8010ae4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010ae8:	40f4      	lsrs	r4, r6
 8010aea:	4204      	tst	r4, r0
 8010aec:	d0f5      	beq.n	8010ada <round+0x5e>
 8010aee:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8010af2:	2201      	movs	r2, #1
 8010af4:	408a      	lsls	r2, r1
 8010af6:	1952      	adds	r2, r2, r5
 8010af8:	bf28      	it	cs
 8010afa:	3301      	addcs	r3, #1
 8010afc:	ea22 0204 	bic.w	r2, r2, r4
 8010b00:	e7d2      	b.n	8010aa8 <round+0x2c>
 8010b02:	bf00      	nop
 8010b04:	000fffff 	.word	0x000fffff

08010b08 <fmaxf>:
 8010b08:	b508      	push	{r3, lr}
 8010b0a:	ed2d 8b02 	vpush	{d8}
 8010b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8010b12:	eef0 8a60 	vmov.f32	s17, s1
 8010b16:	f000 f831 	bl	8010b7c <__fpclassifyf>
 8010b1a:	b930      	cbnz	r0, 8010b2a <fmaxf+0x22>
 8010b1c:	eeb0 8a68 	vmov.f32	s16, s17
 8010b20:	eeb0 0a48 	vmov.f32	s0, s16
 8010b24:	ecbd 8b02 	vpop	{d8}
 8010b28:	bd08      	pop	{r3, pc}
 8010b2a:	eeb0 0a68 	vmov.f32	s0, s17
 8010b2e:	f000 f825 	bl	8010b7c <__fpclassifyf>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d0f4      	beq.n	8010b20 <fmaxf+0x18>
 8010b36:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	dded      	ble.n	8010b1c <fmaxf+0x14>
 8010b40:	e7ee      	b.n	8010b20 <fmaxf+0x18>

08010b42 <fminf>:
 8010b42:	b508      	push	{r3, lr}
 8010b44:	ed2d 8b02 	vpush	{d8}
 8010b48:	eeb0 8a40 	vmov.f32	s16, s0
 8010b4c:	eef0 8a60 	vmov.f32	s17, s1
 8010b50:	f000 f814 	bl	8010b7c <__fpclassifyf>
 8010b54:	b930      	cbnz	r0, 8010b64 <fminf+0x22>
 8010b56:	eeb0 8a68 	vmov.f32	s16, s17
 8010b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8010b5e:	ecbd 8b02 	vpop	{d8}
 8010b62:	bd08      	pop	{r3, pc}
 8010b64:	eeb0 0a68 	vmov.f32	s0, s17
 8010b68:	f000 f808 	bl	8010b7c <__fpclassifyf>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d0f4      	beq.n	8010b5a <fminf+0x18>
 8010b70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b78:	d5ed      	bpl.n	8010b56 <fminf+0x14>
 8010b7a:	e7ee      	b.n	8010b5a <fminf+0x18>

08010b7c <__fpclassifyf>:
 8010b7c:	ee10 3a10 	vmov	r3, s0
 8010b80:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010b84:	d00d      	beq.n	8010ba2 <__fpclassifyf+0x26>
 8010b86:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010b8a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010b8e:	d30a      	bcc.n	8010ba6 <__fpclassifyf+0x2a>
 8010b90:	4b07      	ldr	r3, [pc, #28]	@ (8010bb0 <__fpclassifyf+0x34>)
 8010b92:	1e42      	subs	r2, r0, #1
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d908      	bls.n	8010baa <__fpclassifyf+0x2e>
 8010b98:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010b9c:	4258      	negs	r0, r3
 8010b9e:	4158      	adcs	r0, r3
 8010ba0:	4770      	bx	lr
 8010ba2:	2002      	movs	r0, #2
 8010ba4:	4770      	bx	lr
 8010ba6:	2004      	movs	r0, #4
 8010ba8:	4770      	bx	lr
 8010baa:	2003      	movs	r0, #3
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	007ffffe 	.word	0x007ffffe
 8010bb4:	00000000 	.word	0x00000000

08010bb8 <__ieee754_pow>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	b091      	sub	sp, #68	@ 0x44
 8010bbe:	ed8d 1b00 	vstr	d1, [sp]
 8010bc2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010bc6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010bca:	ea5a 0001 	orrs.w	r0, sl, r1
 8010bce:	ec57 6b10 	vmov	r6, r7, d0
 8010bd2:	d113      	bne.n	8010bfc <__ieee754_pow+0x44>
 8010bd4:	19b3      	adds	r3, r6, r6
 8010bd6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010bda:	4152      	adcs	r2, r2
 8010bdc:	4298      	cmp	r0, r3
 8010bde:	4b9a      	ldr	r3, [pc, #616]	@ (8010e48 <__ieee754_pow+0x290>)
 8010be0:	4193      	sbcs	r3, r2
 8010be2:	f080 84ee 	bcs.w	80115c2 <__ieee754_pow+0xa0a>
 8010be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bea:	4630      	mov	r0, r6
 8010bec:	4639      	mov	r1, r7
 8010bee:	f7ef fb6d 	bl	80002cc <__adddf3>
 8010bf2:	ec41 0b10 	vmov	d0, r0, r1
 8010bf6:	b011      	add	sp, #68	@ 0x44
 8010bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfc:	4a93      	ldr	r2, [pc, #588]	@ (8010e4c <__ieee754_pow+0x294>)
 8010bfe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8010c02:	4295      	cmp	r5, r2
 8010c04:	46b8      	mov	r8, r7
 8010c06:	4633      	mov	r3, r6
 8010c08:	d80a      	bhi.n	8010c20 <__ieee754_pow+0x68>
 8010c0a:	d104      	bne.n	8010c16 <__ieee754_pow+0x5e>
 8010c0c:	2e00      	cmp	r6, #0
 8010c0e:	d1ea      	bne.n	8010be6 <__ieee754_pow+0x2e>
 8010c10:	45aa      	cmp	sl, r5
 8010c12:	d8e8      	bhi.n	8010be6 <__ieee754_pow+0x2e>
 8010c14:	e001      	b.n	8010c1a <__ieee754_pow+0x62>
 8010c16:	4592      	cmp	sl, r2
 8010c18:	d802      	bhi.n	8010c20 <__ieee754_pow+0x68>
 8010c1a:	4592      	cmp	sl, r2
 8010c1c:	d10f      	bne.n	8010c3e <__ieee754_pow+0x86>
 8010c1e:	b171      	cbz	r1, 8010c3e <__ieee754_pow+0x86>
 8010c20:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010c24:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010c28:	ea58 0803 	orrs.w	r8, r8, r3
 8010c2c:	d1db      	bne.n	8010be6 <__ieee754_pow+0x2e>
 8010c2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c32:	18db      	adds	r3, r3, r3
 8010c34:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010c38:	4152      	adcs	r2, r2
 8010c3a:	4598      	cmp	r8, r3
 8010c3c:	e7cf      	b.n	8010bde <__ieee754_pow+0x26>
 8010c3e:	f1b8 0f00 	cmp.w	r8, #0
 8010c42:	46ab      	mov	fp, r5
 8010c44:	da43      	bge.n	8010cce <__ieee754_pow+0x116>
 8010c46:	4a82      	ldr	r2, [pc, #520]	@ (8010e50 <__ieee754_pow+0x298>)
 8010c48:	4592      	cmp	sl, r2
 8010c4a:	d856      	bhi.n	8010cfa <__ieee754_pow+0x142>
 8010c4c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010c50:	4592      	cmp	sl, r2
 8010c52:	f240 84c5 	bls.w	80115e0 <__ieee754_pow+0xa28>
 8010c56:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010c5a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010c5e:	2a14      	cmp	r2, #20
 8010c60:	dd18      	ble.n	8010c94 <__ieee754_pow+0xdc>
 8010c62:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010c66:	fa21 f402 	lsr.w	r4, r1, r2
 8010c6a:	fa04 f202 	lsl.w	r2, r4, r2
 8010c6e:	428a      	cmp	r2, r1
 8010c70:	f040 84b6 	bne.w	80115e0 <__ieee754_pow+0xa28>
 8010c74:	f004 0401 	and.w	r4, r4, #1
 8010c78:	f1c4 0402 	rsb	r4, r4, #2
 8010c7c:	2900      	cmp	r1, #0
 8010c7e:	d159      	bne.n	8010d34 <__ieee754_pow+0x17c>
 8010c80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010c84:	d148      	bne.n	8010d18 <__ieee754_pow+0x160>
 8010c86:	4632      	mov	r2, r6
 8010c88:	463b      	mov	r3, r7
 8010c8a:	4630      	mov	r0, r6
 8010c8c:	4639      	mov	r1, r7
 8010c8e:	f7ef fcd3 	bl	8000638 <__aeabi_dmul>
 8010c92:	e7ae      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010c94:	2900      	cmp	r1, #0
 8010c96:	d14c      	bne.n	8010d32 <__ieee754_pow+0x17a>
 8010c98:	f1c2 0214 	rsb	r2, r2, #20
 8010c9c:	fa4a f402 	asr.w	r4, sl, r2
 8010ca0:	fa04 f202 	lsl.w	r2, r4, r2
 8010ca4:	4552      	cmp	r2, sl
 8010ca6:	f040 8498 	bne.w	80115da <__ieee754_pow+0xa22>
 8010caa:	f004 0401 	and.w	r4, r4, #1
 8010cae:	f1c4 0402 	rsb	r4, r4, #2
 8010cb2:	4a68      	ldr	r2, [pc, #416]	@ (8010e54 <__ieee754_pow+0x29c>)
 8010cb4:	4592      	cmp	sl, r2
 8010cb6:	d1e3      	bne.n	8010c80 <__ieee754_pow+0xc8>
 8010cb8:	f1b9 0f00 	cmp.w	r9, #0
 8010cbc:	f280 8489 	bge.w	80115d2 <__ieee754_pow+0xa1a>
 8010cc0:	4964      	ldr	r1, [pc, #400]	@ (8010e54 <__ieee754_pow+0x29c>)
 8010cc2:	4632      	mov	r2, r6
 8010cc4:	463b      	mov	r3, r7
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	f7ef fde0 	bl	800088c <__aeabi_ddiv>
 8010ccc:	e791      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010cce:	2400      	movs	r4, #0
 8010cd0:	bb81      	cbnz	r1, 8010d34 <__ieee754_pow+0x17c>
 8010cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8010e4c <__ieee754_pow+0x294>)
 8010cd4:	4592      	cmp	sl, r2
 8010cd6:	d1ec      	bne.n	8010cb2 <__ieee754_pow+0xfa>
 8010cd8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8010cdc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010ce0:	431a      	orrs	r2, r3
 8010ce2:	f000 846e 	beq.w	80115c2 <__ieee754_pow+0xa0a>
 8010ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8010e58 <__ieee754_pow+0x2a0>)
 8010ce8:	429d      	cmp	r5, r3
 8010cea:	d908      	bls.n	8010cfe <__ieee754_pow+0x146>
 8010cec:	f1b9 0f00 	cmp.w	r9, #0
 8010cf0:	f280 846b 	bge.w	80115ca <__ieee754_pow+0xa12>
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	e77b      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010cfa:	2402      	movs	r4, #2
 8010cfc:	e7e8      	b.n	8010cd0 <__ieee754_pow+0x118>
 8010cfe:	f1b9 0f00 	cmp.w	r9, #0
 8010d02:	f04f 0000 	mov.w	r0, #0
 8010d06:	f04f 0100 	mov.w	r1, #0
 8010d0a:	f6bf af72 	bge.w	8010bf2 <__ieee754_pow+0x3a>
 8010d0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010d12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010d16:	e76c      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010d18:	4a50      	ldr	r2, [pc, #320]	@ (8010e5c <__ieee754_pow+0x2a4>)
 8010d1a:	4591      	cmp	r9, r2
 8010d1c:	d10a      	bne.n	8010d34 <__ieee754_pow+0x17c>
 8010d1e:	f1b8 0f00 	cmp.w	r8, #0
 8010d22:	db07      	blt.n	8010d34 <__ieee754_pow+0x17c>
 8010d24:	ec47 6b10 	vmov	d0, r6, r7
 8010d28:	b011      	add	sp, #68	@ 0x44
 8010d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2e:	f7ff bdcb 	b.w	80108c8 <__ieee754_sqrt>
 8010d32:	2400      	movs	r4, #0
 8010d34:	ec47 6b10 	vmov	d0, r6, r7
 8010d38:	9302      	str	r3, [sp, #8]
 8010d3a:	f001 fc67 	bl	801260c <fabs>
 8010d3e:	9b02      	ldr	r3, [sp, #8]
 8010d40:	ec51 0b10 	vmov	r0, r1, d0
 8010d44:	bb43      	cbnz	r3, 8010d98 <__ieee754_pow+0x1e0>
 8010d46:	4b43      	ldr	r3, [pc, #268]	@ (8010e54 <__ieee754_pow+0x29c>)
 8010d48:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d000      	beq.n	8010d52 <__ieee754_pow+0x19a>
 8010d50:	bb15      	cbnz	r5, 8010d98 <__ieee754_pow+0x1e0>
 8010d52:	f1b9 0f00 	cmp.w	r9, #0
 8010d56:	da05      	bge.n	8010d64 <__ieee754_pow+0x1ac>
 8010d58:	4602      	mov	r2, r0
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	493d      	ldr	r1, [pc, #244]	@ (8010e54 <__ieee754_pow+0x29c>)
 8010d60:	f7ef fd94 	bl	800088c <__aeabi_ddiv>
 8010d64:	f1b8 0f00 	cmp.w	r8, #0
 8010d68:	f6bf af43 	bge.w	8010bf2 <__ieee754_pow+0x3a>
 8010d6c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010d70:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010d74:	4325      	orrs	r5, r4
 8010d76:	d108      	bne.n	8010d8a <__ieee754_pow+0x1d2>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	460b      	mov	r3, r1
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	4619      	mov	r1, r3
 8010d80:	f7ef faa2 	bl	80002c8 <__aeabi_dsub>
 8010d84:	4602      	mov	r2, r0
 8010d86:	460b      	mov	r3, r1
 8010d88:	e79e      	b.n	8010cc8 <__ieee754_pow+0x110>
 8010d8a:	2c01      	cmp	r4, #1
 8010d8c:	f47f af31 	bne.w	8010bf2 <__ieee754_pow+0x3a>
 8010d90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d94:	4619      	mov	r1, r3
 8010d96:	e72c      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010d98:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	ea53 0204 	orrs.w	r2, r3, r4
 8010da2:	d102      	bne.n	8010daa <__ieee754_pow+0x1f2>
 8010da4:	4632      	mov	r2, r6
 8010da6:	463b      	mov	r3, r7
 8010da8:	e7e8      	b.n	8010d7c <__ieee754_pow+0x1c4>
 8010daa:	3c01      	subs	r4, #1
 8010dac:	431c      	orrs	r4, r3
 8010dae:	d016      	beq.n	8010dde <__ieee754_pow+0x226>
 8010db0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010e38 <__ieee754_pow+0x280>
 8010db4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010db8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010dbc:	f240 8110 	bls.w	8010fe0 <__ieee754_pow+0x428>
 8010dc0:	4b27      	ldr	r3, [pc, #156]	@ (8010e60 <__ieee754_pow+0x2a8>)
 8010dc2:	459a      	cmp	sl, r3
 8010dc4:	4b24      	ldr	r3, [pc, #144]	@ (8010e58 <__ieee754_pow+0x2a0>)
 8010dc6:	d916      	bls.n	8010df6 <__ieee754_pow+0x23e>
 8010dc8:	429d      	cmp	r5, r3
 8010dca:	d80b      	bhi.n	8010de4 <__ieee754_pow+0x22c>
 8010dcc:	f1b9 0f00 	cmp.w	r9, #0
 8010dd0:	da0b      	bge.n	8010dea <__ieee754_pow+0x232>
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	b011      	add	sp, #68	@ 0x44
 8010dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	f000 be69 	b.w	8011ab0 <__math_oflow>
 8010dde:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8010e40 <__ieee754_pow+0x288>
 8010de2:	e7e7      	b.n	8010db4 <__ieee754_pow+0x1fc>
 8010de4:	f1b9 0f00 	cmp.w	r9, #0
 8010de8:	dcf3      	bgt.n	8010dd2 <__ieee754_pow+0x21a>
 8010dea:	2000      	movs	r0, #0
 8010dec:	b011      	add	sp, #68	@ 0x44
 8010dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df2:	f000 be55 	b.w	8011aa0 <__math_uflow>
 8010df6:	429d      	cmp	r5, r3
 8010df8:	d20c      	bcs.n	8010e14 <__ieee754_pow+0x25c>
 8010dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	2300      	movs	r3, #0
 8010e02:	f7ef fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8010e06:	3800      	subs	r0, #0
 8010e08:	bf18      	it	ne
 8010e0a:	2001      	movne	r0, #1
 8010e0c:	f1b9 0f00 	cmp.w	r9, #0
 8010e10:	daec      	bge.n	8010dec <__ieee754_pow+0x234>
 8010e12:	e7df      	b.n	8010dd4 <__ieee754_pow+0x21c>
 8010e14:	4b0f      	ldr	r3, [pc, #60]	@ (8010e54 <__ieee754_pow+0x29c>)
 8010e16:	429d      	cmp	r5, r3
 8010e18:	f04f 0200 	mov.w	r2, #0
 8010e1c:	d922      	bls.n	8010e64 <__ieee754_pow+0x2ac>
 8010e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e22:	2300      	movs	r3, #0
 8010e24:	f7ef fe7a 	bl	8000b1c <__aeabi_dcmplt>
 8010e28:	3800      	subs	r0, #0
 8010e2a:	bf18      	it	ne
 8010e2c:	2001      	movne	r0, #1
 8010e2e:	f1b9 0f00 	cmp.w	r9, #0
 8010e32:	dccf      	bgt.n	8010dd4 <__ieee754_pow+0x21c>
 8010e34:	e7da      	b.n	8010dec <__ieee754_pow+0x234>
 8010e36:	bf00      	nop
 8010e38:	00000000 	.word	0x00000000
 8010e3c:	3ff00000 	.word	0x3ff00000
 8010e40:	00000000 	.word	0x00000000
 8010e44:	bff00000 	.word	0xbff00000
 8010e48:	fff00000 	.word	0xfff00000
 8010e4c:	7ff00000 	.word	0x7ff00000
 8010e50:	433fffff 	.word	0x433fffff
 8010e54:	3ff00000 	.word	0x3ff00000
 8010e58:	3fefffff 	.word	0x3fefffff
 8010e5c:	3fe00000 	.word	0x3fe00000
 8010e60:	43f00000 	.word	0x43f00000
 8010e64:	4b5a      	ldr	r3, [pc, #360]	@ (8010fd0 <__ieee754_pow+0x418>)
 8010e66:	f7ef fa2f 	bl	80002c8 <__aeabi_dsub>
 8010e6a:	a351      	add	r3, pc, #324	@ (adr r3, 8010fb0 <__ieee754_pow+0x3f8>)
 8010e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e70:	4604      	mov	r4, r0
 8010e72:	460d      	mov	r5, r1
 8010e74:	f7ef fbe0 	bl	8000638 <__aeabi_dmul>
 8010e78:	a34f      	add	r3, pc, #316	@ (adr r3, 8010fb8 <__ieee754_pow+0x400>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	4606      	mov	r6, r0
 8010e80:	460f      	mov	r7, r1
 8010e82:	4620      	mov	r0, r4
 8010e84:	4629      	mov	r1, r5
 8010e86:	f7ef fbd7 	bl	8000638 <__aeabi_dmul>
 8010e8a:	4b52      	ldr	r3, [pc, #328]	@ (8010fd4 <__ieee754_pow+0x41c>)
 8010e8c:	4682      	mov	sl, r0
 8010e8e:	468b      	mov	fp, r1
 8010e90:	2200      	movs	r2, #0
 8010e92:	4620      	mov	r0, r4
 8010e94:	4629      	mov	r1, r5
 8010e96:	f7ef fbcf 	bl	8000638 <__aeabi_dmul>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	a148      	add	r1, pc, #288	@ (adr r1, 8010fc0 <__ieee754_pow+0x408>)
 8010ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ea4:	f7ef fa10 	bl	80002c8 <__aeabi_dsub>
 8010ea8:	4622      	mov	r2, r4
 8010eaa:	462b      	mov	r3, r5
 8010eac:	f7ef fbc4 	bl	8000638 <__aeabi_dmul>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	4948      	ldr	r1, [pc, #288]	@ (8010fd8 <__ieee754_pow+0x420>)
 8010eb8:	f7ef fa06 	bl	80002c8 <__aeabi_dsub>
 8010ebc:	4622      	mov	r2, r4
 8010ebe:	4680      	mov	r8, r0
 8010ec0:	4689      	mov	r9, r1
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	f7ef fbb6 	bl	8000638 <__aeabi_dmul>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4640      	mov	r0, r8
 8010ed2:	4649      	mov	r1, r9
 8010ed4:	f7ef fbb0 	bl	8000638 <__aeabi_dmul>
 8010ed8:	a33b      	add	r3, pc, #236	@ (adr r3, 8010fc8 <__ieee754_pow+0x410>)
 8010eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ede:	f7ef fbab 	bl	8000638 <__aeabi_dmul>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4650      	mov	r0, sl
 8010ee8:	4659      	mov	r1, fp
 8010eea:	f7ef f9ed 	bl	80002c8 <__aeabi_dsub>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	4680      	mov	r8, r0
 8010ef4:	4689      	mov	r9, r1
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	4639      	mov	r1, r7
 8010efa:	f7ef f9e7 	bl	80002cc <__adddf3>
 8010efe:	2400      	movs	r4, #0
 8010f00:	4632      	mov	r2, r6
 8010f02:	463b      	mov	r3, r7
 8010f04:	4620      	mov	r0, r4
 8010f06:	460d      	mov	r5, r1
 8010f08:	f7ef f9de 	bl	80002c8 <__aeabi_dsub>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	4640      	mov	r0, r8
 8010f12:	4649      	mov	r1, r9
 8010f14:	f7ef f9d8 	bl	80002c8 <__aeabi_dsub>
 8010f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f20:	2300      	movs	r3, #0
 8010f22:	9304      	str	r3, [sp, #16]
 8010f24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010f28:	4606      	mov	r6, r0
 8010f2a:	460f      	mov	r7, r1
 8010f2c:	465b      	mov	r3, fp
 8010f2e:	4652      	mov	r2, sl
 8010f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f34:	f7ef f9c8 	bl	80002c8 <__aeabi_dsub>
 8010f38:	4622      	mov	r2, r4
 8010f3a:	462b      	mov	r3, r5
 8010f3c:	f7ef fb7c 	bl	8000638 <__aeabi_dmul>
 8010f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f44:	4680      	mov	r8, r0
 8010f46:	4689      	mov	r9, r1
 8010f48:	4630      	mov	r0, r6
 8010f4a:	4639      	mov	r1, r7
 8010f4c:	f7ef fb74 	bl	8000638 <__aeabi_dmul>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4640      	mov	r0, r8
 8010f56:	4649      	mov	r1, r9
 8010f58:	f7ef f9b8 	bl	80002cc <__adddf3>
 8010f5c:	465b      	mov	r3, fp
 8010f5e:	4606      	mov	r6, r0
 8010f60:	460f      	mov	r7, r1
 8010f62:	4652      	mov	r2, sl
 8010f64:	4620      	mov	r0, r4
 8010f66:	4629      	mov	r1, r5
 8010f68:	f7ef fb66 	bl	8000638 <__aeabi_dmul>
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	4602      	mov	r2, r0
 8010f70:	4680      	mov	r8, r0
 8010f72:	4689      	mov	r9, r1
 8010f74:	4630      	mov	r0, r6
 8010f76:	4639      	mov	r1, r7
 8010f78:	f7ef f9a8 	bl	80002cc <__adddf3>
 8010f7c:	4b17      	ldr	r3, [pc, #92]	@ (8010fdc <__ieee754_pow+0x424>)
 8010f7e:	4299      	cmp	r1, r3
 8010f80:	4604      	mov	r4, r0
 8010f82:	460d      	mov	r5, r1
 8010f84:	468b      	mov	fp, r1
 8010f86:	f340 820b 	ble.w	80113a0 <__ieee754_pow+0x7e8>
 8010f8a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010f8e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010f92:	4303      	orrs	r3, r0
 8010f94:	f000 81ea 	beq.w	801136c <__ieee754_pow+0x7b4>
 8010f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f7ef fdbc 	bl	8000b1c <__aeabi_dcmplt>
 8010fa4:	3800      	subs	r0, #0
 8010fa6:	bf18      	it	ne
 8010fa8:	2001      	movne	r0, #1
 8010faa:	e713      	b.n	8010dd4 <__ieee754_pow+0x21c>
 8010fac:	f3af 8000 	nop.w
 8010fb0:	60000000 	.word	0x60000000
 8010fb4:	3ff71547 	.word	0x3ff71547
 8010fb8:	f85ddf44 	.word	0xf85ddf44
 8010fbc:	3e54ae0b 	.word	0x3e54ae0b
 8010fc0:	55555555 	.word	0x55555555
 8010fc4:	3fd55555 	.word	0x3fd55555
 8010fc8:	652b82fe 	.word	0x652b82fe
 8010fcc:	3ff71547 	.word	0x3ff71547
 8010fd0:	3ff00000 	.word	0x3ff00000
 8010fd4:	3fd00000 	.word	0x3fd00000
 8010fd8:	3fe00000 	.word	0x3fe00000
 8010fdc:	408fffff 	.word	0x408fffff
 8010fe0:	4bd5      	ldr	r3, [pc, #852]	@ (8011338 <__ieee754_pow+0x780>)
 8010fe2:	ea08 0303 	and.w	r3, r8, r3
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	b92b      	cbnz	r3, 8010ff6 <__ieee754_pow+0x43e>
 8010fea:	4bd4      	ldr	r3, [pc, #848]	@ (801133c <__ieee754_pow+0x784>)
 8010fec:	f7ef fb24 	bl	8000638 <__aeabi_dmul>
 8010ff0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010ff4:	468b      	mov	fp, r1
 8010ff6:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010ffa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010ffe:	4413      	add	r3, r2
 8011000:	930a      	str	r3, [sp, #40]	@ 0x28
 8011002:	4bcf      	ldr	r3, [pc, #828]	@ (8011340 <__ieee754_pow+0x788>)
 8011004:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8011008:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801100c:	459b      	cmp	fp, r3
 801100e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011012:	dd08      	ble.n	8011026 <__ieee754_pow+0x46e>
 8011014:	4bcb      	ldr	r3, [pc, #812]	@ (8011344 <__ieee754_pow+0x78c>)
 8011016:	459b      	cmp	fp, r3
 8011018:	f340 81a5 	ble.w	8011366 <__ieee754_pow+0x7ae>
 801101c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801101e:	3301      	adds	r3, #1
 8011020:	930a      	str	r3, [sp, #40]	@ 0x28
 8011022:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8011026:	f04f 0a00 	mov.w	sl, #0
 801102a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801102e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011030:	4bc5      	ldr	r3, [pc, #788]	@ (8011348 <__ieee754_pow+0x790>)
 8011032:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011036:	ed93 7b00 	vldr	d7, [r3]
 801103a:	4629      	mov	r1, r5
 801103c:	ec53 2b17 	vmov	r2, r3, d7
 8011040:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011044:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011048:	f7ef f93e 	bl	80002c8 <__aeabi_dsub>
 801104c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011050:	4606      	mov	r6, r0
 8011052:	460f      	mov	r7, r1
 8011054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011058:	f7ef f938 	bl	80002cc <__adddf3>
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	2000      	movs	r0, #0
 8011062:	49ba      	ldr	r1, [pc, #744]	@ (801134c <__ieee754_pow+0x794>)
 8011064:	f7ef fc12 	bl	800088c <__aeabi_ddiv>
 8011068:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801106c:	4602      	mov	r2, r0
 801106e:	460b      	mov	r3, r1
 8011070:	4630      	mov	r0, r6
 8011072:	4639      	mov	r1, r7
 8011074:	f7ef fae0 	bl	8000638 <__aeabi_dmul>
 8011078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801107c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8011080:	106d      	asrs	r5, r5, #1
 8011082:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8011086:	f04f 0b00 	mov.w	fp, #0
 801108a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801108e:	4661      	mov	r1, ip
 8011090:	2200      	movs	r2, #0
 8011092:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011096:	4658      	mov	r0, fp
 8011098:	46e1      	mov	r9, ip
 801109a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801109e:	4614      	mov	r4, r2
 80110a0:	461d      	mov	r5, r3
 80110a2:	f7ef fac9 	bl	8000638 <__aeabi_dmul>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4630      	mov	r0, r6
 80110ac:	4639      	mov	r1, r7
 80110ae:	f7ef f90b 	bl	80002c8 <__aeabi_dsub>
 80110b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110b6:	4606      	mov	r6, r0
 80110b8:	460f      	mov	r7, r1
 80110ba:	4620      	mov	r0, r4
 80110bc:	4629      	mov	r1, r5
 80110be:	f7ef f903 	bl	80002c8 <__aeabi_dsub>
 80110c2:	4602      	mov	r2, r0
 80110c4:	460b      	mov	r3, r1
 80110c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110ca:	f7ef f8fd 	bl	80002c8 <__aeabi_dsub>
 80110ce:	465a      	mov	r2, fp
 80110d0:	464b      	mov	r3, r9
 80110d2:	f7ef fab1 	bl	8000638 <__aeabi_dmul>
 80110d6:	4602      	mov	r2, r0
 80110d8:	460b      	mov	r3, r1
 80110da:	4630      	mov	r0, r6
 80110dc:	4639      	mov	r1, r7
 80110de:	f7ef f8f3 	bl	80002c8 <__aeabi_dsub>
 80110e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80110e6:	f7ef faa7 	bl	8000638 <__aeabi_dmul>
 80110ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80110f2:	4610      	mov	r0, r2
 80110f4:	4619      	mov	r1, r3
 80110f6:	f7ef fa9f 	bl	8000638 <__aeabi_dmul>
 80110fa:	a37d      	add	r3, pc, #500	@ (adr r3, 80112f0 <__ieee754_pow+0x738>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	4604      	mov	r4, r0
 8011102:	460d      	mov	r5, r1
 8011104:	f7ef fa98 	bl	8000638 <__aeabi_dmul>
 8011108:	a37b      	add	r3, pc, #492	@ (adr r3, 80112f8 <__ieee754_pow+0x740>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef f8dd 	bl	80002cc <__adddf3>
 8011112:	4622      	mov	r2, r4
 8011114:	462b      	mov	r3, r5
 8011116:	f7ef fa8f 	bl	8000638 <__aeabi_dmul>
 801111a:	a379      	add	r3, pc, #484	@ (adr r3, 8011300 <__ieee754_pow+0x748>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	f7ef f8d4 	bl	80002cc <__adddf3>
 8011124:	4622      	mov	r2, r4
 8011126:	462b      	mov	r3, r5
 8011128:	f7ef fa86 	bl	8000638 <__aeabi_dmul>
 801112c:	a376      	add	r3, pc, #472	@ (adr r3, 8011308 <__ieee754_pow+0x750>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	f7ef f8cb 	bl	80002cc <__adddf3>
 8011136:	4622      	mov	r2, r4
 8011138:	462b      	mov	r3, r5
 801113a:	f7ef fa7d 	bl	8000638 <__aeabi_dmul>
 801113e:	a374      	add	r3, pc, #464	@ (adr r3, 8011310 <__ieee754_pow+0x758>)
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	f7ef f8c2 	bl	80002cc <__adddf3>
 8011148:	4622      	mov	r2, r4
 801114a:	462b      	mov	r3, r5
 801114c:	f7ef fa74 	bl	8000638 <__aeabi_dmul>
 8011150:	a371      	add	r3, pc, #452	@ (adr r3, 8011318 <__ieee754_pow+0x760>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	f7ef f8b9 	bl	80002cc <__adddf3>
 801115a:	4622      	mov	r2, r4
 801115c:	4606      	mov	r6, r0
 801115e:	460f      	mov	r7, r1
 8011160:	462b      	mov	r3, r5
 8011162:	4620      	mov	r0, r4
 8011164:	4629      	mov	r1, r5
 8011166:	f7ef fa67 	bl	8000638 <__aeabi_dmul>
 801116a:	4602      	mov	r2, r0
 801116c:	460b      	mov	r3, r1
 801116e:	4630      	mov	r0, r6
 8011170:	4639      	mov	r1, r7
 8011172:	f7ef fa61 	bl	8000638 <__aeabi_dmul>
 8011176:	465a      	mov	r2, fp
 8011178:	4604      	mov	r4, r0
 801117a:	460d      	mov	r5, r1
 801117c:	464b      	mov	r3, r9
 801117e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011182:	f7ef f8a3 	bl	80002cc <__adddf3>
 8011186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801118a:	f7ef fa55 	bl	8000638 <__aeabi_dmul>
 801118e:	4622      	mov	r2, r4
 8011190:	462b      	mov	r3, r5
 8011192:	f7ef f89b 	bl	80002cc <__adddf3>
 8011196:	465a      	mov	r2, fp
 8011198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801119c:	464b      	mov	r3, r9
 801119e:	4658      	mov	r0, fp
 80111a0:	4649      	mov	r1, r9
 80111a2:	f7ef fa49 	bl	8000638 <__aeabi_dmul>
 80111a6:	4b6a      	ldr	r3, [pc, #424]	@ (8011350 <__ieee754_pow+0x798>)
 80111a8:	2200      	movs	r2, #0
 80111aa:	4606      	mov	r6, r0
 80111ac:	460f      	mov	r7, r1
 80111ae:	f7ef f88d 	bl	80002cc <__adddf3>
 80111b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80111b6:	f7ef f889 	bl	80002cc <__adddf3>
 80111ba:	46d8      	mov	r8, fp
 80111bc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80111c0:	460d      	mov	r5, r1
 80111c2:	465a      	mov	r2, fp
 80111c4:	460b      	mov	r3, r1
 80111c6:	4640      	mov	r0, r8
 80111c8:	4649      	mov	r1, r9
 80111ca:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80111ce:	f7ef fa33 	bl	8000638 <__aeabi_dmul>
 80111d2:	465c      	mov	r4, fp
 80111d4:	4680      	mov	r8, r0
 80111d6:	4689      	mov	r9, r1
 80111d8:	4b5d      	ldr	r3, [pc, #372]	@ (8011350 <__ieee754_pow+0x798>)
 80111da:	2200      	movs	r2, #0
 80111dc:	4620      	mov	r0, r4
 80111de:	4629      	mov	r1, r5
 80111e0:	f7ef f872 	bl	80002c8 <__aeabi_dsub>
 80111e4:	4632      	mov	r2, r6
 80111e6:	463b      	mov	r3, r7
 80111e8:	f7ef f86e 	bl	80002c8 <__aeabi_dsub>
 80111ec:	4602      	mov	r2, r0
 80111ee:	460b      	mov	r3, r1
 80111f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80111f4:	f7ef f868 	bl	80002c8 <__aeabi_dsub>
 80111f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111fc:	f7ef fa1c 	bl	8000638 <__aeabi_dmul>
 8011200:	4622      	mov	r2, r4
 8011202:	4606      	mov	r6, r0
 8011204:	460f      	mov	r7, r1
 8011206:	462b      	mov	r3, r5
 8011208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801120c:	f7ef fa14 	bl	8000638 <__aeabi_dmul>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	4630      	mov	r0, r6
 8011216:	4639      	mov	r1, r7
 8011218:	f7ef f858 	bl	80002cc <__adddf3>
 801121c:	4606      	mov	r6, r0
 801121e:	460f      	mov	r7, r1
 8011220:	4602      	mov	r2, r0
 8011222:	460b      	mov	r3, r1
 8011224:	4640      	mov	r0, r8
 8011226:	4649      	mov	r1, r9
 8011228:	f7ef f850 	bl	80002cc <__adddf3>
 801122c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8011230:	a33b      	add	r3, pc, #236	@ (adr r3, 8011320 <__ieee754_pow+0x768>)
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	4658      	mov	r0, fp
 8011238:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801123c:	460d      	mov	r5, r1
 801123e:	f7ef f9fb 	bl	8000638 <__aeabi_dmul>
 8011242:	465c      	mov	r4, fp
 8011244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011248:	4642      	mov	r2, r8
 801124a:	464b      	mov	r3, r9
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	f7ef f83a 	bl	80002c8 <__aeabi_dsub>
 8011254:	4602      	mov	r2, r0
 8011256:	460b      	mov	r3, r1
 8011258:	4630      	mov	r0, r6
 801125a:	4639      	mov	r1, r7
 801125c:	f7ef f834 	bl	80002c8 <__aeabi_dsub>
 8011260:	a331      	add	r3, pc, #196	@ (adr r3, 8011328 <__ieee754_pow+0x770>)
 8011262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011266:	f7ef f9e7 	bl	8000638 <__aeabi_dmul>
 801126a:	a331      	add	r3, pc, #196	@ (adr r3, 8011330 <__ieee754_pow+0x778>)
 801126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011270:	4606      	mov	r6, r0
 8011272:	460f      	mov	r7, r1
 8011274:	4620      	mov	r0, r4
 8011276:	4629      	mov	r1, r5
 8011278:	f7ef f9de 	bl	8000638 <__aeabi_dmul>
 801127c:	4602      	mov	r2, r0
 801127e:	460b      	mov	r3, r1
 8011280:	4630      	mov	r0, r6
 8011282:	4639      	mov	r1, r7
 8011284:	f7ef f822 	bl	80002cc <__adddf3>
 8011288:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801128a:	4b32      	ldr	r3, [pc, #200]	@ (8011354 <__ieee754_pow+0x79c>)
 801128c:	4413      	add	r3, r2
 801128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011292:	f7ef f81b 	bl	80002cc <__adddf3>
 8011296:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801129a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801129c:	f7ef f962 	bl	8000564 <__aeabi_i2d>
 80112a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80112a2:	4b2d      	ldr	r3, [pc, #180]	@ (8011358 <__ieee754_pow+0x7a0>)
 80112a4:	4413      	add	r3, r2
 80112a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112aa:	4606      	mov	r6, r0
 80112ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112b0:	460f      	mov	r7, r1
 80112b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112b6:	f7ef f809 	bl	80002cc <__adddf3>
 80112ba:	4642      	mov	r2, r8
 80112bc:	464b      	mov	r3, r9
 80112be:	f7ef f805 	bl	80002cc <__adddf3>
 80112c2:	4632      	mov	r2, r6
 80112c4:	463b      	mov	r3, r7
 80112c6:	f7ef f801 	bl	80002cc <__adddf3>
 80112ca:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80112ce:	4632      	mov	r2, r6
 80112d0:	463b      	mov	r3, r7
 80112d2:	4658      	mov	r0, fp
 80112d4:	460d      	mov	r5, r1
 80112d6:	f7ee fff7 	bl	80002c8 <__aeabi_dsub>
 80112da:	4642      	mov	r2, r8
 80112dc:	464b      	mov	r3, r9
 80112de:	f7ee fff3 	bl	80002c8 <__aeabi_dsub>
 80112e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112e6:	f7ee ffef 	bl	80002c8 <__aeabi_dsub>
 80112ea:	465c      	mov	r4, fp
 80112ec:	e036      	b.n	801135c <__ieee754_pow+0x7a4>
 80112ee:	bf00      	nop
 80112f0:	4a454eef 	.word	0x4a454eef
 80112f4:	3fca7e28 	.word	0x3fca7e28
 80112f8:	93c9db65 	.word	0x93c9db65
 80112fc:	3fcd864a 	.word	0x3fcd864a
 8011300:	a91d4101 	.word	0xa91d4101
 8011304:	3fd17460 	.word	0x3fd17460
 8011308:	518f264d 	.word	0x518f264d
 801130c:	3fd55555 	.word	0x3fd55555
 8011310:	db6fabff 	.word	0xdb6fabff
 8011314:	3fdb6db6 	.word	0x3fdb6db6
 8011318:	33333303 	.word	0x33333303
 801131c:	3fe33333 	.word	0x3fe33333
 8011320:	e0000000 	.word	0xe0000000
 8011324:	3feec709 	.word	0x3feec709
 8011328:	dc3a03fd 	.word	0xdc3a03fd
 801132c:	3feec709 	.word	0x3feec709
 8011330:	145b01f5 	.word	0x145b01f5
 8011334:	be3e2fe0 	.word	0xbe3e2fe0
 8011338:	7ff00000 	.word	0x7ff00000
 801133c:	43400000 	.word	0x43400000
 8011340:	0003988e 	.word	0x0003988e
 8011344:	000bb679 	.word	0x000bb679
 8011348:	08012c20 	.word	0x08012c20
 801134c:	3ff00000 	.word	0x3ff00000
 8011350:	40080000 	.word	0x40080000
 8011354:	08012c00 	.word	0x08012c00
 8011358:	08012c10 	.word	0x08012c10
 801135c:	4602      	mov	r2, r0
 801135e:	460b      	mov	r3, r1
 8011360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011364:	e5d6      	b.n	8010f14 <__ieee754_pow+0x35c>
 8011366:	f04f 0a01 	mov.w	sl, #1
 801136a:	e65e      	b.n	801102a <__ieee754_pow+0x472>
 801136c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8011644 <__ieee754_pow+0xa8c>)
 801136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011372:	4630      	mov	r0, r6
 8011374:	4639      	mov	r1, r7
 8011376:	f7ee ffa9 	bl	80002cc <__adddf3>
 801137a:	4642      	mov	r2, r8
 801137c:	e9cd 0100 	strd	r0, r1, [sp]
 8011380:	464b      	mov	r3, r9
 8011382:	4620      	mov	r0, r4
 8011384:	4629      	mov	r1, r5
 8011386:	f7ee ff9f 	bl	80002c8 <__aeabi_dsub>
 801138a:	4602      	mov	r2, r0
 801138c:	460b      	mov	r3, r1
 801138e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011392:	f7ef fbe1 	bl	8000b58 <__aeabi_dcmpgt>
 8011396:	2800      	cmp	r0, #0
 8011398:	f47f adfe 	bne.w	8010f98 <__ieee754_pow+0x3e0>
 801139c:	4ba2      	ldr	r3, [pc, #648]	@ (8011628 <__ieee754_pow+0xa70>)
 801139e:	e022      	b.n	80113e6 <__ieee754_pow+0x82e>
 80113a0:	4ca2      	ldr	r4, [pc, #648]	@ (801162c <__ieee754_pow+0xa74>)
 80113a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80113a6:	42a3      	cmp	r3, r4
 80113a8:	d919      	bls.n	80113de <__ieee754_pow+0x826>
 80113aa:	4ba1      	ldr	r3, [pc, #644]	@ (8011630 <__ieee754_pow+0xa78>)
 80113ac:	440b      	add	r3, r1
 80113ae:	4303      	orrs	r3, r0
 80113b0:	d009      	beq.n	80113c6 <__ieee754_pow+0x80e>
 80113b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113b6:	2200      	movs	r2, #0
 80113b8:	2300      	movs	r3, #0
 80113ba:	f7ef fbaf 	bl	8000b1c <__aeabi_dcmplt>
 80113be:	3800      	subs	r0, #0
 80113c0:	bf18      	it	ne
 80113c2:	2001      	movne	r0, #1
 80113c4:	e512      	b.n	8010dec <__ieee754_pow+0x234>
 80113c6:	4642      	mov	r2, r8
 80113c8:	464b      	mov	r3, r9
 80113ca:	f7ee ff7d 	bl	80002c8 <__aeabi_dsub>
 80113ce:	4632      	mov	r2, r6
 80113d0:	463b      	mov	r3, r7
 80113d2:	f7ef fbb7 	bl	8000b44 <__aeabi_dcmpge>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d1eb      	bne.n	80113b2 <__ieee754_pow+0x7fa>
 80113da:	4b96      	ldr	r3, [pc, #600]	@ (8011634 <__ieee754_pow+0xa7c>)
 80113dc:	e003      	b.n	80113e6 <__ieee754_pow+0x82e>
 80113de:	4a96      	ldr	r2, [pc, #600]	@ (8011638 <__ieee754_pow+0xa80>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	f240 80e7 	bls.w	80115b4 <__ieee754_pow+0x9fc>
 80113e6:	151b      	asrs	r3, r3, #20
 80113e8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80113ec:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80113f0:	fa4a fa03 	asr.w	sl, sl, r3
 80113f4:	44da      	add	sl, fp
 80113f6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80113fa:	4890      	ldr	r0, [pc, #576]	@ (801163c <__ieee754_pow+0xa84>)
 80113fc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011400:	4108      	asrs	r0, r1
 8011402:	ea00 030a 	and.w	r3, r0, sl
 8011406:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801140a:	f1c1 0114 	rsb	r1, r1, #20
 801140e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011412:	fa4a fa01 	asr.w	sl, sl, r1
 8011416:	f1bb 0f00 	cmp.w	fp, #0
 801141a:	4640      	mov	r0, r8
 801141c:	4649      	mov	r1, r9
 801141e:	f04f 0200 	mov.w	r2, #0
 8011422:	bfb8      	it	lt
 8011424:	f1ca 0a00 	rsblt	sl, sl, #0
 8011428:	f7ee ff4e 	bl	80002c8 <__aeabi_dsub>
 801142c:	4680      	mov	r8, r0
 801142e:	4689      	mov	r9, r1
 8011430:	4632      	mov	r2, r6
 8011432:	463b      	mov	r3, r7
 8011434:	4640      	mov	r0, r8
 8011436:	4649      	mov	r1, r9
 8011438:	f7ee ff48 	bl	80002cc <__adddf3>
 801143c:	2400      	movs	r4, #0
 801143e:	a36a      	add	r3, pc, #424	@ (adr r3, 80115e8 <__ieee754_pow+0xa30>)
 8011440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011444:	4620      	mov	r0, r4
 8011446:	460d      	mov	r5, r1
 8011448:	f7ef f8f6 	bl	8000638 <__aeabi_dmul>
 801144c:	4642      	mov	r2, r8
 801144e:	e9cd 0100 	strd	r0, r1, [sp]
 8011452:	464b      	mov	r3, r9
 8011454:	4620      	mov	r0, r4
 8011456:	4629      	mov	r1, r5
 8011458:	f7ee ff36 	bl	80002c8 <__aeabi_dsub>
 801145c:	4602      	mov	r2, r0
 801145e:	460b      	mov	r3, r1
 8011460:	4630      	mov	r0, r6
 8011462:	4639      	mov	r1, r7
 8011464:	f7ee ff30 	bl	80002c8 <__aeabi_dsub>
 8011468:	a361      	add	r3, pc, #388	@ (adr r3, 80115f0 <__ieee754_pow+0xa38>)
 801146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146e:	f7ef f8e3 	bl	8000638 <__aeabi_dmul>
 8011472:	a361      	add	r3, pc, #388	@ (adr r3, 80115f8 <__ieee754_pow+0xa40>)
 8011474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011478:	4680      	mov	r8, r0
 801147a:	4689      	mov	r9, r1
 801147c:	4620      	mov	r0, r4
 801147e:	4629      	mov	r1, r5
 8011480:	f7ef f8da 	bl	8000638 <__aeabi_dmul>
 8011484:	4602      	mov	r2, r0
 8011486:	460b      	mov	r3, r1
 8011488:	4640      	mov	r0, r8
 801148a:	4649      	mov	r1, r9
 801148c:	f7ee ff1e 	bl	80002cc <__adddf3>
 8011490:	4604      	mov	r4, r0
 8011492:	460d      	mov	r5, r1
 8011494:	4602      	mov	r2, r0
 8011496:	460b      	mov	r3, r1
 8011498:	e9dd 0100 	ldrd	r0, r1, [sp]
 801149c:	f7ee ff16 	bl	80002cc <__adddf3>
 80114a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114a4:	4680      	mov	r8, r0
 80114a6:	4689      	mov	r9, r1
 80114a8:	f7ee ff0e 	bl	80002c8 <__aeabi_dsub>
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	4620      	mov	r0, r4
 80114b2:	4629      	mov	r1, r5
 80114b4:	f7ee ff08 	bl	80002c8 <__aeabi_dsub>
 80114b8:	4642      	mov	r2, r8
 80114ba:	4606      	mov	r6, r0
 80114bc:	460f      	mov	r7, r1
 80114be:	464b      	mov	r3, r9
 80114c0:	4640      	mov	r0, r8
 80114c2:	4649      	mov	r1, r9
 80114c4:	f7ef f8b8 	bl	8000638 <__aeabi_dmul>
 80114c8:	a34d      	add	r3, pc, #308	@ (adr r3, 8011600 <__ieee754_pow+0xa48>)
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	4604      	mov	r4, r0
 80114d0:	460d      	mov	r5, r1
 80114d2:	f7ef f8b1 	bl	8000638 <__aeabi_dmul>
 80114d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8011608 <__ieee754_pow+0xa50>)
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	f7ee fef4 	bl	80002c8 <__aeabi_dsub>
 80114e0:	4622      	mov	r2, r4
 80114e2:	462b      	mov	r3, r5
 80114e4:	f7ef f8a8 	bl	8000638 <__aeabi_dmul>
 80114e8:	a349      	add	r3, pc, #292	@ (adr r3, 8011610 <__ieee754_pow+0xa58>)
 80114ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ee:	f7ee feed 	bl	80002cc <__adddf3>
 80114f2:	4622      	mov	r2, r4
 80114f4:	462b      	mov	r3, r5
 80114f6:	f7ef f89f 	bl	8000638 <__aeabi_dmul>
 80114fa:	a347      	add	r3, pc, #284	@ (adr r3, 8011618 <__ieee754_pow+0xa60>)
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	f7ee fee2 	bl	80002c8 <__aeabi_dsub>
 8011504:	4622      	mov	r2, r4
 8011506:	462b      	mov	r3, r5
 8011508:	f7ef f896 	bl	8000638 <__aeabi_dmul>
 801150c:	a344      	add	r3, pc, #272	@ (adr r3, 8011620 <__ieee754_pow+0xa68>)
 801150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011512:	f7ee fedb 	bl	80002cc <__adddf3>
 8011516:	4622      	mov	r2, r4
 8011518:	462b      	mov	r3, r5
 801151a:	f7ef f88d 	bl	8000638 <__aeabi_dmul>
 801151e:	4602      	mov	r2, r0
 8011520:	460b      	mov	r3, r1
 8011522:	4640      	mov	r0, r8
 8011524:	4649      	mov	r1, r9
 8011526:	f7ee fecf 	bl	80002c8 <__aeabi_dsub>
 801152a:	4604      	mov	r4, r0
 801152c:	460d      	mov	r5, r1
 801152e:	4602      	mov	r2, r0
 8011530:	460b      	mov	r3, r1
 8011532:	4640      	mov	r0, r8
 8011534:	4649      	mov	r1, r9
 8011536:	f7ef f87f 	bl	8000638 <__aeabi_dmul>
 801153a:	2200      	movs	r2, #0
 801153c:	e9cd 0100 	strd	r0, r1, [sp]
 8011540:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011544:	4620      	mov	r0, r4
 8011546:	4629      	mov	r1, r5
 8011548:	f7ee febe 	bl	80002c8 <__aeabi_dsub>
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011554:	f7ef f99a 	bl	800088c <__aeabi_ddiv>
 8011558:	4632      	mov	r2, r6
 801155a:	4604      	mov	r4, r0
 801155c:	460d      	mov	r5, r1
 801155e:	463b      	mov	r3, r7
 8011560:	4640      	mov	r0, r8
 8011562:	4649      	mov	r1, r9
 8011564:	f7ef f868 	bl	8000638 <__aeabi_dmul>
 8011568:	4632      	mov	r2, r6
 801156a:	463b      	mov	r3, r7
 801156c:	f7ee feae 	bl	80002cc <__adddf3>
 8011570:	4602      	mov	r2, r0
 8011572:	460b      	mov	r3, r1
 8011574:	4620      	mov	r0, r4
 8011576:	4629      	mov	r1, r5
 8011578:	f7ee fea6 	bl	80002c8 <__aeabi_dsub>
 801157c:	4642      	mov	r2, r8
 801157e:	464b      	mov	r3, r9
 8011580:	f7ee fea2 	bl	80002c8 <__aeabi_dsub>
 8011584:	460b      	mov	r3, r1
 8011586:	4602      	mov	r2, r0
 8011588:	492d      	ldr	r1, [pc, #180]	@ (8011640 <__ieee754_pow+0xa88>)
 801158a:	2000      	movs	r0, #0
 801158c:	f7ee fe9c 	bl	80002c8 <__aeabi_dsub>
 8011590:	ec41 0b10 	vmov	d0, r0, r1
 8011594:	ee10 3a90 	vmov	r3, s1
 8011598:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801159c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115a0:	da0b      	bge.n	80115ba <__ieee754_pow+0xa02>
 80115a2:	4650      	mov	r0, sl
 80115a4:	f001 f83c 	bl	8012620 <scalbn>
 80115a8:	ec51 0b10 	vmov	r0, r1, d0
 80115ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115b0:	f7ff bb6d 	b.w	8010c8e <__ieee754_pow+0xd6>
 80115b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80115b8:	e73a      	b.n	8011430 <__ieee754_pow+0x878>
 80115ba:	ec51 0b10 	vmov	r0, r1, d0
 80115be:	4619      	mov	r1, r3
 80115c0:	e7f4      	b.n	80115ac <__ieee754_pow+0x9f4>
 80115c2:	491f      	ldr	r1, [pc, #124]	@ (8011640 <__ieee754_pow+0xa88>)
 80115c4:	2000      	movs	r0, #0
 80115c6:	f7ff bb14 	b.w	8010bf2 <__ieee754_pow+0x3a>
 80115ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115ce:	f7ff bb10 	b.w	8010bf2 <__ieee754_pow+0x3a>
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7ff bb0c 	b.w	8010bf2 <__ieee754_pow+0x3a>
 80115da:	460c      	mov	r4, r1
 80115dc:	f7ff bb69 	b.w	8010cb2 <__ieee754_pow+0xfa>
 80115e0:	2400      	movs	r4, #0
 80115e2:	f7ff bb4b 	b.w	8010c7c <__ieee754_pow+0xc4>
 80115e6:	bf00      	nop
 80115e8:	00000000 	.word	0x00000000
 80115ec:	3fe62e43 	.word	0x3fe62e43
 80115f0:	fefa39ef 	.word	0xfefa39ef
 80115f4:	3fe62e42 	.word	0x3fe62e42
 80115f8:	0ca86c39 	.word	0x0ca86c39
 80115fc:	be205c61 	.word	0xbe205c61
 8011600:	72bea4d0 	.word	0x72bea4d0
 8011604:	3e663769 	.word	0x3e663769
 8011608:	c5d26bf1 	.word	0xc5d26bf1
 801160c:	3ebbbd41 	.word	0x3ebbbd41
 8011610:	af25de2c 	.word	0xaf25de2c
 8011614:	3f11566a 	.word	0x3f11566a
 8011618:	16bebd93 	.word	0x16bebd93
 801161c:	3f66c16c 	.word	0x3f66c16c
 8011620:	5555553e 	.word	0x5555553e
 8011624:	3fc55555 	.word	0x3fc55555
 8011628:	40900000 	.word	0x40900000
 801162c:	4090cbff 	.word	0x4090cbff
 8011630:	3f6f3400 	.word	0x3f6f3400
 8011634:	4090cc00 	.word	0x4090cc00
 8011638:	3fe00000 	.word	0x3fe00000
 801163c:	fff00000 	.word	0xfff00000
 8011640:	3ff00000 	.word	0x3ff00000
 8011644:	652b82fe 	.word	0x652b82fe
 8011648:	3c971547 	.word	0x3c971547
 801164c:	00000000 	.word	0x00000000

08011650 <__ieee754_rem_pio2>:
 8011650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011654:	ec57 6b10 	vmov	r6, r7, d0
 8011658:	4bc5      	ldr	r3, [pc, #788]	@ (8011970 <__ieee754_rem_pio2+0x320>)
 801165a:	b08d      	sub	sp, #52	@ 0x34
 801165c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011660:	4598      	cmp	r8, r3
 8011662:	4604      	mov	r4, r0
 8011664:	9704      	str	r7, [sp, #16]
 8011666:	d807      	bhi.n	8011678 <__ieee754_rem_pio2+0x28>
 8011668:	2200      	movs	r2, #0
 801166a:	2300      	movs	r3, #0
 801166c:	ed80 0b00 	vstr	d0, [r0]
 8011670:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011674:	2500      	movs	r5, #0
 8011676:	e028      	b.n	80116ca <__ieee754_rem_pio2+0x7a>
 8011678:	4bbe      	ldr	r3, [pc, #760]	@ (8011974 <__ieee754_rem_pio2+0x324>)
 801167a:	4598      	cmp	r8, r3
 801167c:	d878      	bhi.n	8011770 <__ieee754_rem_pio2+0x120>
 801167e:	9b04      	ldr	r3, [sp, #16]
 8011680:	4dbd      	ldr	r5, [pc, #756]	@ (8011978 <__ieee754_rem_pio2+0x328>)
 8011682:	2b00      	cmp	r3, #0
 8011684:	4630      	mov	r0, r6
 8011686:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011938 <__ieee754_rem_pio2+0x2e8>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	4639      	mov	r1, r7
 801168e:	dd38      	ble.n	8011702 <__ieee754_rem_pio2+0xb2>
 8011690:	f7ee fe1a 	bl	80002c8 <__aeabi_dsub>
 8011694:	45a8      	cmp	r8, r5
 8011696:	4606      	mov	r6, r0
 8011698:	460f      	mov	r7, r1
 801169a:	d01a      	beq.n	80116d2 <__ieee754_rem_pio2+0x82>
 801169c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011940 <__ieee754_rem_pio2+0x2f0>)
 801169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a2:	f7ee fe11 	bl	80002c8 <__aeabi_dsub>
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	4680      	mov	r8, r0
 80116ac:	4689      	mov	r9, r1
 80116ae:	4630      	mov	r0, r6
 80116b0:	4639      	mov	r1, r7
 80116b2:	f7ee fe09 	bl	80002c8 <__aeabi_dsub>
 80116b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011940 <__ieee754_rem_pio2+0x2f0>)
 80116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116bc:	f7ee fe04 	bl	80002c8 <__aeabi_dsub>
 80116c0:	e9c4 8900 	strd	r8, r9, [r4]
 80116c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80116c8:	2501      	movs	r5, #1
 80116ca:	4628      	mov	r0, r5
 80116cc:	b00d      	add	sp, #52	@ 0x34
 80116ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d2:	a39d      	add	r3, pc, #628	@ (adr r3, 8011948 <__ieee754_rem_pio2+0x2f8>)
 80116d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d8:	f7ee fdf6 	bl	80002c8 <__aeabi_dsub>
 80116dc:	a39c      	add	r3, pc, #624	@ (adr r3, 8011950 <__ieee754_rem_pio2+0x300>)
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	4606      	mov	r6, r0
 80116e4:	460f      	mov	r7, r1
 80116e6:	f7ee fdef 	bl	80002c8 <__aeabi_dsub>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	4680      	mov	r8, r0
 80116f0:	4689      	mov	r9, r1
 80116f2:	4630      	mov	r0, r6
 80116f4:	4639      	mov	r1, r7
 80116f6:	f7ee fde7 	bl	80002c8 <__aeabi_dsub>
 80116fa:	a395      	add	r3, pc, #596	@ (adr r3, 8011950 <__ieee754_rem_pio2+0x300>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	e7dc      	b.n	80116bc <__ieee754_rem_pio2+0x6c>
 8011702:	f7ee fde3 	bl	80002cc <__adddf3>
 8011706:	45a8      	cmp	r8, r5
 8011708:	4606      	mov	r6, r0
 801170a:	460f      	mov	r7, r1
 801170c:	d018      	beq.n	8011740 <__ieee754_rem_pio2+0xf0>
 801170e:	a38c      	add	r3, pc, #560	@ (adr r3, 8011940 <__ieee754_rem_pio2+0x2f0>)
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f7ee fdda 	bl	80002cc <__adddf3>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	4680      	mov	r8, r0
 801171e:	4689      	mov	r9, r1
 8011720:	4630      	mov	r0, r6
 8011722:	4639      	mov	r1, r7
 8011724:	f7ee fdd0 	bl	80002c8 <__aeabi_dsub>
 8011728:	a385      	add	r3, pc, #532	@ (adr r3, 8011940 <__ieee754_rem_pio2+0x2f0>)
 801172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172e:	f7ee fdcd 	bl	80002cc <__adddf3>
 8011732:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011736:	e9c4 8900 	strd	r8, r9, [r4]
 801173a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801173e:	e7c4      	b.n	80116ca <__ieee754_rem_pio2+0x7a>
 8011740:	a381      	add	r3, pc, #516	@ (adr r3, 8011948 <__ieee754_rem_pio2+0x2f8>)
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	f7ee fdc1 	bl	80002cc <__adddf3>
 801174a:	a381      	add	r3, pc, #516	@ (adr r3, 8011950 <__ieee754_rem_pio2+0x300>)
 801174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011750:	4606      	mov	r6, r0
 8011752:	460f      	mov	r7, r1
 8011754:	f7ee fdba 	bl	80002cc <__adddf3>
 8011758:	4602      	mov	r2, r0
 801175a:	460b      	mov	r3, r1
 801175c:	4680      	mov	r8, r0
 801175e:	4689      	mov	r9, r1
 8011760:	4630      	mov	r0, r6
 8011762:	4639      	mov	r1, r7
 8011764:	f7ee fdb0 	bl	80002c8 <__aeabi_dsub>
 8011768:	a379      	add	r3, pc, #484	@ (adr r3, 8011950 <__ieee754_rem_pio2+0x300>)
 801176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176e:	e7de      	b.n	801172e <__ieee754_rem_pio2+0xde>
 8011770:	4b82      	ldr	r3, [pc, #520]	@ (801197c <__ieee754_rem_pio2+0x32c>)
 8011772:	4598      	cmp	r8, r3
 8011774:	f200 80d1 	bhi.w	801191a <__ieee754_rem_pio2+0x2ca>
 8011778:	f000 ff48 	bl	801260c <fabs>
 801177c:	ec57 6b10 	vmov	r6, r7, d0
 8011780:	a375      	add	r3, pc, #468	@ (adr r3, 8011958 <__ieee754_rem_pio2+0x308>)
 8011782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011786:	4630      	mov	r0, r6
 8011788:	4639      	mov	r1, r7
 801178a:	f7ee ff55 	bl	8000638 <__aeabi_dmul>
 801178e:	4b7c      	ldr	r3, [pc, #496]	@ (8011980 <__ieee754_rem_pio2+0x330>)
 8011790:	2200      	movs	r2, #0
 8011792:	f7ee fd9b 	bl	80002cc <__adddf3>
 8011796:	f7ef f9ff 	bl	8000b98 <__aeabi_d2iz>
 801179a:	4605      	mov	r5, r0
 801179c:	f7ee fee2 	bl	8000564 <__aeabi_i2d>
 80117a0:	4602      	mov	r2, r0
 80117a2:	460b      	mov	r3, r1
 80117a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117a8:	a363      	add	r3, pc, #396	@ (adr r3, 8011938 <__ieee754_rem_pio2+0x2e8>)
 80117aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ae:	f7ee ff43 	bl	8000638 <__aeabi_dmul>
 80117b2:	4602      	mov	r2, r0
 80117b4:	460b      	mov	r3, r1
 80117b6:	4630      	mov	r0, r6
 80117b8:	4639      	mov	r1, r7
 80117ba:	f7ee fd85 	bl	80002c8 <__aeabi_dsub>
 80117be:	a360      	add	r3, pc, #384	@ (adr r3, 8011940 <__ieee754_rem_pio2+0x2f0>)
 80117c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c4:	4682      	mov	sl, r0
 80117c6:	468b      	mov	fp, r1
 80117c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117cc:	f7ee ff34 	bl	8000638 <__aeabi_dmul>
 80117d0:	2d1f      	cmp	r5, #31
 80117d2:	4606      	mov	r6, r0
 80117d4:	460f      	mov	r7, r1
 80117d6:	dc0c      	bgt.n	80117f2 <__ieee754_rem_pio2+0x1a2>
 80117d8:	4b6a      	ldr	r3, [pc, #424]	@ (8011984 <__ieee754_rem_pio2+0x334>)
 80117da:	1e6a      	subs	r2, r5, #1
 80117dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117e0:	4543      	cmp	r3, r8
 80117e2:	d006      	beq.n	80117f2 <__ieee754_rem_pio2+0x1a2>
 80117e4:	4632      	mov	r2, r6
 80117e6:	463b      	mov	r3, r7
 80117e8:	4650      	mov	r0, sl
 80117ea:	4659      	mov	r1, fp
 80117ec:	f7ee fd6c 	bl	80002c8 <__aeabi_dsub>
 80117f0:	e00e      	b.n	8011810 <__ieee754_rem_pio2+0x1c0>
 80117f2:	463b      	mov	r3, r7
 80117f4:	4632      	mov	r2, r6
 80117f6:	4650      	mov	r0, sl
 80117f8:	4659      	mov	r1, fp
 80117fa:	f7ee fd65 	bl	80002c8 <__aeabi_dsub>
 80117fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011802:	9305      	str	r3, [sp, #20]
 8011804:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011808:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801180c:	2b10      	cmp	r3, #16
 801180e:	dc02      	bgt.n	8011816 <__ieee754_rem_pio2+0x1c6>
 8011810:	e9c4 0100 	strd	r0, r1, [r4]
 8011814:	e039      	b.n	801188a <__ieee754_rem_pio2+0x23a>
 8011816:	a34c      	add	r3, pc, #304	@ (adr r3, 8011948 <__ieee754_rem_pio2+0x2f8>)
 8011818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011820:	f7ee ff0a 	bl	8000638 <__aeabi_dmul>
 8011824:	4606      	mov	r6, r0
 8011826:	460f      	mov	r7, r1
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	4650      	mov	r0, sl
 801182e:	4659      	mov	r1, fp
 8011830:	f7ee fd4a 	bl	80002c8 <__aeabi_dsub>
 8011834:	4602      	mov	r2, r0
 8011836:	460b      	mov	r3, r1
 8011838:	4680      	mov	r8, r0
 801183a:	4689      	mov	r9, r1
 801183c:	4650      	mov	r0, sl
 801183e:	4659      	mov	r1, fp
 8011840:	f7ee fd42 	bl	80002c8 <__aeabi_dsub>
 8011844:	4632      	mov	r2, r6
 8011846:	463b      	mov	r3, r7
 8011848:	f7ee fd3e 	bl	80002c8 <__aeabi_dsub>
 801184c:	a340      	add	r3, pc, #256	@ (adr r3, 8011950 <__ieee754_rem_pio2+0x300>)
 801184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011852:	4606      	mov	r6, r0
 8011854:	460f      	mov	r7, r1
 8011856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801185a:	f7ee feed 	bl	8000638 <__aeabi_dmul>
 801185e:	4632      	mov	r2, r6
 8011860:	463b      	mov	r3, r7
 8011862:	f7ee fd31 	bl	80002c8 <__aeabi_dsub>
 8011866:	4602      	mov	r2, r0
 8011868:	460b      	mov	r3, r1
 801186a:	4606      	mov	r6, r0
 801186c:	460f      	mov	r7, r1
 801186e:	4640      	mov	r0, r8
 8011870:	4649      	mov	r1, r9
 8011872:	f7ee fd29 	bl	80002c8 <__aeabi_dsub>
 8011876:	9a05      	ldr	r2, [sp, #20]
 8011878:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	2b31      	cmp	r3, #49	@ 0x31
 8011880:	dc20      	bgt.n	80118c4 <__ieee754_rem_pio2+0x274>
 8011882:	e9c4 0100 	strd	r0, r1, [r4]
 8011886:	46c2      	mov	sl, r8
 8011888:	46cb      	mov	fp, r9
 801188a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801188e:	4650      	mov	r0, sl
 8011890:	4642      	mov	r2, r8
 8011892:	464b      	mov	r3, r9
 8011894:	4659      	mov	r1, fp
 8011896:	f7ee fd17 	bl	80002c8 <__aeabi_dsub>
 801189a:	463b      	mov	r3, r7
 801189c:	4632      	mov	r2, r6
 801189e:	f7ee fd13 	bl	80002c8 <__aeabi_dsub>
 80118a2:	9b04      	ldr	r3, [sp, #16]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80118aa:	f6bf af0e 	bge.w	80116ca <__ieee754_rem_pio2+0x7a>
 80118ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80118b2:	6063      	str	r3, [r4, #4]
 80118b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80118b8:	f8c4 8000 	str.w	r8, [r4]
 80118bc:	60a0      	str	r0, [r4, #8]
 80118be:	60e3      	str	r3, [r4, #12]
 80118c0:	426d      	negs	r5, r5
 80118c2:	e702      	b.n	80116ca <__ieee754_rem_pio2+0x7a>
 80118c4:	a326      	add	r3, pc, #152	@ (adr r3, 8011960 <__ieee754_rem_pio2+0x310>)
 80118c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118ce:	f7ee feb3 	bl	8000638 <__aeabi_dmul>
 80118d2:	4606      	mov	r6, r0
 80118d4:	460f      	mov	r7, r1
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	4640      	mov	r0, r8
 80118dc:	4649      	mov	r1, r9
 80118de:	f7ee fcf3 	bl	80002c8 <__aeabi_dsub>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	4682      	mov	sl, r0
 80118e8:	468b      	mov	fp, r1
 80118ea:	4640      	mov	r0, r8
 80118ec:	4649      	mov	r1, r9
 80118ee:	f7ee fceb 	bl	80002c8 <__aeabi_dsub>
 80118f2:	4632      	mov	r2, r6
 80118f4:	463b      	mov	r3, r7
 80118f6:	f7ee fce7 	bl	80002c8 <__aeabi_dsub>
 80118fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8011968 <__ieee754_rem_pio2+0x318>)
 80118fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011900:	4606      	mov	r6, r0
 8011902:	460f      	mov	r7, r1
 8011904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011908:	f7ee fe96 	bl	8000638 <__aeabi_dmul>
 801190c:	4632      	mov	r2, r6
 801190e:	463b      	mov	r3, r7
 8011910:	f7ee fcda 	bl	80002c8 <__aeabi_dsub>
 8011914:	4606      	mov	r6, r0
 8011916:	460f      	mov	r7, r1
 8011918:	e764      	b.n	80117e4 <__ieee754_rem_pio2+0x194>
 801191a:	4b1b      	ldr	r3, [pc, #108]	@ (8011988 <__ieee754_rem_pio2+0x338>)
 801191c:	4598      	cmp	r8, r3
 801191e:	d935      	bls.n	801198c <__ieee754_rem_pio2+0x33c>
 8011920:	4632      	mov	r2, r6
 8011922:	463b      	mov	r3, r7
 8011924:	4630      	mov	r0, r6
 8011926:	4639      	mov	r1, r7
 8011928:	f7ee fcce 	bl	80002c8 <__aeabi_dsub>
 801192c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011930:	e9c4 0100 	strd	r0, r1, [r4]
 8011934:	e69e      	b.n	8011674 <__ieee754_rem_pio2+0x24>
 8011936:	bf00      	nop
 8011938:	54400000 	.word	0x54400000
 801193c:	3ff921fb 	.word	0x3ff921fb
 8011940:	1a626331 	.word	0x1a626331
 8011944:	3dd0b461 	.word	0x3dd0b461
 8011948:	1a600000 	.word	0x1a600000
 801194c:	3dd0b461 	.word	0x3dd0b461
 8011950:	2e037073 	.word	0x2e037073
 8011954:	3ba3198a 	.word	0x3ba3198a
 8011958:	6dc9c883 	.word	0x6dc9c883
 801195c:	3fe45f30 	.word	0x3fe45f30
 8011960:	2e000000 	.word	0x2e000000
 8011964:	3ba3198a 	.word	0x3ba3198a
 8011968:	252049c1 	.word	0x252049c1
 801196c:	397b839a 	.word	0x397b839a
 8011970:	3fe921fb 	.word	0x3fe921fb
 8011974:	4002d97b 	.word	0x4002d97b
 8011978:	3ff921fb 	.word	0x3ff921fb
 801197c:	413921fb 	.word	0x413921fb
 8011980:	3fe00000 	.word	0x3fe00000
 8011984:	08012c30 	.word	0x08012c30
 8011988:	7fefffff 	.word	0x7fefffff
 801198c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011990:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8011994:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011998:	4630      	mov	r0, r6
 801199a:	460f      	mov	r7, r1
 801199c:	f7ef f8fc 	bl	8000b98 <__aeabi_d2iz>
 80119a0:	f7ee fde0 	bl	8000564 <__aeabi_i2d>
 80119a4:	4602      	mov	r2, r0
 80119a6:	460b      	mov	r3, r1
 80119a8:	4630      	mov	r0, r6
 80119aa:	4639      	mov	r1, r7
 80119ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80119b0:	f7ee fc8a 	bl	80002c8 <__aeabi_dsub>
 80119b4:	4b22      	ldr	r3, [pc, #136]	@ (8011a40 <__ieee754_rem_pio2+0x3f0>)
 80119b6:	2200      	movs	r2, #0
 80119b8:	f7ee fe3e 	bl	8000638 <__aeabi_dmul>
 80119bc:	460f      	mov	r7, r1
 80119be:	4606      	mov	r6, r0
 80119c0:	f7ef f8ea 	bl	8000b98 <__aeabi_d2iz>
 80119c4:	f7ee fdce 	bl	8000564 <__aeabi_i2d>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	4630      	mov	r0, r6
 80119ce:	4639      	mov	r1, r7
 80119d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80119d4:	f7ee fc78 	bl	80002c8 <__aeabi_dsub>
 80119d8:	4b19      	ldr	r3, [pc, #100]	@ (8011a40 <__ieee754_rem_pio2+0x3f0>)
 80119da:	2200      	movs	r2, #0
 80119dc:	f7ee fe2c 	bl	8000638 <__aeabi_dmul>
 80119e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80119e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80119e8:	f04f 0803 	mov.w	r8, #3
 80119ec:	2600      	movs	r6, #0
 80119ee:	2700      	movs	r7, #0
 80119f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80119f4:	4632      	mov	r2, r6
 80119f6:	463b      	mov	r3, r7
 80119f8:	46c2      	mov	sl, r8
 80119fa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80119fe:	f7ef f883 	bl	8000b08 <__aeabi_dcmpeq>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d1f4      	bne.n	80119f0 <__ieee754_rem_pio2+0x3a0>
 8011a06:	4b0f      	ldr	r3, [pc, #60]	@ (8011a44 <__ieee754_rem_pio2+0x3f4>)
 8011a08:	9301      	str	r3, [sp, #4]
 8011a0a:	2302      	movs	r3, #2
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	462a      	mov	r2, r5
 8011a10:	4653      	mov	r3, sl
 8011a12:	4621      	mov	r1, r4
 8011a14:	a806      	add	r0, sp, #24
 8011a16:	f000 f853 	bl	8011ac0 <__kernel_rem_pio2>
 8011a1a:	9b04      	ldr	r3, [sp, #16]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	4605      	mov	r5, r0
 8011a20:	f6bf ae53 	bge.w	80116ca <__ieee754_rem_pio2+0x7a>
 8011a24:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011a28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a2c:	e9c4 2300 	strd	r2, r3, [r4]
 8011a30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011a3c:	e740      	b.n	80118c0 <__ieee754_rem_pio2+0x270>
 8011a3e:	bf00      	nop
 8011a40:	41700000 	.word	0x41700000
 8011a44:	08012cb0 	.word	0x08012cb0

08011a48 <with_errno>:
 8011a48:	b510      	push	{r4, lr}
 8011a4a:	ed2d 8b02 	vpush	{d8}
 8011a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8011a52:	eef0 8a60 	vmov.f32	s17, s1
 8011a56:	4604      	mov	r4, r0
 8011a58:	f7fc fca8 	bl	800e3ac <__errno>
 8011a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8011a60:	eef0 0a68 	vmov.f32	s1, s17
 8011a64:	ecbd 8b02 	vpop	{d8}
 8011a68:	6004      	str	r4, [r0, #0]
 8011a6a:	bd10      	pop	{r4, pc}

08011a6c <xflow>:
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	b507      	push	{r0, r1, r2, lr}
 8011a70:	ec51 0b10 	vmov	r0, r1, d0
 8011a74:	b183      	cbz	r3, 8011a98 <xflow+0x2c>
 8011a76:	4602      	mov	r2, r0
 8011a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8011a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a84:	f7ee fdd8 	bl	8000638 <__aeabi_dmul>
 8011a88:	ec41 0b10 	vmov	d0, r0, r1
 8011a8c:	2022      	movs	r0, #34	@ 0x22
 8011a8e:	b003      	add	sp, #12
 8011a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a94:	f7ff bfd8 	b.w	8011a48 <with_errno>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	e7ee      	b.n	8011a7c <xflow+0x10>
	...

08011aa0 <__math_uflow>:
 8011aa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011aa8 <__math_uflow+0x8>
 8011aa4:	f7ff bfe2 	b.w	8011a6c <xflow>
 8011aa8:	00000000 	.word	0x00000000
 8011aac:	10000000 	.word	0x10000000

08011ab0 <__math_oflow>:
 8011ab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011ab8 <__math_oflow+0x8>
 8011ab4:	f7ff bfda 	b.w	8011a6c <xflow>
 8011ab8:	00000000 	.word	0x00000000
 8011abc:	70000000 	.word	0x70000000

08011ac0 <__kernel_rem_pio2>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	ed2d 8b02 	vpush	{d8}
 8011ac8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011acc:	f112 0f14 	cmn.w	r2, #20
 8011ad0:	9306      	str	r3, [sp, #24]
 8011ad2:	9104      	str	r1, [sp, #16]
 8011ad4:	4bc2      	ldr	r3, [pc, #776]	@ (8011de0 <__kernel_rem_pio2+0x320>)
 8011ad6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011ad8:	9008      	str	r0, [sp, #32]
 8011ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	9b06      	ldr	r3, [sp, #24]
 8011ae2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011ae6:	bfa8      	it	ge
 8011ae8:	1ed4      	subge	r4, r2, #3
 8011aea:	9305      	str	r3, [sp, #20]
 8011aec:	bfb2      	itee	lt
 8011aee:	2400      	movlt	r4, #0
 8011af0:	2318      	movge	r3, #24
 8011af2:	fb94 f4f3 	sdivge	r4, r4, r3
 8011af6:	f06f 0317 	mvn.w	r3, #23
 8011afa:	fb04 3303 	mla	r3, r4, r3, r3
 8011afe:	eb03 0b02 	add.w	fp, r3, r2
 8011b02:	9b00      	ldr	r3, [sp, #0]
 8011b04:	9a05      	ldr	r2, [sp, #20]
 8011b06:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8011dd0 <__kernel_rem_pio2+0x310>
 8011b0a:	eb03 0802 	add.w	r8, r3, r2
 8011b0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011b10:	1aa7      	subs	r7, r4, r2
 8011b12:	ae20      	add	r6, sp, #128	@ 0x80
 8011b14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011b18:	2500      	movs	r5, #0
 8011b1a:	4545      	cmp	r5, r8
 8011b1c:	dd12      	ble.n	8011b44 <__kernel_rem_pio2+0x84>
 8011b1e:	9b06      	ldr	r3, [sp, #24]
 8011b20:	aa20      	add	r2, sp, #128	@ 0x80
 8011b22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011b26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011b2a:	2700      	movs	r7, #0
 8011b2c:	9b00      	ldr	r3, [sp, #0]
 8011b2e:	429f      	cmp	r7, r3
 8011b30:	dc2e      	bgt.n	8011b90 <__kernel_rem_pio2+0xd0>
 8011b32:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8011dd0 <__kernel_rem_pio2+0x310>
 8011b36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b3e:	46a8      	mov	r8, r5
 8011b40:	2600      	movs	r6, #0
 8011b42:	e01b      	b.n	8011b7c <__kernel_rem_pio2+0xbc>
 8011b44:	42ef      	cmn	r7, r5
 8011b46:	d407      	bmi.n	8011b58 <__kernel_rem_pio2+0x98>
 8011b48:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011b4c:	f7ee fd0a 	bl	8000564 <__aeabi_i2d>
 8011b50:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011b54:	3501      	adds	r5, #1
 8011b56:	e7e0      	b.n	8011b1a <__kernel_rem_pio2+0x5a>
 8011b58:	ec51 0b18 	vmov	r0, r1, d8
 8011b5c:	e7f8      	b.n	8011b50 <__kernel_rem_pio2+0x90>
 8011b5e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011b62:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011b66:	f7ee fd67 	bl	8000638 <__aeabi_dmul>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b72:	f7ee fbab 	bl	80002cc <__adddf3>
 8011b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b7a:	3601      	adds	r6, #1
 8011b7c:	9b05      	ldr	r3, [sp, #20]
 8011b7e:	429e      	cmp	r6, r3
 8011b80:	dded      	ble.n	8011b5e <__kernel_rem_pio2+0x9e>
 8011b82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b86:	3701      	adds	r7, #1
 8011b88:	ecaa 7b02 	vstmia	sl!, {d7}
 8011b8c:	3508      	adds	r5, #8
 8011b8e:	e7cd      	b.n	8011b2c <__kernel_rem_pio2+0x6c>
 8011b90:	9b00      	ldr	r3, [sp, #0]
 8011b92:	f8dd 8000 	ldr.w	r8, [sp]
 8011b96:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011ba0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ba6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011bac:	ab98      	add	r3, sp, #608	@ 0x260
 8011bae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011bb2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011bb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bba:	ac0c      	add	r4, sp, #48	@ 0x30
 8011bbc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011bbe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011bc2:	46a1      	mov	r9, r4
 8011bc4:	46c2      	mov	sl, r8
 8011bc6:	f1ba 0f00 	cmp.w	sl, #0
 8011bca:	dc77      	bgt.n	8011cbc <__kernel_rem_pio2+0x1fc>
 8011bcc:	4658      	mov	r0, fp
 8011bce:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011bd2:	f000 fd25 	bl	8012620 <scalbn>
 8011bd6:	ec57 6b10 	vmov	r6, r7, d0
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011be0:	4630      	mov	r0, r6
 8011be2:	4639      	mov	r1, r7
 8011be4:	f7ee fd28 	bl	8000638 <__aeabi_dmul>
 8011be8:	ec41 0b10 	vmov	d0, r0, r1
 8011bec:	f000 fd94 	bl	8012718 <floor>
 8011bf0:	4b7c      	ldr	r3, [pc, #496]	@ (8011de4 <__kernel_rem_pio2+0x324>)
 8011bf2:	ec51 0b10 	vmov	r0, r1, d0
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	f7ee fd1e 	bl	8000638 <__aeabi_dmul>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	460b      	mov	r3, r1
 8011c00:	4630      	mov	r0, r6
 8011c02:	4639      	mov	r1, r7
 8011c04:	f7ee fb60 	bl	80002c8 <__aeabi_dsub>
 8011c08:	460f      	mov	r7, r1
 8011c0a:	4606      	mov	r6, r0
 8011c0c:	f7ee ffc4 	bl	8000b98 <__aeabi_d2iz>
 8011c10:	9002      	str	r0, [sp, #8]
 8011c12:	f7ee fca7 	bl	8000564 <__aeabi_i2d>
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	4639      	mov	r1, r7
 8011c1e:	f7ee fb53 	bl	80002c8 <__aeabi_dsub>
 8011c22:	f1bb 0f00 	cmp.w	fp, #0
 8011c26:	4606      	mov	r6, r0
 8011c28:	460f      	mov	r7, r1
 8011c2a:	dd6c      	ble.n	8011d06 <__kernel_rem_pio2+0x246>
 8011c2c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011c30:	ab0c      	add	r3, sp, #48	@ 0x30
 8011c32:	9d02      	ldr	r5, [sp, #8]
 8011c34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c38:	f1cb 0018 	rsb	r0, fp, #24
 8011c3c:	fa43 f200 	asr.w	r2, r3, r0
 8011c40:	4415      	add	r5, r2
 8011c42:	4082      	lsls	r2, r0
 8011c44:	1a9b      	subs	r3, r3, r2
 8011c46:	aa0c      	add	r2, sp, #48	@ 0x30
 8011c48:	9502      	str	r5, [sp, #8]
 8011c4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011c4e:	f1cb 0217 	rsb	r2, fp, #23
 8011c52:	fa43 f902 	asr.w	r9, r3, r2
 8011c56:	f1b9 0f00 	cmp.w	r9, #0
 8011c5a:	dd64      	ble.n	8011d26 <__kernel_rem_pio2+0x266>
 8011c5c:	9b02      	ldr	r3, [sp, #8]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	3301      	adds	r3, #1
 8011c62:	9302      	str	r3, [sp, #8]
 8011c64:	4615      	mov	r5, r2
 8011c66:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011c6a:	4590      	cmp	r8, r2
 8011c6c:	f300 80a1 	bgt.w	8011db2 <__kernel_rem_pio2+0x2f2>
 8011c70:	f1bb 0f00 	cmp.w	fp, #0
 8011c74:	dd07      	ble.n	8011c86 <__kernel_rem_pio2+0x1c6>
 8011c76:	f1bb 0f01 	cmp.w	fp, #1
 8011c7a:	f000 80c1 	beq.w	8011e00 <__kernel_rem_pio2+0x340>
 8011c7e:	f1bb 0f02 	cmp.w	fp, #2
 8011c82:	f000 80c8 	beq.w	8011e16 <__kernel_rem_pio2+0x356>
 8011c86:	f1b9 0f02 	cmp.w	r9, #2
 8011c8a:	d14c      	bne.n	8011d26 <__kernel_rem_pio2+0x266>
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	463b      	mov	r3, r7
 8011c90:	4955      	ldr	r1, [pc, #340]	@ (8011de8 <__kernel_rem_pio2+0x328>)
 8011c92:	2000      	movs	r0, #0
 8011c94:	f7ee fb18 	bl	80002c8 <__aeabi_dsub>
 8011c98:	4606      	mov	r6, r0
 8011c9a:	460f      	mov	r7, r1
 8011c9c:	2d00      	cmp	r5, #0
 8011c9e:	d042      	beq.n	8011d26 <__kernel_rem_pio2+0x266>
 8011ca0:	4658      	mov	r0, fp
 8011ca2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8011dd8 <__kernel_rem_pio2+0x318>
 8011ca6:	f000 fcbb 	bl	8012620 <scalbn>
 8011caa:	4630      	mov	r0, r6
 8011cac:	4639      	mov	r1, r7
 8011cae:	ec53 2b10 	vmov	r2, r3, d0
 8011cb2:	f7ee fb09 	bl	80002c8 <__aeabi_dsub>
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	460f      	mov	r7, r1
 8011cba:	e034      	b.n	8011d26 <__kernel_rem_pio2+0x266>
 8011cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8011dec <__kernel_rem_pio2+0x32c>)
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cc4:	f7ee fcb8 	bl	8000638 <__aeabi_dmul>
 8011cc8:	f7ee ff66 	bl	8000b98 <__aeabi_d2iz>
 8011ccc:	f7ee fc4a 	bl	8000564 <__aeabi_i2d>
 8011cd0:	4b47      	ldr	r3, [pc, #284]	@ (8011df0 <__kernel_rem_pio2+0x330>)
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	f7ee fcae 	bl	8000638 <__aeabi_dmul>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ce4:	f7ee faf0 	bl	80002c8 <__aeabi_dsub>
 8011ce8:	f7ee ff56 	bl	8000b98 <__aeabi_d2iz>
 8011cec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011cf0:	f849 0b04 	str.w	r0, [r9], #4
 8011cf4:	4639      	mov	r1, r7
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f7ee fae8 	bl	80002cc <__adddf3>
 8011cfc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d04:	e75f      	b.n	8011bc6 <__kernel_rem_pio2+0x106>
 8011d06:	d107      	bne.n	8011d18 <__kernel_rem_pio2+0x258>
 8011d08:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011d0c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d12:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011d16:	e79e      	b.n	8011c56 <__kernel_rem_pio2+0x196>
 8011d18:	4b36      	ldr	r3, [pc, #216]	@ (8011df4 <__kernel_rem_pio2+0x334>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f7ee ff12 	bl	8000b44 <__aeabi_dcmpge>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d143      	bne.n	8011dac <__kernel_rem_pio2+0x2ec>
 8011d24:	4681      	mov	r9, r0
 8011d26:	2200      	movs	r2, #0
 8011d28:	2300      	movs	r3, #0
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	4639      	mov	r1, r7
 8011d2e:	f7ee feeb 	bl	8000b08 <__aeabi_dcmpeq>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	f000 80c1 	beq.w	8011eba <__kernel_rem_pio2+0x3fa>
 8011d38:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	9900      	ldr	r1, [sp, #0]
 8011d40:	428b      	cmp	r3, r1
 8011d42:	da70      	bge.n	8011e26 <__kernel_rem_pio2+0x366>
 8011d44:	2a00      	cmp	r2, #0
 8011d46:	f000 808b 	beq.w	8011e60 <__kernel_rem_pio2+0x3a0>
 8011d4a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011d4e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d50:	f1ab 0b18 	sub.w	fp, fp, #24
 8011d54:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0f6      	beq.n	8011d4a <__kernel_rem_pio2+0x28a>
 8011d5c:	4658      	mov	r0, fp
 8011d5e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8011dd8 <__kernel_rem_pio2+0x318>
 8011d62:	f000 fc5d 	bl	8012620 <scalbn>
 8011d66:	f108 0301 	add.w	r3, r8, #1
 8011d6a:	00da      	lsls	r2, r3, #3
 8011d6c:	9205      	str	r2, [sp, #20]
 8011d6e:	ec55 4b10 	vmov	r4, r5, d0
 8011d72:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011d74:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8011dec <__kernel_rem_pio2+0x32c>
 8011d78:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011d7c:	4646      	mov	r6, r8
 8011d7e:	f04f 0a00 	mov.w	sl, #0
 8011d82:	2e00      	cmp	r6, #0
 8011d84:	f280 80d1 	bge.w	8011f2a <__kernel_rem_pio2+0x46a>
 8011d88:	4644      	mov	r4, r8
 8011d8a:	2c00      	cmp	r4, #0
 8011d8c:	f2c0 80ff 	blt.w	8011f8e <__kernel_rem_pio2+0x4ce>
 8011d90:	4b19      	ldr	r3, [pc, #100]	@ (8011df8 <__kernel_rem_pio2+0x338>)
 8011d92:	461f      	mov	r7, r3
 8011d94:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011d96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d9a:	9306      	str	r3, [sp, #24]
 8011d9c:	f04f 0a00 	mov.w	sl, #0
 8011da0:	f04f 0b00 	mov.w	fp, #0
 8011da4:	2600      	movs	r6, #0
 8011da6:	eba8 0504 	sub.w	r5, r8, r4
 8011daa:	e0e4      	b.n	8011f76 <__kernel_rem_pio2+0x4b6>
 8011dac:	f04f 0902 	mov.w	r9, #2
 8011db0:	e754      	b.n	8011c5c <__kernel_rem_pio2+0x19c>
 8011db2:	f854 3b04 	ldr.w	r3, [r4], #4
 8011db6:	bb0d      	cbnz	r5, 8011dfc <__kernel_rem_pio2+0x33c>
 8011db8:	b123      	cbz	r3, 8011dc4 <__kernel_rem_pio2+0x304>
 8011dba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011dbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	3201      	adds	r2, #1
 8011dc6:	461d      	mov	r5, r3
 8011dc8:	e74f      	b.n	8011c6a <__kernel_rem_pio2+0x1aa>
 8011dca:	bf00      	nop
 8011dcc:	f3af 8000 	nop.w
	...
 8011ddc:	3ff00000 	.word	0x3ff00000
 8011de0:	08012df8 	.word	0x08012df8
 8011de4:	40200000 	.word	0x40200000
 8011de8:	3ff00000 	.word	0x3ff00000
 8011dec:	3e700000 	.word	0x3e700000
 8011df0:	41700000 	.word	0x41700000
 8011df4:	3fe00000 	.word	0x3fe00000
 8011df8:	08012db8 	.word	0x08012db8
 8011dfc:	1acb      	subs	r3, r1, r3
 8011dfe:	e7de      	b.n	8011dbe <__kernel_rem_pio2+0x2fe>
 8011e00:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011e04:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011e0e:	a90c      	add	r1, sp, #48	@ 0x30
 8011e10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011e14:	e737      	b.n	8011c86 <__kernel_rem_pio2+0x1c6>
 8011e16:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011e1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011e24:	e7f3      	b.n	8011e0e <__kernel_rem_pio2+0x34e>
 8011e26:	a90c      	add	r1, sp, #48	@ 0x30
 8011e28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	430a      	orrs	r2, r1
 8011e30:	e785      	b.n	8011d3e <__kernel_rem_pio2+0x27e>
 8011e32:	3401      	adds	r4, #1
 8011e34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011e38:	2a00      	cmp	r2, #0
 8011e3a:	d0fa      	beq.n	8011e32 <__kernel_rem_pio2+0x372>
 8011e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011e42:	eb0d 0503 	add.w	r5, sp, r3
 8011e46:	9b06      	ldr	r3, [sp, #24]
 8011e48:	aa20      	add	r2, sp, #128	@ 0x80
 8011e4a:	4443      	add	r3, r8
 8011e4c:	f108 0701 	add.w	r7, r8, #1
 8011e50:	3d98      	subs	r5, #152	@ 0x98
 8011e52:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011e56:	4444      	add	r4, r8
 8011e58:	42bc      	cmp	r4, r7
 8011e5a:	da04      	bge.n	8011e66 <__kernel_rem_pio2+0x3a6>
 8011e5c:	46a0      	mov	r8, r4
 8011e5e:	e6a2      	b.n	8011ba6 <__kernel_rem_pio2+0xe6>
 8011e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e62:	2401      	movs	r4, #1
 8011e64:	e7e6      	b.n	8011e34 <__kernel_rem_pio2+0x374>
 8011e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e68:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011e6c:	f7ee fb7a 	bl	8000564 <__aeabi_i2d>
 8011e70:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8012130 <__kernel_rem_pio2+0x670>
 8011e74:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011e78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e80:	46b2      	mov	sl, r6
 8011e82:	f04f 0800 	mov.w	r8, #0
 8011e86:	9b05      	ldr	r3, [sp, #20]
 8011e88:	4598      	cmp	r8, r3
 8011e8a:	dd05      	ble.n	8011e98 <__kernel_rem_pio2+0x3d8>
 8011e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e90:	3701      	adds	r7, #1
 8011e92:	eca5 7b02 	vstmia	r5!, {d7}
 8011e96:	e7df      	b.n	8011e58 <__kernel_rem_pio2+0x398>
 8011e98:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011e9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011ea0:	f7ee fbca 	bl	8000638 <__aeabi_dmul>
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eac:	f7ee fa0e 	bl	80002cc <__adddf3>
 8011eb0:	f108 0801 	add.w	r8, r8, #1
 8011eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011eb8:	e7e5      	b.n	8011e86 <__kernel_rem_pio2+0x3c6>
 8011eba:	f1cb 0000 	rsb	r0, fp, #0
 8011ebe:	ec47 6b10 	vmov	d0, r6, r7
 8011ec2:	f000 fbad 	bl	8012620 <scalbn>
 8011ec6:	ec55 4b10 	vmov	r4, r5, d0
 8011eca:	4b9b      	ldr	r3, [pc, #620]	@ (8012138 <__kernel_rem_pio2+0x678>)
 8011ecc:	2200      	movs	r2, #0
 8011ece:	4620      	mov	r0, r4
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	f7ee fe37 	bl	8000b44 <__aeabi_dcmpge>
 8011ed6:	b300      	cbz	r0, 8011f1a <__kernel_rem_pio2+0x45a>
 8011ed8:	4b98      	ldr	r3, [pc, #608]	@ (801213c <__kernel_rem_pio2+0x67c>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	4620      	mov	r0, r4
 8011ede:	4629      	mov	r1, r5
 8011ee0:	f7ee fbaa 	bl	8000638 <__aeabi_dmul>
 8011ee4:	f7ee fe58 	bl	8000b98 <__aeabi_d2iz>
 8011ee8:	4606      	mov	r6, r0
 8011eea:	f7ee fb3b 	bl	8000564 <__aeabi_i2d>
 8011eee:	4b92      	ldr	r3, [pc, #584]	@ (8012138 <__kernel_rem_pio2+0x678>)
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f7ee fba1 	bl	8000638 <__aeabi_dmul>
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	4602      	mov	r2, r0
 8011efa:	4629      	mov	r1, r5
 8011efc:	4620      	mov	r0, r4
 8011efe:	f7ee f9e3 	bl	80002c8 <__aeabi_dsub>
 8011f02:	f7ee fe49 	bl	8000b98 <__aeabi_d2iz>
 8011f06:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f08:	f10b 0b18 	add.w	fp, fp, #24
 8011f0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011f10:	f108 0801 	add.w	r8, r8, #1
 8011f14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011f18:	e720      	b.n	8011d5c <__kernel_rem_pio2+0x29c>
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	f7ee fe3b 	bl	8000b98 <__aeabi_d2iz>
 8011f22:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011f28:	e718      	b.n	8011d5c <__kernel_rem_pio2+0x29c>
 8011f2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011f30:	f7ee fb18 	bl	8000564 <__aeabi_i2d>
 8011f34:	4622      	mov	r2, r4
 8011f36:	462b      	mov	r3, r5
 8011f38:	f7ee fb7e 	bl	8000638 <__aeabi_dmul>
 8011f3c:	4652      	mov	r2, sl
 8011f3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011f42:	465b      	mov	r3, fp
 8011f44:	4620      	mov	r0, r4
 8011f46:	4629      	mov	r1, r5
 8011f48:	f7ee fb76 	bl	8000638 <__aeabi_dmul>
 8011f4c:	3e01      	subs	r6, #1
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460d      	mov	r5, r1
 8011f52:	e716      	b.n	8011d82 <__kernel_rem_pio2+0x2c2>
 8011f54:	9906      	ldr	r1, [sp, #24]
 8011f56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011f5a:	9106      	str	r1, [sp, #24]
 8011f5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011f60:	f7ee fb6a 	bl	8000638 <__aeabi_dmul>
 8011f64:	4602      	mov	r2, r0
 8011f66:	460b      	mov	r3, r1
 8011f68:	4650      	mov	r0, sl
 8011f6a:	4659      	mov	r1, fp
 8011f6c:	f7ee f9ae 	bl	80002cc <__adddf3>
 8011f70:	3601      	adds	r6, #1
 8011f72:	4682      	mov	sl, r0
 8011f74:	468b      	mov	fp, r1
 8011f76:	9b00      	ldr	r3, [sp, #0]
 8011f78:	429e      	cmp	r6, r3
 8011f7a:	dc01      	bgt.n	8011f80 <__kernel_rem_pio2+0x4c0>
 8011f7c:	42ae      	cmp	r6, r5
 8011f7e:	dde9      	ble.n	8011f54 <__kernel_rem_pio2+0x494>
 8011f80:	ab48      	add	r3, sp, #288	@ 0x120
 8011f82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011f86:	e9c5 ab00 	strd	sl, fp, [r5]
 8011f8a:	3c01      	subs	r4, #1
 8011f8c:	e6fd      	b.n	8011d8a <__kernel_rem_pio2+0x2ca>
 8011f8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011f90:	2b02      	cmp	r3, #2
 8011f92:	dc0b      	bgt.n	8011fac <__kernel_rem_pio2+0x4ec>
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	dc35      	bgt.n	8012004 <__kernel_rem_pio2+0x544>
 8011f98:	d059      	beq.n	801204e <__kernel_rem_pio2+0x58e>
 8011f9a:	9b02      	ldr	r3, [sp, #8]
 8011f9c:	f003 0007 	and.w	r0, r3, #7
 8011fa0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011fa4:	ecbd 8b02 	vpop	{d8}
 8011fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	d1f3      	bne.n	8011f9a <__kernel_rem_pio2+0x4da>
 8011fb2:	9b05      	ldr	r3, [sp, #20]
 8011fb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011fb8:	eb0d 0403 	add.w	r4, sp, r3
 8011fbc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011fc0:	4625      	mov	r5, r4
 8011fc2:	46c2      	mov	sl, r8
 8011fc4:	f1ba 0f00 	cmp.w	sl, #0
 8011fc8:	dc69      	bgt.n	801209e <__kernel_rem_pio2+0x5de>
 8011fca:	4645      	mov	r5, r8
 8011fcc:	2d01      	cmp	r5, #1
 8011fce:	f300 8087 	bgt.w	80120e0 <__kernel_rem_pio2+0x620>
 8011fd2:	9c05      	ldr	r4, [sp, #20]
 8011fd4:	ab48      	add	r3, sp, #288	@ 0x120
 8011fd6:	441c      	add	r4, r3
 8011fd8:	2000      	movs	r0, #0
 8011fda:	2100      	movs	r1, #0
 8011fdc:	f1b8 0f01 	cmp.w	r8, #1
 8011fe0:	f300 809c 	bgt.w	801211c <__kernel_rem_pio2+0x65c>
 8011fe4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8011fe8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8011fec:	f1b9 0f00 	cmp.w	r9, #0
 8011ff0:	f040 80a6 	bne.w	8012140 <__kernel_rem_pio2+0x680>
 8011ff4:	9b04      	ldr	r3, [sp, #16]
 8011ff6:	e9c3 5600 	strd	r5, r6, [r3]
 8011ffa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011ffe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012002:	e7ca      	b.n	8011f9a <__kernel_rem_pio2+0x4da>
 8012004:	9d05      	ldr	r5, [sp, #20]
 8012006:	ab48      	add	r3, sp, #288	@ 0x120
 8012008:	441d      	add	r5, r3
 801200a:	4644      	mov	r4, r8
 801200c:	2000      	movs	r0, #0
 801200e:	2100      	movs	r1, #0
 8012010:	2c00      	cmp	r4, #0
 8012012:	da35      	bge.n	8012080 <__kernel_rem_pio2+0x5c0>
 8012014:	f1b9 0f00 	cmp.w	r9, #0
 8012018:	d038      	beq.n	801208c <__kernel_rem_pio2+0x5cc>
 801201a:	4602      	mov	r2, r0
 801201c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012020:	9c04      	ldr	r4, [sp, #16]
 8012022:	e9c4 2300 	strd	r2, r3, [r4]
 8012026:	4602      	mov	r2, r0
 8012028:	460b      	mov	r3, r1
 801202a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801202e:	f7ee f94b 	bl	80002c8 <__aeabi_dsub>
 8012032:	ad4a      	add	r5, sp, #296	@ 0x128
 8012034:	2401      	movs	r4, #1
 8012036:	45a0      	cmp	r8, r4
 8012038:	da2b      	bge.n	8012092 <__kernel_rem_pio2+0x5d2>
 801203a:	f1b9 0f00 	cmp.w	r9, #0
 801203e:	d002      	beq.n	8012046 <__kernel_rem_pio2+0x586>
 8012040:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012044:	4619      	mov	r1, r3
 8012046:	9b04      	ldr	r3, [sp, #16]
 8012048:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801204c:	e7a5      	b.n	8011f9a <__kernel_rem_pio2+0x4da>
 801204e:	9c05      	ldr	r4, [sp, #20]
 8012050:	ab48      	add	r3, sp, #288	@ 0x120
 8012052:	441c      	add	r4, r3
 8012054:	2000      	movs	r0, #0
 8012056:	2100      	movs	r1, #0
 8012058:	f1b8 0f00 	cmp.w	r8, #0
 801205c:	da09      	bge.n	8012072 <__kernel_rem_pio2+0x5b2>
 801205e:	f1b9 0f00 	cmp.w	r9, #0
 8012062:	d002      	beq.n	801206a <__kernel_rem_pio2+0x5aa>
 8012064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012068:	4619      	mov	r1, r3
 801206a:	9b04      	ldr	r3, [sp, #16]
 801206c:	e9c3 0100 	strd	r0, r1, [r3]
 8012070:	e793      	b.n	8011f9a <__kernel_rem_pio2+0x4da>
 8012072:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012076:	f7ee f929 	bl	80002cc <__adddf3>
 801207a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801207e:	e7eb      	b.n	8012058 <__kernel_rem_pio2+0x598>
 8012080:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012084:	f7ee f922 	bl	80002cc <__adddf3>
 8012088:	3c01      	subs	r4, #1
 801208a:	e7c1      	b.n	8012010 <__kernel_rem_pio2+0x550>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	e7c6      	b.n	8012020 <__kernel_rem_pio2+0x560>
 8012092:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012096:	f7ee f919 	bl	80002cc <__adddf3>
 801209a:	3401      	adds	r4, #1
 801209c:	e7cb      	b.n	8012036 <__kernel_rem_pio2+0x576>
 801209e:	ed35 7b02 	vldmdb	r5!, {d7}
 80120a2:	ed8d 7b00 	vstr	d7, [sp]
 80120a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80120aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120ae:	ec53 2b17 	vmov	r2, r3, d7
 80120b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120b6:	f7ee f909 	bl	80002cc <__adddf3>
 80120ba:	4602      	mov	r2, r0
 80120bc:	460b      	mov	r3, r1
 80120be:	4606      	mov	r6, r0
 80120c0:	460f      	mov	r7, r1
 80120c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120c6:	f7ee f8ff 	bl	80002c8 <__aeabi_dsub>
 80120ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80120ce:	f7ee f8fd 	bl	80002cc <__adddf3>
 80120d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80120d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80120da:	e9c5 6700 	strd	r6, r7, [r5]
 80120de:	e771      	b.n	8011fc4 <__kernel_rem_pio2+0x504>
 80120e0:	ed34 7b02 	vldmdb	r4!, {d7}
 80120e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80120e8:	ec51 0b17 	vmov	r0, r1, d7
 80120ec:	4652      	mov	r2, sl
 80120ee:	465b      	mov	r3, fp
 80120f0:	ed8d 7b00 	vstr	d7, [sp]
 80120f4:	f7ee f8ea 	bl	80002cc <__adddf3>
 80120f8:	4602      	mov	r2, r0
 80120fa:	460b      	mov	r3, r1
 80120fc:	4606      	mov	r6, r0
 80120fe:	460f      	mov	r7, r1
 8012100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012104:	f7ee f8e0 	bl	80002c8 <__aeabi_dsub>
 8012108:	4652      	mov	r2, sl
 801210a:	465b      	mov	r3, fp
 801210c:	f7ee f8de 	bl	80002cc <__adddf3>
 8012110:	3d01      	subs	r5, #1
 8012112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012116:	e9c4 6700 	strd	r6, r7, [r4]
 801211a:	e757      	b.n	8011fcc <__kernel_rem_pio2+0x50c>
 801211c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012120:	f7ee f8d4 	bl	80002cc <__adddf3>
 8012124:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012128:	e758      	b.n	8011fdc <__kernel_rem_pio2+0x51c>
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w
	...
 8012138:	41700000 	.word	0x41700000
 801213c:	3e700000 	.word	0x3e700000
 8012140:	9b04      	ldr	r3, [sp, #16]
 8012142:	9a04      	ldr	r2, [sp, #16]
 8012144:	601d      	str	r5, [r3, #0]
 8012146:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801214a:	605c      	str	r4, [r3, #4]
 801214c:	609f      	str	r7, [r3, #8]
 801214e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8012152:	60d3      	str	r3, [r2, #12]
 8012154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012158:	6110      	str	r0, [r2, #16]
 801215a:	6153      	str	r3, [r2, #20]
 801215c:	e71d      	b.n	8011f9a <__kernel_rem_pio2+0x4da>
 801215e:	bf00      	nop

08012160 <__kernel_cos>:
 8012160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012164:	ec57 6b10 	vmov	r6, r7, d0
 8012168:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801216c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012170:	ed8d 1b00 	vstr	d1, [sp]
 8012174:	d206      	bcs.n	8012184 <__kernel_cos+0x24>
 8012176:	4630      	mov	r0, r6
 8012178:	4639      	mov	r1, r7
 801217a:	f7ee fd0d 	bl	8000b98 <__aeabi_d2iz>
 801217e:	2800      	cmp	r0, #0
 8012180:	f000 8088 	beq.w	8012294 <__kernel_cos+0x134>
 8012184:	4632      	mov	r2, r6
 8012186:	463b      	mov	r3, r7
 8012188:	4630      	mov	r0, r6
 801218a:	4639      	mov	r1, r7
 801218c:	f7ee fa54 	bl	8000638 <__aeabi_dmul>
 8012190:	4b51      	ldr	r3, [pc, #324]	@ (80122d8 <__kernel_cos+0x178>)
 8012192:	2200      	movs	r2, #0
 8012194:	4604      	mov	r4, r0
 8012196:	460d      	mov	r5, r1
 8012198:	f7ee fa4e 	bl	8000638 <__aeabi_dmul>
 801219c:	a340      	add	r3, pc, #256	@ (adr r3, 80122a0 <__kernel_cos+0x140>)
 801219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a2:	4682      	mov	sl, r0
 80121a4:	468b      	mov	fp, r1
 80121a6:	4620      	mov	r0, r4
 80121a8:	4629      	mov	r1, r5
 80121aa:	f7ee fa45 	bl	8000638 <__aeabi_dmul>
 80121ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80122a8 <__kernel_cos+0x148>)
 80121b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b4:	f7ee f88a 	bl	80002cc <__adddf3>
 80121b8:	4622      	mov	r2, r4
 80121ba:	462b      	mov	r3, r5
 80121bc:	f7ee fa3c 	bl	8000638 <__aeabi_dmul>
 80121c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80122b0 <__kernel_cos+0x150>)
 80121c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c6:	f7ee f87f 	bl	80002c8 <__aeabi_dsub>
 80121ca:	4622      	mov	r2, r4
 80121cc:	462b      	mov	r3, r5
 80121ce:	f7ee fa33 	bl	8000638 <__aeabi_dmul>
 80121d2:	a339      	add	r3, pc, #228	@ (adr r3, 80122b8 <__kernel_cos+0x158>)
 80121d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d8:	f7ee f878 	bl	80002cc <__adddf3>
 80121dc:	4622      	mov	r2, r4
 80121de:	462b      	mov	r3, r5
 80121e0:	f7ee fa2a 	bl	8000638 <__aeabi_dmul>
 80121e4:	a336      	add	r3, pc, #216	@ (adr r3, 80122c0 <__kernel_cos+0x160>)
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	f7ee f86d 	bl	80002c8 <__aeabi_dsub>
 80121ee:	4622      	mov	r2, r4
 80121f0:	462b      	mov	r3, r5
 80121f2:	f7ee fa21 	bl	8000638 <__aeabi_dmul>
 80121f6:	a334      	add	r3, pc, #208	@ (adr r3, 80122c8 <__kernel_cos+0x168>)
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	f7ee f866 	bl	80002cc <__adddf3>
 8012200:	4622      	mov	r2, r4
 8012202:	462b      	mov	r3, r5
 8012204:	f7ee fa18 	bl	8000638 <__aeabi_dmul>
 8012208:	4622      	mov	r2, r4
 801220a:	462b      	mov	r3, r5
 801220c:	f7ee fa14 	bl	8000638 <__aeabi_dmul>
 8012210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012214:	4604      	mov	r4, r0
 8012216:	460d      	mov	r5, r1
 8012218:	4630      	mov	r0, r6
 801221a:	4639      	mov	r1, r7
 801221c:	f7ee fa0c 	bl	8000638 <__aeabi_dmul>
 8012220:	460b      	mov	r3, r1
 8012222:	4602      	mov	r2, r0
 8012224:	4629      	mov	r1, r5
 8012226:	4620      	mov	r0, r4
 8012228:	f7ee f84e 	bl	80002c8 <__aeabi_dsub>
 801222c:	4b2b      	ldr	r3, [pc, #172]	@ (80122dc <__kernel_cos+0x17c>)
 801222e:	4598      	cmp	r8, r3
 8012230:	4606      	mov	r6, r0
 8012232:	460f      	mov	r7, r1
 8012234:	d810      	bhi.n	8012258 <__kernel_cos+0xf8>
 8012236:	4602      	mov	r2, r0
 8012238:	460b      	mov	r3, r1
 801223a:	4650      	mov	r0, sl
 801223c:	4659      	mov	r1, fp
 801223e:	f7ee f843 	bl	80002c8 <__aeabi_dsub>
 8012242:	460b      	mov	r3, r1
 8012244:	4926      	ldr	r1, [pc, #152]	@ (80122e0 <__kernel_cos+0x180>)
 8012246:	4602      	mov	r2, r0
 8012248:	2000      	movs	r0, #0
 801224a:	f7ee f83d 	bl	80002c8 <__aeabi_dsub>
 801224e:	ec41 0b10 	vmov	d0, r0, r1
 8012252:	b003      	add	sp, #12
 8012254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012258:	4b22      	ldr	r3, [pc, #136]	@ (80122e4 <__kernel_cos+0x184>)
 801225a:	4921      	ldr	r1, [pc, #132]	@ (80122e0 <__kernel_cos+0x180>)
 801225c:	4598      	cmp	r8, r3
 801225e:	bf8c      	ite	hi
 8012260:	4d21      	ldrhi	r5, [pc, #132]	@ (80122e8 <__kernel_cos+0x188>)
 8012262:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012266:	2400      	movs	r4, #0
 8012268:	4622      	mov	r2, r4
 801226a:	462b      	mov	r3, r5
 801226c:	2000      	movs	r0, #0
 801226e:	f7ee f82b 	bl	80002c8 <__aeabi_dsub>
 8012272:	4622      	mov	r2, r4
 8012274:	4680      	mov	r8, r0
 8012276:	4689      	mov	r9, r1
 8012278:	462b      	mov	r3, r5
 801227a:	4650      	mov	r0, sl
 801227c:	4659      	mov	r1, fp
 801227e:	f7ee f823 	bl	80002c8 <__aeabi_dsub>
 8012282:	4632      	mov	r2, r6
 8012284:	463b      	mov	r3, r7
 8012286:	f7ee f81f 	bl	80002c8 <__aeabi_dsub>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	4640      	mov	r0, r8
 8012290:	4649      	mov	r1, r9
 8012292:	e7da      	b.n	801224a <__kernel_cos+0xea>
 8012294:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80122d0 <__kernel_cos+0x170>
 8012298:	e7db      	b.n	8012252 <__kernel_cos+0xf2>
 801229a:	bf00      	nop
 801229c:	f3af 8000 	nop.w
 80122a0:	be8838d4 	.word	0xbe8838d4
 80122a4:	bda8fae9 	.word	0xbda8fae9
 80122a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80122ac:	3e21ee9e 	.word	0x3e21ee9e
 80122b0:	809c52ad 	.word	0x809c52ad
 80122b4:	3e927e4f 	.word	0x3e927e4f
 80122b8:	19cb1590 	.word	0x19cb1590
 80122bc:	3efa01a0 	.word	0x3efa01a0
 80122c0:	16c15177 	.word	0x16c15177
 80122c4:	3f56c16c 	.word	0x3f56c16c
 80122c8:	5555554c 	.word	0x5555554c
 80122cc:	3fa55555 	.word	0x3fa55555
 80122d0:	00000000 	.word	0x00000000
 80122d4:	3ff00000 	.word	0x3ff00000
 80122d8:	3fe00000 	.word	0x3fe00000
 80122dc:	3fd33332 	.word	0x3fd33332
 80122e0:	3ff00000 	.word	0x3ff00000
 80122e4:	3fe90000 	.word	0x3fe90000
 80122e8:	3fd20000 	.word	0x3fd20000
 80122ec:	00000000 	.word	0x00000000

080122f0 <__kernel_sin>:
 80122f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f4:	ec55 4b10 	vmov	r4, r5, d0
 80122f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80122fc:	b085      	sub	sp, #20
 80122fe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012302:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012306:	4680      	mov	r8, r0
 8012308:	d205      	bcs.n	8012316 <__kernel_sin+0x26>
 801230a:	4620      	mov	r0, r4
 801230c:	4629      	mov	r1, r5
 801230e:	f7ee fc43 	bl	8000b98 <__aeabi_d2iz>
 8012312:	2800      	cmp	r0, #0
 8012314:	d052      	beq.n	80123bc <__kernel_sin+0xcc>
 8012316:	4622      	mov	r2, r4
 8012318:	462b      	mov	r3, r5
 801231a:	4620      	mov	r0, r4
 801231c:	4629      	mov	r1, r5
 801231e:	f7ee f98b 	bl	8000638 <__aeabi_dmul>
 8012322:	4682      	mov	sl, r0
 8012324:	468b      	mov	fp, r1
 8012326:	4602      	mov	r2, r0
 8012328:	460b      	mov	r3, r1
 801232a:	4620      	mov	r0, r4
 801232c:	4629      	mov	r1, r5
 801232e:	f7ee f983 	bl	8000638 <__aeabi_dmul>
 8012332:	a342      	add	r3, pc, #264	@ (adr r3, 801243c <__kernel_sin+0x14c>)
 8012334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012338:	e9cd 0100 	strd	r0, r1, [sp]
 801233c:	4650      	mov	r0, sl
 801233e:	4659      	mov	r1, fp
 8012340:	f7ee f97a 	bl	8000638 <__aeabi_dmul>
 8012344:	a33f      	add	r3, pc, #252	@ (adr r3, 8012444 <__kernel_sin+0x154>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	f7ed ffbd 	bl	80002c8 <__aeabi_dsub>
 801234e:	4652      	mov	r2, sl
 8012350:	465b      	mov	r3, fp
 8012352:	f7ee f971 	bl	8000638 <__aeabi_dmul>
 8012356:	a33d      	add	r3, pc, #244	@ (adr r3, 801244c <__kernel_sin+0x15c>)
 8012358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235c:	f7ed ffb6 	bl	80002cc <__adddf3>
 8012360:	4652      	mov	r2, sl
 8012362:	465b      	mov	r3, fp
 8012364:	f7ee f968 	bl	8000638 <__aeabi_dmul>
 8012368:	a33a      	add	r3, pc, #232	@ (adr r3, 8012454 <__kernel_sin+0x164>)
 801236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236e:	f7ed ffab 	bl	80002c8 <__aeabi_dsub>
 8012372:	4652      	mov	r2, sl
 8012374:	465b      	mov	r3, fp
 8012376:	f7ee f95f 	bl	8000638 <__aeabi_dmul>
 801237a:	a338      	add	r3, pc, #224	@ (adr r3, 801245c <__kernel_sin+0x16c>)
 801237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012380:	f7ed ffa4 	bl	80002cc <__adddf3>
 8012384:	4606      	mov	r6, r0
 8012386:	460f      	mov	r7, r1
 8012388:	f1b8 0f00 	cmp.w	r8, #0
 801238c:	d11b      	bne.n	80123c6 <__kernel_sin+0xd6>
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4650      	mov	r0, sl
 8012394:	4659      	mov	r1, fp
 8012396:	f7ee f94f 	bl	8000638 <__aeabi_dmul>
 801239a:	a325      	add	r3, pc, #148	@ (adr r3, 8012430 <__kernel_sin+0x140>)
 801239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a0:	f7ed ff92 	bl	80002c8 <__aeabi_dsub>
 80123a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123a8:	f7ee f946 	bl	8000638 <__aeabi_dmul>
 80123ac:	4602      	mov	r2, r0
 80123ae:	460b      	mov	r3, r1
 80123b0:	4620      	mov	r0, r4
 80123b2:	4629      	mov	r1, r5
 80123b4:	f7ed ff8a 	bl	80002cc <__adddf3>
 80123b8:	4604      	mov	r4, r0
 80123ba:	460d      	mov	r5, r1
 80123bc:	ec45 4b10 	vmov	d0, r4, r5
 80123c0:	b005      	add	sp, #20
 80123c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123ca:	4b1b      	ldr	r3, [pc, #108]	@ (8012438 <__kernel_sin+0x148>)
 80123cc:	2200      	movs	r2, #0
 80123ce:	f7ee f933 	bl	8000638 <__aeabi_dmul>
 80123d2:	4632      	mov	r2, r6
 80123d4:	4680      	mov	r8, r0
 80123d6:	4689      	mov	r9, r1
 80123d8:	463b      	mov	r3, r7
 80123da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123de:	f7ee f92b 	bl	8000638 <__aeabi_dmul>
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	4640      	mov	r0, r8
 80123e8:	4649      	mov	r1, r9
 80123ea:	f7ed ff6d 	bl	80002c8 <__aeabi_dsub>
 80123ee:	4652      	mov	r2, sl
 80123f0:	465b      	mov	r3, fp
 80123f2:	f7ee f921 	bl	8000638 <__aeabi_dmul>
 80123f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123fa:	f7ed ff65 	bl	80002c8 <__aeabi_dsub>
 80123fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8012430 <__kernel_sin+0x140>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	4606      	mov	r6, r0
 8012406:	460f      	mov	r7, r1
 8012408:	e9dd 0100 	ldrd	r0, r1, [sp]
 801240c:	f7ee f914 	bl	8000638 <__aeabi_dmul>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4630      	mov	r0, r6
 8012416:	4639      	mov	r1, r7
 8012418:	f7ed ff58 	bl	80002cc <__adddf3>
 801241c:	4602      	mov	r2, r0
 801241e:	460b      	mov	r3, r1
 8012420:	4620      	mov	r0, r4
 8012422:	4629      	mov	r1, r5
 8012424:	f7ed ff50 	bl	80002c8 <__aeabi_dsub>
 8012428:	e7c6      	b.n	80123b8 <__kernel_sin+0xc8>
 801242a:	bf00      	nop
 801242c:	f3af 8000 	nop.w
 8012430:	55555549 	.word	0x55555549
 8012434:	3fc55555 	.word	0x3fc55555
 8012438:	3fe00000 	.word	0x3fe00000
 801243c:	5acfd57c 	.word	0x5acfd57c
 8012440:	3de5d93a 	.word	0x3de5d93a
 8012444:	8a2b9ceb 	.word	0x8a2b9ceb
 8012448:	3e5ae5e6 	.word	0x3e5ae5e6
 801244c:	57b1fe7d 	.word	0x57b1fe7d
 8012450:	3ec71de3 	.word	0x3ec71de3
 8012454:	19c161d5 	.word	0x19c161d5
 8012458:	3f2a01a0 	.word	0x3f2a01a0
 801245c:	1110f8a6 	.word	0x1110f8a6
 8012460:	3f811111 	.word	0x3f811111

08012464 <atanf>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	ee10 5a10 	vmov	r5, s0
 801246a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801246e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012472:	eef0 7a40 	vmov.f32	s15, s0
 8012476:	d310      	bcc.n	801249a <atanf+0x36>
 8012478:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801247c:	d904      	bls.n	8012488 <atanf+0x24>
 801247e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012482:	eeb0 0a67 	vmov.f32	s0, s15
 8012486:	bd38      	pop	{r3, r4, r5, pc}
 8012488:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80125c0 <atanf+0x15c>
 801248c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80125c4 <atanf+0x160>
 8012490:	2d00      	cmp	r5, #0
 8012492:	bfc8      	it	gt
 8012494:	eef0 7a47 	vmovgt.f32	s15, s14
 8012498:	e7f3      	b.n	8012482 <atanf+0x1e>
 801249a:	4b4b      	ldr	r3, [pc, #300]	@ (80125c8 <atanf+0x164>)
 801249c:	429c      	cmp	r4, r3
 801249e:	d810      	bhi.n	80124c2 <atanf+0x5e>
 80124a0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80124a4:	d20a      	bcs.n	80124bc <atanf+0x58>
 80124a6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80125cc <atanf+0x168>
 80124aa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80124ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80124b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80124b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ba:	dce2      	bgt.n	8012482 <atanf+0x1e>
 80124bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124c0:	e013      	b.n	80124ea <atanf+0x86>
 80124c2:	f7fd ff17 	bl	80102f4 <fabsf>
 80124c6:	4b42      	ldr	r3, [pc, #264]	@ (80125d0 <atanf+0x16c>)
 80124c8:	429c      	cmp	r4, r3
 80124ca:	d84f      	bhi.n	801256c <atanf+0x108>
 80124cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80124d0:	429c      	cmp	r4, r3
 80124d2:	d841      	bhi.n	8012558 <atanf+0xf4>
 80124d4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80124d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80124dc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80124e0:	2300      	movs	r3, #0
 80124e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124ea:	1c5a      	adds	r2, r3, #1
 80124ec:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80124f0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80125d4 <atanf+0x170>
 80124f4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80125d8 <atanf+0x174>
 80124f8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80125dc <atanf+0x178>
 80124fc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012500:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012504:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80125e0 <atanf+0x17c>
 8012508:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801250c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80125e4 <atanf+0x180>
 8012510:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012514:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80125e8 <atanf+0x184>
 8012518:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801251c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80125ec <atanf+0x188>
 8012520:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012524:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80125f0 <atanf+0x18c>
 8012528:	eea6 5a87 	vfma.f32	s10, s13, s14
 801252c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80125f4 <atanf+0x190>
 8012530:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012534:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80125f8 <atanf+0x194>
 8012538:	eea7 5a26 	vfma.f32	s10, s14, s13
 801253c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80125fc <atanf+0x198>
 8012540:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012544:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012548:	eea5 7a86 	vfma.f32	s14, s11, s12
 801254c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012550:	d121      	bne.n	8012596 <atanf+0x132>
 8012552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012556:	e794      	b.n	8012482 <atanf+0x1e>
 8012558:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801255c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012560:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012564:	2301      	movs	r3, #1
 8012566:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801256a:	e7be      	b.n	80124ea <atanf+0x86>
 801256c:	4b24      	ldr	r3, [pc, #144]	@ (8012600 <atanf+0x19c>)
 801256e:	429c      	cmp	r4, r3
 8012570:	d80b      	bhi.n	801258a <atanf+0x126>
 8012572:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801257a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801257e:	2302      	movs	r3, #2
 8012580:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012588:	e7af      	b.n	80124ea <atanf+0x86>
 801258a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801258e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012592:	2303      	movs	r3, #3
 8012594:	e7a9      	b.n	80124ea <atanf+0x86>
 8012596:	4a1b      	ldr	r2, [pc, #108]	@ (8012604 <atanf+0x1a0>)
 8012598:	491b      	ldr	r1, [pc, #108]	@ (8012608 <atanf+0x1a4>)
 801259a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801259e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80125a2:	edd3 6a00 	vldr	s13, [r3]
 80125a6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80125aa:	2d00      	cmp	r5, #0
 80125ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80125b0:	edd2 7a00 	vldr	s15, [r2]
 80125b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125b8:	bfb8      	it	lt
 80125ba:	eef1 7a67 	vneglt.f32	s15, s15
 80125be:	e760      	b.n	8012482 <atanf+0x1e>
 80125c0:	bfc90fdb 	.word	0xbfc90fdb
 80125c4:	3fc90fdb 	.word	0x3fc90fdb
 80125c8:	3edfffff 	.word	0x3edfffff
 80125cc:	7149f2ca 	.word	0x7149f2ca
 80125d0:	3f97ffff 	.word	0x3f97ffff
 80125d4:	3c8569d7 	.word	0x3c8569d7
 80125d8:	3d4bda59 	.word	0x3d4bda59
 80125dc:	bd6ef16b 	.word	0xbd6ef16b
 80125e0:	3d886b35 	.word	0x3d886b35
 80125e4:	3dba2e6e 	.word	0x3dba2e6e
 80125e8:	3e124925 	.word	0x3e124925
 80125ec:	3eaaaaab 	.word	0x3eaaaaab
 80125f0:	bd15a221 	.word	0xbd15a221
 80125f4:	bd9d8795 	.word	0xbd9d8795
 80125f8:	bde38e38 	.word	0xbde38e38
 80125fc:	be4ccccd 	.word	0xbe4ccccd
 8012600:	401bffff 	.word	0x401bffff
 8012604:	08012e18 	.word	0x08012e18
 8012608:	08012e08 	.word	0x08012e08

0801260c <fabs>:
 801260c:	ec51 0b10 	vmov	r0, r1, d0
 8012610:	4602      	mov	r2, r0
 8012612:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012616:	ec43 2b10 	vmov	d0, r2, r3
 801261a:	4770      	bx	lr
 801261c:	0000      	movs	r0, r0
	...

08012620 <scalbn>:
 8012620:	b570      	push	{r4, r5, r6, lr}
 8012622:	ec55 4b10 	vmov	r4, r5, d0
 8012626:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801262a:	4606      	mov	r6, r0
 801262c:	462b      	mov	r3, r5
 801262e:	b991      	cbnz	r1, 8012656 <scalbn+0x36>
 8012630:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012634:	4323      	orrs	r3, r4
 8012636:	d03b      	beq.n	80126b0 <scalbn+0x90>
 8012638:	4b33      	ldr	r3, [pc, #204]	@ (8012708 <scalbn+0xe8>)
 801263a:	4620      	mov	r0, r4
 801263c:	4629      	mov	r1, r5
 801263e:	2200      	movs	r2, #0
 8012640:	f7ed fffa 	bl	8000638 <__aeabi_dmul>
 8012644:	4b31      	ldr	r3, [pc, #196]	@ (801270c <scalbn+0xec>)
 8012646:	429e      	cmp	r6, r3
 8012648:	4604      	mov	r4, r0
 801264a:	460d      	mov	r5, r1
 801264c:	da0f      	bge.n	801266e <scalbn+0x4e>
 801264e:	a326      	add	r3, pc, #152	@ (adr r3, 80126e8 <scalbn+0xc8>)
 8012650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012654:	e01e      	b.n	8012694 <scalbn+0x74>
 8012656:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801265a:	4291      	cmp	r1, r2
 801265c:	d10b      	bne.n	8012676 <scalbn+0x56>
 801265e:	4622      	mov	r2, r4
 8012660:	4620      	mov	r0, r4
 8012662:	4629      	mov	r1, r5
 8012664:	f7ed fe32 	bl	80002cc <__adddf3>
 8012668:	4604      	mov	r4, r0
 801266a:	460d      	mov	r5, r1
 801266c:	e020      	b.n	80126b0 <scalbn+0x90>
 801266e:	460b      	mov	r3, r1
 8012670:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012674:	3936      	subs	r1, #54	@ 0x36
 8012676:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801267a:	4296      	cmp	r6, r2
 801267c:	dd0d      	ble.n	801269a <scalbn+0x7a>
 801267e:	2d00      	cmp	r5, #0
 8012680:	a11b      	add	r1, pc, #108	@ (adr r1, 80126f0 <scalbn+0xd0>)
 8012682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012686:	da02      	bge.n	801268e <scalbn+0x6e>
 8012688:	a11b      	add	r1, pc, #108	@ (adr r1, 80126f8 <scalbn+0xd8>)
 801268a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801268e:	a318      	add	r3, pc, #96	@ (adr r3, 80126f0 <scalbn+0xd0>)
 8012690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012694:	f7ed ffd0 	bl	8000638 <__aeabi_dmul>
 8012698:	e7e6      	b.n	8012668 <scalbn+0x48>
 801269a:	1872      	adds	r2, r6, r1
 801269c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80126a0:	428a      	cmp	r2, r1
 80126a2:	dcec      	bgt.n	801267e <scalbn+0x5e>
 80126a4:	2a00      	cmp	r2, #0
 80126a6:	dd06      	ble.n	80126b6 <scalbn+0x96>
 80126a8:	f36f 531e 	bfc	r3, #20, #11
 80126ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80126b0:	ec45 4b10 	vmov	d0, r4, r5
 80126b4:	bd70      	pop	{r4, r5, r6, pc}
 80126b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80126ba:	da08      	bge.n	80126ce <scalbn+0xae>
 80126bc:	2d00      	cmp	r5, #0
 80126be:	a10a      	add	r1, pc, #40	@ (adr r1, 80126e8 <scalbn+0xc8>)
 80126c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126c4:	dac3      	bge.n	801264e <scalbn+0x2e>
 80126c6:	a10e      	add	r1, pc, #56	@ (adr r1, 8012700 <scalbn+0xe0>)
 80126c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126cc:	e7bf      	b.n	801264e <scalbn+0x2e>
 80126ce:	3236      	adds	r2, #54	@ 0x36
 80126d0:	f36f 531e 	bfc	r3, #20, #11
 80126d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80126d8:	4620      	mov	r0, r4
 80126da:	4b0d      	ldr	r3, [pc, #52]	@ (8012710 <scalbn+0xf0>)
 80126dc:	4629      	mov	r1, r5
 80126de:	2200      	movs	r2, #0
 80126e0:	e7d8      	b.n	8012694 <scalbn+0x74>
 80126e2:	bf00      	nop
 80126e4:	f3af 8000 	nop.w
 80126e8:	c2f8f359 	.word	0xc2f8f359
 80126ec:	01a56e1f 	.word	0x01a56e1f
 80126f0:	8800759c 	.word	0x8800759c
 80126f4:	7e37e43c 	.word	0x7e37e43c
 80126f8:	8800759c 	.word	0x8800759c
 80126fc:	fe37e43c 	.word	0xfe37e43c
 8012700:	c2f8f359 	.word	0xc2f8f359
 8012704:	81a56e1f 	.word	0x81a56e1f
 8012708:	43500000 	.word	0x43500000
 801270c:	ffff3cb0 	.word	0xffff3cb0
 8012710:	3c900000 	.word	0x3c900000
 8012714:	00000000 	.word	0x00000000

08012718 <floor>:
 8012718:	ec51 0b10 	vmov	r0, r1, d0
 801271c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012724:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012728:	2e13      	cmp	r6, #19
 801272a:	460c      	mov	r4, r1
 801272c:	4605      	mov	r5, r0
 801272e:	4680      	mov	r8, r0
 8012730:	dc34      	bgt.n	801279c <floor+0x84>
 8012732:	2e00      	cmp	r6, #0
 8012734:	da17      	bge.n	8012766 <floor+0x4e>
 8012736:	a332      	add	r3, pc, #200	@ (adr r3, 8012800 <floor+0xe8>)
 8012738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273c:	f7ed fdc6 	bl	80002cc <__adddf3>
 8012740:	2200      	movs	r2, #0
 8012742:	2300      	movs	r3, #0
 8012744:	f7ee fa08 	bl	8000b58 <__aeabi_dcmpgt>
 8012748:	b150      	cbz	r0, 8012760 <floor+0x48>
 801274a:	2c00      	cmp	r4, #0
 801274c:	da55      	bge.n	80127fa <floor+0xe2>
 801274e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012752:	432c      	orrs	r4, r5
 8012754:	2500      	movs	r5, #0
 8012756:	42ac      	cmp	r4, r5
 8012758:	4c2b      	ldr	r4, [pc, #172]	@ (8012808 <floor+0xf0>)
 801275a:	bf08      	it	eq
 801275c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012760:	4621      	mov	r1, r4
 8012762:	4628      	mov	r0, r5
 8012764:	e023      	b.n	80127ae <floor+0x96>
 8012766:	4f29      	ldr	r7, [pc, #164]	@ (801280c <floor+0xf4>)
 8012768:	4137      	asrs	r7, r6
 801276a:	ea01 0307 	and.w	r3, r1, r7
 801276e:	4303      	orrs	r3, r0
 8012770:	d01d      	beq.n	80127ae <floor+0x96>
 8012772:	a323      	add	r3, pc, #140	@ (adr r3, 8012800 <floor+0xe8>)
 8012774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012778:	f7ed fda8 	bl	80002cc <__adddf3>
 801277c:	2200      	movs	r2, #0
 801277e:	2300      	movs	r3, #0
 8012780:	f7ee f9ea 	bl	8000b58 <__aeabi_dcmpgt>
 8012784:	2800      	cmp	r0, #0
 8012786:	d0eb      	beq.n	8012760 <floor+0x48>
 8012788:	2c00      	cmp	r4, #0
 801278a:	bfbe      	ittt	lt
 801278c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012790:	4133      	asrlt	r3, r6
 8012792:	18e4      	addlt	r4, r4, r3
 8012794:	ea24 0407 	bic.w	r4, r4, r7
 8012798:	2500      	movs	r5, #0
 801279a:	e7e1      	b.n	8012760 <floor+0x48>
 801279c:	2e33      	cmp	r6, #51	@ 0x33
 801279e:	dd0a      	ble.n	80127b6 <floor+0x9e>
 80127a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80127a4:	d103      	bne.n	80127ae <floor+0x96>
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	f7ed fd8f 	bl	80002cc <__adddf3>
 80127ae:	ec41 0b10 	vmov	d0, r0, r1
 80127b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80127ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80127be:	40df      	lsrs	r7, r3
 80127c0:	4207      	tst	r7, r0
 80127c2:	d0f4      	beq.n	80127ae <floor+0x96>
 80127c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8012800 <floor+0xe8>)
 80127c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ca:	f7ed fd7f 	bl	80002cc <__adddf3>
 80127ce:	2200      	movs	r2, #0
 80127d0:	2300      	movs	r3, #0
 80127d2:	f7ee f9c1 	bl	8000b58 <__aeabi_dcmpgt>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d0c2      	beq.n	8012760 <floor+0x48>
 80127da:	2c00      	cmp	r4, #0
 80127dc:	da0a      	bge.n	80127f4 <floor+0xdc>
 80127de:	2e14      	cmp	r6, #20
 80127e0:	d101      	bne.n	80127e6 <floor+0xce>
 80127e2:	3401      	adds	r4, #1
 80127e4:	e006      	b.n	80127f4 <floor+0xdc>
 80127e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80127ea:	2301      	movs	r3, #1
 80127ec:	40b3      	lsls	r3, r6
 80127ee:	441d      	add	r5, r3
 80127f0:	4545      	cmp	r5, r8
 80127f2:	d3f6      	bcc.n	80127e2 <floor+0xca>
 80127f4:	ea25 0507 	bic.w	r5, r5, r7
 80127f8:	e7b2      	b.n	8012760 <floor+0x48>
 80127fa:	2500      	movs	r5, #0
 80127fc:	462c      	mov	r4, r5
 80127fe:	e7af      	b.n	8012760 <floor+0x48>
 8012800:	8800759c 	.word	0x8800759c
 8012804:	7e37e43c 	.word	0x7e37e43c
 8012808:	bff00000 	.word	0xbff00000
 801280c:	000fffff 	.word	0x000fffff

08012810 <_init>:
 8012810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012812:	bf00      	nop
 8012814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012816:	bc08      	pop	{r3}
 8012818:	469e      	mov	lr, r3
 801281a:	4770      	bx	lr

0801281c <_fini>:
 801281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281e:	bf00      	nop
 8012820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012822:	bc08      	pop	{r3}
 8012824:	469e      	mov	lr, r3
 8012826:	4770      	bx	lr
