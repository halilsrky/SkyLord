
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011820  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080119f0  080119f0  000129f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012010  08012010  00014228  2**0
                  CONTENTS
  4 .ARM          00000008  08012010  08012010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012018  08012018  00014228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012018  08012018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801201c  0801201c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08012020  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  20000228  08012248  00014228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08012248  000149c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018821  00000000  00000000  00014258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003901  00000000  00000000  0002ca79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00030380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd2  00000000  00000000  00031788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025606  00000000  00000000  0003275a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c806  00000000  00000000  00057d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d82a3  00000000  00000000  00074566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce4  00000000  00000000  0014c84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00153530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080119d8 	.word	0x080119d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	080119d8 	.word	0x080119d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f007 fe6d 	bl	8008f30 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f007 fe49 	bl	8008f30 <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00b ff08 	bl	800d0ca <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00d ff89 	bl	800f27c <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fc73 	bl	8008cdc <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 fb3a 	bl	8007a70 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f007 fb27 	bl	8008a54 <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 fb32 	bl	8007a70 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f007 fd85 	bl	8008f30 <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f007 fcec 	bl	8008f30 <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f007 fbab 	bl	8008d3c <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f007 fb86 	bl	8008d3c <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f007 fb62 	bl	8008d3c <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 f9f4 	bl	8007a70 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 f9e2 	bl	8007a70 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f007 fc06 	bl	8008f30 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	20000718 	.word	0x20000718
 800174c:	2000024c 	.word	0x2000024c
 8001750:	2000073c 	.word	0x2000073c

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 f96c 	bl	8007a58 <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 f95c 	bl	8007a58 <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001faa:	2028      	movs	r0, #40	@ 0x28
 8001fac:	f005 fe7b 	bl	8007ca6 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002298 <bmi088_config+0x2f4>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	2364      	movs	r3, #100	@ 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	227c      	movs	r2, #124	@ 0x7c
 8001fcc:	2130      	movs	r1, #48	@ 0x30
 8001fce:	f006 feb5 	bl	8008d3c <HAL_I2C_Mem_Write>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8001fe0:	4bad      	ldr	r3, [pc, #692]	@ (8002298 <bmi088_config+0x2f4>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	2364      	movs	r3, #100	@ 0x64
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	227d      	movs	r2, #125	@ 0x7d
 8001ff4:	2130      	movs	r1, #48	@ 0x30
 8001ff6:	f006 fea1 	bl	8008d3c <HAL_I2C_Mem_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4313      	orrs	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8002004:	2014      	movs	r0, #20
 8002006:	f005 fd33 	bl	8007a70 <HAL_Delay>

	buf[0] = ACC_RESET;
 800200a:	23b6      	movs	r3, #182	@ 0xb6
 800200c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800200e:	4ba2      	ldr	r3, [pc, #648]	@ (8002298 <bmi088_config+0x2f4>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	2364      	movs	r3, #100	@ 0x64
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	227e      	movs	r2, #126	@ 0x7e
 8002022:	2130      	movs	r1, #48	@ 0x30
 8002024:	f006 fe8a 	bl	8008d3c <HAL_I2C_Mem_Write>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4313      	orrs	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <bmi088_config+0x9a>
 8002038:	4b98      	ldr	r3, [pc, #608]	@ (800229c <bmi088_config+0x2f8>)
 800203a:	2284      	movs	r2, #132	@ 0x84
 800203c:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f005 fd16 	bl	8007a70 <HAL_Delay>

	buf[0] = FIFO_RESET;
 8002044:	23b0      	movs	r3, #176	@ 0xb0
 8002046:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002048:	4b93      	ldr	r3, [pc, #588]	@ (8002298 <bmi088_config+0x2f4>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	227e      	movs	r2, #126	@ 0x7e
 800205c:	2130      	movs	r1, #48	@ 0x30
 800205e:	f006 fe6d 	bl	8008d3c <HAL_I2C_Mem_Write>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4313      	orrs	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <bmi088_config+0xd4>
 8002072:	4b8a      	ldr	r3, [pc, #552]	@ (800229c <bmi088_config+0x2f8>)
 8002074:	2289      	movs	r2, #137	@ 0x89
 8002076:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002078:	200a      	movs	r0, #10
 800207a:	f005 fcf9 	bl	8007a70 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800207e:	23b6      	movs	r3, #182	@ 0xb6
 8002080:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <bmi088_config+0x2f4>)
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	2364      	movs	r3, #100	@ 0x64
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	2214      	movs	r2, #20
 8002096:	21d0      	movs	r1, #208	@ 0xd0
 8002098:	f006 fe50 	bl	8008d3c <HAL_I2C_Mem_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <bmi088_config+0x10e>
 80020ac:	4b7b      	ldr	r3, [pc, #492]	@ (800229c <bmi088_config+0x2f8>)
 80020ae:	228e      	movs	r2, #142	@ 0x8e
 80020b0:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f005 fcdc 	bl	8007a70 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <bmi088_config+0x2fc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	7f5b      	ldrb	r3, [r3, #29]
 80020be:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <bmi088_config+0x2f4>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	2364      	movs	r3, #100	@ 0x64
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	220f      	movs	r2, #15
 80020d4:	21d0      	movs	r1, #208	@ 0xd0
 80020d6:	f006 fe31 	bl	8008d3c <HAL_I2C_Mem_Write>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <bmi088_config+0x14c>
 80020ea:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <bmi088_config+0x2f8>)
 80020ec:	2294      	movs	r2, #148	@ 0x94
 80020ee:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <bmi088_config+0x2fc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	7f1b      	ldrb	r3, [r3, #28]
 80020f6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <bmi088_config+0x2f4>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	2314      	movs	r3, #20
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	2210      	movs	r2, #16
 800210c:	21d0      	movs	r1, #208	@ 0xd0
 800210e:	f006 fe15 	bl	8008d3c <HAL_I2C_Mem_Write>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4313      	orrs	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <bmi088_config+0x184>
 8002122:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <bmi088_config+0x2f8>)
 8002124:	2298      	movs	r2, #152	@ 0x98
 8002126:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002128:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <bmi088_config+0x2fc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	7edb      	ldrb	r3, [r3, #27]
 800212e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <bmi088_config+0x2f4>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	2314      	movs	r3, #20
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	2211      	movs	r2, #17
 8002144:	21d0      	movs	r1, #208	@ 0xd0
 8002146:	f006 fdf9 	bl	8008d3c <HAL_I2C_Mem_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4313      	orrs	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <bmi088_config+0x1bc>
 800215a:	4b50      	ldr	r3, [pc, #320]	@ (800229c <bmi088_config+0x2f8>)
 800215c:	229c      	movs	r2, #156	@ 0x9c
 800215e:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 8002160:	2014      	movs	r0, #20
 8002162:	f005 fc85 	bl	8007a70 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <bmi088_config+0x2f4>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	2314      	movs	r3, #20
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	2215      	movs	r2, #21
 800217e:	21d0      	movs	r1, #208	@ 0xd0
 8002180:	f006 fddc 	bl	8008d3c <HAL_I2C_Mem_Write>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4313      	orrs	r3, r2
 800218c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <bmi088_config+0x1f6>
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <bmi088_config+0x2f8>)
 8002196:	22a2      	movs	r2, #162	@ 0xa2
 8002198:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 800219a:	2301      	movs	r3, #1
 800219c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <bmi088_config+0x2f4>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	2314      	movs	r3, #20
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2301      	movs	r3, #1
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	2216      	movs	r2, #22
 80021b2:	21d0      	movs	r1, #208	@ 0xd0
 80021b4:	f006 fdc2 	bl	8008d3c <HAL_I2C_Mem_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4313      	orrs	r3, r2
 80021c0:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <bmi088_config+0x22a>
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <bmi088_config+0x2f8>)
 80021ca:	22a6      	movs	r2, #166	@ 0xa6
 80021cc:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80021ce:	2301      	movs	r3, #1
 80021d0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <bmi088_config+0x2f4>)
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	2314      	movs	r3, #20
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	2218      	movs	r2, #24
 80021e6:	21d0      	movs	r1, #208	@ 0xd0
 80021e8:	f006 fda8 	bl	8008d3c <HAL_I2C_Mem_Write>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <bmi088_config+0x25e>
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <bmi088_config+0x2f8>)
 80021fe:	22aa      	movs	r2, #170	@ 0xaa
 8002200:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002202:	2304      	movs	r3, #4
 8002204:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <bmi088_config+0x2f4>)
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	2314      	movs	r3, #20
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	2301      	movs	r3, #1
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	227d      	movs	r2, #125	@ 0x7d
 800221a:	2130      	movs	r1, #48	@ 0x30
 800221c:	f006 fd8e 	bl	8008d3c <HAL_I2C_Mem_Write>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4313      	orrs	r3, r2
 8002228:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <bmi088_config+0x292>
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <bmi088_config+0x2f8>)
 8002232:	22af      	movs	r2, #175	@ 0xaf
 8002234:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002236:	2008      	movs	r0, #8
 8002238:	f005 fc1a 	bl	8007a70 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <bmi088_config+0x2fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7ddb      	ldrb	r3, [r3, #23]
 8002242:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <bmi088_config+0x2f4>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	2314      	movs	r3, #20
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2301      	movs	r3, #1
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	227c      	movs	r2, #124	@ 0x7c
 8002258:	2130      	movs	r1, #48	@ 0x30
 800225a:	f006 fd6f 	bl	8008d3c <HAL_I2C_Mem_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4313      	orrs	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <bmi088_config+0x2d0>
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <bmi088_config+0x2f8>)
 8002270:	22b4      	movs	r2, #180	@ 0xb4
 8002272:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002274:	2008      	movs	r0, #8
 8002276:	f005 fbfb 	bl	8007a70 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <bmi088_config+0x2fc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	7e5b      	ldrb	r3, [r3, #25]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	b25a      	sxtb	r2, r3
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <bmi088_config+0x2fc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	7e9b      	ldrb	r3, [r3, #26]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	713b      	strb	r3, [r7, #4]
 8002294:	e006      	b.n	80022a4 <bmi088_config+0x300>
 8002296:	bf00      	nop
 8002298:	20000250 	.word	0x20000250
 800229c:	2000025c 	.word	0x2000025c
 80022a0:	20000254 	.word	0x20000254
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <bmi088_config+0x3c8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2130      	movs	r1, #48	@ 0x30
 80022ba:	f006 fd3f 	bl	8008d3c <HAL_I2C_Mem_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <bmi088_config+0x330>
 80022ce:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <bmi088_config+0x3cc>)
 80022d0:	22b9      	movs	r2, #185	@ 0xb9
 80022d2:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <bmi088_config+0x3d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
 80022da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <bmi088_config+0x3c8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	2314      	movs	r3, #20
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	2241      	movs	r2, #65	@ 0x41
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	f006 fd23 	bl	8008d3c <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x368>
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <bmi088_config+0x3cc>)
 8002308:	22bd      	movs	r2, #189	@ 0xbd
 800230a:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800230c:	230a      	movs	r3, #10
 800230e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <bmi088_config+0x3c8>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	2314      	movs	r3, #20
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	2253      	movs	r2, #83	@ 0x53
 8002324:	2130      	movs	r1, #48	@ 0x30
 8002326:	f006 fd09 	bl	8008d3c <HAL_I2C_Mem_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4313      	orrs	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002334:	2304      	movs	r3, #4
 8002336:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <bmi088_config+0x3c8>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	2314      	movs	r3, #20
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	2258      	movs	r2, #88	@ 0x58
 800234c:	2130      	movs	r1, #48	@ 0x30
 800234e:	f006 fcf5 	bl	8008d3c <HAL_I2C_Mem_Write>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4313      	orrs	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800235c:	2028      	movs	r0, #40	@ 0x28
 800235e:	f005 fca2 	bl	8007ca6 <HAL_NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000250 	.word	0x20000250
 8002370:	2000025c 	.word	0x2000025c
 8002374:	20000254 	.word	0x20000254

08002378 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 8002382:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <bmi088_init+0xa0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002388:	4a24      	ldr	r2, [pc, #144]	@ (800241c <bmi088_init+0xa4>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <bmi088_init+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	755a      	strb	r2, [r3, #21]
	BMI->rawDatas.isAccelUpdated = 0;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <bmi088_init+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	759a      	strb	r2, [r3, #22]
	isTimeUpdated = 0;
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <bmi088_init+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <bmi088_init+0xac>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	BMI->bmi088_t_2 = &bmi_struct_2;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <bmi088_init+0xa4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <bmi088_init+0xb0>)
 80023b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80023b2:	2332      	movs	r3, #50	@ 0x32
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2200      	movs	r2, #0
 80023c4:	21d0      	movs	r1, #208	@ 0xd0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f006 fdb2 	bl	8008f30 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80023cc:	7b3b      	ldrb	r3, [r7, #12]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d103      	bne.n	80023da <bmi088_init+0x62>
		is_BMI_ok = 1;
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <bmi088_init+0xb4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
		BMI->bmi088_t_2->q[1] = 0;
		BMI->bmi088_t_2->q[2] = 0;
		BMI->bmi088_t_2->q[3] = 0;
	}
}
 80023d8:	e01a      	b.n	8002410 <bmi088_init+0x98>
		is_BMI_ok = 0;
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <bmi088_init+0xb4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <bmi088_init+0xa4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ea:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[1] = 0;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <bmi088_init+0xa4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
		BMI->bmi088_t_2->q[2] = 0;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <bmi088_init+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
		BMI->bmi088_t_2->q[3] = 0;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <bmi088_init+0xa4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000250 	.word	0x20000250
 800241c:	20000254 	.word	0x20000254
 8002420:	20000258 	.word	0x20000258
 8002424:	20000259 	.word	0x20000259
 8002428:	20000664 	.word	0x20000664
 800242c:	20000740 	.word	0x20000740

08002430 <bmi088_update>:

void bmi088_update()
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	ed2d 8b02 	vpush	{d8}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]

		if(BMI->rawDatas.isAccelUpdated)
 800243e:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <bmi088_update+0x98>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	7d9b      	ldrb	r3, [r3, #22]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 822c 	beq.w	80028a2 <bmi088_update+0x472>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <bmi088_update+0x9c>)
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	4b1e      	ldr	r3, [pc, #120]	@ (80024c8 <bmi088_update+0x98>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3304      	adds	r3, #4
 8002454:	2214      	movs	r2, #20
 8002456:	9202      	str	r2, [sp, #8]
 8002458:	2209      	movs	r2, #9
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2301      	movs	r3, #1
 8002460:	2212      	movs	r2, #18
 8002462:	2130      	movs	r1, #48	@ 0x30
 8002464:	f006 fd64 	bl	8008f30 <HAL_I2C_Mem_Read>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]
			if(ret_val)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 837f 	bne.w	8002b72 <bmi088_update+0x742>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002474:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <bmi088_update+0x9c>)
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <bmi088_update+0x98>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330d      	adds	r3, #13
 800247e:	2214      	movs	r2, #20
 8002480:	9202      	str	r2, [sp, #8]
 8002482:	2202      	movs	r2, #2
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	2222      	movs	r2, #34	@ 0x22
 800248c:	2130      	movs	r1, #48	@ 0x30
 800248e:	f006 fd4f 	bl	8008f30 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <bmi088_update+0x98>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	7b5b      	ldrb	r3, [r3, #13]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	b21a      	sxth	r2, r3
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <bmi088_update+0x98>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	7b9b      	ldrb	r3, [r3, #14]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	82bb      	strh	r3, [r7, #20]
			int16_t Temp_int11 = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	827b      	strh	r3, [r7, #18]
			if (Temp_uint11 > 1023){
 80024b2:	8abb      	ldrh	r3, [r7, #20]
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b8:	d30a      	bcc.n	80024d0 <bmi088_update+0xa0>
				Temp_int11 = Temp_uint11 - 2048;
 80024ba:	8abb      	ldrh	r3, [r7, #20]
 80024bc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	827b      	strh	r3, [r7, #18]
 80024c4:	e02a      	b.n	800251c <bmi088_update+0xec>
 80024c6:	bf00      	nop
 80024c8:	20000254 	.word	0x20000254
 80024cc:	20000250 	.word	0x20000250
			}
			else{
				Temp_int11 = Temp_uint11;
 80024d0:	8abb      	ldrh	r3, [r7, #20]
 80024d2:	827b      	strh	r3, [r7, #18]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 80024d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e0:	ee17 0a90 	vmov	r0, s15
 80024e4:	f7fe f850 	bl	8000588 <__aeabi_f2d>
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80024f0:	f7fe f8a2 	bl	8000638 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4bcd      	ldr	r3, [pc, #820]	@ (8002838 <bmi088_update+0x408>)
 8002502:	f7fd fee3 	bl	80002cc <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	49cc      	ldr	r1, [pc, #816]	@ (800283c <bmi088_update+0x40c>)
 800250c:	680c      	ldr	r4, [r1, #0]
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fb69 	bl	8000be8 <__aeabi_d2f>
 8002516:	4603      	mov	r3, r0
 8002518:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 800251c:	4bc7      	ldr	r3, [pc, #796]	@ (800283c <bmi088_update+0x40c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	041a      	lsls	r2, r3, #16
 8002524:	4bc5      	ldr	r3, [pc, #788]	@ (800283c <bmi088_update+0x40c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	7adb      	ldrb	r3, [r3, #11]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	4313      	orrs	r3, r2
 800252e:	4ac3      	ldr	r2, [pc, #780]	@ (800283c <bmi088_update+0x40c>)
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	7a92      	ldrb	r2, [r2, #10]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fe f81f 	bl	8000588 <__aeabi_f2d>
 800254a:	a3b3      	add	r3, pc, #716	@ (adr r3, 8002818 <bmi088_update+0x3e8>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f872 	bl	8000638 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	a3b0      	add	r3, pc, #704	@ (adr r3, 8002820 <bmi088_update+0x3f0>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f993 	bl	800088c <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	49b4      	ldr	r1, [pc, #720]	@ (800283c <bmi088_update+0x40c>)
 800256c:	680c      	ldr	r4, [r1, #0]
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb39 	bl	8000be8 <__aeabi_d2f>
 8002576:	4603      	mov	r3, r0
 8002578:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 800257c:	4baf      	ldr	r3, [pc, #700]	@ (800283c <bmi088_update+0x40c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	7a5b      	ldrb	r3, [r3, #9]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	b21a      	sxth	r2, r3
 8002586:	4bad      	ldr	r3, [pc, #692]	@ (800283c <bmi088_update+0x40c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	7a1b      	ldrb	r3, [r3, #8]
 800258c:	b21b      	sxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	817b      	strh	r3, [r7, #10]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8002592:	4baa      	ldr	r3, [pc, #680]	@ (800283c <bmi088_update+0x40c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	79db      	ldrb	r3, [r3, #7]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b21a      	sxth	r2, r3
 800259c:	4ba7      	ldr	r3, [pc, #668]	@ (800283c <bmi088_update+0x40c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	799b      	ldrb	r3, [r3, #6]
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 80025a8:	4ba4      	ldr	r3, [pc, #656]	@ (800283c <bmi088_update+0x40c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	4ba2      	ldr	r3, [pc, #648]	@ (800283c <bmi088_update+0x40c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	791b      	ldrb	r3, [r3, #4]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]

			BMI->acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 80025be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ca:	ee17 0a90 	vmov	r0, s15
 80025ce:	f7fd ffdb 	bl	8000588 <__aeabi_f2d>
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	4b9a      	ldr	r3, [pc, #616]	@ (8002840 <bmi088_update+0x410>)
 80025d8:	f7fe f958 	bl	800088c <__aeabi_ddiv>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b96      	ldr	r3, [pc, #600]	@ (8002844 <bmi088_update+0x414>)
 80025ea:	f7fe f825 	bl	8000638 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	4b93      	ldr	r3, [pc, #588]	@ (8002848 <bmi088_update+0x418>)
 80025fc:	f7fe f81c 	bl	8000638 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4614      	mov	r4, r2
 8002606:	461d      	mov	r5, r3
 8002608:	4b8c      	ldr	r3, [pc, #560]	@ (800283c <bmi088_update+0x40c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	7e1b      	ldrb	r3, [r3, #24]
 800260e:	3301      	adds	r3, #1
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002618:	ee17 0a90 	vmov	r0, s15
 800261c:	f7fd ffb4 	bl	8000588 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	ec43 2b11 	vmov	d1, r2, r3
 8002628:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8002828 <bmi088_update+0x3f8>
 800262c:	f00c fe26 	bl	800f27c <pow>
 8002630:	ec53 2b10 	vmov	r2, r3, d0
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fd fffe 	bl	8000638 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	a37a      	add	r3, pc, #488	@ (adr r3, 8002830 <bmi088_update+0x400>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd fff5 	bl	8000638 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b7a      	ldr	r3, [pc, #488]	@ (8002844 <bmi088_update+0x414>)
 800265c:	f7fe f916 	bl	800088c <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4975      	ldr	r1, [pc, #468]	@ (800283c <bmi088_update+0x40c>)
 8002666:	680c      	ldr	r4, [r1, #0]
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fabc 	bl	8000be8 <__aeabi_d2f>
 8002670:	4603      	mov	r3, r0
 8002672:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
			BMI->acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 8002676:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ee17 0a90 	vmov	r0, s15
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b6c      	ldr	r3, [pc, #432]	@ (8002840 <bmi088_update+0x410>)
 8002690:	f7fe f8fc 	bl	800088c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <bmi088_update+0x414>)
 80026a2:	f7fd ffc9 	bl	8000638 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b65      	ldr	r3, [pc, #404]	@ (8002848 <bmi088_update+0x418>)
 80026b4:	f7fd ffc0 	bl	8000638 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	4b5e      	ldr	r3, [pc, #376]	@ (800283c <bmi088_update+0x40c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	7e1b      	ldrb	r3, [r3, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d0:	ee17 0a90 	vmov	r0, s15
 80026d4:	f7fd ff58 	bl	8000588 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	ec43 2b11 	vmov	d1, r2, r3
 80026e0:	ed9f 0b51 	vldr	d0, [pc, #324]	@ 8002828 <bmi088_update+0x3f8>
 80026e4:	f00c fdca 	bl	800f27c <pow>
 80026e8:	ec53 2b10 	vmov	r2, r3, d0
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd ffa2 	bl	8000638 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	a34c      	add	r3, pc, #304	@ (adr r3, 8002830 <bmi088_update+0x400>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff99 	bl	8000638 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b4c      	ldr	r3, [pc, #304]	@ (8002844 <bmi088_update+0x414>)
 8002714:	f7fe f8ba 	bl	800088c <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4947      	ldr	r1, [pc, #284]	@ (800283c <bmi088_update+0x40c>)
 800271e:	680c      	ldr	r4, [r1, #0]
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa60 	bl	8000be8 <__aeabi_d2f>
 8002728:	4603      	mov	r3, r0
 800272a:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
			BMI->acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 800272e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273a:	ee17 0a90 	vmov	r0, s15
 800273e:	f7fd ff23 	bl	8000588 <__aeabi_f2d>
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <bmi088_update+0x410>)
 8002748:	f7fe f8a0 	bl	800088c <__aeabi_ddiv>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <bmi088_update+0x414>)
 800275a:	f7fd ff6d 	bl	8000638 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <bmi088_update+0x418>)
 800276c:	f7fd ff64 	bl	8000638 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4614      	mov	r4, r2
 8002776:	461d      	mov	r5, r3
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <bmi088_update+0x40c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	7e1b      	ldrb	r3, [r3, #24]
 800277e:	3301      	adds	r3, #1
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002788:	ee17 0a90 	vmov	r0, s15
 800278c:	f7fd fefc 	bl	8000588 <__aeabi_f2d>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	ec43 2b11 	vmov	d1, r2, r3
 8002798:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8002828 <bmi088_update+0x3f8>
 800279c:	f00c fd6e 	bl	800f27c <pow>
 80027a0:	ec53 2b10 	vmov	r2, r3, d0
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7fd ff46 	bl	8000638 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	a31e      	add	r3, pc, #120	@ (adr r3, 8002830 <bmi088_update+0x400>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff3d 	bl	8000638 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002844 <bmi088_update+0x414>)
 80027cc:	f7fe f85e 	bl	800088c <__aeabi_ddiv>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4919      	ldr	r1, [pc, #100]	@ (800283c <bmi088_update+0x40c>)
 80027d6:	680c      	ldr	r4, [r1, #0]
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe fa04 	bl	8000be8 <__aeabi_d2f>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc

			if(isStarded)
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <bmi088_update+0x41c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d044      	beq.n	8002878 <bmi088_update+0x448>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <bmi088_update+0x40c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <bmi088_update+0x40c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80027fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	d523      	bpl.n	8002854 <bmi088_update+0x424>
 800280c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8002850 <bmi088_update+0x420>
 8002810:	e02a      	b.n	8002868 <bmi088_update+0x438>
 8002812:	bf00      	nop
 8002814:	f3af 8000 	nop.w
 8002818:	00000000 	.word	0x00000000
 800281c:	40438800 	.word	0x40438800
 8002820:	00000000 	.word	0x00000000
 8002824:	412e8480 	.word	0x412e8480
 8002828:	00000000 	.word	0x00000000
 800282c:	40000000 	.word	0x40000000
 8002830:	51eb851f 	.word	0x51eb851f
 8002834:	40239eb8 	.word	0x40239eb8
 8002838:	40370000 	.word	0x40370000
 800283c:	20000254 	.word	0x20000254
 8002840:	40e00000 	.word	0x40e00000
 8002844:	408f4000 	.word	0x408f4000
 8002848:	3ff80000 	.word	0x3ff80000
 800284c:	20000259 	.word	0x20000259
 8002850:	00000000 	.word	0x00000000
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <bmi088_update+0x444>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <bmi088_update+0x444>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	4b02      	ldr	r3, [pc, #8]	@ (8002874 <bmi088_update+0x444>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
 8002870:	e008      	b.n	8002884 <bmi088_update+0x454>
 8002872:	bf00      	nop
 8002874:	20000254 	.word	0x20000254
			}
			else
			{
				isStarded++;
 8002878:	4bb5      	ldr	r3, [pc, #724]	@ (8002b50 <bmi088_update+0x720>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4bb3      	ldr	r3, [pc, #716]	@ (8002b50 <bmi088_update+0x720>)
 8002882:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 8002884:	4bb3      	ldr	r3, [pc, #716]	@ (8002b54 <bmi088_update+0x724>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4bb2      	ldr	r3, [pc, #712]	@ (8002b54 <bmi088_update+0x724>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8002890:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0


			BMI->rawDatas.isAccelUpdated = 0;
 8002894:	4baf      	ldr	r3, [pc, #700]	@ (8002b54 <bmi088_update+0x724>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	759a      	strb	r2, [r3, #22]
			isTimeUpdated = 1;
 800289c:	4bae      	ldr	r3, [pc, #696]	@ (8002b58 <bmi088_update+0x728>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 80028a2:	4bac      	ldr	r3, [pc, #688]	@ (8002b54 <bmi088_update+0x724>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	7d5b      	ldrb	r3, [r3, #21]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8165 	beq.w	8002b78 <bmi088_update+0x748>
 80028ae:	4baa      	ldr	r3, [pc, #680]	@ (8002b58 <bmi088_update+0x728>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8160 	beq.w	8002b78 <bmi088_update+0x748>
		{
			if(isStarded){
 80028b8:	4ba5      	ldr	r3, [pc, #660]	@ (8002b50 <bmi088_update+0x720>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8142 	beq.w	8002b46 <bmi088_update+0x716>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 80028c2:	4ba6      	ldr	r3, [pc, #664]	@ (8002b5c <bmi088_update+0x72c>)
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	4ba3      	ldr	r3, [pc, #652]	@ (8002b54 <bmi088_update+0x724>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330f      	adds	r3, #15
 80028cc:	220a      	movs	r2, #10
 80028ce:	9202      	str	r2, [sp, #8]
 80028d0:	2206      	movs	r2, #6
 80028d2:	9201      	str	r2, [sp, #4]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2301      	movs	r3, #1
 80028d8:	2202      	movs	r2, #2
 80028da:	21d0      	movs	r1, #208	@ 0xd0
 80028dc:	f006 fb28 	bl	8008f30 <HAL_I2C_Mem_Read>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]
				if(ret_val)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 8145 	bne.w	8002b76 <bmi088_update+0x746>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 80028ec:	4b99      	ldr	r3, [pc, #612]	@ (8002b54 <bmi088_update+0x724>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	7d1b      	ldrb	r3, [r3, #20]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	4b97      	ldr	r3, [pc, #604]	@ (8002b54 <bmi088_update+0x724>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	7cdb      	ldrb	r3, [r3, #19]
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	4313      	orrs	r3, r2
 8002900:	80bb      	strh	r3, [r7, #4]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8002902:	4b94      	ldr	r3, [pc, #592]	@ (8002b54 <bmi088_update+0x724>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	7c9b      	ldrb	r3, [r3, #18]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b21a      	sxth	r2, r3
 800290c:	4b91      	ldr	r3, [pc, #580]	@ (8002b54 <bmi088_update+0x724>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	7c5b      	ldrb	r3, [r3, #17]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	807b      	strh	r3, [r7, #2]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002918:	4b8e      	ldr	r3, [pc, #568]	@ (8002b54 <bmi088_update+0x724>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	7c1b      	ldrb	r3, [r3, #16]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	b21a      	sxth	r2, r3
 8002922:	4b8c      	ldr	r3, [pc, #560]	@ (8002b54 <bmi088_update+0x724>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	7bdb      	ldrb	r3, [r3, #15]
 8002928:	b21b      	sxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	803b      	strh	r3, [r7, #0]

				// Doğrudan rad/s olarak al
				BMI->gyro_x = ((float)gyro_x_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[0];
 800292e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800293a:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8002b60 <bmi088_update+0x730>
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	ee17 0a90 	vmov	r0, s15
 8002946:	f7fd fe1f 	bl	8000588 <__aeabi_f2d>
 800294a:	4b82      	ldr	r3, [pc, #520]	@ (8002b54 <bmi088_update+0x724>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002952:	4c80      	ldr	r4, [pc, #512]	@ (8002b54 <bmi088_update+0x724>)
 8002954:	6824      	ldr	r4, [r4, #0]
 8002956:	f7fd fcb7 	bl	80002c8 <__aeabi_dsub>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80
				BMI->gyro_y = ((float)gyro_y_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[1];
 8002962:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296e:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002b60 <bmi088_update+0x730>
 8002972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002976:	ee17 0a90 	vmov	r0, s15
 800297a:	f7fd fe05 	bl	8000588 <__aeabi_f2d>
 800297e:	4b75      	ldr	r3, [pc, #468]	@ (8002b54 <bmi088_update+0x724>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	@ 0xf8
 8002986:	4c73      	ldr	r4, [pc, #460]	@ (8002b54 <bmi088_update+0x724>)
 8002988:	6824      	ldr	r4, [r4, #0]
 800298a:	f7fd fc9d 	bl	80002c8 <__aeabi_dsub>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
				BMI->gyro_z = ((float)gyro_z_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[2];
 8002996:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002b60 <bmi088_update+0x730>
 80029a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029aa:	ee17 0a90 	vmov	r0, s15
 80029ae:	f7fd fdeb 	bl	8000588 <__aeabi_f2d>
 80029b2:	4b68      	ldr	r3, [pc, #416]	@ (8002b54 <bmi088_update+0x724>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 80029ba:	4c66      	ldr	r4, [pc, #408]	@ (8002b54 <bmi088_update+0x724>)
 80029bc:	6824      	ldr	r4, [r4, #0]
 80029be:	f7fd fc83 	bl	80002c8 <__aeabi_dsub>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90

				Orientation_Update(BMI->gyro_y, -BMI->gyro_x, BMI->gyro_z,BMI->acc_y,-BMI->acc_x,BMI->acc_z, BMI->deltaTime);
 80029ca:	4b62      	ldr	r3, [pc, #392]	@ (8002b54 <bmi088_update+0x724>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe f907 	bl	8000be8 <__aeabi_d2f>
 80029da:	4604      	mov	r4, r0
 80029dc:	4b5d      	ldr	r3, [pc, #372]	@ (8002b54 <bmi088_update+0x724>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f8fe 	bl	8000be8 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eeb1 8a67 	vneg.f32	s16, s15
 80029f6:	4b57      	ldr	r3, [pc, #348]	@ (8002b54 <bmi088_update+0x724>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f8f1 	bl	8000be8 <__aeabi_d2f>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b52      	ldr	r3, [pc, #328]	@ (8002b54 <bmi088_update+0x724>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8002a10:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <bmi088_update+0x724>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8002a18:	eef1 7a67 	vneg.f32	s15, s15
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b54 <bmi088_update+0x724>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 8002a24:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <bmi088_update+0x724>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	ed93 6a35 	vldr	s12, [r3, #212]	@ 0xd4
 8002a2c:	eeb0 3a46 	vmov.f32	s6, s12
 8002a30:	eef0 2a66 	vmov.f32	s5, s13
 8002a34:	eeb0 2a67 	vmov.f32	s4, s15
 8002a38:	eef0 1a47 	vmov.f32	s3, s14
 8002a3c:	ee01 2a10 	vmov	s2, r2
 8002a40:	eef0 0a48 	vmov.f32	s1, s16
 8002a44:	ee00 4a10 	vmov	s0, r4
 8002a48:	f002 ff48 	bl	80058dc <Orientation_Update>
				BMI->yaw = quaternionToYaw();
 8002a4c:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <bmi088_update+0x724>)
 8002a4e:	681c      	ldr	r4, [r3, #0]
 8002a50:	f003 fce0 	bl	8006414 <quaternionToYaw>
 8002a54:	eef0 7a40 	vmov.f32	s15, s0
 8002a58:	edc4 7a26 	vstr	s15, [r4, #152]	@ 0x98
				BMI->pitch = quaternionToPitch();
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <bmi088_update+0x724>)
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f003 fd36 	bl	80064d0 <quaternionToPitch>
 8002a64:	eef0 7a40 	vmov.f32	s15, s0
 8002a68:	edc4 7a27 	vstr	s15, [r4, #156]	@ 0x9c
				BMI->roll = quaternionToRoll();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <bmi088_update+0x724>)
 8002a6e:	681c      	ldr	r4, [r3, #0]
 8002a70:	f003 fd66 	bl	8006540 <quaternionToRoll>
 8002a74:	eef0 7a40 	vmov.f32	s15, s0
 8002a78:	edc4 7a28 	vstr	s15, [r4, #160]	@ 0xa0
				BMI->angleZ = quaternionToThetaZ();
 8002a7c:	4b35      	ldr	r3, [pc, #212]	@ (8002b54 <bmi088_update+0x724>)
 8002a7e:	681c      	ldr	r4, [r3, #0]
 8002a80:	f003 fba0 	bl	80061c4 <quaternionToThetaZ>
 8002a84:	eef0 7a40 	vmov.f32	s15, s0
 8002a88:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
				BMI->angleY = quaternionToPitchDegree();
 8002a8c:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <bmi088_update+0x724>)
 8002a8e:	681c      	ldr	r4, [r3, #0]
 8002a90:	f003 fc28 	bl	80062e4 <quaternionToPitchDegree>
 8002a94:	eef0 7a40 	vmov.f32	s15, s0
 8002a98:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
				BMI->angleX = quaternionToRollDegree();
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <bmi088_update+0x724>)
 8002a9e:	681c      	ldr	r4, [r3, #0]
 8002aa0:	f003 fc70 	bl	8006384 <quaternionToRollDegree>
 8002aa4:	eef0 7a40 	vmov.f32	s15, s0
 8002aa8:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec

				ekf_predict(BMI->gyro_y,-BMI->gyro_x,BMI->gyro_z,BMI->deltaTime);
 8002aac:	4b29      	ldr	r3, [pc, #164]	@ (8002b54 <bmi088_update+0x724>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7fe f896 	bl	8000be8 <__aeabi_d2f>
 8002abc:	4604      	mov	r4, r0
 8002abe:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <bmi088_update+0x724>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f88d 	bl	8000be8 <__aeabi_d2f>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eeb1 8a67 	vneg.f32	s16, s15
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <bmi088_update+0x724>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f880 	bl	8000be8 <__aeabi_d2f>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <bmi088_update+0x724>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002af2:	eef0 1a67 	vmov.f32	s3, s15
 8002af6:	ee01 2a10 	vmov	s2, r2
 8002afa:	eef0 0a48 	vmov.f32	s1, s16
 8002afe:	ee00 4a10 	vmov	s0, r4
 8002b02:	f002 fb05 	bl	8005110 <ekf_predict>
				BMI->yaw1 = quaternionToYaw1();
 8002b06:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <bmi088_update+0x724>)
 8002b08:	681c      	ldr	r4, [r3, #0]
 8002b0a:	f002 fc27 	bl	800535c <quaternionToYaw1>
 8002b0e:	eef0 7a40 	vmov.f32	s15, s0
 8002b12:	edc4 7a29 	vstr	s15, [r4, #164]	@ 0xa4
				BMI->pitch1 = quaternionToPitch1();
 8002b16:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <bmi088_update+0x724>)
 8002b18:	681c      	ldr	r4, [r3, #0]
 8002b1a:	f002 fc7d 	bl	8005418 <quaternionToPitch1>
 8002b1e:	eef0 7a40 	vmov.f32	s15, s0
 8002b22:	edc4 7a2a 	vstr	s15, [r4, #168]	@ 0xa8
				BMI->roll1 = quaternionToRoll1();
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <bmi088_update+0x724>)
 8002b28:	681c      	ldr	r4, [r3, #0]
 8002b2a:	f002 fcad 	bl	8005488 <quaternionToRoll1>
 8002b2e:	eef0 7a40 	vmov.f32	s15, s0
 8002b32:	edc4 7a2b 	vstr	s15, [r4, #172]	@ 0xac
				BMI->isUpdated = 1;
 8002b36:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <bmi088_update+0x724>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

				/*ekf_update(BMI->acc_x, BMI->acc_y, BMI->acc_z);
				BMI->angle = ekf_getTheta();*/
				is_gyro_offset = 1;
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <bmi088_update+0x734>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 8002b46:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <bmi088_update+0x724>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	e00c      	b.n	8002b68 <bmi088_update+0x738>
 8002b4e:	bf00      	nop
 8002b50:	20000259 	.word	0x20000259
 8002b54:	20000254 	.word	0x20000254
 8002b58:	20000258 	.word	0x20000258
 8002b5c:	20000250 	.word	0x20000250
 8002b60:	3a8b8bbf 	.word	0x3a8b8bbf
 8002b64:	2000025a 	.word	0x2000025a
 8002b68:	755a      	strb	r2, [r3, #21]
			isTimeUpdated = 0;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <bmi088_update+0x754>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e002      	b.n	8002b78 <bmi088_update+0x748>
				return;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <bmi088_update+0x748>
					return;
 8002b76:	bf00      	nop
		}


}
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	ecbd 8b02 	vpop	{d8}
 8002b80:	bdb0      	pop	{r4, r5, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000258 	.word	0x20000258

08002b88 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <bmi088_getAccelDatas_INT+0x18>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	759a      	strb	r2, [r3, #22]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000254 	.word	0x20000254

08002ba4 <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <bmi088_getGyroDatas_INT+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	755a      	strb	r2, [r3, #21]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000254 	.word	0x20000254

08002bc0 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002bc4:	f7ff fc34 	bl	8002430 <bmi088_update>
		if(is_gyro_offset == 1)
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc0 <getOffset+0x100>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d1f9      	bne.n	8002bc4 <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8002bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc4 <getOffset+0x104>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bd8:	da32      	bge.n	8002c40 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8002bda:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <getOffset+0x108>)
 8002bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002be0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <getOffset+0x10c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002be8:	f7fd fb70 	bl	80002cc <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4935      	ldr	r1, [pc, #212]	@ (8002cc8 <getOffset+0x108>)
 8002bf2:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002bf6:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <getOffset+0x108>)
 8002bf8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <getOffset+0x10c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002c04:	f7fd fb62 	bl	80002cc <__adddf3>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	492e      	ldr	r1, [pc, #184]	@ (8002cc8 <getOffset+0x108>)
 8002c0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002c12:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc8 <getOffset+0x108>)
 8002c14:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <getOffset+0x10c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002c20:	f7fd fb54 	bl	80002cc <__adddf3>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4927      	ldr	r1, [pc, #156]	@ (8002cc8 <getOffset+0x108>)
 8002c2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002c2e:	4b25      	ldr	r3, [pc, #148]	@ (8002cc4 <getOffset+0x104>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <getOffset+0x104>)
 8002c36:	6013      	str	r3, [r2, #0]
					 BMI->offset_vals[1] = g[0][1];
					 BMI->offset_vals[2] = g[0][2];
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002c38:	4b21      	ldr	r3, [pc, #132]	@ (8002cc0 <getOffset+0x100>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e7c1      	b.n	8002bc4 <getOffset+0x4>
					 g[0][0] /= 1000.0;
 8002c40:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <getOffset+0x108>)
 8002c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <getOffset+0x110>)
 8002c4c:	f7fd fe1e 	bl	800088c <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	491c      	ldr	r1, [pc, #112]	@ (8002cc8 <getOffset+0x108>)
 8002c56:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <getOffset+0x108>)
 8002c5c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <getOffset+0x110>)
 8002c66:	f7fd fe11 	bl	800088c <__aeabi_ddiv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4916      	ldr	r1, [pc, #88]	@ (8002cc8 <getOffset+0x108>)
 8002c70:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002c74:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <getOffset+0x108>)
 8002c76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <getOffset+0x110>)
 8002c80:	f7fd fe04 	bl	800088c <__aeabi_ddiv>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	490f      	ldr	r1, [pc, #60]	@ (8002cc8 <getOffset+0x108>)
 8002c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 BMI->offset_vals[0] = g[0][0];
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <getOffset+0x10c>)
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <getOffset+0x108>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
					 BMI->offset_vals[1] = g[0][1];
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <getOffset+0x10c>)
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <getOffset+0x108>)
 8002ca2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ca6:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
					 BMI->offset_vals[2] = g[0][2];
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <getOffset+0x10c>)
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <getOffset+0x108>)
 8002cb0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cb4:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
					 break;
 8002cb8:	bf00      	nop
		}

	}
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000025a 	.word	0x2000025a
 8002cc4:	20000290 	.word	0x20000290
 8002cc8:	20000260 	.word	0x20000260
 8002ccc:	20000254 	.word	0x20000254
 8002cd0:	408f4000 	.word	0x408f4000

08002cd4 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002cd8:	f000 f802 	bl	8002ce0 <flight_algorithm_reset>
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002ce4:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <flight_algorithm_reset+0x68>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <flight_algorithm_reset+0x6c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <flight_algorithm_reset+0x70>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <flight_algorithm_reset+0x74>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <flight_algorithm_reset+0x78>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002d02:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <flight_algorithm_reset+0x7c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002d08:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <flight_algorithm_reset+0x80>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <flight_algorithm_reset+0x84>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <flight_algorithm_reset+0x88>)
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <flight_algorithm_reset+0x8c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <flight_algorithm_reset+0x90>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <flight_algorithm_reset+0x94>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002d2e:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <flight_algorithm_reset+0x98>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <flight_algorithm_reset+0x9c>)
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000294 	.word	0x20000294
 8002d4c:	20000295 	.word	0x20000295
 8002d50:	20000014 	.word	0x20000014
 8002d54:	20000296 	.word	0x20000296
 8002d58:	20000297 	.word	0x20000297
 8002d5c:	20000298 	.word	0x20000298
 8002d60:	200002a8 	.word	0x200002a8
 8002d64:	200002b0 	.word	0x200002b0
 8002d68:	200002ac 	.word	0x200002ac
 8002d6c:	200002a4 	.word	0x200002a4
 8002d70:	20000016 	.word	0x20000016
 8002d74:	20000015 	.word	0x20000015
 8002d78:	2000029c 	.word	0x2000029c
 8002d7c:	200002a0 	.word	0x200002a0

08002d80 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002d8c:	68b8      	ldr	r0, [r7, #8]
 8002d8e:	f000 f91d 	bl	8002fcc <calculate_total_acceleration>
 8002d92:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002d96:	4b7c      	ldr	r3, [pc, #496]	@ (8002f88 <flight_algorithm_update+0x208>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	f200 80eb 	bhi.w	8002f76 <flight_algorithm_update+0x1f6>
 8002da0:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <flight_algorithm_update+0x28>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002dbd 	.word	0x08002dbd
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002e2b 	.word	0x08002e2b
 8002db4:	08002f77 	.word	0x08002f77
 8002db8:	08002f77 	.word	0x08002f77
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002dbc:	4b73      	ldr	r3, [pc, #460]	@ (8002f8c <flight_algorithm_update+0x20c>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dce:	dc00      	bgt.n	8002dd2 <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002dd0:	e0d1      	b.n	8002f76 <flight_algorithm_update+0x1f6>
                current_phase = PHASE_BOOST;
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f88 <flight_algorithm_update+0x208>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8002f90 <flight_algorithm_update+0x210>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002dde:	f004 fe3b 	bl	8007a58 <HAL_GetTick>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a6b      	ldr	r2, [pc, #428]	@ (8002f94 <flight_algorithm_update+0x214>)
 8002de6:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002de8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b69      	ldr	r3, [pc, #420]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002df4:	801a      	strh	r2, [r3, #0]
            break;
 8002df6:	e0be      	b.n	8002f76 <flight_algorithm_update+0x1f6>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002df8:	f004 fe2e 	bl	8007a58 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b65      	ldr	r3, [pc, #404]	@ (8002f94 <flight_algorithm_update+0x214>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	f240 80b1 	bls.w	8002f70 <flight_algorithm_update+0x1f0>
                current_phase = PHASE_COAST;
 8002e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f88 <flight_algorithm_update+0x208>)
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002e14:	4b61      	ldr	r3, [pc, #388]	@ (8002f9c <flight_algorithm_update+0x21c>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b5c      	ldr	r3, [pc, #368]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002e26:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002e28:	e0a2      	b.n	8002f70 <flight_algorithm_update+0x1f0>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (!is_armed && bme->altitude > min_arming_altitude) {
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa0 <flight_algorithm_update+0x220>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d114      	bne.n	8002e5c <flight_algorithm_update+0xdc>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e38:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa4 <flight_algorithm_update+0x224>)
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	dd09      	ble.n	8002e5c <flight_algorithm_update+0xdc>
                is_armed = 1;
 8002e48:	4b55      	ldr	r3, [pc, #340]	@ (8002fa0 <flight_algorithm_update+0x220>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002e4e:	4b52      	ldr	r3, [pc, #328]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b4f      	ldr	r3, [pc, #316]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002e5a:	801a      	strh	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->angleY) > max_angle_threshold) && deployed_angle) {
 8002e5c:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <flight_algorithm_update+0x220>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01d      	beq.n	8002ea0 <flight_algorithm_update+0x120>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	edd3 7a3a 	vldr	s15, [r3, #232]	@ 0xe8
 8002e6a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa8 <flight_algorithm_update+0x228>)
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	dd10      	ble.n	8002ea0 <flight_algorithm_update+0x120>
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fac <flight_algorithm_update+0x22c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00c      	beq.n	8002ea0 <flight_algorithm_update+0x120>
            	drogue_deployed = 1;
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <flight_algorithm_update+0x230>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
            	deployed_angle = 0;
 8002e8c:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <flight_algorithm_update+0x22c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002e92:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f043 0308 	orr.w	r3, r3, #8
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002e9e:	801a      	strh	r2, [r3, #0]
				drogue_deployed = 1;
				deployed_velocity = 0;
				// deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa0 <flight_algorithm_update+0x220>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d034      	beq.n	8002f12 <flight_algorithm_update+0x192>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d52c      	bpl.n	8002f12 <flight_algorithm_update+0x192>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb4 <flight_algorithm_update+0x234>)
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d521      	bpl.n	8002f12 <flight_algorithm_update+0x192>
 8002ece:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <flight_algorithm_update+0x238>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <flight_algorithm_update+0x192>
				apogee_counter++;
 8002ed6:	4b39      	ldr	r3, [pc, #228]	@ (8002fbc <flight_algorithm_update+0x23c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	4a37      	ldr	r2, [pc, #220]	@ (8002fbc <flight_algorithm_update+0x23c>)
 8002ede:	6013      	str	r3, [r2, #0]
				if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002ee0:	4b36      	ldr	r3, [pc, #216]	@ (8002fbc <flight_algorithm_update+0x23c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	dd17      	ble.n	8002f18 <flight_algorithm_update+0x198>
					status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	f043 0310 	orr.w	r3, r3, #16
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002ef4:	801a      	strh	r2, [r3, #0]
					status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002ef6:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	f043 0320 	orr.w	r3, r3, #32
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b25      	ldr	r3, [pc, #148]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002f02:	801a      	strh	r2, [r3, #0]
					drogue_deployed = 1;
 8002f04:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb0 <flight_algorithm_update+0x230>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
					deployed_velocity = 0;
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <flight_algorithm_update+0x238>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
				if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f10:	e002      	b.n	8002f18 <flight_algorithm_update+0x198>
				}
			} else {
				apogee_counter = 0;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	@ (8002fbc <flight_algorithm_update+0x23c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
			}
			prev_velocity = sensor_fusion->velocity;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <flight_algorithm_update+0x234>)
 8002f1e:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8002f20:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <flight_algorithm_update+0x230>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d025      	beq.n	8002f74 <flight_algorithm_update+0x1f4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f2e:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <flight_algorithm_update+0x240>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3c:	d400      	bmi.n	8002f40 <flight_algorithm_update+0x1c0>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                // deploy_main_parachute(); // Actual deployment command
            }
            break;
 8002f3e:	e019      	b.n	8002f74 <flight_algorithm_update+0x1f4>
                current_phase = PHASE_MAIN_DESCENT;
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <flight_algorithm_update+0x208>)
 8002f42:	2203      	movs	r2, #3
 8002f44:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002f52:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002f54:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <flight_algorithm_update+0x218>)
 8002f60:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002f62:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <flight_algorithm_update+0x244>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <flight_algorithm_update+0x230>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
            break;
 8002f6e:	e001      	b.n	8002f74 <flight_algorithm_update+0x1f4>
            break;
 8002f70:	bf00      	nop
 8002f72:	e000      	b.n	8002f76 <flight_algorithm_update+0x1f6>
            break;
 8002f74:	bf00      	nop
        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }

    prev_altitude = bme->altitude;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a13      	ldr	r2, [pc, #76]	@ (8002fc8 <flight_algorithm_update+0x248>)
 8002f7c:	6013      	str	r3, [r2, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000294 	.word	0x20000294
 8002f8c:	20000004 	.word	0x20000004
 8002f90:	20000295 	.word	0x20000295
 8002f94:	200002a4 	.word	0x200002a4
 8002f98:	200002b0 	.word	0x200002b0
 8002f9c:	20000014 	.word	0x20000014
 8002fa0:	20000296 	.word	0x20000296
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20000010 	.word	0x20000010
 8002fac:	20000015 	.word	0x20000015
 8002fb0:	20000297 	.word	0x20000297
 8002fb4:	200002a0 	.word	0x200002a0
 8002fb8:	20000016 	.word	0x20000016
 8002fbc:	2000029c 	.word	0x2000029c
 8002fc0:	2000000c 	.word	0x2000000c
 8002fc4:	20000298 	.word	0x20000298
 8002fc8:	200002ac 	.word	0x200002ac

08002fcc <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8002fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->acc_y * bmi->acc_y) +
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->acc_z * bmi->acc_z));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8003004:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	eeb0 0a67 	vmov.f32	s0, s15
 8003010:	f00c fa80 	bl	800f514 <sqrtf>
 8003014:	eef0 7a40 	vmov.f32	s15, s0
}
 8003018:	eeb0 0a67 	vmov.f32	s0, s15
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
    return status_bits;
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <flight_algorithm_get_status_bits+0x14>)
 800302a:	881b      	ldrh	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	200002b0 	.word	0x200002b0

0800303c <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	ed87 0a03 	vstr	s0, [r7, #12]
 8003046:	edc7 0a02 	vstr	s1, [r7, #8]
 800304a:	ed87 1a01 	vstr	s2, [r7, #4]
 800304e:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <flight_algorithm_set_parameters+0x3c>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 8003058:	4a08      	ldr	r2, [pc, #32]	@ (800307c <flight_algorithm_set_parameters+0x40>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 800305e:	4a08      	ldr	r2, [pc, #32]	@ (8003080 <flight_algorithm_set_parameters+0x44>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 8003064:	4a07      	ldr	r2, [pc, #28]	@ (8003084 <flight_algorithm_set_parameters+0x48>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6013      	str	r3, [r2, #0]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000004 	.word	0x20000004
 800307c:	20000008 	.word	0x20000008
 8003080:	2000000c 	.word	0x2000000c
 8003084:	20000010 	.word	0x20000010

08003088 <flight_algorithm_get_start_time>:
/**
 * @brief Get flight start time in milliseconds
 * @return Flight start time from HAL_GetTick(), or 0 if flight hasn't started
 */
uint32_t flight_algorithm_get_start_time(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
    return flight_start_time;
 800308c:	4b03      	ldr	r3, [pc, #12]	@ (800309c <flight_algorithm_get_start_time+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	200002a4 	.word	0x200002a4

080030a0 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e01f      	b.n	8003106 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	e016      	b.n	80030fa <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d101      	bne.n	80030d8 <KalmanFilter_Init+0x38>
 80030d4:	491b      	ldr	r1, [pc, #108]	@ (8003144 <KalmanFilter_Init+0xa4>)
 80030d6:	e001      	b.n	80030dc <KalmanFilter_Init+0x3c>
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4413      	add	r3, r2
 80030ea:	3302      	adds	r3, #2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4403      	add	r3, r0
 80030f0:	3304      	adds	r3, #4
 80030f2:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	dde5      	ble.n	80030cc <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b02      	cmp	r3, #2
 800310a:	dddc      	ble.n	80030c6 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0e      	ldr	r2, [pc, #56]	@ (8003148 <KalmanFilter_Init+0xa8>)
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <KalmanFilter_Init+0xac>)
 8003116:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <KalmanFilter_Init+0xb0>)
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	42c80000 	.word	0x42c80000
 8003148:	3c23d70a 	.word	0x3c23d70a
 800314c:	3ba3d70a 	.word	0x3ba3d70a
 8003150:	40a00000 	.word	0x40a00000

08003154 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003160:	edc7 0a01 	vstr	s1, [r7, #4]
 8003164:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	edd3 7a01 	vldr	s15, [r3, #4]
 800316e:	eef0 7ae7 	vabs.f32	s15, s15
 8003172:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80031d8 <KalmanFilter_Update+0x84>
 8003176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	dd0f      	ble.n	80031a0 <KalmanFilter_Update+0x4c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	edd3 7a01 	vldr	s15, [r3, #4]
 8003186:	eef0 7ae7 	vabs.f32	s15, s15
 800318a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80031dc <KalmanFilter_Update+0x88>
 800318e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	d503      	bpl.n	80031a0 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	649a      	str	r2, [r3, #72]	@ 0x48
 800319e:	e002      	b.n	80031a6 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80031a6:	ed97 0a00 	vldr	s0, [r7]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f818 	bl	80031e0 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80031b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80031b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fa1d 	bl	80035f8 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f001 f96a 	bl	8004498 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	ee07 3a90 	vmov	s15, r3
}
 80031cc:	eeb0 0a67 	vmov.f32	s0, s15
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	43960000 	.word	0x43960000
 80031dc:	43af0000 	.word	0x43af0000

080031e0 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b0b6      	sub	sp, #216	@ 0xd8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 80031ec:	edd7 7a00 	vldr	s15, [r7]
 80031f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031f4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 80031f8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80031fc:	edd7 7a00 	vldr	s15, [r7]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003208:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800320c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003210:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	ed93 7a00 	vldr	s14, [r3]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003232:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003236:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800323a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800323e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003246:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	edd3 6a02 	vldr	s13, [r3, #8]
 8003256:	edd7 7a00 	vldr	s15, [r7]
 800325a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003274:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800327c:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003284:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800328e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003292:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800329a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032a2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80032a6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80032aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032b2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032ba:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80032be:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80032c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032ca:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032d2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 80032d6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80032da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032e2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032ea:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 80032ee:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80032f2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032fa:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 80032fe:	ed97 7a00 	vldr	s14, [r7]
 8003302:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800330a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 800330e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003312:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003316:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800331a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003322:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 8003326:	ed97 7a00 	vldr	s14, [r7]
 800332a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003332:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003336:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800333a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 800333e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003342:	657b      	str	r3, [r7, #84]	@ 0x54
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003348:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800334c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003350:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 8003354:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	663b      	str	r3, [r7, #96]	@ 0x60
 800335e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003362:	667b      	str	r3, [r7, #100]	@ 0x64
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	673b      	str	r3, [r7, #112]	@ 0x70
 8003374:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003378:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 800337a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800337e:	2224      	movs	r2, #36	@ 0x24
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f009 feb1 	bl	800d0ea <memset>
    float FPFT[3][3] = {0};
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	2224      	movs	r2, #36	@ 0x24
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f009 feaa 	bl	800d0ea <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800339c:	e06a      	b.n	8003474 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033a4:	e05d      	b.n	8003462 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80033a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	33d8      	adds	r3, #216	@ 0xd8
 80033ba:	443b      	add	r3, r7
 80033bc:	3ba8      	subs	r3, #168	@ 0xa8
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033ca:	e041      	b.n	8003450 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 80033cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80033d0:	4613      	mov	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	33d8      	adds	r3, #216	@ 0xd8
 80033e0:	443b      	add	r3, r7
 80033e2:	3ba8      	subs	r3, #168	@ 0xa8
 80033e4:	ed93 7a00 	vldr	s14, [r3]
 80033e8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	33d8      	adds	r3, #216	@ 0xd8
 80033fc:	443b      	add	r3, r7
 80033fe:	3b84      	subs	r3, #132	@ 0x84
 8003400:	edd3 6a00 	vldr	s13, [r3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003414:	4413      	add	r3, r2
 8003416:	3302      	adds	r3, #2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3304      	adds	r3, #4
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	33d8      	adds	r3, #216	@ 0xd8
 800343e:	443b      	add	r3, r7
 8003440:	3ba8      	subs	r3, #168	@ 0xa8
 8003442:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800344a:	3301      	adds	r3, #1
 800344c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003454:	2b02      	cmp	r3, #2
 8003456:	ddb9      	ble.n	80033cc <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800345c:	3301      	adds	r3, #1
 800345e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003462:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003466:	2b02      	cmp	r3, #2
 8003468:	dd9d      	ble.n	80033a6 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 800346a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800346e:	3301      	adds	r3, #1
 8003470:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003478:	2b02      	cmp	r3, #2
 800347a:	dd90      	ble.n	800339e <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003482:	e069      	b.n	8003558 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800348a:	e05c      	b.n	8003546 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 800348c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003490:	4613      	mov	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	33d8      	adds	r3, #216	@ 0xd8
 80034a0:	443b      	add	r3, r7
 80034a2:	3bcc      	subs	r3, #204	@ 0xcc
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034b0:	e040      	b.n	8003534 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80034b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	33d8      	adds	r3, #216	@ 0xd8
 80034c6:	443b      	add	r3, r7
 80034c8:	3bcc      	subs	r3, #204	@ 0xcc
 80034ca:	ed93 7a00 	vldr	s14, [r3]
 80034ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	33d8      	adds	r3, #216	@ 0xd8
 80034e2:	443b      	add	r3, r7
 80034e4:	3ba8      	subs	r3, #168	@ 0xa8
 80034e6:	edd3 6a00 	vldr	s13, [r3]
 80034ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	33d8      	adds	r3, #216	@ 0xd8
 80034fe:	443b      	add	r3, r7
 8003500:	3b84      	subs	r3, #132	@ 0x84
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	33d8      	adds	r3, #216	@ 0xd8
 8003522:	443b      	add	r3, r7
 8003524:	3bcc      	subs	r3, #204	@ 0xcc
 8003526:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800352a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352e:	3301      	adds	r3, #1
 8003530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003538:	2b02      	cmp	r3, #2
 800353a:	ddba      	ble.n	80034b2 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 800353c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003540:	3301      	adds	r3, #1
 8003542:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800354a:	2b02      	cmp	r3, #2
 800354c:	dd9e      	ble.n	800348c <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 800354e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003552:	3301      	adds	r3, #1
 8003554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800355c:	2b02      	cmp	r3, #2
 800355e:	dd91      	ble.n	8003484 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003566:	e03e      	b.n	80035e6 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800356e:	e031      	b.n	80035d4 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003570:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	33d8      	adds	r3, #216	@ 0xd8
 8003584:	443b      	add	r3, r7
 8003586:	3bcc      	subs	r3, #204	@ 0xcc
 8003588:	ed93 7a00 	vldr	s14, [r3]
 800358c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	33d8      	adds	r3, #216	@ 0xd8
 80035a0:	443b      	add	r3, r7
 80035a2:	3b60      	subs	r3, #96	@ 0x60
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035bc:	4413      	add	r3, r2
 80035be:	3302      	adds	r3, #2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3304      	adds	r3, #4
 80035c6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80035ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035ce:	3301      	adds	r3, #1
 80035d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035d8:	2b02      	cmp	r3, #2
 80035da:	ddc9      	ble.n	8003570 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 80035dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035e0:	3301      	adds	r3, #1
 80035e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	ddbc      	ble.n	8003568 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	37d8      	adds	r7, #216	@ 0xd8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b0f6      	sub	sp, #472	@ 0x1d8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003602:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003606:	6018      	str	r0, [r3, #0]
 8003608:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800360c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003610:	ed83 0a00 	vstr	s0, [r3]
 8003614:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003618:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800361c:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003620:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003624:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 826b 	beq.w	8003b08 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003642:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003646:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 800364a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800364e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003658:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800365c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	edd3 7a02 	vldr	s15, [r3, #8]
 8003666:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 800366a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366e:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 8003672:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800368c:	e044      	b.n	8003718 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 800368e:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8003692:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003696:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036a0:	3302      	adds	r3, #2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036b0:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 80036b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036b8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036c2:	3305      	adds	r3, #5
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d6:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 80036da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036de:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036e8:	3308      	adds	r3, #8
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003706:	443b      	add	r3, r7
 8003708:	3bac      	subs	r3, #172	@ 0xac
 800370a:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 800370e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003712:	3301      	adds	r3, #1
 8003714:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003718:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800371c:	2b02      	cmp	r3, #2
 800371e:	ddb6      	ble.n	800368e <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003720:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003724:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372c:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003730:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373c:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003740:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003750:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800375a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375e:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 8003762:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 800376e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003772:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377a:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003784:	e04f      	b.n	8003826 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 8003786:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800378a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	330c      	adds	r3, #12
 80037a0:	ed93 7a00 	vldr	s14, [r3]
 80037a4:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80037a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037b0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037b4:	6819      	ldr	r1, [r3, #0]
 80037b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3304      	adds	r3, #4
 80037c8:	edd3 6a00 	vldr	s13, [r3]
 80037cc:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80037d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3314      	adds	r3, #20
 80037f2:	edd3 6a00 	vldr	s13, [r3]
 80037f6:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80037fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003814:	443b      	add	r3, r7
 8003816:	3bb8      	subs	r3, #184	@ 0xb8
 8003818:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 800381c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003826:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800382a:	2b02      	cmp	r3, #2
 800382c:	ddab      	ble.n	8003786 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003834:	e029      	b.n	800388a <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003836:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800383a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	ed93 7a00 	vldr	s14, [r3]
 800384c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003856:	443b      	add	r3, r7
 8003858:	3bb8      	subs	r3, #184	@ 0xb8
 800385a:	edd3 6a00 	vldr	s13, [r3]
 800385e:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800386e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003880:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003884:	3301      	adds	r3, #1
 8003886:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800388a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800388e:	2b02      	cmp	r3, #2
 8003890:	ddd1      	ble.n	8003836 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003892:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003896:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800389a:	4618      	mov	r0, r3
 800389c:	2324      	movs	r3, #36	@ 0x24
 800389e:	461a      	mov	r2, r3
 80038a0:	2100      	movs	r1, #0
 80038a2:	f009 fc22 	bl	800d0ea <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80038a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80038ae:	4618      	mov	r0, r3
 80038b0:	2324      	movs	r3, #36	@ 0x24
 80038b2:	461a      	mov	r2, r3
 80038b4:	2100      	movs	r1, #0
 80038b6:	f009 fc18 	bl	800d0ea <memset>

        for (int i = 0; i < 3; i++) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80038c0:	e062      	b.n	8003988 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80038c8:	e055      	b.n	8003976 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 80038ca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80038d4:	443b      	add	r3, r7
 80038d6:	3bb8      	subs	r3, #184	@ 0xb8
 80038d8:	ed93 7a00 	vldr	s14, [r3]
 80038dc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80038e6:	443b      	add	r3, r7
 80038e8:	3ba0      	subs	r3, #160	@ 0xa0
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f6:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80038fa:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003912:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003916:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800391a:	429a      	cmp	r2, r3
 800391c:	d102      	bne.n	8003924 <KalmanFilter_MeasurementUpdate+0x32c>
 800391e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003922:	e001      	b.n	8003928 <KalmanFilter_MeasurementUpdate+0x330>
 8003924:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003c14 <KalmanFilter_MeasurementUpdate+0x61c>
 8003928:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800392c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003930:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003950:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003954:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 800396c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003970:	3301      	adds	r3, #1
 8003972:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003976:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800397a:	2b02      	cmp	r3, #2
 800397c:	dda5      	ble.n	80038ca <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 800397e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003982:	3301      	adds	r3, #1
 8003984:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003988:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800398c:	2b02      	cmp	r3, #2
 800398e:	dd98      	ble.n	80038c2 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003996:	e076      	b.n	8003a86 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800399e:	e069      	b.n	8003a74 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 80039a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039a4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80039a8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80039c8:	e04b      	b.n	8003a62 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80039ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ce:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80039d2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	ed93 7a00 	vldr	s14, [r3]
 80039ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ee:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80039f2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80039f6:	4613      	mov	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4413      	add	r3, r2
 80039fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	edd3 6a00 	vldr	s13, [r3]
 8003a0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a0e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a22:	4413      	add	r3, r2
 8003a24:	3302      	adds	r3, #2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a38:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a3c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003a40:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003a58:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003a62:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	ddaf      	ble.n	80039ca <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003a6a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003a74:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	dd91      	ble.n	80039a0 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003a7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a80:	3301      	adds	r3, #1
 8003a82:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a86:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	dd84      	ble.n	8003998 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003a94:	e032      	b.n	8003afc <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003a9c:	e025      	b.n	8003aea <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003a9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aa2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003aa6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ac0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4403      	add	r3, r0
 8003adc:	3304      	adds	r3, #4
 8003ade:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003ae0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003aea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	ddd5      	ble.n	8003a9e <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003af2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003af6:	3301      	adds	r3, #1
 8003af8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003afc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	ddc8      	ble.n	8003a96 <KalmanFilter_MeasurementUpdate+0x49e>
 8003b04:	f000 bcc2 	b.w	800448c <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003b08:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <KalmanFilter_MeasurementUpdate+0x620>)
 8003b0a:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003b0e:	461d      	mov	r5, r3
 8003b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b18:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003b1c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b20:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b2a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b2e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003b38:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003b3c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b40:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4e:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003b52:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003b56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b5a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b68:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003b6c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
 8003b7c:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003b7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	6053      	str	r3, [r2, #4]
 8003b8e:	6093      	str	r3, [r2, #8]
 8003b90:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003b92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b96:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003b9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ba2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003bc4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bc8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003bd0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bd4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bd8:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003be0:	e079      	b.n	8003cd6 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003be8:	e06c      	b.n	8003cc4 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003bea:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c00:	443b      	add	r3, r7
 8003c02:	3bf8      	subs	r3, #248	@ 0xf8
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003c10:	e04f      	b.n	8003cb2 <KalmanFilter_MeasurementUpdate+0x6ba>
 8003c12:	bf00      	nop
 8003c14:	00000000 	.word	0x00000000
 8003c18:	080119f0 	.word	0x080119f0
 8003c1c:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003c20:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c36:	443b      	add	r3, r7
 8003c38:	3bf8      	subs	r3, #248	@ 0xf8
 8003c3a:	ed93 7a00 	vldr	s14, [r3]
 8003c3e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c54:	443b      	add	r3, r7
 8003c56:	3bd0      	subs	r3, #208	@ 0xd0
 8003c58:	edd3 6a00 	vldr	s13, [r3]
 8003c5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c60:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c74:	4413      	add	r3, r2
 8003c76:	3302      	adds	r3, #2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	edd3 7a00 	vldr	s15, [r3]
 8003c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ca0:	443b      	add	r3, r7
 8003ca2:	3bf8      	subs	r3, #248	@ 0xf8
 8003ca4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ca8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003cac:	3301      	adds	r3, #1
 8003cae:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003cb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	ddb2      	ble.n	8003c20 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003cba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003cc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	dd8e      	ble.n	8003bea <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003ccc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003cd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	dd81      	ble.n	8003be2 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ce4:	e098      	b.n	8003e18 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003cec:	e08a      	b.n	8003e04 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003cee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cf2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003cf6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003cfa:	0059      	lsls	r1, r3, #1
 8003cfc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d00:	440b      	add	r3, r1
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003d12:	e042      	b.n	8003d9a <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003d14:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d18:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003d1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d20:	0059      	lsls	r1, r3, #1
 8003d22:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d26:	440b      	add	r3, r1
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	ed93 7a00 	vldr	s14, [r3]
 8003d30:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d46:	443b      	add	r3, r7
 8003d48:	3bf8      	subs	r3, #248	@ 0xf8
 8003d4a:	edd3 6a00 	vldr	s13, [r3]
 8003d4e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d64:	443b      	add	r3, r7
 8003d66:	3bd0      	subs	r3, #208	@ 0xd0
 8003d68:	edd3 7a00 	vldr	s15, [r3]
 8003d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d78:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003d7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d80:	0059      	lsls	r1, r3, #1
 8003d82:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d86:	440b      	add	r3, r1
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003d90:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003d94:	3301      	adds	r3, #1
 8003d96:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003d9a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	ddb8      	ble.n	8003d14 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003da2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003da6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003daa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003dae:	0059      	lsls	r1, r3, #1
 8003db0:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003db4:	440b      	add	r3, r1
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dc2:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003dc6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003dca:	0059      	lsls	r1, r3, #1
 8003dcc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003dd0:	440b      	add	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003de2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003de6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003dea:	0059      	lsls	r1, r3, #1
 8003dec:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003df0:	440b      	add	r3, r1
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003dfa:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e04:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f77f af70 	ble.w	8003cee <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003e0e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e12:	3301      	adds	r3, #1
 8003e14:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f77f af62 	ble.w	8003ce6 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003e22:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e2a:	ed93 7a00 	vldr	s14, [r3]
 8003e2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e36:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e46:	edd3 6a01 	vldr	s13, [r3, #4]
 8003e4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e52:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e5e:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003e62:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003e66:	eef0 7ae7 	vabs.f32	s15, s15
 8003e6a:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003c1c <KalmanFilter_MeasurementUpdate+0x624>
 8003e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	f100 8308 	bmi.w	800448a <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003e7a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e82:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e86:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003e8e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e96:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003e9a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ea2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ea6:	eef1 6a67 	vneg.f32	s13, s15
 8003eaa:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003eb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003eba:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8003ebe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ec6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eca:	eef1 6a67 	vneg.f32	s13, s15
 8003ece:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003ed6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ede:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8003ee2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eea:	edd3 6a00 	vldr	s13, [r3]
 8003eee:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003ef6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003efa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003efe:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8003f02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f06:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	6053      	str	r3, [r2, #4]
 8003f12:	6093      	str	r3, [r2, #8]
 8003f14:	60d3      	str	r3, [r2, #12]
 8003f16:	6113      	str	r3, [r2, #16]
 8003f18:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8003f1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f1e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003f22:	461a      	mov	r2, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	6053      	str	r3, [r2, #4]
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	60d3      	str	r3, [r2, #12]
 8003f2e:	6113      	str	r3, [r2, #16]
 8003f30:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003f38:	e06f      	b.n	800401a <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003f40:	e062      	b.n	8004008 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8003f42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f46:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f4a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f4e:	0059      	lsls	r1, r3, #1
 8003f50:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f54:	440b      	add	r3, r1
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003f66:	e046      	b.n	8003ff6 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003f68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f6c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f74:	0059      	lsls	r1, r3, #1
 8003f76:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f7a:	440b      	add	r3, r1
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	ed93 7a00 	vldr	s14, [r3]
 8003f84:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f88:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	edd3 6a00 	vldr	s13, [r3]
 8003faa:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003fc0:	443b      	add	r3, r7
 8003fc2:	3bd0      	subs	r3, #208	@ 0xd0
 8003fc4:	edd3 7a00 	vldr	s15, [r3]
 8003fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fd4:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003fd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003fdc:	0059      	lsls	r1, r3, #1
 8003fde:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fe2:	440b      	add	r3, r1
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003fec:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003ff6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	ddb4      	ble.n	8003f68 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8003ffe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004002:	3301      	adds	r3, #1
 8004004:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004008:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800400c:	2b01      	cmp	r3, #1
 800400e:	dd98      	ble.n	8003f42 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8004010:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004014:	3301      	adds	r3, #1
 8004016:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800401a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800401e:	2b02      	cmp	r3, #2
 8004020:	dd8b      	ble.n	8003f3a <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004028:	e069      	b.n	80040fe <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004030:	e05c      	b.n	80040ec <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8004032:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004036:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800403a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800403e:	0059      	lsls	r1, r3, #1
 8004040:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004044:	440b      	add	r3, r1
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004056:	e040      	b.n	80040da <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8004058:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800405c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004060:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004064:	0059      	lsls	r1, r3, #1
 8004066:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800406a:	440b      	add	r3, r1
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	ed93 7a00 	vldr	s14, [r3]
 8004074:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004078:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800407c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004080:	0059      	lsls	r1, r3, #1
 8004082:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004086:	440b      	add	r3, r1
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	edd3 6a00 	vldr	s13, [r3]
 8004090:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004094:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8004098:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800409c:	0059      	lsls	r1, r3, #1
 800409e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040a2:	440b      	add	r3, r1
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80040bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80040c0:	0059      	lsls	r1, r3, #1
 80040c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040c6:	440b      	add	r3, r1
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80040d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040d4:	3301      	adds	r3, #1
 80040d6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80040da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040de:	2b01      	cmp	r3, #1
 80040e0:	ddba      	ble.n	8004058 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 80040e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040e6:	3301      	adds	r3, #1
 80040e8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80040ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	dd9e      	ble.n	8004032 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 80040f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80040f8:	3301      	adds	r3, #1
 80040fa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80040fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004102:	2b02      	cmp	r3, #2
 8004104:	dd91      	ble.n	800402a <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800410c:	e042      	b.n	8004194 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004114:	e035      	b.n	8004182 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 8004116:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800411a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	ed93 7a00 	vldr	s14, [r3]
 800412c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004130:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004134:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004138:	0059      	lsls	r1, r3, #1
 800413a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800413e:	440b      	add	r3, r1
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	edd3 6a00 	vldr	s13, [r3]
 8004148:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004152:	443b      	add	r3, r7
 8004154:	3be0      	subs	r3, #224	@ 0xe0
 8004156:	edd3 7a00 	vldr	s15, [r3]
 800415a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004166:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004178:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800417c:	3301      	adds	r3, #1
 800417e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004182:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004186:	2b01      	cmp	r3, #1
 8004188:	ddc5      	ble.n	8004116 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 800418a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800418e:	3301      	adds	r3, #1
 8004190:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004194:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004198:	2b02      	cmp	r3, #2
 800419a:	ddb8      	ble.n	800410e <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 800419c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041a0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80041a4:	4618      	mov	r0, r3
 80041a6:	2324      	movs	r3, #36	@ 0x24
 80041a8:	461a      	mov	r2, r3
 80041aa:	2100      	movs	r1, #0
 80041ac:	f008 ff9d 	bl	800d0ea <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80041b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041b4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80041b8:	4618      	mov	r0, r3
 80041ba:	2324      	movs	r3, #36	@ 0x24
 80041bc:	461a      	mov	r2, r3
 80041be:	2100      	movs	r1, #0
 80041c0:	f008 ff93 	bl	800d0ea <memset>

        for (int i = 0; i < 3; i++) {
 80041c4:	2300      	movs	r3, #0
 80041c6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80041ca:	e09e      	b.n	800430a <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80041d2:	e090      	b.n	80042f6 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 80041d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041d8:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80041dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80041fc:	e045      	b.n	800428a <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 80041fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004202:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004206:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	ed93 7a00 	vldr	s14, [r3]
 800421e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004222:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004226:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800422a:	0059      	lsls	r1, r3, #1
 800422c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004230:	440b      	add	r3, r1
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	edd3 6a00 	vldr	s13, [r3]
 800423a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004250:	443b      	add	r3, r7
 8004252:	3bd0      	subs	r3, #208	@ 0xd0
 8004254:	edd3 7a00 	vldr	s15, [r3]
 8004258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800425c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004260:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004264:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004268:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004280:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004284:	3301      	adds	r3, #1
 8004286:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800428a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800428e:	2b01      	cmp	r3, #1
 8004290:	ddb5      	ble.n	80041fe <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8004292:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004296:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800429a:	429a      	cmp	r2, r3
 800429c:	d102      	bne.n	80042a4 <KalmanFilter_MeasurementUpdate+0xcac>
 800429e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042a2:	e001      	b.n	80042a8 <KalmanFilter_MeasurementUpdate+0xcb0>
 80042a4:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004494 <KalmanFilter_MeasurementUpdate+0xe9c>
 80042a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042ac:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80042b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042d0:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80042d4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 80042ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80042f0:	3301      	adds	r3, #1
 80042f2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80042f6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f77f af6a 	ble.w	80041d4 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004300:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004304:	3301      	adds	r3, #1
 8004306:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800430a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800430e:	2b02      	cmp	r3, #2
 8004310:	f77f af5c 	ble.w	80041cc <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800431a:	e076      	b.n	800440a <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004322:	e069      	b.n	80043f8 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004324:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004328:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800432c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800434c:	e04b      	b.n	80043e6 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 800434e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004352:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004356:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	ed93 7a00 	vldr	s14, [r3]
 800436e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004372:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004376:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	edd3 6a00 	vldr	s13, [r3]
 800438e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004392:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80043a6:	4413      	add	r3, r2
 80043a8:	3302      	adds	r3, #2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	3304      	adds	r3, #4
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043c0:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80043c4:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80043c8:	4613      	mov	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4413      	add	r3, r2
 80043ce:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80043dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80043e0:	3301      	adds	r3, #1
 80043e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80043e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	ddaf      	ble.n	800434e <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 80043ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80043f2:	3301      	adds	r3, #1
 80043f4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80043f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	dd91      	ble.n	8004324 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004400:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004404:	3301      	adds	r3, #1
 8004406:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800440a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800440e:	2b02      	cmp	r3, #2
 8004410:	dd84      	ble.n	800431c <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004418:	e032      	b.n	8004480 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004420:	e025      	b.n	800446e <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 8004422:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004426:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800442a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004444:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004458:	4413      	add	r3, r2
 800445a:	3302      	adds	r3, #2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4403      	add	r3, r0
 8004460:	3304      	adds	r3, #4
 8004462:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8004464:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004468:	3301      	adds	r3, #1
 800446a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800446e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004472:	2b02      	cmp	r3, #2
 8004474:	ddd5      	ble.n	8004422 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 8004476:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800447a:	3301      	adds	r3, #1
 800447c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004480:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004484:	2b02      	cmp	r3, #2
 8004486:	ddc8      	ble.n	800441a <KalmanFilter_MeasurementUpdate+0xe22>
 8004488:	e000      	b.n	800448c <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 800448a:	bf00      	nop
            }
        }
    }
}
 800448c:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8004490:	46bd      	mov	sp, r7
 8004492:	bdb0      	pop	{r4, r5, r7, pc}
 8004494:	00000000 	.word	0x00000000

08004498 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80044a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d517      	bpl.n	80044e0 <KalmanFilter_DetectApogee+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80044bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	d50c      	bpl.n	80044e0 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	dd06      	ble.n	80044e6 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80044de:	e002      	b.n	80044e6 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	ee07 3a90 	vmov	s15, r3
}
 800450e:	eeb0 0a67 	vmov.f32	s0, s15
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800453a:	f003 fa27 	bl	800798c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800453e:	f000 f8b1 	bl	80046a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004542:	f000 fa41 	bl	80049c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004546:	f000 fa17 	bl	8004978 <MX_DMA_Init>
  MX_I2C1_Init();
 800454a:	f000 f917 	bl	800477c <MX_I2C1_Init>
  MX_I2C3_Init();
 800454e:	f000 f943 	bl	80047d8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004552:	f000 f96f 	bl	8004834 <MX_TIM2_Init>
  MX_UART5_Init();
 8004556:	f000 f9bb 	bl	80048d0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800455a:	f000 f9e3 	bl	8004924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


	MX_TIM2_Init();
 800455e:	f000 f969 	bl	8004834 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004562:	4844      	ldr	r0, [pc, #272]	@ (8004674 <main+0x140>)
 8004564:	f006 f902 	bl	800a76c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004568:	2200      	movs	r2, #0
 800456a:	2101      	movs	r1, #1
 800456c:	201c      	movs	r0, #28
 800456e:	f003 fb7e 	bl	8007c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004572:	201c      	movs	r0, #28
 8004574:	f003 fb97 	bl	8007ca6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8004578:	2201      	movs	r2, #1
 800457a:	2100      	movs	r1, #0
 800457c:	2028      	movs	r0, #40	@ 0x28
 800457e:	f003 fb76 	bl	8007c6e <HAL_NVIC_SetPriority>


	bme280_begin();
 8004582:	f000 fac7 	bl	8004b14 <bme280_begin>
	bmi088_begin();
 8004586:	f000 fadd 	bl	8004b44 <bmi088_begin>
	HAL_Delay(1000);
 800458a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800458e:	f003 fa6f 	bl	8007a70 <HAL_Delay>
	bme280_config();
 8004592:	f7fc ff23 	bl	80013dc <bme280_config>
	bmi088_config();
 8004596:	f7fd fd05 	bl	8001fa4 <bmi088_config>
	if(is_BMI_ok){
 800459a:	4b37      	ldr	r3, [pc, #220]	@ (8004678 <main+0x144>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <main+0x72>
		  getOffset();
 80045a2:	f7fe fb0d 	bl	8002bc0 <getOffset>
	}

	bme280_update();
 80045a6:	f7fd f8d5 	bl	8001754 <bme280_update>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045aa:	2028      	movs	r0, #40	@ 0x28
 80045ac:	f003 fb7b 	bl	8007ca6 <HAL_NVIC_EnableIRQ>
	BMI_sensor.rawDatas.isGyroUpdated = 0;
 80045b0:	4b32      	ldr	r3, [pc, #200]	@ (800467c <main+0x148>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	755a      	strb	r2, [r3, #21]
	BMI_sensor.rawDatas.isAccelUpdated = 0;
 80045b6:	4b31      	ldr	r3, [pc, #196]	@ (800467c <main+0x148>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	759a      	strb	r2, [r3, #22]

	getInitialQuaternion();
 80045bc:	f002 f81e 	bl	80065fc <getInitialQuaternion>

	//Lora Ayarı
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);

	sensor_fusion_init(&BME280_sensor);
 80045c0:	482f      	ldr	r0, [pc, #188]	@ (8004680 <main+0x14c>)
 80045c2:	f002 fa9d 	bl	8006b00 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, 36);
 80045c6:	2224      	movs	r2, #36	@ 0x24
 80045c8:	492e      	ldr	r1, [pc, #184]	@ (8004684 <main+0x150>)
 80045ca:	482f      	ldr	r0, [pc, #188]	@ (8004688 <main+0x154>)
 80045cc:	f006 fe46 	bl	800b25c <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(50.0,2000.0,500.0,60.0);
 80045d0:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 800468c <main+0x158>
 80045d4:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8004690 <main+0x15c>
 80045d8:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8004694 <main+0x160>
 80045dc:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8004698 <main+0x164>
 80045e0:	f7fe fd2c 	bl	800303c <flight_algorithm_set_parameters>


	uart_handler_init();
 80045e4:	f003 f810 	bl	8007608 <uart_handler_init>
	flight_algorithm_init();
 80045e8:	f7fe fb74 	bl	8002cd4 <flight_algorithm_init>
    /* USER CODE BEGIN 3 */




	bmi088_update();
 80045ec:	f7fd ff20 	bl	8002430 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80045f0:	492a      	ldr	r1, [pc, #168]	@ (800469c <main+0x168>)
 80045f2:	4822      	ldr	r0, [pc, #136]	@ (800467c <main+0x148>)
 80045f4:	f002 fb8a 	bl	8006d0c <sensor_fusion_update_mahony>
		  bme280_update();
 80045f8:	f7fd f8ac 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 80045fc:	f003 f81e 	bl	800763c <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 8004600:	f003 f91a 	bl	8007838 <uart_handler_command_ready>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <main+0xe8>
			  uart_handler_clear_command_flag();
 800460a:	f003 f943 	bl	8007894 <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 800460e:	f003 f907 	bl	8007820 <uart_handler_get_mode>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <main+0xe8>
				  flight_algorithm_reset();
 8004618:	f7fe fb62 	bl	8002ce0 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 800461c:	4b20      	ldr	r3, [pc, #128]	@ (80046a0 <main+0x16c>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0e2      	beq.n	80045ec <main+0xb8>
			tx_timer_flag = 0;
 8004626:	4b1e      	ldr	r3, [pc, #120]	@ (80046a0 <main+0x16c>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
			IMU_visual();
 800462c:	f000 fb36 	bl	8004c9c <IMU_visual>
			SystemMode_t current_mode = uart_handler_get_mode();
 8004630:	f003 f8f6 	bl	8007820 <uart_handler_get_mode>
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d016      	beq.n	800466c <main+0x138>
 800463e:	2b02      	cmp	r3, #2
 8004640:	dcd4      	bgt.n	80045ec <main+0xb8>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <main+0x118>
 8004646:	2b01      	cmp	r3, #1
 8004648:	d00b      	beq.n	8004662 <main+0x12e>
 800464a:	e012      	b.n	8004672 <main+0x13e>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 800464c:	4a13      	ldr	r2, [pc, #76]	@ (800469c <main+0x168>)
 800464e:	490b      	ldr	r1, [pc, #44]	@ (800467c <main+0x148>)
 8004650:	480b      	ldr	r0, [pc, #44]	@ (8004680 <main+0x14c>)
 8004652:	f002 faa9 	bl	8006ba8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004656:	4a11      	ldr	r2, [pc, #68]	@ (800469c <main+0x168>)
 8004658:	4908      	ldr	r1, [pc, #32]	@ (800467c <main+0x148>)
 800465a:	4809      	ldr	r0, [pc, #36]	@ (8004680 <main+0x14c>)
 800465c:	f7fe fb90 	bl	8002d80 <flight_algorithm_update>
						break;
 8004660:	e007      	b.n	8004672 <main+0x13e>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8004662:	4906      	ldr	r1, [pc, #24]	@ (800467c <main+0x148>)
 8004664:	4806      	ldr	r0, [pc, #24]	@ (8004680 <main+0x14c>)
 8004666:	f002 fef1 	bl	800744c <test_modes_handle_sit>
						break;
 800466a:	e002      	b.n	8004672 <main+0x13e>

					case MODE_SUT:
						algorithm_update_sut();
 800466c:	f002 ff06 	bl	800747c <algorithm_update_sut>
						break;
 8004670:	bf00      	nop
	bmi088_update();
 8004672:	e7bb      	b.n	80045ec <main+0xb8>
 8004674:	2000035c 	.word	0x2000035c
 8004678:	20000740 	.word	0x20000740
 800467c:	20000538 	.word	0x20000538
 8004680:	200004f4 	.word	0x200004f4
 8004684:	20000674 	.word	0x20000674
 8004688:	200003ec 	.word	0x200003ec
 800468c:	42700000 	.word	0x42700000
 8004690:	43fa0000 	.word	0x43fa0000
 8004694:	44fa0000 	.word	0x44fa0000
 8004698:	42480000 	.word	0x42480000
 800469c:	20000648 	.word	0x20000648
 80046a0:	20000748 	.word	0x20000748

080046a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b094      	sub	sp, #80	@ 0x50
 80046a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046aa:	f107 031c 	add.w	r3, r7, #28
 80046ae:	2234      	movs	r2, #52	@ 0x34
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f008 fd19 	bl	800d0ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	2300      	movs	r3, #0
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <SystemClock_Config+0xd0>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	4a28      	ldr	r2, [pc, #160]	@ (8004774 <SystemClock_Config+0xd0>)
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d8:	4b26      	ldr	r3, [pc, #152]	@ (8004774 <SystemClock_Config+0xd0>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e4:	2300      	movs	r3, #0
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <SystemClock_Config+0xd4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <SystemClock_Config+0xd4>)
 80046ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <SystemClock_Config+0xd4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004700:	2301      	movs	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004708:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800470a:	2302      	movs	r3, #2
 800470c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800470e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004714:	2308      	movs	r3, #8
 8004716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004718:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800471c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800471e:	2302      	movs	r3, #2
 8004720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004722:	2302      	movs	r3, #2
 8004724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004726:	2302      	movs	r3, #2
 8004728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800472a:	f107 031c 	add.w	r3, r7, #28
 800472e:	4618      	mov	r0, r3
 8004730:	f005 fd2e 	bl	800a190 <HAL_RCC_OscConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800473a:	f000 fb4b 	bl	8004dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800473e:	230f      	movs	r3, #15
 8004740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004742:	2302      	movs	r3, #2
 8004744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800474a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800474e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004754:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	2105      	movs	r1, #5
 800475c:	4618      	mov	r0, r3
 800475e:	f005 f9cd 	bl	8009afc <HAL_RCC_ClockConfig>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004768:	f000 fb34 	bl	8004dd4 <Error_Handler>
  }
}
 800476c:	bf00      	nop
 800476e:	3750      	adds	r7, #80	@ 0x50
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000

0800477c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004780:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <MX_I2C1_Init+0x50>)
 8004782:	4a13      	ldr	r2, [pc, #76]	@ (80047d0 <MX_I2C1_Init+0x54>)
 8004784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004786:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <MX_I2C1_Init+0x50>)
 8004788:	4a12      	ldr	r2, [pc, #72]	@ (80047d4 <MX_I2C1_Init+0x58>)
 800478a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800478c:	4b0f      	ldr	r3, [pc, #60]	@ (80047cc <MX_I2C1_Init+0x50>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004792:	4b0e      	ldr	r3, [pc, #56]	@ (80047cc <MX_I2C1_Init+0x50>)
 8004794:	2200      	movs	r2, #0
 8004796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <MX_I2C1_Init+0x50>)
 800479a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800479e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <MX_I2C1_Init+0x50>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80047a6:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <MX_I2C1_Init+0x50>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047ac:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <MX_I2C1_Init+0x50>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <MX_I2C1_Init+0x50>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047b8:	4804      	ldr	r0, [pc, #16]	@ (80047cc <MX_I2C1_Init+0x50>)
 80047ba:	f004 f94b 	bl	8008a54 <HAL_I2C_Init>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80047c4:	f000 fb06 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200002b4 	.word	0x200002b4
 80047d0:	40005400 	.word	0x40005400
 80047d4:	000186a0 	.word	0x000186a0

080047d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80047dc:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <MX_I2C3_Init+0x50>)
 80047de:	4a13      	ldr	r2, [pc, #76]	@ (800482c <MX_I2C3_Init+0x54>)
 80047e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80047e2:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <MX_I2C3_Init+0x50>)
 80047e4:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <MX_I2C3_Init+0x58>)
 80047e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <MX_I2C3_Init+0x50>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80047ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004828 <MX_I2C3_Init+0x50>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <MX_I2C3_Init+0x50>)
 80047f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <MX_I2C3_Init+0x50>)
 80047fe:	2200      	movs	r2, #0
 8004800:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004802:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <MX_I2C3_Init+0x50>)
 8004804:	2200      	movs	r2, #0
 8004806:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <MX_I2C3_Init+0x50>)
 800480a:	2200      	movs	r2, #0
 800480c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <MX_I2C3_Init+0x50>)
 8004810:	2200      	movs	r2, #0
 8004812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004814:	4804      	ldr	r0, [pc, #16]	@ (8004828 <MX_I2C3_Init+0x50>)
 8004816:	f004 f91d 	bl	8008a54 <HAL_I2C_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004820:	f000 fad8 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004824:	bf00      	nop
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000308 	.word	0x20000308
 800482c:	40005c00 	.word	0x40005c00
 8004830:	000186a0 	.word	0x000186a0

08004834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	609a      	str	r2, [r3, #8]
 8004846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004848:	463b      	mov	r3, r7
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004850:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <MX_TIM2_Init+0x98>)
 8004852:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8004858:	4b1c      	ldr	r3, [pc, #112]	@ (80048cc <MX_TIM2_Init+0x98>)
 800485a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800485e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004860:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <MX_TIM2_Init+0x98>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004866:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <MX_TIM2_Init+0x98>)
 8004868:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800486c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800486e:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <MX_TIM2_Init+0x98>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004874:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <MX_TIM2_Init+0x98>)
 8004876:	2200      	movs	r2, #0
 8004878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800487a:	4814      	ldr	r0, [pc, #80]	@ (80048cc <MX_TIM2_Init+0x98>)
 800487c:	f005 ff26 	bl	800a6cc <HAL_TIM_Base_Init>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004886:	f000 faa5 	bl	8004dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800488a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800488e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	4619      	mov	r1, r3
 8004896:	480d      	ldr	r0, [pc, #52]	@ (80048cc <MX_TIM2_Init+0x98>)
 8004898:	f006 f8c8 	bl	800aa2c <HAL_TIM_ConfigClockSource>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80048a2:	f000 fa97 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048ae:	463b      	mov	r3, r7
 80048b0:	4619      	mov	r1, r3
 80048b2:	4806      	ldr	r0, [pc, #24]	@ (80048cc <MX_TIM2_Init+0x98>)
 80048b4:	f006 faea 	bl	800ae8c <HAL_TIMEx_MasterConfigSynchronization>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80048be:	f000 fa89 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	2000035c 	.word	0x2000035c

080048d0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80048d4:	4b11      	ldr	r3, [pc, #68]	@ (800491c <MX_UART5_Init+0x4c>)
 80048d6:	4a12      	ldr	r2, [pc, #72]	@ (8004920 <MX_UART5_Init+0x50>)
 80048d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80048da:	4b10      	ldr	r3, [pc, #64]	@ (800491c <MX_UART5_Init+0x4c>)
 80048dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80048e2:	4b0e      	ldr	r3, [pc, #56]	@ (800491c <MX_UART5_Init+0x4c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80048e8:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <MX_UART5_Init+0x4c>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <MX_UART5_Init+0x4c>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80048f4:	4b09      	ldr	r3, [pc, #36]	@ (800491c <MX_UART5_Init+0x4c>)
 80048f6:	220c      	movs	r2, #12
 80048f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048fa:	4b08      	ldr	r3, [pc, #32]	@ (800491c <MX_UART5_Init+0x4c>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004900:	4b06      	ldr	r3, [pc, #24]	@ (800491c <MX_UART5_Init+0x4c>)
 8004902:	2200      	movs	r2, #0
 8004904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004906:	4805      	ldr	r0, [pc, #20]	@ (800491c <MX_UART5_Init+0x4c>)
 8004908:	f006 fb50 	bl	800afac <HAL_UART_Init>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004912:	f000 fa5f 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	200003a4 	.word	0x200003a4
 8004920:	40005000 	.word	0x40005000

08004924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004928:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 800492a:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <MX_USART1_UART_Init+0x50>)
 800492c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 8004930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004936:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800493c:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 800493e:	2200      	movs	r2, #0
 8004940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004942:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 8004944:	2200      	movs	r2, #0
 8004946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 800494a:	220c      	movs	r2, #12
 800494c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800494e:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 8004956:	2200      	movs	r2, #0
 8004958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800495a:	4805      	ldr	r0, [pc, #20]	@ (8004970 <MX_USART1_UART_Init+0x4c>)
 800495c:	f006 fb26 	bl	800afac <HAL_UART_Init>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004966:	f000 fa35 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200003ec 	.word	0x200003ec
 8004974:	40011000 	.word	0x40011000

08004978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <MX_DMA_Init+0x4c>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	4a0f      	ldr	r2, [pc, #60]	@ (80049c4 <MX_DMA_Init+0x4c>)
 8004988:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800498c:	6313      	str	r3, [r2, #48]	@ 0x30
 800498e:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <MX_DMA_Init+0x4c>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	2100      	movs	r1, #0
 800499e:	203a      	movs	r0, #58	@ 0x3a
 80049a0:	f003 f965 	bl	8007c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80049a4:	203a      	movs	r0, #58	@ 0x3a
 80049a6:	f003 f97e 	bl	8007ca6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2100      	movs	r1, #0
 80049ae:	2046      	movs	r0, #70	@ 0x46
 80049b0:	f003 f95d 	bl	8007c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80049b4:	2046      	movs	r0, #70	@ 0x46
 80049b6:	f003 f976 	bl	8007ca6 <HAL_NVIC_EnableIRQ>

}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800

080049c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	@ 0x28
 80049cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	609a      	str	r2, [r3, #8]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	4b49      	ldr	r3, [pc, #292]	@ (8004b08 <MX_GPIO_Init+0x140>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e6:	4a48      	ldr	r2, [pc, #288]	@ (8004b08 <MX_GPIO_Init+0x140>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ee:	4b46      	ldr	r3, [pc, #280]	@ (8004b08 <MX_GPIO_Init+0x140>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b42      	ldr	r3, [pc, #264]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	4a41      	ldr	r2, [pc, #260]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	4a3a      	ldr	r2, [pc, #232]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a26:	4b38      	ldr	r3, [pc, #224]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	4b34      	ldr	r3, [pc, #208]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	4a33      	ldr	r2, [pc, #204]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a42:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	4b2d      	ldr	r3, [pc, #180]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	4a2c      	ldr	r2, [pc, #176]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a58:	f043 0308 	orr.w	r3, r3, #8
 8004a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b08 <MX_GPIO_Init+0x140>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a70:	4826      	ldr	r0, [pc, #152]	@ (8004b0c <MX_GPIO_Init+0x144>)
 8004a72:	f003 ffbd 	bl	80089f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	481f      	ldr	r0, [pc, #124]	@ (8004b0c <MX_GPIO_Init+0x144>)
 8004a8e:	f003 fd27 	bl	80084e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4818      	ldr	r0, [pc, #96]	@ (8004b0c <MX_GPIO_Init+0x144>)
 8004aac:	f003 fd18 	bl	80084e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ab6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4812      	ldr	r0, [pc, #72]	@ (8004b10 <MX_GPIO_Init+0x148>)
 8004ac8:	f003 fd0a 	bl	80084e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2028      	movs	r0, #40	@ 0x28
 8004ad2:	f003 f8cc 	bl	8007c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ad6:	2028      	movs	r0, #40	@ 0x28
 8004ad8:	f003 f8e5 	bl	8007ca6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004adc:	2200      	movs	r2, #0
 8004ade:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ae2:	480a      	ldr	r0, [pc, #40]	@ (8004b0c <MX_GPIO_Init+0x144>)
 8004ae4:	f003 ff84 	bl	80089f0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004ae8:	2032      	movs	r0, #50	@ 0x32
 8004aea:	f002 ffc1 	bl	8007a70 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004aee:	2201      	movs	r2, #1
 8004af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004af4:	4805      	ldr	r0, [pc, #20]	@ (8004b0c <MX_GPIO_Init+0x144>)
 8004af6:	f003 ff7b 	bl	80089f0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004afa:	2032      	movs	r0, #50	@ 0x32
 8004afc:	f002 ffb8 	bl	8007a70 <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b00:	bf00      	nop
 8004b02:	3728      	adds	r7, #40	@ 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	40020000 	.word	0x40020000

08004b14 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004b18:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <bme280_begin+0x28>)
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004b1e:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <bme280_begin+0x28>)
 8004b20:	2203      	movs	r2, #3
 8004b22:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <bme280_begin+0x28>)
 8004b26:	2204      	movs	r2, #4
 8004b28:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8004b2a:	4b04      	ldr	r3, [pc, #16]	@ (8004b3c <bme280_begin+0x28>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 8004b30:	4903      	ldr	r1, [pc, #12]	@ (8004b40 <bme280_begin+0x2c>)
 8004b32:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <bme280_begin+0x28>)
 8004b34:	f7fc fdd6 	bl	80016e4 <bme280_init>

}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	200004f4 	.word	0x200004f4
 8004b40:	200002b4 	.word	0x200002b4

08004b44 <bmi088_begin>:

void bmi088_begin()
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8004b48:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b50:	2209      	movs	r2, #9
 8004b52:	769a      	strb	r2, [r3, #26]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	75da      	strb	r2, [r3, #23]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8004b5a:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	761a      	strb	r2, [r3, #24]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_116;
 8004b60:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b62:	2202      	movs	r2, #2
 8004b64:	771a      	strb	r2, [r3, #28]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	775a      	strb	r2, [r3, #29]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	76da      	strb	r2, [r3, #27]
	bmi088_init(&BMI_sensor, &hi2c3);
 8004b72:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <bmi088_begin+0x40>)
 8004b74:	4802      	ldr	r0, [pc, #8]	@ (8004b80 <bmi088_begin+0x3c>)
 8004b76:	f7fd fbff 	bl	8002378 <bmi088_init>
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000538 	.word	0x20000538
 8004b84:	20000308 	.word	0x20000308

08004b88 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == GPIO_PIN_13)
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b98:	d101      	bne.n	8004b9e <HAL_GPIO_EXTI_Callback+0x16>
    {
    	bmi088_getGyroDatas_INT();
 8004b9a:	f7fe f803 	bl	8002ba4 <bmi088_getGyroDatas_INT>
    }
    if(GPIO_Pin == GPIO_PIN_12)
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba4:	d101      	bne.n	8004baa <HAL_GPIO_EXTI_Callback+0x22>
    {
    	bmi088_getAccelDatas_INT();
 8004ba6:	f7fd ffef 	bl	8002b88 <bmi088_getAccelDatas_INT>
    }
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bfc <HAL_UARTEx_RxEventCallback+0x48>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d114      	bne.n	8004bf4 <HAL_UARTEx_RxEventCallback+0x40>
        usart1_packet_ready = 1;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
        usart1_packet_size = Size;
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004c04 <HAL_UARTEx_RxEventCallback+0x50>)
 8004bd2:	887b      	ldrh	r3, [r7, #2]
 8004bd4:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, sizeof(usart1_rx_buffer));
 8004bd6:	2224      	movs	r2, #36	@ 0x24
 8004bd8:	490b      	ldr	r1, [pc, #44]	@ (8004c08 <HAL_UARTEx_RxEventCallback+0x54>)
 8004bda:	480c      	ldr	r0, [pc, #48]	@ (8004c0c <HAL_UARTEx_RxEventCallback+0x58>)
 8004bdc:	f006 fb3e 	bl	800b25c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8004be0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <HAL_UARTEx_RxEventCallback+0x58>)
 8004be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <HAL_UARTEx_RxEventCallback+0x58>)
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0208 	bic.w	r2, r2, #8
 8004bf2:	601a      	str	r2, [r3, #0]
    }
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40011000 	.word	0x40011000
 8004c00:	20000744 	.word	0x20000744
 8004c04:	20000746 	.word	0x20000746
 8004c08:	20000674 	.word	0x20000674
 8004c0c:	200003ec 	.word	0x200003ec

08004c10 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c20:	d102      	bne.n	8004c28 <HAL_TIM_PeriodElapsedCallback+0x18>
        tx_timer_flag = 1;
 8004c22:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
    }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	20000748 	.word	0x20000748

08004c38 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a05      	ldr	r2, [pc, #20]	@ (8004c5c <HAL_UART_TxCpltCallback+0x24>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d102      	bne.n	8004c50 <HAL_UART_TxCpltCallback+0x18>
        usart1_tx_busy = 0;
 8004c4a:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_UART_TxCpltCallback+0x28>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
    }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40011000 	.word	0x40011000
 8004c60:	20000749 	.word	0x20000749

08004c64 <uart1_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart1_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
    if (!usart1_tx_busy) {
 8004c70:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <uart1_send_packet_dma+0x30>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d108      	bne.n	8004c8c <uart1_send_packet_dma+0x28>
        usart1_tx_busy = 1;
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <uart1_send_packet_dma+0x30>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, data, size);
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4804      	ldr	r0, [pc, #16]	@ (8004c98 <uart1_send_packet_dma+0x34>)
 8004c88:	f006 fa6c 	bl	800b164 <HAL_UART_Transmit_DMA>
    }
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000749 	.word	0x20000749
 8004c98:	200003ec 	.word	0x200003ec

08004c9c <IMU_visual>:

void IMU_visual(){
 8004c9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ca0:	b08a      	sub	sp, #40	@ 0x28
 8004ca2:	af04      	add	r7, sp, #16

	float yaw = BMI_sensor.yaw;
 8004ca4:	4b42      	ldr	r3, [pc, #264]	@ (8004db0 <IMU_visual+0x114>)
 8004ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004caa:	617b      	str	r3, [r7, #20]
	float pitch = BMI_sensor.pitch;
 8004cac:	4b40      	ldr	r3, [pc, #256]	@ (8004db0 <IMU_visual+0x114>)
 8004cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cb2:	613b      	str	r3, [r7, #16]
	float roll = BMI_sensor.roll;
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8004db0 <IMU_visual+0x114>)
 8004cb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cba:	60fb      	str	r3, [r7, #12]
	float yaw1 = BMI_sensor.yaw1;
 8004cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8004db0 <IMU_visual+0x114>)
 8004cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cc2:	60bb      	str	r3, [r7, #8]
	float pitch1 = BMI_sensor.pitch1;
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8004db0 <IMU_visual+0x114>)
 8004cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cca:	607b      	str	r3, [r7, #4]
	float roll1 = BMI_sensor.roll1;
 8004ccc:	4b38      	ldr	r3, [pc, #224]	@ (8004db0 <IMU_visual+0x114>)
 8004cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004cd2:	603b      	str	r3, [r7, #0]

	sprintf(uart_buffer, "A1 %.2f %.2f %.2f\r", yaw, pitch, roll);
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	f7fb fc57 	bl	8000588 <__aeabi_f2d>
 8004cda:	4680      	mov	r8, r0
 8004cdc:	4689      	mov	r9, r1
 8004cde:	6938      	ldr	r0, [r7, #16]
 8004ce0:	f7fb fc52 	bl	8000588 <__aeabi_f2d>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7fb fc4d 	bl	8000588 <__aeabi_f2d>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cf6:	e9cd 4500 	strd	r4, r5, [sp]
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	492d      	ldr	r1, [pc, #180]	@ (8004db4 <IMU_visual+0x118>)
 8004d00:	482d      	ldr	r0, [pc, #180]	@ (8004db8 <IMU_visual+0x11c>)
 8004d02:	f008 f97f 	bl	800d004 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004d06:	482c      	ldr	r0, [pc, #176]	@ (8004db8 <IMU_visual+0x11c>)
 8004d08:	f7fb fad2 	bl	80002b0 <strlen>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	2364      	movs	r3, #100	@ 0x64
 8004d12:	4929      	ldr	r1, [pc, #164]	@ (8004db8 <IMU_visual+0x11c>)
 8004d14:	4829      	ldr	r0, [pc, #164]	@ (8004dbc <IMU_visual+0x120>)
 8004d16:	f006 f999 	bl	800b04c <HAL_UART_Transmit>

	sprintf(uart_buffer, "A2 %.2f %.2f %.2f\r\n", yaw1, pitch1, roll1);
 8004d1a:	68b8      	ldr	r0, [r7, #8]
 8004d1c:	f7fb fc34 	bl	8000588 <__aeabi_f2d>
 8004d20:	4680      	mov	r8, r0
 8004d22:	4689      	mov	r9, r1
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fb fc2f 	bl	8000588 <__aeabi_f2d>
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	f7fb fc2a 	bl	8000588 <__aeabi_f2d>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d3c:	e9cd 4500 	strd	r4, r5, [sp]
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	491e      	ldr	r1, [pc, #120]	@ (8004dc0 <IMU_visual+0x124>)
 8004d46:	481c      	ldr	r0, [pc, #112]	@ (8004db8 <IMU_visual+0x11c>)
 8004d48:	f008 f95c 	bl	800d004 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004d4c:	481a      	ldr	r0, [pc, #104]	@ (8004db8 <IMU_visual+0x11c>)
 8004d4e:	f7fb faaf 	bl	80002b0 <strlen>
 8004d52:	4603      	mov	r3, r0
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	2364      	movs	r3, #100	@ 0x64
 8004d58:	4917      	ldr	r1, [pc, #92]	@ (8004db8 <IMU_visual+0x11c>)
 8004d5a:	4818      	ldr	r0, [pc, #96]	@ (8004dbc <IMU_visual+0x120>)
 8004d5c:	f006 f976 	bl	800b04c <HAL_UART_Transmit>

	sprintf(uart_buffer, "G %d\r", Gain);
 8004d60:	4b18      	ldr	r3, [pc, #96]	@ (8004dc4 <IMU_visual+0x128>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	4918      	ldr	r1, [pc, #96]	@ (8004dc8 <IMU_visual+0x12c>)
 8004d68:	4813      	ldr	r0, [pc, #76]	@ (8004db8 <IMU_visual+0x11c>)
 8004d6a:	f008 f94b 	bl	800d004 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004d6e:	4812      	ldr	r0, [pc, #72]	@ (8004db8 <IMU_visual+0x11c>)
 8004d70:	f7fb fa9e 	bl	80002b0 <strlen>
 8004d74:	4603      	mov	r3, r0
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	2364      	movs	r3, #100	@ 0x64
 8004d7a:	490f      	ldr	r1, [pc, #60]	@ (8004db8 <IMU_visual+0x11c>)
 8004d7c:	480f      	ldr	r0, [pc, #60]	@ (8004dbc <IMU_visual+0x120>)
 8004d7e:	f006 f965 	bl	800b04c <HAL_UART_Transmit>

	sprintf(uart_buffer, "M %d\r", gyroOnlyMode);
 8004d82:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <IMU_visual+0x130>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	4911      	ldr	r1, [pc, #68]	@ (8004dd0 <IMU_visual+0x134>)
 8004d8a:	480b      	ldr	r0, [pc, #44]	@ (8004db8 <IMU_visual+0x11c>)
 8004d8c:	f008 f93a 	bl	800d004 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004d90:	4809      	ldr	r0, [pc, #36]	@ (8004db8 <IMU_visual+0x11c>)
 8004d92:	f7fb fa8d 	bl	80002b0 <strlen>
 8004d96:	4603      	mov	r3, r0
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	2364      	movs	r3, #100	@ 0x64
 8004d9c:	4906      	ldr	r1, [pc, #24]	@ (8004db8 <IMU_visual+0x11c>)
 8004d9e:	4807      	ldr	r0, [pc, #28]	@ (8004dbc <IMU_visual+0x120>)
 8004da0:	f006 f954 	bl	800b04c <HAL_UART_Transmit>

}
 8004da4:	bf00      	nop
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004dae:	bf00      	nop
 8004db0:	20000538 	.word	0x20000538
 8004db4:	08011a08 	.word	0x08011a08
 8004db8:	20000698 	.word	0x20000698
 8004dbc:	200003ec 	.word	0x200003ec
 8004dc0:	08011a1c 	.word	0x08011a1c
 8004dc4:	200007bc 	.word	0x200007bc
 8004dc8:	08011a30 	.word	0x08011a30
 8004dcc:	200007bd 	.word	0x200007bd
 8004dd0:	08011a38 	.word	0x08011a38

08004dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd8:	b672      	cpsid	i
}
 8004dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <Error_Handler+0x8>

08004de0 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	e00a      	b.n	8004e08 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8004df2:	4a0e      	ldr	r2, [pc, #56]	@ (8004e2c <check_sum_hesapla_sit+0x4c>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4413      	add	r3, r2
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	dbf0      	blt.n	8004df2 <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	425a      	negs	r2, r3
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	bf58      	it	pl
 8004e1a:	4253      	negpl	r3, r2
 8004e1c:	b2db      	uxtb	r3, r3
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	2000074c 	.word	0x2000074c

08004e30 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <round2+0x50>)
 8004e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e44:	f7fb fbf8 	bl	8000638 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	ec43 2b17 	vmov	d7, r2, r3
 8004e50:	eeb0 0a47 	vmov.f32	s0, s14
 8004e54:	eef0 0a67 	vmov.f32	s1, s15
 8004e58:	f00a fcc6 	bl	800f7e8 <round>
 8004e5c:	ec51 0b10 	vmov	r0, r1, d0
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <round2+0x50>)
 8004e66:	f7fb fd11 	bl	800088c <__aeabi_ddiv>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e72:	eeb0 0a47 	vmov.f32	s0, s14
 8004e76:	eef0 0a67 	vmov.f32	s1, s15
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40590000 	.word	0x40590000

08004e84 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	@ 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8004e8e:	4b92      	ldr	r3, [pc, #584]	@ (80050d8 <addDataPacketSit+0x254>)
 8004e90:	22ab      	movs	r2, #171	@ 0xab
 8004e92:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea4:	ee17 0a90 	vmov	r0, s15
 8004ea8:	f7fb fb6e 	bl	8000588 <__aeabi_f2d>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	ec43 2b10 	vmov	d0, r2, r3
 8004eb4:	f7ff ffbc 	bl	8004e30 <round2>
 8004eb8:	ec53 2b10 	vmov	r2, r3, d0
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fb fe92 	bl	8000be8 <__aeabi_d2f>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8004ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004ecc:	4b82      	ldr	r3, [pc, #520]	@ (80050d8 <addDataPacketSit+0x254>)
 8004ece:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8004ed0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004ed4:	4b80      	ldr	r3, [pc, #512]	@ (80050d8 <addDataPacketSit+0x254>)
 8004ed6:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8004ed8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004edc:	4b7e      	ldr	r3, [pc, #504]	@ (80050d8 <addDataPacketSit+0x254>)
 8004ede:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8004ee0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80050d8 <addDataPacketSit+0x254>)
 8004ee6:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb fb4b 	bl	8000588 <__aeabi_f2d>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	ec43 2b10 	vmov	d0, r2, r3
 8004efa:	f7ff ff99 	bl	8004e30 <round2>
 8004efe:	ec53 2b10 	vmov	r2, r3, d0
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	f7fb fe6f 	bl	8000be8 <__aeabi_d2f>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8004f0e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004f12:	4b71      	ldr	r3, [pc, #452]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f14:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8004f16:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f1c:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8004f1e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004f22:	4b6d      	ldr	r3, [pc, #436]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f24:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8004f26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f2c:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fb fb27 	bl	8000588 <__aeabi_f2d>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	ec43 2b10 	vmov	d0, r2, r3
 8004f42:	f7ff ff75 	bl	8004e30 <round2>
 8004f46:	ec53 2b10 	vmov	r2, r3, d0
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f7fb fe4b 	bl	8000be8 <__aeabi_d2f>
 8004f52:	4603      	mov	r3, r0
 8004f54:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8004f56:	7ffa      	ldrb	r2, [r7, #31]
 8004f58:	4b5f      	ldr	r3, [pc, #380]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f5a:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8004f5c:	7fba      	ldrb	r2, [r7, #30]
 8004f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f60:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8004f62:	7f7a      	ldrb	r2, [r7, #29]
 8004f64:	4b5c      	ldr	r3, [pc, #368]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f66:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8004f68:	7f3a      	ldrb	r2, [r7, #28]
 8004f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f6c:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fb fb07 	bl	8000588 <__aeabi_f2d>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	ec43 2b10 	vmov	d0, r2, r3
 8004f82:	f7ff ff55 	bl	8004e30 <round2>
 8004f86:	ec53 2b10 	vmov	r2, r3, d0
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f7fb fe2b 	bl	8000be8 <__aeabi_d2f>
 8004f92:	4603      	mov	r3, r0
 8004f94:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8004f96:	7efa      	ldrb	r2, [r7, #27]
 8004f98:	4b4f      	ldr	r3, [pc, #316]	@ (80050d8 <addDataPacketSit+0x254>)
 8004f9a:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8004f9c:	7eba      	ldrb	r2, [r7, #26]
 8004f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fa0:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8004fa2:	7e7a      	ldrb	r2, [r7, #25]
 8004fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fa6:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8004fa8:	7e3a      	ldrb	r2, [r7, #24]
 8004faa:	4b4b      	ldr	r3, [pc, #300]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fac:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fb fae7 	bl	8000588 <__aeabi_f2d>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	ec43 2b10 	vmov	d0, r2, r3
 8004fc2:	f7ff ff35 	bl	8004e30 <round2>
 8004fc6:	ec53 2b10 	vmov	r2, r3, d0
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7fb fe0b 	bl	8000be8 <__aeabi_d2f>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8004fd6:	7dfa      	ldrb	r2, [r7, #23]
 8004fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fda:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8004fdc:	7dba      	ldrb	r2, [r7, #22]
 8004fde:	4b3e      	ldr	r3, [pc, #248]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fe0:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8004fe2:	7d7a      	ldrb	r2, [r7, #21]
 8004fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fe6:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8004fe8:	7d3a      	ldrb	r2, [r7, #20]
 8004fea:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <addDataPacketSit+0x254>)
 8004fec:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->yaw); // Jiroskop X degerinin atamasini yapiyoruz.
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fb fac7 	bl	8000588 <__aeabi_f2d>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	ec43 2b10 	vmov	d0, r2, r3
 8005002:	f7ff ff15 	bl	8004e30 <round2>
 8005006:	ec53 2b10 	vmov	r2, r3, d0
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f7fb fdeb 	bl	8000be8 <__aeabi_d2f>
 8005012:	4603      	mov	r3, r0
 8005014:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8005016:	7cfa      	ldrb	r2, [r7, #19]
 8005018:	4b2f      	ldr	r3, [pc, #188]	@ (80050d8 <addDataPacketSit+0x254>)
 800501a:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 800501c:	7cba      	ldrb	r2, [r7, #18]
 800501e:	4b2e      	ldr	r3, [pc, #184]	@ (80050d8 <addDataPacketSit+0x254>)
 8005020:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8005022:	7c7a      	ldrb	r2, [r7, #17]
 8005024:	4b2c      	ldr	r3, [pc, #176]	@ (80050d8 <addDataPacketSit+0x254>)
 8005026:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8005028:	7c3a      	ldrb	r2, [r7, #16]
 800502a:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <addDataPacketSit+0x254>)
 800502c:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->pitch); // Jiroskop Y degerinin atamasini yapiyoruz.
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb faa7 	bl	8000588 <__aeabi_f2d>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	ec43 2b10 	vmov	d0, r2, r3
 8005042:	f7ff fef5 	bl	8004e30 <round2>
 8005046:	ec53 2b10 	vmov	r2, r3, d0
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f7fb fdcb 	bl	8000be8 <__aeabi_d2f>
 8005052:	4603      	mov	r3, r0
 8005054:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	4b1f      	ldr	r3, [pc, #124]	@ (80050d8 <addDataPacketSit+0x254>)
 800505a:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 800505c:	7bba      	ldrb	r2, [r7, #14]
 800505e:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <addDataPacketSit+0x254>)
 8005060:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8005062:	7b7a      	ldrb	r2, [r7, #13]
 8005064:	4b1c      	ldr	r3, [pc, #112]	@ (80050d8 <addDataPacketSit+0x254>)
 8005066:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8005068:	7b3a      	ldrb	r2, [r7, #12]
 800506a:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <addDataPacketSit+0x254>)
 800506c:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->roll); // Jiroskop Z degerinin atamasini yapiyoruz.
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fa87 	bl	8000588 <__aeabi_f2d>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	ec43 2b10 	vmov	d0, r2, r3
 8005082:	f7ff fed5 	bl	8004e30 <round2>
 8005086:	ec53 2b10 	vmov	r2, r3, d0
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	f7fb fdab 	bl	8000be8 <__aeabi_d2f>
 8005092:	4603      	mov	r3, r0
 8005094:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8005096:	7afa      	ldrb	r2, [r7, #11]
 8005098:	4b0f      	ldr	r3, [pc, #60]	@ (80050d8 <addDataPacketSit+0x254>)
 800509a:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 800509c:	7aba      	ldrb	r2, [r7, #10]
 800509e:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <addDataPacketSit+0x254>)
 80050a0:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 80050a2:	7a7a      	ldrb	r2, [r7, #9]
 80050a4:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <addDataPacketSit+0x254>)
 80050a6:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 80050a8:	7a3a      	ldrb	r2, [r7, #8]
 80050aa:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <addDataPacketSit+0x254>)
 80050ac:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 80050b0:	2021      	movs	r0, #33	@ 0x21
 80050b2:	f7ff fe95 	bl	8004de0 <check_sum_hesapla_sit>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b07      	ldr	r3, [pc, #28]	@ (80050d8 <addDataPacketSit+0x254>)
 80050bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <addDataPacketSit+0x254>)
 80050c2:	220d      	movs	r2, #13
 80050c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 80050c8:	4b03      	ldr	r3, [pc, #12]	@ (80050d8 <addDataPacketSit+0x254>)
 80050ca:	220a      	movs	r2, #10
 80050cc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 80050d0:	bf00      	nop
 80050d2:	3728      	adds	r7, #40	@ 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	2000074c 	.word	0x2000074c

080050dc <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	78db      	ldrb	r3, [r3, #3]
 80050e8:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	789b      	ldrb	r3, [r3, #2]
 80050ee:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	ee07 3a90 	vmov	s15, r3
}
 8005102:	eeb0 0a67 	vmov.f32	s0, s15
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b09e      	sub	sp, #120	@ 0x78
 8005114:	af00      	add	r7, sp, #0
 8005116:	ed87 0a03 	vstr	s0, [r7, #12]
 800511a:	edc7 0a02 	vstr	s1, [r7, #8]
 800511e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005122:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 800512c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005130:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005134:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8005138:	edd7 7a02 	vldr	s15, [r7, #8]
 800513c:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005140:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8005144:	edd7 7a01 	vldr	s15, [r7, #4]
 8005148:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800514c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	633b      	str	r3, [r7, #48]	@ 0x30
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 800515e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005162:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005166:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 800516e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005172:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005176:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	653b      	str	r3, [r7, #80]	@ 0x50
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 800518c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005190:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005194:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 80051ac:	2300      	movs	r3, #0
 80051ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80051b0:	e043      	b.n	800523a <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 80051b2:	2300      	movs	r3, #0
 80051b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051b6:	e024      	b.n	8005202 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 80051b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	3378      	adds	r3, #120	@ 0x78
 80051be:	443b      	add	r3, r7
 80051c0:	3b68      	subs	r3, #104	@ 0x68
 80051c2:	ed93 7a00 	vldr	s14, [r3]
 80051c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	3378      	adds	r3, #120	@ 0x78
 80051d2:	443b      	add	r3, r7
 80051d4:	3b58      	subs	r3, #88	@ 0x58
 80051d6:	edd3 6a00 	vldr	s13, [r3]
 80051da:	4a5d      	ldr	r2, [pc, #372]	@ (8005350 <ekf_predict+0x240>)
 80051dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	edd3 7a00 	vldr	s15, [r3]
 80051e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	3378      	adds	r3, #120	@ 0x78
 80051f4:	443b      	add	r3, r7
 80051f6:	3b68      	subs	r3, #104	@ 0x68
 80051f8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 80051fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051fe:	3301      	adds	r3, #1
 8005200:	673b      	str	r3, [r7, #112]	@ 0x70
 8005202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005204:	2b03      	cmp	r3, #3
 8005206:	ddd7      	ble.n	80051b8 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8005208:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	3378      	adds	r3, #120	@ 0x78
 800520e:	443b      	add	r3, r7
 8005210:	3b68      	subs	r3, #104	@ 0x68
 8005212:	ed93 7a00 	vldr	s14, [r3]
 8005216:	edd7 7a00 	vldr	s15, [r7]
 800521a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800521e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	3378      	adds	r3, #120	@ 0x78
 800522c:	443b      	add	r3, r7
 800522e:	3b68      	subs	r3, #104	@ 0x68
 8005230:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8005234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005236:	3301      	adds	r3, #1
 8005238:	677b      	str	r3, [r7, #116]	@ 0x74
 800523a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800523c:	2b03      	cmp	r3, #3
 800523e:	ddb8      	ble.n	80051b2 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005244:	e017      	b.n	8005276 <ekf_predict+0x166>
        q[i] += dq[i];
 8005246:	4a42      	ldr	r2, [pc, #264]	@ (8005350 <ekf_predict+0x240>)
 8005248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	ed93 7a00 	vldr	s14, [r3]
 8005252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	3378      	adds	r3, #120	@ 0x78
 8005258:	443b      	add	r3, r7
 800525a:	3b68      	subs	r3, #104	@ 0x68
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005264:	4a3a      	ldr	r2, [pc, #232]	@ (8005350 <ekf_predict+0x240>)
 8005266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005272:	3301      	adds	r3, #1
 8005274:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005278:	2b03      	cmp	r3, #3
 800527a:	dde4      	ble.n	8005246 <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800527c:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <ekf_predict+0x240>)
 800527e:	ed93 7a00 	vldr	s14, [r3]
 8005282:	4b33      	ldr	r3, [pc, #204]	@ (8005350 <ekf_predict+0x240>)
 8005284:	edd3 7a00 	vldr	s15, [r3]
 8005288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800528c:	4b30      	ldr	r3, [pc, #192]	@ (8005350 <ekf_predict+0x240>)
 800528e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005292:	4b2f      	ldr	r3, [pc, #188]	@ (8005350 <ekf_predict+0x240>)
 8005294:	edd3 7a01 	vldr	s15, [r3, #4]
 8005298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800529c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005350 <ekf_predict+0x240>)
 80052a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80052a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005350 <ekf_predict+0x240>)
 80052a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b4:	4b26      	ldr	r3, [pc, #152]	@ (8005350 <ekf_predict+0x240>)
 80052b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80052ba:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <ekf_predict+0x240>)
 80052bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80052c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c8:	eeb0 0a67 	vmov.f32	s0, s15
 80052cc:	f00a f922 	bl	800f514 <sqrtf>
 80052d0:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052d8:	e012      	b.n	8005300 <ekf_predict+0x1f0>
        q[i] /= norm;
 80052da:	4a1d      	ldr	r2, [pc, #116]	@ (8005350 <ekf_predict+0x240>)
 80052dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	edd3 6a00 	vldr	s13, [r3]
 80052e6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80052ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ee:	4a18      	ldr	r2, [pc, #96]	@ (8005350 <ekf_predict+0x240>)
 80052f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80052fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052fc:	3301      	adds	r3, #1
 80052fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005302:	2b03      	cmp	r3, #3
 8005304:	dde9      	ble.n	80052da <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 8005306:	2300      	movs	r3, #0
 8005308:	667b      	str	r3, [r7, #100]	@ 0x64
 800530a:	e018      	b.n	800533e <ekf_predict+0x22e>
        P[i][i] += Q_val;
 800530c:	4911      	ldr	r1, [pc, #68]	@ (8005354 <ekf_predict+0x244>)
 800530e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	edd3 7a00 	vldr	s15, [r3]
 800531e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005358 <ekf_predict+0x248>
 8005322:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005326:	490b      	ldr	r1, [pc, #44]	@ (8005354 <ekf_predict+0x244>)
 8005328:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800533a:	3301      	adds	r3, #1
 800533c:	667b      	str	r3, [r7, #100]	@ 0x64
 800533e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005340:	2b03      	cmp	r3, #3
 8005342:	dde3      	ble.n	800530c <ekf_predict+0x1fc>
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	3778      	adds	r7, #120	@ 0x78
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000018 	.word	0x20000018
 8005354:	20000770 	.word	0x20000770
 8005358:	3727c5ac 	.word	0x3727c5ac

0800535c <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8005362:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <quaternionToYaw1+0xb0>)
 8005364:	ed93 7a01 	vldr	s14, [r3, #4]
 8005368:	4b28      	ldr	r3, [pc, #160]	@ (800540c <quaternionToYaw1+0xb0>)
 800536a:	edd3 7a02 	vldr	s15, [r3, #8]
 800536e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005372:	4b26      	ldr	r3, [pc, #152]	@ (800540c <quaternionToYaw1+0xb0>)
 8005374:	edd3 6a00 	vldr	s13, [r3]
 8005378:	4b24      	ldr	r3, [pc, #144]	@ (800540c <quaternionToYaw1+0xb0>)
 800537a:	edd3 7a03 	vldr	s15, [r3, #12]
 800537e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005386:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800538a:	4b20      	ldr	r3, [pc, #128]	@ (800540c <quaternionToYaw1+0xb0>)
 800538c:	ed93 7a00 	vldr	s14, [r3]
 8005390:	4b1e      	ldr	r3, [pc, #120]	@ (800540c <quaternionToYaw1+0xb0>)
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800539a:	4b1c      	ldr	r3, [pc, #112]	@ (800540c <quaternionToYaw1+0xb0>)
 800539c:	edd3 6a01 	vldr	s13, [r3, #4]
 80053a0:	4b1a      	ldr	r3, [pc, #104]	@ (800540c <quaternionToYaw1+0xb0>)
 80053a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053ae:	4b17      	ldr	r3, [pc, #92]	@ (800540c <quaternionToYaw1+0xb0>)
 80053b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80053b4:	4b15      	ldr	r3, [pc, #84]	@ (800540c <quaternionToYaw1+0xb0>)
 80053b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80053ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053c2:	4b12      	ldr	r3, [pc, #72]	@ (800540c <quaternionToYaw1+0xb0>)
 80053c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80053c8:	4b10      	ldr	r3, [pc, #64]	@ (800540c <quaternionToYaw1+0xb0>)
 80053ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d6:	eef0 0a67 	vmov.f32	s1, s15
 80053da:	eeb0 0a46 	vmov.f32	s0, s12
 80053de:	f00a f897 	bl	800f510 <atan2f>
 80053e2:	eef0 7a40 	vmov.f32	s15, s0
 80053e6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005410 <quaternionToYaw1+0xb4>
 80053ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053ee:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005414 <quaternionToYaw1+0xb8>
 80053f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053f6:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	ee07 3a90 	vmov	s15, r3
}
 8005400:	eeb0 0a67 	vmov.f32	s0, s15
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000018 	.word	0x20000018
 8005410:	43340000 	.word	0x43340000
 8005414:	40490fd0 	.word	0x40490fd0

08005418 <quaternionToPitch1>:

float quaternionToPitch1(){
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800541e:	4b17      	ldr	r3, [pc, #92]	@ (800547c <quaternionToPitch1+0x64>)
 8005420:	ed93 7a01 	vldr	s14, [r3, #4]
 8005424:	4b15      	ldr	r3, [pc, #84]	@ (800547c <quaternionToPitch1+0x64>)
 8005426:	edd3 7a03 	vldr	s15, [r3, #12]
 800542a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800542e:	4b13      	ldr	r3, [pc, #76]	@ (800547c <quaternionToPitch1+0x64>)
 8005430:	edd3 6a00 	vldr	s13, [r3]
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <quaternionToPitch1+0x64>)
 8005436:	edd3 7a02 	vldr	s15, [r3, #8]
 800543a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800543e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005442:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005446:	eeb0 0a67 	vmov.f32	s0, s15
 800544a:	f00a f835 	bl	800f4b8 <asinf>
 800544e:	eef0 7a40 	vmov.f32	s15, s0
 8005452:	eef1 7a67 	vneg.f32	s15, s15
 8005456:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005480 <quaternionToPitch1+0x68>
 800545a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800545e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005484 <quaternionToPitch1+0x6c>
 8005462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005466:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	ee07 3a90 	vmov	s15, r3
}
 8005470:	eeb0 0a67 	vmov.f32	s0, s15
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000018 	.word	0x20000018
 8005480:	43340000 	.word	0x43340000
 8005484:	40490fd0 	.word	0x40490fd0

08005488 <quaternionToRoll1>:

float quaternionToRoll1(){
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800548e:	4b2a      	ldr	r3, [pc, #168]	@ (8005538 <quaternionToRoll1+0xb0>)
 8005490:	ed93 7a00 	vldr	s14, [r3]
 8005494:	4b28      	ldr	r3, [pc, #160]	@ (8005538 <quaternionToRoll1+0xb0>)
 8005496:	edd3 7a01 	vldr	s15, [r3, #4]
 800549a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800549e:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80054a4:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80054aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054b8:	ed93 7a00 	vldr	s14, [r3]
 80054bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054be:	edd3 7a00 	vldr	s15, [r3]
 80054c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80054cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80054d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054da:	4b17      	ldr	r3, [pc, #92]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80054e0:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80054e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80054f4:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <quaternionToRoll1+0xb0>)
 80054f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005502:	eef0 0a67 	vmov.f32	s1, s15
 8005506:	eeb0 0a46 	vmov.f32	s0, s12
 800550a:	f00a f801 	bl	800f510 <atan2f>
 800550e:	eef0 7a40 	vmov.f32	s15, s0
 8005512:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800553c <quaternionToRoll1+0xb4>
 8005516:	ee27 7a87 	vmul.f32	s14, s15, s14
 800551a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005540 <quaternionToRoll1+0xb8>
 800551e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005522:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	ee07 3a90 	vmov	s15, r3
}
 800552c:	eeb0 0a67 	vmov.f32	s0, s15
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000018 	.word	0x20000018
 800553c:	43340000 	.word	0x43340000
 8005540:	40490fd0 	.word	0x40490fd0

08005544 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	@ 0x30
 8005548:	af00      	add	r7, sp, #0
 800554a:	ed87 0a03 	vstr	s0, [r7, #12]
 800554e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005552:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005556:	4bd5      	ldr	r3, [pc, #852]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005558:	ed93 7a00 	vldr	s14, [r3]
 800555c:	4bd3      	ldr	r3, [pc, #844]	@ (80058ac <UpdateMahonyGains+0x368>)
 800555e:	edd3 7a00 	vldr	s15, [r3]
 8005562:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005566:	4bd1      	ldr	r3, [pc, #836]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005568:	edd3 6a01 	vldr	s13, [r3, #4]
 800556c:	4bcf      	ldr	r3, [pc, #828]	@ (80058ac <UpdateMahonyGains+0x368>)
 800556e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800557a:	4bcc      	ldr	r3, [pc, #816]	@ (80058ac <UpdateMahonyGains+0x368>)
 800557c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005580:	4bca      	ldr	r3, [pc, #808]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005582:	edd3 7a02 	vldr	s15, [r3, #8]
 8005586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800558a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800558e:	4bc7      	ldr	r3, [pc, #796]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005590:	edd3 6a03 	vldr	s13, [r3, #12]
 8005594:	4bc5      	ldr	r3, [pc, #788]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005596:	edd3 7a03 	vldr	s15, [r3, #12]
 800559a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a2:	eeb0 0a67 	vmov.f32	s0, s15
 80055a6:	f009 ffb5 	bl	800f514 <sqrtf>
 80055aa:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80055ae:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80055b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80055b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ba:	f000 8172 	beq.w	80058a2 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 80055be:	4bbb      	ldr	r3, [pc, #748]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055c0:	edd3 6a00 	vldr	s13, [r3]
 80055c4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80055c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055cc:	4bb7      	ldr	r3, [pc, #732]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055ce:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 80055d2:	4bb6      	ldr	r3, [pc, #728]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80055d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80055dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e0:	4bb2      	ldr	r3, [pc, #712]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055e2:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80055e6:	4bb1      	ldr	r3, [pc, #708]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80055ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80055f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f4:	4bad      	ldr	r3, [pc, #692]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055f6:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 80055fa:	4bac      	ldr	r3, [pc, #688]	@ (80058ac <UpdateMahonyGains+0x368>)
 80055fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8005600:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005608:	4ba8      	ldr	r3, [pc, #672]	@ (80058ac <UpdateMahonyGains+0x368>)
 800560a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 800560e:	4ba7      	ldr	r3, [pc, #668]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005610:	ed93 7a01 	vldr	s14, [r3, #4]
 8005614:	4ba5      	ldr	r3, [pc, #660]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005616:	edd3 7a03 	vldr	s15, [r3, #12]
 800561a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800561e:	4ba3      	ldr	r3, [pc, #652]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005620:	edd3 6a00 	vldr	s13, [r3]
 8005624:	4ba1      	ldr	r3, [pc, #644]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005626:	edd3 7a02 	vldr	s15, [r3, #8]
 800562a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800562e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005632:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005636:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 800563a:	4b9c      	ldr	r3, [pc, #624]	@ (80058ac <UpdateMahonyGains+0x368>)
 800563c:	ed93 7a00 	vldr	s14, [r3]
 8005640:	4b9a      	ldr	r3, [pc, #616]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005642:	edd3 7a01 	vldr	s15, [r3, #4]
 8005646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800564a:	4b98      	ldr	r3, [pc, #608]	@ (80058ac <UpdateMahonyGains+0x368>)
 800564c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005650:	4b96      	ldr	r3, [pc, #600]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005652:	edd3 7a03 	vldr	s15, [r3, #12]
 8005656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800565a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800565e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005662:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005666:	4b91      	ldr	r3, [pc, #580]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005668:	ed93 7a00 	vldr	s14, [r3]
 800566c:	4b8f      	ldr	r3, [pc, #572]	@ (80058ac <UpdateMahonyGains+0x368>)
 800566e:	edd3 7a00 	vldr	s15, [r3]
 8005672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005676:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005678:	edd3 6a01 	vldr	s13, [r3, #4]
 800567c:	4b8b      	ldr	r3, [pc, #556]	@ (80058ac <UpdateMahonyGains+0x368>)
 800567e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800568a:	4b88      	ldr	r3, [pc, #544]	@ (80058ac <UpdateMahonyGains+0x368>)
 800568c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005690:	4b86      	ldr	r3, [pc, #536]	@ (80058ac <UpdateMahonyGains+0x368>)
 8005692:	edd3 7a02 	vldr	s15, [r3, #8]
 8005696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800569a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800569e:	4b83      	ldr	r3, [pc, #524]	@ (80058ac <UpdateMahonyGains+0x368>)
 80056a0:	edd3 6a03 	vldr	s13, [r3, #12]
 80056a4:	4b81      	ldr	r3, [pc, #516]	@ (80058ac <UpdateMahonyGains+0x368>)
 80056a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80056aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80056b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80056ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80056be:	edd7 7a08 	vldr	s15, [r7, #32]
 80056c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80056c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80056ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80056d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056d6:	eeb0 0a67 	vmov.f32	s0, s15
 80056da:	f001 f8cd 	bl	8006878 <invSqrt>
 80056de:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80056e2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80056e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 80056f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80056f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80056fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fe:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005702:	ed97 7a07 	vldr	s14, [r7, #28]
 8005706:	edd7 7a06 	vldr	s15, [r7, #24]
 800570a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570e:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005712:	edd7 7a03 	vldr	s15, [r7, #12]
 8005716:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800571a:	edd7 7a02 	vldr	s15, [r7, #8]
 800571e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005726:	edd7 7a01 	vldr	s15, [r7, #4]
 800572a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800572e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005732:	eeb0 0a67 	vmov.f32	s0, s15
 8005736:	f001 f89f 	bl	8006878 <invSqrt>
 800573a:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 800573e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005742:	edd7 7a05 	vldr	s15, [r7, #20]
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 800574e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005752:	edd7 7a05 	vldr	s15, [r7, #20]
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800575e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005762:	edd7 7a05 	vldr	s15, [r7, #20]
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800576e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005772:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800577a:	edd7 6a02 	vldr	s13, [r7, #8]
 800577e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800578a:	edd7 6a01 	vldr	s13, [r7, #4]
 800578e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800579e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80057a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	dd02      	ble.n	80057b6 <UpdateMahonyGains+0x272>
 80057b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80057b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 80057b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80057ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80057be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c6:	d501      	bpl.n	80057cc <UpdateMahonyGains+0x288>
 80057c8:	4b39      	ldr	r3, [pc, #228]	@ (80058b0 <UpdateMahonyGains+0x36c>)
 80057ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80057cc:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80057d0:	f009 fe46 	bl	800f460 <acosf>
 80057d4:	eef0 7a40 	vmov.f32	s15, s0
 80057d8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80058b4 <UpdateMahonyGains+0x370>
 80057dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057e0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80057e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80057e8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80057ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f4:	dd0a      	ble.n	800580c <UpdateMahonyGains+0x2c8>
        Gain = 1;
 80057f6:	4b30      	ldr	r3, [pc, #192]	@ (80058b8 <UpdateMahonyGains+0x374>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	@ (80058bc <UpdateMahonyGains+0x378>)
 80057fe:	4a30      	ldr	r2, [pc, #192]	@ (80058c0 <UpdateMahonyGains+0x37c>)
 8005800:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005802:	4b30      	ldr	r3, [pc, #192]	@ (80058c4 <UpdateMahonyGains+0x380>)
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e01d      	b.n	8005848 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 800580c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005810:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	dd0a      	ble.n	8005834 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 800581e:	4b26      	ldr	r3, [pc, #152]	@ (80058b8 <UpdateMahonyGains+0x374>)
 8005820:	2202      	movs	r2, #2
 8005822:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <UpdateMahonyGains+0x378>)
 8005826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800582a:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 800582c:	4b25      	ldr	r3, [pc, #148]	@ (80058c4 <UpdateMahonyGains+0x380>)
 800582e:	4a26      	ldr	r2, [pc, #152]	@ (80058c8 <UpdateMahonyGains+0x384>)
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e009      	b.n	8005848 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005834:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <UpdateMahonyGains+0x374>)
 8005836:	2203      	movs	r2, #3
 8005838:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 800583a:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <UpdateMahonyGains+0x378>)
 800583c:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005840:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005842:	4b20      	ldr	r3, [pc, #128]	@ (80058c4 <UpdateMahonyGains+0x380>)
 8005844:	4a21      	ldr	r2, [pc, #132]	@ (80058cc <UpdateMahonyGains+0x388>)
 8005846:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005848:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <UpdateMahonyGains+0x378>)
 800584a:	edd3 7a00 	vldr	s15, [r3]
 800584e:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005852:	eeb0 0a67 	vmov.f32	s0, s15
 8005856:	f009 feb0 	bl	800f5ba <fminf>
 800585a:	eef0 7a40 	vmov.f32	s15, s0
 800585e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80058d0 <UpdateMahonyGains+0x38c>
 8005862:	eeb0 0a67 	vmov.f32	s0, s15
 8005866:	f009 fe8b 	bl	800f580 <fmaxf>
 800586a:	eef0 7a40 	vmov.f32	s15, s0
 800586e:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <UpdateMahonyGains+0x378>)
 8005870:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005874:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <UpdateMahonyGains+0x380>)
 8005876:	edd3 7a00 	vldr	s15, [r3]
 800587a:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80058d4 <UpdateMahonyGains+0x390>
 800587e:	eeb0 0a67 	vmov.f32	s0, s15
 8005882:	f009 fe9a 	bl	800f5ba <fminf>
 8005886:	eef0 7a40 	vmov.f32	s15, s0
 800588a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80058d8 <UpdateMahonyGains+0x394>
 800588e:	eeb0 0a67 	vmov.f32	s0, s15
 8005892:	f009 fe75 	bl	800f580 <fmaxf>
 8005896:	eef0 7a40 	vmov.f32	s15, s0
 800589a:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <UpdateMahonyGains+0x380>)
 800589c:	edc3 7a00 	vstr	s15, [r3]
 80058a0:	e000      	b.n	80058a4 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 80058a2:	bf00      	nop
}
 80058a4:	3730      	adds	r7, #48	@ 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000028 	.word	0x20000028
 80058b0:	bf800000 	.word	0xbf800000
 80058b4:	42652ee2 	.word	0x42652ee2
 80058b8:	200007bc 	.word	0x200007bc
 80058bc:	20000038 	.word	0x20000038
 80058c0:	3e4ccccd 	.word	0x3e4ccccd
 80058c4:	2000003c 	.word	0x2000003c
 80058c8:	3c23d70a 	.word	0x3c23d70a
 80058cc:	3d4ccccd 	.word	0x3d4ccccd
 80058d0:	3dcccccd 	.word	0x3dcccccd
 80058d4:	3d4ccccd 	.word	0x3d4ccccd
 80058d8:	00000000 	.word	0x00000000

080058dc <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	@ 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	ed87 0a07 	vstr	s0, [r7, #28]
 80058e6:	edc7 0a06 	vstr	s1, [r7, #24]
 80058ea:	ed87 1a05 	vstr	s2, [r7, #20]
 80058ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80058f2:	ed87 2a03 	vstr	s4, [r7, #12]
 80058f6:	edc7 2a02 	vstr	s5, [r7, #8]
 80058fa:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 80058fe:	4b60      	ldr	r3, [pc, #384]	@ (8005a80 <Orientation_Update+0x1a4>)
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8005902:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005906:	edd7 7a04 	vldr	s15, [r7, #16]
 800590a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800590e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005912:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005916:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800591a:	4b5a      	ldr	r3, [pc, #360]	@ (8005a84 <Orientation_Update+0x1a8>)
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005928:	4b56      	ldr	r3, [pc, #344]	@ (8005a84 <Orientation_Update+0x1a8>)
 800592a:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 800592e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005932:	edd7 7a03 	vldr	s15, [r7, #12]
 8005936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005942:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005946:	4b50      	ldr	r3, [pc, #320]	@ (8005a88 <Orientation_Update+0x1ac>)
 8005948:	edd3 7a00 	vldr	s15, [r3]
 800594c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005954:	4b4c      	ldr	r3, [pc, #304]	@ (8005a88 <Orientation_Update+0x1ac>)
 8005956:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 800595a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800595e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800596a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800596e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005972:	4b46      	ldr	r3, [pc, #280]	@ (8005a8c <Orientation_Update+0x1b0>)
 8005974:	edd3 7a00 	vldr	s15, [r3]
 8005978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005980:	4b42      	ldr	r3, [pc, #264]	@ (8005a8c <Orientation_Update+0x1b0>)
 8005982:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005986:	4b3f      	ldr	r3, [pc, #252]	@ (8005a84 <Orientation_Update+0x1a8>)
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a88 <Orientation_Update+0x1ac>)
 800598e:	ed93 7a00 	vldr	s14, [r3]
 8005992:	4b3e      	ldr	r3, [pc, #248]	@ (8005a8c <Orientation_Update+0x1b0>)
 8005994:	edd3 6a00 	vldr	s13, [r3]
 8005998:	eeb0 1a66 	vmov.f32	s2, s13
 800599c:	eef0 0a47 	vmov.f32	s1, s14
 80059a0:	eeb0 0a67 	vmov.f32	s0, s15
 80059a4:	f7ff fdce 	bl	8005544 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80059a8:	4b36      	ldr	r3, [pc, #216]	@ (8005a84 <Orientation_Update+0x1a8>)
 80059aa:	ed93 7a00 	vldr	s14, [r3]
 80059ae:	4b35      	ldr	r3, [pc, #212]	@ (8005a84 <Orientation_Update+0x1a8>)
 80059b0:	edd3 7a00 	vldr	s15, [r3]
 80059b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059b8:	4b33      	ldr	r3, [pc, #204]	@ (8005a88 <Orientation_Update+0x1ac>)
 80059ba:	edd3 6a00 	vldr	s13, [r3]
 80059be:	4b32      	ldr	r3, [pc, #200]	@ (8005a88 <Orientation_Update+0x1ac>)
 80059c0:	edd3 7a00 	vldr	s15, [r3]
 80059c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059cc:	4b2f      	ldr	r3, [pc, #188]	@ (8005a8c <Orientation_Update+0x1b0>)
 80059ce:	edd3 6a00 	vldr	s13, [r3]
 80059d2:	4b2e      	ldr	r3, [pc, #184]	@ (8005a8c <Orientation_Update+0x1b0>)
 80059d4:	edd3 7a00 	vldr	s15, [r3]
 80059d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e0:	eeb0 0a67 	vmov.f32	s0, s15
 80059e4:	f009 fd96 	bl	800f514 <sqrtf>
 80059e8:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 80059ec:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <Orientation_Update+0x1b4>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 80059f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80059f8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005a94 <Orientation_Update+0x1b8>
 80059fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a04:	d50f      	bpl.n	8005a26 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8005a06:	4b22      	ldr	r3, [pc, #136]	@ (8005a90 <Orientation_Update+0x1b4>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e00b      	b.n	8005a26 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8005a0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a12:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005a98 <Orientation_Update+0x1bc>
 8005a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1e:	dd02      	ble.n	8005a26 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8005a20:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <Orientation_Update+0x1b4>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8005a26:	4b1a      	ldr	r3, [pc, #104]	@ (8005a90 <Orientation_Update+0x1b4>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8005a2e:	edd7 1a01 	vldr	s3, [r7, #4]
 8005a32:	ed97 1a05 	vldr	s2, [r7, #20]
 8005a36:	edd7 0a06 	vldr	s1, [r7, #24]
 8005a3a:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a3e:	f000 f82d 	bl	8005a9c <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8005a42:	e018      	b.n	8005a76 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <Orientation_Update+0x1a8>)
 8005a46:	edd3 7a00 	vldr	s15, [r3]
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <Orientation_Update+0x1ac>)
 8005a4c:	ed93 7a00 	vldr	s14, [r3]
 8005a50:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <Orientation_Update+0x1b0>)
 8005a52:	edd3 6a00 	vldr	s13, [r3]
 8005a56:	ed97 3a01 	vldr	s6, [r7, #4]
 8005a5a:	eef0 2a66 	vmov.f32	s5, s13
 8005a5e:	eeb0 2a47 	vmov.f32	s4, s14
 8005a62:	eef0 1a67 	vmov.f32	s3, s15
 8005a66:	ed97 1a05 	vldr	s2, [r7, #20]
 8005a6a:	edd7 0a06 	vldr	s1, [r7, #24]
 8005a6e:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a72:	f000 f93b 	bl	8005cec <MahonyAHRSupdateIMU>
}
 8005a76:	bf00      	nop
 8005a78:	3728      	adds	r7, #40	@ 0x28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	3e99999a 	.word	0x3e99999a
 8005a84:	200007c0 	.word	0x200007c0
 8005a88:	200007c4 	.word	0x200007c4
 8005a8c:	200007c8 	.word	0x200007c8
 8005a90:	200007bd 	.word	0x200007bd
 8005a94:	41d3d2db 	.word	0x41d3d2db
 8005a98:	420172a2 	.word	0x420172a2

08005a9c <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005aa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005aaa:	ed87 1a01 	vstr	s2, [r7, #4]
 8005aae:	edc7 1a00 	vstr	s3, [r7]
	gx = fminf(fmaxf(gx, -limit), limit);
	gy = fminf(fmaxf(gy, -limit), limit);
	gz = fminf(fmaxf(gz, -limit), limit);*/

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8005ab2:	4b8c      	ldr	r3, [pc, #560]	@ (8005ce4 <updateQuaternion+0x248>)
 8005ab4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ab8:	eeb1 7a67 	vneg.f32	s14, s15
 8005abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ac4:	4b87      	ldr	r3, [pc, #540]	@ (8005ce4 <updateQuaternion+0x248>)
 8005ac6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005aca:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ad6:	4b83      	ldr	r3, [pc, #524]	@ (8005ce4 <updateQuaternion+0x248>)
 8005ad8:	edd3 6a03 	vldr	s13, [r3, #12]
 8005adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ae8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8005af4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce4 <updateQuaternion+0x248>)
 8005af6:	ed93 7a00 	vldr	s14, [r3]
 8005afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b02:	4b78      	ldr	r3, [pc, #480]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b04:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b08:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b14:	4b73      	ldr	r3, [pc, #460]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b16:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b2e:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8005b32:	4b6c      	ldr	r3, [pc, #432]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b34:	ed93 7a00 	vldr	s14, [r3]
 8005b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b40:	4b68      	ldr	r3, [pc, #416]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b42:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b52:	4b64      	ldr	r3, [pc, #400]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b54:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b6c:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8005b70:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b72:	ed93 7a00 	vldr	s14, [r3]
 8005b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b7e:	4b59      	ldr	r3, [pc, #356]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b80:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b90:	4b54      	ldr	r3, [pc, #336]	@ (8005ce4 <updateQuaternion+0x248>)
 8005b92:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ba2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005baa:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8005bae:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce4 <updateQuaternion+0x248>)
 8005bb0:	ed93 7a00 	vldr	s14, [r3]
 8005bb4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005bb8:	edd7 7a00 	vldr	s15, [r7]
 8005bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc4:	4b47      	ldr	r3, [pc, #284]	@ (8005ce4 <updateQuaternion+0x248>)
 8005bc6:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8005bca:	4b46      	ldr	r3, [pc, #280]	@ (8005ce4 <updateQuaternion+0x248>)
 8005bcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8005bd0:	edd7 6a08 	vldr	s13, [r7, #32]
 8005bd4:	edd7 7a00 	vldr	s15, [r7]
 8005bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be0:	4b40      	ldr	r3, [pc, #256]	@ (8005ce4 <updateQuaternion+0x248>)
 8005be2:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8005be6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce4 <updateQuaternion+0x248>)
 8005be8:	ed93 7a02 	vldr	s14, [r3, #8]
 8005bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf0:	edd7 7a00 	vldr	s15, [r7]
 8005bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfc:	4b39      	ldr	r3, [pc, #228]	@ (8005ce4 <updateQuaternion+0x248>)
 8005bfe:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8005c02:	4b38      	ldr	r3, [pc, #224]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c04:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c08:	edd7 6a06 	vldr	s13, [r7, #24]
 8005c0c:	edd7 7a00 	vldr	s15, [r7]
 8005c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c18:	4b32      	ldr	r3, [pc, #200]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c1a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005c1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c20:	ed93 7a00 	vldr	s14, [r3]
 8005c24:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c26:	edd3 7a00 	vldr	s15, [r3]
 8005c2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c30:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c36:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c42:	4b28      	ldr	r3, [pc, #160]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c44:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c48:	4b26      	ldr	r3, [pc, #152]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c56:	4b23      	ldr	r3, [pc, #140]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c58:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c6e:	f009 fc51 	bl	800f514 <sqrtf>
 8005c72:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8005c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c7a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005ce8 <updateQuaternion+0x24c>
 8005c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c86:	dc00      	bgt.n	8005c8a <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8005c88:	e027      	b.n	8005cda <updateQuaternion+0x23e>
        q[0] /= norm;
 8005c8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c8c:	edd3 6a00 	vldr	s13, [r3]
 8005c90:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c98:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <updateQuaternion+0x248>)
 8005c9a:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <updateQuaternion+0x248>)
 8005ca0:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ca4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <updateQuaternion+0x248>)
 8005cae:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <updateQuaternion+0x248>)
 8005cb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc0:	4b08      	ldr	r3, [pc, #32]	@ (8005ce4 <updateQuaternion+0x248>)
 8005cc2:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8005cc6:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <updateQuaternion+0x248>)
 8005cc8:	edd3 6a03 	vldr	s13, [r3, #12]
 8005ccc:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd4:	4b03      	ldr	r3, [pc, #12]	@ (8005ce4 <updateQuaternion+0x248>)
 8005cd6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	3728      	adds	r7, #40	@ 0x28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000028 	.word	0x20000028
 8005ce8:	358637bd 	.word	0x358637bd

08005cec <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b092      	sub	sp, #72	@ 0x48
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	ed87 0a07 	vstr	s0, [r7, #28]
 8005cf6:	edc7 0a06 	vstr	s1, [r7, #24]
 8005cfa:	ed87 1a05 	vstr	s2, [r7, #20]
 8005cfe:	edc7 1a04 	vstr	s3, [r7, #16]
 8005d02:	ed87 2a03 	vstr	s4, [r7, #12]
 8005d06:	edc7 2a02 	vstr	s5, [r7, #8]
 8005d0a:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8005d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1a:	d10e      	bne.n	8005d3a <MahonyAHRSupdateIMU+0x4e>
 8005d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d28:	d107      	bne.n	8005d3a <MahonyAHRSupdateIMU+0x4e>
 8005d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	f000 8138 	beq.w	8005faa <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8005d3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d3e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005d42:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d5e:	f000 fd8b 	bl	8006878 <invSqrt>
 8005d62:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8005d66:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d6a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8005d76:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d7a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8005d86:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d8a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d92:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8005d96:	4b66      	ldr	r3, [pc, #408]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005d98:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d9c:	4b64      	ldr	r3, [pc, #400]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005d9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005da6:	4b62      	ldr	r3, [pc, #392]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005da8:	edd3 6a00 	vldr	s13, [r3]
 8005dac:	4b60      	ldr	r3, [pc, #384]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005dae:	edd3 7a02 	vldr	s15, [r3, #8]
 8005db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8005dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005dc0:	ed93 7a00 	vldr	s14, [r3]
 8005dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005dc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dce:	4b58      	ldr	r3, [pc, #352]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005dd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dd4:	4b56      	ldr	r3, [pc, #344]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005dd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8005de6:	4b52      	ldr	r3, [pc, #328]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005de8:	ed93 7a00 	vldr	s14, [r3]
 8005dec:	4b50      	ldr	r3, [pc, #320]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005dee:	edd3 7a00 	vldr	s15, [r3]
 8005df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005dfa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005e00:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e04:	4b4a      	ldr	r3, [pc, #296]	@ (8005f30 <MahonyAHRSupdateIMU+0x244>)
 8005e06:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e12:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8005e16:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e1a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e22:	edd7 6a02 	vldr	s13, [r7, #8]
 8005e26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e32:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8005e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e3a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e42:	edd7 6a04 	vldr	s13, [r7, #16]
 8005e46:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8005e56:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e5a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e62:	edd7 6a03 	vldr	s13, [r7, #12]
 8005e66:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e72:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8005e76:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <MahonyAHRSupdateIMU+0x248>)
 8005e78:	edd3 7a00 	vldr	s15, [r3]
 8005e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e84:	dd5e      	ble.n	8005f44 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8005e86:	4b2b      	ldr	r3, [pc, #172]	@ (8005f34 <MahonyAHRSupdateIMU+0x248>)
 8005e88:	ed93 7a00 	vldr	s14, [r3]
 8005e8c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e9c:	4b26      	ldr	r3, [pc, #152]	@ (8005f38 <MahonyAHRSupdateIMU+0x24c>)
 8005e9e:	edd3 7a00 	vldr	s15, [r3]
 8005ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea6:	4b24      	ldr	r3, [pc, #144]	@ (8005f38 <MahonyAHRSupdateIMU+0x24c>)
 8005ea8:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8005eac:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <MahonyAHRSupdateIMU+0x248>)
 8005eae:	ed93 7a00 	vldr	s14, [r3]
 8005eb2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f3c <MahonyAHRSupdateIMU+0x250>)
 8005ec4:	edd3 7a00 	vldr	s15, [r3]
 8005ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f3c <MahonyAHRSupdateIMU+0x250>)
 8005ece:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8005ed2:	4b18      	ldr	r3, [pc, #96]	@ (8005f34 <MahonyAHRSupdateIMU+0x248>)
 8005ed4:	ed93 7a00 	vldr	s14, [r3]
 8005ed8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ee8:	4b15      	ldr	r3, [pc, #84]	@ (8005f40 <MahonyAHRSupdateIMU+0x254>)
 8005eea:	edd3 7a00 	vldr	s15, [r3]
 8005eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef2:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <MahonyAHRSupdateIMU+0x254>)
 8005ef4:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <MahonyAHRSupdateIMU+0x24c>)
 8005efa:	edd3 7a00 	vldr	s15, [r3]
 8005efe:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <MahonyAHRSupdateIMU+0x250>)
 8005f0c:	edd3 7a00 	vldr	s15, [r3]
 8005f10:	ed97 7a06 	vldr	s14, [r7, #24]
 8005f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f18:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8005f1c:	4b08      	ldr	r3, [pc, #32]	@ (8005f40 <MahonyAHRSupdateIMU+0x254>)
 8005f1e:	edd3 7a00 	vldr	s15, [r3]
 8005f22:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f2a:	edc7 7a05 	vstr	s15, [r7, #20]
 8005f2e:	e015      	b.n	8005f5c <MahonyAHRSupdateIMU+0x270>
 8005f30:	20000028 	.word	0x20000028
 8005f34:	2000003c 	.word	0x2000003c
 8005f38:	200007b0 	.word	0x200007b0
 8005f3c:	200007b4 	.word	0x200007b4
 8005f40:	200007b8 	.word	0x200007b8
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8005f44:	4b9a      	ldr	r3, [pc, #616]	@ (80061b0 <MahonyAHRSupdateIMU+0x4c4>)
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8005f4c:	4b99      	ldr	r3, [pc, #612]	@ (80061b4 <MahonyAHRSupdateIMU+0x4c8>)
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8005f54:	4b98      	ldr	r3, [pc, #608]	@ (80061b8 <MahonyAHRSupdateIMU+0x4cc>)
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8005f5c:	4b97      	ldr	r3, [pc, #604]	@ (80061bc <MahonyAHRSupdateIMU+0x4d0>)
 8005f5e:	ed93 7a00 	vldr	s14, [r3]
 8005f62:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f72:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8005f76:	4b91      	ldr	r3, [pc, #580]	@ (80061bc <MahonyAHRSupdateIMU+0x4d0>)
 8005f78:	ed93 7a00 	vldr	s14, [r3]
 8005f7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f84:	ed97 7a06 	vldr	s14, [r7, #24]
 8005f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f8c:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8005f90:	4b8a      	ldr	r3, [pc, #552]	@ (80061bc <MahonyAHRSupdateIMU+0x4d0>)
 8005f92:	ed93 7a00 	vldr	s14, [r3]
 8005f96:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8005faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8005fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fce:	ed97 7a06 	vldr	s14, [r7, #24]
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8005fda:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8005ff2:	4b73      	ldr	r3, [pc, #460]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8005ff8:	4b71      	ldr	r3, [pc, #452]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8005ffe:	4b70      	ldr	r3, [pc, #448]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006004:	4b6e      	ldr	r3, [pc, #440]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006006:	ed93 7a00 	vldr	s14, [r3]
 800600a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800600e:	eef1 6a67 	vneg.f32	s13, s15
 8006012:	edd7 7a07 	vldr	s15, [r7, #28]
 8006016:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800601a:	ed97 6a08 	vldr	s12, [r7, #32]
 800601e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006022:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006026:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800602a:	4b65      	ldr	r3, [pc, #404]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800602c:	ed93 6a03 	vldr	s12, [r3, #12]
 8006030:	edd7 7a05 	vldr	s15, [r7, #20]
 8006034:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006038:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800603c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006040:	4b5f      	ldr	r3, [pc, #380]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006042:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006046:	4b5e      	ldr	r3, [pc, #376]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006048:	ed93 7a01 	vldr	s14, [r3, #4]
 800604c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006050:	edd7 7a07 	vldr	s15, [r7, #28]
 8006054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006058:	ed97 6a08 	vldr	s12, [r7, #32]
 800605c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006060:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006064:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006068:	4b55      	ldr	r3, [pc, #340]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800606a:	ed93 6a03 	vldr	s12, [r3, #12]
 800606e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006072:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006076:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800607a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607e:	4b50      	ldr	r3, [pc, #320]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006080:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006084:	4b4e      	ldr	r3, [pc, #312]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006086:	ed93 7a02 	vldr	s14, [r3, #8]
 800608a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800608e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006092:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006096:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800609a:	edd7 7a05 	vldr	s15, [r7, #20]
 800609e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060a6:	4b46      	ldr	r3, [pc, #280]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 80060a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80060ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80060b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060bc:	4b40      	ldr	r3, [pc, #256]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 80060be:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 80060c2:	4b3f      	ldr	r3, [pc, #252]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 80060c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80060c8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80060cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80060d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060d4:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80060d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80060dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80060e4:	ed97 6a08 	vldr	s12, [r7, #32]
 80060e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80060ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80060f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f8:	4b31      	ldr	r3, [pc, #196]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 80060fa:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 80060fe:	4b30      	ldr	r3, [pc, #192]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006100:	ed93 7a00 	vldr	s14, [r3]
 8006104:	4b2e      	ldr	r3, [pc, #184]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006106:	edd3 7a00 	vldr	s15, [r3]
 800610a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800610e:	4b2c      	ldr	r3, [pc, #176]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006110:	edd3 6a01 	vldr	s13, [r3, #4]
 8006114:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006116:	edd3 7a01 	vldr	s15, [r3, #4]
 800611a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800611e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006122:	4b27      	ldr	r3, [pc, #156]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006124:	edd3 6a02 	vldr	s13, [r3, #8]
 8006128:	4b25      	ldr	r3, [pc, #148]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800612a:	edd3 7a02 	vldr	s15, [r3, #8]
 800612e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006136:	4b22      	ldr	r3, [pc, #136]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006138:	edd3 6a03 	vldr	s13, [r3, #12]
 800613c:	4b20      	ldr	r3, [pc, #128]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800613e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800614a:	eeb0 0a67 	vmov.f32	s0, s15
 800614e:	f000 fb93 	bl	8006878 <invSqrt>
 8006152:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006156:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006158:	ed93 7a00 	vldr	s14, [r3]
 800615c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006164:	4b16      	ldr	r3, [pc, #88]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006166:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 800616a:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800616c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006170:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800617a:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 800617e:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006180:	ed93 7a02 	vldr	s14, [r3, #8]
 8006184:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618c:	4b0c      	ldr	r3, [pc, #48]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 800618e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8006192:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 8006194:	ed93 7a03 	vldr	s14, [r3, #12]
 8006198:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800619c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a0:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <MahonyAHRSupdateIMU+0x4d4>)
 80061a2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80061a6:	bf00      	nop
 80061a8:	3748      	adds	r7, #72	@ 0x48
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200007b0 	.word	0x200007b0
 80061b4:	200007b4 	.word	0x200007b4
 80061b8:	200007b8 	.word	0x200007b8
 80061bc:	20000038 	.word	0x20000038
 80061c0:	20000028 	.word	0x20000028

080061c4 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 80061ca:	4b44      	ldr	r3, [pc, #272]	@ (80062dc <quaternionToThetaZ+0x118>)
 80061cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80061d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80061d4:	4b41      	ldr	r3, [pc, #260]	@ (80062dc <quaternionToThetaZ+0x118>)
 80061d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80061da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061de:	4b3f      	ldr	r3, [pc, #252]	@ (80062dc <quaternionToThetaZ+0x118>)
 80061e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80061e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80061e8:	4b3c      	ldr	r3, [pc, #240]	@ (80062dc <quaternionToThetaZ+0x118>)
 80061ea:	edd3 7a00 	vldr	s15, [r3]
 80061ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f6:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 80061fa:	4b38      	ldr	r3, [pc, #224]	@ (80062dc <quaternionToThetaZ+0x118>)
 80061fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006200:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006204:	4b35      	ldr	r3, [pc, #212]	@ (80062dc <quaternionToThetaZ+0x118>)
 8006206:	edd3 7a03 	vldr	s15, [r3, #12]
 800620a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800620e:	4b33      	ldr	r3, [pc, #204]	@ (80062dc <quaternionToThetaZ+0x118>)
 8006210:	edd3 7a01 	vldr	s15, [r3, #4]
 8006214:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006218:	4b30      	ldr	r3, [pc, #192]	@ (80062dc <quaternionToThetaZ+0x118>)
 800621a:	edd3 7a00 	vldr	s15, [r3]
 800621e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006226:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800622a:	4b2c      	ldr	r3, [pc, #176]	@ (80062dc <quaternionToThetaZ+0x118>)
 800622c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006230:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006234:	4b29      	ldr	r3, [pc, #164]	@ (80062dc <quaternionToThetaZ+0x118>)
 8006236:	edd3 7a01 	vldr	s15, [r3, #4]
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006242:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006246:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <quaternionToThetaZ+0x118>)
 8006248:	edd3 7a02 	vldr	s15, [r3, #8]
 800624c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006250:	4b22      	ldr	r3, [pc, #136]	@ (80062dc <quaternionToThetaZ+0x118>)
 8006252:	edd3 7a02 	vldr	s15, [r3, #8]
 8006256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800625a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625e:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8006266:	edd7 7a05 	vldr	s15, [r7, #20]
 800626a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800626e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006272:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800627a:	edd7 7a03 	vldr	s15, [r7, #12]
 800627e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006286:	eeb0 0a67 	vmov.f32	s0, s15
 800628a:	f009 f943 	bl	800f514 <sqrtf>
 800628e:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 8006292:	ed97 7a02 	vldr	s14, [r7, #8]
 8006296:	edd7 7a01 	vldr	s15, [r7, #4]
 800629a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800629e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80062a2:	eeb0 0a66 	vmov.f32	s0, s13
 80062a6:	f009 f988 	bl	800f5ba <fminf>
 80062aa:	eef0 7a40 	vmov.f32	s15, s0
 80062ae:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80062b2:	eeb0 0a67 	vmov.f32	s0, s15
 80062b6:	f009 f963 	bl	800f580 <fmaxf>
 80062ba:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 80062be:	ed97 0a00 	vldr	s0, [r7]
 80062c2:	f009 f8cd 	bl	800f460 <acosf>
 80062c6:	eef0 7a40 	vmov.f32	s15, s0
 80062ca:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80062e0 <quaternionToThetaZ+0x11c>
 80062ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80062d2:	eeb0 0a67 	vmov.f32	s0, s15
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000028 	.word	0x20000028
 80062e0:	42654ca3 	.word	0x42654ca3

080062e4 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80062ea:	4b22      	ldr	r3, [pc, #136]	@ (8006374 <quaternionToPitchDegree+0x90>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	4b20      	ldr	r3, [pc, #128]	@ (8006374 <quaternionToPitchDegree+0x90>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006374 <quaternionToPitchDegree+0x90>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006374 <quaternionToPitchDegree+0x90>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 8006302:	ed97 7a05 	vldr	s14, [r7, #20]
 8006306:	edd7 7a03 	vldr	s15, [r7, #12]
 800630a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800630e:	edd7 6a02 	vldr	s13, [r7, #8]
 8006312:	edd7 7a04 	vldr	s15, [r7, #16]
 8006316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800631e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006322:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 8006326:	edd7 7a01 	vldr	s15, [r7, #4]
 800632a:	eef0 7ae7 	vabs.f32	s15, s15
 800632e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633a:	db0c      	blt.n	8006356 <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 800633c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	dd02      	ble.n	8006350 <quaternionToPitchDegree+0x6c>
 800634a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8006378 <quaternionToPitchDegree+0x94>
 800634e:	e00c      	b.n	800636a <quaternionToPitchDegree+0x86>
 8006350:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800637c <quaternionToPitchDegree+0x98>
 8006354:	e009      	b.n	800636a <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 8006356:	ed97 0a01 	vldr	s0, [r7, #4]
 800635a:	f009 f8ad 	bl	800f4b8 <asinf>
 800635e:	eef0 7a40 	vmov.f32	s15, s0
 8006362:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006380 <quaternionToPitchDegree+0x9c>
 8006366:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800636a:	eeb0 0a67 	vmov.f32	s0, s15
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000028 	.word	0x20000028
 8006378:	42b40000 	.word	0x42b40000
 800637c:	c2b40000 	.word	0xc2b40000
 8006380:	42652ee0 	.word	0x42652ee0

08006384 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800638a:	4b20      	ldr	r3, [pc, #128]	@ (800640c <quaternionToRollDegree+0x88>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	4b1e      	ldr	r3, [pc, #120]	@ (800640c <quaternionToRollDegree+0x88>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	4b1d      	ldr	r3, [pc, #116]	@ (800640c <quaternionToRollDegree+0x88>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	4b1b      	ldr	r3, [pc, #108]	@ (800640c <quaternionToRollDegree+0x88>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80063a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80063a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80063aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ae:	edd7 6a03 	vldr	s13, [r7, #12]
 80063b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80063b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063c2:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80063c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80063ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80063d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063e6:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 80063ea:	edd7 0a00 	vldr	s1, [r7]
 80063ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80063f2:	f009 f88d 	bl	800f510 <atan2f>
 80063f6:	eef0 7a40 	vmov.f32	s15, s0
 80063fa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006410 <quaternionToRollDegree+0x8c>
 80063fe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006402:	eeb0 0a67 	vmov.f32	s0, s15
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000028 	.word	0x20000028
 8006410:	42652ee0 	.word	0x42652ee0

08006414 <quaternionToYaw>:


float quaternionToYaw(){
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800641a:	4b2a      	ldr	r3, [pc, #168]	@ (80064c4 <quaternionToYaw+0xb0>)
 800641c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006420:	4b28      	ldr	r3, [pc, #160]	@ (80064c4 <quaternionToYaw+0xb0>)
 8006422:	edd3 7a02 	vldr	s15, [r3, #8]
 8006426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800642a:	4b26      	ldr	r3, [pc, #152]	@ (80064c4 <quaternionToYaw+0xb0>)
 800642c:	edd3 6a00 	vldr	s13, [r3]
 8006430:	4b24      	ldr	r3, [pc, #144]	@ (80064c4 <quaternionToYaw+0xb0>)
 8006432:	edd3 7a03 	vldr	s15, [r3, #12]
 8006436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800643a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800643e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006442:	4b20      	ldr	r3, [pc, #128]	@ (80064c4 <quaternionToYaw+0xb0>)
 8006444:	ed93 7a00 	vldr	s14, [r3]
 8006448:	4b1e      	ldr	r3, [pc, #120]	@ (80064c4 <quaternionToYaw+0xb0>)
 800644a:	edd3 7a00 	vldr	s15, [r3]
 800644e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006452:	4b1c      	ldr	r3, [pc, #112]	@ (80064c4 <quaternionToYaw+0xb0>)
 8006454:	edd3 6a01 	vldr	s13, [r3, #4]
 8006458:	4b1a      	ldr	r3, [pc, #104]	@ (80064c4 <quaternionToYaw+0xb0>)
 800645a:	edd3 7a01 	vldr	s15, [r3, #4]
 800645e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006466:	4b17      	ldr	r3, [pc, #92]	@ (80064c4 <quaternionToYaw+0xb0>)
 8006468:	edd3 6a02 	vldr	s13, [r3, #8]
 800646c:	4b15      	ldr	r3, [pc, #84]	@ (80064c4 <quaternionToYaw+0xb0>)
 800646e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006476:	ee37 7a67 	vsub.f32	s14, s14, s15
 800647a:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <quaternionToYaw+0xb0>)
 800647c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006480:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <quaternionToYaw+0xb0>)
 8006482:	edd3 7a03 	vldr	s15, [r3, #12]
 8006486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800648a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648e:	eef0 0a67 	vmov.f32	s1, s15
 8006492:	eeb0 0a46 	vmov.f32	s0, s12
 8006496:	f009 f83b 	bl	800f510 <atan2f>
 800649a:	eef0 7a40 	vmov.f32	s15, s0
 800649e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80064c8 <quaternionToYaw+0xb4>
 80064a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064a6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80064cc <quaternionToYaw+0xb8>
 80064aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064ae:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	ee07 3a90 	vmov	s15, r3
}
 80064b8:	eeb0 0a67 	vmov.f32	s0, s15
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000028 	.word	0x20000028
 80064c8:	43340000 	.word	0x43340000
 80064cc:	40490fd0 	.word	0x40490fd0

080064d0 <quaternionToPitch>:

float quaternionToPitch(){
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80064d6:	4b17      	ldr	r3, [pc, #92]	@ (8006534 <quaternionToPitch+0x64>)
 80064d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80064dc:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <quaternionToPitch+0x64>)
 80064de:	edd3 7a03 	vldr	s15, [r3, #12]
 80064e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064e6:	4b13      	ldr	r3, [pc, #76]	@ (8006534 <quaternionToPitch+0x64>)
 80064e8:	edd3 6a00 	vldr	s13, [r3]
 80064ec:	4b11      	ldr	r3, [pc, #68]	@ (8006534 <quaternionToPitch+0x64>)
 80064ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80064f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006502:	f008 ffd9 	bl	800f4b8 <asinf>
 8006506:	eef0 7a40 	vmov.f32	s15, s0
 800650a:	eef1 7a67 	vneg.f32	s15, s15
 800650e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006538 <quaternionToPitch+0x68>
 8006512:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006516:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800653c <quaternionToPitch+0x6c>
 800651a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800651e:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	ee07 3a90 	vmov	s15, r3
}
 8006528:	eeb0 0a67 	vmov.f32	s0, s15
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000028 	.word	0x20000028
 8006538:	43340000 	.word	0x43340000
 800653c:	40490fd0 	.word	0x40490fd0

08006540 <quaternionToRoll>:

float quaternionToRoll(){
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8006546:	4b2a      	ldr	r3, [pc, #168]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006548:	ed93 7a00 	vldr	s14, [r3]
 800654c:	4b28      	ldr	r3, [pc, #160]	@ (80065f0 <quaternionToRoll+0xb0>)
 800654e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006556:	4b26      	ldr	r3, [pc, #152]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006558:	edd3 6a02 	vldr	s13, [r3, #8]
 800655c:	4b24      	ldr	r3, [pc, #144]	@ (80065f0 <quaternionToRoll+0xb0>)
 800655e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800656a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800656e:	4b20      	ldr	r3, [pc, #128]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006570:	ed93 7a00 	vldr	s14, [r3]
 8006574:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006576:	edd3 7a00 	vldr	s15, [r3]
 800657a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800657e:	4b1c      	ldr	r3, [pc, #112]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006580:	edd3 6a01 	vldr	s13, [r3, #4]
 8006584:	4b1a      	ldr	r3, [pc, #104]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006586:	edd3 7a01 	vldr	s15, [r3, #4]
 800658a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800658e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006592:	4b17      	ldr	r3, [pc, #92]	@ (80065f0 <quaternionToRoll+0xb0>)
 8006594:	edd3 6a02 	vldr	s13, [r3, #8]
 8006598:	4b15      	ldr	r3, [pc, #84]	@ (80065f0 <quaternionToRoll+0xb0>)
 800659a:	edd3 7a02 	vldr	s15, [r3, #8]
 800659e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065a6:	4b12      	ldr	r3, [pc, #72]	@ (80065f0 <quaternionToRoll+0xb0>)
 80065a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80065ac:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <quaternionToRoll+0xb0>)
 80065ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80065b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ba:	eef0 0a67 	vmov.f32	s1, s15
 80065be:	eeb0 0a46 	vmov.f32	s0, s12
 80065c2:	f008 ffa5 	bl	800f510 <atan2f>
 80065c6:	eef0 7a40 	vmov.f32	s15, s0
 80065ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80065f4 <quaternionToRoll+0xb4>
 80065ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065d2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80065f8 <quaternionToRoll+0xb8>
 80065d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065da:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	ee07 3a90 	vmov	s15, r3
}
 80065e4:	eeb0 0a67 	vmov.f32	s0, s15
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000028 	.word	0x20000028
 80065f4:	43340000 	.word	0x43340000
 80065f8:	40490fd0 	.word	0x40490fd0

080065fc <getInitialQuaternion>:

void getInitialQuaternion() {
 80065fc:	b5b0      	push	{r4, r5, r7, lr}
 80065fe:	b092      	sub	sp, #72	@ 0x48
 8006600:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 8006602:	4b99      	ldr	r3, [pc, #612]	@ (8006868 <getInitialQuaternion+0x26c>)
 8006604:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006608:	4b97      	ldr	r3, [pc, #604]	@ (8006868 <getInitialQuaternion+0x26c>)
 800660a:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 800660e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006612:	4b95      	ldr	r3, [pc, #596]	@ (8006868 <getInitialQuaternion+0x26c>)
 8006614:	edd3 6a2f 	vldr	s13, [r3, #188]	@ 0xbc
 8006618:	4b93      	ldr	r3, [pc, #588]	@ (8006868 <getInitialQuaternion+0x26c>)
 800661a:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800661e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006626:	4b90      	ldr	r3, [pc, #576]	@ (8006868 <getInitialQuaternion+0x26c>)
 8006628:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 800662c:	4b8e      	ldr	r3, [pc, #568]	@ (8006868 <getInitialQuaternion+0x26c>)
 800662e:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8006632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800663a:	ee17 0a90 	vmov	r0, s15
 800663e:	f7f9 ffa3 	bl	8000588 <__aeabi_f2d>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	ec43 2b10 	vmov	d0, r2, r3
 800664a:	f008 fe87 	bl	800f35c <sqrt>
 800664e:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_y;
 8006652:	4b85      	ldr	r3, [pc, #532]	@ (8006868 <getInitialQuaternion+0x26c>)
 8006654:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006658:	4618      	mov	r0, r3
 800665a:	f7f9 ff95 	bl	8000588 <__aeabi_f2d>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.acc_z;
 8006666:	4b80      	ldr	r3, [pc, #512]	@ (8006868 <getInitialQuaternion+0x26c>)
 8006668:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 800666c:	eef1 7a67 	vneg.f32	s15, s15
 8006670:	ee17 3a90 	vmov	r3, s15
 8006674:	4618      	mov	r0, r3
 8006676:	f7f9 ff87 	bl	8000588 <__aeabi_f2d>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.acc_x;
 8006682:	4b79      	ldr	r3, [pc, #484]	@ (8006868 <getInitialQuaternion+0x26c>)
 8006684:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006688:	4618      	mov	r0, r3
 800668a:	f7f9 ff7d 	bl	8000588 <__aeabi_f2d>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006696:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800669a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800669e:	f7fa f8f5 	bl	800088c <__aeabi_ddiv>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80066aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80066ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066b2:	f7fa f8eb 	bl	800088c <__aeabi_ddiv>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80066be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80066c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c6:	f7fa f8e1 	bl	800088c <__aeabi_ddiv>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80066d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066d6:	f04f 0000 	mov.w	r0, #0
 80066da:	4964      	ldr	r1, [pc, #400]	@ (800686c <getInitialQuaternion+0x270>)
 80066dc:	f7f9 fdf4 	bl	80002c8 <__aeabi_dsub>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	ec43 2b17 	vmov	d7, r2, r3
 80066e8:	eeb0 0a47 	vmov.f32	s0, s14
 80066ec:	eef0 0a67 	vmov.f32	s1, s15
 80066f0:	f008 fe34 	bl	800f35c <sqrt>
 80066f4:	ec51 0b10 	vmov	r0, r1, d0
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006870 <getInitialQuaternion+0x274>)
 80066fe:	f7f9 ff9b 	bl	8000638 <__aeabi_dmul>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 800670a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670e:	f04f 0000 	mov.w	r0, #0
 8006712:	4957      	ldr	r1, [pc, #348]	@ (8006870 <getInitialQuaternion+0x274>)
 8006714:	f7fa f8ba 	bl	800088c <__aeabi_ddiv>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006720:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006728:	f7f9 ff86 	bl	8000638 <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	4b4d      	ldr	r3, [pc, #308]	@ (8006870 <getInitialQuaternion+0x274>)
 800673a:	f7f9 ff7d 	bl	8000638 <__aeabi_dmul>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006746:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800674a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800674e:	f7f9 ff73 	bl	8000638 <__aeabi_dmul>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4610      	mov	r0, r2
 8006758:	4619      	mov	r1, r3
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	4b44      	ldr	r3, [pc, #272]	@ (8006870 <getInitialQuaternion+0x274>)
 8006760:	f7f9 ff6a 	bl	8000638 <__aeabi_dmul>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800677c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006780:	f7f9 ff5a 	bl	8000638 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4614      	mov	r4, r2
 800678a:	461d      	mov	r5, r3
 800678c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006794:	f7f9 ff50 	bl	8000638 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4620      	mov	r0, r4
 800679e:	4629      	mov	r1, r5
 80067a0:	f7f9 fd94 	bl	80002cc <__adddf3>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4614      	mov	r4, r2
 80067aa:	461d      	mov	r5, r3
 80067ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80067b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067b4:	f7f9 ff40 	bl	8000638 <__aeabi_dmul>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7f9 fd84 	bl	80002cc <__adddf3>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4614      	mov	r4, r2
 80067ca:	461d      	mov	r5, r3
 80067cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067d4:	f7f9 ff30 	bl	8000638 <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4620      	mov	r0, r4
 80067de:	4629      	mov	r1, r5
 80067e0:	f7f9 fd74 	bl	80002cc <__adddf3>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	ec43 2b17 	vmov	d7, r2, r3
 80067ec:	eeb0 0a47 	vmov.f32	s0, s14
 80067f0:	eef0 0a67 	vmov.f32	s1, s15
 80067f4:	f008 fdb2 	bl	800f35c <sqrt>
 80067f8:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 80067fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006800:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006804:	f7fa f842 	bl	800088c <__aeabi_ddiv>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	f7fa f9ea 	bl	8000be8 <__aeabi_d2f>
 8006814:	4603      	mov	r3, r0
 8006816:	4a17      	ldr	r2, [pc, #92]	@ (8006874 <getInitialQuaternion+0x278>)
 8006818:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 800681a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800681e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006822:	f7fa f833 	bl	800088c <__aeabi_ddiv>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4610      	mov	r0, r2
 800682c:	4619      	mov	r1, r3
 800682e:	f7fa f9db 	bl	8000be8 <__aeabi_d2f>
 8006832:	4603      	mov	r3, r0
 8006834:	4a0f      	ldr	r2, [pc, #60]	@ (8006874 <getInitialQuaternion+0x278>)
 8006836:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006838:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800683c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006840:	f7fa f824 	bl	800088c <__aeabi_ddiv>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4610      	mov	r0, r2
 800684a:	4619      	mov	r1, r3
 800684c:	f7fa f9cc 	bl	8000be8 <__aeabi_d2f>
 8006850:	4603      	mov	r3, r0
 8006852:	4a08      	ldr	r2, [pc, #32]	@ (8006874 <getInitialQuaternion+0x278>)
 8006854:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006856:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <getInitialQuaternion+0x278>)
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	60da      	str	r2, [r3, #12]
}
 800685e:	bf00      	nop
 8006860:	3748      	adds	r7, #72	@ 0x48
 8006862:	46bd      	mov	sp, r7
 8006864:	bdb0      	pop	{r4, r5, r7, pc}
 8006866:	bf00      	nop
 8006868:	20000538 	.word	0x20000538
 800686c:	3ff00000 	.word	0x3ff00000
 8006870:	3fe00000 	.word	0x3fe00000
 8006874:	20000028 	.word	0x20000028

08006878 <invSqrt>:

float invSqrt(float x) {
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006882:	edd7 7a01 	vldr	s15, [r7, #4]
 8006886:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800688a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800688e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006896:	f107 0310 	add.w	r3, r7, #16
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	105a      	asrs	r2, r3, #1
 80068a2:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <invSqrt+0x74>)
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80068b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80068b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80068b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80068c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80068c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80068d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	ee07 3a90 	vmov	s15, r3
}
 80068de:	eeb0 0a67 	vmov.f32	s0, s15
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	5f3759df 	.word	0x5f3759df

080068f0 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 80068f6:	4b3d      	ldr	r3, [pc, #244]	@ (80069ec <calculate_accel_std_deviation+0xfc>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <calculate_accel_std_deviation+0x1c>
 80068fe:	4b3c      	ldr	r3, [pc, #240]	@ (80069f0 <calculate_accel_std_deviation+0x100>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d802      	bhi.n	800690c <calculate_accel_std_deviation+0x1c>
 8006906:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80069f4 <calculate_accel_std_deviation+0x104>
 800690a:	e069      	b.n	80069e0 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 800690c:	4b37      	ldr	r3, [pc, #220]	@ (80069ec <calculate_accel_std_deviation+0xfc>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <calculate_accel_std_deviation+0x2a>
 8006914:	4b36      	ldr	r3, [pc, #216]	@ (80069f0 <calculate_accel_std_deviation+0x100>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	e000      	b.n	800691c <calculate_accel_std_deviation+0x2c>
 800691a:	2305      	movs	r3, #5
 800691c:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e00e      	b.n	8006954 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006936:	4a30      	ldr	r2, [pc, #192]	@ (80069f8 <calculate_accel_std_deviation+0x108>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	edd3 7a00 	vldr	s15, [r3]
 8006942:	ed97 7a05 	vldr	s14, [r7, #20]
 8006946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800694a:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	dbec      	blt.n	8006936 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006966:	edd7 6a05 	vldr	s13, [r7, #20]
 800696a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696e:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	e01e      	b.n	80069b6 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006978:	4a1f      	ldr	r2, [pc, #124]	@ (80069f8 <calculate_accel_std_deviation+0x108>)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	ed93 7a00 	vldr	s14, [r3]
 8006984:	edd7 7a00 	vldr	s15, [r7]
 8006988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800698c:	4a1a      	ldr	r2, [pc, #104]	@ (80069f8 <calculate_accel_std_deviation+0x108>)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	edd3 6a00 	vldr	s13, [r3]
 8006998:	edd7 7a00 	vldr	s15, [r7]
 800699c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80069a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ac:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	dbdc      	blt.n	8006978 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c8:	edd7 6a04 	vldr	s13, [r7, #16]
 80069cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d0:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 80069d4:	ed97 0a04 	vldr	s0, [r7, #16]
 80069d8:	f008 fd9c 	bl	800f514 <sqrtf>
 80069dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80069e0:	eeb0 0a67 	vmov.f32	s0, s15
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2000083d 	.word	0x2000083d
 80069f0:	2000083c 	.word	0x2000083c
 80069f4:	00000000 	.word	0x00000000
 80069f8:	20000828 	.word	0x20000828

080069fc <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a0a:	eef0 7ae7 	vabs.f32	s15, s15
 8006a0e:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006a12:	4b31      	ldr	r3, [pc, #196]	@ (8006ad8 <detect_accel_failure+0xdc>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	4a31      	ldr	r2, [pc, #196]	@ (8006adc <detect_accel_failure+0xe0>)
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006a20:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad8 <detect_accel_failure+0xdc>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	4b2e      	ldr	r3, [pc, #184]	@ (8006ae0 <detect_accel_failure+0xe4>)
 8006a28:	fb83 1302 	smull	r1, r3, r3, r2
 8006a2c:	1059      	asrs	r1, r3, #1
 8006a2e:	17d3      	asrs	r3, r2, #31
 8006a30:	1ac9      	subs	r1, r1, r3
 8006a32:	460b      	mov	r3, r1
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	1ad1      	subs	r1, r2, r3
 8006a3a:	b2ca      	uxtb	r2, r1
 8006a3c:	4b26      	ldr	r3, [pc, #152]	@ (8006ad8 <detect_accel_failure+0xdc>)
 8006a3e:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8006a40:	4b25      	ldr	r3, [pc, #148]	@ (8006ad8 <detect_accel_failure+0xdc>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006a48:	4b26      	ldr	r3, [pc, #152]	@ (8006ae4 <detect_accel_failure+0xe8>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8006a4e:	f7ff ff4f 	bl	80068f0 <calculate_accel_std_deviation>
 8006a52:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8006a56:	f7fc fb17 	bl	8003088 <flight_algorithm_get_start_time>
 8006a5a:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8006a62:	4a21      	ldr	r2, [pc, #132]	@ (8006ae8 <detect_accel_failure+0xec>)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006a68:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <detect_accel_failure+0xec>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8006a70:	4b1e      	ldr	r3, [pc, #120]	@ (8006aec <detect_accel_failure+0xf0>)
 8006a72:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8006a74:	4b1e      	ldr	r3, [pc, #120]	@ (8006af0 <detect_accel_failure+0xf4>)
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	e014      	b.n	8006aa4 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006a7a:	f000 ffed 	bl	8007a58 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	4b19      	ldr	r3, [pc, #100]	@ (8006ae8 <detect_accel_failure+0xec>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d804      	bhi.n	8006a9c <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8006a92:	4b18      	ldr	r3, [pc, #96]	@ (8006af4 <detect_accel_failure+0xf8>)
 8006a94:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 8006a96:	4b18      	ldr	r3, [pc, #96]	@ (8006af8 <detect_accel_failure+0xfc>)
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	e003      	b.n	8006aa4 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006a9c:	4b16      	ldr	r3, [pc, #88]	@ (8006af8 <detect_accel_failure+0xfc>)
 8006a9e:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8006aa0:	4b16      	ldr	r3, [pc, #88]	@ (8006afc <detect_accel_failure+0x100>)
 8006aa2:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8006aa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8006aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8006aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	dc08      	bgt.n	8006ac8 <detect_accel_failure+0xcc>
 8006ab6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8006abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	dd01      	ble.n	8006acc <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2000083c 	.word	0x2000083c
 8006adc:	20000828 	.word	0x20000828
 8006ae0:	66666667 	.word	0x66666667
 8006ae4:	2000083d 	.word	0x2000083d
 8006ae8:	20000824 	.word	0x20000824
 8006aec:	43480000 	.word	0x43480000
 8006af0:	42c80000 	.word	0x42c80000
 8006af4:	43160000 	.word	0x43160000
 8006af8:	42480000 	.word	0x42480000
 8006afc:	41700000 	.word	0x41700000

08006b00 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006b08:	481b      	ldr	r0, [pc, #108]	@ (8006b78 <sensor_fusion_init+0x78>)
 8006b0a:	f7fc fac9 	bl	80030a0 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b78 <sensor_fusion_init+0x78>)
 8006b10:	4a1a      	ldr	r2, [pc, #104]	@ (8006b7c <sensor_fusion_init+0x7c>)
 8006b12:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006b14:	4b18      	ldr	r3, [pc, #96]	@ (8006b78 <sensor_fusion_init+0x78>)
 8006b16:	4a1a      	ldr	r2, [pc, #104]	@ (8006b80 <sensor_fusion_init+0x80>)
 8006b18:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006b1a:	4b17      	ldr	r3, [pc, #92]	@ (8006b78 <sensor_fusion_init+0x78>)
 8006b1c:	4a19      	ldr	r2, [pc, #100]	@ (8006b84 <sensor_fusion_init+0x84>)
 8006b1e:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e009      	b.n	8006b3a <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006b26:	4a18      	ldr	r2, [pc, #96]	@ (8006b88 <sensor_fusion_init+0x88>)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	ddf2      	ble.n	8006b26 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8006b40:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <sensor_fusion_init+0x8c>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8006b46:	4b12      	ldr	r3, [pc, #72]	@ (8006b90 <sensor_fusion_init+0x90>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006b4c:	4b11      	ldr	r3, [pc, #68]	@ (8006b94 <sensor_fusion_init+0x94>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8006b52:	4b11      	ldr	r3, [pc, #68]	@ (8006b98 <sensor_fusion_init+0x98>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b9c <sensor_fusion_init+0x9c>)
 8006b5e:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8006b60:	f000 ff7a 	bl	8007a58 <HAL_GetTick>
 8006b64:	4603      	mov	r3, r0
 8006b66:	4a0e      	ldr	r2, [pc, #56]	@ (8006ba0 <sensor_fusion_init+0xa0>)
 8006b68:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba4 <sensor_fusion_init+0xa4>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200007cc 	.word	0x200007cc
 8006b7c:	3dcccccd 	.word	0x3dcccccd
 8006b80:	3ba3d70a 	.word	0x3ba3d70a
 8006b84:	40a00000 	.word	0x40a00000
 8006b88:	20000828 	.word	0x20000828
 8006b8c:	2000083c 	.word	0x2000083c
 8006b90:	2000083d 	.word	0x2000083d
 8006b94:	2000083e 	.word	0x2000083e
 8006b98:	20000818 	.word	0x20000818
 8006b9c:	2000081c 	.word	0x2000081c
 8006ba0:	20000820 	.word	0x20000820
 8006ba4:	20000824 	.word	0x20000824

08006ba8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 8006bb4:	f000 ff50 	bl	8007a58 <HAL_GetTick>
 8006bb8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8006bba:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce8 <sensor_fusion_update_kalman+0x140>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006cec <sensor_fusion_update_kalman+0x144>
 8006bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8006bd6:	4a44      	ldr	r2, [pc, #272]	@ (8006ce8 <sensor_fusion_update_kalman+0x140>)
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8006be2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006be6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006cf0 <sensor_fusion_update_kalman+0x148>
 8006bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf2:	d801      	bhi.n	8006bf8 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8006bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf4 <sensor_fusion_update_kalman+0x14c>)
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->angleZ * (M_PI / 180.0f);  // dereceyse radyana çevir
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7f9 fcc2 	bl	8000588 <__aeabi_f2d>
 8006c04:	a334      	add	r3, pc, #208	@ (adr r3, 8006cd8 <sensor_fusion_update_kalman+0x130>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fd15 	bl	8000638 <__aeabi_dmul>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7f9 ffe7 	bl	8000be8 <__aeabi_d2f>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8006c1e:	69b8      	ldr	r0, [r7, #24]
 8006c20:	f7f9 fcb2 	bl	8000588 <__aeabi_f2d>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	ec43 2b10 	vmov	d0, r2, r3
 8006c2c:	f008 fbc4 	bl	800f3b8 <cos>
 8006c30:	ec51 0b10 	vmov	r0, r1, d0
 8006c34:	a32a      	add	r3, pc, #168	@ (adr r3, 8006ce0 <sensor_fusion_update_kalman+0x138>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fcfd 	bl	8000638 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4610      	mov	r0, r2
 8006c44:	4619      	mov	r1, r3
 8006c46:	f7f9 ffcf 	bl	8000be8 <__aeabi_d2f>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->acc_z - g_local_z;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c5c:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006c60:	ed97 0a04 	vldr	s0, [r7, #16]
 8006c64:	f7ff feca 	bl	80069fc <detect_accel_failure>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b22      	ldr	r3, [pc, #136]	@ (8006cf8 <sensor_fusion_update_kalman+0x150>)
 8006c6e:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006c70:	4b21      	ldr	r3, [pc, #132]	@ (8006cf8 <sensor_fusion_update_kalman+0x150>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <sensor_fusion_update_kalman+0xd8>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006c78:	4b20      	ldr	r3, [pc, #128]	@ (8006cfc <sensor_fusion_update_kalman+0x154>)
 8006c7a:	4a21      	ldr	r2, [pc, #132]	@ (8006d00 <sensor_fusion_update_kalman+0x158>)
 8006c7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c7e:	e002      	b.n	8006c86 <sensor_fusion_update_kalman+0xde>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8006c80:	4b1e      	ldr	r3, [pc, #120]	@ (8006cfc <sensor_fusion_update_kalman+0x154>)
 8006c82:	4a20      	ldr	r2, [pc, #128]	@ (8006d04 <sensor_fusion_update_kalman+0x15c>)
 8006c84:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8006c86:	4b20      	ldr	r3, [pc, #128]	@ (8006d08 <sensor_fusion_update_kalman+0x160>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d020      	beq.n	8006cd0 <sensor_fusion_update_kalman+0x128>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8006c8e:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8006c92:	edd7 0a04 	vldr	s1, [r7, #16]
 8006c96:	ed97 0a07 	vldr	s0, [r7, #28]
 8006c9a:	4818      	ldr	r0, [pc, #96]	@ (8006cfc <sensor_fusion_update_kalman+0x154>)
 8006c9c:	f7fc fa5a 	bl	8003154 <KalmanFilter_Update>
 8006ca0:	eef0 7a40 	vmov.f32	s15, s0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8006caa:	4814      	ldr	r0, [pc, #80]	@ (8006cfc <sensor_fusion_update_kalman+0x154>)
 8006cac:	f7fd fc36 	bl	800451c <KalmanFilter_IsApogeeDetected>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 8006cb8:	4810      	ldr	r0, [pc, #64]	@ (8006cfc <sensor_fusion_update_kalman+0x154>)
 8006cba:	f7fd fc20 	bl	80044fe <Kalman_Get_Velocity>
 8006cbe:	eef0 7a40 	vmov.f32	s15, s0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <sensor_fusion_update_kalman+0x150>)
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	765a      	strb	r2, [r3, #25]
    }
}
 8006cd0:	bf00      	nop
 8006cd2:	3728      	adds	r7, #40	@ 0x28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	a2529d39 	.word	0xa2529d39
 8006cdc:	3f91df46 	.word	0x3f91df46
 8006ce0:	60000000 	.word	0x60000000
 8006ce4:	40239eb8 	.word	0x40239eb8
 8006ce8:	20000820 	.word	0x20000820
 8006cec:	447a0000 	.word	0x447a0000
 8006cf0:	3a83126f 	.word	0x3a83126f
 8006cf4:	3c23d70a 	.word	0x3c23d70a
 8006cf8:	2000083e 	.word	0x2000083e
 8006cfc:	200007cc 	.word	0x200007cc
 8006d00:	42480000 	.word	0x42480000
 8006d04:	3e99999a 	.word	0x3e99999a
 8006d08:	20000818 	.word	0x20000818

08006d0c <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_MspInit+0x4c>)
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	4a0f      	ldr	r2, [pc, #60]	@ (8006d70 <HAL_MspInit+0x4c>)
 8006d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <HAL_MspInit+0x4c>)
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <HAL_MspInit+0x4c>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	4a08      	ldr	r2, [pc, #32]	@ (8006d70 <HAL_MspInit+0x4c>)
 8006d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d56:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <HAL_MspInit+0x4c>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40023800 	.word	0x40023800

08006d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08c      	sub	sp, #48	@ 0x30
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7c:	f107 031c 	add.w	r3, r7, #28
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a42      	ldr	r2, [pc, #264]	@ (8006e9c <HAL_I2C_MspInit+0x128>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d12d      	bne.n	8006df2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	4b41      	ldr	r3, [pc, #260]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	4a40      	ldr	r2, [pc, #256]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006da0:	f043 0302 	orr.w	r3, r3, #2
 8006da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006da6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006db2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006db8:	2312      	movs	r3, #18
 8006dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc8:	f107 031c 	add.w	r3, r7, #28
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4835      	ldr	r0, [pc, #212]	@ (8006ea4 <HAL_I2C_MspInit+0x130>)
 8006dd0:	f001 fb86 	bl	80084e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ddc:	4a30      	ldr	r2, [pc, #192]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006dde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006de4:	4b2e      	ldr	r3, [pc, #184]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006df0:	e050      	b.n	8006e94 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea8 <HAL_I2C_MspInit+0x134>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d14b      	bne.n	8006e94 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	4b27      	ldr	r3, [pc, #156]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	4a26      	ldr	r2, [pc, #152]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e06:	f043 0304 	orr.w	r3, r3, #4
 8006e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e0c:	4b24      	ldr	r3, [pc, #144]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	4a1f      	ldr	r2, [pc, #124]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e3a:	2312      	movs	r3, #18
 8006e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e42:	2303      	movs	r3, #3
 8006e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006e46:	2304      	movs	r3, #4
 8006e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4816      	ldr	r0, [pc, #88]	@ (8006eac <HAL_I2C_MspInit+0x138>)
 8006e52:	f001 fb45 	bl	80084e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e5c:	2312      	movs	r3, #18
 8006e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e60:	2301      	movs	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e64:	2303      	movs	r3, #3
 8006e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006e68:	2304      	movs	r3, #4
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e6c:	f107 031c 	add.w	r3, r7, #28
 8006e70:	4619      	mov	r1, r3
 8006e72:	480f      	ldr	r0, [pc, #60]	@ (8006eb0 <HAL_I2C_MspInit+0x13c>)
 8006e74:	f001 fb34 	bl	80084e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]
 8006e7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	4a07      	ldr	r2, [pc, #28]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <HAL_I2C_MspInit+0x12c>)
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	68bb      	ldr	r3, [r7, #8]
}
 8006e94:	bf00      	nop
 8006e96:	3730      	adds	r7, #48	@ 0x30
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40005400 	.word	0x40005400
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40020400 	.word	0x40020400
 8006ea8:	40005c00 	.word	0x40005c00
 8006eac:	40020800 	.word	0x40020800
 8006eb0:	40020000 	.word	0x40020000

08006eb4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <HAL_I2C_MspDeInit+0x64>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d10f      	bne.n	8006ee6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006ec6:	4b15      	ldr	r3, [pc, #84]	@ (8006f1c <HAL_I2C_MspDeInit+0x68>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	4a14      	ldr	r2, [pc, #80]	@ (8006f1c <HAL_I2C_MspDeInit+0x68>)
 8006ecc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ed0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006ed2:	2180      	movs	r1, #128	@ 0x80
 8006ed4:	4812      	ldr	r0, [pc, #72]	@ (8006f20 <HAL_I2C_MspDeInit+0x6c>)
 8006ed6:	f001 fc97 	bl	8008808 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8006eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ede:	4810      	ldr	r0, [pc, #64]	@ (8006f20 <HAL_I2C_MspDeInit+0x6c>)
 8006ee0:	f001 fc92 	bl	8008808 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8006ee4:	e014      	b.n	8006f10 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a0e      	ldr	r2, [pc, #56]	@ (8006f24 <HAL_I2C_MspDeInit+0x70>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10f      	bne.n	8006f10 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <HAL_I2C_MspDeInit+0x68>)
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	4a09      	ldr	r2, [pc, #36]	@ (8006f1c <HAL_I2C_MspDeInit+0x68>)
 8006ef6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006efa:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8006efc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f00:	4809      	ldr	r0, [pc, #36]	@ (8006f28 <HAL_I2C_MspDeInit+0x74>)
 8006f02:	f001 fc81 	bl	8008808 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8006f06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f0a:	4808      	ldr	r0, [pc, #32]	@ (8006f2c <HAL_I2C_MspDeInit+0x78>)
 8006f0c:	f001 fc7c 	bl	8008808 <HAL_GPIO_DeInit>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40005400 	.word	0x40005400
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	40020400 	.word	0x40020400
 8006f24:	40005c00 	.word	0x40005c00
 8006f28:	40020800 	.word	0x40020800
 8006f2c:	40020000 	.word	0x40020000

08006f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f40:	d115      	bne.n	8006f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	4b0c      	ldr	r3, [pc, #48]	@ (8006f78 <HAL_TIM_Base_MspInit+0x48>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8006f78 <HAL_TIM_Base_MspInit+0x48>)
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f52:	4b09      	ldr	r3, [pc, #36]	@ (8006f78 <HAL_TIM_Base_MspInit+0x48>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	201c      	movs	r0, #28
 8006f64:	f000 fe83 	bl	8007c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006f68:	201c      	movs	r0, #28
 8006f6a:	f000 fe9c 	bl	8007ca6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40023800 	.word	0x40023800

08006f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	@ 0x38
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a83      	ldr	r2, [pc, #524]	@ (80071a8 <HAL_UART_MspInit+0x22c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d14b      	bne.n	8007036 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	4b82      	ldr	r3, [pc, #520]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	4a81      	ldr	r2, [pc, #516]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fae:	4b7f      	ldr	r3, [pc, #508]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fb6:	623b      	str	r3, [r7, #32]
 8006fb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	4b7b      	ldr	r3, [pc, #492]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc2:	4a7a      	ldr	r2, [pc, #488]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fc4:	f043 0304 	orr.w	r3, r3, #4
 8006fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fca:	4b78      	ldr	r3, [pc, #480]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	4b74      	ldr	r3, [pc, #464]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	4a73      	ldr	r2, [pc, #460]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fe0:	f043 0308 	orr.w	r3, r3, #8
 8006fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fe6:	4b71      	ldr	r3, [pc, #452]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007000:	2303      	movs	r3, #3
 8007002:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007004:	2308      	movs	r3, #8
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800700c:	4619      	mov	r1, r3
 800700e:	4868      	ldr	r0, [pc, #416]	@ (80071b0 <HAL_UART_MspInit+0x234>)
 8007010:	f001 fa66 	bl	80084e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007014:	2304      	movs	r3, #4
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007018:	2302      	movs	r3, #2
 800701a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007020:	2303      	movs	r3, #3
 8007022:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007024:	2308      	movs	r3, #8
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800702c:	4619      	mov	r1, r3
 800702e:	4861      	ldr	r0, [pc, #388]	@ (80071b4 <HAL_UART_MspInit+0x238>)
 8007030:	f001 fa56 	bl	80084e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007034:	e0b4      	b.n	80071a0 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a5f      	ldr	r2, [pc, #380]	@ (80071b8 <HAL_UART_MspInit+0x23c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	f040 80af 	bne.w	80071a0 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	4b59      	ldr	r3, [pc, #356]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704a:	4a58      	ldr	r2, [pc, #352]	@ (80071ac <HAL_UART_MspInit+0x230>)
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	6453      	str	r3, [r2, #68]	@ 0x44
 8007052:	4b56      	ldr	r3, [pc, #344]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	4b52      	ldr	r3, [pc, #328]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007066:	4a51      	ldr	r2, [pc, #324]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	6313      	str	r3, [r2, #48]	@ 0x30
 800706e:	4b4f      	ldr	r3, [pc, #316]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	4b4b      	ldr	r3, [pc, #300]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	4a4a      	ldr	r2, [pc, #296]	@ (80071ac <HAL_UART_MspInit+0x230>)
 8007084:	f043 0302 	orr.w	r3, r3, #2
 8007088:	6313      	str	r3, [r2, #48]	@ 0x30
 800708a:	4b48      	ldr	r3, [pc, #288]	@ (80071ac <HAL_UART_MspInit+0x230>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709c:	2302      	movs	r3, #2
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a4:	2303      	movs	r3, #3
 80070a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070a8:	2307      	movs	r3, #7
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070b0:	4619      	mov	r1, r3
 80070b2:	4842      	ldr	r0, [pc, #264]	@ (80071bc <HAL_UART_MspInit+0x240>)
 80070b4:	f001 fa14 	bl	80084e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070bc:	2302      	movs	r3, #2
 80070be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070c4:	2303      	movs	r3, #3
 80070c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070c8:	2307      	movs	r3, #7
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070d0:	4619      	mov	r1, r3
 80070d2:	483b      	ldr	r0, [pc, #236]	@ (80071c0 <HAL_UART_MspInit+0x244>)
 80070d4:	f001 fa04 	bl	80084e0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80070d8:	4b3a      	ldr	r3, [pc, #232]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 80070da:	4a3b      	ldr	r2, [pc, #236]	@ (80071c8 <HAL_UART_MspInit+0x24c>)
 80070dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80070de:	4b39      	ldr	r3, [pc, #228]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 80070e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80070e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070e6:	4b37      	ldr	r3, [pc, #220]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070ec:	4b35      	ldr	r3, [pc, #212]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070f2:	4b34      	ldr	r3, [pc, #208]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 80070f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070fa:	4b32      	ldr	r3, [pc, #200]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007100:	4b30      	ldr	r3, [pc, #192]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 8007102:	2200      	movs	r2, #0
 8007104:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007106:	4b2f      	ldr	r3, [pc, #188]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 8007108:	2200      	movs	r2, #0
 800710a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800710c:	4b2d      	ldr	r3, [pc, #180]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 800710e:	2200      	movs	r2, #0
 8007110:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007112:	4b2c      	ldr	r3, [pc, #176]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 8007114:	2200      	movs	r2, #0
 8007116:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007118:	482a      	ldr	r0, [pc, #168]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 800711a:	f000 fddf 	bl	8007cdc <HAL_DMA_Init>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8007124:	f7fd fe56 	bl	8004dd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a26      	ldr	r2, [pc, #152]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 800712c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800712e:	4a25      	ldr	r2, [pc, #148]	@ (80071c4 <HAL_UART_MspInit+0x248>)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8007134:	4b25      	ldr	r3, [pc, #148]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007136:	4a26      	ldr	r2, [pc, #152]	@ (80071d0 <HAL_UART_MspInit+0x254>)
 8007138:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800713a:	4b24      	ldr	r3, [pc, #144]	@ (80071cc <HAL_UART_MspInit+0x250>)
 800713c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007140:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007142:	4b22      	ldr	r3, [pc, #136]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007144:	2240      	movs	r2, #64	@ 0x40
 8007146:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007148:	4b20      	ldr	r3, [pc, #128]	@ (80071cc <HAL_UART_MspInit+0x250>)
 800714a:	2200      	movs	r2, #0
 800714c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800714e:	4b1f      	ldr	r3, [pc, #124]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007150:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007154:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007156:	4b1d      	ldr	r3, [pc, #116]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007158:	2200      	movs	r2, #0
 800715a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800715c:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <HAL_UART_MspInit+0x250>)
 800715e:	2200      	movs	r2, #0
 8007160:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007162:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007164:	2200      	movs	r2, #0
 8007166:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <HAL_UART_MspInit+0x250>)
 800716a:	2200      	movs	r2, #0
 800716c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800716e:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007170:	2200      	movs	r2, #0
 8007172:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007174:	4815      	ldr	r0, [pc, #84]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007176:	f000 fdb1 	bl	8007cdc <HAL_DMA_Init>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8007180:	f7fd fe28 	bl	8004dd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a11      	ldr	r2, [pc, #68]	@ (80071cc <HAL_UART_MspInit+0x250>)
 8007188:	639a      	str	r2, [r3, #56]	@ 0x38
 800718a:	4a10      	ldr	r2, [pc, #64]	@ (80071cc <HAL_UART_MspInit+0x250>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007190:	2200      	movs	r2, #0
 8007192:	2100      	movs	r1, #0
 8007194:	2025      	movs	r0, #37	@ 0x25
 8007196:	f000 fd6a 	bl	8007c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800719a:	2025      	movs	r0, #37	@ 0x25
 800719c:	f000 fd83 	bl	8007ca6 <HAL_NVIC_EnableIRQ>
}
 80071a0:	bf00      	nop
 80071a2:	3738      	adds	r7, #56	@ 0x38
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40005000 	.word	0x40005000
 80071ac:	40023800 	.word	0x40023800
 80071b0:	40020800 	.word	0x40020800
 80071b4:	40020c00 	.word	0x40020c00
 80071b8:	40011000 	.word	0x40011000
 80071bc:	40020000 	.word	0x40020000
 80071c0:	40020400 	.word	0x40020400
 80071c4:	20000434 	.word	0x20000434
 80071c8:	40026440 	.word	0x40026440
 80071cc:	20000494 	.word	0x20000494
 80071d0:	400264b8 	.word	0x400264b8

080071d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <NMI_Handler+0x4>

080071dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <HardFault_Handler+0x4>

080071e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <MemManage_Handler+0x4>

080071ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <BusFault_Handler+0x4>

080071f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <UsageFault_Handler+0x4>

080071fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007200:	bf00      	nop
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800720a:	b480      	push	{r7}
 800720c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800720e:	bf00      	nop
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800722a:	f000 fc01 	bl	8007a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800722e:	bf00      	nop
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007238:	4802      	ldr	r0, [pc, #8]	@ (8007244 <TIM2_IRQHandler+0x10>)
 800723a:	f003 fb07 	bl	800a84c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000035c 	.word	0x2000035c

08007248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800724c:	4802      	ldr	r0, [pc, #8]	@ (8007258 <USART1_IRQHandler+0x10>)
 800724e:	f004 f85f 	bl	800b310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	200003ec 	.word	0x200003ec

0800725c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007260:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007264:	f001 fbde 	bl	8008a24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007268:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800726c:	f001 fbda 	bl	8008a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007270:	bf00      	nop
 8007272:	bd80      	pop	{r7, pc}

08007274 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007278:	4802      	ldr	r0, [pc, #8]	@ (8007284 <DMA2_Stream2_IRQHandler+0x10>)
 800727a:	f000 fec7 	bl	800800c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800727e:	bf00      	nop
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000434 	.word	0x20000434

08007288 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800728c:	4802      	ldr	r0, [pc, #8]	@ (8007298 <DMA2_Stream7_IRQHandler+0x10>)
 800728e:	f000 febd 	bl	800800c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007292:	bf00      	nop
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000494 	.word	0x20000494

0800729c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  return 1;
 80072a0:	2301      	movs	r3, #1
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <_kill>:

int _kill(int pid, int sig)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80072b6:	f005 ff6b 	bl	800d190 <__errno>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2216      	movs	r2, #22
 80072be:	601a      	str	r2, [r3, #0]
  return -1;
 80072c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_exit>:

void _exit (int status)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80072d4:	f04f 31ff 	mov.w	r1, #4294967295
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ffe7 	bl	80072ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <_exit+0x12>

080072e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	e00a      	b.n	800730a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80072f4:	f3af 8000 	nop.w
 80072f8:	4601      	mov	r1, r0
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	60ba      	str	r2, [r7, #8]
 8007300:	b2ca      	uxtb	r2, r1
 8007302:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	3301      	adds	r3, #1
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	429a      	cmp	r2, r3
 8007310:	dbf0      	blt.n	80072f4 <_read+0x12>
  }

  return len;
 8007312:	687b      	ldr	r3, [r7, #4]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e009      	b.n	8007342 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	60ba      	str	r2, [r7, #8]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	3301      	adds	r3, #1
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	dbf1      	blt.n	800732e <_write+0x12>
  }
  return len;
 800734a:	687b      	ldr	r3, [r7, #4]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <_close>:

int _close(int file)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800737c:	605a      	str	r2, [r3, #4]
  return 0;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <_isatty>:

int _isatty(int file)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007394:	2301      	movs	r3, #1
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <_sbrk+0x5c>)
 80073c6:	4b15      	ldr	r3, [pc, #84]	@ (800741c <_sbrk+0x60>)
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073d0:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <_sbrk+0x64>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073d8:	4b11      	ldr	r3, [pc, #68]	@ (8007420 <_sbrk+0x64>)
 80073da:	4a12      	ldr	r2, [pc, #72]	@ (8007424 <_sbrk+0x68>)
 80073dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073de:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <_sbrk+0x64>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4413      	add	r3, r2
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d207      	bcs.n	80073fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80073ec:	f005 fed0 	bl	800d190 <__errno>
 80073f0:	4603      	mov	r3, r0
 80073f2:	220c      	movs	r2, #12
 80073f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	e009      	b.n	8007410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073fc:	4b08      	ldr	r3, [pc, #32]	@ (8007420 <_sbrk+0x64>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007402:	4b07      	ldr	r3, [pc, #28]	@ (8007420 <_sbrk+0x64>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	4a05      	ldr	r2, [pc, #20]	@ (8007420 <_sbrk+0x64>)
 800740c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20020000 	.word	0x20020000
 800741c:	00000400 	.word	0x00000400
 8007420:	20000840 	.word	0x20000840
 8007424:	200009c0 	.word	0x200009c0

08007428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <SystemInit+0x20>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007432:	4a05      	ldr	r2, [pc, #20]	@ (8007448 <SystemInit+0x20>)
 8007434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800743c:	bf00      	nop
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	e000ed00 	.word	0xe000ed00

0800744c <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7fd fd13 	bl	8004e84 <addDataPacketSit>
   // if (!usart1_tx_busy) {
       // uart1_send_packet_dma((uint8_t*)sit_paket, 36);
    	HAL_UART_Transmit(&huart1, (uint8_t*)sit_paket, 36, 100);
 800745e:	2364      	movs	r3, #100	@ 0x64
 8007460:	2224      	movs	r2, #36	@ 0x24
 8007462:	4904      	ldr	r1, [pc, #16]	@ (8007474 <test_modes_handle_sit+0x28>)
 8007464:	4804      	ldr	r0, [pc, #16]	@ (8007478 <test_modes_handle_sit+0x2c>)
 8007466:	f003 fdf1 	bl	800b04c <HAL_UART_Transmit>
    //}
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	2000074c 	.word	0x2000074c
 8007478:	200003ec 	.word	0x200003ec

0800747c <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	@ 0x28
 8007480:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 8007482:	f000 f9e5 	bl	8007850 <uart_handler_sut_data_ready>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d013      	beq.n	80074b4 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 800748c:	f000 fa0e 	bl	80078ac <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f000 f9e8 	bl	8007868 <uart_handler_get_sut_data>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 800749e:	1d3b      	adds	r3, r7, #4
 80074a0:	4906      	ldr	r1, [pc, #24]	@ (80074bc <algorithm_update_sut+0x40>)
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f80c 	bl	80074c0 <test_modes_handle_sut>
 80074a8:	4603      	mov	r3, r0
 80074aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 80074ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fa08 	bl	80078c4 <uart_handler_send_status>
        }
    }
}
 80074b4:	bf00      	nop
 80074b6:	3728      	adds	r7, #40	@ 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000648 	.word	0x20000648

080074c0 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b0d8      	sub	sp, #352	@ 0x160
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80074ca:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80074ce:	6018      	str	r0, [r3, #0]
 80074d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80074d4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80074d8:	6019      	str	r1, [r3, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 80074da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80074de:	2244      	movs	r2, #68	@ 0x44
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f005 fe01 	bl	800d0ea <memset>
    bmi088_struct_t bmi_sut = {0};
 80074e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80074ec:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80074f0:	4618      	mov	r0, r3
 80074f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80074f6:	461a      	mov	r2, r3
 80074f8:	2100      	movs	r1, #0
 80074fa:	f005 fdf6 	bl	800d0ea <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 80074fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007502:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    bme_sut.pressure = sut_data->pressure;
 800750e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007512:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    // Fill BMI data
    bmi_sut.acc_x = sut_data->acc_x;
 800751e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007522:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800752e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007532:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    bmi_sut.acc_y = sut_data->acc_y;
 8007536:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800753a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007546:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800754a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    bmi_sut.acc_z = sut_data->acc_z;
 800754e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007552:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800755e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007562:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    bmi_sut.gyro_x = sut_data->gyro_x;
 8007566:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800756a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	4618      	mov	r0, r3
 8007574:	f7f9 f808 	bl	8000588 <__aeabi_f2d>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8007580:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8007584:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    bmi_sut.angleY = sut_data->gyro_y;
 8007588:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800758c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007598:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800759c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    bmi_sut.gyro_z = sut_data->gyro_z;
 80075a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80075a4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7f8 ffeb 	bl	8000588 <__aeabi_f2d>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 80075ba:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80075be:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 80075c2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80075c6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80075ca:	f107 0108 	add.w	r1, r7, #8
 80075ce:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	f7ff fae8 	bl	8006ba8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 80075d8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80075dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f7fb fbc9 	bl	8002d80 <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 80075ee:	f7fb fd19 	bl	8003024 <flight_algorithm_get_status_bits>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    return status_bits;
 80075f8:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 800760c:	4b07      	ldr	r3, [pc, #28]	@ (800762c <uart_handler_init+0x24>)
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 8007612:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <uart_handler_init+0x28>)
 8007614:	2200      	movs	r2, #0
 8007616:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <uart_handler_init+0x2c>)
 800761a:	2200      	movs	r2, #0
 800761c:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 800761e:	2220      	movs	r2, #32
 8007620:	2100      	movs	r1, #0
 8007622:	4805      	ldr	r0, [pc, #20]	@ (8007638 <uart_handler_init+0x30>)
 8007624:	f005 fd61 	bl	800d0ea <memset>
}
 8007628:	bf00      	nop
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000844 	.word	0x20000844
 8007630:	20000845 	.word	0x20000845
 8007634:	20000846 	.word	0x20000846
 8007638:	20000848 	.word	0x20000848

0800763c <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
    if (usart1_packet_ready) {
 8007640:	4b14      	ldr	r3, [pc, #80]	@ (8007694 <uart_handler_process_packets+0x58>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d021      	beq.n	800768e <uart_handler_process_packets+0x52>
        usart1_packet_ready = 0; // Clear flag immediately
 800764a:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <uart_handler_process_packets+0x58>)
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart1_rx_buffer[0] == CMD_HEADER && usart1_packet_size == 5) {
 8007650:	4b11      	ldr	r3, [pc, #68]	@ (8007698 <uart_handler_process_packets+0x5c>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2baa      	cmp	r3, #170	@ 0xaa
 8007656:	d10b      	bne.n	8007670 <uart_handler_process_packets+0x34>
 8007658:	4b10      	ldr	r3, [pc, #64]	@ (800769c <uart_handler_process_packets+0x60>)
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b05      	cmp	r3, #5
 8007660:	d106      	bne.n	8007670 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <uart_handler_process_packets+0x64>)
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart1_rx_buffer);
 8007668:	480b      	ldr	r0, [pc, #44]	@ (8007698 <uart_handler_process_packets+0x5c>)
 800766a:	f000 f81d 	bl	80076a8 <process_command_packet>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart1_rx_buffer);
        }
    }
}
 800766e:	e00e      	b.n	800768e <uart_handler_process_packets+0x52>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
 8007670:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <uart_handler_process_packets+0x5c>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2bab      	cmp	r3, #171	@ 0xab
 8007676:	d10a      	bne.n	800768e <uart_handler_process_packets+0x52>
 8007678:	4b08      	ldr	r3, [pc, #32]	@ (800769c <uart_handler_process_packets+0x60>)
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b24      	cmp	r3, #36	@ 0x24
 8007680:	d105      	bne.n	800768e <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 8007682:	4b08      	ldr	r3, [pc, #32]	@ (80076a4 <uart_handler_process_packets+0x68>)
 8007684:	2201      	movs	r2, #1
 8007686:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart1_rx_buffer);
 8007688:	4803      	ldr	r0, [pc, #12]	@ (8007698 <uart_handler_process_packets+0x5c>)
 800768a:	f000 f843 	bl	8007714 <process_sut_packet>
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000744 	.word	0x20000744
 8007698:	20000674 	.word	0x20000674
 800769c:	20000746 	.word	0x20000746
 80076a0:	20000845 	.word	0x20000845
 80076a4:	20000846 	.word	0x20000846

080076a8 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2baa      	cmp	r3, #170	@ 0xaa
 80076b6:	d124      	bne.n	8007702 <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b0d      	cmp	r3, #13
 80076ce:	d118      	bne.n	8007702 <process_command_packet+0x5a>
 80076d0:	7b7b      	ldrb	r3, [r7, #13]
 80076d2:	2b0a      	cmp	r3, #10
 80076d4:	d115      	bne.n	8007702 <process_command_packet+0x5a>
            switch (command) {
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b24      	cmp	r3, #36	@ 0x24
 80076da:	d00e      	beq.n	80076fa <process_command_packet+0x52>
 80076dc:	2b24      	cmp	r3, #36	@ 0x24
 80076de:	dc10      	bgt.n	8007702 <process_command_packet+0x5a>
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	d002      	beq.n	80076ea <process_command_packet+0x42>
 80076e4:	2b22      	cmp	r3, #34	@ 0x22
 80076e6:	d004      	beq.n	80076f2 <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 80076e8:	e00b      	b.n	8007702 <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <process_command_packet+0x68>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
                    break;
 80076f0:	e007      	b.n	8007702 <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 80076f2:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <process_command_packet+0x68>)
 80076f4:	2202      	movs	r2, #2
 80076f6:	701a      	strb	r2, [r3, #0]
                    break;
 80076f8:	e003      	b.n	8007702 <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 80076fa:	4b05      	ldr	r3, [pc, #20]	@ (8007710 <process_command_packet+0x68>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
                    break;
 8007700:	bf00      	nop
}
 8007702:	bf00      	nop
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000844 	.word	0x20000844

08007714 <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2bab      	cmp	r3, #171	@ 0xab
 8007722:	d172      	bne.n	800780a <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3322      	adds	r3, #34	@ 0x22
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b0d      	cmp	r3, #13
 800772c:	d16f      	bne.n	800780e <process_sut_packet+0xfa>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3323      	adds	r3, #35	@ 0x23
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b0a      	cmp	r3, #10
 8007736:	d16a      	bne.n	800780e <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 800773c:	2300      	movs	r3, #0
 800773e:	60bb      	str	r3, [r7, #8]
 8007740:	e009      	b.n	8007756 <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4413      	add	r3, r2
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	4413      	add	r3, r2
 800774e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	3301      	adds	r3, #1
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b20      	cmp	r3, #32
 800775a:	ddf2      	ble.n	8007742 <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3321      	adds	r3, #33	@ 0x21
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	7bfa      	ldrb	r2, [r7, #15]
 8007764:	429a      	cmp	r2, r3
 8007766:	d154      	bne.n	8007812 <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3301      	adds	r3, #1
 800776c:	4618      	mov	r0, r3
 800776e:	f7fd fcb5 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 8007772:	eef0 7a40 	vmov.f32	s15, s0
 8007776:	4b29      	ldr	r3, [pc, #164]	@ (800781c <process_sut_packet+0x108>)
 8007778:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3305      	adds	r3, #5
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd fcab 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 8007786:	eef0 7a40 	vmov.f32	s15, s0
 800778a:	4b24      	ldr	r3, [pc, #144]	@ (800781c <process_sut_packet+0x108>)
 800778c:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3309      	adds	r3, #9
 8007794:	4618      	mov	r0, r3
 8007796:	f7fd fca1 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 800779a:	eef0 7a40 	vmov.f32	s15, s0
 800779e:	4b1f      	ldr	r3, [pc, #124]	@ (800781c <process_sut_packet+0x108>)
 80077a0:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	330d      	adds	r3, #13
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fd fc97 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 80077ae:	eef0 7a40 	vmov.f32	s15, s0
 80077b2:	4b1a      	ldr	r3, [pc, #104]	@ (800781c <process_sut_packet+0x108>)
 80077b4:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3311      	adds	r3, #17
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fd fc8d 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 80077c2:	eef0 7a40 	vmov.f32	s15, s0
 80077c6:	4b15      	ldr	r3, [pc, #84]	@ (800781c <process_sut_packet+0x108>)
 80077c8:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3315      	adds	r3, #21
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fd fc83 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 80077d6:	eef0 7a40 	vmov.f32	s15, s0
 80077da:	4b10      	ldr	r3, [pc, #64]	@ (800781c <process_sut_packet+0x108>)
 80077dc:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3319      	adds	r3, #25
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fc79 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 80077ea:	eef0 7a40 	vmov.f32	s15, s0
 80077ee:	4b0b      	ldr	r3, [pc, #44]	@ (800781c <process_sut_packet+0x108>)
 80077f0:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	331d      	adds	r3, #29
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fd fc6f 	bl	80050dc <uint8_arrayi_float32_ye_donustur>
 80077fe:	eef0 7a40 	vmov.f32	s15, s0
 8007802:	4b06      	ldr	r3, [pc, #24]	@ (800781c <process_sut_packet+0x108>)
 8007804:	edc3 7a07 	vstr	s15, [r3, #28]
 8007808:	e004      	b.n	8007814 <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 800780a:	bf00      	nop
 800780c:	e002      	b.n	8007814 <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 8007812:	bf00      	nop
}
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000848 	.word	0x20000848

08007820 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
    return current_mode;
 8007824:	4b03      	ldr	r3, [pc, #12]	@ (8007834 <uart_handler_get_mode+0x14>)
 8007826:	781b      	ldrb	r3, [r3, #0]
}
 8007828:	4618      	mov	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000844 	.word	0x20000844

08007838 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
    return command_packet_ready;
 800783c:	4b03      	ldr	r3, [pc, #12]	@ (800784c <uart_handler_command_ready+0x14>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b2db      	uxtb	r3, r3
}
 8007842:	4618      	mov	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000845 	.word	0x20000845

08007850 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 8007854:	4b03      	ldr	r3, [pc, #12]	@ (8007864 <uart_handler_sut_data_ready+0x14>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	b2db      	uxtb	r3, r3
}
 800785a:	4618      	mov	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	20000846 	.word	0x20000846

08007868 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <uart_handler_get_sut_data+0x12>
 8007876:	2300      	movs	r3, #0
 8007878:	e005      	b.n	8007886 <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 800787a:	2220      	movs	r2, #32
 800787c:	4904      	ldr	r1, [pc, #16]	@ (8007890 <uart_handler_get_sut_data+0x28>)
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f005 fcb3 	bl	800d1ea <memcpy>
    return 1;
 8007884:	2301      	movs	r3, #1
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000848 	.word	0x20000848

08007894 <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8007898:	4b03      	ldr	r3, [pc, #12]	@ (80078a8 <uart_handler_clear_command_flag+0x14>)
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	20000845 	.word	0x20000845

080078ac <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 80078b0:	4b03      	ldr	r3, [pc, #12]	@ (80078c0 <uart_handler_clear_sut_flag+0x14>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
}
 80078b6:	bf00      	nop
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000846 	.word	0x20000846

080078c4 <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	80fb      	strh	r3, [r7, #6]
    if (!usart1_tx_busy) {
 80078ce:	4b18      	ldr	r3, [pc, #96]	@ (8007930 <uart_handler_send_status+0x6c>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d127      	bne.n	8007928 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = CMD_HEADER;
 80078d8:	4b16      	ldr	r3, [pc, #88]	@ (8007934 <uart_handler_send_status+0x70>)
 80078da:	22aa      	movs	r2, #170	@ 0xaa
 80078dc:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <uart_handler_send_status+0x70>)
 80078e4:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	0a1b      	lsrs	r3, r3, #8
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	4b11      	ldr	r3, [pc, #68]	@ (8007934 <uart_handler_send_status+0x70>)
 80078f0:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 80078f2:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <uart_handler_send_status+0x70>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <uart_handler_send_status+0x70>)
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	4413      	add	r3, r2
 80078fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007934 <uart_handler_send_status+0x70>)
 8007900:	7892      	ldrb	r2, [r2, #2]
 8007902:	4413      	add	r3, r2
 8007904:	425a      	negs	r2, r3
 8007906:	b2db      	uxtb	r3, r3
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	bf58      	it	pl
 800790c:	4253      	negpl	r3, r2
 800790e:	b2da      	uxtb	r2, r3
 8007910:	4b08      	ldr	r3, [pc, #32]	@ (8007934 <uart_handler_send_status+0x70>)
 8007912:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = CMD_FOOTER1;
 8007914:	4b07      	ldr	r3, [pc, #28]	@ (8007934 <uart_handler_send_status+0x70>)
 8007916:	220d      	movs	r2, #13
 8007918:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = CMD_FOOTER2;
 800791a:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <uart_handler_send_status+0x70>)
 800791c:	220a      	movs	r2, #10
 800791e:	715a      	strb	r2, [r3, #5]

        uart1_send_packet_dma(status_packet_dma, 6);
 8007920:	2106      	movs	r1, #6
 8007922:	4804      	ldr	r0, [pc, #16]	@ (8007934 <uart_handler_send_status+0x70>)
 8007924:	f7fd f99e 	bl	8004c64 <uart1_send_packet_dma>
    }
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000749 	.word	0x20000749
 8007934:	20000868 	.word	0x20000868

08007938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007970 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800793c:	f7ff fd74 	bl	8007428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007940:	480c      	ldr	r0, [pc, #48]	@ (8007974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007942:	490d      	ldr	r1, [pc, #52]	@ (8007978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007944:	4a0d      	ldr	r2, [pc, #52]	@ (800797c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007948:	e002      	b.n	8007950 <LoopCopyDataInit>

0800794a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800794a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800794c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800794e:	3304      	adds	r3, #4

08007950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007954:	d3f9      	bcc.n	800794a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007956:	4a0a      	ldr	r2, [pc, #40]	@ (8007980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007958:	4c0a      	ldr	r4, [pc, #40]	@ (8007984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800795a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800795c:	e001      	b.n	8007962 <LoopFillZerobss>

0800795e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800795e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007960:	3204      	adds	r2, #4

08007962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007964:	d3fb      	bcc.n	800795e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007966:	f005 fc19 	bl	800d19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800796a:	f7fc fde3 	bl	8004534 <main>
  bx  lr    
 800796e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007978:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 800797c:	08012020 	.word	0x08012020
  ldr r2, =_sbss
 8007980:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8007984:	200009c0 	.word	0x200009c0

08007988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007988:	e7fe      	b.n	8007988 <ADC_IRQHandler>
	...

0800798c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007990:	4b0e      	ldr	r3, [pc, #56]	@ (80079cc <HAL_Init+0x40>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a0d      	ldr	r2, [pc, #52]	@ (80079cc <HAL_Init+0x40>)
 8007996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800799a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800799c:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <HAL_Init+0x40>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0a      	ldr	r2, [pc, #40]	@ (80079cc <HAL_Init+0x40>)
 80079a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079a8:	4b08      	ldr	r3, [pc, #32]	@ (80079cc <HAL_Init+0x40>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a07      	ldr	r2, [pc, #28]	@ (80079cc <HAL_Init+0x40>)
 80079ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079b4:	2003      	movs	r0, #3
 80079b6:	f000 f94f 	bl	8007c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079ba:	200f      	movs	r0, #15
 80079bc:	f000 f808 	bl	80079d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079c0:	f7ff f9b0 	bl	8006d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40023c00 	.word	0x40023c00

080079d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80079d8:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <HAL_InitTick+0x54>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <HAL_InitTick+0x58>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	4619      	mov	r1, r3
 80079e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80079e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f967 	bl	8007cc2 <HAL_SYSTICK_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e00e      	b.n	8007a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b0f      	cmp	r3, #15
 8007a02:	d80a      	bhi.n	8007a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a04:	2200      	movs	r2, #0
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	f000 f92f 	bl	8007c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a10:	4a06      	ldr	r2, [pc, #24]	@ (8007a2c <HAL_InitTick+0x5c>)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e000      	b.n	8007a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000040 	.word	0x20000040
 8007a28:	20000048 	.word	0x20000048
 8007a2c:	20000044 	.word	0x20000044

08007a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a34:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <HAL_IncTick+0x20>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b06      	ldr	r3, [pc, #24]	@ (8007a54 <HAL_IncTick+0x24>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4413      	add	r3, r2
 8007a40:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <HAL_IncTick+0x24>)
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000048 	.word	0x20000048
 8007a54:	20000870 	.word	0x20000870

08007a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8007a5c:	4b03      	ldr	r3, [pc, #12]	@ (8007a6c <HAL_GetTick+0x14>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	20000870 	.word	0x20000870

08007a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a78:	f7ff ffee 	bl	8007a58 <HAL_GetTick>
 8007a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d005      	beq.n	8007a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab4 <HAL_Delay+0x44>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a96:	bf00      	nop
 8007a98:	f7ff ffde 	bl	8007a58 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d8f7      	bhi.n	8007a98 <HAL_Delay+0x28>
  {
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000048 	.word	0x20000048

08007ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <__NVIC_SetPriorityGrouping+0x44>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aea:	4a04      	ldr	r2, [pc, #16]	@ (8007afc <__NVIC_SetPriorityGrouping+0x44>)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	60d3      	str	r3, [r2, #12]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <__NVIC_GetPriorityGrouping+0x18>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	0a1b      	lsrs	r3, r3, #8
 8007b0a:	f003 0307 	and.w	r3, r3, #7
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	e000ed00 	.word	0xe000ed00

08007b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	db0b      	blt.n	8007b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	f003 021f 	and.w	r2, r3, #31
 8007b34:	4907      	ldr	r1, [pc, #28]	@ (8007b54 <__NVIC_EnableIRQ+0x38>)
 8007b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	e000e100 	.word	0xe000e100

08007b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	db0a      	blt.n	8007b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	490c      	ldr	r1, [pc, #48]	@ (8007ba4 <__NVIC_SetPriority+0x4c>)
 8007b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b76:	0112      	lsls	r2, r2, #4
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b80:	e00a      	b.n	8007b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	4908      	ldr	r1, [pc, #32]	@ (8007ba8 <__NVIC_SetPriority+0x50>)
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	3b04      	subs	r3, #4
 8007b90:	0112      	lsls	r2, r2, #4
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	440b      	add	r3, r1
 8007b96:	761a      	strb	r2, [r3, #24]
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	e000e100 	.word	0xe000e100
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b089      	sub	sp, #36	@ 0x24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f1c3 0307 	rsb	r3, r3, #7
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	bf28      	it	cs
 8007bca:	2304      	movcs	r3, #4
 8007bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	2b06      	cmp	r3, #6
 8007bd4:	d902      	bls.n	8007bdc <NVIC_EncodePriority+0x30>
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3b03      	subs	r3, #3
 8007bda:	e000      	b.n	8007bde <NVIC_EncodePriority+0x32>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	43da      	mvns	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	401a      	ands	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfe:	43d9      	mvns	r1, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c04:	4313      	orrs	r3, r2
         );
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3724      	adds	r7, #36	@ 0x24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c24:	d301      	bcc.n	8007c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c26:	2301      	movs	r3, #1
 8007c28:	e00f      	b.n	8007c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c54 <SysTick_Config+0x40>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c32:	210f      	movs	r1, #15
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295
 8007c38:	f7ff ff8e 	bl	8007b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <SysTick_Config+0x40>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c42:	4b04      	ldr	r3, [pc, #16]	@ (8007c54 <SysTick_Config+0x40>)
 8007c44:	2207      	movs	r2, #7
 8007c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	e000e010 	.word	0xe000e010

08007c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff ff29 	bl	8007ab8 <__NVIC_SetPriorityGrouping>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b086      	sub	sp, #24
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	4603      	mov	r3, r0
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c80:	f7ff ff3e 	bl	8007b00 <__NVIC_GetPriorityGrouping>
 8007c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68b9      	ldr	r1, [r7, #8]
 8007c8a:	6978      	ldr	r0, [r7, #20]
 8007c8c:	f7ff ff8e 	bl	8007bac <NVIC_EncodePriority>
 8007c90:	4602      	mov	r2, r0
 8007c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c96:	4611      	mov	r1, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff5d 	bl	8007b58 <__NVIC_SetPriority>
}
 8007c9e:	bf00      	nop
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	4603      	mov	r3, r0
 8007cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff ff31 	bl	8007b1c <__NVIC_EnableIRQ>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff ffa2 	bl	8007c14 <SysTick_Config>
 8007cd0:	4603      	mov	r3, r0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ce8:	f7ff feb6 	bl	8007a58 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e099      	b.n	8007e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0201 	bic.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d18:	e00f      	b.n	8007d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d1a:	f7ff fe9d 	bl	8007a58 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b05      	cmp	r3, #5
 8007d26:	d908      	bls.n	8007d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2203      	movs	r2, #3
 8007d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e078      	b.n	8007e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e8      	bne.n	8007d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4b38      	ldr	r3, [pc, #224]	@ (8007e34 <HAL_DMA_Init+0x158>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d107      	bne.n	8007da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d117      	bne.n	8007dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00e      	beq.n	8007dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fb01 	bl	80083e8 <DMA_CheckFifoParam>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2240      	movs	r2, #64	@ 0x40
 8007df0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e016      	b.n	8007e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fab8 	bl	800837c <DMA_CalcBaseAndBitshift>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e14:	223f      	movs	r2, #63	@ 0x3f
 8007e16:	409a      	lsls	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	f010803f 	.word	0xf010803f

08007e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d101      	bne.n	8007e5e <HAL_DMA_Start_IT+0x26>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e040      	b.n	8007ee0 <HAL_DMA_Start_IT+0xa8>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d12f      	bne.n	8007ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fa4a 	bl	8008320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e90:	223f      	movs	r2, #63	@ 0x3f
 8007e92:	409a      	lsls	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0216 	orr.w	r2, r2, #22
 8007ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0208 	orr.w	r2, r2, #8
 8007ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0201 	orr.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e005      	b.n	8007ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007eda:	2302      	movs	r3, #2
 8007edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ef4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007ef6:	f7ff fdaf 	bl	8007a58 <HAL_GetTick>
 8007efa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d008      	beq.n	8007f1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2280      	movs	r2, #128	@ 0x80
 8007f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e052      	b.n	8007fc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0216 	bic.w	r2, r2, #22
 8007f28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <HAL_DMA_Abort+0x62>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0208 	bic.w	r2, r2, #8
 8007f58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f6a:	e013      	b.n	8007f94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f6c:	f7ff fd74 	bl	8007a58 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d90c      	bls.n	8007f94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2203      	movs	r2, #3
 8007f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e015      	b.n	8007fc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e4      	bne.n	8007f6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fa6:	223f      	movs	r2, #63	@ 0x3f
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d004      	beq.n	8007fe6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2280      	movs	r2, #128	@ 0x80
 8007fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e00c      	b.n	8008000 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008018:	4b8e      	ldr	r3, [pc, #568]	@ (8008254 <HAL_DMA_IRQHandler+0x248>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a8e      	ldr	r2, [pc, #568]	@ (8008258 <HAL_DMA_IRQHandler+0x24c>)
 800801e:	fba2 2303 	umull	r2, r3, r2, r3
 8008022:	0a9b      	lsrs	r3, r3, #10
 8008024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008036:	2208      	movs	r2, #8
 8008038:	409a      	lsls	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4013      	ands	r3, r2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01a      	beq.n	8008078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d013      	beq.n	8008078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0204 	bic.w	r2, r2, #4
 800805e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008064:	2208      	movs	r2, #8
 8008066:	409a      	lsls	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008070:	f043 0201 	orr.w	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800807c:	2201      	movs	r2, #1
 800807e:	409a      	lsls	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d012      	beq.n	80080ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800809a:	2201      	movs	r2, #1
 800809c:	409a      	lsls	r2, r3
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a6:	f043 0202 	orr.w	r2, r3, #2
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b2:	2204      	movs	r2, #4
 80080b4:	409a      	lsls	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d012      	beq.n	80080e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d0:	2204      	movs	r2, #4
 80080d2:	409a      	lsls	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080dc:	f043 0204 	orr.w	r2, r3, #4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080e8:	2210      	movs	r2, #16
 80080ea:	409a      	lsls	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d043      	beq.n	800817c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d03c      	beq.n	800817c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008106:	2210      	movs	r2, #16
 8008108:	409a      	lsls	r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d018      	beq.n	800814e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d024      	beq.n	800817c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	e01f      	b.n	800817c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01b      	beq.n	800817c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
 800814c:	e016      	b.n	800817c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d107      	bne.n	800816c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0208 	bic.w	r2, r2, #8
 800816a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008180:	2220      	movs	r2, #32
 8008182:	409a      	lsls	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4013      	ands	r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 808f 	beq.w	80082ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8087 	beq.w	80082ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a2:	2220      	movs	r2, #32
 80081a4:	409a      	lsls	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	d136      	bne.n	8008224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0216 	bic.w	r2, r2, #22
 80081c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <HAL_DMA_IRQHandler+0x1da>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0208 	bic.w	r2, r2, #8
 80081f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081fa:	223f      	movs	r2, #63	@ 0x3f
 80081fc:	409a      	lsls	r2, r3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008216:	2b00      	cmp	r3, #0
 8008218:	d07e      	beq.n	8008318 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
        }
        return;
 8008222:	e079      	b.n	8008318 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01d      	beq.n	800826e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10d      	bne.n	800825c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008244:	2b00      	cmp	r3, #0
 8008246:	d031      	beq.n	80082ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
 8008250:	e02c      	b.n	80082ac <HAL_DMA_IRQHandler+0x2a0>
 8008252:	bf00      	nop
 8008254:	20000040 	.word	0x20000040
 8008258:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d023      	beq.n	80082ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	4798      	blx	r3
 800826c:	e01e      	b.n	80082ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10f      	bne.n	800829c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0210 	bic.w	r2, r2, #16
 800828a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d032      	beq.n	800831a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d022      	beq.n	8008306 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2205      	movs	r2, #5
 80082c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0201 	bic.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3301      	adds	r3, #1
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d307      	bcc.n	80082f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f2      	bne.n	80082d8 <HAL_DMA_IRQHandler+0x2cc>
 80082f2:	e000      	b.n	80082f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80082f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
 8008316:	e000      	b.n	800831a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008318:	bf00      	nop
    }
  }
}
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800833c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b40      	cmp	r3, #64	@ 0x40
 800834c:	d108      	bne.n	8008360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800835e:	e007      	b.n	8008370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]
}
 8008370:	bf00      	nop
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	3b10      	subs	r3, #16
 800838c:	4a14      	ldr	r2, [pc, #80]	@ (80083e0 <DMA_CalcBaseAndBitshift+0x64>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	091b      	lsrs	r3, r3, #4
 8008394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008396:	4a13      	ldr	r2, [pc, #76]	@ (80083e4 <DMA_CalcBaseAndBitshift+0x68>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d909      	bls.n	80083be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	1d1a      	adds	r2, r3, #4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80083bc:	e007      	b.n	80083ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	aaaaaaab 	.word	0xaaaaaaab
 80083e4:	08011a58 	.word	0x08011a58

080083e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d11f      	bne.n	8008442 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b03      	cmp	r3, #3
 8008406:	d856      	bhi.n	80084b6 <DMA_CheckFifoParam+0xce>
 8008408:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <DMA_CheckFifoParam+0x28>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	08008421 	.word	0x08008421
 8008414:	08008433 	.word	0x08008433
 8008418:	08008421 	.word	0x08008421
 800841c:	080084b7 	.word	0x080084b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d046      	beq.n	80084ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008430:	e043      	b.n	80084ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800843a:	d140      	bne.n	80084be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008440:	e03d      	b.n	80084be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844a:	d121      	bne.n	8008490 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b03      	cmp	r3, #3
 8008450:	d837      	bhi.n	80084c2 <DMA_CheckFifoParam+0xda>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <DMA_CheckFifoParam+0x70>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	08008469 	.word	0x08008469
 800845c:	0800846f 	.word	0x0800846f
 8008460:	08008469 	.word	0x08008469
 8008464:	08008481 	.word	0x08008481
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e030      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d025      	beq.n	80084c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800847e:	e022      	b.n	80084c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008488:	d11f      	bne.n	80084ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800848e:	e01c      	b.n	80084ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b02      	cmp	r3, #2
 8008494:	d903      	bls.n	800849e <DMA_CheckFifoParam+0xb6>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d003      	beq.n	80084a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800849c:	e018      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
      break;
 80084a2:	e015      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00e      	beq.n	80084ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
      break;
 80084b4:	e00b      	b.n	80084ce <DMA_CheckFifoParam+0xe6>
      break;
 80084b6:	bf00      	nop
 80084b8:	e00a      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      break;
 80084ba:	bf00      	nop
 80084bc:	e008      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      break;
 80084be:	bf00      	nop
 80084c0:	e006      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      break;
 80084c2:	bf00      	nop
 80084c4:	e004      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      break;
 80084c6:	bf00      	nop
 80084c8:	e002      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80084ca:	bf00      	nop
 80084cc:	e000      	b.n	80084d0 <DMA_CheckFifoParam+0xe8>
      break;
 80084ce:	bf00      	nop
    }
  } 
  
  return status; 
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop

080084e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b089      	sub	sp, #36	@ 0x24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084f6:	2300      	movs	r3, #0
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	e165      	b.n	80087c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084fc:	2201      	movs	r2, #1
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4013      	ands	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	429a      	cmp	r2, r3
 8008516:	f040 8154 	bne.w	80087c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b01      	cmp	r3, #1
 8008524:	d005      	beq.n	8008532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800852e:	2b02      	cmp	r3, #2
 8008530:	d130      	bne.n	8008594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	2203      	movs	r2, #3
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	43db      	mvns	r3, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4013      	ands	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4313      	orrs	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008568:	2201      	movs	r2, #1
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	4013      	ands	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 0201 	and.w	r2, r3, #1
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4313      	orrs	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	2b03      	cmp	r3, #3
 800859e:	d017      	beq.n	80085d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	2203      	movs	r2, #3
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	43db      	mvns	r3, r3
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	4013      	ands	r3, r2
 80085b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f003 0303 	and.w	r3, r3, #3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d123      	bne.n	8008624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	08da      	lsrs	r2, r3, #3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3208      	adds	r2, #8
 80085e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	220f      	movs	r2, #15
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	43db      	mvns	r3, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	4313      	orrs	r3, r2
 8008614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	08da      	lsrs	r2, r3, #3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3208      	adds	r2, #8
 800861e:	69b9      	ldr	r1, [r7, #24]
 8008620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	2203      	movs	r2, #3
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	43db      	mvns	r3, r3
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	4013      	ands	r3, r2
 800863a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f003 0203 	and.w	r2, r3, #3
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	4313      	orrs	r3, r2
 8008650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80ae 	beq.w	80087c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	4b5d      	ldr	r3, [pc, #372]	@ (80087e0 <HAL_GPIO_Init+0x300>)
 800866c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866e:	4a5c      	ldr	r2, [pc, #368]	@ (80087e0 <HAL_GPIO_Init+0x300>)
 8008670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008674:	6453      	str	r3, [r2, #68]	@ 0x44
 8008676:	4b5a      	ldr	r3, [pc, #360]	@ (80087e0 <HAL_GPIO_Init+0x300>)
 8008678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008682:	4a58      	ldr	r2, [pc, #352]	@ (80087e4 <HAL_GPIO_Init+0x304>)
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	089b      	lsrs	r3, r3, #2
 8008688:	3302      	adds	r3, #2
 800868a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	220f      	movs	r2, #15
 800869a:	fa02 f303 	lsl.w	r3, r2, r3
 800869e:	43db      	mvns	r3, r3
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	4013      	ands	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a4f      	ldr	r2, [pc, #316]	@ (80087e8 <HAL_GPIO_Init+0x308>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d025      	beq.n	80086fa <HAL_GPIO_Init+0x21a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a4e      	ldr	r2, [pc, #312]	@ (80087ec <HAL_GPIO_Init+0x30c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d01f      	beq.n	80086f6 <HAL_GPIO_Init+0x216>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a4d      	ldr	r2, [pc, #308]	@ (80087f0 <HAL_GPIO_Init+0x310>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d019      	beq.n	80086f2 <HAL_GPIO_Init+0x212>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a4c      	ldr	r2, [pc, #304]	@ (80087f4 <HAL_GPIO_Init+0x314>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d013      	beq.n	80086ee <HAL_GPIO_Init+0x20e>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a4b      	ldr	r2, [pc, #300]	@ (80087f8 <HAL_GPIO_Init+0x318>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00d      	beq.n	80086ea <HAL_GPIO_Init+0x20a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a4a      	ldr	r2, [pc, #296]	@ (80087fc <HAL_GPIO_Init+0x31c>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d007      	beq.n	80086e6 <HAL_GPIO_Init+0x206>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a49      	ldr	r2, [pc, #292]	@ (8008800 <HAL_GPIO_Init+0x320>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d101      	bne.n	80086e2 <HAL_GPIO_Init+0x202>
 80086de:	2306      	movs	r3, #6
 80086e0:	e00c      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086e2:	2307      	movs	r3, #7
 80086e4:	e00a      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086e6:	2305      	movs	r3, #5
 80086e8:	e008      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086ea:	2304      	movs	r3, #4
 80086ec:	e006      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086ee:	2303      	movs	r3, #3
 80086f0:	e004      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e002      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <HAL_GPIO_Init+0x21c>
 80086fa:	2300      	movs	r3, #0
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	f002 0203 	and.w	r2, r2, #3
 8008702:	0092      	lsls	r2, r2, #2
 8008704:	4093      	lsls	r3, r2
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	4313      	orrs	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800870c:	4935      	ldr	r1, [pc, #212]	@ (80087e4 <HAL_GPIO_Init+0x304>)
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	089b      	lsrs	r3, r3, #2
 8008712:	3302      	adds	r3, #2
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800871a:	4b3a      	ldr	r3, [pc, #232]	@ (8008804 <HAL_GPIO_Init+0x324>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	43db      	mvns	r3, r3
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	4013      	ands	r3, r2
 8008728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800873e:	4a31      	ldr	r2, [pc, #196]	@ (8008804 <HAL_GPIO_Init+0x324>)
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008744:	4b2f      	ldr	r3, [pc, #188]	@ (8008804 <HAL_GPIO_Init+0x324>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	43db      	mvns	r3, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008768:	4a26      	ldr	r2, [pc, #152]	@ (8008804 <HAL_GPIO_Init+0x324>)
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800876e:	4b25      	ldr	r3, [pc, #148]	@ (8008804 <HAL_GPIO_Init+0x324>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	43db      	mvns	r3, r3
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	4013      	ands	r3, r2
 800877c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008792:	4a1c      	ldr	r2, [pc, #112]	@ (8008804 <HAL_GPIO_Init+0x324>)
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008798:	4b1a      	ldr	r3, [pc, #104]	@ (8008804 <HAL_GPIO_Init+0x324>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	4013      	ands	r3, r2
 80087a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087bc:	4a11      	ldr	r2, [pc, #68]	@ (8008804 <HAL_GPIO_Init+0x324>)
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	3301      	adds	r3, #1
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	f67f ae96 	bls.w	80084fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	3724      	adds	r7, #36	@ 0x24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40023800 	.word	0x40023800
 80087e4:	40013800 	.word	0x40013800
 80087e8:	40020000 	.word	0x40020000
 80087ec:	40020400 	.word	0x40020400
 80087f0:	40020800 	.word	0x40020800
 80087f4:	40020c00 	.word	0x40020c00
 80087f8:	40021000 	.word	0x40021000
 80087fc:	40021400 	.word	0x40021400
 8008800:	40021800 	.word	0x40021800
 8008804:	40013c00 	.word	0x40013c00

08008808 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	e0c7      	b.n	80089b4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008824:	2201      	movs	r2, #1
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4013      	ands	r3, r2
 8008834:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	429a      	cmp	r2, r3
 800883c:	f040 80b7 	bne.w	80089ae <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008840:	4a62      	ldr	r2, [pc, #392]	@ (80089cc <HAL_GPIO_DeInit+0x1c4>)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	089b      	lsrs	r3, r3, #2
 8008846:	3302      	adds	r3, #2
 8008848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	220f      	movs	r2, #15
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	4013      	ands	r3, r2
 8008860:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a5a      	ldr	r2, [pc, #360]	@ (80089d0 <HAL_GPIO_DeInit+0x1c8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d025      	beq.n	80088b6 <HAL_GPIO_DeInit+0xae>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a59      	ldr	r2, [pc, #356]	@ (80089d4 <HAL_GPIO_DeInit+0x1cc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d01f      	beq.n	80088b2 <HAL_GPIO_DeInit+0xaa>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a58      	ldr	r2, [pc, #352]	@ (80089d8 <HAL_GPIO_DeInit+0x1d0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d019      	beq.n	80088ae <HAL_GPIO_DeInit+0xa6>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a57      	ldr	r2, [pc, #348]	@ (80089dc <HAL_GPIO_DeInit+0x1d4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d013      	beq.n	80088aa <HAL_GPIO_DeInit+0xa2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a56      	ldr	r2, [pc, #344]	@ (80089e0 <HAL_GPIO_DeInit+0x1d8>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00d      	beq.n	80088a6 <HAL_GPIO_DeInit+0x9e>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a55      	ldr	r2, [pc, #340]	@ (80089e4 <HAL_GPIO_DeInit+0x1dc>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d007      	beq.n	80088a2 <HAL_GPIO_DeInit+0x9a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a54      	ldr	r2, [pc, #336]	@ (80089e8 <HAL_GPIO_DeInit+0x1e0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d101      	bne.n	800889e <HAL_GPIO_DeInit+0x96>
 800889a:	2306      	movs	r3, #6
 800889c:	e00c      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 800889e:	2307      	movs	r3, #7
 80088a0:	e00a      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 80088a2:	2305      	movs	r3, #5
 80088a4:	e008      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 80088a6:	2304      	movs	r3, #4
 80088a8:	e006      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 80088aa:	2303      	movs	r3, #3
 80088ac:	e004      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e002      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <HAL_GPIO_DeInit+0xb0>
 80088b6:	2300      	movs	r3, #0
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	f002 0203 	and.w	r2, r2, #3
 80088be:	0092      	lsls	r2, r2, #2
 80088c0:	4093      	lsls	r3, r2
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d132      	bne.n	800892e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80088c8:	4b48      	ldr	r3, [pc, #288]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	43db      	mvns	r3, r3
 80088d0:	4946      	ldr	r1, [pc, #280]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088d2:	4013      	ands	r3, r2
 80088d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80088d6:	4b45      	ldr	r3, [pc, #276]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	43db      	mvns	r3, r3
 80088de:	4943      	ldr	r1, [pc, #268]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80088e4:	4b41      	ldr	r3, [pc, #260]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	43db      	mvns	r3, r3
 80088ec:	493f      	ldr	r1, [pc, #252]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80088f2:	4b3e      	ldr	r3, [pc, #248]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	43db      	mvns	r3, r3
 80088fa:	493c      	ldr	r1, [pc, #240]	@ (80089ec <HAL_GPIO_DeInit+0x1e4>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	220f      	movs	r2, #15
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008910:	4a2e      	ldr	r2, [pc, #184]	@ (80089cc <HAL_GPIO_DeInit+0x1c4>)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	089b      	lsrs	r3, r3, #2
 8008916:	3302      	adds	r3, #2
 8008918:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	43da      	mvns	r2, r3
 8008920:	482a      	ldr	r0, [pc, #168]	@ (80089cc <HAL_GPIO_DeInit+0x1c4>)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	089b      	lsrs	r3, r3, #2
 8008926:	400a      	ands	r2, r1
 8008928:	3302      	adds	r3, #2
 800892a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	2103      	movs	r1, #3
 8008938:	fa01 f303 	lsl.w	r3, r1, r3
 800893c:	43db      	mvns	r3, r3
 800893e:	401a      	ands	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	08da      	lsrs	r2, r3, #3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3208      	adds	r2, #8
 800894c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	220f      	movs	r2, #15
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	43db      	mvns	r3, r3
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	08d2      	lsrs	r2, r2, #3
 8008964:	4019      	ands	r1, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3208      	adds	r2, #8
 800896a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	2103      	movs	r1, #3
 8008978:	fa01 f303 	lsl.w	r3, r1, r3
 800897c:	43db      	mvns	r3, r3
 800897e:	401a      	ands	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	2101      	movs	r1, #1
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	fa01 f303 	lsl.w	r3, r1, r3
 8008990:	43db      	mvns	r3, r3
 8008992:	401a      	ands	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	2103      	movs	r1, #3
 80089a2:	fa01 f303 	lsl.w	r3, r1, r3
 80089a6:	43db      	mvns	r3, r3
 80089a8:	401a      	ands	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	3301      	adds	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b0f      	cmp	r3, #15
 80089b8:	f67f af34 	bls.w	8008824 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40013800 	.word	0x40013800
 80089d0:	40020000 	.word	0x40020000
 80089d4:	40020400 	.word	0x40020400
 80089d8:	40020800 	.word	0x40020800
 80089dc:	40020c00 	.word	0x40020c00
 80089e0:	40021000 	.word	0x40021000
 80089e4:	40021400 	.word	0x40021400
 80089e8:	40021800 	.word	0x40021800
 80089ec:	40013c00 	.word	0x40013c00

080089f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	807b      	strh	r3, [r7, #2]
 80089fc:	4613      	mov	r3, r2
 80089fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a00:	787b      	ldrb	r3, [r7, #1]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a06:	887a      	ldrh	r2, [r7, #2]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a0c:	e003      	b.n	8008a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a0e:	887b      	ldrh	r3, [r7, #2]
 8008a10:	041a      	lsls	r2, r3, #16
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	619a      	str	r2, [r3, #24]
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
	...

08008a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a2e:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	4013      	ands	r3, r2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d006      	beq.n	8008a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a3a:	4a05      	ldr	r2, [pc, #20]	@ (8008a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a3c:	88fb      	ldrh	r3, [r7, #6]
 8008a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fc f8a0 	bl	8004b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40013c00 	.word	0x40013c00

08008a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e12b      	b.n	8008cbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fe f97a 	bl	8006d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2224      	movs	r2, #36	@ 0x24
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ab8:	f001 f912 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 8008abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4a81      	ldr	r2, [pc, #516]	@ (8008cc8 <HAL_I2C_Init+0x274>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d807      	bhi.n	8008ad8 <HAL_I2C_Init+0x84>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a80      	ldr	r2, [pc, #512]	@ (8008ccc <HAL_I2C_Init+0x278>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	bf94      	ite	ls
 8008ad0:	2301      	movls	r3, #1
 8008ad2:	2300      	movhi	r3, #0
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	e006      	b.n	8008ae6 <HAL_I2C_Init+0x92>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a7d      	ldr	r2, [pc, #500]	@ (8008cd0 <HAL_I2C_Init+0x27c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	bf94      	ite	ls
 8008ae0:	2301      	movls	r3, #1
 8008ae2:	2300      	movhi	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e0e7      	b.n	8008cbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4a78      	ldr	r2, [pc, #480]	@ (8008cd4 <HAL_I2C_Init+0x280>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	0c9b      	lsrs	r3, r3, #18
 8008af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8008cc8 <HAL_I2C_Init+0x274>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d802      	bhi.n	8008b28 <HAL_I2C_Init+0xd4>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3301      	adds	r3, #1
 8008b26:	e009      	b.n	8008b3c <HAL_I2C_Init+0xe8>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	4a69      	ldr	r2, [pc, #420]	@ (8008cd8 <HAL_I2C_Init+0x284>)
 8008b34:	fba2 2303 	umull	r2, r3, r2, r3
 8008b38:	099b      	lsrs	r3, r3, #6
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	430b      	orrs	r3, r1
 8008b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008b4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	495c      	ldr	r1, [pc, #368]	@ (8008cc8 <HAL_I2C_Init+0x274>)
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	d819      	bhi.n	8008b90 <HAL_I2C_Init+0x13c>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1e59      	subs	r1, r3, #1
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008b70:	400b      	ands	r3, r1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <HAL_I2C_Init+0x138>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1e59      	subs	r1, r3, #1
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b84:	3301      	adds	r3, #1
 8008b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b8a:	e051      	b.n	8008c30 <HAL_I2C_Init+0x1dc>
 8008b8c:	2304      	movs	r3, #4
 8008b8e:	e04f      	b.n	8008c30 <HAL_I2C_Init+0x1dc>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d111      	bne.n	8008bbc <HAL_I2C_Init+0x168>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	1e58      	subs	r0, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6859      	ldr	r1, [r3, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	440b      	add	r3, r1
 8008ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008baa:	3301      	adds	r3, #1
 8008bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bf0c      	ite	eq
 8008bb4:	2301      	moveq	r3, #1
 8008bb6:	2300      	movne	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	e012      	b.n	8008be2 <HAL_I2C_Init+0x18e>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	1e58      	subs	r0, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6859      	ldr	r1, [r3, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	440b      	add	r3, r1
 8008bca:	0099      	lsls	r1, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_I2C_Init+0x196>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e022      	b.n	8008c30 <HAL_I2C_Init+0x1dc>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10e      	bne.n	8008c10 <HAL_I2C_Init+0x1bc>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1e58      	subs	r0, r3, #1
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6859      	ldr	r1, [r3, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	440b      	add	r3, r1
 8008c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c04:	3301      	adds	r3, #1
 8008c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c0e:	e00f      	b.n	8008c30 <HAL_I2C_Init+0x1dc>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	1e58      	subs	r0, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	0099      	lsls	r1, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c26:	3301      	adds	r3, #1
 8008c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	6809      	ldr	r1, [r1, #0]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69da      	ldr	r2, [r3, #28]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008c5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6911      	ldr	r1, [r2, #16]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68d2      	ldr	r2, [r2, #12]
 8008c6a:	4311      	orrs	r1, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6812      	ldr	r2, [r2, #0]
 8008c70:	430b      	orrs	r3, r1
 8008c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695a      	ldr	r2, [r3, #20]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f042 0201 	orr.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	000186a0 	.word	0x000186a0
 8008ccc:	001e847f 	.word	0x001e847f
 8008cd0:	003d08ff 	.word	0x003d08ff
 8008cd4:	431bde83 	.word	0x431bde83
 8008cd8:	10624dd3 	.word	0x10624dd3

08008cdc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e021      	b.n	8008d32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2224      	movs	r2, #36	@ 0x24
 8008cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 0201 	bic.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fe f8d4 	bl	8006eb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	817b      	strh	r3, [r7, #10]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	813b      	strh	r3, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d56:	f7fe fe7f 	bl	8007a58 <HAL_GetTick>
 8008d5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	f040 80d9 	bne.w	8008f1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	2319      	movs	r3, #25
 8008d70:	2201      	movs	r2, #1
 8008d72:	496d      	ldr	r1, [pc, #436]	@ (8008f28 <HAL_I2C_Mem_Write+0x1ec>)
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 fc8b 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008d80:	2302      	movs	r3, #2
 8008d82:	e0cc      	b.n	8008f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_I2C_Mem_Write+0x56>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e0c5      	b.n	8008f1e <HAL_I2C_Mem_Write+0x1e2>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d007      	beq.n	8008db8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0201 	orr.w	r2, r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2221      	movs	r2, #33	@ 0x21
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2240      	movs	r2, #64	@ 0x40
 8008dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a3a      	ldr	r2, [r7, #32]
 8008de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4a4d      	ldr	r2, [pc, #308]	@ (8008f2c <HAL_I2C_Mem_Write+0x1f0>)
 8008df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dfa:	88f8      	ldrh	r0, [r7, #6]
 8008dfc:	893a      	ldrh	r2, [r7, #8]
 8008dfe:	8979      	ldrh	r1, [r7, #10]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	4603      	mov	r3, r0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fac2 	bl	8009394 <I2C_RequestMemoryWrite>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d052      	beq.n	8008ebc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e081      	b.n	8008f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 fd50 	bl	80098c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00d      	beq.n	8008e46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d107      	bne.n	8008e42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e06b      	b.n	8008f1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d11b      	bne.n	8008ebc <HAL_I2C_Mem_Write+0x180>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d017      	beq.n	8008ebc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1aa      	bne.n	8008e1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 fd43 	bl	8009954 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00d      	beq.n	8008ef0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d107      	bne.n	8008eec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e016      	b.n	8008f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e000      	b.n	8008f1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008f1c:	2302      	movs	r3, #2
  }
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	00100002 	.word	0x00100002
 8008f2c:	ffff0000 	.word	0xffff0000

08008f30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08c      	sub	sp, #48	@ 0x30
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	817b      	strh	r3, [r7, #10]
 8008f42:	460b      	mov	r3, r1
 8008f44:	813b      	strh	r3, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f4a:	f7fe fd85 	bl	8007a58 <HAL_GetTick>
 8008f4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	f040 8214 	bne.w	8009386 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	2319      	movs	r3, #25
 8008f64:	2201      	movs	r2, #1
 8008f66:	497b      	ldr	r1, [pc, #492]	@ (8009154 <HAL_I2C_Mem_Read+0x224>)
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fb91 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008f74:	2302      	movs	r3, #2
 8008f76:	e207      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_I2C_Mem_Read+0x56>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e200      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d007      	beq.n	8008fac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2222      	movs	r2, #34	@ 0x22
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2240      	movs	r2, #64	@ 0x40
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a5b      	ldr	r2, [pc, #364]	@ (8009158 <HAL_I2C_Mem_Read+0x228>)
 8008fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fee:	88f8      	ldrh	r0, [r7, #6]
 8008ff0:	893a      	ldrh	r2, [r7, #8]
 8008ff2:	8979      	ldrh	r1, [r7, #10]
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 fa5e 	bl	80094c0 <I2C_RequestMemoryRead>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e1bc      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	d113      	bne.n	800903e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009016:	2300      	movs	r3, #0
 8009018:	623b      	str	r3, [r7, #32]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	623b      	str	r3, [r7, #32]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	623b      	str	r3, [r7, #32]
 800902a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	e190      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009042:	2b01      	cmp	r3, #1
 8009044:	d11b      	bne.n	800907e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009056:	2300      	movs	r3, #0
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	e170      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009082:	2b02      	cmp	r3, #2
 8009084:	d11b      	bne.n	80090be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009094:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a6:	2300      	movs	r3, #0
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	e150      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80090d4:	e144      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090da:	2b03      	cmp	r3, #3
 80090dc:	f200 80f1 	bhi.w	80092c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d123      	bne.n	8009130 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 fc79 	bl	80099e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e145      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800912e:	e117      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009134:	2b02      	cmp	r3, #2
 8009136:	d14e      	bne.n	80091d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913e:	2200      	movs	r2, #0
 8009140:	4906      	ldr	r1, [pc, #24]	@ (800915c <HAL_I2C_Mem_Read+0x22c>)
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 faa4 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e11a      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
 8009152:	bf00      	nop
 8009154:	00100002 	.word	0x00100002
 8009158:	ffff0000 	.word	0xffff0000
 800915c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800916e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691a      	ldr	r2, [r3, #16]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	b2d2      	uxtb	r2, r2
 800917c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691a      	ldr	r2, [r3, #16]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	b2d2      	uxtb	r2, r2
 80091ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091d4:	e0c4      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091dc:	2200      	movs	r2, #0
 80091de:	496c      	ldr	r1, [pc, #432]	@ (8009390 <HAL_I2C_Mem_Read+0x460>)
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 fa55 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0cb      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691a      	ldr	r2, [r3, #16]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800921c:	3b01      	subs	r3, #1
 800921e:	b29a      	uxth	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	2200      	movs	r2, #0
 800923a:	4955      	ldr	r1, [pc, #340]	@ (8009390 <HAL_I2C_Mem_Read+0x460>)
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 fa27 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e09d      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800925a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092aa:	3b01      	subs	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092c0:	e04e      	b.n	8009360 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fb8c 	bl	80099e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e058      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e0:	b2d2      	uxtb	r2, r2
 80092e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092fe:	b29b      	uxth	r3, r3
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f003 0304 	and.w	r3, r3, #4
 8009312:	2b04      	cmp	r3, #4
 8009314:	d124      	bne.n	8009360 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931a:	2b03      	cmp	r3, #3
 800931c:	d107      	bne.n	800932e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800932c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	691a      	ldr	r2, [r3, #16]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009356:	b29b      	uxth	r3, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009364:	2b00      	cmp	r3, #0
 8009366:	f47f aeb6 	bne.w	80090d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2220      	movs	r2, #32
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	e000      	b.n	8009388 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009386:	2302      	movs	r3, #2
  }
}
 8009388:	4618      	mov	r0, r3
 800938a:	3728      	adds	r7, #40	@ 0x28
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	00010004 	.word	0x00010004

08009394 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af02      	add	r7, sp, #8
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	461a      	mov	r2, r3
 80093a2:	4603      	mov	r3, r0
 80093a4:	817b      	strh	r3, [r7, #10]
 80093a6:	460b      	mov	r3, r1
 80093a8:	813b      	strh	r3, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f960 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00d      	beq.n	80093f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e4:	d103      	bne.n	80093ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e05f      	b.n	80094b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093f2:	897b      	ldrh	r3, [r7, #10]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009400:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	6a3a      	ldr	r2, [r7, #32]
 8009406:	492d      	ldr	r1, [pc, #180]	@ (80094bc <I2C_RequestMemoryWrite+0x128>)
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 f9bb 	bl	8009784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e04c      	b.n	80094b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009430:	6a39      	ldr	r1, [r7, #32]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fa46 	bl	80098c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009442:	2b04      	cmp	r3, #4
 8009444:	d107      	bne.n	8009456 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009454:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e02b      	b.n	80094b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800945a:	88fb      	ldrh	r3, [r7, #6]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d105      	bne.n	800946c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009460:	893b      	ldrh	r3, [r7, #8]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	611a      	str	r2, [r3, #16]
 800946a:	e021      	b.n	80094b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800946c:	893b      	ldrh	r3, [r7, #8]
 800946e:	0a1b      	lsrs	r3, r3, #8
 8009470:	b29b      	uxth	r3, r3
 8009472:	b2da      	uxtb	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800947a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947c:	6a39      	ldr	r1, [r7, #32]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fa20 	bl	80098c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00d      	beq.n	80094a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948e:	2b04      	cmp	r3, #4
 8009490:	d107      	bne.n	80094a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e005      	b.n	80094b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094a6:	893b      	ldrh	r3, [r7, #8]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	00010002 	.word	0x00010002

080094c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	461a      	mov	r2, r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	817b      	strh	r3, [r7, #10]
 80094d2:	460b      	mov	r3, r1
 80094d4:	813b      	strh	r3, [r7, #8]
 80094d6:	4613      	mov	r3, r2
 80094d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80094e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	2200      	movs	r2, #0
 8009502:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f8c2 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00d      	beq.n	800952e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009520:	d103      	bne.n	800952a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009528:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e0aa      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800952e:	897b      	ldrh	r3, [r7, #10]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800953c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	6a3a      	ldr	r2, [r7, #32]
 8009542:	4952      	ldr	r1, [pc, #328]	@ (800968c <I2C_RequestMemoryRead+0x1cc>)
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 f91d 	bl	8009784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e097      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800956a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800956c:	6a39      	ldr	r1, [r7, #32]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f9a8 	bl	80098c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00d      	beq.n	8009596 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957e:	2b04      	cmp	r3, #4
 8009580:	d107      	bne.n	8009592 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009590:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e076      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d105      	bne.n	80095a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800959c:	893b      	ldrh	r3, [r7, #8]
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	611a      	str	r2, [r3, #16]
 80095a6:	e021      	b.n	80095ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095a8:	893b      	ldrh	r3, [r7, #8]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b8:	6a39      	ldr	r1, [r7, #32]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 f982 	bl	80098c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00d      	beq.n	80095e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	d107      	bne.n	80095de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e050      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095e2:	893b      	ldrh	r3, [r7, #8]
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095ee:	6a39      	ldr	r1, [r7, #32]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f967 	bl	80098c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00d      	beq.n	8009618 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009600:	2b04      	cmp	r3, #4
 8009602:	d107      	bne.n	8009614 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009612:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e035      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009626:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	2200      	movs	r2, #0
 8009630:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 f82b 	bl	8009690 <I2C_WaitOnFlagUntilTimeout>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00d      	beq.n	800965c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800964a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964e:	d103      	bne.n	8009658 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009656:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e013      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800965c:	897b      	ldrh	r3, [r7, #10]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	6a3a      	ldr	r2, [r7, #32]
 8009670:	4906      	ldr	r1, [pc, #24]	@ (800968c <I2C_RequestMemoryRead+0x1cc>)
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f886 	bl	8009784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e000      	b.n	8009684 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	00010002 	.word	0x00010002

08009690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	4613      	mov	r3, r2
 800969e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096a0:	e048      	b.n	8009734 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d044      	beq.n	8009734 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096aa:	f7fe f9d5 	bl	8007a58 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d302      	bcc.n	80096c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d139      	bne.n	8009734 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	0c1b      	lsrs	r3, r3, #16
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d10d      	bne.n	80096e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	43da      	mvns	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4013      	ands	r3, r2
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bf0c      	ite	eq
 80096dc:	2301      	moveq	r3, #1
 80096de:	2300      	movne	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	461a      	mov	r2, r3
 80096e4:	e00c      	b.n	8009700 <I2C_WaitOnFlagUntilTimeout+0x70>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	43da      	mvns	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4013      	ands	r3, r2
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bf0c      	ite	eq
 80096f8:	2301      	moveq	r3, #1
 80096fa:	2300      	movne	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	429a      	cmp	r2, r3
 8009704:	d116      	bne.n	8009734 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2220      	movs	r2, #32
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009720:	f043 0220 	orr.w	r2, r3, #32
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e023      	b.n	800977c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	0c1b      	lsrs	r3, r3, #16
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b01      	cmp	r3, #1
 800973c:	d10d      	bne.n	800975a <I2C_WaitOnFlagUntilTimeout+0xca>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	43da      	mvns	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	4013      	ands	r3, r2
 800974a:	b29b      	uxth	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	461a      	mov	r2, r3
 8009758:	e00c      	b.n	8009774 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	43da      	mvns	r2, r3
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4013      	ands	r3, r2
 8009766:	b29b      	uxth	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	bf0c      	ite	eq
 800976c:	2301      	moveq	r3, #1
 800976e:	2300      	movne	r3, #0
 8009770:	b2db      	uxtb	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	429a      	cmp	r2, r3
 8009778:	d093      	beq.n	80096a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009792:	e071      	b.n	8009878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800979e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097a2:	d123      	bne.n	80097ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d8:	f043 0204 	orr.w	r2, r3, #4
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e067      	b.n	80098bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f2:	d041      	beq.n	8009878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097f4:	f7fe f930 	bl	8007a58 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	d302      	bcc.n	800980a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d136      	bne.n	8009878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	0c1b      	lsrs	r3, r3, #16
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10c      	bne.n	800982e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	43da      	mvns	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4013      	ands	r3, r2
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2301      	movne	r3, #1
 8009828:	2300      	moveq	r3, #0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	e00b      	b.n	8009846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	43da      	mvns	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	4013      	ands	r3, r2
 800983a:	b29b      	uxth	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	bf14      	ite	ne
 8009840:	2301      	movne	r3, #1
 8009842:	2300      	moveq	r3, #0
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d016      	beq.n	8009878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e021      	b.n	80098bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	0c1b      	lsrs	r3, r3, #16
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10c      	bne.n	800989c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	43da      	mvns	r2, r3
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4013      	ands	r3, r2
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	e00b      	b.n	80098b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	43da      	mvns	r2, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bf14      	ite	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	2300      	moveq	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f47f af6d 	bne.w	8009794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098d0:	e034      	b.n	800993c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f8e3 	bl	8009a9e <I2C_IsAcknowledgeFailed>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e034      	b.n	800994c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d028      	beq.n	800993c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ea:	f7fe f8b5 	bl	8007a58 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d302      	bcc.n	8009900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11d      	bne.n	800993c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800990a:	2b80      	cmp	r3, #128	@ 0x80
 800990c:	d016      	beq.n	800993c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2220      	movs	r2, #32
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009928:	f043 0220 	orr.w	r2, r3, #32
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e007      	b.n	800994c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009946:	2b80      	cmp	r3, #128	@ 0x80
 8009948:	d1c3      	bne.n	80098d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009960:	e034      	b.n	80099cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 f89b 	bl	8009a9e <I2C_IsAcknowledgeFailed>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e034      	b.n	80099dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009978:	d028      	beq.n	80099cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800997a:	f7fe f86d 	bl	8007a58 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	d302      	bcc.n	8009990 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d11d      	bne.n	80099cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b04      	cmp	r3, #4
 800999c:	d016      	beq.n	80099cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b8:	f043 0220 	orr.w	r2, r3, #32
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e007      	b.n	80099dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d1c3      	bne.n	8009962 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099f0:	e049      	b.n	8009a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	f003 0310 	and.w	r3, r3, #16
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d119      	bne.n	8009a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f06f 0210 	mvn.w	r2, #16
 8009a08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e030      	b.n	8009a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a34:	f7fe f810 	bl	8007a58 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d11d      	bne.n	8009a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a54:	2b40      	cmp	r3, #64	@ 0x40
 8009a56:	d016      	beq.n	8009a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a72:	f043 0220 	orr.w	r2, r3, #32
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e007      	b.n	8009a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a90:	2b40      	cmp	r3, #64	@ 0x40
 8009a92:	d1ae      	bne.n	80099f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab4:	d11b      	bne.n	8009aee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009abe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ada:	f043 0204 	orr.w	r2, r3, #4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e0cc      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b10:	4b68      	ldr	r3, [pc, #416]	@ (8009cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d90c      	bls.n	8009b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b1e:	4b65      	ldr	r3, [pc, #404]	@ (8009cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	b2d2      	uxtb	r2, r2
 8009b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b26:	4b63      	ldr	r3, [pc, #396]	@ (8009cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 030f 	and.w	r3, r3, #15
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d001      	beq.n	8009b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0b8      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d020      	beq.n	8009b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b50:	4b59      	ldr	r3, [pc, #356]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	4a58      	ldr	r2, [pc, #352]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b68:	4b53      	ldr	r3, [pc, #332]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	4a52      	ldr	r2, [pc, #328]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b74:	4b50      	ldr	r3, [pc, #320]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	494d      	ldr	r1, [pc, #308]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d044      	beq.n	8009c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d107      	bne.n	8009baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b9a:	4b47      	ldr	r3, [pc, #284]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d119      	bne.n	8009bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e07f      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d003      	beq.n	8009bba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d107      	bne.n	8009bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bba:	4b3f      	ldr	r3, [pc, #252]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d109      	bne.n	8009bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e06f      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bca:	4b3b      	ldr	r3, [pc, #236]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e067      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bda:	4b37      	ldr	r3, [pc, #220]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f023 0203 	bic.w	r2, r3, #3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4934      	ldr	r1, [pc, #208]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bec:	f7fd ff34 	bl	8007a58 <HAL_GetTick>
 8009bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bf2:	e00a      	b.n	8009c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bf4:	f7fd ff30 	bl	8007a58 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e04f      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 020c 	and.w	r2, r3, #12
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d1eb      	bne.n	8009bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c1c:	4b25      	ldr	r3, [pc, #148]	@ (8009cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 030f 	and.w	r3, r3, #15
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d20c      	bcs.n	8009c44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c2a:	4b22      	ldr	r3, [pc, #136]	@ (8009cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c32:	4b20      	ldr	r3, [pc, #128]	@ (8009cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 030f 	and.w	r3, r3, #15
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d001      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e032      	b.n	8009caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d008      	beq.n	8009c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c50:	4b19      	ldr	r3, [pc, #100]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	4916      	ldr	r1, [pc, #88]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c6e:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	490e      	ldr	r1, [pc, #56]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009c82:	f000 f855 	bl	8009d30 <HAL_RCC_GetSysClockFreq>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	091b      	lsrs	r3, r3, #4
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	490a      	ldr	r1, [pc, #40]	@ (8009cbc <HAL_RCC_ClockConfig+0x1c0>)
 8009c94:	5ccb      	ldrb	r3, [r1, r3]
 8009c96:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9a:	4a09      	ldr	r2, [pc, #36]	@ (8009cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8009c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009c9e:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fd fe94 	bl	80079d0 <HAL_InitTick>

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40023c00 	.word	0x40023c00
 8009cb8:	40023800 	.word	0x40023800
 8009cbc:	08011a40 	.word	0x08011a40
 8009cc0:	20000040 	.word	0x20000040
 8009cc4:	20000044 	.word	0x20000044

08009cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ccc:	4b03      	ldr	r3, [pc, #12]	@ (8009cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8009cce:	681b      	ldr	r3, [r3, #0]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000040 	.word	0x20000040

08009ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ce4:	f7ff fff0 	bl	8009cc8 <HAL_RCC_GetHCLKFreq>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	4b05      	ldr	r3, [pc, #20]	@ (8009d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	0a9b      	lsrs	r3, r3, #10
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	4903      	ldr	r1, [pc, #12]	@ (8009d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cf6:	5ccb      	ldrb	r3, [r1, r3]
 8009cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	40023800 	.word	0x40023800
 8009d04:	08011a50 	.word	0x08011a50

08009d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d0c:	f7ff ffdc 	bl	8009cc8 <HAL_RCC_GetHCLKFreq>
 8009d10:	4602      	mov	r2, r0
 8009d12:	4b05      	ldr	r3, [pc, #20]	@ (8009d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	0b5b      	lsrs	r3, r3, #13
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	4903      	ldr	r1, [pc, #12]	@ (8009d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d1e:	5ccb      	ldrb	r3, [r1, r3]
 8009d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	40023800 	.word	0x40023800
 8009d2c:	08011a50 	.word	0x08011a50

08009d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d34:	b0ae      	sub	sp, #184	@ 0xb8
 8009d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d56:	4bcb      	ldr	r3, [pc, #812]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f003 030c 	and.w	r3, r3, #12
 8009d5e:	2b0c      	cmp	r3, #12
 8009d60:	f200 8206 	bhi.w	800a170 <HAL_RCC_GetSysClockFreq+0x440>
 8009d64:	a201      	add	r2, pc, #4	@ (adr r2, 8009d6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009da1 	.word	0x08009da1
 8009d70:	0800a171 	.word	0x0800a171
 8009d74:	0800a171 	.word	0x0800a171
 8009d78:	0800a171 	.word	0x0800a171
 8009d7c:	08009da9 	.word	0x08009da9
 8009d80:	0800a171 	.word	0x0800a171
 8009d84:	0800a171 	.word	0x0800a171
 8009d88:	0800a171 	.word	0x0800a171
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	0800a171 	.word	0x0800a171
 8009d94:	0800a171 	.word	0x0800a171
 8009d98:	0800a171 	.word	0x0800a171
 8009d9c:	08009fa1 	.word	0x08009fa1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009da0:	4bb9      	ldr	r3, [pc, #740]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x358>)
 8009da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009da6:	e1e7      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009da8:	4bb8      	ldr	r3, [pc, #736]	@ (800a08c <HAL_RCC_GetSysClockFreq+0x35c>)
 8009daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009dae:	e1e3      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009db0:	4bb4      	ldr	r3, [pc, #720]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009dbc:	4bb1      	ldr	r3, [pc, #708]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d071      	beq.n	8009eac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dc8:	4bae      	ldr	r3, [pc, #696]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	099b      	lsrs	r3, r3, #6
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dd4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009de4:	2300      	movs	r3, #0
 8009de6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009dee:	4622      	mov	r2, r4
 8009df0:	462b      	mov	r3, r5
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f04f 0100 	mov.w	r1, #0
 8009dfa:	0159      	lsls	r1, r3, #5
 8009dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e00:	0150      	lsls	r0, r2, #5
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4621      	mov	r1, r4
 8009e08:	1a51      	subs	r1, r2, r1
 8009e0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8009e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009e20:	4649      	mov	r1, r9
 8009e22:	018b      	lsls	r3, r1, #6
 8009e24:	4641      	mov	r1, r8
 8009e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	018a      	lsls	r2, r1, #6
 8009e2e:	4641      	mov	r1, r8
 8009e30:	1a51      	subs	r1, r2, r1
 8009e32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e34:	4649      	mov	r1, r9
 8009e36:	eb63 0301 	sbc.w	r3, r3, r1
 8009e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009e48:	4649      	mov	r1, r9
 8009e4a:	00cb      	lsls	r3, r1, #3
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e52:	4641      	mov	r1, r8
 8009e54:	00ca      	lsls	r2, r1, #3
 8009e56:	4610      	mov	r0, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	189b      	adds	r3, r3, r2
 8009e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e62:	462b      	mov	r3, r5
 8009e64:	460a      	mov	r2, r1
 8009e66:	eb42 0303 	adc.w	r3, r2, r3
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009e78:	4629      	mov	r1, r5
 8009e7a:	024b      	lsls	r3, r1, #9
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e82:	4621      	mov	r1, r4
 8009e84:	024a      	lsls	r2, r1, #9
 8009e86:	4610      	mov	r0, r2
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009e9c:	f7f7 f852 	bl	8000f44 <__aeabi_uldivmod>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009eaa:	e067      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eac:	4b75      	ldr	r3, [pc, #468]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	099b      	lsrs	r3, r3, #6
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009eb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009eca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f04f 0100 	mov.w	r1, #0
 8009eda:	0159      	lsls	r1, r3, #5
 8009edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ee0:	0150      	lsls	r0, r2, #5
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	1a51      	subs	r1, r2, r1
 8009eea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009eec:	4629      	mov	r1, r5
 8009eee:	eb63 0301 	sbc.w	r3, r3, r1
 8009ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009f00:	4649      	mov	r1, r9
 8009f02:	018b      	lsls	r3, r1, #6
 8009f04:	4641      	mov	r1, r8
 8009f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f0a:	4641      	mov	r1, r8
 8009f0c:	018a      	lsls	r2, r1, #6
 8009f0e:	4641      	mov	r1, r8
 8009f10:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f14:	4649      	mov	r1, r9
 8009f16:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f1a:	f04f 0200 	mov.w	r2, #0
 8009f1e:	f04f 0300 	mov.w	r3, #0
 8009f22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f2e:	4692      	mov	sl, r2
 8009f30:	469b      	mov	fp, r3
 8009f32:	4623      	mov	r3, r4
 8009f34:	eb1a 0303 	adds.w	r3, sl, r3
 8009f38:	623b      	str	r3, [r7, #32]
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	eb4b 0303 	adc.w	r3, fp, r3
 8009f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	f04f 0300 	mov.w	r3, #0
 8009f4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009f4e:	4629      	mov	r1, r5
 8009f50:	028b      	lsls	r3, r1, #10
 8009f52:	4621      	mov	r1, r4
 8009f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f58:	4621      	mov	r1, r4
 8009f5a:	028a      	lsls	r2, r1, #10
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f64:	2200      	movs	r2, #0
 8009f66:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f68:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009f6e:	f7f6 ffe9 	bl	8000f44 <__aeabi_uldivmod>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4613      	mov	r3, r2
 8009f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009f7c:	4b41      	ldr	r3, [pc, #260]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	3301      	adds	r3, #1
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009f9e:	e0eb      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009fa0:	4b38      	ldr	r3, [pc, #224]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009fac:	4b35      	ldr	r3, [pc, #212]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d06b      	beq.n	800a090 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fb8:	4b32      	ldr	r3, [pc, #200]	@ (800a084 <HAL_RCC_GetSysClockFreq+0x354>)
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	099b      	lsrs	r3, r3, #6
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009fc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fcc:	2300      	movs	r3, #0
 8009fce:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fd0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	462b      	mov	r3, r5
 8009fd8:	f04f 0000 	mov.w	r0, #0
 8009fdc:	f04f 0100 	mov.w	r1, #0
 8009fe0:	0159      	lsls	r1, r3, #5
 8009fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fe6:	0150      	lsls	r0, r2, #5
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4621      	mov	r1, r4
 8009fee:	1a51      	subs	r1, r2, r1
 8009ff0:	61b9      	str	r1, [r7, #24]
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8009ff8:	61fb      	str	r3, [r7, #28]
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	f04f 0300 	mov.w	r3, #0
 800a002:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a006:	4659      	mov	r1, fp
 800a008:	018b      	lsls	r3, r1, #6
 800a00a:	4651      	mov	r1, sl
 800a00c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a010:	4651      	mov	r1, sl
 800a012:	018a      	lsls	r2, r1, #6
 800a014:	4651      	mov	r1, sl
 800a016:	ebb2 0801 	subs.w	r8, r2, r1
 800a01a:	4659      	mov	r1, fp
 800a01c:	eb63 0901 	sbc.w	r9, r3, r1
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a02c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a030:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a034:	4690      	mov	r8, r2
 800a036:	4699      	mov	r9, r3
 800a038:	4623      	mov	r3, r4
 800a03a:	eb18 0303 	adds.w	r3, r8, r3
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	462b      	mov	r3, r5
 800a042:	eb49 0303 	adc.w	r3, r9, r3
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a054:	4629      	mov	r1, r5
 800a056:	024b      	lsls	r3, r1, #9
 800a058:	4621      	mov	r1, r4
 800a05a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a05e:	4621      	mov	r1, r4
 800a060:	024a      	lsls	r2, r1, #9
 800a062:	4610      	mov	r0, r2
 800a064:	4619      	mov	r1, r3
 800a066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a06a:	2200      	movs	r2, #0
 800a06c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a06e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a070:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a074:	f7f6 ff66 	bl	8000f44 <__aeabi_uldivmod>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4613      	mov	r3, r2
 800a07e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a082:	e065      	b.n	800a150 <HAL_RCC_GetSysClockFreq+0x420>
 800a084:	40023800 	.word	0x40023800
 800a088:	00f42400 	.word	0x00f42400
 800a08c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a090:	4b3d      	ldr	r3, [pc, #244]	@ (800a188 <HAL_RCC_GetSysClockFreq+0x458>)
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	099b      	lsrs	r3, r3, #6
 800a096:	2200      	movs	r2, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	4611      	mov	r1, r2
 800a09c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	f04f 0000 	mov.w	r0, #0
 800a0b2:	f04f 0100 	mov.w	r1, #0
 800a0b6:	0159      	lsls	r1, r3, #5
 800a0b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a0bc:	0150      	lsls	r0, r2, #5
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4641      	mov	r1, r8
 800a0c4:	1a51      	subs	r1, r2, r1
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	eb63 0301 	sbc.w	r3, r3, r1
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a0dc:	4659      	mov	r1, fp
 800a0de:	018b      	lsls	r3, r1, #6
 800a0e0:	4651      	mov	r1, sl
 800a0e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a0e6:	4651      	mov	r1, sl
 800a0e8:	018a      	lsls	r2, r1, #6
 800a0ea:	4651      	mov	r1, sl
 800a0ec:	1a54      	subs	r4, r2, r1
 800a0ee:	4659      	mov	r1, fp
 800a0f0:	eb63 0501 	sbc.w	r5, r3, r1
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	00eb      	lsls	r3, r5, #3
 800a0fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a102:	00e2      	lsls	r2, r4, #3
 800a104:	4614      	mov	r4, r2
 800a106:	461d      	mov	r5, r3
 800a108:	4643      	mov	r3, r8
 800a10a:	18e3      	adds	r3, r4, r3
 800a10c:	603b      	str	r3, [r7, #0]
 800a10e:	464b      	mov	r3, r9
 800a110:	eb45 0303 	adc.w	r3, r5, r3
 800a114:	607b      	str	r3, [r7, #4]
 800a116:	f04f 0200 	mov.w	r2, #0
 800a11a:	f04f 0300 	mov.w	r3, #0
 800a11e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a122:	4629      	mov	r1, r5
 800a124:	028b      	lsls	r3, r1, #10
 800a126:	4621      	mov	r1, r4
 800a128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a12c:	4621      	mov	r1, r4
 800a12e:	028a      	lsls	r2, r1, #10
 800a130:	4610      	mov	r0, r2
 800a132:	4619      	mov	r1, r3
 800a134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a138:	2200      	movs	r2, #0
 800a13a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a13c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a13e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a142:	f7f6 feff 	bl	8000f44 <__aeabi_uldivmod>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4613      	mov	r3, r2
 800a14c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a150:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <HAL_RCC_GetSysClockFreq+0x458>)
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	0f1b      	lsrs	r3, r3, #28
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800a15e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a166:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a16e:	e003      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a170:	4b06      	ldr	r3, [pc, #24]	@ (800a18c <HAL_RCC_GetSysClockFreq+0x45c>)
 800a172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a176:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	37b8      	adds	r7, #184	@ 0xb8
 800a180:	46bd      	mov	sp, r7
 800a182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a186:	bf00      	nop
 800a188:	40023800 	.word	0x40023800
 800a18c:	00f42400 	.word	0x00f42400

0800a190 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e28d      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 8083 	beq.w	800a2b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a1b0:	4b94      	ldr	r3, [pc, #592]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f003 030c 	and.w	r3, r3, #12
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d019      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a1bc:	4b91      	ldr	r3, [pc, #580]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 030c 	and.w	r3, r3, #12
        || \
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d106      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a1c8:	4b8e      	ldr	r3, [pc, #568]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1d4:	d00c      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1d6:	4b8b      	ldr	r3, [pc, #556]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a1de:	2b0c      	cmp	r3, #12
 800a1e0:	d112      	bne.n	800a208 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1e2:	4b88      	ldr	r3, [pc, #544]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1ee:	d10b      	bne.n	800a208 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1f0:	4b84      	ldr	r3, [pc, #528]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d05b      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x124>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d157      	bne.n	800a2b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e25a      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a210:	d106      	bne.n	800a220 <HAL_RCC_OscConfig+0x90>
 800a212:	4b7c      	ldr	r3, [pc, #496]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a7b      	ldr	r2, [pc, #492]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	e01d      	b.n	800a25c <HAL_RCC_OscConfig+0xcc>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a228:	d10c      	bne.n	800a244 <HAL_RCC_OscConfig+0xb4>
 800a22a:	4b76      	ldr	r3, [pc, #472]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a75      	ldr	r2, [pc, #468]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	4b73      	ldr	r3, [pc, #460]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a72      	ldr	r2, [pc, #456]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a23c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	e00b      	b.n	800a25c <HAL_RCC_OscConfig+0xcc>
 800a244:	4b6f      	ldr	r3, [pc, #444]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a6e      	ldr	r2, [pc, #440]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a24a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	4b6c      	ldr	r3, [pc, #432]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a6b      	ldr	r2, [pc, #428]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a25a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d013      	beq.n	800a28c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a264:	f7fd fbf8 	bl	8007a58 <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a26c:	f7fd fbf4 	bl	8007a58 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b64      	cmp	r3, #100	@ 0x64
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e21f      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a27e:	4b61      	ldr	r3, [pc, #388]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0f0      	beq.n	800a26c <HAL_RCC_OscConfig+0xdc>
 800a28a:	e014      	b.n	800a2b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28c:	f7fd fbe4 	bl	8007a58 <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a294:	f7fd fbe0 	bl	8007a58 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b64      	cmp	r3, #100	@ 0x64
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e20b      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2a6:	4b57      	ldr	r3, [pc, #348]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0x104>
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d06f      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a2c2:	4b50      	ldr	r3, [pc, #320]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 030c 	and.w	r3, r3, #12
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d017      	beq.n	800a2fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a2ce:	4b4d      	ldr	r3, [pc, #308]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f003 030c 	and.w	r3, r3, #12
        || \
 800a2d6:	2b08      	cmp	r3, #8
 800a2d8:	d105      	bne.n	800a2e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a2da:	4b4a      	ldr	r3, [pc, #296]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2e6:	4b47      	ldr	r3, [pc, #284]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a2ee:	2b0c      	cmp	r3, #12
 800a2f0:	d11c      	bne.n	800a32c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2f2:	4b44      	ldr	r3, [pc, #272]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d116      	bne.n	800a32c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2fe:	4b41      	ldr	r3, [pc, #260]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d005      	beq.n	800a316 <HAL_RCC_OscConfig+0x186>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d001      	beq.n	800a316 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e1d3      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a316:	4b3b      	ldr	r3, [pc, #236]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	00db      	lsls	r3, r3, #3
 800a324:	4937      	ldr	r1, [pc, #220]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a326:	4313      	orrs	r3, r2
 800a328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a32a:	e03a      	b.n	800a3a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d020      	beq.n	800a376 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a334:	4b34      	ldr	r3, [pc, #208]	@ (800a408 <HAL_RCC_OscConfig+0x278>)
 800a336:	2201      	movs	r2, #1
 800a338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a33a:	f7fd fb8d 	bl	8007a58 <HAL_GetTick>
 800a33e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a340:	e008      	b.n	800a354 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a342:	f7fd fb89 	bl	8007a58 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d901      	bls.n	800a354 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e1b4      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a354:	4b2b      	ldr	r3, [pc, #172]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0f0      	beq.n	800a342 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a360:	4b28      	ldr	r3, [pc, #160]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4925      	ldr	r1, [pc, #148]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a370:	4313      	orrs	r3, r2
 800a372:	600b      	str	r3, [r1, #0]
 800a374:	e015      	b.n	800a3a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a376:	4b24      	ldr	r3, [pc, #144]	@ (800a408 <HAL_RCC_OscConfig+0x278>)
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a37c:	f7fd fb6c 	bl	8007a58 <HAL_GetTick>
 800a380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a382:	e008      	b.n	800a396 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a384:	f7fd fb68 	bl	8007a58 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e193      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a396:	4b1b      	ldr	r3, [pc, #108]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f0      	bne.n	800a384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d036      	beq.n	800a41c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d016      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3b6:	4b15      	ldr	r3, [pc, #84]	@ (800a40c <HAL_RCC_OscConfig+0x27c>)
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3bc:	f7fd fb4c 	bl	8007a58 <HAL_GetTick>
 800a3c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3c2:	e008      	b.n	800a3d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3c4:	f7fd fb48 	bl	8007a58 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e173      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a404 <HAL_RCC_OscConfig+0x274>)
 800a3d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0f0      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x234>
 800a3e2:	e01b      	b.n	800a41c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3e4:	4b09      	ldr	r3, [pc, #36]	@ (800a40c <HAL_RCC_OscConfig+0x27c>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ea:	f7fd fb35 	bl	8007a58 <HAL_GetTick>
 800a3ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3f0:	e00e      	b.n	800a410 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3f2:	f7fd fb31 	bl	8007a58 <HAL_GetTick>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d907      	bls.n	800a410 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e15c      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
 800a404:	40023800 	.word	0x40023800
 800a408:	42470000 	.word	0x42470000
 800a40c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a410:	4b8a      	ldr	r3, [pc, #552]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1ea      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 8097 	beq.w	800a558 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a42e:	4b83      	ldr	r3, [pc, #524]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10f      	bne.n	800a45a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a43a:	2300      	movs	r3, #0
 800a43c:	60bb      	str	r3, [r7, #8]
 800a43e:	4b7f      	ldr	r3, [pc, #508]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a442:	4a7e      	ldr	r2, [pc, #504]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a448:	6413      	str	r3, [r2, #64]	@ 0x40
 800a44a:	4b7c      	ldr	r3, [pc, #496]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a44e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a452:	60bb      	str	r3, [r7, #8]
 800a454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a456:	2301      	movs	r3, #1
 800a458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a45a:	4b79      	ldr	r3, [pc, #484]	@ (800a640 <HAL_RCC_OscConfig+0x4b0>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a462:	2b00      	cmp	r3, #0
 800a464:	d118      	bne.n	800a498 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a466:	4b76      	ldr	r3, [pc, #472]	@ (800a640 <HAL_RCC_OscConfig+0x4b0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a75      	ldr	r2, [pc, #468]	@ (800a640 <HAL_RCC_OscConfig+0x4b0>)
 800a46c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a472:	f7fd faf1 	bl	8007a58 <HAL_GetTick>
 800a476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a478:	e008      	b.n	800a48c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a47a:	f7fd faed 	bl	8007a58 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d901      	bls.n	800a48c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e118      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a48c:	4b6c      	ldr	r3, [pc, #432]	@ (800a640 <HAL_RCC_OscConfig+0x4b0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a494:	2b00      	cmp	r3, #0
 800a496:	d0f0      	beq.n	800a47a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d106      	bne.n	800a4ae <HAL_RCC_OscConfig+0x31e>
 800a4a0:	4b66      	ldr	r3, [pc, #408]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a4:	4a65      	ldr	r2, [pc, #404]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4ac:	e01c      	b.n	800a4e8 <HAL_RCC_OscConfig+0x358>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	d10c      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x340>
 800a4b6:	4b61      	ldr	r3, [pc, #388]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ba:	4a60      	ldr	r2, [pc, #384]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4bc:	f043 0304 	orr.w	r3, r3, #4
 800a4c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4c2:	4b5e      	ldr	r3, [pc, #376]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4c6:	4a5d      	ldr	r2, [pc, #372]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4c8:	f043 0301 	orr.w	r3, r3, #1
 800a4cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4ce:	e00b      	b.n	800a4e8 <HAL_RCC_OscConfig+0x358>
 800a4d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4d4:	4a59      	ldr	r2, [pc, #356]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4d6:	f023 0301 	bic.w	r3, r3, #1
 800a4da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a4dc:	4b57      	ldr	r3, [pc, #348]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4e0:	4a56      	ldr	r2, [pc, #344]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a4e2:	f023 0304 	bic.w	r3, r3, #4
 800a4e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d015      	beq.n	800a51c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4f0:	f7fd fab2 	bl	8007a58 <HAL_GetTick>
 800a4f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4f6:	e00a      	b.n	800a50e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4f8:	f7fd faae 	bl	8007a58 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a506:	4293      	cmp	r3, r2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e0d7      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a50e:	4b4b      	ldr	r3, [pc, #300]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0ee      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x368>
 800a51a:	e014      	b.n	800a546 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a51c:	f7fd fa9c 	bl	8007a58 <HAL_GetTick>
 800a520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a522:	e00a      	b.n	800a53a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a524:	f7fd fa98 	bl	8007a58 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a532:	4293      	cmp	r3, r2
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e0c1      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a53a:	4b40      	ldr	r3, [pc, #256]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a53c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1ee      	bne.n	800a524 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d105      	bne.n	800a558 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a54c:	4b3b      	ldr	r3, [pc, #236]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	4a3a      	ldr	r2, [pc, #232]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a556:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 80ad 	beq.w	800a6bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a562:	4b36      	ldr	r3, [pc, #216]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 030c 	and.w	r3, r3, #12
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	d060      	beq.n	800a630 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d145      	bne.n	800a602 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a576:	4b33      	ldr	r3, [pc, #204]	@ (800a644 <HAL_RCC_OscConfig+0x4b4>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a57c:	f7fd fa6c 	bl	8007a58 <HAL_GetTick>
 800a580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a582:	e008      	b.n	800a596 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a584:	f7fd fa68 	bl	8007a58 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d901      	bls.n	800a596 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e093      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a596:	4b29      	ldr	r3, [pc, #164]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f0      	bne.n	800a584 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	69da      	ldr	r2, [r3, #28]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b0:	019b      	lsls	r3, r3, #6
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	041b      	lsls	r3, r3, #16
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c4:	061b      	lsls	r3, r3, #24
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5cc:	071b      	lsls	r3, r3, #28
 800a5ce:	491b      	ldr	r1, [pc, #108]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a644 <HAL_RCC_OscConfig+0x4b4>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5da:	f7fd fa3d 	bl	8007a58 <HAL_GetTick>
 800a5de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5e0:	e008      	b.n	800a5f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e2:	f7fd fa39 	bl	8007a58 <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d901      	bls.n	800a5f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e064      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5f4:	4b11      	ldr	r3, [pc, #68]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0f0      	beq.n	800a5e2 <HAL_RCC_OscConfig+0x452>
 800a600:	e05c      	b.n	800a6bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a602:	4b10      	ldr	r3, [pc, #64]	@ (800a644 <HAL_RCC_OscConfig+0x4b4>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a608:	f7fd fa26 	bl	8007a58 <HAL_GetTick>
 800a60c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a60e:	e008      	b.n	800a622 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a610:	f7fd fa22 	bl	8007a58 <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e04d      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a622:	4b06      	ldr	r3, [pc, #24]	@ (800a63c <HAL_RCC_OscConfig+0x4ac>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f0      	bne.n	800a610 <HAL_RCC_OscConfig+0x480>
 800a62e:	e045      	b.n	800a6bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d107      	bne.n	800a648 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e040      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
 800a63c:	40023800 	.word	0x40023800
 800a640:	40007000 	.word	0x40007000
 800a644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a648:	4b1f      	ldr	r3, [pc, #124]	@ (800a6c8 <HAL_RCC_OscConfig+0x538>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d030      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a660:	429a      	cmp	r2, r3
 800a662:	d129      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a66e:	429a      	cmp	r2, r3
 800a670:	d122      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a678:	4013      	ands	r3, r2
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a67e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a680:	4293      	cmp	r3, r2
 800a682:	d119      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	3b01      	subs	r3, #1
 800a692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a694:	429a      	cmp	r2, r3
 800a696:	d10f      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d107      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d001      	beq.n	800a6bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e000      	b.n	800a6be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40023800 	.word	0x40023800

0800a6cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e041      	b.n	800a762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7fc fc1c 	bl	8006f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3304      	adds	r3, #4
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f000 fa7e 	bl	800ac0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d001      	beq.n	800a784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e04e      	b.n	800a822 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68da      	ldr	r2, [r3, #12]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f042 0201 	orr.w	r2, r2, #1
 800a79a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a23      	ldr	r2, [pc, #140]	@ (800a830 <HAL_TIM_Base_Start_IT+0xc4>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d022      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ae:	d01d      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1f      	ldr	r2, [pc, #124]	@ (800a834 <HAL_TIM_Base_Start_IT+0xc8>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d018      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a1e      	ldr	r2, [pc, #120]	@ (800a838 <HAL_TIM_Base_Start_IT+0xcc>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d013      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a83c <HAL_TIM_Base_Start_IT+0xd0>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00e      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a1b      	ldr	r2, [pc, #108]	@ (800a840 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d009      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a19      	ldr	r2, [pc, #100]	@ (800a844 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d004      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x80>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a18      	ldr	r2, [pc, #96]	@ (800a848 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d111      	bne.n	800a810 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b06      	cmp	r3, #6
 800a7fc:	d010      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f042 0201 	orr.w	r2, r2, #1
 800a80c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a80e:	e007      	b.n	800a820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0201 	orr.w	r2, r2, #1
 800a81e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	40010000 	.word	0x40010000
 800a834:	40000400 	.word	0x40000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	40000c00 	.word	0x40000c00
 800a840:	40010400 	.word	0x40010400
 800a844:	40014000 	.word	0x40014000
 800a848:	40001800 	.word	0x40001800

0800a84c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d020      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d01b      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0202 	mvn.w	r2, #2
 800a880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f999 	bl	800abce <HAL_TIM_IC_CaptureCallback>
 800a89c:	e005      	b.n	800a8aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f98b 	bl	800abba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f99c 	bl	800abe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d020      	beq.n	800a8fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01b      	beq.n	800a8fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0204 	mvn.w	r2, #4
 800a8cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f973 	bl	800abce <HAL_TIM_IC_CaptureCallback>
 800a8e8:	e005      	b.n	800a8f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f965 	bl	800abba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f976 	bl	800abe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d020      	beq.n	800a948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f003 0308 	and.w	r3, r3, #8
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01b      	beq.n	800a948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0208 	mvn.w	r2, #8
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2204      	movs	r2, #4
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f94d 	bl	800abce <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f93f 	bl	800abba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f950 	bl	800abe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f003 0310 	and.w	r3, r3, #16
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d020      	beq.n	800a994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01b      	beq.n	800a994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0210 	mvn.w	r2, #16
 800a964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2208      	movs	r2, #8
 800a96a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f927 	bl	800abce <HAL_TIM_IC_CaptureCallback>
 800a980:	e005      	b.n	800a98e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f919 	bl	800abba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f92a 	bl	800abe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d007      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f06f 0201 	mvn.w	r2, #1
 800a9b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7fa f92c 	bl	8004c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00c      	beq.n	800a9dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d007      	beq.n	800a9dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a9d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fade 	bl	800af98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00c      	beq.n	800aa00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d007      	beq.n	800aa00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f8fb 	bl	800abf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f003 0320 	and.w	r3, r3, #32
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00c      	beq.n	800aa24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f003 0320 	and.w	r3, r3, #32
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f06f 0220 	mvn.w	r2, #32
 800aa1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fab0 	bl	800af84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa24:	bf00      	nop
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d101      	bne.n	800aa48 <HAL_TIM_ConfigClockSource+0x1c>
 800aa44:	2302      	movs	r3, #2
 800aa46:	e0b4      	b.n	800abb2 <HAL_TIM_ConfigClockSource+0x186>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aa66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa80:	d03e      	beq.n	800ab00 <HAL_TIM_ConfigClockSource+0xd4>
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa86:	f200 8087 	bhi.w	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aa8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa8e:	f000 8086 	beq.w	800ab9e <HAL_TIM_ConfigClockSource+0x172>
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa96:	d87f      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aa98:	2b70      	cmp	r3, #112	@ 0x70
 800aa9a:	d01a      	beq.n	800aad2 <HAL_TIM_ConfigClockSource+0xa6>
 800aa9c:	2b70      	cmp	r3, #112	@ 0x70
 800aa9e:	d87b      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aaa0:	2b60      	cmp	r3, #96	@ 0x60
 800aaa2:	d050      	beq.n	800ab46 <HAL_TIM_ConfigClockSource+0x11a>
 800aaa4:	2b60      	cmp	r3, #96	@ 0x60
 800aaa6:	d877      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aaa8:	2b50      	cmp	r3, #80	@ 0x50
 800aaaa:	d03c      	beq.n	800ab26 <HAL_TIM_ConfigClockSource+0xfa>
 800aaac:	2b50      	cmp	r3, #80	@ 0x50
 800aaae:	d873      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aab0:	2b40      	cmp	r3, #64	@ 0x40
 800aab2:	d058      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x13a>
 800aab4:	2b40      	cmp	r3, #64	@ 0x40
 800aab6:	d86f      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aab8:	2b30      	cmp	r3, #48	@ 0x30
 800aaba:	d064      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x15a>
 800aabc:	2b30      	cmp	r3, #48	@ 0x30
 800aabe:	d86b      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aac0:	2b20      	cmp	r3, #32
 800aac2:	d060      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x15a>
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	d867      	bhi.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d05c      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x15a>
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d05a      	beq.n	800ab86 <HAL_TIM_ConfigClockSource+0x15a>
 800aad0:	e062      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aae2:	f000 f9b3 	bl	800ae4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aaf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	609a      	str	r2, [r3, #8]
      break;
 800aafe:	e04f      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab10:	f000 f99c 	bl	800ae4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab22:	609a      	str	r2, [r3, #8]
      break;
 800ab24:	e03c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab32:	461a      	mov	r2, r3
 800ab34:	f000 f910 	bl	800ad58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2150      	movs	r1, #80	@ 0x50
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f969 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ab44:	e02c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab52:	461a      	mov	r2, r3
 800ab54:	f000 f92f 	bl	800adb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2160      	movs	r1, #96	@ 0x60
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 f959 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ab64:	e01c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab72:	461a      	mov	r2, r3
 800ab74:	f000 f8f0 	bl	800ad58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2140      	movs	r1, #64	@ 0x40
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f949 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ab84:	e00c      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4610      	mov	r0, r2
 800ab92:	f000 f940 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ab96:	e003      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9c:	e000      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abc2:	bf00      	nop
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abfe:	bf00      	nop
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
	...

0800ac0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a43      	ldr	r2, [pc, #268]	@ (800ad2c <TIM_Base_SetConfig+0x120>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d013      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2a:	d00f      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a40      	ldr	r2, [pc, #256]	@ (800ad30 <TIM_Base_SetConfig+0x124>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00b      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a3f      	ldr	r2, [pc, #252]	@ (800ad34 <TIM_Base_SetConfig+0x128>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d007      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a3e      	ldr	r2, [pc, #248]	@ (800ad38 <TIM_Base_SetConfig+0x12c>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a3d      	ldr	r2, [pc, #244]	@ (800ad3c <TIM_Base_SetConfig+0x130>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d108      	bne.n	800ac5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a32      	ldr	r2, [pc, #200]	@ (800ad2c <TIM_Base_SetConfig+0x120>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d02b      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac6c:	d027      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a2f      	ldr	r2, [pc, #188]	@ (800ad30 <TIM_Base_SetConfig+0x124>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d023      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a2e      	ldr	r2, [pc, #184]	@ (800ad34 <TIM_Base_SetConfig+0x128>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d01f      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a2d      	ldr	r2, [pc, #180]	@ (800ad38 <TIM_Base_SetConfig+0x12c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d01b      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a2c      	ldr	r2, [pc, #176]	@ (800ad3c <TIM_Base_SetConfig+0x130>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d017      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a2b      	ldr	r2, [pc, #172]	@ (800ad40 <TIM_Base_SetConfig+0x134>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d013      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a2a      	ldr	r2, [pc, #168]	@ (800ad44 <TIM_Base_SetConfig+0x138>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00f      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a29      	ldr	r2, [pc, #164]	@ (800ad48 <TIM_Base_SetConfig+0x13c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d00b      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a28      	ldr	r2, [pc, #160]	@ (800ad4c <TIM_Base_SetConfig+0x140>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d007      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a27      	ldr	r2, [pc, #156]	@ (800ad50 <TIM_Base_SetConfig+0x144>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d003      	beq.n	800acbe <TIM_Base_SetConfig+0xb2>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a26      	ldr	r2, [pc, #152]	@ (800ad54 <TIM_Base_SetConfig+0x148>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d108      	bne.n	800acd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	689a      	ldr	r2, [r3, #8]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a0e      	ldr	r2, [pc, #56]	@ (800ad2c <TIM_Base_SetConfig+0x120>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d003      	beq.n	800acfe <TIM_Base_SetConfig+0xf2>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a10      	ldr	r2, [pc, #64]	@ (800ad3c <TIM_Base_SetConfig+0x130>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d103      	bne.n	800ad06 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	691a      	ldr	r2, [r3, #16]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f043 0204 	orr.w	r2, r3, #4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	601a      	str	r2, [r3, #0]
}
 800ad1e:	bf00      	nop
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40010000 	.word	0x40010000
 800ad30:	40000400 	.word	0x40000400
 800ad34:	40000800 	.word	0x40000800
 800ad38:	40000c00 	.word	0x40000c00
 800ad3c:	40010400 	.word	0x40010400
 800ad40:	40014000 	.word	0x40014000
 800ad44:	40014400 	.word	0x40014400
 800ad48:	40014800 	.word	0x40014800
 800ad4c:	40001800 	.word	0x40001800
 800ad50:	40001c00 	.word	0x40001c00
 800ad54:	40002000 	.word	0x40002000

0800ad58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	f023 0201 	bic.w	r2, r3, #1
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	011b      	lsls	r3, r3, #4
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f023 030a 	bic.w	r3, r3, #10
 800ad94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	621a      	str	r2, [r3, #32]
}
 800adaa:	bf00      	nop
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b087      	sub	sp, #28
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	f023 0210 	bic.w	r2, r3, #16
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ade0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	031b      	lsls	r3, r3, #12
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4313      	orrs	r3, r2
 800adea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	621a      	str	r2, [r3, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	f043 0307 	orr.w	r3, r3, #7
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	609a      	str	r2, [r3, #8]
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	021a      	lsls	r2, r3, #8
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	609a      	str	r2, [r3, #8]
}
 800ae80:	bf00      	nop
 800ae82:	371c      	adds	r7, #28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d101      	bne.n	800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aea0:	2302      	movs	r3, #2
 800aea2:	e05a      	b.n	800af5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a21      	ldr	r2, [pc, #132]	@ (800af68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d022      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aef0:	d01d      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a1d      	ldr	r2, [pc, #116]	@ (800af6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d018      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a1b      	ldr	r2, [pc, #108]	@ (800af70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d013      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a1a      	ldr	r2, [pc, #104]	@ (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00e      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a18      	ldr	r2, [pc, #96]	@ (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d009      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a17      	ldr	r2, [pc, #92]	@ (800af7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d004      	beq.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a15      	ldr	r2, [pc, #84]	@ (800af80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d10c      	bne.n	800af48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40010000 	.word	0x40010000
 800af6c:	40000400 	.word	0x40000400
 800af70:	40000800 	.word	0x40000800
 800af74:	40000c00 	.word	0x40000c00
 800af78:	40010400 	.word	0x40010400
 800af7c:	40014000 	.word	0x40014000
 800af80:	40001800 	.word	0x40001800

0800af84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e042      	b.n	800b044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7fb ffd2 	bl	8006f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2224      	movs	r2, #36	@ 0x24
 800afdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 f879 	bl	800c0e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	691a      	ldr	r2, [r3, #16]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	695a      	ldr	r2, [r3, #20]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08a      	sub	sp, #40	@ 0x28
 800b050:	af02      	add	r7, sp, #8
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	603b      	str	r3, [r7, #0]
 800b058:	4613      	mov	r3, r2
 800b05a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b20      	cmp	r3, #32
 800b06a:	d175      	bne.n	800b158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <HAL_UART_Transmit+0x2c>
 800b072:	88fb      	ldrh	r3, [r7, #6]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e06e      	b.n	800b15a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2221      	movs	r2, #33	@ 0x21
 800b086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b08a:	f7fc fce5 	bl	8007a58 <HAL_GetTick>
 800b08e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	88fa      	ldrh	r2, [r7, #6]
 800b094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	88fa      	ldrh	r2, [r7, #6]
 800b09a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0a4:	d108      	bne.n	800b0b8 <HAL_UART_Transmit+0x6c>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	e003      	b.n	800b0c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0c0:	e02e      	b.n	800b120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2180      	movs	r1, #128	@ 0x80
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 fd4a 	bl	800bb66 <UART_WaitOnFlagUntilTimeout>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e03a      	b.n	800b15a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10b      	bne.n	800b102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	3302      	adds	r3, #2
 800b0fe:	61bb      	str	r3, [r7, #24]
 800b100:	e007      	b.n	800b112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	781a      	ldrb	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	3301      	adds	r3, #1
 800b110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b116:	b29b      	uxth	r3, r3
 800b118:	3b01      	subs	r3, #1
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1cb      	bne.n	800b0c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2200      	movs	r2, #0
 800b132:	2140      	movs	r1, #64	@ 0x40
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fd16 	bl	800bb66 <UART_WaitOnFlagUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2220      	movs	r2, #32
 800b144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e006      	b.n	800b15a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2220      	movs	r2, #32
 800b150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	e000      	b.n	800b15a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b158:	2302      	movs	r3, #2
  }
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3720      	adds	r7, #32
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08c      	sub	sp, #48	@ 0x30
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	d162      	bne.n	800b244 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <HAL_UART_Transmit_DMA+0x26>
 800b184:	88fb      	ldrh	r3, [r7, #6]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e05b      	b.n	800b246 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	88fa      	ldrh	r2, [r7, #6]
 800b198:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	88fa      	ldrh	r2, [r7, #6]
 800b19e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2221      	movs	r2, #33	@ 0x21
 800b1aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b2:	4a27      	ldr	r2, [pc, #156]	@ (800b250 <HAL_UART_Transmit_DMA+0xec>)
 800b1b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ba:	4a26      	ldr	r2, [pc, #152]	@ (800b254 <HAL_UART_Transmit_DMA+0xf0>)
 800b1bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c2:	4a25      	ldr	r2, [pc, #148]	@ (800b258 <HAL_UART_Transmit_DMA+0xf4>)
 800b1c4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b1ce:	f107 0308 	add.w	r3, r7, #8
 800b1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1da:	6819      	ldr	r1, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	f7fc fe27 	bl	8007e38 <HAL_DMA_Start_IT>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d008      	beq.n	800b202 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2210      	movs	r2, #16
 800b1f4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e021      	b.n	800b246 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b20a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3314      	adds	r3, #20
 800b212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	e853 3f00 	ldrex	r3, [r3]
 800b21a:	617b      	str	r3, [r7, #20]
   return(result);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b222:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3314      	adds	r3, #20
 800b22a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b22c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b22e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b230:	6a39      	ldr	r1, [r7, #32]
 800b232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b234:	e841 2300 	strex	r3, r2, [r1]
 800b238:	61fb      	str	r3, [r7, #28]
   return(result);
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1e5      	bne.n	800b20c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	e000      	b.n	800b246 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800b244:	2302      	movs	r3, #2
  }
}
 800b246:	4618      	mov	r0, r3
 800b248:	3730      	adds	r7, #48	@ 0x30
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	0800b8b5 	.word	0x0800b8b5
 800b254:	0800b94f 	.word	0x0800b94f
 800b258:	0800bad3 	.word	0x0800bad3

0800b25c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08c      	sub	sp, #48	@ 0x30
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	4613      	mov	r3, r2
 800b268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b20      	cmp	r3, #32
 800b274:	d146      	bne.n	800b304 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e03f      	b.n	800b306 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2201      	movs	r2, #1
 800b28a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	461a      	mov	r2, r3
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fcbd 	bl	800bc18 <UART_Start_Receive_DMA>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d125      	bne.n	800b2f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	613b      	str	r3, [r7, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	613b      	str	r3, [r7, #16]
 800b2c0:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	330c      	adds	r3, #12
 800b2c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f043 0310 	orr.w	r3, r3, #16
 800b2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	330c      	adds	r3, #12
 800b2e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6a39      	ldr	r1, [r7, #32]
 800b2e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e5      	bne.n	800b2c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800b2f6:	e002      	b.n	800b2fe <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b2fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b302:	e000      	b.n	800b306 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800b304:	2302      	movs	r3, #2
  }
}
 800b306:	4618      	mov	r0, r3
 800b308:	3730      	adds	r7, #48	@ 0x30
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b0ba      	sub	sp, #232	@ 0xe8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b336:	2300      	movs	r3, #0
 800b338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b346:	f003 030f 	and.w	r3, r3, #15
 800b34a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b34e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10f      	bne.n	800b376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d009      	beq.n	800b376 <HAL_UART_IRQHandler+0x66>
 800b362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b366:	f003 0320 	and.w	r3, r3, #32
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fdfc 	bl	800bf6c <UART_Receive_IT>
      return;
 800b374:	e273      	b.n	800b85e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 80de 	beq.w	800b53c <HAL_UART_IRQHandler+0x22c>
 800b380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b384:	f003 0301 	and.w	r3, r3, #1
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d106      	bne.n	800b39a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b390:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b394:	2b00      	cmp	r3, #0
 800b396:	f000 80d1 	beq.w	800b53c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00b      	beq.n	800b3be <HAL_UART_IRQHandler+0xae>
 800b3a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d005      	beq.n	800b3be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b6:	f043 0201 	orr.w	r2, r3, #1
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3c2:	f003 0304 	and.w	r3, r3, #4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00b      	beq.n	800b3e2 <HAL_UART_IRQHandler+0xd2>
 800b3ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d005      	beq.n	800b3e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3da:	f043 0202 	orr.w	r2, r3, #2
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3e6:	f003 0302 	and.w	r3, r3, #2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00b      	beq.n	800b406 <HAL_UART_IRQHandler+0xf6>
 800b3ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d005      	beq.n	800b406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3fe:	f043 0204 	orr.w	r2, r3, #4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b40a:	f003 0308 	and.w	r3, r3, #8
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d011      	beq.n	800b436 <HAL_UART_IRQHandler+0x126>
 800b412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b416:	f003 0320 	and.w	r3, r3, #32
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d105      	bne.n	800b42a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b42e:	f043 0208 	orr.w	r2, r3, #8
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 820a 	beq.w	800b854 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b444:	f003 0320 	and.w	r3, r3, #32
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d008      	beq.n	800b45e <HAL_UART_IRQHandler+0x14e>
 800b44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b450:	f003 0320 	and.w	r3, r3, #32
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fd87 	bl	800bf6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b468:	2b40      	cmp	r3, #64	@ 0x40
 800b46a:	bf0c      	ite	eq
 800b46c:	2301      	moveq	r3, #1
 800b46e:	2300      	movne	r3, #0
 800b470:	b2db      	uxtb	r3, r3
 800b472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b47a:	f003 0308 	and.w	r3, r3, #8
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d103      	bne.n	800b48a <HAL_UART_IRQHandler+0x17a>
 800b482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b486:	2b00      	cmp	r3, #0
 800b488:	d04f      	beq.n	800b52a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fc92 	bl	800bdb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b49a:	2b40      	cmp	r3, #64	@ 0x40
 800b49c:	d141      	bne.n	800b522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3314      	adds	r3, #20
 800b4a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b4b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3314      	adds	r3, #20
 800b4c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b4ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b4ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b4d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b4e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1d9      	bne.n	800b49e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d013      	beq.n	800b51a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f6:	4a8a      	ldr	r2, [pc, #552]	@ (800b720 <HAL_UART_IRQHandler+0x410>)
 800b4f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fc fd62 	bl	8007fc8 <HAL_DMA_Abort_IT>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d016      	beq.n	800b538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b50e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b514:	4610      	mov	r0, r2
 800b516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b518:	e00e      	b.n	800b538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f9c0 	bl	800b8a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b520:	e00a      	b.n	800b538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f9bc 	bl	800b8a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b528:	e006      	b.n	800b538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f9b8 	bl	800b8a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b536:	e18d      	b.n	800b854 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b538:	bf00      	nop
    return;
 800b53a:	e18b      	b.n	800b854 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b540:	2b01      	cmp	r3, #1
 800b542:	f040 8167 	bne.w	800b814 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b54a:	f003 0310 	and.w	r3, r3, #16
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 8160 	beq.w	800b814 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b558:	f003 0310 	and.w	r3, r3, #16
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 8159 	beq.w	800b814 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b562:	2300      	movs	r3, #0
 800b564:	60bb      	str	r3, [r7, #8]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	60bb      	str	r3, [r7, #8]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	60bb      	str	r3, [r7, #8]
 800b576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b582:	2b40      	cmp	r3, #64	@ 0x40
 800b584:	f040 80ce 	bne.w	800b724 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 80a9 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b5a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	f080 80a2 	bcs.w	800b6f0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5be:	f000 8088 	beq.w	800b6d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b5d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b5dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b5ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b5f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b5fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b5fe:	e841 2300 	strex	r3, r2, [r1]
 800b602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1d9      	bne.n	800b5c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3314      	adds	r3, #20
 800b614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b61e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b620:	f023 0301 	bic.w	r3, r3, #1
 800b624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3314      	adds	r3, #20
 800b62e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b63a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e1      	bne.n	800b60e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3314      	adds	r3, #20
 800b650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b654:	e853 3f00 	ldrex	r3, [r3]
 800b658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b65a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b65c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3314      	adds	r3, #20
 800b66a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b66e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b676:	e841 2300 	strex	r3, r2, [r1]
 800b67a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b67c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1e3      	bne.n	800b64a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2220      	movs	r2, #32
 800b686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	330c      	adds	r3, #12
 800b696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6a2:	f023 0310 	bic.w	r3, r3, #16
 800b6a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	330c      	adds	r3, #12
 800b6b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b6b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b6b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e3      	bne.n	800b690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fc fc0b 	bl	8007ee8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7f9 fa63 	bl	8004bb4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b6ee:	e0b3      	b.n	800b858 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	f040 80ad 	bne.w	800b858 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b708:	f040 80a6 	bne.w	800b858 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b716:	4619      	mov	r1, r3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7f9 fa4b 	bl	8004bb4 <HAL_UARTEx_RxEventCallback>
      return;
 800b71e:	e09b      	b.n	800b858 <HAL_UART_IRQHandler+0x548>
 800b720:	0800be7b 	.word	0x0800be7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b738:	b29b      	uxth	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 808e 	beq.w	800b85c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 8089 	beq.w	800b85c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	330c      	adds	r3, #12
 800b750:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b75c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	330c      	adds	r3, #12
 800b76a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b76e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b776:	e841 2300 	strex	r3, r2, [r1]
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1e3      	bne.n	800b74a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3314      	adds	r3, #20
 800b788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	623b      	str	r3, [r7, #32]
   return(result);
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	f023 0301 	bic.w	r3, r3, #1
 800b798:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3314      	adds	r3, #20
 800b7a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b7a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ae:	e841 2300 	strex	r3, r2, [r1]
 800b7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e3      	bne.n	800b782 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2220      	movs	r2, #32
 800b7be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	330c      	adds	r3, #12
 800b7ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	e853 3f00 	ldrex	r3, [r3]
 800b7d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f023 0310 	bic.w	r3, r3, #16
 800b7de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	330c      	adds	r3, #12
 800b7e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b7ec:	61fa      	str	r2, [r7, #28]
 800b7ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f0:	69b9      	ldr	r1, [r7, #24]
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	e841 2300 	strex	r3, r2, [r1]
 800b7f8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e3      	bne.n	800b7c8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7f9 f9d1 	bl	8004bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b812:	e023      	b.n	800b85c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <HAL_UART_IRQHandler+0x524>
 800b820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fb35 	bl	800be9c <UART_Transmit_IT>
    return;
 800b832:	e014      	b.n	800b85e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00e      	beq.n	800b85e <HAL_UART_IRQHandler+0x54e>
 800b840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d008      	beq.n	800b85e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fb75 	bl	800bf3c <UART_EndTransmit_IT>
    return;
 800b852:	e004      	b.n	800b85e <HAL_UART_IRQHandler+0x54e>
    return;
 800b854:	bf00      	nop
 800b856:	e002      	b.n	800b85e <HAL_UART_IRQHandler+0x54e>
      return;
 800b858:	bf00      	nop
 800b85a:	e000      	b.n	800b85e <HAL_UART_IRQHandler+0x54e>
      return;
 800b85c:	bf00      	nop
  }
}
 800b85e:	37e8      	adds	r7, #232	@ 0xe8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b090      	sub	sp, #64	@ 0x40
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d137      	bne.n	800b940 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3314      	adds	r3, #20
 800b8dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3314      	adds	r3, #20
 800b8f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8fe:	e841 2300 	strex	r3, r2, [r1]
 800b902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1e5      	bne.n	800b8d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b90a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	330c      	adds	r3, #12
 800b910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	e853 3f00 	ldrex	r3, [r3]
 800b918:	60fb      	str	r3, [r7, #12]
   return(result);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b920:	637b      	str	r3, [r7, #52]	@ 0x34
 800b922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	330c      	adds	r3, #12
 800b928:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b92a:	61fa      	str	r2, [r7, #28]
 800b92c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	69b9      	ldr	r1, [r7, #24]
 800b930:	69fa      	ldr	r2, [r7, #28]
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	617b      	str	r3, [r7, #20]
   return(result);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e5      	bne.n	800b90a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b93e:	e002      	b.n	800b946 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b940:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b942:	f7f9 f979 	bl	8004c38 <HAL_UART_TxCpltCallback>
}
 800b946:	bf00      	nop
 800b948:	3740      	adds	r7, #64	@ 0x40
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff ff81 	bl	800b864 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b962:	bf00      	nop
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b09c      	sub	sp, #112	@ 0x70
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b976:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b982:	2b00      	cmp	r3, #0
 800b984:	d172      	bne.n	800ba6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b988:	2200      	movs	r2, #0
 800b98a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b98c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	330c      	adds	r3, #12
 800b992:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b99c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b99e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	330c      	adds	r3, #12
 800b9aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b9ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e5      	bne.n	800b98c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3314      	adds	r3, #20
 800b9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	f023 0301 	bic.w	r3, r3, #1
 800b9d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3314      	adds	r3, #20
 800b9de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9e0:	647a      	str	r2, [r7, #68]	@ 0x44
 800b9e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9e8:	e841 2300 	strex	r3, r2, [r1]
 800b9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e5      	bne.n	800b9c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3314      	adds	r3, #20
 800b9fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	e853 3f00 	ldrex	r3, [r3]
 800ba02:	623b      	str	r3, [r7, #32]
   return(result);
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba0a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3314      	adds	r3, #20
 800ba12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba14:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba1c:	e841 2300 	strex	r3, r2, [r1]
 800ba20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e5      	bne.n	800b9f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d119      	bne.n	800ba6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	330c      	adds	r3, #12
 800ba3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	e853 3f00 	ldrex	r3, [r3]
 800ba46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0310 	bic.w	r3, r3, #16
 800ba4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	330c      	adds	r3, #12
 800ba56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba58:	61fa      	str	r2, [r7, #28]
 800ba5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5c:	69b9      	ldr	r1, [r7, #24]
 800ba5e:	69fa      	ldr	r2, [r7, #28]
 800ba60:	e841 2300 	strex	r3, r2, [r1]
 800ba64:	617b      	str	r3, [r7, #20]
   return(result);
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e5      	bne.n	800ba38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba6e:	2200      	movs	r2, #0
 800ba70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d106      	bne.n	800ba88 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba82:	f7f9 f897 	bl	8004bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba86:	e002      	b.n	800ba8e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ba88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba8a:	f7ff fef5 	bl	800b878 <HAL_UART_RxCpltCallback>
}
 800ba8e:	bf00      	nop
 800ba90:	3770      	adds	r7, #112	@ 0x70
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2201      	movs	r2, #1
 800baa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d108      	bne.n	800bac4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bab6:	085b      	lsrs	r3, r3, #1
 800bab8:	b29b      	uxth	r3, r3
 800baba:	4619      	mov	r1, r3
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7f9 f879 	bl	8004bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bac2:	e002      	b.n	800baca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff fee1 	bl	800b88c <HAL_UART_RxHalfCpltCallback>
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baee:	2b80      	cmp	r3, #128	@ 0x80
 800baf0:	bf0c      	ite	eq
 800baf2:	2301      	moveq	r3, #1
 800baf4:	2300      	movne	r3, #0
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b21      	cmp	r3, #33	@ 0x21
 800bb04:	d108      	bne.n	800bb18 <UART_DMAError+0x46>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d005      	beq.n	800bb18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bb12:	68b8      	ldr	r0, [r7, #8]
 800bb14:	f000 f926 	bl	800bd64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb22:	2b40      	cmp	r3, #64	@ 0x40
 800bb24:	bf0c      	ite	eq
 800bb26:	2301      	moveq	r3, #1
 800bb28:	2300      	movne	r3, #0
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b22      	cmp	r3, #34	@ 0x22
 800bb38:	d108      	bne.n	800bb4c <UART_DMAError+0x7a>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d005      	beq.n	800bb4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2200      	movs	r2, #0
 800bb44:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bb46:	68b8      	ldr	r0, [r7, #8]
 800bb48:	f000 f934 	bl	800bdb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb50:	f043 0210 	orr.w	r2, r3, #16
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb58:	68b8      	ldr	r0, [r7, #8]
 800bb5a:	f7ff fea1 	bl	800b8a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb5e:	bf00      	nop
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b086      	sub	sp, #24
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	603b      	str	r3, [r7, #0]
 800bb72:	4613      	mov	r3, r2
 800bb74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb76:	e03b      	b.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d037      	beq.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb80:	f7fb ff6a 	bl	8007a58 <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	6a3a      	ldr	r2, [r7, #32]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d302      	bcc.n	800bb96 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e03a      	b.n	800bc10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d023      	beq.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b80      	cmp	r3, #128	@ 0x80
 800bbac:	d020      	beq.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b40      	cmp	r3, #64	@ 0x40
 800bbb2:	d01d      	beq.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0308 	and.w	r3, r3, #8
 800bbbe:	2b08      	cmp	r3, #8
 800bbc0:	d116      	bne.n	800bbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	617b      	str	r3, [r7, #20]
 800bbd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f8eb 	bl	800bdb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e00f      	b.n	800bc10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	bf0c      	ite	eq
 800bc00:	2301      	moveq	r3, #1
 800bc02:	2300      	movne	r3, #0
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	461a      	mov	r2, r3
 800bc08:	79fb      	ldrb	r3, [r7, #7]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d0b4      	beq.n	800bb78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b098      	sub	sp, #96	@ 0x60
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	4613      	mov	r3, r2
 800bc24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	88fa      	ldrh	r2, [r7, #6]
 800bc30:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2222      	movs	r2, #34	@ 0x22
 800bc3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc44:	4a44      	ldr	r2, [pc, #272]	@ (800bd58 <UART_Start_Receive_DMA+0x140>)
 800bc46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc4c:	4a43      	ldr	r2, [pc, #268]	@ (800bd5c <UART_Start_Receive_DMA+0x144>)
 800bc4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc54:	4a42      	ldr	r2, [pc, #264]	@ (800bd60 <UART_Start_Receive_DMA+0x148>)
 800bc56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bc60:	f107 0308 	add.w	r3, r7, #8
 800bc64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4619      	mov	r1, r3
 800bc72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	88fb      	ldrh	r3, [r7, #6]
 800bc78:	f7fc f8de 	bl	8007e38 <HAL_DMA_Start_IT>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d008      	beq.n	800bc94 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2210      	movs	r2, #16
 800bc86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e05d      	b.n	800bd50 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bc94:	2300      	movs	r3, #0
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	613b      	str	r3, [r7, #16]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	613b      	str	r3, [r7, #16]
 800bca8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d019      	beq.n	800bce6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	330c      	adds	r3, #12
 800bcb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	330c      	adds	r3, #12
 800bcd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcd2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bcd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bcd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e5      	bne.n	800bcb2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3314      	adds	r3, #20
 800bcec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf0:	e853 3f00 	ldrex	r3, [r3]
 800bcf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf8:	f043 0301 	orr.w	r3, r3, #1
 800bcfc:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3314      	adds	r3, #20
 800bd04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd06:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e5      	bne.n	800bce6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	617b      	str	r3, [r7, #20]
   return(result);
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd30:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3314      	adds	r3, #20
 800bd38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd3a:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6a39      	ldr	r1, [r7, #32]
 800bd40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e5      	bne.n	800bd1a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3760      	adds	r7, #96	@ 0x60
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	0800b96b 	.word	0x0800b96b
 800bd5c:	0800ba97 	.word	0x0800ba97
 800bd60:	0800bad3 	.word	0x0800bad3

0800bd64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b089      	sub	sp, #36	@ 0x24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	330c      	adds	r3, #12
 800bd72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bd82:	61fb      	str	r3, [r7, #28]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	330c      	adds	r3, #12
 800bd8a:	69fa      	ldr	r2, [r7, #28]
 800bd8c:	61ba      	str	r2, [r7, #24]
 800bd8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	6979      	ldr	r1, [r7, #20]
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e5      	bne.n	800bd6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2220      	movs	r2, #32
 800bda4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bda8:	bf00      	nop
 800bdaa:	3724      	adds	r7, #36	@ 0x24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b095      	sub	sp, #84	@ 0x54
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	330c      	adds	r3, #12
 800bdc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc6:	e853 3f00 	ldrex	r3, [r3]
 800bdca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	330c      	adds	r3, #12
 800bdda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bddc:	643a      	str	r2, [r7, #64]	@ 0x40
 800bdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bde2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e5      	bne.n	800bdbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3314      	adds	r3, #20
 800bdf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	e853 3f00 	ldrex	r3, [r3]
 800bdfe:	61fb      	str	r3, [r7, #28]
   return(result);
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	f023 0301 	bic.w	r3, r3, #1
 800be06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3314      	adds	r3, #20
 800be0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be18:	e841 2300 	strex	r3, r2, [r1]
 800be1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1e5      	bne.n	800bdf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d119      	bne.n	800be60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	330c      	adds	r3, #12
 800be32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	e853 3f00 	ldrex	r3, [r3]
 800be3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f023 0310 	bic.w	r3, r3, #16
 800be42:	647b      	str	r3, [r7, #68]	@ 0x44
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	330c      	adds	r3, #12
 800be4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be4c:	61ba      	str	r2, [r7, #24]
 800be4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6979      	ldr	r1, [r7, #20]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	613b      	str	r3, [r7, #16]
   return(result);
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e5      	bne.n	800be2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2220      	movs	r2, #32
 800be64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800be6e:	bf00      	nop
 800be70:	3754      	adds	r7, #84	@ 0x54
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b084      	sub	sp, #16
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f7ff fd06 	bl	800b8a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be94:	bf00      	nop
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b21      	cmp	r3, #33	@ 0x21
 800beae:	d13e      	bne.n	800bf2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beb8:	d114      	bne.n	800bee4 <UART_Transmit_IT+0x48>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d110      	bne.n	800bee4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	461a      	mov	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bed6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	1c9a      	adds	r2, r3, #2
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	621a      	str	r2, [r3, #32]
 800bee2:	e008      	b.n	800bef6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a1b      	ldr	r3, [r3, #32]
 800bee8:	1c59      	adds	r1, r3, #1
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6211      	str	r1, [r2, #32]
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800befa:	b29b      	uxth	r3, r3
 800befc:	3b01      	subs	r3, #1
 800befe:	b29b      	uxth	r3, r3
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	4619      	mov	r1, r3
 800bf04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10f      	bne.n	800bf2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68da      	ldr	r2, [r3, #12]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68da      	ldr	r2, [r3, #12]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e000      	b.n	800bf30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf2e:	2302      	movs	r3, #2
  }
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3714      	adds	r7, #20
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2220      	movs	r2, #32
 800bf58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7f8 fe6b 	bl	8004c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08c      	sub	sp, #48	@ 0x30
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b22      	cmp	r3, #34	@ 0x22
 800bf86:	f040 80aa 	bne.w	800c0de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf92:	d115      	bne.n	800bfc0 <UART_Receive_IT+0x54>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d111      	bne.n	800bfc0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb8:	1c9a      	adds	r2, r3, #2
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	629a      	str	r2, [r3, #40]	@ 0x28
 800bfbe:	e024      	b.n	800c00a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfce:	d007      	beq.n	800bfe0 <UART_Receive_IT+0x74>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <UART_Receive_IT+0x82>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfea:	701a      	strb	r2, [r3, #0]
 800bfec:	e008      	b.n	800c000 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c00e:	b29b      	uxth	r3, r3
 800c010:	3b01      	subs	r3, #1
 800c012:	b29b      	uxth	r3, r3
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	4619      	mov	r1, r3
 800c018:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d15d      	bne.n	800c0da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68da      	ldr	r2, [r3, #12]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f022 0220 	bic.w	r2, r2, #32
 800c02c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c03c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	695a      	ldr	r2, [r3, #20]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f022 0201 	bic.w	r2, r2, #1
 800c04c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2220      	movs	r2, #32
 800c052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c060:	2b01      	cmp	r3, #1
 800c062:	d135      	bne.n	800c0d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	330c      	adds	r3, #12
 800c070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	613b      	str	r3, [r7, #16]
   return(result);
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	f023 0310 	bic.w	r3, r3, #16
 800c080:	627b      	str	r3, [r7, #36]	@ 0x24
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	330c      	adds	r3, #12
 800c088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c08a:	623a      	str	r2, [r7, #32]
 800c08c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	69f9      	ldr	r1, [r7, #28]
 800c090:	6a3a      	ldr	r2, [r7, #32]
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	61bb      	str	r3, [r7, #24]
   return(result);
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e5      	bne.n	800c06a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0310 	and.w	r3, r3, #16
 800c0a8:	2b10      	cmp	r3, #16
 800c0aa:	d10a      	bne.n	800c0c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7f8 fd73 	bl	8004bb4 <HAL_UARTEx_RxEventCallback>
 800c0ce:	e002      	b.n	800c0d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff fbd1 	bl	800b878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e002      	b.n	800c0e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e000      	b.n	800c0e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c0de:	2302      	movs	r3, #2
  }
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3730      	adds	r7, #48	@ 0x30
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0ec:	b0c0      	sub	sp, #256	@ 0x100
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c104:	68d9      	ldr	r1, [r3, #12]
 800c106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	ea40 0301 	orr.w	r3, r0, r1
 800c110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c116:	689a      	ldr	r2, [r3, #8]
 800c118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	431a      	orrs	r2, r3
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	431a      	orrs	r2, r3
 800c128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	4313      	orrs	r3, r2
 800c130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c140:	f021 010c 	bic.w	r1, r1, #12
 800c144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c14e:	430b      	orrs	r3, r1
 800c150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c162:	6999      	ldr	r1, [r3, #24]
 800c164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	ea40 0301 	orr.w	r3, r0, r1
 800c16e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4b8f      	ldr	r3, [pc, #572]	@ (800c3b4 <UART_SetConfig+0x2cc>)
 800c178:	429a      	cmp	r2, r3
 800c17a:	d005      	beq.n	800c188 <UART_SetConfig+0xa0>
 800c17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	4b8d      	ldr	r3, [pc, #564]	@ (800c3b8 <UART_SetConfig+0x2d0>)
 800c184:	429a      	cmp	r2, r3
 800c186:	d104      	bne.n	800c192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c188:	f7fd fdbe 	bl	8009d08 <HAL_RCC_GetPCLK2Freq>
 800c18c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c190:	e003      	b.n	800c19a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c192:	f7fd fda5 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800c196:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1a4:	f040 810c 	bne.w	800c3c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c1b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c1ba:	4622      	mov	r2, r4
 800c1bc:	462b      	mov	r3, r5
 800c1be:	1891      	adds	r1, r2, r2
 800c1c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c1c2:	415b      	adcs	r3, r3
 800c1c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	eb12 0801 	adds.w	r8, r2, r1
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	eb43 0901 	adc.w	r9, r3, r1
 800c1d6:	f04f 0200 	mov.w	r2, #0
 800c1da:	f04f 0300 	mov.w	r3, #0
 800c1de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1ea:	4690      	mov	r8, r2
 800c1ec:	4699      	mov	r9, r3
 800c1ee:	4623      	mov	r3, r4
 800c1f0:	eb18 0303 	adds.w	r3, r8, r3
 800c1f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	eb49 0303 	adc.w	r3, r9, r3
 800c1fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c20e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c216:	460b      	mov	r3, r1
 800c218:	18db      	adds	r3, r3, r3
 800c21a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c21c:	4613      	mov	r3, r2
 800c21e:	eb42 0303 	adc.w	r3, r2, r3
 800c222:	657b      	str	r3, [r7, #84]	@ 0x54
 800c224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c22c:	f7f4 fe8a 	bl	8000f44 <__aeabi_uldivmod>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4b61      	ldr	r3, [pc, #388]	@ (800c3bc <UART_SetConfig+0x2d4>)
 800c236:	fba3 2302 	umull	r2, r3, r3, r2
 800c23a:	095b      	lsrs	r3, r3, #5
 800c23c:	011c      	lsls	r4, r3, #4
 800c23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c242:	2200      	movs	r2, #0
 800c244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c248:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c24c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c250:	4642      	mov	r2, r8
 800c252:	464b      	mov	r3, r9
 800c254:	1891      	adds	r1, r2, r2
 800c256:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c258:	415b      	adcs	r3, r3
 800c25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c25c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c260:	4641      	mov	r1, r8
 800c262:	eb12 0a01 	adds.w	sl, r2, r1
 800c266:	4649      	mov	r1, r9
 800c268:	eb43 0b01 	adc.w	fp, r3, r1
 800c26c:	f04f 0200 	mov.w	r2, #0
 800c270:	f04f 0300 	mov.w	r3, #0
 800c274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c27c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c280:	4692      	mov	sl, r2
 800c282:	469b      	mov	fp, r3
 800c284:	4643      	mov	r3, r8
 800c286:	eb1a 0303 	adds.w	r3, sl, r3
 800c28a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c28e:	464b      	mov	r3, r9
 800c290:	eb4b 0303 	adc.w	r3, fp, r3
 800c294:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c2a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	18db      	adds	r3, r3, r3
 800c2b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	eb42 0303 	adc.w	r3, r2, r3
 800c2b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c2be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c2c2:	f7f4 fe3f 	bl	8000f44 <__aeabi_uldivmod>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4b3b      	ldr	r3, [pc, #236]	@ (800c3bc <UART_SetConfig+0x2d4>)
 800c2ce:	fba3 2301 	umull	r2, r3, r3, r1
 800c2d2:	095b      	lsrs	r3, r3, #5
 800c2d4:	2264      	movs	r2, #100	@ 0x64
 800c2d6:	fb02 f303 	mul.w	r3, r2, r3
 800c2da:	1acb      	subs	r3, r1, r3
 800c2dc:	00db      	lsls	r3, r3, #3
 800c2de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c2e2:	4b36      	ldr	r3, [pc, #216]	@ (800c3bc <UART_SetConfig+0x2d4>)
 800c2e4:	fba3 2302 	umull	r2, r3, r3, r2
 800c2e8:	095b      	lsrs	r3, r3, #5
 800c2ea:	005b      	lsls	r3, r3, #1
 800c2ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c2f0:	441c      	add	r4, r3
 800c2f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c304:	4642      	mov	r2, r8
 800c306:	464b      	mov	r3, r9
 800c308:	1891      	adds	r1, r2, r2
 800c30a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c30c:	415b      	adcs	r3, r3
 800c30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c314:	4641      	mov	r1, r8
 800c316:	1851      	adds	r1, r2, r1
 800c318:	6339      	str	r1, [r7, #48]	@ 0x30
 800c31a:	4649      	mov	r1, r9
 800c31c:	414b      	adcs	r3, r1
 800c31e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	f04f 0300 	mov.w	r3, #0
 800c328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c32c:	4659      	mov	r1, fp
 800c32e:	00cb      	lsls	r3, r1, #3
 800c330:	4651      	mov	r1, sl
 800c332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c336:	4651      	mov	r1, sl
 800c338:	00ca      	lsls	r2, r1, #3
 800c33a:	4610      	mov	r0, r2
 800c33c:	4619      	mov	r1, r3
 800c33e:	4603      	mov	r3, r0
 800c340:	4642      	mov	r2, r8
 800c342:	189b      	adds	r3, r3, r2
 800c344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c348:	464b      	mov	r3, r9
 800c34a:	460a      	mov	r2, r1
 800c34c:	eb42 0303 	adc.w	r3, r2, r3
 800c350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c360:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c368:	460b      	mov	r3, r1
 800c36a:	18db      	adds	r3, r3, r3
 800c36c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c36e:	4613      	mov	r3, r2
 800c370:	eb42 0303 	adc.w	r3, r2, r3
 800c374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c37a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c37e:	f7f4 fde1 	bl	8000f44 <__aeabi_uldivmod>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	4b0d      	ldr	r3, [pc, #52]	@ (800c3bc <UART_SetConfig+0x2d4>)
 800c388:	fba3 1302 	umull	r1, r3, r3, r2
 800c38c:	095b      	lsrs	r3, r3, #5
 800c38e:	2164      	movs	r1, #100	@ 0x64
 800c390:	fb01 f303 	mul.w	r3, r1, r3
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	3332      	adds	r3, #50	@ 0x32
 800c39a:	4a08      	ldr	r2, [pc, #32]	@ (800c3bc <UART_SetConfig+0x2d4>)
 800c39c:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a0:	095b      	lsrs	r3, r3, #5
 800c3a2:	f003 0207 	and.w	r2, r3, #7
 800c3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4422      	add	r2, r4
 800c3ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3b0:	e106      	b.n	800c5c0 <UART_SetConfig+0x4d8>
 800c3b2:	bf00      	nop
 800c3b4:	40011000 	.word	0x40011000
 800c3b8:	40011400 	.word	0x40011400
 800c3bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c3ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c3ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c3d2:	4642      	mov	r2, r8
 800c3d4:	464b      	mov	r3, r9
 800c3d6:	1891      	adds	r1, r2, r2
 800c3d8:	6239      	str	r1, [r7, #32]
 800c3da:	415b      	adcs	r3, r3
 800c3dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	1854      	adds	r4, r2, r1
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	eb43 0501 	adc.w	r5, r3, r1
 800c3ec:	f04f 0200 	mov.w	r2, #0
 800c3f0:	f04f 0300 	mov.w	r3, #0
 800c3f4:	00eb      	lsls	r3, r5, #3
 800c3f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3fa:	00e2      	lsls	r2, r4, #3
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	461d      	mov	r5, r3
 800c400:	4643      	mov	r3, r8
 800c402:	18e3      	adds	r3, r4, r3
 800c404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c408:	464b      	mov	r3, r9
 800c40a:	eb45 0303 	adc.w	r3, r5, r3
 800c40e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c41e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c42e:	4629      	mov	r1, r5
 800c430:	008b      	lsls	r3, r1, #2
 800c432:	4621      	mov	r1, r4
 800c434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c438:	4621      	mov	r1, r4
 800c43a:	008a      	lsls	r2, r1, #2
 800c43c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c440:	f7f4 fd80 	bl	8000f44 <__aeabi_uldivmod>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4b60      	ldr	r3, [pc, #384]	@ (800c5cc <UART_SetConfig+0x4e4>)
 800c44a:	fba3 2302 	umull	r2, r3, r3, r2
 800c44e:	095b      	lsrs	r3, r3, #5
 800c450:	011c      	lsls	r4, r3, #4
 800c452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c456:	2200      	movs	r2, #0
 800c458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c45c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c464:	4642      	mov	r2, r8
 800c466:	464b      	mov	r3, r9
 800c468:	1891      	adds	r1, r2, r2
 800c46a:	61b9      	str	r1, [r7, #24]
 800c46c:	415b      	adcs	r3, r3
 800c46e:	61fb      	str	r3, [r7, #28]
 800c470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c474:	4641      	mov	r1, r8
 800c476:	1851      	adds	r1, r2, r1
 800c478:	6139      	str	r1, [r7, #16]
 800c47a:	4649      	mov	r1, r9
 800c47c:	414b      	adcs	r3, r1
 800c47e:	617b      	str	r3, [r7, #20]
 800c480:	f04f 0200 	mov.w	r2, #0
 800c484:	f04f 0300 	mov.w	r3, #0
 800c488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c48c:	4659      	mov	r1, fp
 800c48e:	00cb      	lsls	r3, r1, #3
 800c490:	4651      	mov	r1, sl
 800c492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c496:	4651      	mov	r1, sl
 800c498:	00ca      	lsls	r2, r1, #3
 800c49a:	4610      	mov	r0, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4642      	mov	r2, r8
 800c4a2:	189b      	adds	r3, r3, r2
 800c4a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4a8:	464b      	mov	r3, r9
 800c4aa:	460a      	mov	r2, r1
 800c4ac:	eb42 0303 	adc.w	r3, r2, r3
 800c4b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c4c0:	f04f 0200 	mov.w	r2, #0
 800c4c4:	f04f 0300 	mov.w	r3, #0
 800c4c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	008b      	lsls	r3, r1, #2
 800c4d0:	4641      	mov	r1, r8
 800c4d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4d6:	4641      	mov	r1, r8
 800c4d8:	008a      	lsls	r2, r1, #2
 800c4da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c4de:	f7f4 fd31 	bl	8000f44 <__aeabi_uldivmod>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4b38      	ldr	r3, [pc, #224]	@ (800c5cc <UART_SetConfig+0x4e4>)
 800c4ea:	fba3 2301 	umull	r2, r3, r3, r1
 800c4ee:	095b      	lsrs	r3, r3, #5
 800c4f0:	2264      	movs	r2, #100	@ 0x64
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
 800c4f6:	1acb      	subs	r3, r1, r3
 800c4f8:	011b      	lsls	r3, r3, #4
 800c4fa:	3332      	adds	r3, #50	@ 0x32
 800c4fc:	4a33      	ldr	r2, [pc, #204]	@ (800c5cc <UART_SetConfig+0x4e4>)
 800c4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c502:	095b      	lsrs	r3, r3, #5
 800c504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c508:	441c      	add	r4, r3
 800c50a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c50e:	2200      	movs	r2, #0
 800c510:	673b      	str	r3, [r7, #112]	@ 0x70
 800c512:	677a      	str	r2, [r7, #116]	@ 0x74
 800c514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c518:	4642      	mov	r2, r8
 800c51a:	464b      	mov	r3, r9
 800c51c:	1891      	adds	r1, r2, r2
 800c51e:	60b9      	str	r1, [r7, #8]
 800c520:	415b      	adcs	r3, r3
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c528:	4641      	mov	r1, r8
 800c52a:	1851      	adds	r1, r2, r1
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	4649      	mov	r1, r9
 800c530:	414b      	adcs	r3, r1
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	f04f 0200 	mov.w	r2, #0
 800c538:	f04f 0300 	mov.w	r3, #0
 800c53c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c540:	4659      	mov	r1, fp
 800c542:	00cb      	lsls	r3, r1, #3
 800c544:	4651      	mov	r1, sl
 800c546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c54a:	4651      	mov	r1, sl
 800c54c:	00ca      	lsls	r2, r1, #3
 800c54e:	4610      	mov	r0, r2
 800c550:	4619      	mov	r1, r3
 800c552:	4603      	mov	r3, r0
 800c554:	4642      	mov	r2, r8
 800c556:	189b      	adds	r3, r3, r2
 800c558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c55a:	464b      	mov	r3, r9
 800c55c:	460a      	mov	r2, r1
 800c55e:	eb42 0303 	adc.w	r3, r2, r3
 800c562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c56e:	667a      	str	r2, [r7, #100]	@ 0x64
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c57c:	4649      	mov	r1, r9
 800c57e:	008b      	lsls	r3, r1, #2
 800c580:	4641      	mov	r1, r8
 800c582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c586:	4641      	mov	r1, r8
 800c588:	008a      	lsls	r2, r1, #2
 800c58a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c58e:	f7f4 fcd9 	bl	8000f44 <__aeabi_uldivmod>
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <UART_SetConfig+0x4e4>)
 800c598:	fba3 1302 	umull	r1, r3, r3, r2
 800c59c:	095b      	lsrs	r3, r3, #5
 800c59e:	2164      	movs	r1, #100	@ 0x64
 800c5a0:	fb01 f303 	mul.w	r3, r1, r3
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	011b      	lsls	r3, r3, #4
 800c5a8:	3332      	adds	r3, #50	@ 0x32
 800c5aa:	4a08      	ldr	r2, [pc, #32]	@ (800c5cc <UART_SetConfig+0x4e4>)
 800c5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b0:	095b      	lsrs	r3, r3, #5
 800c5b2:	f003 020f 	and.w	r2, r3, #15
 800c5b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4422      	add	r2, r4
 800c5be:	609a      	str	r2, [r3, #8]
}
 800c5c0:	bf00      	nop
 800c5c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5cc:	51eb851f 	.word	0x51eb851f

0800c5d0 <__cvt>:
 800c5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d4:	ec57 6b10 	vmov	r6, r7, d0
 800c5d8:	2f00      	cmp	r7, #0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	4619      	mov	r1, r3
 800c5de:	463b      	mov	r3, r7
 800c5e0:	bfbb      	ittet	lt
 800c5e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c5e6:	461f      	movlt	r7, r3
 800c5e8:	2300      	movge	r3, #0
 800c5ea:	232d      	movlt	r3, #45	@ 0x2d
 800c5ec:	700b      	strb	r3, [r1, #0]
 800c5ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c5f4:	4691      	mov	r9, r2
 800c5f6:	f023 0820 	bic.w	r8, r3, #32
 800c5fa:	bfbc      	itt	lt
 800c5fc:	4632      	movlt	r2, r6
 800c5fe:	4616      	movlt	r6, r2
 800c600:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c604:	d005      	beq.n	800c612 <__cvt+0x42>
 800c606:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c60a:	d100      	bne.n	800c60e <__cvt+0x3e>
 800c60c:	3401      	adds	r4, #1
 800c60e:	2102      	movs	r1, #2
 800c610:	e000      	b.n	800c614 <__cvt+0x44>
 800c612:	2103      	movs	r1, #3
 800c614:	ab03      	add	r3, sp, #12
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	ab02      	add	r3, sp, #8
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	ec47 6b10 	vmov	d0, r6, r7
 800c620:	4653      	mov	r3, sl
 800c622:	4622      	mov	r2, r4
 800c624:	f000 fe78 	bl	800d318 <_dtoa_r>
 800c628:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c62c:	4605      	mov	r5, r0
 800c62e:	d119      	bne.n	800c664 <__cvt+0x94>
 800c630:	f019 0f01 	tst.w	r9, #1
 800c634:	d00e      	beq.n	800c654 <__cvt+0x84>
 800c636:	eb00 0904 	add.w	r9, r0, r4
 800c63a:	2200      	movs	r2, #0
 800c63c:	2300      	movs	r3, #0
 800c63e:	4630      	mov	r0, r6
 800c640:	4639      	mov	r1, r7
 800c642:	f7f4 fa61 	bl	8000b08 <__aeabi_dcmpeq>
 800c646:	b108      	cbz	r0, 800c64c <__cvt+0x7c>
 800c648:	f8cd 900c 	str.w	r9, [sp, #12]
 800c64c:	2230      	movs	r2, #48	@ 0x30
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	454b      	cmp	r3, r9
 800c652:	d31e      	bcc.n	800c692 <__cvt+0xc2>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c658:	1b5b      	subs	r3, r3, r5
 800c65a:	4628      	mov	r0, r5
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	b004      	add	sp, #16
 800c660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c664:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c668:	eb00 0904 	add.w	r9, r0, r4
 800c66c:	d1e5      	bne.n	800c63a <__cvt+0x6a>
 800c66e:	7803      	ldrb	r3, [r0, #0]
 800c670:	2b30      	cmp	r3, #48	@ 0x30
 800c672:	d10a      	bne.n	800c68a <__cvt+0xba>
 800c674:	2200      	movs	r2, #0
 800c676:	2300      	movs	r3, #0
 800c678:	4630      	mov	r0, r6
 800c67a:	4639      	mov	r1, r7
 800c67c:	f7f4 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 800c680:	b918      	cbnz	r0, 800c68a <__cvt+0xba>
 800c682:	f1c4 0401 	rsb	r4, r4, #1
 800c686:	f8ca 4000 	str.w	r4, [sl]
 800c68a:	f8da 3000 	ldr.w	r3, [sl]
 800c68e:	4499      	add	r9, r3
 800c690:	e7d3      	b.n	800c63a <__cvt+0x6a>
 800c692:	1c59      	adds	r1, r3, #1
 800c694:	9103      	str	r1, [sp, #12]
 800c696:	701a      	strb	r2, [r3, #0]
 800c698:	e7d9      	b.n	800c64e <__cvt+0x7e>

0800c69a <__exponent>:
 800c69a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c69c:	2900      	cmp	r1, #0
 800c69e:	bfba      	itte	lt
 800c6a0:	4249      	neglt	r1, r1
 800c6a2:	232d      	movlt	r3, #45	@ 0x2d
 800c6a4:	232b      	movge	r3, #43	@ 0x2b
 800c6a6:	2909      	cmp	r1, #9
 800c6a8:	7002      	strb	r2, [r0, #0]
 800c6aa:	7043      	strb	r3, [r0, #1]
 800c6ac:	dd29      	ble.n	800c702 <__exponent+0x68>
 800c6ae:	f10d 0307 	add.w	r3, sp, #7
 800c6b2:	461d      	mov	r5, r3
 800c6b4:	270a      	movs	r7, #10
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800c6bc:	fb07 1416 	mls	r4, r7, r6, r1
 800c6c0:	3430      	adds	r4, #48	@ 0x30
 800c6c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	2c63      	cmp	r4, #99	@ 0x63
 800c6ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	dcf1      	bgt.n	800c6b6 <__exponent+0x1c>
 800c6d2:	3130      	adds	r1, #48	@ 0x30
 800c6d4:	1e94      	subs	r4, r2, #2
 800c6d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6da:	1c41      	adds	r1, r0, #1
 800c6dc:	4623      	mov	r3, r4
 800c6de:	42ab      	cmp	r3, r5
 800c6e0:	d30a      	bcc.n	800c6f8 <__exponent+0x5e>
 800c6e2:	f10d 0309 	add.w	r3, sp, #9
 800c6e6:	1a9b      	subs	r3, r3, r2
 800c6e8:	42ac      	cmp	r4, r5
 800c6ea:	bf88      	it	hi
 800c6ec:	2300      	movhi	r3, #0
 800c6ee:	3302      	adds	r3, #2
 800c6f0:	4403      	add	r3, r0
 800c6f2:	1a18      	subs	r0, r3, r0
 800c6f4:	b003      	add	sp, #12
 800c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c700:	e7ed      	b.n	800c6de <__exponent+0x44>
 800c702:	2330      	movs	r3, #48	@ 0x30
 800c704:	3130      	adds	r1, #48	@ 0x30
 800c706:	7083      	strb	r3, [r0, #2]
 800c708:	70c1      	strb	r1, [r0, #3]
 800c70a:	1d03      	adds	r3, r0, #4
 800c70c:	e7f1      	b.n	800c6f2 <__exponent+0x58>
	...

0800c710 <_printf_float>:
 800c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	b08d      	sub	sp, #52	@ 0x34
 800c716:	460c      	mov	r4, r1
 800c718:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c71c:	4616      	mov	r6, r2
 800c71e:	461f      	mov	r7, r3
 800c720:	4605      	mov	r5, r0
 800c722:	f000 fceb 	bl	800d0fc <_localeconv_r>
 800c726:	6803      	ldr	r3, [r0, #0]
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f3 fdc0 	bl	80002b0 <strlen>
 800c730:	2300      	movs	r3, #0
 800c732:	930a      	str	r3, [sp, #40]	@ 0x28
 800c734:	f8d8 3000 	ldr.w	r3, [r8]
 800c738:	9005      	str	r0, [sp, #20]
 800c73a:	3307      	adds	r3, #7
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	f103 0208 	add.w	r2, r3, #8
 800c744:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c748:	f8d4 b000 	ldr.w	fp, [r4]
 800c74c:	f8c8 2000 	str.w	r2, [r8]
 800c750:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c754:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c758:	9307      	str	r3, [sp, #28]
 800c75a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c75e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c766:	4b9c      	ldr	r3, [pc, #624]	@ (800c9d8 <_printf_float+0x2c8>)
 800c768:	f04f 32ff 	mov.w	r2, #4294967295
 800c76c:	f7f4 f9fe 	bl	8000b6c <__aeabi_dcmpun>
 800c770:	bb70      	cbnz	r0, 800c7d0 <_printf_float+0xc0>
 800c772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c776:	4b98      	ldr	r3, [pc, #608]	@ (800c9d8 <_printf_float+0x2c8>)
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	f7f4 f9d8 	bl	8000b30 <__aeabi_dcmple>
 800c780:	bb30      	cbnz	r0, 800c7d0 <_printf_float+0xc0>
 800c782:	2200      	movs	r2, #0
 800c784:	2300      	movs	r3, #0
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f4 f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800c78e:	b110      	cbz	r0, 800c796 <_printf_float+0x86>
 800c790:	232d      	movs	r3, #45	@ 0x2d
 800c792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c796:	4a91      	ldr	r2, [pc, #580]	@ (800c9dc <_printf_float+0x2cc>)
 800c798:	4b91      	ldr	r3, [pc, #580]	@ (800c9e0 <_printf_float+0x2d0>)
 800c79a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c79e:	bf94      	ite	ls
 800c7a0:	4690      	movls	r8, r2
 800c7a2:	4698      	movhi	r8, r3
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	f02b 0304 	bic.w	r3, fp, #4
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	f04f 0900 	mov.w	r9, #0
 800c7b2:	9700      	str	r7, [sp, #0]
 800c7b4:	4633      	mov	r3, r6
 800c7b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f000 f9d2 	bl	800cb64 <_printf_common>
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	f040 808d 	bne.w	800c8e0 <_printf_float+0x1d0>
 800c7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ca:	b00d      	add	sp, #52	@ 0x34
 800c7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d0:	4642      	mov	r2, r8
 800c7d2:	464b      	mov	r3, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f4 f9c8 	bl	8000b6c <__aeabi_dcmpun>
 800c7dc:	b140      	cbz	r0, 800c7f0 <_printf_float+0xe0>
 800c7de:	464b      	mov	r3, r9
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bfbc      	itt	lt
 800c7e4:	232d      	movlt	r3, #45	@ 0x2d
 800c7e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7ea:	4a7e      	ldr	r2, [pc, #504]	@ (800c9e4 <_printf_float+0x2d4>)
 800c7ec:	4b7e      	ldr	r3, [pc, #504]	@ (800c9e8 <_printf_float+0x2d8>)
 800c7ee:	e7d4      	b.n	800c79a <_printf_float+0x8a>
 800c7f0:	6863      	ldr	r3, [r4, #4]
 800c7f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c7f6:	9206      	str	r2, [sp, #24]
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	d13b      	bne.n	800c874 <_printf_float+0x164>
 800c7fc:	2306      	movs	r3, #6
 800c7fe:	6063      	str	r3, [r4, #4]
 800c800:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c804:	2300      	movs	r3, #0
 800c806:	6022      	str	r2, [r4, #0]
 800c808:	9303      	str	r3, [sp, #12]
 800c80a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c80c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c810:	ab09      	add	r3, sp, #36	@ 0x24
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	6861      	ldr	r1, [r4, #4]
 800c816:	ec49 8b10 	vmov	d0, r8, r9
 800c81a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c81e:	4628      	mov	r0, r5
 800c820:	f7ff fed6 	bl	800c5d0 <__cvt>
 800c824:	9b06      	ldr	r3, [sp, #24]
 800c826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c828:	2b47      	cmp	r3, #71	@ 0x47
 800c82a:	4680      	mov	r8, r0
 800c82c:	d129      	bne.n	800c882 <_printf_float+0x172>
 800c82e:	1cc8      	adds	r0, r1, #3
 800c830:	db02      	blt.n	800c838 <_printf_float+0x128>
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	4299      	cmp	r1, r3
 800c836:	dd41      	ble.n	800c8bc <_printf_float+0x1ac>
 800c838:	f1aa 0a02 	sub.w	sl, sl, #2
 800c83c:	fa5f fa8a 	uxtb.w	sl, sl
 800c840:	3901      	subs	r1, #1
 800c842:	4652      	mov	r2, sl
 800c844:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c848:	9109      	str	r1, [sp, #36]	@ 0x24
 800c84a:	f7ff ff26 	bl	800c69a <__exponent>
 800c84e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c850:	1813      	adds	r3, r2, r0
 800c852:	2a01      	cmp	r2, #1
 800c854:	4681      	mov	r9, r0
 800c856:	6123      	str	r3, [r4, #16]
 800c858:	dc02      	bgt.n	800c860 <_printf_float+0x150>
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	07d2      	lsls	r2, r2, #31
 800c85e:	d501      	bpl.n	800c864 <_printf_float+0x154>
 800c860:	3301      	adds	r3, #1
 800c862:	6123      	str	r3, [r4, #16]
 800c864:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0a2      	beq.n	800c7b2 <_printf_float+0xa2>
 800c86c:	232d      	movs	r3, #45	@ 0x2d
 800c86e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c872:	e79e      	b.n	800c7b2 <_printf_float+0xa2>
 800c874:	9a06      	ldr	r2, [sp, #24]
 800c876:	2a47      	cmp	r2, #71	@ 0x47
 800c878:	d1c2      	bne.n	800c800 <_printf_float+0xf0>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1c0      	bne.n	800c800 <_printf_float+0xf0>
 800c87e:	2301      	movs	r3, #1
 800c880:	e7bd      	b.n	800c7fe <_printf_float+0xee>
 800c882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c886:	d9db      	bls.n	800c840 <_printf_float+0x130>
 800c888:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c88c:	d118      	bne.n	800c8c0 <_printf_float+0x1b0>
 800c88e:	2900      	cmp	r1, #0
 800c890:	6863      	ldr	r3, [r4, #4]
 800c892:	dd0b      	ble.n	800c8ac <_printf_float+0x19c>
 800c894:	6121      	str	r1, [r4, #16]
 800c896:	b913      	cbnz	r3, 800c89e <_printf_float+0x18e>
 800c898:	6822      	ldr	r2, [r4, #0]
 800c89a:	07d0      	lsls	r0, r2, #31
 800c89c:	d502      	bpl.n	800c8a4 <_printf_float+0x194>
 800c89e:	3301      	adds	r3, #1
 800c8a0:	440b      	add	r3, r1
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c8a6:	f04f 0900 	mov.w	r9, #0
 800c8aa:	e7db      	b.n	800c864 <_printf_float+0x154>
 800c8ac:	b913      	cbnz	r3, 800c8b4 <_printf_float+0x1a4>
 800c8ae:	6822      	ldr	r2, [r4, #0]
 800c8b0:	07d2      	lsls	r2, r2, #31
 800c8b2:	d501      	bpl.n	800c8b8 <_printf_float+0x1a8>
 800c8b4:	3302      	adds	r3, #2
 800c8b6:	e7f4      	b.n	800c8a2 <_printf_float+0x192>
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e7f2      	b.n	800c8a2 <_printf_float+0x192>
 800c8bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c8c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	db05      	blt.n	800c8d2 <_printf_float+0x1c2>
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	6121      	str	r1, [r4, #16]
 800c8ca:	07d8      	lsls	r0, r3, #31
 800c8cc:	d5ea      	bpl.n	800c8a4 <_printf_float+0x194>
 800c8ce:	1c4b      	adds	r3, r1, #1
 800c8d0:	e7e7      	b.n	800c8a2 <_printf_float+0x192>
 800c8d2:	2900      	cmp	r1, #0
 800c8d4:	bfd4      	ite	le
 800c8d6:	f1c1 0202 	rsble	r2, r1, #2
 800c8da:	2201      	movgt	r2, #1
 800c8dc:	4413      	add	r3, r2
 800c8de:	e7e0      	b.n	800c8a2 <_printf_float+0x192>
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	055a      	lsls	r2, r3, #21
 800c8e4:	d407      	bmi.n	800c8f6 <_printf_float+0x1e6>
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	4642      	mov	r2, r8
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d12b      	bne.n	800c94c <_printf_float+0x23c>
 800c8f4:	e767      	b.n	800c7c6 <_printf_float+0xb6>
 800c8f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8fa:	f240 80dd 	bls.w	800cab8 <_printf_float+0x3a8>
 800c8fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c902:	2200      	movs	r2, #0
 800c904:	2300      	movs	r3, #0
 800c906:	f7f4 f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d033      	beq.n	800c976 <_printf_float+0x266>
 800c90e:	4a37      	ldr	r2, [pc, #220]	@ (800c9ec <_printf_float+0x2dc>)
 800c910:	2301      	movs	r3, #1
 800c912:	4631      	mov	r1, r6
 800c914:	4628      	mov	r0, r5
 800c916:	47b8      	blx	r7
 800c918:	3001      	adds	r0, #1
 800c91a:	f43f af54 	beq.w	800c7c6 <_printf_float+0xb6>
 800c91e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c922:	4543      	cmp	r3, r8
 800c924:	db02      	blt.n	800c92c <_printf_float+0x21c>
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	07d8      	lsls	r0, r3, #31
 800c92a:	d50f      	bpl.n	800c94c <_printf_float+0x23c>
 800c92c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c930:	4631      	mov	r1, r6
 800c932:	4628      	mov	r0, r5
 800c934:	47b8      	blx	r7
 800c936:	3001      	adds	r0, #1
 800c938:	f43f af45 	beq.w	800c7c6 <_printf_float+0xb6>
 800c93c:	f04f 0900 	mov.w	r9, #0
 800c940:	f108 38ff 	add.w	r8, r8, #4294967295
 800c944:	f104 0a1a 	add.w	sl, r4, #26
 800c948:	45c8      	cmp	r8, r9
 800c94a:	dc09      	bgt.n	800c960 <_printf_float+0x250>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	079b      	lsls	r3, r3, #30
 800c950:	f100 8103 	bmi.w	800cb5a <_printf_float+0x44a>
 800c954:	68e0      	ldr	r0, [r4, #12]
 800c956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c958:	4298      	cmp	r0, r3
 800c95a:	bfb8      	it	lt
 800c95c:	4618      	movlt	r0, r3
 800c95e:	e734      	b.n	800c7ca <_printf_float+0xba>
 800c960:	2301      	movs	r3, #1
 800c962:	4652      	mov	r2, sl
 800c964:	4631      	mov	r1, r6
 800c966:	4628      	mov	r0, r5
 800c968:	47b8      	blx	r7
 800c96a:	3001      	adds	r0, #1
 800c96c:	f43f af2b 	beq.w	800c7c6 <_printf_float+0xb6>
 800c970:	f109 0901 	add.w	r9, r9, #1
 800c974:	e7e8      	b.n	800c948 <_printf_float+0x238>
 800c976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dc39      	bgt.n	800c9f0 <_printf_float+0x2e0>
 800c97c:	4a1b      	ldr	r2, [pc, #108]	@ (800c9ec <_printf_float+0x2dc>)
 800c97e:	2301      	movs	r3, #1
 800c980:	4631      	mov	r1, r6
 800c982:	4628      	mov	r0, r5
 800c984:	47b8      	blx	r7
 800c986:	3001      	adds	r0, #1
 800c988:	f43f af1d 	beq.w	800c7c6 <_printf_float+0xb6>
 800c98c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c990:	ea59 0303 	orrs.w	r3, r9, r3
 800c994:	d102      	bne.n	800c99c <_printf_float+0x28c>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	07d9      	lsls	r1, r3, #31
 800c99a:	d5d7      	bpl.n	800c94c <_printf_float+0x23c>
 800c99c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b8      	blx	r7
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	f43f af0d 	beq.w	800c7c6 <_printf_float+0xb6>
 800c9ac:	f04f 0a00 	mov.w	sl, #0
 800c9b0:	f104 0b1a 	add.w	fp, r4, #26
 800c9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b6:	425b      	negs	r3, r3
 800c9b8:	4553      	cmp	r3, sl
 800c9ba:	dc01      	bgt.n	800c9c0 <_printf_float+0x2b0>
 800c9bc:	464b      	mov	r3, r9
 800c9be:	e793      	b.n	800c8e8 <_printf_float+0x1d8>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	465a      	mov	r2, fp
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	47b8      	blx	r7
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	f43f aefb 	beq.w	800c7c6 <_printf_float+0xb6>
 800c9d0:	f10a 0a01 	add.w	sl, sl, #1
 800c9d4:	e7ee      	b.n	800c9b4 <_printf_float+0x2a4>
 800c9d6:	bf00      	nop
 800c9d8:	7fefffff 	.word	0x7fefffff
 800c9dc:	08011a60 	.word	0x08011a60
 800c9e0:	08011a64 	.word	0x08011a64
 800c9e4:	08011a68 	.word	0x08011a68
 800c9e8:	08011a6c 	.word	0x08011a6c
 800c9ec:	08011a70 	.word	0x08011a70
 800c9f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9f6:	4553      	cmp	r3, sl
 800c9f8:	bfa8      	it	ge
 800c9fa:	4653      	movge	r3, sl
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	4699      	mov	r9, r3
 800ca00:	dc36      	bgt.n	800ca70 <_printf_float+0x360>
 800ca02:	f04f 0b00 	mov.w	fp, #0
 800ca06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca0a:	f104 021a 	add.w	r2, r4, #26
 800ca0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca10:	9306      	str	r3, [sp, #24]
 800ca12:	eba3 0309 	sub.w	r3, r3, r9
 800ca16:	455b      	cmp	r3, fp
 800ca18:	dc31      	bgt.n	800ca7e <_printf_float+0x36e>
 800ca1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca1c:	459a      	cmp	sl, r3
 800ca1e:	dc3a      	bgt.n	800ca96 <_printf_float+0x386>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	07da      	lsls	r2, r3, #31
 800ca24:	d437      	bmi.n	800ca96 <_printf_float+0x386>
 800ca26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca28:	ebaa 0903 	sub.w	r9, sl, r3
 800ca2c:	9b06      	ldr	r3, [sp, #24]
 800ca2e:	ebaa 0303 	sub.w	r3, sl, r3
 800ca32:	4599      	cmp	r9, r3
 800ca34:	bfa8      	it	ge
 800ca36:	4699      	movge	r9, r3
 800ca38:	f1b9 0f00 	cmp.w	r9, #0
 800ca3c:	dc33      	bgt.n	800caa6 <_printf_float+0x396>
 800ca3e:	f04f 0800 	mov.w	r8, #0
 800ca42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca46:	f104 0b1a 	add.w	fp, r4, #26
 800ca4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4c:	ebaa 0303 	sub.w	r3, sl, r3
 800ca50:	eba3 0309 	sub.w	r3, r3, r9
 800ca54:	4543      	cmp	r3, r8
 800ca56:	f77f af79 	ble.w	800c94c <_printf_float+0x23c>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	465a      	mov	r2, fp
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b8      	blx	r7
 800ca64:	3001      	adds	r0, #1
 800ca66:	f43f aeae 	beq.w	800c7c6 <_printf_float+0xb6>
 800ca6a:	f108 0801 	add.w	r8, r8, #1
 800ca6e:	e7ec      	b.n	800ca4a <_printf_float+0x33a>
 800ca70:	4642      	mov	r2, r8
 800ca72:	4631      	mov	r1, r6
 800ca74:	4628      	mov	r0, r5
 800ca76:	47b8      	blx	r7
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d1c2      	bne.n	800ca02 <_printf_float+0x2f2>
 800ca7c:	e6a3      	b.n	800c7c6 <_printf_float+0xb6>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4631      	mov	r1, r6
 800ca82:	4628      	mov	r0, r5
 800ca84:	9206      	str	r2, [sp, #24]
 800ca86:	47b8      	blx	r7
 800ca88:	3001      	adds	r0, #1
 800ca8a:	f43f ae9c 	beq.w	800c7c6 <_printf_float+0xb6>
 800ca8e:	9a06      	ldr	r2, [sp, #24]
 800ca90:	f10b 0b01 	add.w	fp, fp, #1
 800ca94:	e7bb      	b.n	800ca0e <_printf_float+0x2fe>
 800ca96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	47b8      	blx	r7
 800caa0:	3001      	adds	r0, #1
 800caa2:	d1c0      	bne.n	800ca26 <_printf_float+0x316>
 800caa4:	e68f      	b.n	800c7c6 <_printf_float+0xb6>
 800caa6:	9a06      	ldr	r2, [sp, #24]
 800caa8:	464b      	mov	r3, r9
 800caaa:	4442      	add	r2, r8
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	d1c3      	bne.n	800ca3e <_printf_float+0x32e>
 800cab6:	e686      	b.n	800c7c6 <_printf_float+0xb6>
 800cab8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cabc:	f1ba 0f01 	cmp.w	sl, #1
 800cac0:	dc01      	bgt.n	800cac6 <_printf_float+0x3b6>
 800cac2:	07db      	lsls	r3, r3, #31
 800cac4:	d536      	bpl.n	800cb34 <_printf_float+0x424>
 800cac6:	2301      	movs	r3, #1
 800cac8:	4642      	mov	r2, r8
 800caca:	4631      	mov	r1, r6
 800cacc:	4628      	mov	r0, r5
 800cace:	47b8      	blx	r7
 800cad0:	3001      	adds	r0, #1
 800cad2:	f43f ae78 	beq.w	800c7c6 <_printf_float+0xb6>
 800cad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cada:	4631      	mov	r1, r6
 800cadc:	4628      	mov	r0, r5
 800cade:	47b8      	blx	r7
 800cae0:	3001      	adds	r0, #1
 800cae2:	f43f ae70 	beq.w	800c7c6 <_printf_float+0xb6>
 800cae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800caea:	2200      	movs	r2, #0
 800caec:	2300      	movs	r3, #0
 800caee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800caf2:	f7f4 f809 	bl	8000b08 <__aeabi_dcmpeq>
 800caf6:	b9c0      	cbnz	r0, 800cb2a <_printf_float+0x41a>
 800caf8:	4653      	mov	r3, sl
 800cafa:	f108 0201 	add.w	r2, r8, #1
 800cafe:	4631      	mov	r1, r6
 800cb00:	4628      	mov	r0, r5
 800cb02:	47b8      	blx	r7
 800cb04:	3001      	adds	r0, #1
 800cb06:	d10c      	bne.n	800cb22 <_printf_float+0x412>
 800cb08:	e65d      	b.n	800c7c6 <_printf_float+0xb6>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	465a      	mov	r2, fp
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4628      	mov	r0, r5
 800cb12:	47b8      	blx	r7
 800cb14:	3001      	adds	r0, #1
 800cb16:	f43f ae56 	beq.w	800c7c6 <_printf_float+0xb6>
 800cb1a:	f108 0801 	add.w	r8, r8, #1
 800cb1e:	45d0      	cmp	r8, sl
 800cb20:	dbf3      	blt.n	800cb0a <_printf_float+0x3fa>
 800cb22:	464b      	mov	r3, r9
 800cb24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cb28:	e6df      	b.n	800c8ea <_printf_float+0x1da>
 800cb2a:	f04f 0800 	mov.w	r8, #0
 800cb2e:	f104 0b1a 	add.w	fp, r4, #26
 800cb32:	e7f4      	b.n	800cb1e <_printf_float+0x40e>
 800cb34:	2301      	movs	r3, #1
 800cb36:	4642      	mov	r2, r8
 800cb38:	e7e1      	b.n	800cafe <_printf_float+0x3ee>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	464a      	mov	r2, r9
 800cb3e:	4631      	mov	r1, r6
 800cb40:	4628      	mov	r0, r5
 800cb42:	47b8      	blx	r7
 800cb44:	3001      	adds	r0, #1
 800cb46:	f43f ae3e 	beq.w	800c7c6 <_printf_float+0xb6>
 800cb4a:	f108 0801 	add.w	r8, r8, #1
 800cb4e:	68e3      	ldr	r3, [r4, #12]
 800cb50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb52:	1a5b      	subs	r3, r3, r1
 800cb54:	4543      	cmp	r3, r8
 800cb56:	dcf0      	bgt.n	800cb3a <_printf_float+0x42a>
 800cb58:	e6fc      	b.n	800c954 <_printf_float+0x244>
 800cb5a:	f04f 0800 	mov.w	r8, #0
 800cb5e:	f104 0919 	add.w	r9, r4, #25
 800cb62:	e7f4      	b.n	800cb4e <_printf_float+0x43e>

0800cb64 <_printf_common>:
 800cb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb68:	4616      	mov	r6, r2
 800cb6a:	4698      	mov	r8, r3
 800cb6c:	688a      	ldr	r2, [r1, #8]
 800cb6e:	690b      	ldr	r3, [r1, #16]
 800cb70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb74:	4293      	cmp	r3, r2
 800cb76:	bfb8      	it	lt
 800cb78:	4613      	movlt	r3, r2
 800cb7a:	6033      	str	r3, [r6, #0]
 800cb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb80:	4607      	mov	r7, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b10a      	cbz	r2, 800cb8a <_printf_common+0x26>
 800cb86:	3301      	adds	r3, #1
 800cb88:	6033      	str	r3, [r6, #0]
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	0699      	lsls	r1, r3, #26
 800cb8e:	bf42      	ittt	mi
 800cb90:	6833      	ldrmi	r3, [r6, #0]
 800cb92:	3302      	addmi	r3, #2
 800cb94:	6033      	strmi	r3, [r6, #0]
 800cb96:	6825      	ldr	r5, [r4, #0]
 800cb98:	f015 0506 	ands.w	r5, r5, #6
 800cb9c:	d106      	bne.n	800cbac <_printf_common+0x48>
 800cb9e:	f104 0a19 	add.w	sl, r4, #25
 800cba2:	68e3      	ldr	r3, [r4, #12]
 800cba4:	6832      	ldr	r2, [r6, #0]
 800cba6:	1a9b      	subs	r3, r3, r2
 800cba8:	42ab      	cmp	r3, r5
 800cbaa:	dc26      	bgt.n	800cbfa <_printf_common+0x96>
 800cbac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	3b00      	subs	r3, #0
 800cbb4:	bf18      	it	ne
 800cbb6:	2301      	movne	r3, #1
 800cbb8:	0692      	lsls	r2, r2, #26
 800cbba:	d42b      	bmi.n	800cc14 <_printf_common+0xb0>
 800cbbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cbc0:	4641      	mov	r1, r8
 800cbc2:	4638      	mov	r0, r7
 800cbc4:	47c8      	blx	r9
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	d01e      	beq.n	800cc08 <_printf_common+0xa4>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	6922      	ldr	r2, [r4, #16]
 800cbce:	f003 0306 	and.w	r3, r3, #6
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	bf02      	ittt	eq
 800cbd6:	68e5      	ldreq	r5, [r4, #12]
 800cbd8:	6833      	ldreq	r3, [r6, #0]
 800cbda:	1aed      	subeq	r5, r5, r3
 800cbdc:	68a3      	ldr	r3, [r4, #8]
 800cbde:	bf0c      	ite	eq
 800cbe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbe4:	2500      	movne	r5, #0
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	bfc4      	itt	gt
 800cbea:	1a9b      	subgt	r3, r3, r2
 800cbec:	18ed      	addgt	r5, r5, r3
 800cbee:	2600      	movs	r6, #0
 800cbf0:	341a      	adds	r4, #26
 800cbf2:	42b5      	cmp	r5, r6
 800cbf4:	d11a      	bne.n	800cc2c <_printf_common+0xc8>
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	e008      	b.n	800cc0c <_printf_common+0xa8>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4652      	mov	r2, sl
 800cbfe:	4641      	mov	r1, r8
 800cc00:	4638      	mov	r0, r7
 800cc02:	47c8      	blx	r9
 800cc04:	3001      	adds	r0, #1
 800cc06:	d103      	bne.n	800cc10 <_printf_common+0xac>
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc10:	3501      	adds	r5, #1
 800cc12:	e7c6      	b.n	800cba2 <_printf_common+0x3e>
 800cc14:	18e1      	adds	r1, r4, r3
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	2030      	movs	r0, #48	@ 0x30
 800cc1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc1e:	4422      	add	r2, r4
 800cc20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc28:	3302      	adds	r3, #2
 800cc2a:	e7c7      	b.n	800cbbc <_printf_common+0x58>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4641      	mov	r1, r8
 800cc32:	4638      	mov	r0, r7
 800cc34:	47c8      	blx	r9
 800cc36:	3001      	adds	r0, #1
 800cc38:	d0e6      	beq.n	800cc08 <_printf_common+0xa4>
 800cc3a:	3601      	adds	r6, #1
 800cc3c:	e7d9      	b.n	800cbf2 <_printf_common+0x8e>
	...

0800cc40 <_printf_i>:
 800cc40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	7e0f      	ldrb	r7, [r1, #24]
 800cc46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc48:	2f78      	cmp	r7, #120	@ 0x78
 800cc4a:	4691      	mov	r9, r2
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	469a      	mov	sl, r3
 800cc52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc56:	d807      	bhi.n	800cc68 <_printf_i+0x28>
 800cc58:	2f62      	cmp	r7, #98	@ 0x62
 800cc5a:	d80a      	bhi.n	800cc72 <_printf_i+0x32>
 800cc5c:	2f00      	cmp	r7, #0
 800cc5e:	f000 80d2 	beq.w	800ce06 <_printf_i+0x1c6>
 800cc62:	2f58      	cmp	r7, #88	@ 0x58
 800cc64:	f000 80b9 	beq.w	800cdda <_printf_i+0x19a>
 800cc68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc70:	e03a      	b.n	800cce8 <_printf_i+0xa8>
 800cc72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc76:	2b15      	cmp	r3, #21
 800cc78:	d8f6      	bhi.n	800cc68 <_printf_i+0x28>
 800cc7a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc80 <_printf_i+0x40>)
 800cc7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc80:	0800ccd9 	.word	0x0800ccd9
 800cc84:	0800cced 	.word	0x0800cced
 800cc88:	0800cc69 	.word	0x0800cc69
 800cc8c:	0800cc69 	.word	0x0800cc69
 800cc90:	0800cc69 	.word	0x0800cc69
 800cc94:	0800cc69 	.word	0x0800cc69
 800cc98:	0800cced 	.word	0x0800cced
 800cc9c:	0800cc69 	.word	0x0800cc69
 800cca0:	0800cc69 	.word	0x0800cc69
 800cca4:	0800cc69 	.word	0x0800cc69
 800cca8:	0800cc69 	.word	0x0800cc69
 800ccac:	0800cded 	.word	0x0800cded
 800ccb0:	0800cd17 	.word	0x0800cd17
 800ccb4:	0800cda7 	.word	0x0800cda7
 800ccb8:	0800cc69 	.word	0x0800cc69
 800ccbc:	0800cc69 	.word	0x0800cc69
 800ccc0:	0800ce0f 	.word	0x0800ce0f
 800ccc4:	0800cc69 	.word	0x0800cc69
 800ccc8:	0800cd17 	.word	0x0800cd17
 800cccc:	0800cc69 	.word	0x0800cc69
 800ccd0:	0800cc69 	.word	0x0800cc69
 800ccd4:	0800cdaf 	.word	0x0800cdaf
 800ccd8:	6833      	ldr	r3, [r6, #0]
 800ccda:	1d1a      	adds	r2, r3, #4
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6032      	str	r2, [r6, #0]
 800cce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cce8:	2301      	movs	r3, #1
 800ccea:	e09d      	b.n	800ce28 <_printf_i+0x1e8>
 800ccec:	6833      	ldr	r3, [r6, #0]
 800ccee:	6820      	ldr	r0, [r4, #0]
 800ccf0:	1d19      	adds	r1, r3, #4
 800ccf2:	6031      	str	r1, [r6, #0]
 800ccf4:	0606      	lsls	r6, r0, #24
 800ccf6:	d501      	bpl.n	800ccfc <_printf_i+0xbc>
 800ccf8:	681d      	ldr	r5, [r3, #0]
 800ccfa:	e003      	b.n	800cd04 <_printf_i+0xc4>
 800ccfc:	0645      	lsls	r5, r0, #25
 800ccfe:	d5fb      	bpl.n	800ccf8 <_printf_i+0xb8>
 800cd00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd04:	2d00      	cmp	r5, #0
 800cd06:	da03      	bge.n	800cd10 <_printf_i+0xd0>
 800cd08:	232d      	movs	r3, #45	@ 0x2d
 800cd0a:	426d      	negs	r5, r5
 800cd0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd10:	4859      	ldr	r0, [pc, #356]	@ (800ce78 <_printf_i+0x238>)
 800cd12:	230a      	movs	r3, #10
 800cd14:	e011      	b.n	800cd3a <_printf_i+0xfa>
 800cd16:	6821      	ldr	r1, [r4, #0]
 800cd18:	6833      	ldr	r3, [r6, #0]
 800cd1a:	0608      	lsls	r0, r1, #24
 800cd1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd20:	d402      	bmi.n	800cd28 <_printf_i+0xe8>
 800cd22:	0649      	lsls	r1, r1, #25
 800cd24:	bf48      	it	mi
 800cd26:	b2ad      	uxthmi	r5, r5
 800cd28:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd2a:	4853      	ldr	r0, [pc, #332]	@ (800ce78 <_printf_i+0x238>)
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	bf14      	ite	ne
 800cd30:	230a      	movne	r3, #10
 800cd32:	2308      	moveq	r3, #8
 800cd34:	2100      	movs	r1, #0
 800cd36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd3a:	6866      	ldr	r6, [r4, #4]
 800cd3c:	60a6      	str	r6, [r4, #8]
 800cd3e:	2e00      	cmp	r6, #0
 800cd40:	bfa2      	ittt	ge
 800cd42:	6821      	ldrge	r1, [r4, #0]
 800cd44:	f021 0104 	bicge.w	r1, r1, #4
 800cd48:	6021      	strge	r1, [r4, #0]
 800cd4a:	b90d      	cbnz	r5, 800cd50 <_printf_i+0x110>
 800cd4c:	2e00      	cmp	r6, #0
 800cd4e:	d04b      	beq.n	800cde8 <_printf_i+0x1a8>
 800cd50:	4616      	mov	r6, r2
 800cd52:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd56:	fb03 5711 	mls	r7, r3, r1, r5
 800cd5a:	5dc7      	ldrb	r7, [r0, r7]
 800cd5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd60:	462f      	mov	r7, r5
 800cd62:	42bb      	cmp	r3, r7
 800cd64:	460d      	mov	r5, r1
 800cd66:	d9f4      	bls.n	800cd52 <_printf_i+0x112>
 800cd68:	2b08      	cmp	r3, #8
 800cd6a:	d10b      	bne.n	800cd84 <_printf_i+0x144>
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	07df      	lsls	r7, r3, #31
 800cd70:	d508      	bpl.n	800cd84 <_printf_i+0x144>
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	6861      	ldr	r1, [r4, #4]
 800cd76:	4299      	cmp	r1, r3
 800cd78:	bfde      	ittt	le
 800cd7a:	2330      	movle	r3, #48	@ 0x30
 800cd7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd80:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd84:	1b92      	subs	r2, r2, r6
 800cd86:	6122      	str	r2, [r4, #16]
 800cd88:	f8cd a000 	str.w	sl, [sp]
 800cd8c:	464b      	mov	r3, r9
 800cd8e:	aa03      	add	r2, sp, #12
 800cd90:	4621      	mov	r1, r4
 800cd92:	4640      	mov	r0, r8
 800cd94:	f7ff fee6 	bl	800cb64 <_printf_common>
 800cd98:	3001      	adds	r0, #1
 800cd9a:	d14a      	bne.n	800ce32 <_printf_i+0x1f2>
 800cd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cda0:	b004      	add	sp, #16
 800cda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	f043 0320 	orr.w	r3, r3, #32
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	4833      	ldr	r0, [pc, #204]	@ (800ce7c <_printf_i+0x23c>)
 800cdb0:	2778      	movs	r7, #120	@ 0x78
 800cdb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	6831      	ldr	r1, [r6, #0]
 800cdba:	061f      	lsls	r7, r3, #24
 800cdbc:	f851 5b04 	ldr.w	r5, [r1], #4
 800cdc0:	d402      	bmi.n	800cdc8 <_printf_i+0x188>
 800cdc2:	065f      	lsls	r7, r3, #25
 800cdc4:	bf48      	it	mi
 800cdc6:	b2ad      	uxthmi	r5, r5
 800cdc8:	6031      	str	r1, [r6, #0]
 800cdca:	07d9      	lsls	r1, r3, #31
 800cdcc:	bf44      	itt	mi
 800cdce:	f043 0320 	orrmi.w	r3, r3, #32
 800cdd2:	6023      	strmi	r3, [r4, #0]
 800cdd4:	b11d      	cbz	r5, 800cdde <_printf_i+0x19e>
 800cdd6:	2310      	movs	r3, #16
 800cdd8:	e7ac      	b.n	800cd34 <_printf_i+0xf4>
 800cdda:	4827      	ldr	r0, [pc, #156]	@ (800ce78 <_printf_i+0x238>)
 800cddc:	e7e9      	b.n	800cdb2 <_printf_i+0x172>
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	f023 0320 	bic.w	r3, r3, #32
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	e7f6      	b.n	800cdd6 <_printf_i+0x196>
 800cde8:	4616      	mov	r6, r2
 800cdea:	e7bd      	b.n	800cd68 <_printf_i+0x128>
 800cdec:	6833      	ldr	r3, [r6, #0]
 800cdee:	6825      	ldr	r5, [r4, #0]
 800cdf0:	6961      	ldr	r1, [r4, #20]
 800cdf2:	1d18      	adds	r0, r3, #4
 800cdf4:	6030      	str	r0, [r6, #0]
 800cdf6:	062e      	lsls	r6, r5, #24
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	d501      	bpl.n	800ce00 <_printf_i+0x1c0>
 800cdfc:	6019      	str	r1, [r3, #0]
 800cdfe:	e002      	b.n	800ce06 <_printf_i+0x1c6>
 800ce00:	0668      	lsls	r0, r5, #25
 800ce02:	d5fb      	bpl.n	800cdfc <_printf_i+0x1bc>
 800ce04:	8019      	strh	r1, [r3, #0]
 800ce06:	2300      	movs	r3, #0
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	4616      	mov	r6, r2
 800ce0c:	e7bc      	b.n	800cd88 <_printf_i+0x148>
 800ce0e:	6833      	ldr	r3, [r6, #0]
 800ce10:	1d1a      	adds	r2, r3, #4
 800ce12:	6032      	str	r2, [r6, #0]
 800ce14:	681e      	ldr	r6, [r3, #0]
 800ce16:	6862      	ldr	r2, [r4, #4]
 800ce18:	2100      	movs	r1, #0
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7f3 f9f8 	bl	8000210 <memchr>
 800ce20:	b108      	cbz	r0, 800ce26 <_printf_i+0x1e6>
 800ce22:	1b80      	subs	r0, r0, r6
 800ce24:	6060      	str	r0, [r4, #4]
 800ce26:	6863      	ldr	r3, [r4, #4]
 800ce28:	6123      	str	r3, [r4, #16]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce30:	e7aa      	b.n	800cd88 <_printf_i+0x148>
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	4632      	mov	r2, r6
 800ce36:	4649      	mov	r1, r9
 800ce38:	4640      	mov	r0, r8
 800ce3a:	47d0      	blx	sl
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d0ad      	beq.n	800cd9c <_printf_i+0x15c>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	079b      	lsls	r3, r3, #30
 800ce44:	d413      	bmi.n	800ce6e <_printf_i+0x22e>
 800ce46:	68e0      	ldr	r0, [r4, #12]
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	4298      	cmp	r0, r3
 800ce4c:	bfb8      	it	lt
 800ce4e:	4618      	movlt	r0, r3
 800ce50:	e7a6      	b.n	800cda0 <_printf_i+0x160>
 800ce52:	2301      	movs	r3, #1
 800ce54:	4632      	mov	r2, r6
 800ce56:	4649      	mov	r1, r9
 800ce58:	4640      	mov	r0, r8
 800ce5a:	47d0      	blx	sl
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	d09d      	beq.n	800cd9c <_printf_i+0x15c>
 800ce60:	3501      	adds	r5, #1
 800ce62:	68e3      	ldr	r3, [r4, #12]
 800ce64:	9903      	ldr	r1, [sp, #12]
 800ce66:	1a5b      	subs	r3, r3, r1
 800ce68:	42ab      	cmp	r3, r5
 800ce6a:	dcf2      	bgt.n	800ce52 <_printf_i+0x212>
 800ce6c:	e7eb      	b.n	800ce46 <_printf_i+0x206>
 800ce6e:	2500      	movs	r5, #0
 800ce70:	f104 0619 	add.w	r6, r4, #25
 800ce74:	e7f5      	b.n	800ce62 <_printf_i+0x222>
 800ce76:	bf00      	nop
 800ce78:	08011a72 	.word	0x08011a72
 800ce7c:	08011a83 	.word	0x08011a83

0800ce80 <std>:
 800ce80:	2300      	movs	r3, #0
 800ce82:	b510      	push	{r4, lr}
 800ce84:	4604      	mov	r4, r0
 800ce86:	e9c0 3300 	strd	r3, r3, [r0]
 800ce8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce8e:	6083      	str	r3, [r0, #8]
 800ce90:	8181      	strh	r1, [r0, #12]
 800ce92:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce94:	81c2      	strh	r2, [r0, #14]
 800ce96:	6183      	str	r3, [r0, #24]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	2208      	movs	r2, #8
 800ce9c:	305c      	adds	r0, #92	@ 0x5c
 800ce9e:	f000 f924 	bl	800d0ea <memset>
 800cea2:	4b0d      	ldr	r3, [pc, #52]	@ (800ced8 <std+0x58>)
 800cea4:	6263      	str	r3, [r4, #36]	@ 0x24
 800cea6:	4b0d      	ldr	r3, [pc, #52]	@ (800cedc <std+0x5c>)
 800cea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cee0 <std+0x60>)
 800ceac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ceae:	4b0d      	ldr	r3, [pc, #52]	@ (800cee4 <std+0x64>)
 800ceb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <std+0x68>)
 800ceb4:	6224      	str	r4, [r4, #32]
 800ceb6:	429c      	cmp	r4, r3
 800ceb8:	d006      	beq.n	800cec8 <std+0x48>
 800ceba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cebe:	4294      	cmp	r4, r2
 800cec0:	d002      	beq.n	800cec8 <std+0x48>
 800cec2:	33d0      	adds	r3, #208	@ 0xd0
 800cec4:	429c      	cmp	r4, r3
 800cec6:	d105      	bne.n	800ced4 <std+0x54>
 800cec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced0:	f000 b988 	b.w	800d1e4 <__retarget_lock_init_recursive>
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	bf00      	nop
 800ced8:	0800d045 	.word	0x0800d045
 800cedc:	0800d067 	.word	0x0800d067
 800cee0:	0800d09f 	.word	0x0800d09f
 800cee4:	0800d0c3 	.word	0x0800d0c3
 800cee8:	20000874 	.word	0x20000874

0800ceec <stdio_exit_handler>:
 800ceec:	4a02      	ldr	r2, [pc, #8]	@ (800cef8 <stdio_exit_handler+0xc>)
 800ceee:	4903      	ldr	r1, [pc, #12]	@ (800cefc <stdio_exit_handler+0x10>)
 800cef0:	4803      	ldr	r0, [pc, #12]	@ (800cf00 <stdio_exit_handler+0x14>)
 800cef2:	f000 b869 	b.w	800cfc8 <_fwalk_sglue>
 800cef6:	bf00      	nop
 800cef8:	2000004c 	.word	0x2000004c
 800cefc:	0800eb5d 	.word	0x0800eb5d
 800cf00:	2000005c 	.word	0x2000005c

0800cf04 <cleanup_stdio>:
 800cf04:	6841      	ldr	r1, [r0, #4]
 800cf06:	4b0c      	ldr	r3, [pc, #48]	@ (800cf38 <cleanup_stdio+0x34>)
 800cf08:	4299      	cmp	r1, r3
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	d001      	beq.n	800cf14 <cleanup_stdio+0x10>
 800cf10:	f001 fe24 	bl	800eb5c <_fflush_r>
 800cf14:	68a1      	ldr	r1, [r4, #8]
 800cf16:	4b09      	ldr	r3, [pc, #36]	@ (800cf3c <cleanup_stdio+0x38>)
 800cf18:	4299      	cmp	r1, r3
 800cf1a:	d002      	beq.n	800cf22 <cleanup_stdio+0x1e>
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f001 fe1d 	bl	800eb5c <_fflush_r>
 800cf22:	68e1      	ldr	r1, [r4, #12]
 800cf24:	4b06      	ldr	r3, [pc, #24]	@ (800cf40 <cleanup_stdio+0x3c>)
 800cf26:	4299      	cmp	r1, r3
 800cf28:	d004      	beq.n	800cf34 <cleanup_stdio+0x30>
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf30:	f001 be14 	b.w	800eb5c <_fflush_r>
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	bf00      	nop
 800cf38:	20000874 	.word	0x20000874
 800cf3c:	200008dc 	.word	0x200008dc
 800cf40:	20000944 	.word	0x20000944

0800cf44 <global_stdio_init.part.0>:
 800cf44:	b510      	push	{r4, lr}
 800cf46:	4b0b      	ldr	r3, [pc, #44]	@ (800cf74 <global_stdio_init.part.0+0x30>)
 800cf48:	4c0b      	ldr	r4, [pc, #44]	@ (800cf78 <global_stdio_init.part.0+0x34>)
 800cf4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf7c <global_stdio_init.part.0+0x38>)
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	4620      	mov	r0, r4
 800cf50:	2200      	movs	r2, #0
 800cf52:	2104      	movs	r1, #4
 800cf54:	f7ff ff94 	bl	800ce80 <std>
 800cf58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	2109      	movs	r1, #9
 800cf60:	f7ff ff8e 	bl	800ce80 <std>
 800cf64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf68:	2202      	movs	r2, #2
 800cf6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf6e:	2112      	movs	r1, #18
 800cf70:	f7ff bf86 	b.w	800ce80 <std>
 800cf74:	200009ac 	.word	0x200009ac
 800cf78:	20000874 	.word	0x20000874
 800cf7c:	0800ceed 	.word	0x0800ceed

0800cf80 <__sfp_lock_acquire>:
 800cf80:	4801      	ldr	r0, [pc, #4]	@ (800cf88 <__sfp_lock_acquire+0x8>)
 800cf82:	f000 b930 	b.w	800d1e6 <__retarget_lock_acquire_recursive>
 800cf86:	bf00      	nop
 800cf88:	200009b5 	.word	0x200009b5

0800cf8c <__sfp_lock_release>:
 800cf8c:	4801      	ldr	r0, [pc, #4]	@ (800cf94 <__sfp_lock_release+0x8>)
 800cf8e:	f000 b92b 	b.w	800d1e8 <__retarget_lock_release_recursive>
 800cf92:	bf00      	nop
 800cf94:	200009b5 	.word	0x200009b5

0800cf98 <__sinit>:
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	f7ff fff0 	bl	800cf80 <__sfp_lock_acquire>
 800cfa0:	6a23      	ldr	r3, [r4, #32]
 800cfa2:	b11b      	cbz	r3, 800cfac <__sinit+0x14>
 800cfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa8:	f7ff bff0 	b.w	800cf8c <__sfp_lock_release>
 800cfac:	4b04      	ldr	r3, [pc, #16]	@ (800cfc0 <__sinit+0x28>)
 800cfae:	6223      	str	r3, [r4, #32]
 800cfb0:	4b04      	ldr	r3, [pc, #16]	@ (800cfc4 <__sinit+0x2c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1f5      	bne.n	800cfa4 <__sinit+0xc>
 800cfb8:	f7ff ffc4 	bl	800cf44 <global_stdio_init.part.0>
 800cfbc:	e7f2      	b.n	800cfa4 <__sinit+0xc>
 800cfbe:	bf00      	nop
 800cfc0:	0800cf05 	.word	0x0800cf05
 800cfc4:	200009ac 	.word	0x200009ac

0800cfc8 <_fwalk_sglue>:
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	4607      	mov	r7, r0
 800cfce:	4688      	mov	r8, r1
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	2600      	movs	r6, #0
 800cfd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfd8:	f1b9 0901 	subs.w	r9, r9, #1
 800cfdc:	d505      	bpl.n	800cfea <_fwalk_sglue+0x22>
 800cfde:	6824      	ldr	r4, [r4, #0]
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	d1f7      	bne.n	800cfd4 <_fwalk_sglue+0xc>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d907      	bls.n	800d000 <_fwalk_sglue+0x38>
 800cff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cff4:	3301      	adds	r3, #1
 800cff6:	d003      	beq.n	800d000 <_fwalk_sglue+0x38>
 800cff8:	4629      	mov	r1, r5
 800cffa:	4638      	mov	r0, r7
 800cffc:	47c0      	blx	r8
 800cffe:	4306      	orrs	r6, r0
 800d000:	3568      	adds	r5, #104	@ 0x68
 800d002:	e7e9      	b.n	800cfd8 <_fwalk_sglue+0x10>

0800d004 <siprintf>:
 800d004:	b40e      	push	{r1, r2, r3}
 800d006:	b500      	push	{lr}
 800d008:	b09c      	sub	sp, #112	@ 0x70
 800d00a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d00c:	9002      	str	r0, [sp, #8]
 800d00e:	9006      	str	r0, [sp, #24]
 800d010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d014:	4809      	ldr	r0, [pc, #36]	@ (800d03c <siprintf+0x38>)
 800d016:	9107      	str	r1, [sp, #28]
 800d018:	9104      	str	r1, [sp, #16]
 800d01a:	4909      	ldr	r1, [pc, #36]	@ (800d040 <siprintf+0x3c>)
 800d01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d020:	9105      	str	r1, [sp, #20]
 800d022:	6800      	ldr	r0, [r0, #0]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	a902      	add	r1, sp, #8
 800d028:	f001 fc18 	bl	800e85c <_svfiprintf_r>
 800d02c:	9b02      	ldr	r3, [sp, #8]
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	b01c      	add	sp, #112	@ 0x70
 800d034:	f85d eb04 	ldr.w	lr, [sp], #4
 800d038:	b003      	add	sp, #12
 800d03a:	4770      	bx	lr
 800d03c:	20000058 	.word	0x20000058
 800d040:	ffff0208 	.word	0xffff0208

0800d044 <__sread>:
 800d044:	b510      	push	{r4, lr}
 800d046:	460c      	mov	r4, r1
 800d048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04c:	f000 f87c 	bl	800d148 <_read_r>
 800d050:	2800      	cmp	r0, #0
 800d052:	bfab      	itete	ge
 800d054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d056:	89a3      	ldrhlt	r3, [r4, #12]
 800d058:	181b      	addge	r3, r3, r0
 800d05a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d05e:	bfac      	ite	ge
 800d060:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d062:	81a3      	strhlt	r3, [r4, #12]
 800d064:	bd10      	pop	{r4, pc}

0800d066 <__swrite>:
 800d066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06a:	461f      	mov	r7, r3
 800d06c:	898b      	ldrh	r3, [r1, #12]
 800d06e:	05db      	lsls	r3, r3, #23
 800d070:	4605      	mov	r5, r0
 800d072:	460c      	mov	r4, r1
 800d074:	4616      	mov	r6, r2
 800d076:	d505      	bpl.n	800d084 <__swrite+0x1e>
 800d078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07c:	2302      	movs	r3, #2
 800d07e:	2200      	movs	r2, #0
 800d080:	f000 f850 	bl	800d124 <_lseek_r>
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d08a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d08e:	81a3      	strh	r3, [r4, #12]
 800d090:	4632      	mov	r2, r6
 800d092:	463b      	mov	r3, r7
 800d094:	4628      	mov	r0, r5
 800d096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d09a:	f000 b867 	b.w	800d16c <_write_r>

0800d09e <__sseek>:
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a6:	f000 f83d 	bl	800d124 <_lseek_r>
 800d0aa:	1c43      	adds	r3, r0, #1
 800d0ac:	89a3      	ldrh	r3, [r4, #12]
 800d0ae:	bf15      	itete	ne
 800d0b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0ba:	81a3      	strheq	r3, [r4, #12]
 800d0bc:	bf18      	it	ne
 800d0be:	81a3      	strhne	r3, [r4, #12]
 800d0c0:	bd10      	pop	{r4, pc}

0800d0c2 <__sclose>:
 800d0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c6:	f000 b81d 	b.w	800d104 <_close_r>

0800d0ca <memcmp>:
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	3901      	subs	r1, #1
 800d0ce:	4402      	add	r2, r0
 800d0d0:	4290      	cmp	r0, r2
 800d0d2:	d101      	bne.n	800d0d8 <memcmp+0xe>
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	e005      	b.n	800d0e4 <memcmp+0x1a>
 800d0d8:	7803      	ldrb	r3, [r0, #0]
 800d0da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d0de:	42a3      	cmp	r3, r4
 800d0e0:	d001      	beq.n	800d0e6 <memcmp+0x1c>
 800d0e2:	1b18      	subs	r0, r3, r4
 800d0e4:	bd10      	pop	{r4, pc}
 800d0e6:	3001      	adds	r0, #1
 800d0e8:	e7f2      	b.n	800d0d0 <memcmp+0x6>

0800d0ea <memset>:
 800d0ea:	4402      	add	r2, r0
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d100      	bne.n	800d0f4 <memset+0xa>
 800d0f2:	4770      	bx	lr
 800d0f4:	f803 1b01 	strb.w	r1, [r3], #1
 800d0f8:	e7f9      	b.n	800d0ee <memset+0x4>
	...

0800d0fc <_localeconv_r>:
 800d0fc:	4800      	ldr	r0, [pc, #0]	@ (800d100 <_localeconv_r+0x4>)
 800d0fe:	4770      	bx	lr
 800d100:	20000198 	.word	0x20000198

0800d104 <_close_r>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4d06      	ldr	r5, [pc, #24]	@ (800d120 <_close_r+0x1c>)
 800d108:	2300      	movs	r3, #0
 800d10a:	4604      	mov	r4, r0
 800d10c:	4608      	mov	r0, r1
 800d10e:	602b      	str	r3, [r5, #0]
 800d110:	f7fa f920 	bl	8007354 <_close>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_close_r+0x1a>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_close_r+0x1a>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	200009b0 	.word	0x200009b0

0800d124 <_lseek_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d07      	ldr	r5, [pc, #28]	@ (800d144 <_lseek_r+0x20>)
 800d128:	4604      	mov	r4, r0
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f7fa f935 	bl	80073a2 <_lseek>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_lseek_r+0x1e>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_lseek_r+0x1e>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	200009b0 	.word	0x200009b0

0800d148 <_read_r>:
 800d148:	b538      	push	{r3, r4, r5, lr}
 800d14a:	4d07      	ldr	r5, [pc, #28]	@ (800d168 <_read_r+0x20>)
 800d14c:	4604      	mov	r4, r0
 800d14e:	4608      	mov	r0, r1
 800d150:	4611      	mov	r1, r2
 800d152:	2200      	movs	r2, #0
 800d154:	602a      	str	r2, [r5, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	f7fa f8c3 	bl	80072e2 <_read>
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d102      	bne.n	800d166 <_read_r+0x1e>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	b103      	cbz	r3, 800d166 <_read_r+0x1e>
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	bd38      	pop	{r3, r4, r5, pc}
 800d168:	200009b0 	.word	0x200009b0

0800d16c <_write_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4d07      	ldr	r5, [pc, #28]	@ (800d18c <_write_r+0x20>)
 800d170:	4604      	mov	r4, r0
 800d172:	4608      	mov	r0, r1
 800d174:	4611      	mov	r1, r2
 800d176:	2200      	movs	r2, #0
 800d178:	602a      	str	r2, [r5, #0]
 800d17a:	461a      	mov	r2, r3
 800d17c:	f7fa f8ce 	bl	800731c <_write>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_write_r+0x1e>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	b103      	cbz	r3, 800d18a <_write_r+0x1e>
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	200009b0 	.word	0x200009b0

0800d190 <__errno>:
 800d190:	4b01      	ldr	r3, [pc, #4]	@ (800d198 <__errno+0x8>)
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	20000058 	.word	0x20000058

0800d19c <__libc_init_array>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	4d0d      	ldr	r5, [pc, #52]	@ (800d1d4 <__libc_init_array+0x38>)
 800d1a0:	4c0d      	ldr	r4, [pc, #52]	@ (800d1d8 <__libc_init_array+0x3c>)
 800d1a2:	1b64      	subs	r4, r4, r5
 800d1a4:	10a4      	asrs	r4, r4, #2
 800d1a6:	2600      	movs	r6, #0
 800d1a8:	42a6      	cmp	r6, r4
 800d1aa:	d109      	bne.n	800d1c0 <__libc_init_array+0x24>
 800d1ac:	4d0b      	ldr	r5, [pc, #44]	@ (800d1dc <__libc_init_array+0x40>)
 800d1ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d1e0 <__libc_init_array+0x44>)
 800d1b0:	f004 fc12 	bl	80119d8 <_init>
 800d1b4:	1b64      	subs	r4, r4, r5
 800d1b6:	10a4      	asrs	r4, r4, #2
 800d1b8:	2600      	movs	r6, #0
 800d1ba:	42a6      	cmp	r6, r4
 800d1bc:	d105      	bne.n	800d1ca <__libc_init_array+0x2e>
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c4:	4798      	blx	r3
 800d1c6:	3601      	adds	r6, #1
 800d1c8:	e7ee      	b.n	800d1a8 <__libc_init_array+0xc>
 800d1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ce:	4798      	blx	r3
 800d1d0:	3601      	adds	r6, #1
 800d1d2:	e7f2      	b.n	800d1ba <__libc_init_array+0x1e>
 800d1d4:	08012018 	.word	0x08012018
 800d1d8:	08012018 	.word	0x08012018
 800d1dc:	08012018 	.word	0x08012018
 800d1e0:	0801201c 	.word	0x0801201c

0800d1e4 <__retarget_lock_init_recursive>:
 800d1e4:	4770      	bx	lr

0800d1e6 <__retarget_lock_acquire_recursive>:
 800d1e6:	4770      	bx	lr

0800d1e8 <__retarget_lock_release_recursive>:
 800d1e8:	4770      	bx	lr

0800d1ea <memcpy>:
 800d1ea:	440a      	add	r2, r1
 800d1ec:	4291      	cmp	r1, r2
 800d1ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1f2:	d100      	bne.n	800d1f6 <memcpy+0xc>
 800d1f4:	4770      	bx	lr
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d200:	4291      	cmp	r1, r2
 800d202:	d1f9      	bne.n	800d1f8 <memcpy+0xe>
 800d204:	bd10      	pop	{r4, pc}

0800d206 <quorem>:
 800d206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20a:	6903      	ldr	r3, [r0, #16]
 800d20c:	690c      	ldr	r4, [r1, #16]
 800d20e:	42a3      	cmp	r3, r4
 800d210:	4607      	mov	r7, r0
 800d212:	db7e      	blt.n	800d312 <quorem+0x10c>
 800d214:	3c01      	subs	r4, #1
 800d216:	f101 0814 	add.w	r8, r1, #20
 800d21a:	00a3      	lsls	r3, r4, #2
 800d21c:	f100 0514 	add.w	r5, r0, #20
 800d220:	9300      	str	r3, [sp, #0]
 800d222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d22c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d230:	3301      	adds	r3, #1
 800d232:	429a      	cmp	r2, r3
 800d234:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d238:	fbb2 f6f3 	udiv	r6, r2, r3
 800d23c:	d32e      	bcc.n	800d29c <quorem+0x96>
 800d23e:	f04f 0a00 	mov.w	sl, #0
 800d242:	46c4      	mov	ip, r8
 800d244:	46ae      	mov	lr, r5
 800d246:	46d3      	mov	fp, sl
 800d248:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d24c:	b298      	uxth	r0, r3
 800d24e:	fb06 a000 	mla	r0, r6, r0, sl
 800d252:	0c02      	lsrs	r2, r0, #16
 800d254:	0c1b      	lsrs	r3, r3, #16
 800d256:	fb06 2303 	mla	r3, r6, r3, r2
 800d25a:	f8de 2000 	ldr.w	r2, [lr]
 800d25e:	b280      	uxth	r0, r0
 800d260:	b292      	uxth	r2, r2
 800d262:	1a12      	subs	r2, r2, r0
 800d264:	445a      	add	r2, fp
 800d266:	f8de 0000 	ldr.w	r0, [lr]
 800d26a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d26e:	b29b      	uxth	r3, r3
 800d270:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d274:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d278:	b292      	uxth	r2, r2
 800d27a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d27e:	45e1      	cmp	r9, ip
 800d280:	f84e 2b04 	str.w	r2, [lr], #4
 800d284:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d288:	d2de      	bcs.n	800d248 <quorem+0x42>
 800d28a:	9b00      	ldr	r3, [sp, #0]
 800d28c:	58eb      	ldr	r3, [r5, r3]
 800d28e:	b92b      	cbnz	r3, 800d29c <quorem+0x96>
 800d290:	9b01      	ldr	r3, [sp, #4]
 800d292:	3b04      	subs	r3, #4
 800d294:	429d      	cmp	r5, r3
 800d296:	461a      	mov	r2, r3
 800d298:	d32f      	bcc.n	800d2fa <quorem+0xf4>
 800d29a:	613c      	str	r4, [r7, #16]
 800d29c:	4638      	mov	r0, r7
 800d29e:	f001 f979 	bl	800e594 <__mcmp>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	db25      	blt.n	800d2f2 <quorem+0xec>
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2ae:	f8d1 c000 	ldr.w	ip, [r1]
 800d2b2:	fa1f fe82 	uxth.w	lr, r2
 800d2b6:	fa1f f38c 	uxth.w	r3, ip
 800d2ba:	eba3 030e 	sub.w	r3, r3, lr
 800d2be:	4403      	add	r3, r0
 800d2c0:	0c12      	lsrs	r2, r2, #16
 800d2c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d2c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2d0:	45c1      	cmp	r9, r8
 800d2d2:	f841 3b04 	str.w	r3, [r1], #4
 800d2d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d2da:	d2e6      	bcs.n	800d2aa <quorem+0xa4>
 800d2dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2e4:	b922      	cbnz	r2, 800d2f0 <quorem+0xea>
 800d2e6:	3b04      	subs	r3, #4
 800d2e8:	429d      	cmp	r5, r3
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	d30b      	bcc.n	800d306 <quorem+0x100>
 800d2ee:	613c      	str	r4, [r7, #16]
 800d2f0:	3601      	adds	r6, #1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	b003      	add	sp, #12
 800d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fa:	6812      	ldr	r2, [r2, #0]
 800d2fc:	3b04      	subs	r3, #4
 800d2fe:	2a00      	cmp	r2, #0
 800d300:	d1cb      	bne.n	800d29a <quorem+0x94>
 800d302:	3c01      	subs	r4, #1
 800d304:	e7c6      	b.n	800d294 <quorem+0x8e>
 800d306:	6812      	ldr	r2, [r2, #0]
 800d308:	3b04      	subs	r3, #4
 800d30a:	2a00      	cmp	r2, #0
 800d30c:	d1ef      	bne.n	800d2ee <quorem+0xe8>
 800d30e:	3c01      	subs	r4, #1
 800d310:	e7ea      	b.n	800d2e8 <quorem+0xe2>
 800d312:	2000      	movs	r0, #0
 800d314:	e7ee      	b.n	800d2f4 <quorem+0xee>
	...

0800d318 <_dtoa_r>:
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	69c7      	ldr	r7, [r0, #28]
 800d31e:	b099      	sub	sp, #100	@ 0x64
 800d320:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d324:	ec55 4b10 	vmov	r4, r5, d0
 800d328:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d32a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d32c:	4683      	mov	fp, r0
 800d32e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d330:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d332:	b97f      	cbnz	r7, 800d354 <_dtoa_r+0x3c>
 800d334:	2010      	movs	r0, #16
 800d336:	f000 fdfd 	bl	800df34 <malloc>
 800d33a:	4602      	mov	r2, r0
 800d33c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d340:	b920      	cbnz	r0, 800d34c <_dtoa_r+0x34>
 800d342:	4ba7      	ldr	r3, [pc, #668]	@ (800d5e0 <_dtoa_r+0x2c8>)
 800d344:	21ef      	movs	r1, #239	@ 0xef
 800d346:	48a7      	ldr	r0, [pc, #668]	@ (800d5e4 <_dtoa_r+0x2cc>)
 800d348:	f001 fc5a 	bl	800ec00 <__assert_func>
 800d34c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d350:	6007      	str	r7, [r0, #0]
 800d352:	60c7      	str	r7, [r0, #12]
 800d354:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d358:	6819      	ldr	r1, [r3, #0]
 800d35a:	b159      	cbz	r1, 800d374 <_dtoa_r+0x5c>
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	604a      	str	r2, [r1, #4]
 800d360:	2301      	movs	r3, #1
 800d362:	4093      	lsls	r3, r2
 800d364:	608b      	str	r3, [r1, #8]
 800d366:	4658      	mov	r0, fp
 800d368:	f000 feda 	bl	800e120 <_Bfree>
 800d36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d370:	2200      	movs	r2, #0
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	1e2b      	subs	r3, r5, #0
 800d376:	bfb9      	ittee	lt
 800d378:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d37c:	9303      	strlt	r3, [sp, #12]
 800d37e:	2300      	movge	r3, #0
 800d380:	6033      	strge	r3, [r6, #0]
 800d382:	9f03      	ldr	r7, [sp, #12]
 800d384:	4b98      	ldr	r3, [pc, #608]	@ (800d5e8 <_dtoa_r+0x2d0>)
 800d386:	bfbc      	itt	lt
 800d388:	2201      	movlt	r2, #1
 800d38a:	6032      	strlt	r2, [r6, #0]
 800d38c:	43bb      	bics	r3, r7
 800d38e:	d112      	bne.n	800d3b6 <_dtoa_r+0x9e>
 800d390:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d392:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d39c:	4323      	orrs	r3, r4
 800d39e:	f000 854d 	beq.w	800de3c <_dtoa_r+0xb24>
 800d3a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d5fc <_dtoa_r+0x2e4>
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 854f 	beq.w	800de4c <_dtoa_r+0xb34>
 800d3ae:	f10a 0303 	add.w	r3, sl, #3
 800d3b2:	f000 bd49 	b.w	800de48 <_dtoa_r+0xb30>
 800d3b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	ec51 0b17 	vmov	r0, r1, d7
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d3c6:	f7f3 fb9f 	bl	8000b08 <__aeabi_dcmpeq>
 800d3ca:	4680      	mov	r8, r0
 800d3cc:	b158      	cbz	r0, 800d3e6 <_dtoa_r+0xce>
 800d3ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3d6:	b113      	cbz	r3, 800d3de <_dtoa_r+0xc6>
 800d3d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d3da:	4b84      	ldr	r3, [pc, #528]	@ (800d5ec <_dtoa_r+0x2d4>)
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d600 <_dtoa_r+0x2e8>
 800d3e2:	f000 bd33 	b.w	800de4c <_dtoa_r+0xb34>
 800d3e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d3ea:	aa16      	add	r2, sp, #88	@ 0x58
 800d3ec:	a917      	add	r1, sp, #92	@ 0x5c
 800d3ee:	4658      	mov	r0, fp
 800d3f0:	f001 f980 	bl	800e6f4 <__d2b>
 800d3f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d3f8:	4681      	mov	r9, r0
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	d077      	beq.n	800d4ee <_dtoa_r+0x1d6>
 800d3fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d400:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d40c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d410:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d414:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d418:	4619      	mov	r1, r3
 800d41a:	2200      	movs	r2, #0
 800d41c:	4b74      	ldr	r3, [pc, #464]	@ (800d5f0 <_dtoa_r+0x2d8>)
 800d41e:	f7f2 ff53 	bl	80002c8 <__aeabi_dsub>
 800d422:	a369      	add	r3, pc, #420	@ (adr r3, 800d5c8 <_dtoa_r+0x2b0>)
 800d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d428:	f7f3 f906 	bl	8000638 <__aeabi_dmul>
 800d42c:	a368      	add	r3, pc, #416	@ (adr r3, 800d5d0 <_dtoa_r+0x2b8>)
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	f7f2 ff4b 	bl	80002cc <__adddf3>
 800d436:	4604      	mov	r4, r0
 800d438:	4630      	mov	r0, r6
 800d43a:	460d      	mov	r5, r1
 800d43c:	f7f3 f892 	bl	8000564 <__aeabi_i2d>
 800d440:	a365      	add	r3, pc, #404	@ (adr r3, 800d5d8 <_dtoa_r+0x2c0>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f3 f8f7 	bl	8000638 <__aeabi_dmul>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4620      	mov	r0, r4
 800d450:	4629      	mov	r1, r5
 800d452:	f7f2 ff3b 	bl	80002cc <__adddf3>
 800d456:	4604      	mov	r4, r0
 800d458:	460d      	mov	r5, r1
 800d45a:	f7f3 fb9d 	bl	8000b98 <__aeabi_d2iz>
 800d45e:	2200      	movs	r2, #0
 800d460:	4607      	mov	r7, r0
 800d462:	2300      	movs	r3, #0
 800d464:	4620      	mov	r0, r4
 800d466:	4629      	mov	r1, r5
 800d468:	f7f3 fb58 	bl	8000b1c <__aeabi_dcmplt>
 800d46c:	b140      	cbz	r0, 800d480 <_dtoa_r+0x168>
 800d46e:	4638      	mov	r0, r7
 800d470:	f7f3 f878 	bl	8000564 <__aeabi_i2d>
 800d474:	4622      	mov	r2, r4
 800d476:	462b      	mov	r3, r5
 800d478:	f7f3 fb46 	bl	8000b08 <__aeabi_dcmpeq>
 800d47c:	b900      	cbnz	r0, 800d480 <_dtoa_r+0x168>
 800d47e:	3f01      	subs	r7, #1
 800d480:	2f16      	cmp	r7, #22
 800d482:	d851      	bhi.n	800d528 <_dtoa_r+0x210>
 800d484:	4b5b      	ldr	r3, [pc, #364]	@ (800d5f4 <_dtoa_r+0x2dc>)
 800d486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d492:	f7f3 fb43 	bl	8000b1c <__aeabi_dcmplt>
 800d496:	2800      	cmp	r0, #0
 800d498:	d048      	beq.n	800d52c <_dtoa_r+0x214>
 800d49a:	3f01      	subs	r7, #1
 800d49c:	2300      	movs	r3, #0
 800d49e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4a2:	1b9b      	subs	r3, r3, r6
 800d4a4:	1e5a      	subs	r2, r3, #1
 800d4a6:	bf44      	itt	mi
 800d4a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d4ac:	2300      	movmi	r3, #0
 800d4ae:	9208      	str	r2, [sp, #32]
 800d4b0:	bf54      	ite	pl
 800d4b2:	f04f 0800 	movpl.w	r8, #0
 800d4b6:	9308      	strmi	r3, [sp, #32]
 800d4b8:	2f00      	cmp	r7, #0
 800d4ba:	db39      	blt.n	800d530 <_dtoa_r+0x218>
 800d4bc:	9b08      	ldr	r3, [sp, #32]
 800d4be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d4c0:	443b      	add	r3, r7
 800d4c2:	9308      	str	r3, [sp, #32]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4ca:	2b09      	cmp	r3, #9
 800d4cc:	d864      	bhi.n	800d598 <_dtoa_r+0x280>
 800d4ce:	2b05      	cmp	r3, #5
 800d4d0:	bfc4      	itt	gt
 800d4d2:	3b04      	subgt	r3, #4
 800d4d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d8:	f1a3 0302 	sub.w	r3, r3, #2
 800d4dc:	bfcc      	ite	gt
 800d4de:	2400      	movgt	r4, #0
 800d4e0:	2401      	movle	r4, #1
 800d4e2:	2b03      	cmp	r3, #3
 800d4e4:	d863      	bhi.n	800d5ae <_dtoa_r+0x296>
 800d4e6:	e8df f003 	tbb	[pc, r3]
 800d4ea:	372a      	.short	0x372a
 800d4ec:	5535      	.short	0x5535
 800d4ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d4f2:	441e      	add	r6, r3
 800d4f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d4f8:	2b20      	cmp	r3, #32
 800d4fa:	bfc1      	itttt	gt
 800d4fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d500:	409f      	lslgt	r7, r3
 800d502:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d506:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d50a:	bfd6      	itet	le
 800d50c:	f1c3 0320 	rsble	r3, r3, #32
 800d510:	ea47 0003 	orrgt.w	r0, r7, r3
 800d514:	fa04 f003 	lslle.w	r0, r4, r3
 800d518:	f7f3 f814 	bl	8000544 <__aeabi_ui2d>
 800d51c:	2201      	movs	r2, #1
 800d51e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d522:	3e01      	subs	r6, #1
 800d524:	9214      	str	r2, [sp, #80]	@ 0x50
 800d526:	e777      	b.n	800d418 <_dtoa_r+0x100>
 800d528:	2301      	movs	r3, #1
 800d52a:	e7b8      	b.n	800d49e <_dtoa_r+0x186>
 800d52c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d52e:	e7b7      	b.n	800d4a0 <_dtoa_r+0x188>
 800d530:	427b      	negs	r3, r7
 800d532:	930a      	str	r3, [sp, #40]	@ 0x28
 800d534:	2300      	movs	r3, #0
 800d536:	eba8 0807 	sub.w	r8, r8, r7
 800d53a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d53c:	e7c4      	b.n	800d4c8 <_dtoa_r+0x1b0>
 800d53e:	2300      	movs	r3, #0
 800d540:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d544:	2b00      	cmp	r3, #0
 800d546:	dc35      	bgt.n	800d5b4 <_dtoa_r+0x29c>
 800d548:	2301      	movs	r3, #1
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	9307      	str	r3, [sp, #28]
 800d54e:	461a      	mov	r2, r3
 800d550:	920e      	str	r2, [sp, #56]	@ 0x38
 800d552:	e00b      	b.n	800d56c <_dtoa_r+0x254>
 800d554:	2301      	movs	r3, #1
 800d556:	e7f3      	b.n	800d540 <_dtoa_r+0x228>
 800d558:	2300      	movs	r3, #0
 800d55a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d55c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d55e:	18fb      	adds	r3, r7, r3
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	2b01      	cmp	r3, #1
 800d566:	9307      	str	r3, [sp, #28]
 800d568:	bfb8      	it	lt
 800d56a:	2301      	movlt	r3, #1
 800d56c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d570:	2100      	movs	r1, #0
 800d572:	2204      	movs	r2, #4
 800d574:	f102 0514 	add.w	r5, r2, #20
 800d578:	429d      	cmp	r5, r3
 800d57a:	d91f      	bls.n	800d5bc <_dtoa_r+0x2a4>
 800d57c:	6041      	str	r1, [r0, #4]
 800d57e:	4658      	mov	r0, fp
 800d580:	f000 fd8e 	bl	800e0a0 <_Balloc>
 800d584:	4682      	mov	sl, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	d13c      	bne.n	800d604 <_dtoa_r+0x2ec>
 800d58a:	4b1b      	ldr	r3, [pc, #108]	@ (800d5f8 <_dtoa_r+0x2e0>)
 800d58c:	4602      	mov	r2, r0
 800d58e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d592:	e6d8      	b.n	800d346 <_dtoa_r+0x2e>
 800d594:	2301      	movs	r3, #1
 800d596:	e7e0      	b.n	800d55a <_dtoa_r+0x242>
 800d598:	2401      	movs	r4, #1
 800d59a:	2300      	movs	r3, #0
 800d59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d59e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	9307      	str	r3, [sp, #28]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2312      	movs	r3, #18
 800d5ac:	e7d0      	b.n	800d550 <_dtoa_r+0x238>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5b2:	e7f5      	b.n	800d5a0 <_dtoa_r+0x288>
 800d5b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	9307      	str	r3, [sp, #28]
 800d5ba:	e7d7      	b.n	800d56c <_dtoa_r+0x254>
 800d5bc:	3101      	adds	r1, #1
 800d5be:	0052      	lsls	r2, r2, #1
 800d5c0:	e7d8      	b.n	800d574 <_dtoa_r+0x25c>
 800d5c2:	bf00      	nop
 800d5c4:	f3af 8000 	nop.w
 800d5c8:	636f4361 	.word	0x636f4361
 800d5cc:	3fd287a7 	.word	0x3fd287a7
 800d5d0:	8b60c8b3 	.word	0x8b60c8b3
 800d5d4:	3fc68a28 	.word	0x3fc68a28
 800d5d8:	509f79fb 	.word	0x509f79fb
 800d5dc:	3fd34413 	.word	0x3fd34413
 800d5e0:	08011aa1 	.word	0x08011aa1
 800d5e4:	08011ab8 	.word	0x08011ab8
 800d5e8:	7ff00000 	.word	0x7ff00000
 800d5ec:	08011a71 	.word	0x08011a71
 800d5f0:	3ff80000 	.word	0x3ff80000
 800d5f4:	08011bb0 	.word	0x08011bb0
 800d5f8:	08011b10 	.word	0x08011b10
 800d5fc:	08011a9d 	.word	0x08011a9d
 800d600:	08011a70 	.word	0x08011a70
 800d604:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d608:	6018      	str	r0, [r3, #0]
 800d60a:	9b07      	ldr	r3, [sp, #28]
 800d60c:	2b0e      	cmp	r3, #14
 800d60e:	f200 80a4 	bhi.w	800d75a <_dtoa_r+0x442>
 800d612:	2c00      	cmp	r4, #0
 800d614:	f000 80a1 	beq.w	800d75a <_dtoa_r+0x442>
 800d618:	2f00      	cmp	r7, #0
 800d61a:	dd33      	ble.n	800d684 <_dtoa_r+0x36c>
 800d61c:	4bad      	ldr	r3, [pc, #692]	@ (800d8d4 <_dtoa_r+0x5bc>)
 800d61e:	f007 020f 	and.w	r2, r7, #15
 800d622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d626:	ed93 7b00 	vldr	d7, [r3]
 800d62a:	05f8      	lsls	r0, r7, #23
 800d62c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d630:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d634:	d516      	bpl.n	800d664 <_dtoa_r+0x34c>
 800d636:	4ba8      	ldr	r3, [pc, #672]	@ (800d8d8 <_dtoa_r+0x5c0>)
 800d638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d63c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d640:	f7f3 f924 	bl	800088c <__aeabi_ddiv>
 800d644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d648:	f004 040f 	and.w	r4, r4, #15
 800d64c:	2603      	movs	r6, #3
 800d64e:	4da2      	ldr	r5, [pc, #648]	@ (800d8d8 <_dtoa_r+0x5c0>)
 800d650:	b954      	cbnz	r4, 800d668 <_dtoa_r+0x350>
 800d652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d65a:	f7f3 f917 	bl	800088c <__aeabi_ddiv>
 800d65e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d662:	e028      	b.n	800d6b6 <_dtoa_r+0x39e>
 800d664:	2602      	movs	r6, #2
 800d666:	e7f2      	b.n	800d64e <_dtoa_r+0x336>
 800d668:	07e1      	lsls	r1, r4, #31
 800d66a:	d508      	bpl.n	800d67e <_dtoa_r+0x366>
 800d66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d670:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d674:	f7f2 ffe0 	bl	8000638 <__aeabi_dmul>
 800d678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d67c:	3601      	adds	r6, #1
 800d67e:	1064      	asrs	r4, r4, #1
 800d680:	3508      	adds	r5, #8
 800d682:	e7e5      	b.n	800d650 <_dtoa_r+0x338>
 800d684:	f000 80d2 	beq.w	800d82c <_dtoa_r+0x514>
 800d688:	427c      	negs	r4, r7
 800d68a:	4b92      	ldr	r3, [pc, #584]	@ (800d8d4 <_dtoa_r+0x5bc>)
 800d68c:	4d92      	ldr	r5, [pc, #584]	@ (800d8d8 <_dtoa_r+0x5c0>)
 800d68e:	f004 020f 	and.w	r2, r4, #15
 800d692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d69e:	f7f2 ffcb 	bl	8000638 <__aeabi_dmul>
 800d6a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6a6:	1124      	asrs	r4, r4, #4
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2602      	movs	r6, #2
 800d6ac:	2c00      	cmp	r4, #0
 800d6ae:	f040 80b2 	bne.w	800d816 <_dtoa_r+0x4fe>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1d3      	bne.n	800d65e <_dtoa_r+0x346>
 800d6b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 80b7 	beq.w	800d830 <_dtoa_r+0x518>
 800d6c2:	4b86      	ldr	r3, [pc, #536]	@ (800d8dc <_dtoa_r+0x5c4>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7f3 fa27 	bl	8000b1c <__aeabi_dcmplt>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	f000 80ae 	beq.w	800d830 <_dtoa_r+0x518>
 800d6d4:	9b07      	ldr	r3, [sp, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 80aa 	beq.w	800d830 <_dtoa_r+0x518>
 800d6dc:	9b00      	ldr	r3, [sp, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	dd37      	ble.n	800d752 <_dtoa_r+0x43a>
 800d6e2:	1e7b      	subs	r3, r7, #1
 800d6e4:	9304      	str	r3, [sp, #16]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4b7d      	ldr	r3, [pc, #500]	@ (800d8e0 <_dtoa_r+0x5c8>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	4629      	mov	r1, r5
 800d6ee:	f7f2 ffa3 	bl	8000638 <__aeabi_dmul>
 800d6f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f6:	9c00      	ldr	r4, [sp, #0]
 800d6f8:	3601      	adds	r6, #1
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7f2 ff32 	bl	8000564 <__aeabi_i2d>
 800d700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d704:	f7f2 ff98 	bl	8000638 <__aeabi_dmul>
 800d708:	4b76      	ldr	r3, [pc, #472]	@ (800d8e4 <_dtoa_r+0x5cc>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	f7f2 fdde 	bl	80002cc <__adddf3>
 800d710:	4605      	mov	r5, r0
 800d712:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d716:	2c00      	cmp	r4, #0
 800d718:	f040 808d 	bne.w	800d836 <_dtoa_r+0x51e>
 800d71c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d720:	4b71      	ldr	r3, [pc, #452]	@ (800d8e8 <_dtoa_r+0x5d0>)
 800d722:	2200      	movs	r2, #0
 800d724:	f7f2 fdd0 	bl	80002c8 <__aeabi_dsub>
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d730:	462a      	mov	r2, r5
 800d732:	4633      	mov	r3, r6
 800d734:	f7f3 fa10 	bl	8000b58 <__aeabi_dcmpgt>
 800d738:	2800      	cmp	r0, #0
 800d73a:	f040 828b 	bne.w	800dc54 <_dtoa_r+0x93c>
 800d73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d742:	462a      	mov	r2, r5
 800d744:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d748:	f7f3 f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	f040 8128 	bne.w	800d9a2 <_dtoa_r+0x68a>
 800d752:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d756:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d75a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f2c0 815a 	blt.w	800da16 <_dtoa_r+0x6fe>
 800d762:	2f0e      	cmp	r7, #14
 800d764:	f300 8157 	bgt.w	800da16 <_dtoa_r+0x6fe>
 800d768:	4b5a      	ldr	r3, [pc, #360]	@ (800d8d4 <_dtoa_r+0x5bc>)
 800d76a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d76e:	ed93 7b00 	vldr	d7, [r3]
 800d772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d774:	2b00      	cmp	r3, #0
 800d776:	ed8d 7b00 	vstr	d7, [sp]
 800d77a:	da03      	bge.n	800d784 <_dtoa_r+0x46c>
 800d77c:	9b07      	ldr	r3, [sp, #28]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f340 8101 	ble.w	800d986 <_dtoa_r+0x66e>
 800d784:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d788:	4656      	mov	r6, sl
 800d78a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d78e:	4620      	mov	r0, r4
 800d790:	4629      	mov	r1, r5
 800d792:	f7f3 f87b 	bl	800088c <__aeabi_ddiv>
 800d796:	f7f3 f9ff 	bl	8000b98 <__aeabi_d2iz>
 800d79a:	4680      	mov	r8, r0
 800d79c:	f7f2 fee2 	bl	8000564 <__aeabi_i2d>
 800d7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7a4:	f7f2 ff48 	bl	8000638 <__aeabi_dmul>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	4629      	mov	r1, r5
 800d7b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d7b4:	f7f2 fd88 	bl	80002c8 <__aeabi_dsub>
 800d7b8:	f806 4b01 	strb.w	r4, [r6], #1
 800d7bc:	9d07      	ldr	r5, [sp, #28]
 800d7be:	eba6 040a 	sub.w	r4, r6, sl
 800d7c2:	42a5      	cmp	r5, r4
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	f040 8117 	bne.w	800d9fa <_dtoa_r+0x6e2>
 800d7cc:	f7f2 fd7e 	bl	80002cc <__adddf3>
 800d7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	460d      	mov	r5, r1
 800d7d8:	f7f3 f9be 	bl	8000b58 <__aeabi_dcmpgt>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f040 80f9 	bne.w	800d9d4 <_dtoa_r+0x6bc>
 800d7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	f7f3 f98d 	bl	8000b08 <__aeabi_dcmpeq>
 800d7ee:	b118      	cbz	r0, 800d7f8 <_dtoa_r+0x4e0>
 800d7f0:	f018 0f01 	tst.w	r8, #1
 800d7f4:	f040 80ee 	bne.w	800d9d4 <_dtoa_r+0x6bc>
 800d7f8:	4649      	mov	r1, r9
 800d7fa:	4658      	mov	r0, fp
 800d7fc:	f000 fc90 	bl	800e120 <_Bfree>
 800d800:	2300      	movs	r3, #0
 800d802:	7033      	strb	r3, [r6, #0]
 800d804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d806:	3701      	adds	r7, #1
 800d808:	601f      	str	r7, [r3, #0]
 800d80a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 831d 	beq.w	800de4c <_dtoa_r+0xb34>
 800d812:	601e      	str	r6, [r3, #0]
 800d814:	e31a      	b.n	800de4c <_dtoa_r+0xb34>
 800d816:	07e2      	lsls	r2, r4, #31
 800d818:	d505      	bpl.n	800d826 <_dtoa_r+0x50e>
 800d81a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d81e:	f7f2 ff0b 	bl	8000638 <__aeabi_dmul>
 800d822:	3601      	adds	r6, #1
 800d824:	2301      	movs	r3, #1
 800d826:	1064      	asrs	r4, r4, #1
 800d828:	3508      	adds	r5, #8
 800d82a:	e73f      	b.n	800d6ac <_dtoa_r+0x394>
 800d82c:	2602      	movs	r6, #2
 800d82e:	e742      	b.n	800d6b6 <_dtoa_r+0x39e>
 800d830:	9c07      	ldr	r4, [sp, #28]
 800d832:	9704      	str	r7, [sp, #16]
 800d834:	e761      	b.n	800d6fa <_dtoa_r+0x3e2>
 800d836:	4b27      	ldr	r3, [pc, #156]	@ (800d8d4 <_dtoa_r+0x5bc>)
 800d838:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d83a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d83e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d842:	4454      	add	r4, sl
 800d844:	2900      	cmp	r1, #0
 800d846:	d053      	beq.n	800d8f0 <_dtoa_r+0x5d8>
 800d848:	4928      	ldr	r1, [pc, #160]	@ (800d8ec <_dtoa_r+0x5d4>)
 800d84a:	2000      	movs	r0, #0
 800d84c:	f7f3 f81e 	bl	800088c <__aeabi_ddiv>
 800d850:	4633      	mov	r3, r6
 800d852:	462a      	mov	r2, r5
 800d854:	f7f2 fd38 	bl	80002c8 <__aeabi_dsub>
 800d858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d85c:	4656      	mov	r6, sl
 800d85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d862:	f7f3 f999 	bl	8000b98 <__aeabi_d2iz>
 800d866:	4605      	mov	r5, r0
 800d868:	f7f2 fe7c 	bl	8000564 <__aeabi_i2d>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d874:	f7f2 fd28 	bl	80002c8 <__aeabi_dsub>
 800d878:	3530      	adds	r5, #48	@ 0x30
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d882:	f806 5b01 	strb.w	r5, [r6], #1
 800d886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d88a:	f7f3 f947 	bl	8000b1c <__aeabi_dcmplt>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d171      	bne.n	800d976 <_dtoa_r+0x65e>
 800d892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d896:	4911      	ldr	r1, [pc, #68]	@ (800d8dc <_dtoa_r+0x5c4>)
 800d898:	2000      	movs	r0, #0
 800d89a:	f7f2 fd15 	bl	80002c8 <__aeabi_dsub>
 800d89e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8a2:	f7f3 f93b 	bl	8000b1c <__aeabi_dcmplt>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	f040 8095 	bne.w	800d9d6 <_dtoa_r+0x6be>
 800d8ac:	42a6      	cmp	r6, r4
 800d8ae:	f43f af50 	beq.w	800d752 <_dtoa_r+0x43a>
 800d8b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d8b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e0 <_dtoa_r+0x5c8>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f7f2 febd 	bl	8000638 <__aeabi_dmul>
 800d8be:	4b08      	ldr	r3, [pc, #32]	@ (800d8e0 <_dtoa_r+0x5c8>)
 800d8c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ca:	f7f2 feb5 	bl	8000638 <__aeabi_dmul>
 800d8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8d2:	e7c4      	b.n	800d85e <_dtoa_r+0x546>
 800d8d4:	08011bb0 	.word	0x08011bb0
 800d8d8:	08011b88 	.word	0x08011b88
 800d8dc:	3ff00000 	.word	0x3ff00000
 800d8e0:	40240000 	.word	0x40240000
 800d8e4:	401c0000 	.word	0x401c0000
 800d8e8:	40140000 	.word	0x40140000
 800d8ec:	3fe00000 	.word	0x3fe00000
 800d8f0:	4631      	mov	r1, r6
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f7f2 fea0 	bl	8000638 <__aeabi_dmul>
 800d8f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800d8fe:	4656      	mov	r6, sl
 800d900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d904:	f7f3 f948 	bl	8000b98 <__aeabi_d2iz>
 800d908:	4605      	mov	r5, r0
 800d90a:	f7f2 fe2b 	bl	8000564 <__aeabi_i2d>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d916:	f7f2 fcd7 	bl	80002c8 <__aeabi_dsub>
 800d91a:	3530      	adds	r5, #48	@ 0x30
 800d91c:	f806 5b01 	strb.w	r5, [r6], #1
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	42a6      	cmp	r6, r4
 800d926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d92a:	f04f 0200 	mov.w	r2, #0
 800d92e:	d124      	bne.n	800d97a <_dtoa_r+0x662>
 800d930:	4bac      	ldr	r3, [pc, #688]	@ (800dbe4 <_dtoa_r+0x8cc>)
 800d932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d936:	f7f2 fcc9 	bl	80002cc <__adddf3>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d942:	f7f3 f909 	bl	8000b58 <__aeabi_dcmpgt>
 800d946:	2800      	cmp	r0, #0
 800d948:	d145      	bne.n	800d9d6 <_dtoa_r+0x6be>
 800d94a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d94e:	49a5      	ldr	r1, [pc, #660]	@ (800dbe4 <_dtoa_r+0x8cc>)
 800d950:	2000      	movs	r0, #0
 800d952:	f7f2 fcb9 	bl	80002c8 <__aeabi_dsub>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95e:	f7f3 f8dd 	bl	8000b1c <__aeabi_dcmplt>
 800d962:	2800      	cmp	r0, #0
 800d964:	f43f aef5 	beq.w	800d752 <_dtoa_r+0x43a>
 800d968:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d96a:	1e73      	subs	r3, r6, #1
 800d96c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d96e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d972:	2b30      	cmp	r3, #48	@ 0x30
 800d974:	d0f8      	beq.n	800d968 <_dtoa_r+0x650>
 800d976:	9f04      	ldr	r7, [sp, #16]
 800d978:	e73e      	b.n	800d7f8 <_dtoa_r+0x4e0>
 800d97a:	4b9b      	ldr	r3, [pc, #620]	@ (800dbe8 <_dtoa_r+0x8d0>)
 800d97c:	f7f2 fe5c 	bl	8000638 <__aeabi_dmul>
 800d980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d984:	e7bc      	b.n	800d900 <_dtoa_r+0x5e8>
 800d986:	d10c      	bne.n	800d9a2 <_dtoa_r+0x68a>
 800d988:	4b98      	ldr	r3, [pc, #608]	@ (800dbec <_dtoa_r+0x8d4>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d990:	f7f2 fe52 	bl	8000638 <__aeabi_dmul>
 800d994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d998:	f7f3 f8d4 	bl	8000b44 <__aeabi_dcmpge>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	f000 8157 	beq.w	800dc50 <_dtoa_r+0x938>
 800d9a2:	2400      	movs	r4, #0
 800d9a4:	4625      	mov	r5, r4
 800d9a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9a8:	43db      	mvns	r3, r3
 800d9aa:	9304      	str	r3, [sp, #16]
 800d9ac:	4656      	mov	r6, sl
 800d9ae:	2700      	movs	r7, #0
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	4658      	mov	r0, fp
 800d9b4:	f000 fbb4 	bl	800e120 <_Bfree>
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	d0dc      	beq.n	800d976 <_dtoa_r+0x65e>
 800d9bc:	b12f      	cbz	r7, 800d9ca <_dtoa_r+0x6b2>
 800d9be:	42af      	cmp	r7, r5
 800d9c0:	d003      	beq.n	800d9ca <_dtoa_r+0x6b2>
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	4658      	mov	r0, fp
 800d9c6:	f000 fbab 	bl	800e120 <_Bfree>
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	f000 fba7 	bl	800e120 <_Bfree>
 800d9d2:	e7d0      	b.n	800d976 <_dtoa_r+0x65e>
 800d9d4:	9704      	str	r7, [sp, #16]
 800d9d6:	4633      	mov	r3, r6
 800d9d8:	461e      	mov	r6, r3
 800d9da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9de:	2a39      	cmp	r2, #57	@ 0x39
 800d9e0:	d107      	bne.n	800d9f2 <_dtoa_r+0x6da>
 800d9e2:	459a      	cmp	sl, r3
 800d9e4:	d1f8      	bne.n	800d9d8 <_dtoa_r+0x6c0>
 800d9e6:	9a04      	ldr	r2, [sp, #16]
 800d9e8:	3201      	adds	r2, #1
 800d9ea:	9204      	str	r2, [sp, #16]
 800d9ec:	2230      	movs	r2, #48	@ 0x30
 800d9ee:	f88a 2000 	strb.w	r2, [sl]
 800d9f2:	781a      	ldrb	r2, [r3, #0]
 800d9f4:	3201      	adds	r2, #1
 800d9f6:	701a      	strb	r2, [r3, #0]
 800d9f8:	e7bd      	b.n	800d976 <_dtoa_r+0x65e>
 800d9fa:	4b7b      	ldr	r3, [pc, #492]	@ (800dbe8 <_dtoa_r+0x8d0>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f7f2 fe1b 	bl	8000638 <__aeabi_dmul>
 800da02:	2200      	movs	r2, #0
 800da04:	2300      	movs	r3, #0
 800da06:	4604      	mov	r4, r0
 800da08:	460d      	mov	r5, r1
 800da0a:	f7f3 f87d 	bl	8000b08 <__aeabi_dcmpeq>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f43f aebb 	beq.w	800d78a <_dtoa_r+0x472>
 800da14:	e6f0      	b.n	800d7f8 <_dtoa_r+0x4e0>
 800da16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da18:	2a00      	cmp	r2, #0
 800da1a:	f000 80db 	beq.w	800dbd4 <_dtoa_r+0x8bc>
 800da1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da20:	2a01      	cmp	r2, #1
 800da22:	f300 80bf 	bgt.w	800dba4 <_dtoa_r+0x88c>
 800da26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800da28:	2a00      	cmp	r2, #0
 800da2a:	f000 80b7 	beq.w	800db9c <_dtoa_r+0x884>
 800da2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da34:	4646      	mov	r6, r8
 800da36:	9a08      	ldr	r2, [sp, #32]
 800da38:	2101      	movs	r1, #1
 800da3a:	441a      	add	r2, r3
 800da3c:	4658      	mov	r0, fp
 800da3e:	4498      	add	r8, r3
 800da40:	9208      	str	r2, [sp, #32]
 800da42:	f000 fc21 	bl	800e288 <__i2b>
 800da46:	4605      	mov	r5, r0
 800da48:	b15e      	cbz	r6, 800da62 <_dtoa_r+0x74a>
 800da4a:	9b08      	ldr	r3, [sp, #32]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dd08      	ble.n	800da62 <_dtoa_r+0x74a>
 800da50:	42b3      	cmp	r3, r6
 800da52:	9a08      	ldr	r2, [sp, #32]
 800da54:	bfa8      	it	ge
 800da56:	4633      	movge	r3, r6
 800da58:	eba8 0803 	sub.w	r8, r8, r3
 800da5c:	1af6      	subs	r6, r6, r3
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	9308      	str	r3, [sp, #32]
 800da62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da64:	b1f3      	cbz	r3, 800daa4 <_dtoa_r+0x78c>
 800da66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f000 80b7 	beq.w	800dbdc <_dtoa_r+0x8c4>
 800da6e:	b18c      	cbz	r4, 800da94 <_dtoa_r+0x77c>
 800da70:	4629      	mov	r1, r5
 800da72:	4622      	mov	r2, r4
 800da74:	4658      	mov	r0, fp
 800da76:	f000 fcc7 	bl	800e408 <__pow5mult>
 800da7a:	464a      	mov	r2, r9
 800da7c:	4601      	mov	r1, r0
 800da7e:	4605      	mov	r5, r0
 800da80:	4658      	mov	r0, fp
 800da82:	f000 fc17 	bl	800e2b4 <__multiply>
 800da86:	4649      	mov	r1, r9
 800da88:	9004      	str	r0, [sp, #16]
 800da8a:	4658      	mov	r0, fp
 800da8c:	f000 fb48 	bl	800e120 <_Bfree>
 800da90:	9b04      	ldr	r3, [sp, #16]
 800da92:	4699      	mov	r9, r3
 800da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da96:	1b1a      	subs	r2, r3, r4
 800da98:	d004      	beq.n	800daa4 <_dtoa_r+0x78c>
 800da9a:	4649      	mov	r1, r9
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 fcb3 	bl	800e408 <__pow5mult>
 800daa2:	4681      	mov	r9, r0
 800daa4:	2101      	movs	r1, #1
 800daa6:	4658      	mov	r0, fp
 800daa8:	f000 fbee 	bl	800e288 <__i2b>
 800daac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daae:	4604      	mov	r4, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 81cf 	beq.w	800de54 <_dtoa_r+0xb3c>
 800dab6:	461a      	mov	r2, r3
 800dab8:	4601      	mov	r1, r0
 800daba:	4658      	mov	r0, fp
 800dabc:	f000 fca4 	bl	800e408 <__pow5mult>
 800dac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	4604      	mov	r4, r0
 800dac6:	f300 8095 	bgt.w	800dbf4 <_dtoa_r+0x8dc>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f040 8087 	bne.w	800dbe0 <_dtoa_r+0x8c8>
 800dad2:	9b03      	ldr	r3, [sp, #12]
 800dad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f040 8089 	bne.w	800dbf0 <_dtoa_r+0x8d8>
 800dade:	9b03      	ldr	r3, [sp, #12]
 800dae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dae4:	0d1b      	lsrs	r3, r3, #20
 800dae6:	051b      	lsls	r3, r3, #20
 800dae8:	b12b      	cbz	r3, 800daf6 <_dtoa_r+0x7de>
 800daea:	9b08      	ldr	r3, [sp, #32]
 800daec:	3301      	adds	r3, #1
 800daee:	9308      	str	r3, [sp, #32]
 800daf0:	f108 0801 	add.w	r8, r8, #1
 800daf4:	2301      	movs	r3, #1
 800daf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800daf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 81b0 	beq.w	800de60 <_dtoa_r+0xb48>
 800db00:	6923      	ldr	r3, [r4, #16]
 800db02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db06:	6918      	ldr	r0, [r3, #16]
 800db08:	f000 fb72 	bl	800e1f0 <__hi0bits>
 800db0c:	f1c0 0020 	rsb	r0, r0, #32
 800db10:	9b08      	ldr	r3, [sp, #32]
 800db12:	4418      	add	r0, r3
 800db14:	f010 001f 	ands.w	r0, r0, #31
 800db18:	d077      	beq.n	800dc0a <_dtoa_r+0x8f2>
 800db1a:	f1c0 0320 	rsb	r3, r0, #32
 800db1e:	2b04      	cmp	r3, #4
 800db20:	dd6b      	ble.n	800dbfa <_dtoa_r+0x8e2>
 800db22:	9b08      	ldr	r3, [sp, #32]
 800db24:	f1c0 001c 	rsb	r0, r0, #28
 800db28:	4403      	add	r3, r0
 800db2a:	4480      	add	r8, r0
 800db2c:	4406      	add	r6, r0
 800db2e:	9308      	str	r3, [sp, #32]
 800db30:	f1b8 0f00 	cmp.w	r8, #0
 800db34:	dd05      	ble.n	800db42 <_dtoa_r+0x82a>
 800db36:	4649      	mov	r1, r9
 800db38:	4642      	mov	r2, r8
 800db3a:	4658      	mov	r0, fp
 800db3c:	f000 fcbe 	bl	800e4bc <__lshift>
 800db40:	4681      	mov	r9, r0
 800db42:	9b08      	ldr	r3, [sp, #32]
 800db44:	2b00      	cmp	r3, #0
 800db46:	dd05      	ble.n	800db54 <_dtoa_r+0x83c>
 800db48:	4621      	mov	r1, r4
 800db4a:	461a      	mov	r2, r3
 800db4c:	4658      	mov	r0, fp
 800db4e:	f000 fcb5 	bl	800e4bc <__lshift>
 800db52:	4604      	mov	r4, r0
 800db54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db56:	2b00      	cmp	r3, #0
 800db58:	d059      	beq.n	800dc0e <_dtoa_r+0x8f6>
 800db5a:	4621      	mov	r1, r4
 800db5c:	4648      	mov	r0, r9
 800db5e:	f000 fd19 	bl	800e594 <__mcmp>
 800db62:	2800      	cmp	r0, #0
 800db64:	da53      	bge.n	800dc0e <_dtoa_r+0x8f6>
 800db66:	1e7b      	subs	r3, r7, #1
 800db68:	9304      	str	r3, [sp, #16]
 800db6a:	4649      	mov	r1, r9
 800db6c:	2300      	movs	r3, #0
 800db6e:	220a      	movs	r2, #10
 800db70:	4658      	mov	r0, fp
 800db72:	f000 faf7 	bl	800e164 <__multadd>
 800db76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db78:	4681      	mov	r9, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f000 8172 	beq.w	800de64 <_dtoa_r+0xb4c>
 800db80:	2300      	movs	r3, #0
 800db82:	4629      	mov	r1, r5
 800db84:	220a      	movs	r2, #10
 800db86:	4658      	mov	r0, fp
 800db88:	f000 faec 	bl	800e164 <__multadd>
 800db8c:	9b00      	ldr	r3, [sp, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	4605      	mov	r5, r0
 800db92:	dc67      	bgt.n	800dc64 <_dtoa_r+0x94c>
 800db94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db96:	2b02      	cmp	r3, #2
 800db98:	dc41      	bgt.n	800dc1e <_dtoa_r+0x906>
 800db9a:	e063      	b.n	800dc64 <_dtoa_r+0x94c>
 800db9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800db9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dba2:	e746      	b.n	800da32 <_dtoa_r+0x71a>
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	1e5c      	subs	r4, r3, #1
 800dba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbaa:	42a3      	cmp	r3, r4
 800dbac:	bfbf      	itttt	lt
 800dbae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dbb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dbb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dbb4:	1ae3      	sublt	r3, r4, r3
 800dbb6:	bfb4      	ite	lt
 800dbb8:	18d2      	addlt	r2, r2, r3
 800dbba:	1b1c      	subge	r4, r3, r4
 800dbbc:	9b07      	ldr	r3, [sp, #28]
 800dbbe:	bfbc      	itt	lt
 800dbc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dbc2:	2400      	movlt	r4, #0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	bfb5      	itete	lt
 800dbc8:	eba8 0603 	sublt.w	r6, r8, r3
 800dbcc:	9b07      	ldrge	r3, [sp, #28]
 800dbce:	2300      	movlt	r3, #0
 800dbd0:	4646      	movge	r6, r8
 800dbd2:	e730      	b.n	800da36 <_dtoa_r+0x71e>
 800dbd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dbd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dbd8:	4646      	mov	r6, r8
 800dbda:	e735      	b.n	800da48 <_dtoa_r+0x730>
 800dbdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbde:	e75c      	b.n	800da9a <_dtoa_r+0x782>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e788      	b.n	800daf6 <_dtoa_r+0x7de>
 800dbe4:	3fe00000 	.word	0x3fe00000
 800dbe8:	40240000 	.word	0x40240000
 800dbec:	40140000 	.word	0x40140000
 800dbf0:	9b02      	ldr	r3, [sp, #8]
 800dbf2:	e780      	b.n	800daf6 <_dtoa_r+0x7de>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbf8:	e782      	b.n	800db00 <_dtoa_r+0x7e8>
 800dbfa:	d099      	beq.n	800db30 <_dtoa_r+0x818>
 800dbfc:	9a08      	ldr	r2, [sp, #32]
 800dbfe:	331c      	adds	r3, #28
 800dc00:	441a      	add	r2, r3
 800dc02:	4498      	add	r8, r3
 800dc04:	441e      	add	r6, r3
 800dc06:	9208      	str	r2, [sp, #32]
 800dc08:	e792      	b.n	800db30 <_dtoa_r+0x818>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	e7f6      	b.n	800dbfc <_dtoa_r+0x8e4>
 800dc0e:	9b07      	ldr	r3, [sp, #28]
 800dc10:	9704      	str	r7, [sp, #16]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dc20      	bgt.n	800dc58 <_dtoa_r+0x940>
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	dd1e      	ble.n	800dc5c <_dtoa_r+0x944>
 800dc1e:	9b00      	ldr	r3, [sp, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f47f aec0 	bne.w	800d9a6 <_dtoa_r+0x68e>
 800dc26:	4621      	mov	r1, r4
 800dc28:	2205      	movs	r2, #5
 800dc2a:	4658      	mov	r0, fp
 800dc2c:	f000 fa9a 	bl	800e164 <__multadd>
 800dc30:	4601      	mov	r1, r0
 800dc32:	4604      	mov	r4, r0
 800dc34:	4648      	mov	r0, r9
 800dc36:	f000 fcad 	bl	800e594 <__mcmp>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	f77f aeb3 	ble.w	800d9a6 <_dtoa_r+0x68e>
 800dc40:	4656      	mov	r6, sl
 800dc42:	2331      	movs	r3, #49	@ 0x31
 800dc44:	f806 3b01 	strb.w	r3, [r6], #1
 800dc48:	9b04      	ldr	r3, [sp, #16]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	9304      	str	r3, [sp, #16]
 800dc4e:	e6ae      	b.n	800d9ae <_dtoa_r+0x696>
 800dc50:	9c07      	ldr	r4, [sp, #28]
 800dc52:	9704      	str	r7, [sp, #16]
 800dc54:	4625      	mov	r5, r4
 800dc56:	e7f3      	b.n	800dc40 <_dtoa_r+0x928>
 800dc58:	9b07      	ldr	r3, [sp, #28]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f000 8104 	beq.w	800de6c <_dtoa_r+0xb54>
 800dc64:	2e00      	cmp	r6, #0
 800dc66:	dd05      	ble.n	800dc74 <_dtoa_r+0x95c>
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4632      	mov	r2, r6
 800dc6c:	4658      	mov	r0, fp
 800dc6e:	f000 fc25 	bl	800e4bc <__lshift>
 800dc72:	4605      	mov	r5, r0
 800dc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d05a      	beq.n	800dd30 <_dtoa_r+0xa18>
 800dc7a:	6869      	ldr	r1, [r5, #4]
 800dc7c:	4658      	mov	r0, fp
 800dc7e:	f000 fa0f 	bl	800e0a0 <_Balloc>
 800dc82:	4606      	mov	r6, r0
 800dc84:	b928      	cbnz	r0, 800dc92 <_dtoa_r+0x97a>
 800dc86:	4b84      	ldr	r3, [pc, #528]	@ (800de98 <_dtoa_r+0xb80>)
 800dc88:	4602      	mov	r2, r0
 800dc8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dc8e:	f7ff bb5a 	b.w	800d346 <_dtoa_r+0x2e>
 800dc92:	692a      	ldr	r2, [r5, #16]
 800dc94:	3202      	adds	r2, #2
 800dc96:	0092      	lsls	r2, r2, #2
 800dc98:	f105 010c 	add.w	r1, r5, #12
 800dc9c:	300c      	adds	r0, #12
 800dc9e:	f7ff faa4 	bl	800d1ea <memcpy>
 800dca2:	2201      	movs	r2, #1
 800dca4:	4631      	mov	r1, r6
 800dca6:	4658      	mov	r0, fp
 800dca8:	f000 fc08 	bl	800e4bc <__lshift>
 800dcac:	f10a 0301 	add.w	r3, sl, #1
 800dcb0:	9307      	str	r3, [sp, #28]
 800dcb2:	9b00      	ldr	r3, [sp, #0]
 800dcb4:	4453      	add	r3, sl
 800dcb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcb8:	9b02      	ldr	r3, [sp, #8]
 800dcba:	f003 0301 	and.w	r3, r3, #1
 800dcbe:	462f      	mov	r7, r5
 800dcc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	9b07      	ldr	r3, [sp, #28]
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	4648      	mov	r0, r9
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	f7ff fa9a 	bl	800d206 <quorem>
 800dcd2:	4639      	mov	r1, r7
 800dcd4:	9002      	str	r0, [sp, #8]
 800dcd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dcda:	4648      	mov	r0, r9
 800dcdc:	f000 fc5a 	bl	800e594 <__mcmp>
 800dce0:	462a      	mov	r2, r5
 800dce2:	9008      	str	r0, [sp, #32]
 800dce4:	4621      	mov	r1, r4
 800dce6:	4658      	mov	r0, fp
 800dce8:	f000 fc70 	bl	800e5cc <__mdiff>
 800dcec:	68c2      	ldr	r2, [r0, #12]
 800dcee:	4606      	mov	r6, r0
 800dcf0:	bb02      	cbnz	r2, 800dd34 <_dtoa_r+0xa1c>
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	4648      	mov	r0, r9
 800dcf6:	f000 fc4d 	bl	800e594 <__mcmp>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	4631      	mov	r1, r6
 800dcfe:	4658      	mov	r0, fp
 800dd00:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd02:	f000 fa0d 	bl	800e120 <_Bfree>
 800dd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd0a:	9e07      	ldr	r6, [sp, #28]
 800dd0c:	ea43 0102 	orr.w	r1, r3, r2
 800dd10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd12:	4319      	orrs	r1, r3
 800dd14:	d110      	bne.n	800dd38 <_dtoa_r+0xa20>
 800dd16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd1a:	d029      	beq.n	800dd70 <_dtoa_r+0xa58>
 800dd1c:	9b08      	ldr	r3, [sp, #32]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	dd02      	ble.n	800dd28 <_dtoa_r+0xa10>
 800dd22:	9b02      	ldr	r3, [sp, #8]
 800dd24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dd28:	9b00      	ldr	r3, [sp, #0]
 800dd2a:	f883 8000 	strb.w	r8, [r3]
 800dd2e:	e63f      	b.n	800d9b0 <_dtoa_r+0x698>
 800dd30:	4628      	mov	r0, r5
 800dd32:	e7bb      	b.n	800dcac <_dtoa_r+0x994>
 800dd34:	2201      	movs	r2, #1
 800dd36:	e7e1      	b.n	800dcfc <_dtoa_r+0x9e4>
 800dd38:	9b08      	ldr	r3, [sp, #32]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db04      	blt.n	800dd48 <_dtoa_r+0xa30>
 800dd3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd40:	430b      	orrs	r3, r1
 800dd42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd44:	430b      	orrs	r3, r1
 800dd46:	d120      	bne.n	800dd8a <_dtoa_r+0xa72>
 800dd48:	2a00      	cmp	r2, #0
 800dd4a:	dded      	ble.n	800dd28 <_dtoa_r+0xa10>
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	2201      	movs	r2, #1
 800dd50:	4658      	mov	r0, fp
 800dd52:	f000 fbb3 	bl	800e4bc <__lshift>
 800dd56:	4621      	mov	r1, r4
 800dd58:	4681      	mov	r9, r0
 800dd5a:	f000 fc1b 	bl	800e594 <__mcmp>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	dc03      	bgt.n	800dd6a <_dtoa_r+0xa52>
 800dd62:	d1e1      	bne.n	800dd28 <_dtoa_r+0xa10>
 800dd64:	f018 0f01 	tst.w	r8, #1
 800dd68:	d0de      	beq.n	800dd28 <_dtoa_r+0xa10>
 800dd6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd6e:	d1d8      	bne.n	800dd22 <_dtoa_r+0xa0a>
 800dd70:	9a00      	ldr	r2, [sp, #0]
 800dd72:	2339      	movs	r3, #57	@ 0x39
 800dd74:	7013      	strb	r3, [r2, #0]
 800dd76:	4633      	mov	r3, r6
 800dd78:	461e      	mov	r6, r3
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dd80:	2a39      	cmp	r2, #57	@ 0x39
 800dd82:	d052      	beq.n	800de2a <_dtoa_r+0xb12>
 800dd84:	3201      	adds	r2, #1
 800dd86:	701a      	strb	r2, [r3, #0]
 800dd88:	e612      	b.n	800d9b0 <_dtoa_r+0x698>
 800dd8a:	2a00      	cmp	r2, #0
 800dd8c:	dd07      	ble.n	800dd9e <_dtoa_r+0xa86>
 800dd8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd92:	d0ed      	beq.n	800dd70 <_dtoa_r+0xa58>
 800dd94:	9a00      	ldr	r2, [sp, #0]
 800dd96:	f108 0301 	add.w	r3, r8, #1
 800dd9a:	7013      	strb	r3, [r2, #0]
 800dd9c:	e608      	b.n	800d9b0 <_dtoa_r+0x698>
 800dd9e:	9b07      	ldr	r3, [sp, #28]
 800dda0:	9a07      	ldr	r2, [sp, #28]
 800dda2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dda6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d028      	beq.n	800ddfe <_dtoa_r+0xae6>
 800ddac:	4649      	mov	r1, r9
 800ddae:	2300      	movs	r3, #0
 800ddb0:	220a      	movs	r2, #10
 800ddb2:	4658      	mov	r0, fp
 800ddb4:	f000 f9d6 	bl	800e164 <__multadd>
 800ddb8:	42af      	cmp	r7, r5
 800ddba:	4681      	mov	r9, r0
 800ddbc:	f04f 0300 	mov.w	r3, #0
 800ddc0:	f04f 020a 	mov.w	r2, #10
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	4658      	mov	r0, fp
 800ddc8:	d107      	bne.n	800ddda <_dtoa_r+0xac2>
 800ddca:	f000 f9cb 	bl	800e164 <__multadd>
 800ddce:	4607      	mov	r7, r0
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	9b07      	ldr	r3, [sp, #28]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	9307      	str	r3, [sp, #28]
 800ddd8:	e774      	b.n	800dcc4 <_dtoa_r+0x9ac>
 800ddda:	f000 f9c3 	bl	800e164 <__multadd>
 800ddde:	4629      	mov	r1, r5
 800dde0:	4607      	mov	r7, r0
 800dde2:	2300      	movs	r3, #0
 800dde4:	220a      	movs	r2, #10
 800dde6:	4658      	mov	r0, fp
 800dde8:	f000 f9bc 	bl	800e164 <__multadd>
 800ddec:	4605      	mov	r5, r0
 800ddee:	e7f0      	b.n	800ddd2 <_dtoa_r+0xaba>
 800ddf0:	9b00      	ldr	r3, [sp, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	bfcc      	ite	gt
 800ddf6:	461e      	movgt	r6, r3
 800ddf8:	2601      	movle	r6, #1
 800ddfa:	4456      	add	r6, sl
 800ddfc:	2700      	movs	r7, #0
 800ddfe:	4649      	mov	r1, r9
 800de00:	2201      	movs	r2, #1
 800de02:	4658      	mov	r0, fp
 800de04:	f000 fb5a 	bl	800e4bc <__lshift>
 800de08:	4621      	mov	r1, r4
 800de0a:	4681      	mov	r9, r0
 800de0c:	f000 fbc2 	bl	800e594 <__mcmp>
 800de10:	2800      	cmp	r0, #0
 800de12:	dcb0      	bgt.n	800dd76 <_dtoa_r+0xa5e>
 800de14:	d102      	bne.n	800de1c <_dtoa_r+0xb04>
 800de16:	f018 0f01 	tst.w	r8, #1
 800de1a:	d1ac      	bne.n	800dd76 <_dtoa_r+0xa5e>
 800de1c:	4633      	mov	r3, r6
 800de1e:	461e      	mov	r6, r3
 800de20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de24:	2a30      	cmp	r2, #48	@ 0x30
 800de26:	d0fa      	beq.n	800de1e <_dtoa_r+0xb06>
 800de28:	e5c2      	b.n	800d9b0 <_dtoa_r+0x698>
 800de2a:	459a      	cmp	sl, r3
 800de2c:	d1a4      	bne.n	800dd78 <_dtoa_r+0xa60>
 800de2e:	9b04      	ldr	r3, [sp, #16]
 800de30:	3301      	adds	r3, #1
 800de32:	9304      	str	r3, [sp, #16]
 800de34:	2331      	movs	r3, #49	@ 0x31
 800de36:	f88a 3000 	strb.w	r3, [sl]
 800de3a:	e5b9      	b.n	800d9b0 <_dtoa_r+0x698>
 800de3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800de9c <_dtoa_r+0xb84>
 800de42:	b11b      	cbz	r3, 800de4c <_dtoa_r+0xb34>
 800de44:	f10a 0308 	add.w	r3, sl, #8
 800de48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de4a:	6013      	str	r3, [r2, #0]
 800de4c:	4650      	mov	r0, sl
 800de4e:	b019      	add	sp, #100	@ 0x64
 800de50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de56:	2b01      	cmp	r3, #1
 800de58:	f77f ae37 	ble.w	800daca <_dtoa_r+0x7b2>
 800de5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800de60:	2001      	movs	r0, #1
 800de62:	e655      	b.n	800db10 <_dtoa_r+0x7f8>
 800de64:	9b00      	ldr	r3, [sp, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f77f aed6 	ble.w	800dc18 <_dtoa_r+0x900>
 800de6c:	4656      	mov	r6, sl
 800de6e:	4621      	mov	r1, r4
 800de70:	4648      	mov	r0, r9
 800de72:	f7ff f9c8 	bl	800d206 <quorem>
 800de76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de7a:	f806 8b01 	strb.w	r8, [r6], #1
 800de7e:	9b00      	ldr	r3, [sp, #0]
 800de80:	eba6 020a 	sub.w	r2, r6, sl
 800de84:	4293      	cmp	r3, r2
 800de86:	ddb3      	ble.n	800ddf0 <_dtoa_r+0xad8>
 800de88:	4649      	mov	r1, r9
 800de8a:	2300      	movs	r3, #0
 800de8c:	220a      	movs	r2, #10
 800de8e:	4658      	mov	r0, fp
 800de90:	f000 f968 	bl	800e164 <__multadd>
 800de94:	4681      	mov	r9, r0
 800de96:	e7ea      	b.n	800de6e <_dtoa_r+0xb56>
 800de98:	08011b10 	.word	0x08011b10
 800de9c:	08011a94 	.word	0x08011a94

0800dea0 <_free_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4605      	mov	r5, r0
 800dea4:	2900      	cmp	r1, #0
 800dea6:	d041      	beq.n	800df2c <_free_r+0x8c>
 800dea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deac:	1f0c      	subs	r4, r1, #4
 800deae:	2b00      	cmp	r3, #0
 800deb0:	bfb8      	it	lt
 800deb2:	18e4      	addlt	r4, r4, r3
 800deb4:	f000 f8e8 	bl	800e088 <__malloc_lock>
 800deb8:	4a1d      	ldr	r2, [pc, #116]	@ (800df30 <_free_r+0x90>)
 800deba:	6813      	ldr	r3, [r2, #0]
 800debc:	b933      	cbnz	r3, 800decc <_free_r+0x2c>
 800debe:	6063      	str	r3, [r4, #4]
 800dec0:	6014      	str	r4, [r2, #0]
 800dec2:	4628      	mov	r0, r5
 800dec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec8:	f000 b8e4 	b.w	800e094 <__malloc_unlock>
 800decc:	42a3      	cmp	r3, r4
 800dece:	d908      	bls.n	800dee2 <_free_r+0x42>
 800ded0:	6820      	ldr	r0, [r4, #0]
 800ded2:	1821      	adds	r1, r4, r0
 800ded4:	428b      	cmp	r3, r1
 800ded6:	bf01      	itttt	eq
 800ded8:	6819      	ldreq	r1, [r3, #0]
 800deda:	685b      	ldreq	r3, [r3, #4]
 800dedc:	1809      	addeq	r1, r1, r0
 800dede:	6021      	streq	r1, [r4, #0]
 800dee0:	e7ed      	b.n	800debe <_free_r+0x1e>
 800dee2:	461a      	mov	r2, r3
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	b10b      	cbz	r3, 800deec <_free_r+0x4c>
 800dee8:	42a3      	cmp	r3, r4
 800deea:	d9fa      	bls.n	800dee2 <_free_r+0x42>
 800deec:	6811      	ldr	r1, [r2, #0]
 800deee:	1850      	adds	r0, r2, r1
 800def0:	42a0      	cmp	r0, r4
 800def2:	d10b      	bne.n	800df0c <_free_r+0x6c>
 800def4:	6820      	ldr	r0, [r4, #0]
 800def6:	4401      	add	r1, r0
 800def8:	1850      	adds	r0, r2, r1
 800defa:	4283      	cmp	r3, r0
 800defc:	6011      	str	r1, [r2, #0]
 800defe:	d1e0      	bne.n	800dec2 <_free_r+0x22>
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	6053      	str	r3, [r2, #4]
 800df06:	4408      	add	r0, r1
 800df08:	6010      	str	r0, [r2, #0]
 800df0a:	e7da      	b.n	800dec2 <_free_r+0x22>
 800df0c:	d902      	bls.n	800df14 <_free_r+0x74>
 800df0e:	230c      	movs	r3, #12
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	e7d6      	b.n	800dec2 <_free_r+0x22>
 800df14:	6820      	ldr	r0, [r4, #0]
 800df16:	1821      	adds	r1, r4, r0
 800df18:	428b      	cmp	r3, r1
 800df1a:	bf04      	itt	eq
 800df1c:	6819      	ldreq	r1, [r3, #0]
 800df1e:	685b      	ldreq	r3, [r3, #4]
 800df20:	6063      	str	r3, [r4, #4]
 800df22:	bf04      	itt	eq
 800df24:	1809      	addeq	r1, r1, r0
 800df26:	6021      	streq	r1, [r4, #0]
 800df28:	6054      	str	r4, [r2, #4]
 800df2a:	e7ca      	b.n	800dec2 <_free_r+0x22>
 800df2c:	bd38      	pop	{r3, r4, r5, pc}
 800df2e:	bf00      	nop
 800df30:	200009bc 	.word	0x200009bc

0800df34 <malloc>:
 800df34:	4b02      	ldr	r3, [pc, #8]	@ (800df40 <malloc+0xc>)
 800df36:	4601      	mov	r1, r0
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	f000 b825 	b.w	800df88 <_malloc_r>
 800df3e:	bf00      	nop
 800df40:	20000058 	.word	0x20000058

0800df44 <sbrk_aligned>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	4e0f      	ldr	r6, [pc, #60]	@ (800df84 <sbrk_aligned+0x40>)
 800df48:	460c      	mov	r4, r1
 800df4a:	6831      	ldr	r1, [r6, #0]
 800df4c:	4605      	mov	r5, r0
 800df4e:	b911      	cbnz	r1, 800df56 <sbrk_aligned+0x12>
 800df50:	f000 fe46 	bl	800ebe0 <_sbrk_r>
 800df54:	6030      	str	r0, [r6, #0]
 800df56:	4621      	mov	r1, r4
 800df58:	4628      	mov	r0, r5
 800df5a:	f000 fe41 	bl	800ebe0 <_sbrk_r>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	d103      	bne.n	800df6a <sbrk_aligned+0x26>
 800df62:	f04f 34ff 	mov.w	r4, #4294967295
 800df66:	4620      	mov	r0, r4
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	1cc4      	adds	r4, r0, #3
 800df6c:	f024 0403 	bic.w	r4, r4, #3
 800df70:	42a0      	cmp	r0, r4
 800df72:	d0f8      	beq.n	800df66 <sbrk_aligned+0x22>
 800df74:	1a21      	subs	r1, r4, r0
 800df76:	4628      	mov	r0, r5
 800df78:	f000 fe32 	bl	800ebe0 <_sbrk_r>
 800df7c:	3001      	adds	r0, #1
 800df7e:	d1f2      	bne.n	800df66 <sbrk_aligned+0x22>
 800df80:	e7ef      	b.n	800df62 <sbrk_aligned+0x1e>
 800df82:	bf00      	nop
 800df84:	200009b8 	.word	0x200009b8

0800df88 <_malloc_r>:
 800df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df8c:	1ccd      	adds	r5, r1, #3
 800df8e:	f025 0503 	bic.w	r5, r5, #3
 800df92:	3508      	adds	r5, #8
 800df94:	2d0c      	cmp	r5, #12
 800df96:	bf38      	it	cc
 800df98:	250c      	movcc	r5, #12
 800df9a:	2d00      	cmp	r5, #0
 800df9c:	4606      	mov	r6, r0
 800df9e:	db01      	blt.n	800dfa4 <_malloc_r+0x1c>
 800dfa0:	42a9      	cmp	r1, r5
 800dfa2:	d904      	bls.n	800dfae <_malloc_r+0x26>
 800dfa4:	230c      	movs	r3, #12
 800dfa6:	6033      	str	r3, [r6, #0]
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e084 <_malloc_r+0xfc>
 800dfb2:	f000 f869 	bl	800e088 <__malloc_lock>
 800dfb6:	f8d8 3000 	ldr.w	r3, [r8]
 800dfba:	461c      	mov	r4, r3
 800dfbc:	bb44      	cbnz	r4, 800e010 <_malloc_r+0x88>
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	f7ff ffbf 	bl	800df44 <sbrk_aligned>
 800dfc6:	1c43      	adds	r3, r0, #1
 800dfc8:	4604      	mov	r4, r0
 800dfca:	d158      	bne.n	800e07e <_malloc_r+0xf6>
 800dfcc:	f8d8 4000 	ldr.w	r4, [r8]
 800dfd0:	4627      	mov	r7, r4
 800dfd2:	2f00      	cmp	r7, #0
 800dfd4:	d143      	bne.n	800e05e <_malloc_r+0xd6>
 800dfd6:	2c00      	cmp	r4, #0
 800dfd8:	d04b      	beq.n	800e072 <_malloc_r+0xea>
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4630      	mov	r0, r6
 800dfe0:	eb04 0903 	add.w	r9, r4, r3
 800dfe4:	f000 fdfc 	bl	800ebe0 <_sbrk_r>
 800dfe8:	4581      	cmp	r9, r0
 800dfea:	d142      	bne.n	800e072 <_malloc_r+0xea>
 800dfec:	6821      	ldr	r1, [r4, #0]
 800dfee:	1a6d      	subs	r5, r5, r1
 800dff0:	4629      	mov	r1, r5
 800dff2:	4630      	mov	r0, r6
 800dff4:	f7ff ffa6 	bl	800df44 <sbrk_aligned>
 800dff8:	3001      	adds	r0, #1
 800dffa:	d03a      	beq.n	800e072 <_malloc_r+0xea>
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	442b      	add	r3, r5
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	f8d8 3000 	ldr.w	r3, [r8]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	bb62      	cbnz	r2, 800e064 <_malloc_r+0xdc>
 800e00a:	f8c8 7000 	str.w	r7, [r8]
 800e00e:	e00f      	b.n	800e030 <_malloc_r+0xa8>
 800e010:	6822      	ldr	r2, [r4, #0]
 800e012:	1b52      	subs	r2, r2, r5
 800e014:	d420      	bmi.n	800e058 <_malloc_r+0xd0>
 800e016:	2a0b      	cmp	r2, #11
 800e018:	d917      	bls.n	800e04a <_malloc_r+0xc2>
 800e01a:	1961      	adds	r1, r4, r5
 800e01c:	42a3      	cmp	r3, r4
 800e01e:	6025      	str	r5, [r4, #0]
 800e020:	bf18      	it	ne
 800e022:	6059      	strne	r1, [r3, #4]
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	bf08      	it	eq
 800e028:	f8c8 1000 	streq.w	r1, [r8]
 800e02c:	5162      	str	r2, [r4, r5]
 800e02e:	604b      	str	r3, [r1, #4]
 800e030:	4630      	mov	r0, r6
 800e032:	f000 f82f 	bl	800e094 <__malloc_unlock>
 800e036:	f104 000b 	add.w	r0, r4, #11
 800e03a:	1d23      	adds	r3, r4, #4
 800e03c:	f020 0007 	bic.w	r0, r0, #7
 800e040:	1ac2      	subs	r2, r0, r3
 800e042:	bf1c      	itt	ne
 800e044:	1a1b      	subne	r3, r3, r0
 800e046:	50a3      	strne	r3, [r4, r2]
 800e048:	e7af      	b.n	800dfaa <_malloc_r+0x22>
 800e04a:	6862      	ldr	r2, [r4, #4]
 800e04c:	42a3      	cmp	r3, r4
 800e04e:	bf0c      	ite	eq
 800e050:	f8c8 2000 	streq.w	r2, [r8]
 800e054:	605a      	strne	r2, [r3, #4]
 800e056:	e7eb      	b.n	800e030 <_malloc_r+0xa8>
 800e058:	4623      	mov	r3, r4
 800e05a:	6864      	ldr	r4, [r4, #4]
 800e05c:	e7ae      	b.n	800dfbc <_malloc_r+0x34>
 800e05e:	463c      	mov	r4, r7
 800e060:	687f      	ldr	r7, [r7, #4]
 800e062:	e7b6      	b.n	800dfd2 <_malloc_r+0x4a>
 800e064:	461a      	mov	r2, r3
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	42a3      	cmp	r3, r4
 800e06a:	d1fb      	bne.n	800e064 <_malloc_r+0xdc>
 800e06c:	2300      	movs	r3, #0
 800e06e:	6053      	str	r3, [r2, #4]
 800e070:	e7de      	b.n	800e030 <_malloc_r+0xa8>
 800e072:	230c      	movs	r3, #12
 800e074:	6033      	str	r3, [r6, #0]
 800e076:	4630      	mov	r0, r6
 800e078:	f000 f80c 	bl	800e094 <__malloc_unlock>
 800e07c:	e794      	b.n	800dfa8 <_malloc_r+0x20>
 800e07e:	6005      	str	r5, [r0, #0]
 800e080:	e7d6      	b.n	800e030 <_malloc_r+0xa8>
 800e082:	bf00      	nop
 800e084:	200009bc 	.word	0x200009bc

0800e088 <__malloc_lock>:
 800e088:	4801      	ldr	r0, [pc, #4]	@ (800e090 <__malloc_lock+0x8>)
 800e08a:	f7ff b8ac 	b.w	800d1e6 <__retarget_lock_acquire_recursive>
 800e08e:	bf00      	nop
 800e090:	200009b4 	.word	0x200009b4

0800e094 <__malloc_unlock>:
 800e094:	4801      	ldr	r0, [pc, #4]	@ (800e09c <__malloc_unlock+0x8>)
 800e096:	f7ff b8a7 	b.w	800d1e8 <__retarget_lock_release_recursive>
 800e09a:	bf00      	nop
 800e09c:	200009b4 	.word	0x200009b4

0800e0a0 <_Balloc>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	69c6      	ldr	r6, [r0, #28]
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	460d      	mov	r5, r1
 800e0a8:	b976      	cbnz	r6, 800e0c8 <_Balloc+0x28>
 800e0aa:	2010      	movs	r0, #16
 800e0ac:	f7ff ff42 	bl	800df34 <malloc>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	61e0      	str	r0, [r4, #28]
 800e0b4:	b920      	cbnz	r0, 800e0c0 <_Balloc+0x20>
 800e0b6:	4b18      	ldr	r3, [pc, #96]	@ (800e118 <_Balloc+0x78>)
 800e0b8:	4818      	ldr	r0, [pc, #96]	@ (800e11c <_Balloc+0x7c>)
 800e0ba:	216b      	movs	r1, #107	@ 0x6b
 800e0bc:	f000 fda0 	bl	800ec00 <__assert_func>
 800e0c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c4:	6006      	str	r6, [r0, #0]
 800e0c6:	60c6      	str	r6, [r0, #12]
 800e0c8:	69e6      	ldr	r6, [r4, #28]
 800e0ca:	68f3      	ldr	r3, [r6, #12]
 800e0cc:	b183      	cbz	r3, 800e0f0 <_Balloc+0x50>
 800e0ce:	69e3      	ldr	r3, [r4, #28]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0d6:	b9b8      	cbnz	r0, 800e108 <_Balloc+0x68>
 800e0d8:	2101      	movs	r1, #1
 800e0da:	fa01 f605 	lsl.w	r6, r1, r5
 800e0de:	1d72      	adds	r2, r6, #5
 800e0e0:	0092      	lsls	r2, r2, #2
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f000 fdaa 	bl	800ec3c <_calloc_r>
 800e0e8:	b160      	cbz	r0, 800e104 <_Balloc+0x64>
 800e0ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0ee:	e00e      	b.n	800e10e <_Balloc+0x6e>
 800e0f0:	2221      	movs	r2, #33	@ 0x21
 800e0f2:	2104      	movs	r1, #4
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f000 fda1 	bl	800ec3c <_calloc_r>
 800e0fa:	69e3      	ldr	r3, [r4, #28]
 800e0fc:	60f0      	str	r0, [r6, #12]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1e4      	bne.n	800e0ce <_Balloc+0x2e>
 800e104:	2000      	movs	r0, #0
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	6802      	ldr	r2, [r0, #0]
 800e10a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e10e:	2300      	movs	r3, #0
 800e110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e114:	e7f7      	b.n	800e106 <_Balloc+0x66>
 800e116:	bf00      	nop
 800e118:	08011aa1 	.word	0x08011aa1
 800e11c:	08011b21 	.word	0x08011b21

0800e120 <_Bfree>:
 800e120:	b570      	push	{r4, r5, r6, lr}
 800e122:	69c6      	ldr	r6, [r0, #28]
 800e124:	4605      	mov	r5, r0
 800e126:	460c      	mov	r4, r1
 800e128:	b976      	cbnz	r6, 800e148 <_Bfree+0x28>
 800e12a:	2010      	movs	r0, #16
 800e12c:	f7ff ff02 	bl	800df34 <malloc>
 800e130:	4602      	mov	r2, r0
 800e132:	61e8      	str	r0, [r5, #28]
 800e134:	b920      	cbnz	r0, 800e140 <_Bfree+0x20>
 800e136:	4b09      	ldr	r3, [pc, #36]	@ (800e15c <_Bfree+0x3c>)
 800e138:	4809      	ldr	r0, [pc, #36]	@ (800e160 <_Bfree+0x40>)
 800e13a:	218f      	movs	r1, #143	@ 0x8f
 800e13c:	f000 fd60 	bl	800ec00 <__assert_func>
 800e140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e144:	6006      	str	r6, [r0, #0]
 800e146:	60c6      	str	r6, [r0, #12]
 800e148:	b13c      	cbz	r4, 800e15a <_Bfree+0x3a>
 800e14a:	69eb      	ldr	r3, [r5, #28]
 800e14c:	6862      	ldr	r2, [r4, #4]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e154:	6021      	str	r1, [r4, #0]
 800e156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e15a:	bd70      	pop	{r4, r5, r6, pc}
 800e15c:	08011aa1 	.word	0x08011aa1
 800e160:	08011b21 	.word	0x08011b21

0800e164 <__multadd>:
 800e164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e168:	690d      	ldr	r5, [r1, #16]
 800e16a:	4607      	mov	r7, r0
 800e16c:	460c      	mov	r4, r1
 800e16e:	461e      	mov	r6, r3
 800e170:	f101 0c14 	add.w	ip, r1, #20
 800e174:	2000      	movs	r0, #0
 800e176:	f8dc 3000 	ldr.w	r3, [ip]
 800e17a:	b299      	uxth	r1, r3
 800e17c:	fb02 6101 	mla	r1, r2, r1, r6
 800e180:	0c1e      	lsrs	r6, r3, #16
 800e182:	0c0b      	lsrs	r3, r1, #16
 800e184:	fb02 3306 	mla	r3, r2, r6, r3
 800e188:	b289      	uxth	r1, r1
 800e18a:	3001      	adds	r0, #1
 800e18c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e190:	4285      	cmp	r5, r0
 800e192:	f84c 1b04 	str.w	r1, [ip], #4
 800e196:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e19a:	dcec      	bgt.n	800e176 <__multadd+0x12>
 800e19c:	b30e      	cbz	r6, 800e1e2 <__multadd+0x7e>
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	42ab      	cmp	r3, r5
 800e1a2:	dc19      	bgt.n	800e1d8 <__multadd+0x74>
 800e1a4:	6861      	ldr	r1, [r4, #4]
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	3101      	adds	r1, #1
 800e1aa:	f7ff ff79 	bl	800e0a0 <_Balloc>
 800e1ae:	4680      	mov	r8, r0
 800e1b0:	b928      	cbnz	r0, 800e1be <__multadd+0x5a>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800e1e8 <__multadd+0x84>)
 800e1b6:	480d      	ldr	r0, [pc, #52]	@ (800e1ec <__multadd+0x88>)
 800e1b8:	21ba      	movs	r1, #186	@ 0xba
 800e1ba:	f000 fd21 	bl	800ec00 <__assert_func>
 800e1be:	6922      	ldr	r2, [r4, #16]
 800e1c0:	3202      	adds	r2, #2
 800e1c2:	f104 010c 	add.w	r1, r4, #12
 800e1c6:	0092      	lsls	r2, r2, #2
 800e1c8:	300c      	adds	r0, #12
 800e1ca:	f7ff f80e 	bl	800d1ea <memcpy>
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f7ff ffa5 	bl	800e120 <_Bfree>
 800e1d6:	4644      	mov	r4, r8
 800e1d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1dc:	3501      	adds	r5, #1
 800e1de:	615e      	str	r6, [r3, #20]
 800e1e0:	6125      	str	r5, [r4, #16]
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1e8:	08011b10 	.word	0x08011b10
 800e1ec:	08011b21 	.word	0x08011b21

0800e1f0 <__hi0bits>:
 800e1f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	bf36      	itet	cc
 800e1f8:	0403      	lslcc	r3, r0, #16
 800e1fa:	2000      	movcs	r0, #0
 800e1fc:	2010      	movcc	r0, #16
 800e1fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e202:	bf3c      	itt	cc
 800e204:	021b      	lslcc	r3, r3, #8
 800e206:	3008      	addcc	r0, #8
 800e208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e20c:	bf3c      	itt	cc
 800e20e:	011b      	lslcc	r3, r3, #4
 800e210:	3004      	addcc	r0, #4
 800e212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e216:	bf3c      	itt	cc
 800e218:	009b      	lslcc	r3, r3, #2
 800e21a:	3002      	addcc	r0, #2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	db05      	blt.n	800e22c <__hi0bits+0x3c>
 800e220:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e224:	f100 0001 	add.w	r0, r0, #1
 800e228:	bf08      	it	eq
 800e22a:	2020      	moveq	r0, #32
 800e22c:	4770      	bx	lr

0800e22e <__lo0bits>:
 800e22e:	6803      	ldr	r3, [r0, #0]
 800e230:	4602      	mov	r2, r0
 800e232:	f013 0007 	ands.w	r0, r3, #7
 800e236:	d00b      	beq.n	800e250 <__lo0bits+0x22>
 800e238:	07d9      	lsls	r1, r3, #31
 800e23a:	d421      	bmi.n	800e280 <__lo0bits+0x52>
 800e23c:	0798      	lsls	r0, r3, #30
 800e23e:	bf49      	itett	mi
 800e240:	085b      	lsrmi	r3, r3, #1
 800e242:	089b      	lsrpl	r3, r3, #2
 800e244:	2001      	movmi	r0, #1
 800e246:	6013      	strmi	r3, [r2, #0]
 800e248:	bf5c      	itt	pl
 800e24a:	6013      	strpl	r3, [r2, #0]
 800e24c:	2002      	movpl	r0, #2
 800e24e:	4770      	bx	lr
 800e250:	b299      	uxth	r1, r3
 800e252:	b909      	cbnz	r1, 800e258 <__lo0bits+0x2a>
 800e254:	0c1b      	lsrs	r3, r3, #16
 800e256:	2010      	movs	r0, #16
 800e258:	b2d9      	uxtb	r1, r3
 800e25a:	b909      	cbnz	r1, 800e260 <__lo0bits+0x32>
 800e25c:	3008      	adds	r0, #8
 800e25e:	0a1b      	lsrs	r3, r3, #8
 800e260:	0719      	lsls	r1, r3, #28
 800e262:	bf04      	itt	eq
 800e264:	091b      	lsreq	r3, r3, #4
 800e266:	3004      	addeq	r0, #4
 800e268:	0799      	lsls	r1, r3, #30
 800e26a:	bf04      	itt	eq
 800e26c:	089b      	lsreq	r3, r3, #2
 800e26e:	3002      	addeq	r0, #2
 800e270:	07d9      	lsls	r1, r3, #31
 800e272:	d403      	bmi.n	800e27c <__lo0bits+0x4e>
 800e274:	085b      	lsrs	r3, r3, #1
 800e276:	f100 0001 	add.w	r0, r0, #1
 800e27a:	d003      	beq.n	800e284 <__lo0bits+0x56>
 800e27c:	6013      	str	r3, [r2, #0]
 800e27e:	4770      	bx	lr
 800e280:	2000      	movs	r0, #0
 800e282:	4770      	bx	lr
 800e284:	2020      	movs	r0, #32
 800e286:	4770      	bx	lr

0800e288 <__i2b>:
 800e288:	b510      	push	{r4, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	2101      	movs	r1, #1
 800e28e:	f7ff ff07 	bl	800e0a0 <_Balloc>
 800e292:	4602      	mov	r2, r0
 800e294:	b928      	cbnz	r0, 800e2a2 <__i2b+0x1a>
 800e296:	4b05      	ldr	r3, [pc, #20]	@ (800e2ac <__i2b+0x24>)
 800e298:	4805      	ldr	r0, [pc, #20]	@ (800e2b0 <__i2b+0x28>)
 800e29a:	f240 1145 	movw	r1, #325	@ 0x145
 800e29e:	f000 fcaf 	bl	800ec00 <__assert_func>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	6144      	str	r4, [r0, #20]
 800e2a6:	6103      	str	r3, [r0, #16]
 800e2a8:	bd10      	pop	{r4, pc}
 800e2aa:	bf00      	nop
 800e2ac:	08011b10 	.word	0x08011b10
 800e2b0:	08011b21 	.word	0x08011b21

0800e2b4 <__multiply>:
 800e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	690a      	ldr	r2, [r1, #16]
 800e2bc:	6923      	ldr	r3, [r4, #16]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	bfa8      	it	ge
 800e2c2:	4623      	movge	r3, r4
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	bfa4      	itt	ge
 800e2c8:	460c      	movge	r4, r1
 800e2ca:	461f      	movge	r7, r3
 800e2cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e2d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e2d4:	68a3      	ldr	r3, [r4, #8]
 800e2d6:	6861      	ldr	r1, [r4, #4]
 800e2d8:	eb0a 0609 	add.w	r6, sl, r9
 800e2dc:	42b3      	cmp	r3, r6
 800e2de:	b085      	sub	sp, #20
 800e2e0:	bfb8      	it	lt
 800e2e2:	3101      	addlt	r1, #1
 800e2e4:	f7ff fedc 	bl	800e0a0 <_Balloc>
 800e2e8:	b930      	cbnz	r0, 800e2f8 <__multiply+0x44>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	4b44      	ldr	r3, [pc, #272]	@ (800e400 <__multiply+0x14c>)
 800e2ee:	4845      	ldr	r0, [pc, #276]	@ (800e404 <__multiply+0x150>)
 800e2f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e2f4:	f000 fc84 	bl	800ec00 <__assert_func>
 800e2f8:	f100 0514 	add.w	r5, r0, #20
 800e2fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e300:	462b      	mov	r3, r5
 800e302:	2200      	movs	r2, #0
 800e304:	4543      	cmp	r3, r8
 800e306:	d321      	bcc.n	800e34c <__multiply+0x98>
 800e308:	f107 0114 	add.w	r1, r7, #20
 800e30c:	f104 0214 	add.w	r2, r4, #20
 800e310:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e314:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e318:	9302      	str	r3, [sp, #8]
 800e31a:	1b13      	subs	r3, r2, r4
 800e31c:	3b15      	subs	r3, #21
 800e31e:	f023 0303 	bic.w	r3, r3, #3
 800e322:	3304      	adds	r3, #4
 800e324:	f104 0715 	add.w	r7, r4, #21
 800e328:	42ba      	cmp	r2, r7
 800e32a:	bf38      	it	cc
 800e32c:	2304      	movcc	r3, #4
 800e32e:	9301      	str	r3, [sp, #4]
 800e330:	9b02      	ldr	r3, [sp, #8]
 800e332:	9103      	str	r1, [sp, #12]
 800e334:	428b      	cmp	r3, r1
 800e336:	d80c      	bhi.n	800e352 <__multiply+0x9e>
 800e338:	2e00      	cmp	r6, #0
 800e33a:	dd03      	ble.n	800e344 <__multiply+0x90>
 800e33c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e340:	2b00      	cmp	r3, #0
 800e342:	d05b      	beq.n	800e3fc <__multiply+0x148>
 800e344:	6106      	str	r6, [r0, #16]
 800e346:	b005      	add	sp, #20
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34c:	f843 2b04 	str.w	r2, [r3], #4
 800e350:	e7d8      	b.n	800e304 <__multiply+0x50>
 800e352:	f8b1 a000 	ldrh.w	sl, [r1]
 800e356:	f1ba 0f00 	cmp.w	sl, #0
 800e35a:	d024      	beq.n	800e3a6 <__multiply+0xf2>
 800e35c:	f104 0e14 	add.w	lr, r4, #20
 800e360:	46a9      	mov	r9, r5
 800e362:	f04f 0c00 	mov.w	ip, #0
 800e366:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e36a:	f8d9 3000 	ldr.w	r3, [r9]
 800e36e:	fa1f fb87 	uxth.w	fp, r7
 800e372:	b29b      	uxth	r3, r3
 800e374:	fb0a 330b 	mla	r3, sl, fp, r3
 800e378:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e37c:	f8d9 7000 	ldr.w	r7, [r9]
 800e380:	4463      	add	r3, ip
 800e382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e386:	fb0a c70b 	mla	r7, sl, fp, ip
 800e38a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e38e:	b29b      	uxth	r3, r3
 800e390:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e394:	4572      	cmp	r2, lr
 800e396:	f849 3b04 	str.w	r3, [r9], #4
 800e39a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e39e:	d8e2      	bhi.n	800e366 <__multiply+0xb2>
 800e3a0:	9b01      	ldr	r3, [sp, #4]
 800e3a2:	f845 c003 	str.w	ip, [r5, r3]
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3ac:	3104      	adds	r1, #4
 800e3ae:	f1b9 0f00 	cmp.w	r9, #0
 800e3b2:	d021      	beq.n	800e3f8 <__multiply+0x144>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	f104 0c14 	add.w	ip, r4, #20
 800e3ba:	46ae      	mov	lr, r5
 800e3bc:	f04f 0a00 	mov.w	sl, #0
 800e3c0:	f8bc b000 	ldrh.w	fp, [ip]
 800e3c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e3c8:	fb09 770b 	mla	r7, r9, fp, r7
 800e3cc:	4457      	add	r7, sl
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3d4:	f84e 3b04 	str.w	r3, [lr], #4
 800e3d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3e0:	f8be 3000 	ldrh.w	r3, [lr]
 800e3e4:	fb09 330a 	mla	r3, r9, sl, r3
 800e3e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e3ec:	4562      	cmp	r2, ip
 800e3ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3f2:	d8e5      	bhi.n	800e3c0 <__multiply+0x10c>
 800e3f4:	9f01      	ldr	r7, [sp, #4]
 800e3f6:	51eb      	str	r3, [r5, r7]
 800e3f8:	3504      	adds	r5, #4
 800e3fa:	e799      	b.n	800e330 <__multiply+0x7c>
 800e3fc:	3e01      	subs	r6, #1
 800e3fe:	e79b      	b.n	800e338 <__multiply+0x84>
 800e400:	08011b10 	.word	0x08011b10
 800e404:	08011b21 	.word	0x08011b21

0800e408 <__pow5mult>:
 800e408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e40c:	4615      	mov	r5, r2
 800e40e:	f012 0203 	ands.w	r2, r2, #3
 800e412:	4607      	mov	r7, r0
 800e414:	460e      	mov	r6, r1
 800e416:	d007      	beq.n	800e428 <__pow5mult+0x20>
 800e418:	4c25      	ldr	r4, [pc, #148]	@ (800e4b0 <__pow5mult+0xa8>)
 800e41a:	3a01      	subs	r2, #1
 800e41c:	2300      	movs	r3, #0
 800e41e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e422:	f7ff fe9f 	bl	800e164 <__multadd>
 800e426:	4606      	mov	r6, r0
 800e428:	10ad      	asrs	r5, r5, #2
 800e42a:	d03d      	beq.n	800e4a8 <__pow5mult+0xa0>
 800e42c:	69fc      	ldr	r4, [r7, #28]
 800e42e:	b97c      	cbnz	r4, 800e450 <__pow5mult+0x48>
 800e430:	2010      	movs	r0, #16
 800e432:	f7ff fd7f 	bl	800df34 <malloc>
 800e436:	4602      	mov	r2, r0
 800e438:	61f8      	str	r0, [r7, #28]
 800e43a:	b928      	cbnz	r0, 800e448 <__pow5mult+0x40>
 800e43c:	4b1d      	ldr	r3, [pc, #116]	@ (800e4b4 <__pow5mult+0xac>)
 800e43e:	481e      	ldr	r0, [pc, #120]	@ (800e4b8 <__pow5mult+0xb0>)
 800e440:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e444:	f000 fbdc 	bl	800ec00 <__assert_func>
 800e448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e44c:	6004      	str	r4, [r0, #0]
 800e44e:	60c4      	str	r4, [r0, #12]
 800e450:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e458:	b94c      	cbnz	r4, 800e46e <__pow5mult+0x66>
 800e45a:	f240 2171 	movw	r1, #625	@ 0x271
 800e45e:	4638      	mov	r0, r7
 800e460:	f7ff ff12 	bl	800e288 <__i2b>
 800e464:	2300      	movs	r3, #0
 800e466:	f8c8 0008 	str.w	r0, [r8, #8]
 800e46a:	4604      	mov	r4, r0
 800e46c:	6003      	str	r3, [r0, #0]
 800e46e:	f04f 0900 	mov.w	r9, #0
 800e472:	07eb      	lsls	r3, r5, #31
 800e474:	d50a      	bpl.n	800e48c <__pow5mult+0x84>
 800e476:	4631      	mov	r1, r6
 800e478:	4622      	mov	r2, r4
 800e47a:	4638      	mov	r0, r7
 800e47c:	f7ff ff1a 	bl	800e2b4 <__multiply>
 800e480:	4631      	mov	r1, r6
 800e482:	4680      	mov	r8, r0
 800e484:	4638      	mov	r0, r7
 800e486:	f7ff fe4b 	bl	800e120 <_Bfree>
 800e48a:	4646      	mov	r6, r8
 800e48c:	106d      	asrs	r5, r5, #1
 800e48e:	d00b      	beq.n	800e4a8 <__pow5mult+0xa0>
 800e490:	6820      	ldr	r0, [r4, #0]
 800e492:	b938      	cbnz	r0, 800e4a4 <__pow5mult+0x9c>
 800e494:	4622      	mov	r2, r4
 800e496:	4621      	mov	r1, r4
 800e498:	4638      	mov	r0, r7
 800e49a:	f7ff ff0b 	bl	800e2b4 <__multiply>
 800e49e:	6020      	str	r0, [r4, #0]
 800e4a0:	f8c0 9000 	str.w	r9, [r0]
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	e7e4      	b.n	800e472 <__pow5mult+0x6a>
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ae:	bf00      	nop
 800e4b0:	08011b7c 	.word	0x08011b7c
 800e4b4:	08011aa1 	.word	0x08011aa1
 800e4b8:	08011b21 	.word	0x08011b21

0800e4bc <__lshift>:
 800e4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	6849      	ldr	r1, [r1, #4]
 800e4c4:	6923      	ldr	r3, [r4, #16]
 800e4c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4ca:	68a3      	ldr	r3, [r4, #8]
 800e4cc:	4607      	mov	r7, r0
 800e4ce:	4691      	mov	r9, r2
 800e4d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4d4:	f108 0601 	add.w	r6, r8, #1
 800e4d8:	42b3      	cmp	r3, r6
 800e4da:	db0b      	blt.n	800e4f4 <__lshift+0x38>
 800e4dc:	4638      	mov	r0, r7
 800e4de:	f7ff fddf 	bl	800e0a0 <_Balloc>
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	b948      	cbnz	r0, 800e4fa <__lshift+0x3e>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	4b28      	ldr	r3, [pc, #160]	@ (800e58c <__lshift+0xd0>)
 800e4ea:	4829      	ldr	r0, [pc, #164]	@ (800e590 <__lshift+0xd4>)
 800e4ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e4f0:	f000 fb86 	bl	800ec00 <__assert_func>
 800e4f4:	3101      	adds	r1, #1
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	e7ee      	b.n	800e4d8 <__lshift+0x1c>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f100 0114 	add.w	r1, r0, #20
 800e500:	f100 0210 	add.w	r2, r0, #16
 800e504:	4618      	mov	r0, r3
 800e506:	4553      	cmp	r3, sl
 800e508:	db33      	blt.n	800e572 <__lshift+0xb6>
 800e50a:	6920      	ldr	r0, [r4, #16]
 800e50c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e510:	f104 0314 	add.w	r3, r4, #20
 800e514:	f019 091f 	ands.w	r9, r9, #31
 800e518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e51c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e520:	d02b      	beq.n	800e57a <__lshift+0xbe>
 800e522:	f1c9 0e20 	rsb	lr, r9, #32
 800e526:	468a      	mov	sl, r1
 800e528:	2200      	movs	r2, #0
 800e52a:	6818      	ldr	r0, [r3, #0]
 800e52c:	fa00 f009 	lsl.w	r0, r0, r9
 800e530:	4310      	orrs	r0, r2
 800e532:	f84a 0b04 	str.w	r0, [sl], #4
 800e536:	f853 2b04 	ldr.w	r2, [r3], #4
 800e53a:	459c      	cmp	ip, r3
 800e53c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e540:	d8f3      	bhi.n	800e52a <__lshift+0x6e>
 800e542:	ebac 0304 	sub.w	r3, ip, r4
 800e546:	3b15      	subs	r3, #21
 800e548:	f023 0303 	bic.w	r3, r3, #3
 800e54c:	3304      	adds	r3, #4
 800e54e:	f104 0015 	add.w	r0, r4, #21
 800e552:	4584      	cmp	ip, r0
 800e554:	bf38      	it	cc
 800e556:	2304      	movcc	r3, #4
 800e558:	50ca      	str	r2, [r1, r3]
 800e55a:	b10a      	cbz	r2, 800e560 <__lshift+0xa4>
 800e55c:	f108 0602 	add.w	r6, r8, #2
 800e560:	3e01      	subs	r6, #1
 800e562:	4638      	mov	r0, r7
 800e564:	612e      	str	r6, [r5, #16]
 800e566:	4621      	mov	r1, r4
 800e568:	f7ff fdda 	bl	800e120 <_Bfree>
 800e56c:	4628      	mov	r0, r5
 800e56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e572:	f842 0f04 	str.w	r0, [r2, #4]!
 800e576:	3301      	adds	r3, #1
 800e578:	e7c5      	b.n	800e506 <__lshift+0x4a>
 800e57a:	3904      	subs	r1, #4
 800e57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e580:	f841 2f04 	str.w	r2, [r1, #4]!
 800e584:	459c      	cmp	ip, r3
 800e586:	d8f9      	bhi.n	800e57c <__lshift+0xc0>
 800e588:	e7ea      	b.n	800e560 <__lshift+0xa4>
 800e58a:	bf00      	nop
 800e58c:	08011b10 	.word	0x08011b10
 800e590:	08011b21 	.word	0x08011b21

0800e594 <__mcmp>:
 800e594:	690a      	ldr	r2, [r1, #16]
 800e596:	4603      	mov	r3, r0
 800e598:	6900      	ldr	r0, [r0, #16]
 800e59a:	1a80      	subs	r0, r0, r2
 800e59c:	b530      	push	{r4, r5, lr}
 800e59e:	d10e      	bne.n	800e5be <__mcmp+0x2a>
 800e5a0:	3314      	adds	r3, #20
 800e5a2:	3114      	adds	r1, #20
 800e5a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5b4:	4295      	cmp	r5, r2
 800e5b6:	d003      	beq.n	800e5c0 <__mcmp+0x2c>
 800e5b8:	d205      	bcs.n	800e5c6 <__mcmp+0x32>
 800e5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e5be:	bd30      	pop	{r4, r5, pc}
 800e5c0:	42a3      	cmp	r3, r4
 800e5c2:	d3f3      	bcc.n	800e5ac <__mcmp+0x18>
 800e5c4:	e7fb      	b.n	800e5be <__mcmp+0x2a>
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	e7f9      	b.n	800e5be <__mcmp+0x2a>
	...

0800e5cc <__mdiff>:
 800e5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d0:	4689      	mov	r9, r1
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4648      	mov	r0, r9
 800e5d8:	4614      	mov	r4, r2
 800e5da:	f7ff ffdb 	bl	800e594 <__mcmp>
 800e5de:	1e05      	subs	r5, r0, #0
 800e5e0:	d112      	bne.n	800e608 <__mdiff+0x3c>
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f7ff fd5b 	bl	800e0a0 <_Balloc>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	b928      	cbnz	r0, 800e5fa <__mdiff+0x2e>
 800e5ee:	4b3f      	ldr	r3, [pc, #252]	@ (800e6ec <__mdiff+0x120>)
 800e5f0:	f240 2137 	movw	r1, #567	@ 0x237
 800e5f4:	483e      	ldr	r0, [pc, #248]	@ (800e6f0 <__mdiff+0x124>)
 800e5f6:	f000 fb03 	bl	800ec00 <__assert_func>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e600:	4610      	mov	r0, r2
 800e602:	b003      	add	sp, #12
 800e604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e608:	bfbc      	itt	lt
 800e60a:	464b      	movlt	r3, r9
 800e60c:	46a1      	movlt	r9, r4
 800e60e:	4630      	mov	r0, r6
 800e610:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e614:	bfba      	itte	lt
 800e616:	461c      	movlt	r4, r3
 800e618:	2501      	movlt	r5, #1
 800e61a:	2500      	movge	r5, #0
 800e61c:	f7ff fd40 	bl	800e0a0 <_Balloc>
 800e620:	4602      	mov	r2, r0
 800e622:	b918      	cbnz	r0, 800e62c <__mdiff+0x60>
 800e624:	4b31      	ldr	r3, [pc, #196]	@ (800e6ec <__mdiff+0x120>)
 800e626:	f240 2145 	movw	r1, #581	@ 0x245
 800e62a:	e7e3      	b.n	800e5f4 <__mdiff+0x28>
 800e62c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e630:	6926      	ldr	r6, [r4, #16]
 800e632:	60c5      	str	r5, [r0, #12]
 800e634:	f109 0310 	add.w	r3, r9, #16
 800e638:	f109 0514 	add.w	r5, r9, #20
 800e63c:	f104 0e14 	add.w	lr, r4, #20
 800e640:	f100 0b14 	add.w	fp, r0, #20
 800e644:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e648:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	46d9      	mov	r9, fp
 800e650:	f04f 0c00 	mov.w	ip, #0
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e65a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e65e:	9301      	str	r3, [sp, #4]
 800e660:	fa1f f38a 	uxth.w	r3, sl
 800e664:	4619      	mov	r1, r3
 800e666:	b283      	uxth	r3, r0
 800e668:	1acb      	subs	r3, r1, r3
 800e66a:	0c00      	lsrs	r0, r0, #16
 800e66c:	4463      	add	r3, ip
 800e66e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e672:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e676:	b29b      	uxth	r3, r3
 800e678:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e67c:	4576      	cmp	r6, lr
 800e67e:	f849 3b04 	str.w	r3, [r9], #4
 800e682:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e686:	d8e5      	bhi.n	800e654 <__mdiff+0x88>
 800e688:	1b33      	subs	r3, r6, r4
 800e68a:	3b15      	subs	r3, #21
 800e68c:	f023 0303 	bic.w	r3, r3, #3
 800e690:	3415      	adds	r4, #21
 800e692:	3304      	adds	r3, #4
 800e694:	42a6      	cmp	r6, r4
 800e696:	bf38      	it	cc
 800e698:	2304      	movcc	r3, #4
 800e69a:	441d      	add	r5, r3
 800e69c:	445b      	add	r3, fp
 800e69e:	461e      	mov	r6, r3
 800e6a0:	462c      	mov	r4, r5
 800e6a2:	4544      	cmp	r4, r8
 800e6a4:	d30e      	bcc.n	800e6c4 <__mdiff+0xf8>
 800e6a6:	f108 0103 	add.w	r1, r8, #3
 800e6aa:	1b49      	subs	r1, r1, r5
 800e6ac:	f021 0103 	bic.w	r1, r1, #3
 800e6b0:	3d03      	subs	r5, #3
 800e6b2:	45a8      	cmp	r8, r5
 800e6b4:	bf38      	it	cc
 800e6b6:	2100      	movcc	r1, #0
 800e6b8:	440b      	add	r3, r1
 800e6ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6be:	b191      	cbz	r1, 800e6e6 <__mdiff+0x11a>
 800e6c0:	6117      	str	r7, [r2, #16]
 800e6c2:	e79d      	b.n	800e600 <__mdiff+0x34>
 800e6c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6c8:	46e6      	mov	lr, ip
 800e6ca:	0c08      	lsrs	r0, r1, #16
 800e6cc:	fa1c fc81 	uxtah	ip, ip, r1
 800e6d0:	4471      	add	r1, lr
 800e6d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6d6:	b289      	uxth	r1, r1
 800e6d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6dc:	f846 1b04 	str.w	r1, [r6], #4
 800e6e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6e4:	e7dd      	b.n	800e6a2 <__mdiff+0xd6>
 800e6e6:	3f01      	subs	r7, #1
 800e6e8:	e7e7      	b.n	800e6ba <__mdiff+0xee>
 800e6ea:	bf00      	nop
 800e6ec:	08011b10 	.word	0x08011b10
 800e6f0:	08011b21 	.word	0x08011b21

0800e6f4 <__d2b>:
 800e6f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	ec59 8b10 	vmov	r8, r9, d0
 800e700:	4616      	mov	r6, r2
 800e702:	f7ff fccd 	bl	800e0a0 <_Balloc>
 800e706:	4604      	mov	r4, r0
 800e708:	b930      	cbnz	r0, 800e718 <__d2b+0x24>
 800e70a:	4602      	mov	r2, r0
 800e70c:	4b23      	ldr	r3, [pc, #140]	@ (800e79c <__d2b+0xa8>)
 800e70e:	4824      	ldr	r0, [pc, #144]	@ (800e7a0 <__d2b+0xac>)
 800e710:	f240 310f 	movw	r1, #783	@ 0x30f
 800e714:	f000 fa74 	bl	800ec00 <__assert_func>
 800e718:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e71c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e720:	b10d      	cbz	r5, 800e726 <__d2b+0x32>
 800e722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	f1b8 0300 	subs.w	r3, r8, #0
 800e72c:	d023      	beq.n	800e776 <__d2b+0x82>
 800e72e:	4668      	mov	r0, sp
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	f7ff fd7c 	bl	800e22e <__lo0bits>
 800e736:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e73a:	b1d0      	cbz	r0, 800e772 <__d2b+0x7e>
 800e73c:	f1c0 0320 	rsb	r3, r0, #32
 800e740:	fa02 f303 	lsl.w	r3, r2, r3
 800e744:	430b      	orrs	r3, r1
 800e746:	40c2      	lsrs	r2, r0
 800e748:	6163      	str	r3, [r4, #20]
 800e74a:	9201      	str	r2, [sp, #4]
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	61a3      	str	r3, [r4, #24]
 800e750:	2b00      	cmp	r3, #0
 800e752:	bf0c      	ite	eq
 800e754:	2201      	moveq	r2, #1
 800e756:	2202      	movne	r2, #2
 800e758:	6122      	str	r2, [r4, #16]
 800e75a:	b1a5      	cbz	r5, 800e786 <__d2b+0x92>
 800e75c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e760:	4405      	add	r5, r0
 800e762:	603d      	str	r5, [r7, #0]
 800e764:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e768:	6030      	str	r0, [r6, #0]
 800e76a:	4620      	mov	r0, r4
 800e76c:	b003      	add	sp, #12
 800e76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e772:	6161      	str	r1, [r4, #20]
 800e774:	e7ea      	b.n	800e74c <__d2b+0x58>
 800e776:	a801      	add	r0, sp, #4
 800e778:	f7ff fd59 	bl	800e22e <__lo0bits>
 800e77c:	9b01      	ldr	r3, [sp, #4]
 800e77e:	6163      	str	r3, [r4, #20]
 800e780:	3020      	adds	r0, #32
 800e782:	2201      	movs	r2, #1
 800e784:	e7e8      	b.n	800e758 <__d2b+0x64>
 800e786:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e78a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e78e:	6038      	str	r0, [r7, #0]
 800e790:	6918      	ldr	r0, [r3, #16]
 800e792:	f7ff fd2d 	bl	800e1f0 <__hi0bits>
 800e796:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e79a:	e7e5      	b.n	800e768 <__d2b+0x74>
 800e79c:	08011b10 	.word	0x08011b10
 800e7a0:	08011b21 	.word	0x08011b21

0800e7a4 <__ssputs_r>:
 800e7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a8:	688e      	ldr	r6, [r1, #8]
 800e7aa:	461f      	mov	r7, r3
 800e7ac:	42be      	cmp	r6, r7
 800e7ae:	680b      	ldr	r3, [r1, #0]
 800e7b0:	4682      	mov	sl, r0
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	4690      	mov	r8, r2
 800e7b6:	d82d      	bhi.n	800e814 <__ssputs_r+0x70>
 800e7b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7c0:	d026      	beq.n	800e810 <__ssputs_r+0x6c>
 800e7c2:	6965      	ldr	r5, [r4, #20]
 800e7c4:	6909      	ldr	r1, [r1, #16]
 800e7c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7ca:	eba3 0901 	sub.w	r9, r3, r1
 800e7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7d2:	1c7b      	adds	r3, r7, #1
 800e7d4:	444b      	add	r3, r9
 800e7d6:	106d      	asrs	r5, r5, #1
 800e7d8:	429d      	cmp	r5, r3
 800e7da:	bf38      	it	cc
 800e7dc:	461d      	movcc	r5, r3
 800e7de:	0553      	lsls	r3, r2, #21
 800e7e0:	d527      	bpl.n	800e832 <__ssputs_r+0x8e>
 800e7e2:	4629      	mov	r1, r5
 800e7e4:	f7ff fbd0 	bl	800df88 <_malloc_r>
 800e7e8:	4606      	mov	r6, r0
 800e7ea:	b360      	cbz	r0, 800e846 <__ssputs_r+0xa2>
 800e7ec:	6921      	ldr	r1, [r4, #16]
 800e7ee:	464a      	mov	r2, r9
 800e7f0:	f7fe fcfb 	bl	800d1ea <memcpy>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7fe:	81a3      	strh	r3, [r4, #12]
 800e800:	6126      	str	r6, [r4, #16]
 800e802:	6165      	str	r5, [r4, #20]
 800e804:	444e      	add	r6, r9
 800e806:	eba5 0509 	sub.w	r5, r5, r9
 800e80a:	6026      	str	r6, [r4, #0]
 800e80c:	60a5      	str	r5, [r4, #8]
 800e80e:	463e      	mov	r6, r7
 800e810:	42be      	cmp	r6, r7
 800e812:	d900      	bls.n	800e816 <__ssputs_r+0x72>
 800e814:	463e      	mov	r6, r7
 800e816:	6820      	ldr	r0, [r4, #0]
 800e818:	4632      	mov	r2, r6
 800e81a:	4641      	mov	r1, r8
 800e81c:	f000 f9c6 	bl	800ebac <memmove>
 800e820:	68a3      	ldr	r3, [r4, #8]
 800e822:	1b9b      	subs	r3, r3, r6
 800e824:	60a3      	str	r3, [r4, #8]
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	4433      	add	r3, r6
 800e82a:	6023      	str	r3, [r4, #0]
 800e82c:	2000      	movs	r0, #0
 800e82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e832:	462a      	mov	r2, r5
 800e834:	f000 fa28 	bl	800ec88 <_realloc_r>
 800e838:	4606      	mov	r6, r0
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d1e0      	bne.n	800e800 <__ssputs_r+0x5c>
 800e83e:	6921      	ldr	r1, [r4, #16]
 800e840:	4650      	mov	r0, sl
 800e842:	f7ff fb2d 	bl	800dea0 <_free_r>
 800e846:	230c      	movs	r3, #12
 800e848:	f8ca 3000 	str.w	r3, [sl]
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e852:	81a3      	strh	r3, [r4, #12]
 800e854:	f04f 30ff 	mov.w	r0, #4294967295
 800e858:	e7e9      	b.n	800e82e <__ssputs_r+0x8a>
	...

0800e85c <_svfiprintf_r>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	4698      	mov	r8, r3
 800e862:	898b      	ldrh	r3, [r1, #12]
 800e864:	061b      	lsls	r3, r3, #24
 800e866:	b09d      	sub	sp, #116	@ 0x74
 800e868:	4607      	mov	r7, r0
 800e86a:	460d      	mov	r5, r1
 800e86c:	4614      	mov	r4, r2
 800e86e:	d510      	bpl.n	800e892 <_svfiprintf_r+0x36>
 800e870:	690b      	ldr	r3, [r1, #16]
 800e872:	b973      	cbnz	r3, 800e892 <_svfiprintf_r+0x36>
 800e874:	2140      	movs	r1, #64	@ 0x40
 800e876:	f7ff fb87 	bl	800df88 <_malloc_r>
 800e87a:	6028      	str	r0, [r5, #0]
 800e87c:	6128      	str	r0, [r5, #16]
 800e87e:	b930      	cbnz	r0, 800e88e <_svfiprintf_r+0x32>
 800e880:	230c      	movs	r3, #12
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	f04f 30ff 	mov.w	r0, #4294967295
 800e888:	b01d      	add	sp, #116	@ 0x74
 800e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88e:	2340      	movs	r3, #64	@ 0x40
 800e890:	616b      	str	r3, [r5, #20]
 800e892:	2300      	movs	r3, #0
 800e894:	9309      	str	r3, [sp, #36]	@ 0x24
 800e896:	2320      	movs	r3, #32
 800e898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a0:	2330      	movs	r3, #48	@ 0x30
 800e8a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea40 <_svfiprintf_r+0x1e4>
 800e8a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8aa:	f04f 0901 	mov.w	r9, #1
 800e8ae:	4623      	mov	r3, r4
 800e8b0:	469a      	mov	sl, r3
 800e8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b6:	b10a      	cbz	r2, 800e8bc <_svfiprintf_r+0x60>
 800e8b8:	2a25      	cmp	r2, #37	@ 0x25
 800e8ba:	d1f9      	bne.n	800e8b0 <_svfiprintf_r+0x54>
 800e8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e8c0:	d00b      	beq.n	800e8da <_svfiprintf_r+0x7e>
 800e8c2:	465b      	mov	r3, fp
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7ff ff6b 	bl	800e7a4 <__ssputs_r>
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f000 80a7 	beq.w	800ea22 <_svfiprintf_r+0x1c6>
 800e8d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d6:	445a      	add	r2, fp
 800e8d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8da:	f89a 3000 	ldrb.w	r3, [sl]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 809f 	beq.w	800ea22 <_svfiprintf_r+0x1c6>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8ee:	f10a 0a01 	add.w	sl, sl, #1
 800e8f2:	9304      	str	r3, [sp, #16]
 800e8f4:	9307      	str	r3, [sp, #28]
 800e8f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8fc:	4654      	mov	r4, sl
 800e8fe:	2205      	movs	r2, #5
 800e900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e904:	484e      	ldr	r0, [pc, #312]	@ (800ea40 <_svfiprintf_r+0x1e4>)
 800e906:	f7f1 fc83 	bl	8000210 <memchr>
 800e90a:	9a04      	ldr	r2, [sp, #16]
 800e90c:	b9d8      	cbnz	r0, 800e946 <_svfiprintf_r+0xea>
 800e90e:	06d0      	lsls	r0, r2, #27
 800e910:	bf44      	itt	mi
 800e912:	2320      	movmi	r3, #32
 800e914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e918:	0711      	lsls	r1, r2, #28
 800e91a:	bf44      	itt	mi
 800e91c:	232b      	movmi	r3, #43	@ 0x2b
 800e91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e922:	f89a 3000 	ldrb.w	r3, [sl]
 800e926:	2b2a      	cmp	r3, #42	@ 0x2a
 800e928:	d015      	beq.n	800e956 <_svfiprintf_r+0xfa>
 800e92a:	9a07      	ldr	r2, [sp, #28]
 800e92c:	4654      	mov	r4, sl
 800e92e:	2000      	movs	r0, #0
 800e930:	f04f 0c0a 	mov.w	ip, #10
 800e934:	4621      	mov	r1, r4
 800e936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e93a:	3b30      	subs	r3, #48	@ 0x30
 800e93c:	2b09      	cmp	r3, #9
 800e93e:	d94b      	bls.n	800e9d8 <_svfiprintf_r+0x17c>
 800e940:	b1b0      	cbz	r0, 800e970 <_svfiprintf_r+0x114>
 800e942:	9207      	str	r2, [sp, #28]
 800e944:	e014      	b.n	800e970 <_svfiprintf_r+0x114>
 800e946:	eba0 0308 	sub.w	r3, r0, r8
 800e94a:	fa09 f303 	lsl.w	r3, r9, r3
 800e94e:	4313      	orrs	r3, r2
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	46a2      	mov	sl, r4
 800e954:	e7d2      	b.n	800e8fc <_svfiprintf_r+0xa0>
 800e956:	9b03      	ldr	r3, [sp, #12]
 800e958:	1d19      	adds	r1, r3, #4
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	9103      	str	r1, [sp, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bfbb      	ittet	lt
 800e962:	425b      	neglt	r3, r3
 800e964:	f042 0202 	orrlt.w	r2, r2, #2
 800e968:	9307      	strge	r3, [sp, #28]
 800e96a:	9307      	strlt	r3, [sp, #28]
 800e96c:	bfb8      	it	lt
 800e96e:	9204      	strlt	r2, [sp, #16]
 800e970:	7823      	ldrb	r3, [r4, #0]
 800e972:	2b2e      	cmp	r3, #46	@ 0x2e
 800e974:	d10a      	bne.n	800e98c <_svfiprintf_r+0x130>
 800e976:	7863      	ldrb	r3, [r4, #1]
 800e978:	2b2a      	cmp	r3, #42	@ 0x2a
 800e97a:	d132      	bne.n	800e9e2 <_svfiprintf_r+0x186>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	1d1a      	adds	r2, r3, #4
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	9203      	str	r2, [sp, #12]
 800e984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e988:	3402      	adds	r4, #2
 800e98a:	9305      	str	r3, [sp, #20]
 800e98c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea50 <_svfiprintf_r+0x1f4>
 800e990:	7821      	ldrb	r1, [r4, #0]
 800e992:	2203      	movs	r2, #3
 800e994:	4650      	mov	r0, sl
 800e996:	f7f1 fc3b 	bl	8000210 <memchr>
 800e99a:	b138      	cbz	r0, 800e9ac <_svfiprintf_r+0x150>
 800e99c:	9b04      	ldr	r3, [sp, #16]
 800e99e:	eba0 000a 	sub.w	r0, r0, sl
 800e9a2:	2240      	movs	r2, #64	@ 0x40
 800e9a4:	4082      	lsls	r2, r0
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	3401      	adds	r4, #1
 800e9aa:	9304      	str	r3, [sp, #16]
 800e9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b0:	4824      	ldr	r0, [pc, #144]	@ (800ea44 <_svfiprintf_r+0x1e8>)
 800e9b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9b6:	2206      	movs	r2, #6
 800e9b8:	f7f1 fc2a 	bl	8000210 <memchr>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d036      	beq.n	800ea2e <_svfiprintf_r+0x1d2>
 800e9c0:	4b21      	ldr	r3, [pc, #132]	@ (800ea48 <_svfiprintf_r+0x1ec>)
 800e9c2:	bb1b      	cbnz	r3, 800ea0c <_svfiprintf_r+0x1b0>
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	3307      	adds	r3, #7
 800e9c8:	f023 0307 	bic.w	r3, r3, #7
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	9303      	str	r3, [sp, #12]
 800e9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d2:	4433      	add	r3, r6
 800e9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d6:	e76a      	b.n	800e8ae <_svfiprintf_r+0x52>
 800e9d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9dc:	460c      	mov	r4, r1
 800e9de:	2001      	movs	r0, #1
 800e9e0:	e7a8      	b.n	800e934 <_svfiprintf_r+0xd8>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	3401      	adds	r4, #1
 800e9e6:	9305      	str	r3, [sp, #20]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	f04f 0c0a 	mov.w	ip, #10
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f4:	3a30      	subs	r2, #48	@ 0x30
 800e9f6:	2a09      	cmp	r2, #9
 800e9f8:	d903      	bls.n	800ea02 <_svfiprintf_r+0x1a6>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d0c6      	beq.n	800e98c <_svfiprintf_r+0x130>
 800e9fe:	9105      	str	r1, [sp, #20]
 800ea00:	e7c4      	b.n	800e98c <_svfiprintf_r+0x130>
 800ea02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea06:	4604      	mov	r4, r0
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e7f0      	b.n	800e9ee <_svfiprintf_r+0x192>
 800ea0c:	ab03      	add	r3, sp, #12
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	462a      	mov	r2, r5
 800ea12:	4b0e      	ldr	r3, [pc, #56]	@ (800ea4c <_svfiprintf_r+0x1f0>)
 800ea14:	a904      	add	r1, sp, #16
 800ea16:	4638      	mov	r0, r7
 800ea18:	f7fd fe7a 	bl	800c710 <_printf_float>
 800ea1c:	1c42      	adds	r2, r0, #1
 800ea1e:	4606      	mov	r6, r0
 800ea20:	d1d6      	bne.n	800e9d0 <_svfiprintf_r+0x174>
 800ea22:	89ab      	ldrh	r3, [r5, #12]
 800ea24:	065b      	lsls	r3, r3, #25
 800ea26:	f53f af2d 	bmi.w	800e884 <_svfiprintf_r+0x28>
 800ea2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea2c:	e72c      	b.n	800e888 <_svfiprintf_r+0x2c>
 800ea2e:	ab03      	add	r3, sp, #12
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	462a      	mov	r2, r5
 800ea34:	4b05      	ldr	r3, [pc, #20]	@ (800ea4c <_svfiprintf_r+0x1f0>)
 800ea36:	a904      	add	r1, sp, #16
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f7fe f901 	bl	800cc40 <_printf_i>
 800ea3e:	e7ed      	b.n	800ea1c <_svfiprintf_r+0x1c0>
 800ea40:	08011c78 	.word	0x08011c78
 800ea44:	08011c82 	.word	0x08011c82
 800ea48:	0800c711 	.word	0x0800c711
 800ea4c:	0800e7a5 	.word	0x0800e7a5
 800ea50:	08011c7e 	.word	0x08011c7e

0800ea54 <__sflush_r>:
 800ea54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5c:	0716      	lsls	r6, r2, #28
 800ea5e:	4605      	mov	r5, r0
 800ea60:	460c      	mov	r4, r1
 800ea62:	d454      	bmi.n	800eb0e <__sflush_r+0xba>
 800ea64:	684b      	ldr	r3, [r1, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	dc02      	bgt.n	800ea70 <__sflush_r+0x1c>
 800ea6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	dd48      	ble.n	800eb02 <__sflush_r+0xae>
 800ea70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea72:	2e00      	cmp	r6, #0
 800ea74:	d045      	beq.n	800eb02 <__sflush_r+0xae>
 800ea76:	2300      	movs	r3, #0
 800ea78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea7c:	682f      	ldr	r7, [r5, #0]
 800ea7e:	6a21      	ldr	r1, [r4, #32]
 800ea80:	602b      	str	r3, [r5, #0]
 800ea82:	d030      	beq.n	800eae6 <__sflush_r+0x92>
 800ea84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea86:	89a3      	ldrh	r3, [r4, #12]
 800ea88:	0759      	lsls	r1, r3, #29
 800ea8a:	d505      	bpl.n	800ea98 <__sflush_r+0x44>
 800ea8c:	6863      	ldr	r3, [r4, #4]
 800ea8e:	1ad2      	subs	r2, r2, r3
 800ea90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea92:	b10b      	cbz	r3, 800ea98 <__sflush_r+0x44>
 800ea94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea96:	1ad2      	subs	r2, r2, r3
 800ea98:	2300      	movs	r3, #0
 800ea9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea9c:	6a21      	ldr	r1, [r4, #32]
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	47b0      	blx	r6
 800eaa2:	1c43      	adds	r3, r0, #1
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	d106      	bne.n	800eab6 <__sflush_r+0x62>
 800eaa8:	6829      	ldr	r1, [r5, #0]
 800eaaa:	291d      	cmp	r1, #29
 800eaac:	d82b      	bhi.n	800eb06 <__sflush_r+0xb2>
 800eaae:	4a2a      	ldr	r2, [pc, #168]	@ (800eb58 <__sflush_r+0x104>)
 800eab0:	410a      	asrs	r2, r1
 800eab2:	07d6      	lsls	r6, r2, #31
 800eab4:	d427      	bmi.n	800eb06 <__sflush_r+0xb2>
 800eab6:	2200      	movs	r2, #0
 800eab8:	6062      	str	r2, [r4, #4]
 800eaba:	04d9      	lsls	r1, r3, #19
 800eabc:	6922      	ldr	r2, [r4, #16]
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	d504      	bpl.n	800eacc <__sflush_r+0x78>
 800eac2:	1c42      	adds	r2, r0, #1
 800eac4:	d101      	bne.n	800eaca <__sflush_r+0x76>
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	b903      	cbnz	r3, 800eacc <__sflush_r+0x78>
 800eaca:	6560      	str	r0, [r4, #84]	@ 0x54
 800eacc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eace:	602f      	str	r7, [r5, #0]
 800ead0:	b1b9      	cbz	r1, 800eb02 <__sflush_r+0xae>
 800ead2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ead6:	4299      	cmp	r1, r3
 800ead8:	d002      	beq.n	800eae0 <__sflush_r+0x8c>
 800eada:	4628      	mov	r0, r5
 800eadc:	f7ff f9e0 	bl	800dea0 <_free_r>
 800eae0:	2300      	movs	r3, #0
 800eae2:	6363      	str	r3, [r4, #52]	@ 0x34
 800eae4:	e00d      	b.n	800eb02 <__sflush_r+0xae>
 800eae6:	2301      	movs	r3, #1
 800eae8:	4628      	mov	r0, r5
 800eaea:	47b0      	blx	r6
 800eaec:	4602      	mov	r2, r0
 800eaee:	1c50      	adds	r0, r2, #1
 800eaf0:	d1c9      	bne.n	800ea86 <__sflush_r+0x32>
 800eaf2:	682b      	ldr	r3, [r5, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d0c6      	beq.n	800ea86 <__sflush_r+0x32>
 800eaf8:	2b1d      	cmp	r3, #29
 800eafa:	d001      	beq.n	800eb00 <__sflush_r+0xac>
 800eafc:	2b16      	cmp	r3, #22
 800eafe:	d11e      	bne.n	800eb3e <__sflush_r+0xea>
 800eb00:	602f      	str	r7, [r5, #0]
 800eb02:	2000      	movs	r0, #0
 800eb04:	e022      	b.n	800eb4c <__sflush_r+0xf8>
 800eb06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb0a:	b21b      	sxth	r3, r3
 800eb0c:	e01b      	b.n	800eb46 <__sflush_r+0xf2>
 800eb0e:	690f      	ldr	r7, [r1, #16]
 800eb10:	2f00      	cmp	r7, #0
 800eb12:	d0f6      	beq.n	800eb02 <__sflush_r+0xae>
 800eb14:	0793      	lsls	r3, r2, #30
 800eb16:	680e      	ldr	r6, [r1, #0]
 800eb18:	bf08      	it	eq
 800eb1a:	694b      	ldreq	r3, [r1, #20]
 800eb1c:	600f      	str	r7, [r1, #0]
 800eb1e:	bf18      	it	ne
 800eb20:	2300      	movne	r3, #0
 800eb22:	eba6 0807 	sub.w	r8, r6, r7
 800eb26:	608b      	str	r3, [r1, #8]
 800eb28:	f1b8 0f00 	cmp.w	r8, #0
 800eb2c:	dde9      	ble.n	800eb02 <__sflush_r+0xae>
 800eb2e:	6a21      	ldr	r1, [r4, #32]
 800eb30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb32:	4643      	mov	r3, r8
 800eb34:	463a      	mov	r2, r7
 800eb36:	4628      	mov	r0, r5
 800eb38:	47b0      	blx	r6
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	dc08      	bgt.n	800eb50 <__sflush_r+0xfc>
 800eb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb46:	81a3      	strh	r3, [r4, #12]
 800eb48:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb50:	4407      	add	r7, r0
 800eb52:	eba8 0800 	sub.w	r8, r8, r0
 800eb56:	e7e7      	b.n	800eb28 <__sflush_r+0xd4>
 800eb58:	dfbffffe 	.word	0xdfbffffe

0800eb5c <_fflush_r>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	690b      	ldr	r3, [r1, #16]
 800eb60:	4605      	mov	r5, r0
 800eb62:	460c      	mov	r4, r1
 800eb64:	b913      	cbnz	r3, 800eb6c <_fflush_r+0x10>
 800eb66:	2500      	movs	r5, #0
 800eb68:	4628      	mov	r0, r5
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	b118      	cbz	r0, 800eb76 <_fflush_r+0x1a>
 800eb6e:	6a03      	ldr	r3, [r0, #32]
 800eb70:	b90b      	cbnz	r3, 800eb76 <_fflush_r+0x1a>
 800eb72:	f7fe fa11 	bl	800cf98 <__sinit>
 800eb76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0f3      	beq.n	800eb66 <_fflush_r+0xa>
 800eb7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb80:	07d0      	lsls	r0, r2, #31
 800eb82:	d404      	bmi.n	800eb8e <_fflush_r+0x32>
 800eb84:	0599      	lsls	r1, r3, #22
 800eb86:	d402      	bmi.n	800eb8e <_fflush_r+0x32>
 800eb88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb8a:	f7fe fb2c 	bl	800d1e6 <__retarget_lock_acquire_recursive>
 800eb8e:	4628      	mov	r0, r5
 800eb90:	4621      	mov	r1, r4
 800eb92:	f7ff ff5f 	bl	800ea54 <__sflush_r>
 800eb96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb98:	07da      	lsls	r2, r3, #31
 800eb9a:	4605      	mov	r5, r0
 800eb9c:	d4e4      	bmi.n	800eb68 <_fflush_r+0xc>
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	059b      	lsls	r3, r3, #22
 800eba2:	d4e1      	bmi.n	800eb68 <_fflush_r+0xc>
 800eba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eba6:	f7fe fb1f 	bl	800d1e8 <__retarget_lock_release_recursive>
 800ebaa:	e7dd      	b.n	800eb68 <_fflush_r+0xc>

0800ebac <memmove>:
 800ebac:	4288      	cmp	r0, r1
 800ebae:	b510      	push	{r4, lr}
 800ebb0:	eb01 0402 	add.w	r4, r1, r2
 800ebb4:	d902      	bls.n	800ebbc <memmove+0x10>
 800ebb6:	4284      	cmp	r4, r0
 800ebb8:	4623      	mov	r3, r4
 800ebba:	d807      	bhi.n	800ebcc <memmove+0x20>
 800ebbc:	1e43      	subs	r3, r0, #1
 800ebbe:	42a1      	cmp	r1, r4
 800ebc0:	d008      	beq.n	800ebd4 <memmove+0x28>
 800ebc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebca:	e7f8      	b.n	800ebbe <memmove+0x12>
 800ebcc:	4402      	add	r2, r0
 800ebce:	4601      	mov	r1, r0
 800ebd0:	428a      	cmp	r2, r1
 800ebd2:	d100      	bne.n	800ebd6 <memmove+0x2a>
 800ebd4:	bd10      	pop	{r4, pc}
 800ebd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebde:	e7f7      	b.n	800ebd0 <memmove+0x24>

0800ebe0 <_sbrk_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	4d06      	ldr	r5, [pc, #24]	@ (800ebfc <_sbrk_r+0x1c>)
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	4608      	mov	r0, r1
 800ebea:	602b      	str	r3, [r5, #0]
 800ebec:	f7f8 fbe6 	bl	80073bc <_sbrk>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	d102      	bne.n	800ebfa <_sbrk_r+0x1a>
 800ebf4:	682b      	ldr	r3, [r5, #0]
 800ebf6:	b103      	cbz	r3, 800ebfa <_sbrk_r+0x1a>
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	bd38      	pop	{r3, r4, r5, pc}
 800ebfc:	200009b0 	.word	0x200009b0

0800ec00 <__assert_func>:
 800ec00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec02:	4614      	mov	r4, r2
 800ec04:	461a      	mov	r2, r3
 800ec06:	4b09      	ldr	r3, [pc, #36]	@ (800ec2c <__assert_func+0x2c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	68d8      	ldr	r0, [r3, #12]
 800ec0e:	b954      	cbnz	r4, 800ec26 <__assert_func+0x26>
 800ec10:	4b07      	ldr	r3, [pc, #28]	@ (800ec30 <__assert_func+0x30>)
 800ec12:	461c      	mov	r4, r3
 800ec14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec18:	9100      	str	r1, [sp, #0]
 800ec1a:	462b      	mov	r3, r5
 800ec1c:	4905      	ldr	r1, [pc, #20]	@ (800ec34 <__assert_func+0x34>)
 800ec1e:	f000 f86f 	bl	800ed00 <fiprintf>
 800ec22:	f000 f87f 	bl	800ed24 <abort>
 800ec26:	4b04      	ldr	r3, [pc, #16]	@ (800ec38 <__assert_func+0x38>)
 800ec28:	e7f4      	b.n	800ec14 <__assert_func+0x14>
 800ec2a:	bf00      	nop
 800ec2c:	20000058 	.word	0x20000058
 800ec30:	08011cce 	.word	0x08011cce
 800ec34:	08011ca0 	.word	0x08011ca0
 800ec38:	08011c93 	.word	0x08011c93

0800ec3c <_calloc_r>:
 800ec3c:	b570      	push	{r4, r5, r6, lr}
 800ec3e:	fba1 5402 	umull	r5, r4, r1, r2
 800ec42:	b93c      	cbnz	r4, 800ec54 <_calloc_r+0x18>
 800ec44:	4629      	mov	r1, r5
 800ec46:	f7ff f99f 	bl	800df88 <_malloc_r>
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	b928      	cbnz	r0, 800ec5a <_calloc_r+0x1e>
 800ec4e:	2600      	movs	r6, #0
 800ec50:	4630      	mov	r0, r6
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	220c      	movs	r2, #12
 800ec56:	6002      	str	r2, [r0, #0]
 800ec58:	e7f9      	b.n	800ec4e <_calloc_r+0x12>
 800ec5a:	462a      	mov	r2, r5
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	f7fe fa44 	bl	800d0ea <memset>
 800ec62:	e7f5      	b.n	800ec50 <_calloc_r+0x14>

0800ec64 <__ascii_mbtowc>:
 800ec64:	b082      	sub	sp, #8
 800ec66:	b901      	cbnz	r1, 800ec6a <__ascii_mbtowc+0x6>
 800ec68:	a901      	add	r1, sp, #4
 800ec6a:	b142      	cbz	r2, 800ec7e <__ascii_mbtowc+0x1a>
 800ec6c:	b14b      	cbz	r3, 800ec82 <__ascii_mbtowc+0x1e>
 800ec6e:	7813      	ldrb	r3, [r2, #0]
 800ec70:	600b      	str	r3, [r1, #0]
 800ec72:	7812      	ldrb	r2, [r2, #0]
 800ec74:	1e10      	subs	r0, r2, #0
 800ec76:	bf18      	it	ne
 800ec78:	2001      	movne	r0, #1
 800ec7a:	b002      	add	sp, #8
 800ec7c:	4770      	bx	lr
 800ec7e:	4610      	mov	r0, r2
 800ec80:	e7fb      	b.n	800ec7a <__ascii_mbtowc+0x16>
 800ec82:	f06f 0001 	mvn.w	r0, #1
 800ec86:	e7f8      	b.n	800ec7a <__ascii_mbtowc+0x16>

0800ec88 <_realloc_r>:
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	4680      	mov	r8, r0
 800ec8e:	4615      	mov	r5, r2
 800ec90:	460c      	mov	r4, r1
 800ec92:	b921      	cbnz	r1, 800ec9e <_realloc_r+0x16>
 800ec94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	4611      	mov	r1, r2
 800ec9a:	f7ff b975 	b.w	800df88 <_malloc_r>
 800ec9e:	b92a      	cbnz	r2, 800ecac <_realloc_r+0x24>
 800eca0:	f7ff f8fe 	bl	800dea0 <_free_r>
 800eca4:	2400      	movs	r4, #0
 800eca6:	4620      	mov	r0, r4
 800eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecac:	f000 f841 	bl	800ed32 <_malloc_usable_size_r>
 800ecb0:	4285      	cmp	r5, r0
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	d802      	bhi.n	800ecbc <_realloc_r+0x34>
 800ecb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ecba:	d8f4      	bhi.n	800eca6 <_realloc_r+0x1e>
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	f7ff f962 	bl	800df88 <_malloc_r>
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d0ec      	beq.n	800eca4 <_realloc_r+0x1c>
 800ecca:	42b5      	cmp	r5, r6
 800eccc:	462a      	mov	r2, r5
 800ecce:	4621      	mov	r1, r4
 800ecd0:	bf28      	it	cs
 800ecd2:	4632      	movcs	r2, r6
 800ecd4:	f7fe fa89 	bl	800d1ea <memcpy>
 800ecd8:	4621      	mov	r1, r4
 800ecda:	4640      	mov	r0, r8
 800ecdc:	f7ff f8e0 	bl	800dea0 <_free_r>
 800ece0:	463c      	mov	r4, r7
 800ece2:	e7e0      	b.n	800eca6 <_realloc_r+0x1e>

0800ece4 <__ascii_wctomb>:
 800ece4:	4603      	mov	r3, r0
 800ece6:	4608      	mov	r0, r1
 800ece8:	b141      	cbz	r1, 800ecfc <__ascii_wctomb+0x18>
 800ecea:	2aff      	cmp	r2, #255	@ 0xff
 800ecec:	d904      	bls.n	800ecf8 <__ascii_wctomb+0x14>
 800ecee:	228a      	movs	r2, #138	@ 0x8a
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf6:	4770      	bx	lr
 800ecf8:	700a      	strb	r2, [r1, #0]
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	4770      	bx	lr
	...

0800ed00 <fiprintf>:
 800ed00:	b40e      	push	{r1, r2, r3}
 800ed02:	b503      	push	{r0, r1, lr}
 800ed04:	4601      	mov	r1, r0
 800ed06:	ab03      	add	r3, sp, #12
 800ed08:	4805      	ldr	r0, [pc, #20]	@ (800ed20 <fiprintf+0x20>)
 800ed0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed0e:	6800      	ldr	r0, [r0, #0]
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	f000 f83f 	bl	800ed94 <_vfiprintf_r>
 800ed16:	b002      	add	sp, #8
 800ed18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed1c:	b003      	add	sp, #12
 800ed1e:	4770      	bx	lr
 800ed20:	20000058 	.word	0x20000058

0800ed24 <abort>:
 800ed24:	b508      	push	{r3, lr}
 800ed26:	2006      	movs	r0, #6
 800ed28:	f000 fa08 	bl	800f13c <raise>
 800ed2c:	2001      	movs	r0, #1
 800ed2e:	f7f8 facd 	bl	80072cc <_exit>

0800ed32 <_malloc_usable_size_r>:
 800ed32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed36:	1f18      	subs	r0, r3, #4
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bfbc      	itt	lt
 800ed3c:	580b      	ldrlt	r3, [r1, r0]
 800ed3e:	18c0      	addlt	r0, r0, r3
 800ed40:	4770      	bx	lr

0800ed42 <__sfputc_r>:
 800ed42:	6893      	ldr	r3, [r2, #8]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	b410      	push	{r4}
 800ed4a:	6093      	str	r3, [r2, #8]
 800ed4c:	da08      	bge.n	800ed60 <__sfputc_r+0x1e>
 800ed4e:	6994      	ldr	r4, [r2, #24]
 800ed50:	42a3      	cmp	r3, r4
 800ed52:	db01      	blt.n	800ed58 <__sfputc_r+0x16>
 800ed54:	290a      	cmp	r1, #10
 800ed56:	d103      	bne.n	800ed60 <__sfputc_r+0x1e>
 800ed58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed5c:	f000 b932 	b.w	800efc4 <__swbuf_r>
 800ed60:	6813      	ldr	r3, [r2, #0]
 800ed62:	1c58      	adds	r0, r3, #1
 800ed64:	6010      	str	r0, [r2, #0]
 800ed66:	7019      	strb	r1, [r3, #0]
 800ed68:	4608      	mov	r0, r1
 800ed6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <__sfputs_r>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	4606      	mov	r6, r0
 800ed74:	460f      	mov	r7, r1
 800ed76:	4614      	mov	r4, r2
 800ed78:	18d5      	adds	r5, r2, r3
 800ed7a:	42ac      	cmp	r4, r5
 800ed7c:	d101      	bne.n	800ed82 <__sfputs_r+0x12>
 800ed7e:	2000      	movs	r0, #0
 800ed80:	e007      	b.n	800ed92 <__sfputs_r+0x22>
 800ed82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed86:	463a      	mov	r2, r7
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7ff ffda 	bl	800ed42 <__sfputc_r>
 800ed8e:	1c43      	adds	r3, r0, #1
 800ed90:	d1f3      	bne.n	800ed7a <__sfputs_r+0xa>
 800ed92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed94 <_vfiprintf_r>:
 800ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed98:	460d      	mov	r5, r1
 800ed9a:	b09d      	sub	sp, #116	@ 0x74
 800ed9c:	4614      	mov	r4, r2
 800ed9e:	4698      	mov	r8, r3
 800eda0:	4606      	mov	r6, r0
 800eda2:	b118      	cbz	r0, 800edac <_vfiprintf_r+0x18>
 800eda4:	6a03      	ldr	r3, [r0, #32]
 800eda6:	b90b      	cbnz	r3, 800edac <_vfiprintf_r+0x18>
 800eda8:	f7fe f8f6 	bl	800cf98 <__sinit>
 800edac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edae:	07d9      	lsls	r1, r3, #31
 800edb0:	d405      	bmi.n	800edbe <_vfiprintf_r+0x2a>
 800edb2:	89ab      	ldrh	r3, [r5, #12]
 800edb4:	059a      	lsls	r2, r3, #22
 800edb6:	d402      	bmi.n	800edbe <_vfiprintf_r+0x2a>
 800edb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edba:	f7fe fa14 	bl	800d1e6 <__retarget_lock_acquire_recursive>
 800edbe:	89ab      	ldrh	r3, [r5, #12]
 800edc0:	071b      	lsls	r3, r3, #28
 800edc2:	d501      	bpl.n	800edc8 <_vfiprintf_r+0x34>
 800edc4:	692b      	ldr	r3, [r5, #16]
 800edc6:	b99b      	cbnz	r3, 800edf0 <_vfiprintf_r+0x5c>
 800edc8:	4629      	mov	r1, r5
 800edca:	4630      	mov	r0, r6
 800edcc:	f000 f938 	bl	800f040 <__swsetup_r>
 800edd0:	b170      	cbz	r0, 800edf0 <_vfiprintf_r+0x5c>
 800edd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edd4:	07dc      	lsls	r4, r3, #31
 800edd6:	d504      	bpl.n	800ede2 <_vfiprintf_r+0x4e>
 800edd8:	f04f 30ff 	mov.w	r0, #4294967295
 800eddc:	b01d      	add	sp, #116	@ 0x74
 800edde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede2:	89ab      	ldrh	r3, [r5, #12]
 800ede4:	0598      	lsls	r0, r3, #22
 800ede6:	d4f7      	bmi.n	800edd8 <_vfiprintf_r+0x44>
 800ede8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edea:	f7fe f9fd 	bl	800d1e8 <__retarget_lock_release_recursive>
 800edee:	e7f3      	b.n	800edd8 <_vfiprintf_r+0x44>
 800edf0:	2300      	movs	r3, #0
 800edf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800edf4:	2320      	movs	r3, #32
 800edf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800edfe:	2330      	movs	r3, #48	@ 0x30
 800ee00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800efb0 <_vfiprintf_r+0x21c>
 800ee04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee08:	f04f 0901 	mov.w	r9, #1
 800ee0c:	4623      	mov	r3, r4
 800ee0e:	469a      	mov	sl, r3
 800ee10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee14:	b10a      	cbz	r2, 800ee1a <_vfiprintf_r+0x86>
 800ee16:	2a25      	cmp	r2, #37	@ 0x25
 800ee18:	d1f9      	bne.n	800ee0e <_vfiprintf_r+0x7a>
 800ee1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee1e:	d00b      	beq.n	800ee38 <_vfiprintf_r+0xa4>
 800ee20:	465b      	mov	r3, fp
 800ee22:	4622      	mov	r2, r4
 800ee24:	4629      	mov	r1, r5
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7ff ffa2 	bl	800ed70 <__sfputs_r>
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	f000 80a7 	beq.w	800ef80 <_vfiprintf_r+0x1ec>
 800ee32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee34:	445a      	add	r2, fp
 800ee36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee38:	f89a 3000 	ldrb.w	r3, [sl]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 809f 	beq.w	800ef80 <_vfiprintf_r+0x1ec>
 800ee42:	2300      	movs	r3, #0
 800ee44:	f04f 32ff 	mov.w	r2, #4294967295
 800ee48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee4c:	f10a 0a01 	add.w	sl, sl, #1
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	9307      	str	r3, [sp, #28]
 800ee54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee5a:	4654      	mov	r4, sl
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee62:	4853      	ldr	r0, [pc, #332]	@ (800efb0 <_vfiprintf_r+0x21c>)
 800ee64:	f7f1 f9d4 	bl	8000210 <memchr>
 800ee68:	9a04      	ldr	r2, [sp, #16]
 800ee6a:	b9d8      	cbnz	r0, 800eea4 <_vfiprintf_r+0x110>
 800ee6c:	06d1      	lsls	r1, r2, #27
 800ee6e:	bf44      	itt	mi
 800ee70:	2320      	movmi	r3, #32
 800ee72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee76:	0713      	lsls	r3, r2, #28
 800ee78:	bf44      	itt	mi
 800ee7a:	232b      	movmi	r3, #43	@ 0x2b
 800ee7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee80:	f89a 3000 	ldrb.w	r3, [sl]
 800ee84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee86:	d015      	beq.n	800eeb4 <_vfiprintf_r+0x120>
 800ee88:	9a07      	ldr	r2, [sp, #28]
 800ee8a:	4654      	mov	r4, sl
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f04f 0c0a 	mov.w	ip, #10
 800ee92:	4621      	mov	r1, r4
 800ee94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee98:	3b30      	subs	r3, #48	@ 0x30
 800ee9a:	2b09      	cmp	r3, #9
 800ee9c:	d94b      	bls.n	800ef36 <_vfiprintf_r+0x1a2>
 800ee9e:	b1b0      	cbz	r0, 800eece <_vfiprintf_r+0x13a>
 800eea0:	9207      	str	r2, [sp, #28]
 800eea2:	e014      	b.n	800eece <_vfiprintf_r+0x13a>
 800eea4:	eba0 0308 	sub.w	r3, r0, r8
 800eea8:	fa09 f303 	lsl.w	r3, r9, r3
 800eeac:	4313      	orrs	r3, r2
 800eeae:	9304      	str	r3, [sp, #16]
 800eeb0:	46a2      	mov	sl, r4
 800eeb2:	e7d2      	b.n	800ee5a <_vfiprintf_r+0xc6>
 800eeb4:	9b03      	ldr	r3, [sp, #12]
 800eeb6:	1d19      	adds	r1, r3, #4
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	9103      	str	r1, [sp, #12]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	bfbb      	ittet	lt
 800eec0:	425b      	neglt	r3, r3
 800eec2:	f042 0202 	orrlt.w	r2, r2, #2
 800eec6:	9307      	strge	r3, [sp, #28]
 800eec8:	9307      	strlt	r3, [sp, #28]
 800eeca:	bfb8      	it	lt
 800eecc:	9204      	strlt	r2, [sp, #16]
 800eece:	7823      	ldrb	r3, [r4, #0]
 800eed0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eed2:	d10a      	bne.n	800eeea <_vfiprintf_r+0x156>
 800eed4:	7863      	ldrb	r3, [r4, #1]
 800eed6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eed8:	d132      	bne.n	800ef40 <_vfiprintf_r+0x1ac>
 800eeda:	9b03      	ldr	r3, [sp, #12]
 800eedc:	1d1a      	adds	r2, r3, #4
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	9203      	str	r2, [sp, #12]
 800eee2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eee6:	3402      	adds	r4, #2
 800eee8:	9305      	str	r3, [sp, #20]
 800eeea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800efc0 <_vfiprintf_r+0x22c>
 800eeee:	7821      	ldrb	r1, [r4, #0]
 800eef0:	2203      	movs	r2, #3
 800eef2:	4650      	mov	r0, sl
 800eef4:	f7f1 f98c 	bl	8000210 <memchr>
 800eef8:	b138      	cbz	r0, 800ef0a <_vfiprintf_r+0x176>
 800eefa:	9b04      	ldr	r3, [sp, #16]
 800eefc:	eba0 000a 	sub.w	r0, r0, sl
 800ef00:	2240      	movs	r2, #64	@ 0x40
 800ef02:	4082      	lsls	r2, r0
 800ef04:	4313      	orrs	r3, r2
 800ef06:	3401      	adds	r4, #1
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef0e:	4829      	ldr	r0, [pc, #164]	@ (800efb4 <_vfiprintf_r+0x220>)
 800ef10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef14:	2206      	movs	r2, #6
 800ef16:	f7f1 f97b 	bl	8000210 <memchr>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d03f      	beq.n	800ef9e <_vfiprintf_r+0x20a>
 800ef1e:	4b26      	ldr	r3, [pc, #152]	@ (800efb8 <_vfiprintf_r+0x224>)
 800ef20:	bb1b      	cbnz	r3, 800ef6a <_vfiprintf_r+0x1d6>
 800ef22:	9b03      	ldr	r3, [sp, #12]
 800ef24:	3307      	adds	r3, #7
 800ef26:	f023 0307 	bic.w	r3, r3, #7
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	9303      	str	r3, [sp, #12]
 800ef2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef30:	443b      	add	r3, r7
 800ef32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef34:	e76a      	b.n	800ee0c <_vfiprintf_r+0x78>
 800ef36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	e7a8      	b.n	800ee92 <_vfiprintf_r+0xfe>
 800ef40:	2300      	movs	r3, #0
 800ef42:	3401      	adds	r4, #1
 800ef44:	9305      	str	r3, [sp, #20]
 800ef46:	4619      	mov	r1, r3
 800ef48:	f04f 0c0a 	mov.w	ip, #10
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef52:	3a30      	subs	r2, #48	@ 0x30
 800ef54:	2a09      	cmp	r2, #9
 800ef56:	d903      	bls.n	800ef60 <_vfiprintf_r+0x1cc>
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0c6      	beq.n	800eeea <_vfiprintf_r+0x156>
 800ef5c:	9105      	str	r1, [sp, #20]
 800ef5e:	e7c4      	b.n	800eeea <_vfiprintf_r+0x156>
 800ef60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef64:	4604      	mov	r4, r0
 800ef66:	2301      	movs	r3, #1
 800ef68:	e7f0      	b.n	800ef4c <_vfiprintf_r+0x1b8>
 800ef6a:	ab03      	add	r3, sp, #12
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	462a      	mov	r2, r5
 800ef70:	4b12      	ldr	r3, [pc, #72]	@ (800efbc <_vfiprintf_r+0x228>)
 800ef72:	a904      	add	r1, sp, #16
 800ef74:	4630      	mov	r0, r6
 800ef76:	f7fd fbcb 	bl	800c710 <_printf_float>
 800ef7a:	4607      	mov	r7, r0
 800ef7c:	1c78      	adds	r0, r7, #1
 800ef7e:	d1d6      	bne.n	800ef2e <_vfiprintf_r+0x19a>
 800ef80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef82:	07d9      	lsls	r1, r3, #31
 800ef84:	d405      	bmi.n	800ef92 <_vfiprintf_r+0x1fe>
 800ef86:	89ab      	ldrh	r3, [r5, #12]
 800ef88:	059a      	lsls	r2, r3, #22
 800ef8a:	d402      	bmi.n	800ef92 <_vfiprintf_r+0x1fe>
 800ef8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef8e:	f7fe f92b 	bl	800d1e8 <__retarget_lock_release_recursive>
 800ef92:	89ab      	ldrh	r3, [r5, #12]
 800ef94:	065b      	lsls	r3, r3, #25
 800ef96:	f53f af1f 	bmi.w	800edd8 <_vfiprintf_r+0x44>
 800ef9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef9c:	e71e      	b.n	800eddc <_vfiprintf_r+0x48>
 800ef9e:	ab03      	add	r3, sp, #12
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	462a      	mov	r2, r5
 800efa4:	4b05      	ldr	r3, [pc, #20]	@ (800efbc <_vfiprintf_r+0x228>)
 800efa6:	a904      	add	r1, sp, #16
 800efa8:	4630      	mov	r0, r6
 800efaa:	f7fd fe49 	bl	800cc40 <_printf_i>
 800efae:	e7e4      	b.n	800ef7a <_vfiprintf_r+0x1e6>
 800efb0:	08011c78 	.word	0x08011c78
 800efb4:	08011c82 	.word	0x08011c82
 800efb8:	0800c711 	.word	0x0800c711
 800efbc:	0800ed71 	.word	0x0800ed71
 800efc0:	08011c7e 	.word	0x08011c7e

0800efc4 <__swbuf_r>:
 800efc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc6:	460e      	mov	r6, r1
 800efc8:	4614      	mov	r4, r2
 800efca:	4605      	mov	r5, r0
 800efcc:	b118      	cbz	r0, 800efd6 <__swbuf_r+0x12>
 800efce:	6a03      	ldr	r3, [r0, #32]
 800efd0:	b90b      	cbnz	r3, 800efd6 <__swbuf_r+0x12>
 800efd2:	f7fd ffe1 	bl	800cf98 <__sinit>
 800efd6:	69a3      	ldr	r3, [r4, #24]
 800efd8:	60a3      	str	r3, [r4, #8]
 800efda:	89a3      	ldrh	r3, [r4, #12]
 800efdc:	071a      	lsls	r2, r3, #28
 800efde:	d501      	bpl.n	800efe4 <__swbuf_r+0x20>
 800efe0:	6923      	ldr	r3, [r4, #16]
 800efe2:	b943      	cbnz	r3, 800eff6 <__swbuf_r+0x32>
 800efe4:	4621      	mov	r1, r4
 800efe6:	4628      	mov	r0, r5
 800efe8:	f000 f82a 	bl	800f040 <__swsetup_r>
 800efec:	b118      	cbz	r0, 800eff6 <__swbuf_r+0x32>
 800efee:	f04f 37ff 	mov.w	r7, #4294967295
 800eff2:	4638      	mov	r0, r7
 800eff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	6922      	ldr	r2, [r4, #16]
 800effa:	1a98      	subs	r0, r3, r2
 800effc:	6963      	ldr	r3, [r4, #20]
 800effe:	b2f6      	uxtb	r6, r6
 800f000:	4283      	cmp	r3, r0
 800f002:	4637      	mov	r7, r6
 800f004:	dc05      	bgt.n	800f012 <__swbuf_r+0x4e>
 800f006:	4621      	mov	r1, r4
 800f008:	4628      	mov	r0, r5
 800f00a:	f7ff fda7 	bl	800eb5c <_fflush_r>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d1ed      	bne.n	800efee <__swbuf_r+0x2a>
 800f012:	68a3      	ldr	r3, [r4, #8]
 800f014:	3b01      	subs	r3, #1
 800f016:	60a3      	str	r3, [r4, #8]
 800f018:	6823      	ldr	r3, [r4, #0]
 800f01a:	1c5a      	adds	r2, r3, #1
 800f01c:	6022      	str	r2, [r4, #0]
 800f01e:	701e      	strb	r6, [r3, #0]
 800f020:	6962      	ldr	r2, [r4, #20]
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	429a      	cmp	r2, r3
 800f026:	d004      	beq.n	800f032 <__swbuf_r+0x6e>
 800f028:	89a3      	ldrh	r3, [r4, #12]
 800f02a:	07db      	lsls	r3, r3, #31
 800f02c:	d5e1      	bpl.n	800eff2 <__swbuf_r+0x2e>
 800f02e:	2e0a      	cmp	r6, #10
 800f030:	d1df      	bne.n	800eff2 <__swbuf_r+0x2e>
 800f032:	4621      	mov	r1, r4
 800f034:	4628      	mov	r0, r5
 800f036:	f7ff fd91 	bl	800eb5c <_fflush_r>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d0d9      	beq.n	800eff2 <__swbuf_r+0x2e>
 800f03e:	e7d6      	b.n	800efee <__swbuf_r+0x2a>

0800f040 <__swsetup_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4b29      	ldr	r3, [pc, #164]	@ (800f0e8 <__swsetup_r+0xa8>)
 800f044:	4605      	mov	r5, r0
 800f046:	6818      	ldr	r0, [r3, #0]
 800f048:	460c      	mov	r4, r1
 800f04a:	b118      	cbz	r0, 800f054 <__swsetup_r+0x14>
 800f04c:	6a03      	ldr	r3, [r0, #32]
 800f04e:	b90b      	cbnz	r3, 800f054 <__swsetup_r+0x14>
 800f050:	f7fd ffa2 	bl	800cf98 <__sinit>
 800f054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f058:	0719      	lsls	r1, r3, #28
 800f05a:	d422      	bmi.n	800f0a2 <__swsetup_r+0x62>
 800f05c:	06da      	lsls	r2, r3, #27
 800f05e:	d407      	bmi.n	800f070 <__swsetup_r+0x30>
 800f060:	2209      	movs	r2, #9
 800f062:	602a      	str	r2, [r5, #0]
 800f064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f068:	81a3      	strh	r3, [r4, #12]
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295
 800f06e:	e033      	b.n	800f0d8 <__swsetup_r+0x98>
 800f070:	0758      	lsls	r0, r3, #29
 800f072:	d512      	bpl.n	800f09a <__swsetup_r+0x5a>
 800f074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f076:	b141      	cbz	r1, 800f08a <__swsetup_r+0x4a>
 800f078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f07c:	4299      	cmp	r1, r3
 800f07e:	d002      	beq.n	800f086 <__swsetup_r+0x46>
 800f080:	4628      	mov	r0, r5
 800f082:	f7fe ff0d 	bl	800dea0 <_free_r>
 800f086:	2300      	movs	r3, #0
 800f088:	6363      	str	r3, [r4, #52]	@ 0x34
 800f08a:	89a3      	ldrh	r3, [r4, #12]
 800f08c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	2300      	movs	r3, #0
 800f094:	6063      	str	r3, [r4, #4]
 800f096:	6923      	ldr	r3, [r4, #16]
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	89a3      	ldrh	r3, [r4, #12]
 800f09c:	f043 0308 	orr.w	r3, r3, #8
 800f0a0:	81a3      	strh	r3, [r4, #12]
 800f0a2:	6923      	ldr	r3, [r4, #16]
 800f0a4:	b94b      	cbnz	r3, 800f0ba <__swsetup_r+0x7a>
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0b0:	d003      	beq.n	800f0ba <__swsetup_r+0x7a>
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	f000 f883 	bl	800f1c0 <__smakebuf_r>
 800f0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0be:	f013 0201 	ands.w	r2, r3, #1
 800f0c2:	d00a      	beq.n	800f0da <__swsetup_r+0x9a>
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	60a2      	str	r2, [r4, #8]
 800f0c8:	6962      	ldr	r2, [r4, #20]
 800f0ca:	4252      	negs	r2, r2
 800f0cc:	61a2      	str	r2, [r4, #24]
 800f0ce:	6922      	ldr	r2, [r4, #16]
 800f0d0:	b942      	cbnz	r2, 800f0e4 <__swsetup_r+0xa4>
 800f0d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0d6:	d1c5      	bne.n	800f064 <__swsetup_r+0x24>
 800f0d8:	bd38      	pop	{r3, r4, r5, pc}
 800f0da:	0799      	lsls	r1, r3, #30
 800f0dc:	bf58      	it	pl
 800f0de:	6962      	ldrpl	r2, [r4, #20]
 800f0e0:	60a2      	str	r2, [r4, #8]
 800f0e2:	e7f4      	b.n	800f0ce <__swsetup_r+0x8e>
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	e7f7      	b.n	800f0d8 <__swsetup_r+0x98>
 800f0e8:	20000058 	.word	0x20000058

0800f0ec <_raise_r>:
 800f0ec:	291f      	cmp	r1, #31
 800f0ee:	b538      	push	{r3, r4, r5, lr}
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	d904      	bls.n	800f100 <_raise_r+0x14>
 800f0f6:	2316      	movs	r3, #22
 800f0f8:	6003      	str	r3, [r0, #0]
 800f0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fe:	bd38      	pop	{r3, r4, r5, pc}
 800f100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f102:	b112      	cbz	r2, 800f10a <_raise_r+0x1e>
 800f104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f108:	b94b      	cbnz	r3, 800f11e <_raise_r+0x32>
 800f10a:	4628      	mov	r0, r5
 800f10c:	f000 f830 	bl	800f170 <_getpid_r>
 800f110:	4622      	mov	r2, r4
 800f112:	4601      	mov	r1, r0
 800f114:	4628      	mov	r0, r5
 800f116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f11a:	f000 b817 	b.w	800f14c <_kill_r>
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d00a      	beq.n	800f138 <_raise_r+0x4c>
 800f122:	1c59      	adds	r1, r3, #1
 800f124:	d103      	bne.n	800f12e <_raise_r+0x42>
 800f126:	2316      	movs	r3, #22
 800f128:	6003      	str	r3, [r0, #0]
 800f12a:	2001      	movs	r0, #1
 800f12c:	e7e7      	b.n	800f0fe <_raise_r+0x12>
 800f12e:	2100      	movs	r1, #0
 800f130:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f134:	4620      	mov	r0, r4
 800f136:	4798      	blx	r3
 800f138:	2000      	movs	r0, #0
 800f13a:	e7e0      	b.n	800f0fe <_raise_r+0x12>

0800f13c <raise>:
 800f13c:	4b02      	ldr	r3, [pc, #8]	@ (800f148 <raise+0xc>)
 800f13e:	4601      	mov	r1, r0
 800f140:	6818      	ldr	r0, [r3, #0]
 800f142:	f7ff bfd3 	b.w	800f0ec <_raise_r>
 800f146:	bf00      	nop
 800f148:	20000058 	.word	0x20000058

0800f14c <_kill_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4d07      	ldr	r5, [pc, #28]	@ (800f16c <_kill_r+0x20>)
 800f150:	2300      	movs	r3, #0
 800f152:	4604      	mov	r4, r0
 800f154:	4608      	mov	r0, r1
 800f156:	4611      	mov	r1, r2
 800f158:	602b      	str	r3, [r5, #0]
 800f15a:	f7f8 f8a7 	bl	80072ac <_kill>
 800f15e:	1c43      	adds	r3, r0, #1
 800f160:	d102      	bne.n	800f168 <_kill_r+0x1c>
 800f162:	682b      	ldr	r3, [r5, #0]
 800f164:	b103      	cbz	r3, 800f168 <_kill_r+0x1c>
 800f166:	6023      	str	r3, [r4, #0]
 800f168:	bd38      	pop	{r3, r4, r5, pc}
 800f16a:	bf00      	nop
 800f16c:	200009b0 	.word	0x200009b0

0800f170 <_getpid_r>:
 800f170:	f7f8 b894 	b.w	800729c <_getpid>

0800f174 <__swhatbuf_r>:
 800f174:	b570      	push	{r4, r5, r6, lr}
 800f176:	460c      	mov	r4, r1
 800f178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f17c:	2900      	cmp	r1, #0
 800f17e:	b096      	sub	sp, #88	@ 0x58
 800f180:	4615      	mov	r5, r2
 800f182:	461e      	mov	r6, r3
 800f184:	da0d      	bge.n	800f1a2 <__swhatbuf_r+0x2e>
 800f186:	89a3      	ldrh	r3, [r4, #12]
 800f188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f18c:	f04f 0100 	mov.w	r1, #0
 800f190:	bf14      	ite	ne
 800f192:	2340      	movne	r3, #64	@ 0x40
 800f194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f198:	2000      	movs	r0, #0
 800f19a:	6031      	str	r1, [r6, #0]
 800f19c:	602b      	str	r3, [r5, #0]
 800f19e:	b016      	add	sp, #88	@ 0x58
 800f1a0:	bd70      	pop	{r4, r5, r6, pc}
 800f1a2:	466a      	mov	r2, sp
 800f1a4:	f000 f848 	bl	800f238 <_fstat_r>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	dbec      	blt.n	800f186 <__swhatbuf_r+0x12>
 800f1ac:	9901      	ldr	r1, [sp, #4]
 800f1ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1b6:	4259      	negs	r1, r3
 800f1b8:	4159      	adcs	r1, r3
 800f1ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1be:	e7eb      	b.n	800f198 <__swhatbuf_r+0x24>

0800f1c0 <__smakebuf_r>:
 800f1c0:	898b      	ldrh	r3, [r1, #12]
 800f1c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1c4:	079d      	lsls	r5, r3, #30
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	460c      	mov	r4, r1
 800f1ca:	d507      	bpl.n	800f1dc <__smakebuf_r+0x1c>
 800f1cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	6163      	str	r3, [r4, #20]
 800f1d8:	b003      	add	sp, #12
 800f1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1dc:	ab01      	add	r3, sp, #4
 800f1de:	466a      	mov	r2, sp
 800f1e0:	f7ff ffc8 	bl	800f174 <__swhatbuf_r>
 800f1e4:	9f00      	ldr	r7, [sp, #0]
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	4639      	mov	r1, r7
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7fe fecc 	bl	800df88 <_malloc_r>
 800f1f0:	b948      	cbnz	r0, 800f206 <__smakebuf_r+0x46>
 800f1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1f6:	059a      	lsls	r2, r3, #22
 800f1f8:	d4ee      	bmi.n	800f1d8 <__smakebuf_r+0x18>
 800f1fa:	f023 0303 	bic.w	r3, r3, #3
 800f1fe:	f043 0302 	orr.w	r3, r3, #2
 800f202:	81a3      	strh	r3, [r4, #12]
 800f204:	e7e2      	b.n	800f1cc <__smakebuf_r+0xc>
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	6020      	str	r0, [r4, #0]
 800f20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f20e:	81a3      	strh	r3, [r4, #12]
 800f210:	9b01      	ldr	r3, [sp, #4]
 800f212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f216:	b15b      	cbz	r3, 800f230 <__smakebuf_r+0x70>
 800f218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f21c:	4630      	mov	r0, r6
 800f21e:	f000 f81d 	bl	800f25c <_isatty_r>
 800f222:	b128      	cbz	r0, 800f230 <__smakebuf_r+0x70>
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	f023 0303 	bic.w	r3, r3, #3
 800f22a:	f043 0301 	orr.w	r3, r3, #1
 800f22e:	81a3      	strh	r3, [r4, #12]
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	431d      	orrs	r5, r3
 800f234:	81a5      	strh	r5, [r4, #12]
 800f236:	e7cf      	b.n	800f1d8 <__smakebuf_r+0x18>

0800f238 <_fstat_r>:
 800f238:	b538      	push	{r3, r4, r5, lr}
 800f23a:	4d07      	ldr	r5, [pc, #28]	@ (800f258 <_fstat_r+0x20>)
 800f23c:	2300      	movs	r3, #0
 800f23e:	4604      	mov	r4, r0
 800f240:	4608      	mov	r0, r1
 800f242:	4611      	mov	r1, r2
 800f244:	602b      	str	r3, [r5, #0]
 800f246:	f7f8 f891 	bl	800736c <_fstat>
 800f24a:	1c43      	adds	r3, r0, #1
 800f24c:	d102      	bne.n	800f254 <_fstat_r+0x1c>
 800f24e:	682b      	ldr	r3, [r5, #0]
 800f250:	b103      	cbz	r3, 800f254 <_fstat_r+0x1c>
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	bd38      	pop	{r3, r4, r5, pc}
 800f256:	bf00      	nop
 800f258:	200009b0 	.word	0x200009b0

0800f25c <_isatty_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d06      	ldr	r5, [pc, #24]	@ (800f278 <_isatty_r+0x1c>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	602b      	str	r3, [r5, #0]
 800f268:	f7f8 f890 	bl	800738c <_isatty>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_isatty_r+0x1a>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_isatty_r+0x1a>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	200009b0 	.word	0x200009b0

0800f27c <pow>:
 800f27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27e:	ed2d 8b02 	vpush	{d8}
 800f282:	eeb0 8a40 	vmov.f32	s16, s0
 800f286:	eef0 8a60 	vmov.f32	s17, s1
 800f28a:	ec55 4b11 	vmov	r4, r5, d1
 800f28e:	f000 fc77 	bl	800fb80 <__ieee754_pow>
 800f292:	4622      	mov	r2, r4
 800f294:	462b      	mov	r3, r5
 800f296:	4620      	mov	r0, r4
 800f298:	4629      	mov	r1, r5
 800f29a:	ec57 6b10 	vmov	r6, r7, d0
 800f29e:	f7f1 fc65 	bl	8000b6c <__aeabi_dcmpun>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d13b      	bne.n	800f31e <pow+0xa2>
 800f2a6:	ec51 0b18 	vmov	r0, r1, d8
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f7f1 fc2b 	bl	8000b08 <__aeabi_dcmpeq>
 800f2b2:	b1b8      	cbz	r0, 800f2e4 <pow+0x68>
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f7f1 fc24 	bl	8000b08 <__aeabi_dcmpeq>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d146      	bne.n	800f352 <pow+0xd6>
 800f2c4:	ec45 4b10 	vmov	d0, r4, r5
 800f2c8:	f000 f949 	bl	800f55e <finite>
 800f2cc:	b338      	cbz	r0, 800f31e <pow+0xa2>
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	f7f1 fc21 	bl	8000b1c <__aeabi_dcmplt>
 800f2da:	b300      	cbz	r0, 800f31e <pow+0xa2>
 800f2dc:	f7fd ff58 	bl	800d190 <__errno>
 800f2e0:	2322      	movs	r3, #34	@ 0x22
 800f2e2:	e01b      	b.n	800f31c <pow+0xa0>
 800f2e4:	ec47 6b10 	vmov	d0, r6, r7
 800f2e8:	f000 f939 	bl	800f55e <finite>
 800f2ec:	b9e0      	cbnz	r0, 800f328 <pow+0xac>
 800f2ee:	eeb0 0a48 	vmov.f32	s0, s16
 800f2f2:	eef0 0a68 	vmov.f32	s1, s17
 800f2f6:	f000 f932 	bl	800f55e <finite>
 800f2fa:	b1a8      	cbz	r0, 800f328 <pow+0xac>
 800f2fc:	ec45 4b10 	vmov	d0, r4, r5
 800f300:	f000 f92d 	bl	800f55e <finite>
 800f304:	b180      	cbz	r0, 800f328 <pow+0xac>
 800f306:	4632      	mov	r2, r6
 800f308:	463b      	mov	r3, r7
 800f30a:	4630      	mov	r0, r6
 800f30c:	4639      	mov	r1, r7
 800f30e:	f7f1 fc2d 	bl	8000b6c <__aeabi_dcmpun>
 800f312:	2800      	cmp	r0, #0
 800f314:	d0e2      	beq.n	800f2dc <pow+0x60>
 800f316:	f7fd ff3b 	bl	800d190 <__errno>
 800f31a:	2321      	movs	r3, #33	@ 0x21
 800f31c:	6003      	str	r3, [r0, #0]
 800f31e:	ecbd 8b02 	vpop	{d8}
 800f322:	ec47 6b10 	vmov	d0, r6, r7
 800f326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f328:	2200      	movs	r2, #0
 800f32a:	2300      	movs	r3, #0
 800f32c:	4630      	mov	r0, r6
 800f32e:	4639      	mov	r1, r7
 800f330:	f7f1 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 800f334:	2800      	cmp	r0, #0
 800f336:	d0f2      	beq.n	800f31e <pow+0xa2>
 800f338:	eeb0 0a48 	vmov.f32	s0, s16
 800f33c:	eef0 0a68 	vmov.f32	s1, s17
 800f340:	f000 f90d 	bl	800f55e <finite>
 800f344:	2800      	cmp	r0, #0
 800f346:	d0ea      	beq.n	800f31e <pow+0xa2>
 800f348:	ec45 4b10 	vmov	d0, r4, r5
 800f34c:	f000 f907 	bl	800f55e <finite>
 800f350:	e7c3      	b.n	800f2da <pow+0x5e>
 800f352:	4f01      	ldr	r7, [pc, #4]	@ (800f358 <pow+0xdc>)
 800f354:	2600      	movs	r6, #0
 800f356:	e7e2      	b.n	800f31e <pow+0xa2>
 800f358:	3ff00000 	.word	0x3ff00000

0800f35c <sqrt>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	ed2d 8b02 	vpush	{d8}
 800f362:	ec55 4b10 	vmov	r4, r5, d0
 800f366:	f000 f961 	bl	800f62c <__ieee754_sqrt>
 800f36a:	4622      	mov	r2, r4
 800f36c:	462b      	mov	r3, r5
 800f36e:	4620      	mov	r0, r4
 800f370:	4629      	mov	r1, r5
 800f372:	eeb0 8a40 	vmov.f32	s16, s0
 800f376:	eef0 8a60 	vmov.f32	s17, s1
 800f37a:	f7f1 fbf7 	bl	8000b6c <__aeabi_dcmpun>
 800f37e:	b990      	cbnz	r0, 800f3a6 <sqrt+0x4a>
 800f380:	2200      	movs	r2, #0
 800f382:	2300      	movs	r3, #0
 800f384:	4620      	mov	r0, r4
 800f386:	4629      	mov	r1, r5
 800f388:	f7f1 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800f38c:	b158      	cbz	r0, 800f3a6 <sqrt+0x4a>
 800f38e:	f7fd feff 	bl	800d190 <__errno>
 800f392:	2321      	movs	r3, #33	@ 0x21
 800f394:	6003      	str	r3, [r0, #0]
 800f396:	2200      	movs	r2, #0
 800f398:	2300      	movs	r3, #0
 800f39a:	4610      	mov	r0, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	f7f1 fa75 	bl	800088c <__aeabi_ddiv>
 800f3a2:	ec41 0b18 	vmov	d8, r0, r1
 800f3a6:	eeb0 0a48 	vmov.f32	s0, s16
 800f3aa:	eef0 0a68 	vmov.f32	s1, s17
 800f3ae:	ecbd 8b02 	vpop	{d8}
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	0000      	movs	r0, r0
	...

0800f3b8 <cos>:
 800f3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3ba:	ec53 2b10 	vmov	r2, r3, d0
 800f3be:	4826      	ldr	r0, [pc, #152]	@ (800f458 <cos+0xa0>)
 800f3c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f3c4:	4281      	cmp	r1, r0
 800f3c6:	d806      	bhi.n	800f3d6 <cos+0x1e>
 800f3c8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f450 <cos+0x98>
 800f3cc:	b005      	add	sp, #20
 800f3ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d2:	f000 ba51 	b.w	800f878 <__kernel_cos>
 800f3d6:	4821      	ldr	r0, [pc, #132]	@ (800f45c <cos+0xa4>)
 800f3d8:	4281      	cmp	r1, r0
 800f3da:	d908      	bls.n	800f3ee <cos+0x36>
 800f3dc:	4610      	mov	r0, r2
 800f3de:	4619      	mov	r1, r3
 800f3e0:	f7f0 ff72 	bl	80002c8 <__aeabi_dsub>
 800f3e4:	ec41 0b10 	vmov	d0, r0, r1
 800f3e8:	b005      	add	sp, #20
 800f3ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3ee:	4668      	mov	r0, sp
 800f3f0:	f001 f90a 	bl	8010608 <__ieee754_rem_pio2>
 800f3f4:	f000 0003 	and.w	r0, r0, #3
 800f3f8:	2801      	cmp	r0, #1
 800f3fa:	d00b      	beq.n	800f414 <cos+0x5c>
 800f3fc:	2802      	cmp	r0, #2
 800f3fe:	d015      	beq.n	800f42c <cos+0x74>
 800f400:	b9d8      	cbnz	r0, 800f43a <cos+0x82>
 800f402:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f406:	ed9d 0b00 	vldr	d0, [sp]
 800f40a:	f000 fa35 	bl	800f878 <__kernel_cos>
 800f40e:	ec51 0b10 	vmov	r0, r1, d0
 800f412:	e7e7      	b.n	800f3e4 <cos+0x2c>
 800f414:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f418:	ed9d 0b00 	vldr	d0, [sp]
 800f41c:	f000 faf4 	bl	800fa08 <__kernel_sin>
 800f420:	ec53 2b10 	vmov	r2, r3, d0
 800f424:	4610      	mov	r0, r2
 800f426:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f42a:	e7db      	b.n	800f3e4 <cos+0x2c>
 800f42c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f430:	ed9d 0b00 	vldr	d0, [sp]
 800f434:	f000 fa20 	bl	800f878 <__kernel_cos>
 800f438:	e7f2      	b.n	800f420 <cos+0x68>
 800f43a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f43e:	ed9d 0b00 	vldr	d0, [sp]
 800f442:	2001      	movs	r0, #1
 800f444:	f000 fae0 	bl	800fa08 <__kernel_sin>
 800f448:	e7e1      	b.n	800f40e <cos+0x56>
 800f44a:	bf00      	nop
 800f44c:	f3af 8000 	nop.w
	...
 800f458:	3fe921fb 	.word	0x3fe921fb
 800f45c:	7fefffff 	.word	0x7fefffff

0800f460 <acosf>:
 800f460:	b508      	push	{r3, lr}
 800f462:	ed2d 8b02 	vpush	{d8}
 800f466:	eeb0 8a40 	vmov.f32	s16, s0
 800f46a:	f001 fad1 	bl	8010a10 <__ieee754_acosf>
 800f46e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	eef0 8a40 	vmov.f32	s17, s0
 800f47a:	d615      	bvs.n	800f4a8 <acosf+0x48>
 800f47c:	eeb0 0a48 	vmov.f32	s0, s16
 800f480:	f000 f866 	bl	800f550 <fabsf>
 800f484:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f488:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f490:	dd0a      	ble.n	800f4a8 <acosf+0x48>
 800f492:	f7fd fe7d 	bl	800d190 <__errno>
 800f496:	ecbd 8b02 	vpop	{d8}
 800f49a:	2321      	movs	r3, #33	@ 0x21
 800f49c:	6003      	str	r3, [r0, #0]
 800f49e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f4a2:	4804      	ldr	r0, [pc, #16]	@ (800f4b4 <acosf+0x54>)
 800f4a4:	f000 b866 	b.w	800f574 <nanf>
 800f4a8:	eeb0 0a68 	vmov.f32	s0, s17
 800f4ac:	ecbd 8b02 	vpop	{d8}
 800f4b0:	bd08      	pop	{r3, pc}
 800f4b2:	bf00      	nop
 800f4b4:	08011cce 	.word	0x08011cce

0800f4b8 <asinf>:
 800f4b8:	b508      	push	{r3, lr}
 800f4ba:	ed2d 8b02 	vpush	{d8}
 800f4be:	eeb0 8a40 	vmov.f32	s16, s0
 800f4c2:	f001 fb9d 	bl	8010c00 <__ieee754_asinf>
 800f4c6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ce:	eef0 8a40 	vmov.f32	s17, s0
 800f4d2:	d615      	bvs.n	800f500 <asinf+0x48>
 800f4d4:	eeb0 0a48 	vmov.f32	s0, s16
 800f4d8:	f000 f83a 	bl	800f550 <fabsf>
 800f4dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f4e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e8:	dd0a      	ble.n	800f500 <asinf+0x48>
 800f4ea:	f7fd fe51 	bl	800d190 <__errno>
 800f4ee:	ecbd 8b02 	vpop	{d8}
 800f4f2:	2321      	movs	r3, #33	@ 0x21
 800f4f4:	6003      	str	r3, [r0, #0]
 800f4f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f4fa:	4804      	ldr	r0, [pc, #16]	@ (800f50c <asinf+0x54>)
 800f4fc:	f000 b83a 	b.w	800f574 <nanf>
 800f500:	eeb0 0a68 	vmov.f32	s0, s17
 800f504:	ecbd 8b02 	vpop	{d8}
 800f508:	bd08      	pop	{r3, pc}
 800f50a:	bf00      	nop
 800f50c:	08011cce 	.word	0x08011cce

0800f510 <atan2f>:
 800f510:	f001 bc5c 	b.w	8010dcc <__ieee754_atan2f>

0800f514 <sqrtf>:
 800f514:	b508      	push	{r3, lr}
 800f516:	ed2d 8b02 	vpush	{d8}
 800f51a:	eeb0 8a40 	vmov.f32	s16, s0
 800f51e:	f000 f95f 	bl	800f7e0 <__ieee754_sqrtf>
 800f522:	eeb4 8a48 	vcmp.f32	s16, s16
 800f526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52a:	d60c      	bvs.n	800f546 <sqrtf+0x32>
 800f52c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f54c <sqrtf+0x38>
 800f530:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f538:	d505      	bpl.n	800f546 <sqrtf+0x32>
 800f53a:	f7fd fe29 	bl	800d190 <__errno>
 800f53e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f542:	2321      	movs	r3, #33	@ 0x21
 800f544:	6003      	str	r3, [r0, #0]
 800f546:	ecbd 8b02 	vpop	{d8}
 800f54a:	bd08      	pop	{r3, pc}
 800f54c:	00000000 	.word	0x00000000

0800f550 <fabsf>:
 800f550:	ee10 3a10 	vmov	r3, s0
 800f554:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f558:	ee00 3a10 	vmov	s0, r3
 800f55c:	4770      	bx	lr

0800f55e <finite>:
 800f55e:	b082      	sub	sp, #8
 800f560:	ed8d 0b00 	vstr	d0, [sp]
 800f564:	9801      	ldr	r0, [sp, #4]
 800f566:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f56a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f56e:	0fc0      	lsrs	r0, r0, #31
 800f570:	b002      	add	sp, #8
 800f572:	4770      	bx	lr

0800f574 <nanf>:
 800f574:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f57c <nanf+0x8>
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	7fc00000 	.word	0x7fc00000

0800f580 <fmaxf>:
 800f580:	b508      	push	{r3, lr}
 800f582:	ed2d 8b02 	vpush	{d8}
 800f586:	eeb0 8a40 	vmov.f32	s16, s0
 800f58a:	eef0 8a60 	vmov.f32	s17, s1
 800f58e:	f000 f831 	bl	800f5f4 <__fpclassifyf>
 800f592:	b930      	cbnz	r0, 800f5a2 <fmaxf+0x22>
 800f594:	eeb0 8a68 	vmov.f32	s16, s17
 800f598:	eeb0 0a48 	vmov.f32	s0, s16
 800f59c:	ecbd 8b02 	vpop	{d8}
 800f5a0:	bd08      	pop	{r3, pc}
 800f5a2:	eeb0 0a68 	vmov.f32	s0, s17
 800f5a6:	f000 f825 	bl	800f5f4 <__fpclassifyf>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d0f4      	beq.n	800f598 <fmaxf+0x18>
 800f5ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b6:	dded      	ble.n	800f594 <fmaxf+0x14>
 800f5b8:	e7ee      	b.n	800f598 <fmaxf+0x18>

0800f5ba <fminf>:
 800f5ba:	b508      	push	{r3, lr}
 800f5bc:	ed2d 8b02 	vpush	{d8}
 800f5c0:	eeb0 8a40 	vmov.f32	s16, s0
 800f5c4:	eef0 8a60 	vmov.f32	s17, s1
 800f5c8:	f000 f814 	bl	800f5f4 <__fpclassifyf>
 800f5cc:	b930      	cbnz	r0, 800f5dc <fminf+0x22>
 800f5ce:	eeb0 8a68 	vmov.f32	s16, s17
 800f5d2:	eeb0 0a48 	vmov.f32	s0, s16
 800f5d6:	ecbd 8b02 	vpop	{d8}
 800f5da:	bd08      	pop	{r3, pc}
 800f5dc:	eeb0 0a68 	vmov.f32	s0, s17
 800f5e0:	f000 f808 	bl	800f5f4 <__fpclassifyf>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d0f4      	beq.n	800f5d2 <fminf+0x18>
 800f5e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f0:	d5ed      	bpl.n	800f5ce <fminf+0x14>
 800f5f2:	e7ee      	b.n	800f5d2 <fminf+0x18>

0800f5f4 <__fpclassifyf>:
 800f5f4:	ee10 3a10 	vmov	r3, s0
 800f5f8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f5fc:	d00d      	beq.n	800f61a <__fpclassifyf+0x26>
 800f5fe:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f602:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f606:	d30a      	bcc.n	800f61e <__fpclassifyf+0x2a>
 800f608:	4b07      	ldr	r3, [pc, #28]	@ (800f628 <__fpclassifyf+0x34>)
 800f60a:	1e42      	subs	r2, r0, #1
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d908      	bls.n	800f622 <__fpclassifyf+0x2e>
 800f610:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f614:	4258      	negs	r0, r3
 800f616:	4158      	adcs	r0, r3
 800f618:	4770      	bx	lr
 800f61a:	2002      	movs	r0, #2
 800f61c:	4770      	bx	lr
 800f61e:	2004      	movs	r0, #4
 800f620:	4770      	bx	lr
 800f622:	2003      	movs	r0, #3
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	007ffffe 	.word	0x007ffffe

0800f62c <__ieee754_sqrt>:
 800f62c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f630:	4a68      	ldr	r2, [pc, #416]	@ (800f7d4 <__ieee754_sqrt+0x1a8>)
 800f632:	ec55 4b10 	vmov	r4, r5, d0
 800f636:	43aa      	bics	r2, r5
 800f638:	462b      	mov	r3, r5
 800f63a:	4621      	mov	r1, r4
 800f63c:	d110      	bne.n	800f660 <__ieee754_sqrt+0x34>
 800f63e:	4622      	mov	r2, r4
 800f640:	4620      	mov	r0, r4
 800f642:	4629      	mov	r1, r5
 800f644:	f7f0 fff8 	bl	8000638 <__aeabi_dmul>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4620      	mov	r0, r4
 800f64e:	4629      	mov	r1, r5
 800f650:	f7f0 fe3c 	bl	80002cc <__adddf3>
 800f654:	4604      	mov	r4, r0
 800f656:	460d      	mov	r5, r1
 800f658:	ec45 4b10 	vmov	d0, r4, r5
 800f65c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f660:	2d00      	cmp	r5, #0
 800f662:	dc0e      	bgt.n	800f682 <__ieee754_sqrt+0x56>
 800f664:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f668:	4322      	orrs	r2, r4
 800f66a:	d0f5      	beq.n	800f658 <__ieee754_sqrt+0x2c>
 800f66c:	b19d      	cbz	r5, 800f696 <__ieee754_sqrt+0x6a>
 800f66e:	4622      	mov	r2, r4
 800f670:	4620      	mov	r0, r4
 800f672:	4629      	mov	r1, r5
 800f674:	f7f0 fe28 	bl	80002c8 <__aeabi_dsub>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	f7f1 f906 	bl	800088c <__aeabi_ddiv>
 800f680:	e7e8      	b.n	800f654 <__ieee754_sqrt+0x28>
 800f682:	152a      	asrs	r2, r5, #20
 800f684:	d115      	bne.n	800f6b2 <__ieee754_sqrt+0x86>
 800f686:	2000      	movs	r0, #0
 800f688:	e009      	b.n	800f69e <__ieee754_sqrt+0x72>
 800f68a:	0acb      	lsrs	r3, r1, #11
 800f68c:	3a15      	subs	r2, #21
 800f68e:	0549      	lsls	r1, r1, #21
 800f690:	2b00      	cmp	r3, #0
 800f692:	d0fa      	beq.n	800f68a <__ieee754_sqrt+0x5e>
 800f694:	e7f7      	b.n	800f686 <__ieee754_sqrt+0x5a>
 800f696:	462a      	mov	r2, r5
 800f698:	e7fa      	b.n	800f690 <__ieee754_sqrt+0x64>
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	3001      	adds	r0, #1
 800f69e:	02dc      	lsls	r4, r3, #11
 800f6a0:	d5fb      	bpl.n	800f69a <__ieee754_sqrt+0x6e>
 800f6a2:	1e44      	subs	r4, r0, #1
 800f6a4:	1b12      	subs	r2, r2, r4
 800f6a6:	f1c0 0420 	rsb	r4, r0, #32
 800f6aa:	fa21 f404 	lsr.w	r4, r1, r4
 800f6ae:	4323      	orrs	r3, r4
 800f6b0:	4081      	lsls	r1, r0
 800f6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6b6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f6be:	07d2      	lsls	r2, r2, #31
 800f6c0:	bf5c      	itt	pl
 800f6c2:	005b      	lslpl	r3, r3, #1
 800f6c4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f6c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6cc:	bf58      	it	pl
 800f6ce:	0049      	lslpl	r1, r1, #1
 800f6d0:	2600      	movs	r6, #0
 800f6d2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f6d6:	106d      	asrs	r5, r5, #1
 800f6d8:	0049      	lsls	r1, r1, #1
 800f6da:	2016      	movs	r0, #22
 800f6dc:	4632      	mov	r2, r6
 800f6de:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f6e2:	1917      	adds	r7, r2, r4
 800f6e4:	429f      	cmp	r7, r3
 800f6e6:	bfde      	ittt	le
 800f6e8:	193a      	addle	r2, r7, r4
 800f6ea:	1bdb      	suble	r3, r3, r7
 800f6ec:	1936      	addle	r6, r6, r4
 800f6ee:	0fcf      	lsrs	r7, r1, #31
 800f6f0:	3801      	subs	r0, #1
 800f6f2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f6f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f6fa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f6fe:	d1f0      	bne.n	800f6e2 <__ieee754_sqrt+0xb6>
 800f700:	4604      	mov	r4, r0
 800f702:	2720      	movs	r7, #32
 800f704:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f708:	429a      	cmp	r2, r3
 800f70a:	eb00 0e0c 	add.w	lr, r0, ip
 800f70e:	db02      	blt.n	800f716 <__ieee754_sqrt+0xea>
 800f710:	d113      	bne.n	800f73a <__ieee754_sqrt+0x10e>
 800f712:	458e      	cmp	lr, r1
 800f714:	d811      	bhi.n	800f73a <__ieee754_sqrt+0x10e>
 800f716:	f1be 0f00 	cmp.w	lr, #0
 800f71a:	eb0e 000c 	add.w	r0, lr, ip
 800f71e:	da42      	bge.n	800f7a6 <__ieee754_sqrt+0x17a>
 800f720:	2800      	cmp	r0, #0
 800f722:	db40      	blt.n	800f7a6 <__ieee754_sqrt+0x17a>
 800f724:	f102 0801 	add.w	r8, r2, #1
 800f728:	1a9b      	subs	r3, r3, r2
 800f72a:	458e      	cmp	lr, r1
 800f72c:	bf88      	it	hi
 800f72e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f732:	eba1 010e 	sub.w	r1, r1, lr
 800f736:	4464      	add	r4, ip
 800f738:	4642      	mov	r2, r8
 800f73a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f73e:	3f01      	subs	r7, #1
 800f740:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f744:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f748:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f74c:	d1dc      	bne.n	800f708 <__ieee754_sqrt+0xdc>
 800f74e:	4319      	orrs	r1, r3
 800f750:	d01b      	beq.n	800f78a <__ieee754_sqrt+0x15e>
 800f752:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f7d8 <__ieee754_sqrt+0x1ac>
 800f756:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f7dc <__ieee754_sqrt+0x1b0>
 800f75a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f75e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f762:	f7f0 fdb1 	bl	80002c8 <__aeabi_dsub>
 800f766:	e9da 8900 	ldrd	r8, r9, [sl]
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	4640      	mov	r0, r8
 800f770:	4649      	mov	r1, r9
 800f772:	f7f1 f9dd 	bl	8000b30 <__aeabi_dcmple>
 800f776:	b140      	cbz	r0, 800f78a <__ieee754_sqrt+0x15e>
 800f778:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f77c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f780:	e9db 2300 	ldrd	r2, r3, [fp]
 800f784:	d111      	bne.n	800f7aa <__ieee754_sqrt+0x17e>
 800f786:	3601      	adds	r6, #1
 800f788:	463c      	mov	r4, r7
 800f78a:	1072      	asrs	r2, r6, #1
 800f78c:	0863      	lsrs	r3, r4, #1
 800f78e:	07f1      	lsls	r1, r6, #31
 800f790:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f794:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f798:	bf48      	it	mi
 800f79a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f79e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	e756      	b.n	800f654 <__ieee754_sqrt+0x28>
 800f7a6:	4690      	mov	r8, r2
 800f7a8:	e7be      	b.n	800f728 <__ieee754_sqrt+0xfc>
 800f7aa:	f7f0 fd8f 	bl	80002cc <__adddf3>
 800f7ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f1 f9af 	bl	8000b1c <__aeabi_dcmplt>
 800f7be:	b120      	cbz	r0, 800f7ca <__ieee754_sqrt+0x19e>
 800f7c0:	1ca0      	adds	r0, r4, #2
 800f7c2:	bf08      	it	eq
 800f7c4:	3601      	addeq	r6, #1
 800f7c6:	3402      	adds	r4, #2
 800f7c8:	e7df      	b.n	800f78a <__ieee754_sqrt+0x15e>
 800f7ca:	1c63      	adds	r3, r4, #1
 800f7cc:	f023 0401 	bic.w	r4, r3, #1
 800f7d0:	e7db      	b.n	800f78a <__ieee754_sqrt+0x15e>
 800f7d2:	bf00      	nop
 800f7d4:	7ff00000 	.word	0x7ff00000
 800f7d8:	20000220 	.word	0x20000220
 800f7dc:	20000218 	.word	0x20000218

0800f7e0 <__ieee754_sqrtf>:
 800f7e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f7e4:	4770      	bx	lr
	...

0800f7e8 <round>:
 800f7e8:	ec51 0b10 	vmov	r0, r1, d0
 800f7ec:	b570      	push	{r4, r5, r6, lr}
 800f7ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f7f2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f7f6:	2a13      	cmp	r2, #19
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4605      	mov	r5, r0
 800f7fc:	dc1b      	bgt.n	800f836 <round+0x4e>
 800f7fe:	2a00      	cmp	r2, #0
 800f800:	da0b      	bge.n	800f81a <round+0x32>
 800f802:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f806:	3201      	adds	r2, #1
 800f808:	bf04      	itt	eq
 800f80a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f80e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f812:	2200      	movs	r2, #0
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	e015      	b.n	800f846 <round+0x5e>
 800f81a:	4c15      	ldr	r4, [pc, #84]	@ (800f870 <round+0x88>)
 800f81c:	4114      	asrs	r4, r2
 800f81e:	ea04 0601 	and.w	r6, r4, r1
 800f822:	4306      	orrs	r6, r0
 800f824:	d00f      	beq.n	800f846 <round+0x5e>
 800f826:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f82a:	fa41 f202 	asr.w	r2, r1, r2
 800f82e:	4413      	add	r3, r2
 800f830:	ea23 0304 	bic.w	r3, r3, r4
 800f834:	e7ed      	b.n	800f812 <round+0x2a>
 800f836:	2a33      	cmp	r2, #51	@ 0x33
 800f838:	dd08      	ble.n	800f84c <round+0x64>
 800f83a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f83e:	d102      	bne.n	800f846 <round+0x5e>
 800f840:	4602      	mov	r2, r0
 800f842:	f7f0 fd43 	bl	80002cc <__adddf3>
 800f846:	ec41 0b10 	vmov	d0, r0, r1
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
 800f84c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f850:	f04f 34ff 	mov.w	r4, #4294967295
 800f854:	40f4      	lsrs	r4, r6
 800f856:	4204      	tst	r4, r0
 800f858:	d0f5      	beq.n	800f846 <round+0x5e>
 800f85a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f85e:	2201      	movs	r2, #1
 800f860:	408a      	lsls	r2, r1
 800f862:	1952      	adds	r2, r2, r5
 800f864:	bf28      	it	cs
 800f866:	3301      	addcs	r3, #1
 800f868:	ea22 0204 	bic.w	r2, r2, r4
 800f86c:	e7d2      	b.n	800f814 <round+0x2c>
 800f86e:	bf00      	nop
 800f870:	000fffff 	.word	0x000fffff
 800f874:	00000000 	.word	0x00000000

0800f878 <__kernel_cos>:
 800f878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	ec57 6b10 	vmov	r6, r7, d0
 800f880:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f884:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f888:	ed8d 1b00 	vstr	d1, [sp]
 800f88c:	d206      	bcs.n	800f89c <__kernel_cos+0x24>
 800f88e:	4630      	mov	r0, r6
 800f890:	4639      	mov	r1, r7
 800f892:	f7f1 f981 	bl	8000b98 <__aeabi_d2iz>
 800f896:	2800      	cmp	r0, #0
 800f898:	f000 8088 	beq.w	800f9ac <__kernel_cos+0x134>
 800f89c:	4632      	mov	r2, r6
 800f89e:	463b      	mov	r3, r7
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	4639      	mov	r1, r7
 800f8a4:	f7f0 fec8 	bl	8000638 <__aeabi_dmul>
 800f8a8:	4b51      	ldr	r3, [pc, #324]	@ (800f9f0 <__kernel_cos+0x178>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	460d      	mov	r5, r1
 800f8b0:	f7f0 fec2 	bl	8000638 <__aeabi_dmul>
 800f8b4:	a340      	add	r3, pc, #256	@ (adr r3, 800f9b8 <__kernel_cos+0x140>)
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	4682      	mov	sl, r0
 800f8bc:	468b      	mov	fp, r1
 800f8be:	4620      	mov	r0, r4
 800f8c0:	4629      	mov	r1, r5
 800f8c2:	f7f0 feb9 	bl	8000638 <__aeabi_dmul>
 800f8c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800f9c0 <__kernel_cos+0x148>)
 800f8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8cc:	f7f0 fcfe 	bl	80002cc <__adddf3>
 800f8d0:	4622      	mov	r2, r4
 800f8d2:	462b      	mov	r3, r5
 800f8d4:	f7f0 feb0 	bl	8000638 <__aeabi_dmul>
 800f8d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f9c8 <__kernel_cos+0x150>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f7f0 fcf3 	bl	80002c8 <__aeabi_dsub>
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	462b      	mov	r3, r5
 800f8e6:	f7f0 fea7 	bl	8000638 <__aeabi_dmul>
 800f8ea:	a339      	add	r3, pc, #228	@ (adr r3, 800f9d0 <__kernel_cos+0x158>)
 800f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f0:	f7f0 fcec 	bl	80002cc <__adddf3>
 800f8f4:	4622      	mov	r2, r4
 800f8f6:	462b      	mov	r3, r5
 800f8f8:	f7f0 fe9e 	bl	8000638 <__aeabi_dmul>
 800f8fc:	a336      	add	r3, pc, #216	@ (adr r3, 800f9d8 <__kernel_cos+0x160>)
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f7f0 fce1 	bl	80002c8 <__aeabi_dsub>
 800f906:	4622      	mov	r2, r4
 800f908:	462b      	mov	r3, r5
 800f90a:	f7f0 fe95 	bl	8000638 <__aeabi_dmul>
 800f90e:	a334      	add	r3, pc, #208	@ (adr r3, 800f9e0 <__kernel_cos+0x168>)
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	f7f0 fcda 	bl	80002cc <__adddf3>
 800f918:	4622      	mov	r2, r4
 800f91a:	462b      	mov	r3, r5
 800f91c:	f7f0 fe8c 	bl	8000638 <__aeabi_dmul>
 800f920:	4622      	mov	r2, r4
 800f922:	462b      	mov	r3, r5
 800f924:	f7f0 fe88 	bl	8000638 <__aeabi_dmul>
 800f928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f92c:	4604      	mov	r4, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	4630      	mov	r0, r6
 800f932:	4639      	mov	r1, r7
 800f934:	f7f0 fe80 	bl	8000638 <__aeabi_dmul>
 800f938:	460b      	mov	r3, r1
 800f93a:	4602      	mov	r2, r0
 800f93c:	4629      	mov	r1, r5
 800f93e:	4620      	mov	r0, r4
 800f940:	f7f0 fcc2 	bl	80002c8 <__aeabi_dsub>
 800f944:	4b2b      	ldr	r3, [pc, #172]	@ (800f9f4 <__kernel_cos+0x17c>)
 800f946:	4598      	cmp	r8, r3
 800f948:	4606      	mov	r6, r0
 800f94a:	460f      	mov	r7, r1
 800f94c:	d810      	bhi.n	800f970 <__kernel_cos+0xf8>
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4650      	mov	r0, sl
 800f954:	4659      	mov	r1, fp
 800f956:	f7f0 fcb7 	bl	80002c8 <__aeabi_dsub>
 800f95a:	460b      	mov	r3, r1
 800f95c:	4926      	ldr	r1, [pc, #152]	@ (800f9f8 <__kernel_cos+0x180>)
 800f95e:	4602      	mov	r2, r0
 800f960:	2000      	movs	r0, #0
 800f962:	f7f0 fcb1 	bl	80002c8 <__aeabi_dsub>
 800f966:	ec41 0b10 	vmov	d0, r0, r1
 800f96a:	b003      	add	sp, #12
 800f96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f970:	4b22      	ldr	r3, [pc, #136]	@ (800f9fc <__kernel_cos+0x184>)
 800f972:	4921      	ldr	r1, [pc, #132]	@ (800f9f8 <__kernel_cos+0x180>)
 800f974:	4598      	cmp	r8, r3
 800f976:	bf8c      	ite	hi
 800f978:	4d21      	ldrhi	r5, [pc, #132]	@ (800fa00 <__kernel_cos+0x188>)
 800f97a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f97e:	2400      	movs	r4, #0
 800f980:	4622      	mov	r2, r4
 800f982:	462b      	mov	r3, r5
 800f984:	2000      	movs	r0, #0
 800f986:	f7f0 fc9f 	bl	80002c8 <__aeabi_dsub>
 800f98a:	4622      	mov	r2, r4
 800f98c:	4680      	mov	r8, r0
 800f98e:	4689      	mov	r9, r1
 800f990:	462b      	mov	r3, r5
 800f992:	4650      	mov	r0, sl
 800f994:	4659      	mov	r1, fp
 800f996:	f7f0 fc97 	bl	80002c8 <__aeabi_dsub>
 800f99a:	4632      	mov	r2, r6
 800f99c:	463b      	mov	r3, r7
 800f99e:	f7f0 fc93 	bl	80002c8 <__aeabi_dsub>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	4640      	mov	r0, r8
 800f9a8:	4649      	mov	r1, r9
 800f9aa:	e7da      	b.n	800f962 <__kernel_cos+0xea>
 800f9ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f9e8 <__kernel_cos+0x170>
 800f9b0:	e7db      	b.n	800f96a <__kernel_cos+0xf2>
 800f9b2:	bf00      	nop
 800f9b4:	f3af 8000 	nop.w
 800f9b8:	be8838d4 	.word	0xbe8838d4
 800f9bc:	bda8fae9 	.word	0xbda8fae9
 800f9c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f9c4:	3e21ee9e 	.word	0x3e21ee9e
 800f9c8:	809c52ad 	.word	0x809c52ad
 800f9cc:	3e927e4f 	.word	0x3e927e4f
 800f9d0:	19cb1590 	.word	0x19cb1590
 800f9d4:	3efa01a0 	.word	0x3efa01a0
 800f9d8:	16c15177 	.word	0x16c15177
 800f9dc:	3f56c16c 	.word	0x3f56c16c
 800f9e0:	5555554c 	.word	0x5555554c
 800f9e4:	3fa55555 	.word	0x3fa55555
 800f9e8:	00000000 	.word	0x00000000
 800f9ec:	3ff00000 	.word	0x3ff00000
 800f9f0:	3fe00000 	.word	0x3fe00000
 800f9f4:	3fd33332 	.word	0x3fd33332
 800f9f8:	3ff00000 	.word	0x3ff00000
 800f9fc:	3fe90000 	.word	0x3fe90000
 800fa00:	3fd20000 	.word	0x3fd20000
 800fa04:	00000000 	.word	0x00000000

0800fa08 <__kernel_sin>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	ec55 4b10 	vmov	r4, r5, d0
 800fa10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fa14:	b085      	sub	sp, #20
 800fa16:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fa1a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800fa1e:	4680      	mov	r8, r0
 800fa20:	d205      	bcs.n	800fa2e <__kernel_sin+0x26>
 800fa22:	4620      	mov	r0, r4
 800fa24:	4629      	mov	r1, r5
 800fa26:	f7f1 f8b7 	bl	8000b98 <__aeabi_d2iz>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d052      	beq.n	800fad4 <__kernel_sin+0xcc>
 800fa2e:	4622      	mov	r2, r4
 800fa30:	462b      	mov	r3, r5
 800fa32:	4620      	mov	r0, r4
 800fa34:	4629      	mov	r1, r5
 800fa36:	f7f0 fdff 	bl	8000638 <__aeabi_dmul>
 800fa3a:	4682      	mov	sl, r0
 800fa3c:	468b      	mov	fp, r1
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	4620      	mov	r0, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	f7f0 fdf7 	bl	8000638 <__aeabi_dmul>
 800fa4a:	a342      	add	r3, pc, #264	@ (adr r3, 800fb54 <__kernel_sin+0x14c>)
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	e9cd 0100 	strd	r0, r1, [sp]
 800fa54:	4650      	mov	r0, sl
 800fa56:	4659      	mov	r1, fp
 800fa58:	f7f0 fdee 	bl	8000638 <__aeabi_dmul>
 800fa5c:	a33f      	add	r3, pc, #252	@ (adr r3, 800fb5c <__kernel_sin+0x154>)
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	f7f0 fc31 	bl	80002c8 <__aeabi_dsub>
 800fa66:	4652      	mov	r2, sl
 800fa68:	465b      	mov	r3, fp
 800fa6a:	f7f0 fde5 	bl	8000638 <__aeabi_dmul>
 800fa6e:	a33d      	add	r3, pc, #244	@ (adr r3, 800fb64 <__kernel_sin+0x15c>)
 800fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa74:	f7f0 fc2a 	bl	80002cc <__adddf3>
 800fa78:	4652      	mov	r2, sl
 800fa7a:	465b      	mov	r3, fp
 800fa7c:	f7f0 fddc 	bl	8000638 <__aeabi_dmul>
 800fa80:	a33a      	add	r3, pc, #232	@ (adr r3, 800fb6c <__kernel_sin+0x164>)
 800fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa86:	f7f0 fc1f 	bl	80002c8 <__aeabi_dsub>
 800fa8a:	4652      	mov	r2, sl
 800fa8c:	465b      	mov	r3, fp
 800fa8e:	f7f0 fdd3 	bl	8000638 <__aeabi_dmul>
 800fa92:	a338      	add	r3, pc, #224	@ (adr r3, 800fb74 <__kernel_sin+0x16c>)
 800fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa98:	f7f0 fc18 	bl	80002cc <__adddf3>
 800fa9c:	4606      	mov	r6, r0
 800fa9e:	460f      	mov	r7, r1
 800faa0:	f1b8 0f00 	cmp.w	r8, #0
 800faa4:	d11b      	bne.n	800fade <__kernel_sin+0xd6>
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4650      	mov	r0, sl
 800faac:	4659      	mov	r1, fp
 800faae:	f7f0 fdc3 	bl	8000638 <__aeabi_dmul>
 800fab2:	a325      	add	r3, pc, #148	@ (adr r3, 800fb48 <__kernel_sin+0x140>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f7f0 fc06 	bl	80002c8 <__aeabi_dsub>
 800fabc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fac0:	f7f0 fdba 	bl	8000638 <__aeabi_dmul>
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	4620      	mov	r0, r4
 800faca:	4629      	mov	r1, r5
 800facc:	f7f0 fbfe 	bl	80002cc <__adddf3>
 800fad0:	4604      	mov	r4, r0
 800fad2:	460d      	mov	r5, r1
 800fad4:	ec45 4b10 	vmov	d0, r4, r5
 800fad8:	b005      	add	sp, #20
 800fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fae2:	4b1b      	ldr	r3, [pc, #108]	@ (800fb50 <__kernel_sin+0x148>)
 800fae4:	2200      	movs	r2, #0
 800fae6:	f7f0 fda7 	bl	8000638 <__aeabi_dmul>
 800faea:	4632      	mov	r2, r6
 800faec:	4680      	mov	r8, r0
 800faee:	4689      	mov	r9, r1
 800faf0:	463b      	mov	r3, r7
 800faf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faf6:	f7f0 fd9f 	bl	8000638 <__aeabi_dmul>
 800fafa:	4602      	mov	r2, r0
 800fafc:	460b      	mov	r3, r1
 800fafe:	4640      	mov	r0, r8
 800fb00:	4649      	mov	r1, r9
 800fb02:	f7f0 fbe1 	bl	80002c8 <__aeabi_dsub>
 800fb06:	4652      	mov	r2, sl
 800fb08:	465b      	mov	r3, fp
 800fb0a:	f7f0 fd95 	bl	8000638 <__aeabi_dmul>
 800fb0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb12:	f7f0 fbd9 	bl	80002c8 <__aeabi_dsub>
 800fb16:	a30c      	add	r3, pc, #48	@ (adr r3, 800fb48 <__kernel_sin+0x140>)
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	4606      	mov	r6, r0
 800fb1e:	460f      	mov	r7, r1
 800fb20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb24:	f7f0 fd88 	bl	8000638 <__aeabi_dmul>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	4639      	mov	r1, r7
 800fb30:	f7f0 fbcc 	bl	80002cc <__adddf3>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	4620      	mov	r0, r4
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	f7f0 fbc4 	bl	80002c8 <__aeabi_dsub>
 800fb40:	e7c6      	b.n	800fad0 <__kernel_sin+0xc8>
 800fb42:	bf00      	nop
 800fb44:	f3af 8000 	nop.w
 800fb48:	55555549 	.word	0x55555549
 800fb4c:	3fc55555 	.word	0x3fc55555
 800fb50:	3fe00000 	.word	0x3fe00000
 800fb54:	5acfd57c 	.word	0x5acfd57c
 800fb58:	3de5d93a 	.word	0x3de5d93a
 800fb5c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fb60:	3e5ae5e6 	.word	0x3e5ae5e6
 800fb64:	57b1fe7d 	.word	0x57b1fe7d
 800fb68:	3ec71de3 	.word	0x3ec71de3
 800fb6c:	19c161d5 	.word	0x19c161d5
 800fb70:	3f2a01a0 	.word	0x3f2a01a0
 800fb74:	1110f8a6 	.word	0x1110f8a6
 800fb78:	3f811111 	.word	0x3f811111
 800fb7c:	00000000 	.word	0x00000000

0800fb80 <__ieee754_pow>:
 800fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb84:	b091      	sub	sp, #68	@ 0x44
 800fb86:	ed8d 1b00 	vstr	d1, [sp]
 800fb8a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fb8e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fb92:	ea5a 0001 	orrs.w	r0, sl, r1
 800fb96:	ec57 6b10 	vmov	r6, r7, d0
 800fb9a:	d113      	bne.n	800fbc4 <__ieee754_pow+0x44>
 800fb9c:	19b3      	adds	r3, r6, r6
 800fb9e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fba2:	4152      	adcs	r2, r2
 800fba4:	4298      	cmp	r0, r3
 800fba6:	4b98      	ldr	r3, [pc, #608]	@ (800fe08 <__ieee754_pow+0x288>)
 800fba8:	4193      	sbcs	r3, r2
 800fbaa:	f080 84ea 	bcs.w	8010582 <__ieee754_pow+0xa02>
 800fbae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	4639      	mov	r1, r7
 800fbb6:	f7f0 fb89 	bl	80002cc <__adddf3>
 800fbba:	ec41 0b10 	vmov	d0, r0, r1
 800fbbe:	b011      	add	sp, #68	@ 0x44
 800fbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc4:	4a91      	ldr	r2, [pc, #580]	@ (800fe0c <__ieee754_pow+0x28c>)
 800fbc6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fbca:	4590      	cmp	r8, r2
 800fbcc:	463d      	mov	r5, r7
 800fbce:	4633      	mov	r3, r6
 800fbd0:	d806      	bhi.n	800fbe0 <__ieee754_pow+0x60>
 800fbd2:	d101      	bne.n	800fbd8 <__ieee754_pow+0x58>
 800fbd4:	2e00      	cmp	r6, #0
 800fbd6:	d1ea      	bne.n	800fbae <__ieee754_pow+0x2e>
 800fbd8:	4592      	cmp	sl, r2
 800fbda:	d801      	bhi.n	800fbe0 <__ieee754_pow+0x60>
 800fbdc:	d10e      	bne.n	800fbfc <__ieee754_pow+0x7c>
 800fbde:	b169      	cbz	r1, 800fbfc <__ieee754_pow+0x7c>
 800fbe0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fbe4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fbe8:	431d      	orrs	r5, r3
 800fbea:	d1e0      	bne.n	800fbae <__ieee754_pow+0x2e>
 800fbec:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fbf0:	18db      	adds	r3, r3, r3
 800fbf2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fbf6:	4152      	adcs	r2, r2
 800fbf8:	429d      	cmp	r5, r3
 800fbfa:	e7d4      	b.n	800fba6 <__ieee754_pow+0x26>
 800fbfc:	2d00      	cmp	r5, #0
 800fbfe:	46c3      	mov	fp, r8
 800fc00:	da3a      	bge.n	800fc78 <__ieee754_pow+0xf8>
 800fc02:	4a83      	ldr	r2, [pc, #524]	@ (800fe10 <__ieee754_pow+0x290>)
 800fc04:	4592      	cmp	sl, r2
 800fc06:	d84d      	bhi.n	800fca4 <__ieee754_pow+0x124>
 800fc08:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fc0c:	4592      	cmp	sl, r2
 800fc0e:	f240 84c7 	bls.w	80105a0 <__ieee754_pow+0xa20>
 800fc12:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fc16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fc1a:	2a14      	cmp	r2, #20
 800fc1c:	dd0f      	ble.n	800fc3e <__ieee754_pow+0xbe>
 800fc1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fc22:	fa21 f402 	lsr.w	r4, r1, r2
 800fc26:	fa04 f202 	lsl.w	r2, r4, r2
 800fc2a:	428a      	cmp	r2, r1
 800fc2c:	f040 84b8 	bne.w	80105a0 <__ieee754_pow+0xa20>
 800fc30:	f004 0401 	and.w	r4, r4, #1
 800fc34:	f1c4 0402 	rsb	r4, r4, #2
 800fc38:	2900      	cmp	r1, #0
 800fc3a:	d158      	bne.n	800fcee <__ieee754_pow+0x16e>
 800fc3c:	e00e      	b.n	800fc5c <__ieee754_pow+0xdc>
 800fc3e:	2900      	cmp	r1, #0
 800fc40:	d154      	bne.n	800fcec <__ieee754_pow+0x16c>
 800fc42:	f1c2 0214 	rsb	r2, r2, #20
 800fc46:	fa4a f402 	asr.w	r4, sl, r2
 800fc4a:	fa04 f202 	lsl.w	r2, r4, r2
 800fc4e:	4552      	cmp	r2, sl
 800fc50:	f040 84a3 	bne.w	801059a <__ieee754_pow+0xa1a>
 800fc54:	f004 0401 	and.w	r4, r4, #1
 800fc58:	f1c4 0402 	rsb	r4, r4, #2
 800fc5c:	4a6d      	ldr	r2, [pc, #436]	@ (800fe14 <__ieee754_pow+0x294>)
 800fc5e:	4592      	cmp	sl, r2
 800fc60:	d12e      	bne.n	800fcc0 <__ieee754_pow+0x140>
 800fc62:	f1b9 0f00 	cmp.w	r9, #0
 800fc66:	f280 8494 	bge.w	8010592 <__ieee754_pow+0xa12>
 800fc6a:	496a      	ldr	r1, [pc, #424]	@ (800fe14 <__ieee754_pow+0x294>)
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	463b      	mov	r3, r7
 800fc70:	2000      	movs	r0, #0
 800fc72:	f7f0 fe0b 	bl	800088c <__aeabi_ddiv>
 800fc76:	e7a0      	b.n	800fbba <__ieee754_pow+0x3a>
 800fc78:	2400      	movs	r4, #0
 800fc7a:	bbc1      	cbnz	r1, 800fcee <__ieee754_pow+0x16e>
 800fc7c:	4a63      	ldr	r2, [pc, #396]	@ (800fe0c <__ieee754_pow+0x28c>)
 800fc7e:	4592      	cmp	sl, r2
 800fc80:	d1ec      	bne.n	800fc5c <__ieee754_pow+0xdc>
 800fc82:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800fc86:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fc8a:	431a      	orrs	r2, r3
 800fc8c:	f000 8479 	beq.w	8010582 <__ieee754_pow+0xa02>
 800fc90:	4b61      	ldr	r3, [pc, #388]	@ (800fe18 <__ieee754_pow+0x298>)
 800fc92:	4598      	cmp	r8, r3
 800fc94:	d908      	bls.n	800fca8 <__ieee754_pow+0x128>
 800fc96:	f1b9 0f00 	cmp.w	r9, #0
 800fc9a:	f2c0 8476 	blt.w	801058a <__ieee754_pow+0xa0a>
 800fc9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fca2:	e78a      	b.n	800fbba <__ieee754_pow+0x3a>
 800fca4:	2402      	movs	r4, #2
 800fca6:	e7e8      	b.n	800fc7a <__ieee754_pow+0xfa>
 800fca8:	f1b9 0f00 	cmp.w	r9, #0
 800fcac:	f04f 0000 	mov.w	r0, #0
 800fcb0:	f04f 0100 	mov.w	r1, #0
 800fcb4:	da81      	bge.n	800fbba <__ieee754_pow+0x3a>
 800fcb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fcba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fcbe:	e77c      	b.n	800fbba <__ieee754_pow+0x3a>
 800fcc0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fcc4:	d106      	bne.n	800fcd4 <__ieee754_pow+0x154>
 800fcc6:	4632      	mov	r2, r6
 800fcc8:	463b      	mov	r3, r7
 800fcca:	4630      	mov	r0, r6
 800fccc:	4639      	mov	r1, r7
 800fcce:	f7f0 fcb3 	bl	8000638 <__aeabi_dmul>
 800fcd2:	e772      	b.n	800fbba <__ieee754_pow+0x3a>
 800fcd4:	4a51      	ldr	r2, [pc, #324]	@ (800fe1c <__ieee754_pow+0x29c>)
 800fcd6:	4591      	cmp	r9, r2
 800fcd8:	d109      	bne.n	800fcee <__ieee754_pow+0x16e>
 800fcda:	2d00      	cmp	r5, #0
 800fcdc:	db07      	blt.n	800fcee <__ieee754_pow+0x16e>
 800fcde:	ec47 6b10 	vmov	d0, r6, r7
 800fce2:	b011      	add	sp, #68	@ 0x44
 800fce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce8:	f7ff bca0 	b.w	800f62c <__ieee754_sqrt>
 800fcec:	2400      	movs	r4, #0
 800fcee:	ec47 6b10 	vmov	d0, r6, r7
 800fcf2:	9302      	str	r3, [sp, #8]
 800fcf4:	f000 fe84 	bl	8010a00 <fabs>
 800fcf8:	9b02      	ldr	r3, [sp, #8]
 800fcfa:	ec51 0b10 	vmov	r0, r1, d0
 800fcfe:	bb53      	cbnz	r3, 800fd56 <__ieee754_pow+0x1d6>
 800fd00:	4b44      	ldr	r3, [pc, #272]	@ (800fe14 <__ieee754_pow+0x294>)
 800fd02:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d002      	beq.n	800fd10 <__ieee754_pow+0x190>
 800fd0a:	f1b8 0f00 	cmp.w	r8, #0
 800fd0e:	d122      	bne.n	800fd56 <__ieee754_pow+0x1d6>
 800fd10:	f1b9 0f00 	cmp.w	r9, #0
 800fd14:	da05      	bge.n	800fd22 <__ieee754_pow+0x1a2>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	493d      	ldr	r1, [pc, #244]	@ (800fe14 <__ieee754_pow+0x294>)
 800fd1e:	f7f0 fdb5 	bl	800088c <__aeabi_ddiv>
 800fd22:	2d00      	cmp	r5, #0
 800fd24:	f6bf af49 	bge.w	800fbba <__ieee754_pow+0x3a>
 800fd28:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fd2c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fd30:	ea58 0804 	orrs.w	r8, r8, r4
 800fd34:	d108      	bne.n	800fd48 <__ieee754_pow+0x1c8>
 800fd36:	4602      	mov	r2, r0
 800fd38:	460b      	mov	r3, r1
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	f7f0 fac3 	bl	80002c8 <__aeabi_dsub>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	e794      	b.n	800fc72 <__ieee754_pow+0xf2>
 800fd48:	2c01      	cmp	r4, #1
 800fd4a:	f47f af36 	bne.w	800fbba <__ieee754_pow+0x3a>
 800fd4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd52:	4619      	mov	r1, r3
 800fd54:	e731      	b.n	800fbba <__ieee754_pow+0x3a>
 800fd56:	0feb      	lsrs	r3, r5, #31
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	ea53 0204 	orrs.w	r2, r3, r4
 800fd5e:	d102      	bne.n	800fd66 <__ieee754_pow+0x1e6>
 800fd60:	4632      	mov	r2, r6
 800fd62:	463b      	mov	r3, r7
 800fd64:	e7e9      	b.n	800fd3a <__ieee754_pow+0x1ba>
 800fd66:	3c01      	subs	r4, #1
 800fd68:	431c      	orrs	r4, r3
 800fd6a:	d016      	beq.n	800fd9a <__ieee754_pow+0x21a>
 800fd6c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800fdf8 <__ieee754_pow+0x278>
 800fd70:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fd74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd78:	f240 8112 	bls.w	800ffa0 <__ieee754_pow+0x420>
 800fd7c:	4b28      	ldr	r3, [pc, #160]	@ (800fe20 <__ieee754_pow+0x2a0>)
 800fd7e:	459a      	cmp	sl, r3
 800fd80:	4b25      	ldr	r3, [pc, #148]	@ (800fe18 <__ieee754_pow+0x298>)
 800fd82:	d916      	bls.n	800fdb2 <__ieee754_pow+0x232>
 800fd84:	4598      	cmp	r8, r3
 800fd86:	d80b      	bhi.n	800fda0 <__ieee754_pow+0x220>
 800fd88:	f1b9 0f00 	cmp.w	r9, #0
 800fd8c:	da0b      	bge.n	800fda6 <__ieee754_pow+0x226>
 800fd8e:	2000      	movs	r0, #0
 800fd90:	b011      	add	sp, #68	@ 0x44
 800fd92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd96:	f001 ba43 	b.w	8011220 <__math_oflow>
 800fd9a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800fe00 <__ieee754_pow+0x280>
 800fd9e:	e7e7      	b.n	800fd70 <__ieee754_pow+0x1f0>
 800fda0:	f1b9 0f00 	cmp.w	r9, #0
 800fda4:	dcf3      	bgt.n	800fd8e <__ieee754_pow+0x20e>
 800fda6:	2000      	movs	r0, #0
 800fda8:	b011      	add	sp, #68	@ 0x44
 800fdaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdae:	f001 ba2f 	b.w	8011210 <__math_uflow>
 800fdb2:	4598      	cmp	r8, r3
 800fdb4:	d20c      	bcs.n	800fdd0 <__ieee754_pow+0x250>
 800fdb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f7f0 fead 	bl	8000b1c <__aeabi_dcmplt>
 800fdc2:	3800      	subs	r0, #0
 800fdc4:	bf18      	it	ne
 800fdc6:	2001      	movne	r0, #1
 800fdc8:	f1b9 0f00 	cmp.w	r9, #0
 800fdcc:	daec      	bge.n	800fda8 <__ieee754_pow+0x228>
 800fdce:	e7df      	b.n	800fd90 <__ieee754_pow+0x210>
 800fdd0:	4b10      	ldr	r3, [pc, #64]	@ (800fe14 <__ieee754_pow+0x294>)
 800fdd2:	4598      	cmp	r8, r3
 800fdd4:	f04f 0200 	mov.w	r2, #0
 800fdd8:	d924      	bls.n	800fe24 <__ieee754_pow+0x2a4>
 800fdda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdde:	2300      	movs	r3, #0
 800fde0:	f7f0 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 800fde4:	3800      	subs	r0, #0
 800fde6:	bf18      	it	ne
 800fde8:	2001      	movne	r0, #1
 800fdea:	f1b9 0f00 	cmp.w	r9, #0
 800fdee:	dccf      	bgt.n	800fd90 <__ieee754_pow+0x210>
 800fdf0:	e7da      	b.n	800fda8 <__ieee754_pow+0x228>
 800fdf2:	bf00      	nop
 800fdf4:	f3af 8000 	nop.w
 800fdf8:	00000000 	.word	0x00000000
 800fdfc:	3ff00000 	.word	0x3ff00000
 800fe00:	00000000 	.word	0x00000000
 800fe04:	bff00000 	.word	0xbff00000
 800fe08:	fff00000 	.word	0xfff00000
 800fe0c:	7ff00000 	.word	0x7ff00000
 800fe10:	433fffff 	.word	0x433fffff
 800fe14:	3ff00000 	.word	0x3ff00000
 800fe18:	3fefffff 	.word	0x3fefffff
 800fe1c:	3fe00000 	.word	0x3fe00000
 800fe20:	43f00000 	.word	0x43f00000
 800fe24:	4b5a      	ldr	r3, [pc, #360]	@ (800ff90 <__ieee754_pow+0x410>)
 800fe26:	f7f0 fa4f 	bl	80002c8 <__aeabi_dsub>
 800fe2a:	a351      	add	r3, pc, #324	@ (adr r3, 800ff70 <__ieee754_pow+0x3f0>)
 800fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe30:	4604      	mov	r4, r0
 800fe32:	460d      	mov	r5, r1
 800fe34:	f7f0 fc00 	bl	8000638 <__aeabi_dmul>
 800fe38:	a34f      	add	r3, pc, #316	@ (adr r3, 800ff78 <__ieee754_pow+0x3f8>)
 800fe3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3e:	4606      	mov	r6, r0
 800fe40:	460f      	mov	r7, r1
 800fe42:	4620      	mov	r0, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	f7f0 fbf7 	bl	8000638 <__aeabi_dmul>
 800fe4a:	4b52      	ldr	r3, [pc, #328]	@ (800ff94 <__ieee754_pow+0x414>)
 800fe4c:	4682      	mov	sl, r0
 800fe4e:	468b      	mov	fp, r1
 800fe50:	2200      	movs	r2, #0
 800fe52:	4620      	mov	r0, r4
 800fe54:	4629      	mov	r1, r5
 800fe56:	f7f0 fbef 	bl	8000638 <__aeabi_dmul>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	a148      	add	r1, pc, #288	@ (adr r1, 800ff80 <__ieee754_pow+0x400>)
 800fe60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe64:	f7f0 fa30 	bl	80002c8 <__aeabi_dsub>
 800fe68:	4622      	mov	r2, r4
 800fe6a:	462b      	mov	r3, r5
 800fe6c:	f7f0 fbe4 	bl	8000638 <__aeabi_dmul>
 800fe70:	4602      	mov	r2, r0
 800fe72:	460b      	mov	r3, r1
 800fe74:	2000      	movs	r0, #0
 800fe76:	4948      	ldr	r1, [pc, #288]	@ (800ff98 <__ieee754_pow+0x418>)
 800fe78:	f7f0 fa26 	bl	80002c8 <__aeabi_dsub>
 800fe7c:	4622      	mov	r2, r4
 800fe7e:	4680      	mov	r8, r0
 800fe80:	4689      	mov	r9, r1
 800fe82:	462b      	mov	r3, r5
 800fe84:	4620      	mov	r0, r4
 800fe86:	4629      	mov	r1, r5
 800fe88:	f7f0 fbd6 	bl	8000638 <__aeabi_dmul>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	4640      	mov	r0, r8
 800fe92:	4649      	mov	r1, r9
 800fe94:	f7f0 fbd0 	bl	8000638 <__aeabi_dmul>
 800fe98:	a33b      	add	r3, pc, #236	@ (adr r3, 800ff88 <__ieee754_pow+0x408>)
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	f7f0 fbcb 	bl	8000638 <__aeabi_dmul>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	4650      	mov	r0, sl
 800fea8:	4659      	mov	r1, fp
 800feaa:	f7f0 fa0d 	bl	80002c8 <__aeabi_dsub>
 800feae:	4602      	mov	r2, r0
 800feb0:	460b      	mov	r3, r1
 800feb2:	4680      	mov	r8, r0
 800feb4:	4689      	mov	r9, r1
 800feb6:	4630      	mov	r0, r6
 800feb8:	4639      	mov	r1, r7
 800feba:	f7f0 fa07 	bl	80002cc <__adddf3>
 800febe:	2400      	movs	r4, #0
 800fec0:	4632      	mov	r2, r6
 800fec2:	463b      	mov	r3, r7
 800fec4:	4620      	mov	r0, r4
 800fec6:	460d      	mov	r5, r1
 800fec8:	f7f0 f9fe 	bl	80002c8 <__aeabi_dsub>
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	4640      	mov	r0, r8
 800fed2:	4649      	mov	r1, r9
 800fed4:	f7f0 f9f8 	bl	80002c8 <__aeabi_dsub>
 800fed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fedc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fee0:	2300      	movs	r3, #0
 800fee2:	9304      	str	r3, [sp, #16]
 800fee4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fee8:	4606      	mov	r6, r0
 800feea:	460f      	mov	r7, r1
 800feec:	4652      	mov	r2, sl
 800feee:	465b      	mov	r3, fp
 800fef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fef4:	f7f0 f9e8 	bl	80002c8 <__aeabi_dsub>
 800fef8:	4622      	mov	r2, r4
 800fefa:	462b      	mov	r3, r5
 800fefc:	f7f0 fb9c 	bl	8000638 <__aeabi_dmul>
 800ff00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff04:	4680      	mov	r8, r0
 800ff06:	4689      	mov	r9, r1
 800ff08:	4630      	mov	r0, r6
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7f0 fb94 	bl	8000638 <__aeabi_dmul>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	4640      	mov	r0, r8
 800ff16:	4649      	mov	r1, r9
 800ff18:	f7f0 f9d8 	bl	80002cc <__adddf3>
 800ff1c:	4652      	mov	r2, sl
 800ff1e:	465b      	mov	r3, fp
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	4620      	mov	r0, r4
 800ff26:	4629      	mov	r1, r5
 800ff28:	f7f0 fb86 	bl	8000638 <__aeabi_dmul>
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	4602      	mov	r2, r0
 800ff30:	4680      	mov	r8, r0
 800ff32:	4689      	mov	r9, r1
 800ff34:	4630      	mov	r0, r6
 800ff36:	4639      	mov	r1, r7
 800ff38:	f7f0 f9c8 	bl	80002cc <__adddf3>
 800ff3c:	4b17      	ldr	r3, [pc, #92]	@ (800ff9c <__ieee754_pow+0x41c>)
 800ff3e:	4299      	cmp	r1, r3
 800ff40:	4604      	mov	r4, r0
 800ff42:	460d      	mov	r5, r1
 800ff44:	468a      	mov	sl, r1
 800ff46:	468b      	mov	fp, r1
 800ff48:	f340 82ef 	ble.w	801052a <__ieee754_pow+0x9aa>
 800ff4c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ff50:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ff54:	4303      	orrs	r3, r0
 800ff56:	f000 81e8 	beq.w	801032a <__ieee754_pow+0x7aa>
 800ff5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2300      	movs	r3, #0
 800ff62:	f7f0 fddb 	bl	8000b1c <__aeabi_dcmplt>
 800ff66:	3800      	subs	r0, #0
 800ff68:	bf18      	it	ne
 800ff6a:	2001      	movne	r0, #1
 800ff6c:	e710      	b.n	800fd90 <__ieee754_pow+0x210>
 800ff6e:	bf00      	nop
 800ff70:	60000000 	.word	0x60000000
 800ff74:	3ff71547 	.word	0x3ff71547
 800ff78:	f85ddf44 	.word	0xf85ddf44
 800ff7c:	3e54ae0b 	.word	0x3e54ae0b
 800ff80:	55555555 	.word	0x55555555
 800ff84:	3fd55555 	.word	0x3fd55555
 800ff88:	652b82fe 	.word	0x652b82fe
 800ff8c:	3ff71547 	.word	0x3ff71547
 800ff90:	3ff00000 	.word	0x3ff00000
 800ff94:	3fd00000 	.word	0x3fd00000
 800ff98:	3fe00000 	.word	0x3fe00000
 800ff9c:	408fffff 	.word	0x408fffff
 800ffa0:	4bd5      	ldr	r3, [pc, #852]	@ (80102f8 <__ieee754_pow+0x778>)
 800ffa2:	402b      	ands	r3, r5
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	b92b      	cbnz	r3, 800ffb4 <__ieee754_pow+0x434>
 800ffa8:	4bd4      	ldr	r3, [pc, #848]	@ (80102fc <__ieee754_pow+0x77c>)
 800ffaa:	f7f0 fb45 	bl	8000638 <__aeabi_dmul>
 800ffae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ffb2:	468b      	mov	fp, r1
 800ffb4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ffb8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ffbc:	4413      	add	r3, r2
 800ffbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffc0:	4bcf      	ldr	r3, [pc, #828]	@ (8010300 <__ieee754_pow+0x780>)
 800ffc2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ffc6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ffca:	459b      	cmp	fp, r3
 800ffcc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ffd0:	dd08      	ble.n	800ffe4 <__ieee754_pow+0x464>
 800ffd2:	4bcc      	ldr	r3, [pc, #816]	@ (8010304 <__ieee754_pow+0x784>)
 800ffd4:	459b      	cmp	fp, r3
 800ffd6:	f340 81a5 	ble.w	8010324 <__ieee754_pow+0x7a4>
 800ffda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffdc:	3301      	adds	r3, #1
 800ffde:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffe0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ffe4:	f04f 0a00 	mov.w	sl, #0
 800ffe8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ffec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ffee:	4bc6      	ldr	r3, [pc, #792]	@ (8010308 <__ieee754_pow+0x788>)
 800fff0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fff4:	ed93 7b00 	vldr	d7, [r3]
 800fff8:	4629      	mov	r1, r5
 800fffa:	ec53 2b17 	vmov	r2, r3, d7
 800fffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010002:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010006:	f7f0 f95f 	bl	80002c8 <__aeabi_dsub>
 801000a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801000e:	4606      	mov	r6, r0
 8010010:	460f      	mov	r7, r1
 8010012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010016:	f7f0 f959 	bl	80002cc <__adddf3>
 801001a:	4602      	mov	r2, r0
 801001c:	460b      	mov	r3, r1
 801001e:	2000      	movs	r0, #0
 8010020:	49ba      	ldr	r1, [pc, #744]	@ (801030c <__ieee754_pow+0x78c>)
 8010022:	f7f0 fc33 	bl	800088c <__aeabi_ddiv>
 8010026:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4630      	mov	r0, r6
 8010030:	4639      	mov	r1, r7
 8010032:	f7f0 fb01 	bl	8000638 <__aeabi_dmul>
 8010036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801003a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801003e:	106d      	asrs	r5, r5, #1
 8010040:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010044:	f04f 0b00 	mov.w	fp, #0
 8010048:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801004c:	4661      	mov	r1, ip
 801004e:	2200      	movs	r2, #0
 8010050:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010054:	4658      	mov	r0, fp
 8010056:	46e1      	mov	r9, ip
 8010058:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801005c:	4614      	mov	r4, r2
 801005e:	461d      	mov	r5, r3
 8010060:	f7f0 faea 	bl	8000638 <__aeabi_dmul>
 8010064:	4602      	mov	r2, r0
 8010066:	460b      	mov	r3, r1
 8010068:	4630      	mov	r0, r6
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 f92c 	bl	80002c8 <__aeabi_dsub>
 8010070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010074:	4606      	mov	r6, r0
 8010076:	460f      	mov	r7, r1
 8010078:	4620      	mov	r0, r4
 801007a:	4629      	mov	r1, r5
 801007c:	f7f0 f924 	bl	80002c8 <__aeabi_dsub>
 8010080:	4602      	mov	r2, r0
 8010082:	460b      	mov	r3, r1
 8010084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010088:	f7f0 f91e 	bl	80002c8 <__aeabi_dsub>
 801008c:	465a      	mov	r2, fp
 801008e:	464b      	mov	r3, r9
 8010090:	f7f0 fad2 	bl	8000638 <__aeabi_dmul>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 f914 	bl	80002c8 <__aeabi_dsub>
 80100a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80100a4:	f7f0 fac8 	bl	8000638 <__aeabi_dmul>
 80100a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100b0:	4610      	mov	r0, r2
 80100b2:	4619      	mov	r1, r3
 80100b4:	f7f0 fac0 	bl	8000638 <__aeabi_dmul>
 80100b8:	a37d      	add	r3, pc, #500	@ (adr r3, 80102b0 <__ieee754_pow+0x730>)
 80100ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100be:	4604      	mov	r4, r0
 80100c0:	460d      	mov	r5, r1
 80100c2:	f7f0 fab9 	bl	8000638 <__aeabi_dmul>
 80100c6:	a37c      	add	r3, pc, #496	@ (adr r3, 80102b8 <__ieee754_pow+0x738>)
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	f7f0 f8fe 	bl	80002cc <__adddf3>
 80100d0:	4622      	mov	r2, r4
 80100d2:	462b      	mov	r3, r5
 80100d4:	f7f0 fab0 	bl	8000638 <__aeabi_dmul>
 80100d8:	a379      	add	r3, pc, #484	@ (adr r3, 80102c0 <__ieee754_pow+0x740>)
 80100da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100de:	f7f0 f8f5 	bl	80002cc <__adddf3>
 80100e2:	4622      	mov	r2, r4
 80100e4:	462b      	mov	r3, r5
 80100e6:	f7f0 faa7 	bl	8000638 <__aeabi_dmul>
 80100ea:	a377      	add	r3, pc, #476	@ (adr r3, 80102c8 <__ieee754_pow+0x748>)
 80100ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f0:	f7f0 f8ec 	bl	80002cc <__adddf3>
 80100f4:	4622      	mov	r2, r4
 80100f6:	462b      	mov	r3, r5
 80100f8:	f7f0 fa9e 	bl	8000638 <__aeabi_dmul>
 80100fc:	a374      	add	r3, pc, #464	@ (adr r3, 80102d0 <__ieee754_pow+0x750>)
 80100fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010102:	f7f0 f8e3 	bl	80002cc <__adddf3>
 8010106:	4622      	mov	r2, r4
 8010108:	462b      	mov	r3, r5
 801010a:	f7f0 fa95 	bl	8000638 <__aeabi_dmul>
 801010e:	a372      	add	r3, pc, #456	@ (adr r3, 80102d8 <__ieee754_pow+0x758>)
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	f7f0 f8da 	bl	80002cc <__adddf3>
 8010118:	4622      	mov	r2, r4
 801011a:	4606      	mov	r6, r0
 801011c:	460f      	mov	r7, r1
 801011e:	462b      	mov	r3, r5
 8010120:	4620      	mov	r0, r4
 8010122:	4629      	mov	r1, r5
 8010124:	f7f0 fa88 	bl	8000638 <__aeabi_dmul>
 8010128:	4602      	mov	r2, r0
 801012a:	460b      	mov	r3, r1
 801012c:	4630      	mov	r0, r6
 801012e:	4639      	mov	r1, r7
 8010130:	f7f0 fa82 	bl	8000638 <__aeabi_dmul>
 8010134:	465a      	mov	r2, fp
 8010136:	4604      	mov	r4, r0
 8010138:	460d      	mov	r5, r1
 801013a:	464b      	mov	r3, r9
 801013c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010140:	f7f0 f8c4 	bl	80002cc <__adddf3>
 8010144:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010148:	f7f0 fa76 	bl	8000638 <__aeabi_dmul>
 801014c:	4622      	mov	r2, r4
 801014e:	462b      	mov	r3, r5
 8010150:	f7f0 f8bc 	bl	80002cc <__adddf3>
 8010154:	465a      	mov	r2, fp
 8010156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801015a:	464b      	mov	r3, r9
 801015c:	4658      	mov	r0, fp
 801015e:	4649      	mov	r1, r9
 8010160:	f7f0 fa6a 	bl	8000638 <__aeabi_dmul>
 8010164:	4b6a      	ldr	r3, [pc, #424]	@ (8010310 <__ieee754_pow+0x790>)
 8010166:	2200      	movs	r2, #0
 8010168:	4606      	mov	r6, r0
 801016a:	460f      	mov	r7, r1
 801016c:	f7f0 f8ae 	bl	80002cc <__adddf3>
 8010170:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010174:	f7f0 f8aa 	bl	80002cc <__adddf3>
 8010178:	46d8      	mov	r8, fp
 801017a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801017e:	460d      	mov	r5, r1
 8010180:	465a      	mov	r2, fp
 8010182:	460b      	mov	r3, r1
 8010184:	4640      	mov	r0, r8
 8010186:	4649      	mov	r1, r9
 8010188:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801018c:	f7f0 fa54 	bl	8000638 <__aeabi_dmul>
 8010190:	465c      	mov	r4, fp
 8010192:	4680      	mov	r8, r0
 8010194:	4689      	mov	r9, r1
 8010196:	4b5e      	ldr	r3, [pc, #376]	@ (8010310 <__ieee754_pow+0x790>)
 8010198:	2200      	movs	r2, #0
 801019a:	4620      	mov	r0, r4
 801019c:	4629      	mov	r1, r5
 801019e:	f7f0 f893 	bl	80002c8 <__aeabi_dsub>
 80101a2:	4632      	mov	r2, r6
 80101a4:	463b      	mov	r3, r7
 80101a6:	f7f0 f88f 	bl	80002c8 <__aeabi_dsub>
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101b2:	f7f0 f889 	bl	80002c8 <__aeabi_dsub>
 80101b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101ba:	f7f0 fa3d 	bl	8000638 <__aeabi_dmul>
 80101be:	4622      	mov	r2, r4
 80101c0:	4606      	mov	r6, r0
 80101c2:	460f      	mov	r7, r1
 80101c4:	462b      	mov	r3, r5
 80101c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101ca:	f7f0 fa35 	bl	8000638 <__aeabi_dmul>
 80101ce:	4602      	mov	r2, r0
 80101d0:	460b      	mov	r3, r1
 80101d2:	4630      	mov	r0, r6
 80101d4:	4639      	mov	r1, r7
 80101d6:	f7f0 f879 	bl	80002cc <__adddf3>
 80101da:	4606      	mov	r6, r0
 80101dc:	460f      	mov	r7, r1
 80101de:	4602      	mov	r2, r0
 80101e0:	460b      	mov	r3, r1
 80101e2:	4640      	mov	r0, r8
 80101e4:	4649      	mov	r1, r9
 80101e6:	f7f0 f871 	bl	80002cc <__adddf3>
 80101ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80101ee:	a33c      	add	r3, pc, #240	@ (adr r3, 80102e0 <__ieee754_pow+0x760>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	4658      	mov	r0, fp
 80101f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80101fa:	460d      	mov	r5, r1
 80101fc:	f7f0 fa1c 	bl	8000638 <__aeabi_dmul>
 8010200:	465c      	mov	r4, fp
 8010202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010206:	4642      	mov	r2, r8
 8010208:	464b      	mov	r3, r9
 801020a:	4620      	mov	r0, r4
 801020c:	4629      	mov	r1, r5
 801020e:	f7f0 f85b 	bl	80002c8 <__aeabi_dsub>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	4630      	mov	r0, r6
 8010218:	4639      	mov	r1, r7
 801021a:	f7f0 f855 	bl	80002c8 <__aeabi_dsub>
 801021e:	a332      	add	r3, pc, #200	@ (adr r3, 80102e8 <__ieee754_pow+0x768>)
 8010220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010224:	f7f0 fa08 	bl	8000638 <__aeabi_dmul>
 8010228:	a331      	add	r3, pc, #196	@ (adr r3, 80102f0 <__ieee754_pow+0x770>)
 801022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022e:	4606      	mov	r6, r0
 8010230:	460f      	mov	r7, r1
 8010232:	4620      	mov	r0, r4
 8010234:	4629      	mov	r1, r5
 8010236:	f7f0 f9ff 	bl	8000638 <__aeabi_dmul>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4630      	mov	r0, r6
 8010240:	4639      	mov	r1, r7
 8010242:	f7f0 f843 	bl	80002cc <__adddf3>
 8010246:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010248:	4b32      	ldr	r3, [pc, #200]	@ (8010314 <__ieee754_pow+0x794>)
 801024a:	4413      	add	r3, r2
 801024c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010250:	f7f0 f83c 	bl	80002cc <__adddf3>
 8010254:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010258:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801025a:	f7f0 f983 	bl	8000564 <__aeabi_i2d>
 801025e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010260:	4b2d      	ldr	r3, [pc, #180]	@ (8010318 <__ieee754_pow+0x798>)
 8010262:	4413      	add	r3, r2
 8010264:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010268:	4606      	mov	r6, r0
 801026a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801026e:	460f      	mov	r7, r1
 8010270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010274:	f7f0 f82a 	bl	80002cc <__adddf3>
 8010278:	4642      	mov	r2, r8
 801027a:	464b      	mov	r3, r9
 801027c:	f7f0 f826 	bl	80002cc <__adddf3>
 8010280:	4632      	mov	r2, r6
 8010282:	463b      	mov	r3, r7
 8010284:	f7f0 f822 	bl	80002cc <__adddf3>
 8010288:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801028c:	4632      	mov	r2, r6
 801028e:	463b      	mov	r3, r7
 8010290:	4658      	mov	r0, fp
 8010292:	460d      	mov	r5, r1
 8010294:	f7f0 f818 	bl	80002c8 <__aeabi_dsub>
 8010298:	4642      	mov	r2, r8
 801029a:	464b      	mov	r3, r9
 801029c:	f7f0 f814 	bl	80002c8 <__aeabi_dsub>
 80102a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102a4:	f7f0 f810 	bl	80002c8 <__aeabi_dsub>
 80102a8:	465c      	mov	r4, fp
 80102aa:	4602      	mov	r2, r0
 80102ac:	e036      	b.n	801031c <__ieee754_pow+0x79c>
 80102ae:	bf00      	nop
 80102b0:	4a454eef 	.word	0x4a454eef
 80102b4:	3fca7e28 	.word	0x3fca7e28
 80102b8:	93c9db65 	.word	0x93c9db65
 80102bc:	3fcd864a 	.word	0x3fcd864a
 80102c0:	a91d4101 	.word	0xa91d4101
 80102c4:	3fd17460 	.word	0x3fd17460
 80102c8:	518f264d 	.word	0x518f264d
 80102cc:	3fd55555 	.word	0x3fd55555
 80102d0:	db6fabff 	.word	0xdb6fabff
 80102d4:	3fdb6db6 	.word	0x3fdb6db6
 80102d8:	33333303 	.word	0x33333303
 80102dc:	3fe33333 	.word	0x3fe33333
 80102e0:	e0000000 	.word	0xe0000000
 80102e4:	3feec709 	.word	0x3feec709
 80102e8:	dc3a03fd 	.word	0xdc3a03fd
 80102ec:	3feec709 	.word	0x3feec709
 80102f0:	145b01f5 	.word	0x145b01f5
 80102f4:	be3e2fe0 	.word	0xbe3e2fe0
 80102f8:	7ff00000 	.word	0x7ff00000
 80102fc:	43400000 	.word	0x43400000
 8010300:	0003988e 	.word	0x0003988e
 8010304:	000bb679 	.word	0x000bb679
 8010308:	08011df0 	.word	0x08011df0
 801030c:	3ff00000 	.word	0x3ff00000
 8010310:	40080000 	.word	0x40080000
 8010314:	08011dd0 	.word	0x08011dd0
 8010318:	08011de0 	.word	0x08011de0
 801031c:	460b      	mov	r3, r1
 801031e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010322:	e5d7      	b.n	800fed4 <__ieee754_pow+0x354>
 8010324:	f04f 0a01 	mov.w	sl, #1
 8010328:	e65e      	b.n	800ffe8 <__ieee754_pow+0x468>
 801032a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80105fc <__ieee754_pow+0xa7c>)
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	4630      	mov	r0, r6
 8010332:	4639      	mov	r1, r7
 8010334:	f7ef ffca 	bl	80002cc <__adddf3>
 8010338:	4642      	mov	r2, r8
 801033a:	e9cd 0100 	strd	r0, r1, [sp]
 801033e:	464b      	mov	r3, r9
 8010340:	4620      	mov	r0, r4
 8010342:	4629      	mov	r1, r5
 8010344:	f7ef ffc0 	bl	80002c8 <__aeabi_dsub>
 8010348:	4602      	mov	r2, r0
 801034a:	460b      	mov	r3, r1
 801034c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010350:	f7f0 fc02 	bl	8000b58 <__aeabi_dcmpgt>
 8010354:	2800      	cmp	r0, #0
 8010356:	f47f ae00 	bne.w	800ff5a <__ieee754_pow+0x3da>
 801035a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801035e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010362:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010366:	fa43 fa0a 	asr.w	sl, r3, sl
 801036a:	44da      	add	sl, fp
 801036c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010370:	489d      	ldr	r0, [pc, #628]	@ (80105e8 <__ieee754_pow+0xa68>)
 8010372:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010376:	4108      	asrs	r0, r1
 8010378:	ea00 030a 	and.w	r3, r0, sl
 801037c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010380:	f1c1 0114 	rsb	r1, r1, #20
 8010384:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010388:	fa4a fa01 	asr.w	sl, sl, r1
 801038c:	f1bb 0f00 	cmp.w	fp, #0
 8010390:	4640      	mov	r0, r8
 8010392:	4649      	mov	r1, r9
 8010394:	f04f 0200 	mov.w	r2, #0
 8010398:	bfb8      	it	lt
 801039a:	f1ca 0a00 	rsblt	sl, sl, #0
 801039e:	f7ef ff93 	bl	80002c8 <__aeabi_dsub>
 80103a2:	4680      	mov	r8, r0
 80103a4:	4689      	mov	r9, r1
 80103a6:	4632      	mov	r2, r6
 80103a8:	463b      	mov	r3, r7
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	f7ef ff8d 	bl	80002cc <__adddf3>
 80103b2:	2400      	movs	r4, #0
 80103b4:	a37c      	add	r3, pc, #496	@ (adr r3, 80105a8 <__ieee754_pow+0xa28>)
 80103b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ba:	4620      	mov	r0, r4
 80103bc:	460d      	mov	r5, r1
 80103be:	f7f0 f93b 	bl	8000638 <__aeabi_dmul>
 80103c2:	4642      	mov	r2, r8
 80103c4:	e9cd 0100 	strd	r0, r1, [sp]
 80103c8:	464b      	mov	r3, r9
 80103ca:	4620      	mov	r0, r4
 80103cc:	4629      	mov	r1, r5
 80103ce:	f7ef ff7b 	bl	80002c8 <__aeabi_dsub>
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	4630      	mov	r0, r6
 80103d8:	4639      	mov	r1, r7
 80103da:	f7ef ff75 	bl	80002c8 <__aeabi_dsub>
 80103de:	a374      	add	r3, pc, #464	@ (adr r3, 80105b0 <__ieee754_pow+0xa30>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f7f0 f928 	bl	8000638 <__aeabi_dmul>
 80103e8:	a373      	add	r3, pc, #460	@ (adr r3, 80105b8 <__ieee754_pow+0xa38>)
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	4680      	mov	r8, r0
 80103f0:	4689      	mov	r9, r1
 80103f2:	4620      	mov	r0, r4
 80103f4:	4629      	mov	r1, r5
 80103f6:	f7f0 f91f 	bl	8000638 <__aeabi_dmul>
 80103fa:	4602      	mov	r2, r0
 80103fc:	460b      	mov	r3, r1
 80103fe:	4640      	mov	r0, r8
 8010400:	4649      	mov	r1, r9
 8010402:	f7ef ff63 	bl	80002cc <__adddf3>
 8010406:	4604      	mov	r4, r0
 8010408:	460d      	mov	r5, r1
 801040a:	4602      	mov	r2, r0
 801040c:	460b      	mov	r3, r1
 801040e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010412:	f7ef ff5b 	bl	80002cc <__adddf3>
 8010416:	e9dd 2300 	ldrd	r2, r3, [sp]
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	f7ef ff53 	bl	80002c8 <__aeabi_dsub>
 8010422:	4602      	mov	r2, r0
 8010424:	460b      	mov	r3, r1
 8010426:	4620      	mov	r0, r4
 8010428:	4629      	mov	r1, r5
 801042a:	f7ef ff4d 	bl	80002c8 <__aeabi_dsub>
 801042e:	4642      	mov	r2, r8
 8010430:	4606      	mov	r6, r0
 8010432:	460f      	mov	r7, r1
 8010434:	464b      	mov	r3, r9
 8010436:	4640      	mov	r0, r8
 8010438:	4649      	mov	r1, r9
 801043a:	f7f0 f8fd 	bl	8000638 <__aeabi_dmul>
 801043e:	a360      	add	r3, pc, #384	@ (adr r3, 80105c0 <__ieee754_pow+0xa40>)
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	4604      	mov	r4, r0
 8010446:	460d      	mov	r5, r1
 8010448:	f7f0 f8f6 	bl	8000638 <__aeabi_dmul>
 801044c:	a35e      	add	r3, pc, #376	@ (adr r3, 80105c8 <__ieee754_pow+0xa48>)
 801044e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010452:	f7ef ff39 	bl	80002c8 <__aeabi_dsub>
 8010456:	4622      	mov	r2, r4
 8010458:	462b      	mov	r3, r5
 801045a:	f7f0 f8ed 	bl	8000638 <__aeabi_dmul>
 801045e:	a35c      	add	r3, pc, #368	@ (adr r3, 80105d0 <__ieee754_pow+0xa50>)
 8010460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010464:	f7ef ff32 	bl	80002cc <__adddf3>
 8010468:	4622      	mov	r2, r4
 801046a:	462b      	mov	r3, r5
 801046c:	f7f0 f8e4 	bl	8000638 <__aeabi_dmul>
 8010470:	a359      	add	r3, pc, #356	@ (adr r3, 80105d8 <__ieee754_pow+0xa58>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	f7ef ff27 	bl	80002c8 <__aeabi_dsub>
 801047a:	4622      	mov	r2, r4
 801047c:	462b      	mov	r3, r5
 801047e:	f7f0 f8db 	bl	8000638 <__aeabi_dmul>
 8010482:	a357      	add	r3, pc, #348	@ (adr r3, 80105e0 <__ieee754_pow+0xa60>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7ef ff20 	bl	80002cc <__adddf3>
 801048c:	4622      	mov	r2, r4
 801048e:	462b      	mov	r3, r5
 8010490:	f7f0 f8d2 	bl	8000638 <__aeabi_dmul>
 8010494:	4602      	mov	r2, r0
 8010496:	460b      	mov	r3, r1
 8010498:	4640      	mov	r0, r8
 801049a:	4649      	mov	r1, r9
 801049c:	f7ef ff14 	bl	80002c8 <__aeabi_dsub>
 80104a0:	4604      	mov	r4, r0
 80104a2:	460d      	mov	r5, r1
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	4640      	mov	r0, r8
 80104aa:	4649      	mov	r1, r9
 80104ac:	f7f0 f8c4 	bl	8000638 <__aeabi_dmul>
 80104b0:	2200      	movs	r2, #0
 80104b2:	e9cd 0100 	strd	r0, r1, [sp]
 80104b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80104ba:	4620      	mov	r0, r4
 80104bc:	4629      	mov	r1, r5
 80104be:	f7ef ff03 	bl	80002c8 <__aeabi_dsub>
 80104c2:	4602      	mov	r2, r0
 80104c4:	460b      	mov	r3, r1
 80104c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104ca:	f7f0 f9df 	bl	800088c <__aeabi_ddiv>
 80104ce:	4632      	mov	r2, r6
 80104d0:	4604      	mov	r4, r0
 80104d2:	460d      	mov	r5, r1
 80104d4:	463b      	mov	r3, r7
 80104d6:	4640      	mov	r0, r8
 80104d8:	4649      	mov	r1, r9
 80104da:	f7f0 f8ad 	bl	8000638 <__aeabi_dmul>
 80104de:	4632      	mov	r2, r6
 80104e0:	463b      	mov	r3, r7
 80104e2:	f7ef fef3 	bl	80002cc <__adddf3>
 80104e6:	4602      	mov	r2, r0
 80104e8:	460b      	mov	r3, r1
 80104ea:	4620      	mov	r0, r4
 80104ec:	4629      	mov	r1, r5
 80104ee:	f7ef feeb 	bl	80002c8 <__aeabi_dsub>
 80104f2:	4642      	mov	r2, r8
 80104f4:	464b      	mov	r3, r9
 80104f6:	f7ef fee7 	bl	80002c8 <__aeabi_dsub>
 80104fa:	460b      	mov	r3, r1
 80104fc:	4602      	mov	r2, r0
 80104fe:	493b      	ldr	r1, [pc, #236]	@ (80105ec <__ieee754_pow+0xa6c>)
 8010500:	2000      	movs	r0, #0
 8010502:	f7ef fee1 	bl	80002c8 <__aeabi_dsub>
 8010506:	ec41 0b10 	vmov	d0, r0, r1
 801050a:	ee10 3a90 	vmov	r3, s1
 801050e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010516:	da30      	bge.n	801057a <__ieee754_pow+0x9fa>
 8010518:	4650      	mov	r0, sl
 801051a:	f000 fdcd 	bl	80110b8 <scalbn>
 801051e:	ec51 0b10 	vmov	r0, r1, d0
 8010522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010526:	f7ff bbd2 	b.w	800fcce <__ieee754_pow+0x14e>
 801052a:	4c31      	ldr	r4, [pc, #196]	@ (80105f0 <__ieee754_pow+0xa70>)
 801052c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010530:	42a3      	cmp	r3, r4
 8010532:	d91a      	bls.n	801056a <__ieee754_pow+0x9ea>
 8010534:	4b2f      	ldr	r3, [pc, #188]	@ (80105f4 <__ieee754_pow+0xa74>)
 8010536:	440b      	add	r3, r1
 8010538:	4303      	orrs	r3, r0
 801053a:	d009      	beq.n	8010550 <__ieee754_pow+0x9d0>
 801053c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010540:	2200      	movs	r2, #0
 8010542:	2300      	movs	r3, #0
 8010544:	f7f0 faea 	bl	8000b1c <__aeabi_dcmplt>
 8010548:	3800      	subs	r0, #0
 801054a:	bf18      	it	ne
 801054c:	2001      	movne	r0, #1
 801054e:	e42b      	b.n	800fda8 <__ieee754_pow+0x228>
 8010550:	4642      	mov	r2, r8
 8010552:	464b      	mov	r3, r9
 8010554:	f7ef feb8 	bl	80002c8 <__aeabi_dsub>
 8010558:	4632      	mov	r2, r6
 801055a:	463b      	mov	r3, r7
 801055c:	f7f0 faf2 	bl	8000b44 <__aeabi_dcmpge>
 8010560:	2800      	cmp	r0, #0
 8010562:	d1eb      	bne.n	801053c <__ieee754_pow+0x9bc>
 8010564:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010604 <__ieee754_pow+0xa84>
 8010568:	e6f7      	b.n	801035a <__ieee754_pow+0x7da>
 801056a:	469a      	mov	sl, r3
 801056c:	4b22      	ldr	r3, [pc, #136]	@ (80105f8 <__ieee754_pow+0xa78>)
 801056e:	459a      	cmp	sl, r3
 8010570:	f63f aef3 	bhi.w	801035a <__ieee754_pow+0x7da>
 8010574:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010578:	e715      	b.n	80103a6 <__ieee754_pow+0x826>
 801057a:	ec51 0b10 	vmov	r0, r1, d0
 801057e:	4619      	mov	r1, r3
 8010580:	e7cf      	b.n	8010522 <__ieee754_pow+0x9a2>
 8010582:	491a      	ldr	r1, [pc, #104]	@ (80105ec <__ieee754_pow+0xa6c>)
 8010584:	2000      	movs	r0, #0
 8010586:	f7ff bb18 	b.w	800fbba <__ieee754_pow+0x3a>
 801058a:	2000      	movs	r0, #0
 801058c:	2100      	movs	r1, #0
 801058e:	f7ff bb14 	b.w	800fbba <__ieee754_pow+0x3a>
 8010592:	4630      	mov	r0, r6
 8010594:	4639      	mov	r1, r7
 8010596:	f7ff bb10 	b.w	800fbba <__ieee754_pow+0x3a>
 801059a:	460c      	mov	r4, r1
 801059c:	f7ff bb5e 	b.w	800fc5c <__ieee754_pow+0xdc>
 80105a0:	2400      	movs	r4, #0
 80105a2:	f7ff bb49 	b.w	800fc38 <__ieee754_pow+0xb8>
 80105a6:	bf00      	nop
 80105a8:	00000000 	.word	0x00000000
 80105ac:	3fe62e43 	.word	0x3fe62e43
 80105b0:	fefa39ef 	.word	0xfefa39ef
 80105b4:	3fe62e42 	.word	0x3fe62e42
 80105b8:	0ca86c39 	.word	0x0ca86c39
 80105bc:	be205c61 	.word	0xbe205c61
 80105c0:	72bea4d0 	.word	0x72bea4d0
 80105c4:	3e663769 	.word	0x3e663769
 80105c8:	c5d26bf1 	.word	0xc5d26bf1
 80105cc:	3ebbbd41 	.word	0x3ebbbd41
 80105d0:	af25de2c 	.word	0xaf25de2c
 80105d4:	3f11566a 	.word	0x3f11566a
 80105d8:	16bebd93 	.word	0x16bebd93
 80105dc:	3f66c16c 	.word	0x3f66c16c
 80105e0:	5555553e 	.word	0x5555553e
 80105e4:	3fc55555 	.word	0x3fc55555
 80105e8:	fff00000 	.word	0xfff00000
 80105ec:	3ff00000 	.word	0x3ff00000
 80105f0:	4090cbff 	.word	0x4090cbff
 80105f4:	3f6f3400 	.word	0x3f6f3400
 80105f8:	3fe00000 	.word	0x3fe00000
 80105fc:	652b82fe 	.word	0x652b82fe
 8010600:	3c971547 	.word	0x3c971547
 8010604:	4090cc00 	.word	0x4090cc00

08010608 <__ieee754_rem_pio2>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	ec57 6b10 	vmov	r6, r7, d0
 8010610:	4bc5      	ldr	r3, [pc, #788]	@ (8010928 <__ieee754_rem_pio2+0x320>)
 8010612:	b08d      	sub	sp, #52	@ 0x34
 8010614:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010618:	4598      	cmp	r8, r3
 801061a:	4604      	mov	r4, r0
 801061c:	9704      	str	r7, [sp, #16]
 801061e:	d807      	bhi.n	8010630 <__ieee754_rem_pio2+0x28>
 8010620:	2200      	movs	r2, #0
 8010622:	2300      	movs	r3, #0
 8010624:	ed80 0b00 	vstr	d0, [r0]
 8010628:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801062c:	2500      	movs	r5, #0
 801062e:	e028      	b.n	8010682 <__ieee754_rem_pio2+0x7a>
 8010630:	4bbe      	ldr	r3, [pc, #760]	@ (801092c <__ieee754_rem_pio2+0x324>)
 8010632:	4598      	cmp	r8, r3
 8010634:	d878      	bhi.n	8010728 <__ieee754_rem_pio2+0x120>
 8010636:	9b04      	ldr	r3, [sp, #16]
 8010638:	4dbd      	ldr	r5, [pc, #756]	@ (8010930 <__ieee754_rem_pio2+0x328>)
 801063a:	2b00      	cmp	r3, #0
 801063c:	4630      	mov	r0, r6
 801063e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80108f0 <__ieee754_rem_pio2+0x2e8>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	4639      	mov	r1, r7
 8010646:	dd38      	ble.n	80106ba <__ieee754_rem_pio2+0xb2>
 8010648:	f7ef fe3e 	bl	80002c8 <__aeabi_dsub>
 801064c:	45a8      	cmp	r8, r5
 801064e:	4606      	mov	r6, r0
 8010650:	460f      	mov	r7, r1
 8010652:	d01a      	beq.n	801068a <__ieee754_rem_pio2+0x82>
 8010654:	a3a8      	add	r3, pc, #672	@ (adr r3, 80108f8 <__ieee754_rem_pio2+0x2f0>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	f7ef fe35 	bl	80002c8 <__aeabi_dsub>
 801065e:	4602      	mov	r2, r0
 8010660:	460b      	mov	r3, r1
 8010662:	4680      	mov	r8, r0
 8010664:	4689      	mov	r9, r1
 8010666:	4630      	mov	r0, r6
 8010668:	4639      	mov	r1, r7
 801066a:	f7ef fe2d 	bl	80002c8 <__aeabi_dsub>
 801066e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80108f8 <__ieee754_rem_pio2+0x2f0>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	f7ef fe28 	bl	80002c8 <__aeabi_dsub>
 8010678:	e9c4 8900 	strd	r8, r9, [r4]
 801067c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010680:	2501      	movs	r5, #1
 8010682:	4628      	mov	r0, r5
 8010684:	b00d      	add	sp, #52	@ 0x34
 8010686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068a:	a39d      	add	r3, pc, #628	@ (adr r3, 8010900 <__ieee754_rem_pio2+0x2f8>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fe1a 	bl	80002c8 <__aeabi_dsub>
 8010694:	a39c      	add	r3, pc, #624	@ (adr r3, 8010908 <__ieee754_rem_pio2+0x300>)
 8010696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069a:	4606      	mov	r6, r0
 801069c:	460f      	mov	r7, r1
 801069e:	f7ef fe13 	bl	80002c8 <__aeabi_dsub>
 80106a2:	4602      	mov	r2, r0
 80106a4:	460b      	mov	r3, r1
 80106a6:	4680      	mov	r8, r0
 80106a8:	4689      	mov	r9, r1
 80106aa:	4630      	mov	r0, r6
 80106ac:	4639      	mov	r1, r7
 80106ae:	f7ef fe0b 	bl	80002c8 <__aeabi_dsub>
 80106b2:	a395      	add	r3, pc, #596	@ (adr r3, 8010908 <__ieee754_rem_pio2+0x300>)
 80106b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b8:	e7dc      	b.n	8010674 <__ieee754_rem_pio2+0x6c>
 80106ba:	f7ef fe07 	bl	80002cc <__adddf3>
 80106be:	45a8      	cmp	r8, r5
 80106c0:	4606      	mov	r6, r0
 80106c2:	460f      	mov	r7, r1
 80106c4:	d018      	beq.n	80106f8 <__ieee754_rem_pio2+0xf0>
 80106c6:	a38c      	add	r3, pc, #560	@ (adr r3, 80108f8 <__ieee754_rem_pio2+0x2f0>)
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	f7ef fdfe 	bl	80002cc <__adddf3>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4680      	mov	r8, r0
 80106d6:	4689      	mov	r9, r1
 80106d8:	4630      	mov	r0, r6
 80106da:	4639      	mov	r1, r7
 80106dc:	f7ef fdf4 	bl	80002c8 <__aeabi_dsub>
 80106e0:	a385      	add	r3, pc, #532	@ (adr r3, 80108f8 <__ieee754_rem_pio2+0x2f0>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f7ef fdf1 	bl	80002cc <__adddf3>
 80106ea:	f04f 35ff 	mov.w	r5, #4294967295
 80106ee:	e9c4 8900 	strd	r8, r9, [r4]
 80106f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80106f6:	e7c4      	b.n	8010682 <__ieee754_rem_pio2+0x7a>
 80106f8:	a381      	add	r3, pc, #516	@ (adr r3, 8010900 <__ieee754_rem_pio2+0x2f8>)
 80106fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fe:	f7ef fde5 	bl	80002cc <__adddf3>
 8010702:	a381      	add	r3, pc, #516	@ (adr r3, 8010908 <__ieee754_rem_pio2+0x300>)
 8010704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010708:	4606      	mov	r6, r0
 801070a:	460f      	mov	r7, r1
 801070c:	f7ef fdde 	bl	80002cc <__adddf3>
 8010710:	4602      	mov	r2, r0
 8010712:	460b      	mov	r3, r1
 8010714:	4680      	mov	r8, r0
 8010716:	4689      	mov	r9, r1
 8010718:	4630      	mov	r0, r6
 801071a:	4639      	mov	r1, r7
 801071c:	f7ef fdd4 	bl	80002c8 <__aeabi_dsub>
 8010720:	a379      	add	r3, pc, #484	@ (adr r3, 8010908 <__ieee754_rem_pio2+0x300>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	e7de      	b.n	80106e6 <__ieee754_rem_pio2+0xde>
 8010728:	4b82      	ldr	r3, [pc, #520]	@ (8010934 <__ieee754_rem_pio2+0x32c>)
 801072a:	4598      	cmp	r8, r3
 801072c:	f200 80d1 	bhi.w	80108d2 <__ieee754_rem_pio2+0x2ca>
 8010730:	f000 f966 	bl	8010a00 <fabs>
 8010734:	ec57 6b10 	vmov	r6, r7, d0
 8010738:	a375      	add	r3, pc, #468	@ (adr r3, 8010910 <__ieee754_rem_pio2+0x308>)
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	4630      	mov	r0, r6
 8010740:	4639      	mov	r1, r7
 8010742:	f7ef ff79 	bl	8000638 <__aeabi_dmul>
 8010746:	4b7c      	ldr	r3, [pc, #496]	@ (8010938 <__ieee754_rem_pio2+0x330>)
 8010748:	2200      	movs	r2, #0
 801074a:	f7ef fdbf 	bl	80002cc <__adddf3>
 801074e:	f7f0 fa23 	bl	8000b98 <__aeabi_d2iz>
 8010752:	4605      	mov	r5, r0
 8010754:	f7ef ff06 	bl	8000564 <__aeabi_i2d>
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010760:	a363      	add	r3, pc, #396	@ (adr r3, 80108f0 <__ieee754_rem_pio2+0x2e8>)
 8010762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010766:	f7ef ff67 	bl	8000638 <__aeabi_dmul>
 801076a:	4602      	mov	r2, r0
 801076c:	460b      	mov	r3, r1
 801076e:	4630      	mov	r0, r6
 8010770:	4639      	mov	r1, r7
 8010772:	f7ef fda9 	bl	80002c8 <__aeabi_dsub>
 8010776:	a360      	add	r3, pc, #384	@ (adr r3, 80108f8 <__ieee754_rem_pio2+0x2f0>)
 8010778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077c:	4682      	mov	sl, r0
 801077e:	468b      	mov	fp, r1
 8010780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010784:	f7ef ff58 	bl	8000638 <__aeabi_dmul>
 8010788:	2d1f      	cmp	r5, #31
 801078a:	4606      	mov	r6, r0
 801078c:	460f      	mov	r7, r1
 801078e:	dc0c      	bgt.n	80107aa <__ieee754_rem_pio2+0x1a2>
 8010790:	4b6a      	ldr	r3, [pc, #424]	@ (801093c <__ieee754_rem_pio2+0x334>)
 8010792:	1e6a      	subs	r2, r5, #1
 8010794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010798:	4543      	cmp	r3, r8
 801079a:	d006      	beq.n	80107aa <__ieee754_rem_pio2+0x1a2>
 801079c:	4632      	mov	r2, r6
 801079e:	463b      	mov	r3, r7
 80107a0:	4650      	mov	r0, sl
 80107a2:	4659      	mov	r1, fp
 80107a4:	f7ef fd90 	bl	80002c8 <__aeabi_dsub>
 80107a8:	e00e      	b.n	80107c8 <__ieee754_rem_pio2+0x1c0>
 80107aa:	463b      	mov	r3, r7
 80107ac:	4632      	mov	r2, r6
 80107ae:	4650      	mov	r0, sl
 80107b0:	4659      	mov	r1, fp
 80107b2:	f7ef fd89 	bl	80002c8 <__aeabi_dsub>
 80107b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80107ba:	9305      	str	r3, [sp, #20]
 80107bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80107c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80107c4:	2b10      	cmp	r3, #16
 80107c6:	dc02      	bgt.n	80107ce <__ieee754_rem_pio2+0x1c6>
 80107c8:	e9c4 0100 	strd	r0, r1, [r4]
 80107cc:	e039      	b.n	8010842 <__ieee754_rem_pio2+0x23a>
 80107ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8010900 <__ieee754_rem_pio2+0x2f8>)
 80107d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d8:	f7ef ff2e 	bl	8000638 <__aeabi_dmul>
 80107dc:	4606      	mov	r6, r0
 80107de:	460f      	mov	r7, r1
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	4650      	mov	r0, sl
 80107e6:	4659      	mov	r1, fp
 80107e8:	f7ef fd6e 	bl	80002c8 <__aeabi_dsub>
 80107ec:	4602      	mov	r2, r0
 80107ee:	460b      	mov	r3, r1
 80107f0:	4680      	mov	r8, r0
 80107f2:	4689      	mov	r9, r1
 80107f4:	4650      	mov	r0, sl
 80107f6:	4659      	mov	r1, fp
 80107f8:	f7ef fd66 	bl	80002c8 <__aeabi_dsub>
 80107fc:	4632      	mov	r2, r6
 80107fe:	463b      	mov	r3, r7
 8010800:	f7ef fd62 	bl	80002c8 <__aeabi_dsub>
 8010804:	a340      	add	r3, pc, #256	@ (adr r3, 8010908 <__ieee754_rem_pio2+0x300>)
 8010806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080a:	4606      	mov	r6, r0
 801080c:	460f      	mov	r7, r1
 801080e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010812:	f7ef ff11 	bl	8000638 <__aeabi_dmul>
 8010816:	4632      	mov	r2, r6
 8010818:	463b      	mov	r3, r7
 801081a:	f7ef fd55 	bl	80002c8 <__aeabi_dsub>
 801081e:	4602      	mov	r2, r0
 8010820:	460b      	mov	r3, r1
 8010822:	4606      	mov	r6, r0
 8010824:	460f      	mov	r7, r1
 8010826:	4640      	mov	r0, r8
 8010828:	4649      	mov	r1, r9
 801082a:	f7ef fd4d 	bl	80002c8 <__aeabi_dsub>
 801082e:	9a05      	ldr	r2, [sp, #20]
 8010830:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	2b31      	cmp	r3, #49	@ 0x31
 8010838:	dc20      	bgt.n	801087c <__ieee754_rem_pio2+0x274>
 801083a:	e9c4 0100 	strd	r0, r1, [r4]
 801083e:	46c2      	mov	sl, r8
 8010840:	46cb      	mov	fp, r9
 8010842:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010846:	4650      	mov	r0, sl
 8010848:	4642      	mov	r2, r8
 801084a:	464b      	mov	r3, r9
 801084c:	4659      	mov	r1, fp
 801084e:	f7ef fd3b 	bl	80002c8 <__aeabi_dsub>
 8010852:	463b      	mov	r3, r7
 8010854:	4632      	mov	r2, r6
 8010856:	f7ef fd37 	bl	80002c8 <__aeabi_dsub>
 801085a:	9b04      	ldr	r3, [sp, #16]
 801085c:	2b00      	cmp	r3, #0
 801085e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010862:	f6bf af0e 	bge.w	8010682 <__ieee754_rem_pio2+0x7a>
 8010866:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801086a:	6063      	str	r3, [r4, #4]
 801086c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010870:	f8c4 8000 	str.w	r8, [r4]
 8010874:	60a0      	str	r0, [r4, #8]
 8010876:	60e3      	str	r3, [r4, #12]
 8010878:	426d      	negs	r5, r5
 801087a:	e702      	b.n	8010682 <__ieee754_rem_pio2+0x7a>
 801087c:	a326      	add	r3, pc, #152	@ (adr r3, 8010918 <__ieee754_rem_pio2+0x310>)
 801087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010886:	f7ef fed7 	bl	8000638 <__aeabi_dmul>
 801088a:	4606      	mov	r6, r0
 801088c:	460f      	mov	r7, r1
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	4640      	mov	r0, r8
 8010894:	4649      	mov	r1, r9
 8010896:	f7ef fd17 	bl	80002c8 <__aeabi_dsub>
 801089a:	4602      	mov	r2, r0
 801089c:	460b      	mov	r3, r1
 801089e:	4682      	mov	sl, r0
 80108a0:	468b      	mov	fp, r1
 80108a2:	4640      	mov	r0, r8
 80108a4:	4649      	mov	r1, r9
 80108a6:	f7ef fd0f 	bl	80002c8 <__aeabi_dsub>
 80108aa:	4632      	mov	r2, r6
 80108ac:	463b      	mov	r3, r7
 80108ae:	f7ef fd0b 	bl	80002c8 <__aeabi_dsub>
 80108b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8010920 <__ieee754_rem_pio2+0x318>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	4606      	mov	r6, r0
 80108ba:	460f      	mov	r7, r1
 80108bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108c0:	f7ef feba 	bl	8000638 <__aeabi_dmul>
 80108c4:	4632      	mov	r2, r6
 80108c6:	463b      	mov	r3, r7
 80108c8:	f7ef fcfe 	bl	80002c8 <__aeabi_dsub>
 80108cc:	4606      	mov	r6, r0
 80108ce:	460f      	mov	r7, r1
 80108d0:	e764      	b.n	801079c <__ieee754_rem_pio2+0x194>
 80108d2:	4b1b      	ldr	r3, [pc, #108]	@ (8010940 <__ieee754_rem_pio2+0x338>)
 80108d4:	4598      	cmp	r8, r3
 80108d6:	d935      	bls.n	8010944 <__ieee754_rem_pio2+0x33c>
 80108d8:	4632      	mov	r2, r6
 80108da:	463b      	mov	r3, r7
 80108dc:	4630      	mov	r0, r6
 80108de:	4639      	mov	r1, r7
 80108e0:	f7ef fcf2 	bl	80002c8 <__aeabi_dsub>
 80108e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80108e8:	e9c4 0100 	strd	r0, r1, [r4]
 80108ec:	e69e      	b.n	801062c <__ieee754_rem_pio2+0x24>
 80108ee:	bf00      	nop
 80108f0:	54400000 	.word	0x54400000
 80108f4:	3ff921fb 	.word	0x3ff921fb
 80108f8:	1a626331 	.word	0x1a626331
 80108fc:	3dd0b461 	.word	0x3dd0b461
 8010900:	1a600000 	.word	0x1a600000
 8010904:	3dd0b461 	.word	0x3dd0b461
 8010908:	2e037073 	.word	0x2e037073
 801090c:	3ba3198a 	.word	0x3ba3198a
 8010910:	6dc9c883 	.word	0x6dc9c883
 8010914:	3fe45f30 	.word	0x3fe45f30
 8010918:	2e000000 	.word	0x2e000000
 801091c:	3ba3198a 	.word	0x3ba3198a
 8010920:	252049c1 	.word	0x252049c1
 8010924:	397b839a 	.word	0x397b839a
 8010928:	3fe921fb 	.word	0x3fe921fb
 801092c:	4002d97b 	.word	0x4002d97b
 8010930:	3ff921fb 	.word	0x3ff921fb
 8010934:	413921fb 	.word	0x413921fb
 8010938:	3fe00000 	.word	0x3fe00000
 801093c:	08011e00 	.word	0x08011e00
 8010940:	7fefffff 	.word	0x7fefffff
 8010944:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010948:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801094c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010950:	4630      	mov	r0, r6
 8010952:	460f      	mov	r7, r1
 8010954:	f7f0 f920 	bl	8000b98 <__aeabi_d2iz>
 8010958:	f7ef fe04 	bl	8000564 <__aeabi_i2d>
 801095c:	4602      	mov	r2, r0
 801095e:	460b      	mov	r3, r1
 8010960:	4630      	mov	r0, r6
 8010962:	4639      	mov	r1, r7
 8010964:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010968:	f7ef fcae 	bl	80002c8 <__aeabi_dsub>
 801096c:	4b22      	ldr	r3, [pc, #136]	@ (80109f8 <__ieee754_rem_pio2+0x3f0>)
 801096e:	2200      	movs	r2, #0
 8010970:	f7ef fe62 	bl	8000638 <__aeabi_dmul>
 8010974:	460f      	mov	r7, r1
 8010976:	4606      	mov	r6, r0
 8010978:	f7f0 f90e 	bl	8000b98 <__aeabi_d2iz>
 801097c:	f7ef fdf2 	bl	8000564 <__aeabi_i2d>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	4630      	mov	r0, r6
 8010986:	4639      	mov	r1, r7
 8010988:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801098c:	f7ef fc9c 	bl	80002c8 <__aeabi_dsub>
 8010990:	4b19      	ldr	r3, [pc, #100]	@ (80109f8 <__ieee754_rem_pio2+0x3f0>)
 8010992:	2200      	movs	r2, #0
 8010994:	f7ef fe50 	bl	8000638 <__aeabi_dmul>
 8010998:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801099c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80109a0:	f04f 0803 	mov.w	r8, #3
 80109a4:	2600      	movs	r6, #0
 80109a6:	2700      	movs	r7, #0
 80109a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80109ac:	4632      	mov	r2, r6
 80109ae:	463b      	mov	r3, r7
 80109b0:	46c2      	mov	sl, r8
 80109b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80109b6:	f7f0 f8a7 	bl	8000b08 <__aeabi_dcmpeq>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	d1f4      	bne.n	80109a8 <__ieee754_rem_pio2+0x3a0>
 80109be:	4b0f      	ldr	r3, [pc, #60]	@ (80109fc <__ieee754_rem_pio2+0x3f4>)
 80109c0:	9301      	str	r3, [sp, #4]
 80109c2:	2302      	movs	r3, #2
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	462a      	mov	r2, r5
 80109c8:	4653      	mov	r3, sl
 80109ca:	4621      	mov	r1, r4
 80109cc:	a806      	add	r0, sp, #24
 80109ce:	f000 fc2f 	bl	8011230 <__kernel_rem_pio2>
 80109d2:	9b04      	ldr	r3, [sp, #16]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	4605      	mov	r5, r0
 80109d8:	f6bf ae53 	bge.w	8010682 <__ieee754_rem_pio2+0x7a>
 80109dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80109e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80109e4:	e9c4 2300 	strd	r2, r3, [r4]
 80109e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80109ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80109f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80109f4:	e740      	b.n	8010878 <__ieee754_rem_pio2+0x270>
 80109f6:	bf00      	nop
 80109f8:	41700000 	.word	0x41700000
 80109fc:	08011e80 	.word	0x08011e80

08010a00 <fabs>:
 8010a00:	ec51 0b10 	vmov	r0, r1, d0
 8010a04:	4602      	mov	r2, r0
 8010a06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010a0a:	ec43 2b10 	vmov	d0, r2, r3
 8010a0e:	4770      	bx	lr

08010a10 <__ieee754_acosf>:
 8010a10:	b508      	push	{r3, lr}
 8010a12:	ee10 3a10 	vmov	r3, s0
 8010a16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010a1a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010a1e:	ed2d 8b0c 	vpush	{d8-d13}
 8010a22:	d10a      	bne.n	8010a3a <__ieee754_acosf+0x2a>
 8010a24:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8010bbc <__ieee754_acosf+0x1ac>
 8010a28:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8010bc0 <__ieee754_acosf+0x1b0>
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bfc8      	it	gt
 8010a30:	eeb0 0a67 	vmovgt.f32	s0, s15
 8010a34:	ecbd 8b0c 	vpop	{d8-d13}
 8010a38:	bd08      	pop	{r3, pc}
 8010a3a:	d904      	bls.n	8010a46 <__ieee754_acosf+0x36>
 8010a3c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010a40:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010a44:	e7f6      	b.n	8010a34 <__ieee754_acosf+0x24>
 8010a46:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8010a4a:	d23c      	bcs.n	8010ac6 <__ieee754_acosf+0xb6>
 8010a4c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8010a50:	f240 80b1 	bls.w	8010bb6 <__ieee754_acosf+0x1a6>
 8010a54:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010a58:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8010bc4 <__ieee754_acosf+0x1b4>
 8010a5c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8010bc8 <__ieee754_acosf+0x1b8>
 8010a60:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8010bcc <__ieee754_acosf+0x1bc>
 8010a64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010a68:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010bd0 <__ieee754_acosf+0x1c0>
 8010a6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010a70:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010bd4 <__ieee754_acosf+0x1c4>
 8010a74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a78:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8010bd8 <__ieee754_acosf+0x1c8>
 8010a7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010a80:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8010bdc <__ieee754_acosf+0x1cc>
 8010a84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a88:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8010be0 <__ieee754_acosf+0x1d0>
 8010a8c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010a90:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010be4 <__ieee754_acosf+0x1d4>
 8010a94:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010a98:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8010be8 <__ieee754_acosf+0x1d8>
 8010a9c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010aa4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010aac:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8010bec <__ieee754_acosf+0x1dc>
 8010ab0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010ab4:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010ab8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010abc:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8010bf0 <__ieee754_acosf+0x1e0>
 8010ac0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ac4:	e7b6      	b.n	8010a34 <__ieee754_acosf+0x24>
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	eddf da3e 	vldr	s27, [pc, #248]	@ 8010bc4 <__ieee754_acosf+0x1b4>
 8010acc:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8010bc8 <__ieee754_acosf+0x1b8>
 8010ad0:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8010bd0 <__ieee754_acosf+0x1c0>
 8010ad4:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8010bd4 <__ieee754_acosf+0x1c4>
 8010ad8:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8010bd8 <__ieee754_acosf+0x1c8>
 8010adc:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8010bdc <__ieee754_acosf+0x1cc>
 8010ae0:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8010be0 <__ieee754_acosf+0x1d0>
 8010ae4:	eddf aa39 	vldr	s21, [pc, #228]	@ 8010bcc <__ieee754_acosf+0x1bc>
 8010ae8:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8010be4 <__ieee754_acosf+0x1d4>
 8010aec:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8010be8 <__ieee754_acosf+0x1d8>
 8010af0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010af4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010af8:	da28      	bge.n	8010b4c <__ieee754_acosf+0x13c>
 8010afa:	ee30 8a09 	vadd.f32	s16, s0, s18
 8010afe:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010b02:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010b06:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8010b0a:	eeac ca80 	vfma.f32	s24, s25, s0
 8010b0e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8010b12:	eeec ba00 	vfma.f32	s23, s24, s0
 8010b16:	eeea 9a00 	vfma.f32	s19, s20, s0
 8010b1a:	eeab ba80 	vfma.f32	s22, s23, s0
 8010b1e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8010b22:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8010b26:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010b2a:	f7fe fe59 	bl	800f7e0 <__ieee754_sqrtf>
 8010b2e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010b32:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010bf4 <__ieee754_acosf+0x1e4>
 8010b36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010b3a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010b3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010b42:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8010bf8 <__ieee754_acosf+0x1e8>
 8010b46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010b4a:	e773      	b.n	8010a34 <__ieee754_acosf+0x24>
 8010b4c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010b50:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010b54:	eeb0 0a48 	vmov.f32	s0, s16
 8010b58:	f7fe fe42 	bl	800f7e0 <__ieee754_sqrtf>
 8010b5c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010b60:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010b64:	eeac ca88 	vfma.f32	s24, s25, s16
 8010b68:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010b6c:	eeec ba08 	vfma.f32	s23, s24, s16
 8010b70:	ee10 3a10 	vmov	r3, s0
 8010b74:	eeab ba88 	vfma.f32	s22, s23, s16
 8010b78:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010b7c:	f023 030f 	bic.w	r3, r3, #15
 8010b80:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010b84:	ee07 3a90 	vmov	s15, r3
 8010b88:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010b8c:	eeb0 6a48 	vmov.f32	s12, s16
 8010b90:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010b94:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010b98:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010b9c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010ba0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010ba4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010ba8:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010bac:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010bb0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010bb4:	e73e      	b.n	8010a34 <__ieee754_acosf+0x24>
 8010bb6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8010bfc <__ieee754_acosf+0x1ec>
 8010bba:	e73b      	b.n	8010a34 <__ieee754_acosf+0x24>
 8010bbc:	40490fdb 	.word	0x40490fdb
 8010bc0:	00000000 	.word	0x00000000
 8010bc4:	3811ef08 	.word	0x3811ef08
 8010bc8:	3a4f7f04 	.word	0x3a4f7f04
 8010bcc:	bf303361 	.word	0xbf303361
 8010bd0:	bd241146 	.word	0xbd241146
 8010bd4:	3e4e0aa8 	.word	0x3e4e0aa8
 8010bd8:	bea6b090 	.word	0xbea6b090
 8010bdc:	3e2aaaab 	.word	0x3e2aaaab
 8010be0:	3d9dc62e 	.word	0x3d9dc62e
 8010be4:	4001572d 	.word	0x4001572d
 8010be8:	c019d139 	.word	0xc019d139
 8010bec:	33a22168 	.word	0x33a22168
 8010bf0:	3fc90fda 	.word	0x3fc90fda
 8010bf4:	b3a22168 	.word	0xb3a22168
 8010bf8:	40490fda 	.word	0x40490fda
 8010bfc:	3fc90fdb 	.word	0x3fc90fdb

08010c00 <__ieee754_asinf>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	ee10 5a10 	vmov	r5, s0
 8010c06:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010c0a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8010c0e:	ed2d 8b04 	vpush	{d8-d9}
 8010c12:	d10c      	bne.n	8010c2e <__ieee754_asinf+0x2e>
 8010c14:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8010d8c <__ieee754_asinf+0x18c>
 8010c18:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8010d90 <__ieee754_asinf+0x190>
 8010c1c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010c20:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010c24:	eeb0 0a67 	vmov.f32	s0, s15
 8010c28:	ecbd 8b04 	vpop	{d8-d9}
 8010c2c:	bd38      	pop	{r3, r4, r5, pc}
 8010c2e:	d904      	bls.n	8010c3a <__ieee754_asinf+0x3a>
 8010c30:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010c34:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010c38:	e7f6      	b.n	8010c28 <__ieee754_asinf+0x28>
 8010c3a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010c3e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010c42:	d20b      	bcs.n	8010c5c <__ieee754_asinf+0x5c>
 8010c44:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010c48:	d252      	bcs.n	8010cf0 <__ieee754_asinf+0xf0>
 8010c4a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8010d94 <__ieee754_asinf+0x194>
 8010c4e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010c52:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5a:	dce5      	bgt.n	8010c28 <__ieee754_asinf+0x28>
 8010c5c:	f7fe fc78 	bl	800f550 <fabsf>
 8010c60:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010c64:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010c68:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010c6c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8010d98 <__ieee754_asinf+0x198>
 8010c70:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8010d9c <__ieee754_asinf+0x19c>
 8010c74:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8010da0 <__ieee754_asinf+0x1a0>
 8010c78:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010c7c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010da4 <__ieee754_asinf+0x1a4>
 8010c80:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010c84:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8010da8 <__ieee754_asinf+0x1a8>
 8010c88:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010c8c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8010dac <__ieee754_asinf+0x1ac>
 8010c90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010c94:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8010db0 <__ieee754_asinf+0x1b0>
 8010c98:	eea7 9a88 	vfma.f32	s18, s15, s16
 8010c9c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8010db4 <__ieee754_asinf+0x1b4>
 8010ca0:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010ca4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8010db8 <__ieee754_asinf+0x1b8>
 8010ca8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010cac:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010dbc <__ieee754_asinf+0x1bc>
 8010cb0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8010cb8:	eee7 8a88 	vfma.f32	s17, s15, s16
 8010cbc:	f7fe fd90 	bl	800f7e0 <__ieee754_sqrtf>
 8010cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8010dc0 <__ieee754_asinf+0x1c0>)
 8010cc2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010cc6:	429c      	cmp	r4, r3
 8010cc8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010ccc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010cd0:	d93d      	bls.n	8010d4e <__ieee754_asinf+0x14e>
 8010cd2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010cd6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010dc4 <__ieee754_asinf+0x1c4>
 8010cda:	eee0 7a26 	vfma.f32	s15, s0, s13
 8010cde:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010d90 <__ieee754_asinf+0x190>
 8010ce2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ce6:	2d00      	cmp	r5, #0
 8010ce8:	bfd8      	it	le
 8010cea:	eeb1 0a40 	vnegle.f32	s0, s0
 8010cee:	e79b      	b.n	8010c28 <__ieee754_asinf+0x28>
 8010cf0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010cf4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010d9c <__ieee754_asinf+0x19c>
 8010cf8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8010d98 <__ieee754_asinf+0x198>
 8010cfc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8010db0 <__ieee754_asinf+0x1b0>
 8010d00:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010d04:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010da4 <__ieee754_asinf+0x1a4>
 8010d08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010d0c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010da8 <__ieee754_asinf+0x1a8>
 8010d10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d14:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8010dac <__ieee754_asinf+0x1ac>
 8010d18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010d1c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8010da0 <__ieee754_asinf+0x1a0>
 8010d20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d24:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8010db4 <__ieee754_asinf+0x1b4>
 8010d28:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010d2c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010db8 <__ieee754_asinf+0x1b8>
 8010d30:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010d34:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8010dbc <__ieee754_asinf+0x1bc>
 8010d38:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d40:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010d44:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010d48:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010d4c:	e76c      	b.n	8010c28 <__ieee754_asinf+0x28>
 8010d4e:	ee10 3a10 	vmov	r3, s0
 8010d52:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010d56:	f023 030f 	bic.w	r3, r3, #15
 8010d5a:	ee07 3a10 	vmov	s14, r3
 8010d5e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8010d62:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010d66:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010d6a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010d8c <__ieee754_asinf+0x18c>
 8010d6e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8010d72:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010dc8 <__ieee754_asinf+0x1c8>
 8010d76:	eee5 7a66 	vfms.f32	s15, s10, s13
 8010d7a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8010d7e:	eeb0 6a40 	vmov.f32	s12, s0
 8010d82:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010d86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010d8a:	e7aa      	b.n	8010ce2 <__ieee754_asinf+0xe2>
 8010d8c:	b33bbd2e 	.word	0xb33bbd2e
 8010d90:	3fc90fdb 	.word	0x3fc90fdb
 8010d94:	7149f2ca 	.word	0x7149f2ca
 8010d98:	3a4f7f04 	.word	0x3a4f7f04
 8010d9c:	3811ef08 	.word	0x3811ef08
 8010da0:	3e2aaaab 	.word	0x3e2aaaab
 8010da4:	bd241146 	.word	0xbd241146
 8010da8:	3e4e0aa8 	.word	0x3e4e0aa8
 8010dac:	bea6b090 	.word	0xbea6b090
 8010db0:	3d9dc62e 	.word	0x3d9dc62e
 8010db4:	bf303361 	.word	0xbf303361
 8010db8:	4001572d 	.word	0x4001572d
 8010dbc:	c019d139 	.word	0xc019d139
 8010dc0:	3f799999 	.word	0x3f799999
 8010dc4:	333bbd2e 	.word	0x333bbd2e
 8010dc8:	3f490fdb 	.word	0x3f490fdb

08010dcc <__ieee754_atan2f>:
 8010dcc:	ee10 2a90 	vmov	r2, s1
 8010dd0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010dd4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	eef0 7a40 	vmov.f32	s15, s0
 8010dde:	d806      	bhi.n	8010dee <__ieee754_atan2f+0x22>
 8010de0:	ee10 0a10 	vmov	r0, s0
 8010de4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010de8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010dec:	d904      	bls.n	8010df8 <__ieee754_atan2f+0x2c>
 8010dee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010df2:	eeb0 0a67 	vmov.f32	s0, s15
 8010df6:	bd10      	pop	{r4, pc}
 8010df8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010dfc:	d103      	bne.n	8010e06 <__ieee754_atan2f+0x3a>
 8010dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e02:	f000 b883 	b.w	8010f0c <atanf>
 8010e06:	1794      	asrs	r4, r2, #30
 8010e08:	f004 0402 	and.w	r4, r4, #2
 8010e0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010e10:	b943      	cbnz	r3, 8010e24 <__ieee754_atan2f+0x58>
 8010e12:	2c02      	cmp	r4, #2
 8010e14:	d05e      	beq.n	8010ed4 <__ieee754_atan2f+0x108>
 8010e16:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010ee8 <__ieee754_atan2f+0x11c>
 8010e1a:	2c03      	cmp	r4, #3
 8010e1c:	bf08      	it	eq
 8010e1e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010e22:	e7e6      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010e24:	b941      	cbnz	r1, 8010e38 <__ieee754_atan2f+0x6c>
 8010e26:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010eec <__ieee754_atan2f+0x120>
 8010e2a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010ef0 <__ieee754_atan2f+0x124>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	bfb8      	it	lt
 8010e32:	eef0 7a47 	vmovlt.f32	s15, s14
 8010e36:	e7dc      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010e38:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010e3c:	d110      	bne.n	8010e60 <__ieee754_atan2f+0x94>
 8010e3e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e42:	f104 34ff 	add.w	r4, r4, #4294967295
 8010e46:	d107      	bne.n	8010e58 <__ieee754_atan2f+0x8c>
 8010e48:	2c02      	cmp	r4, #2
 8010e4a:	d846      	bhi.n	8010eda <__ieee754_atan2f+0x10e>
 8010e4c:	4b29      	ldr	r3, [pc, #164]	@ (8010ef4 <__ieee754_atan2f+0x128>)
 8010e4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010e52:	edd3 7a00 	vldr	s15, [r3]
 8010e56:	e7cc      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010e58:	2c02      	cmp	r4, #2
 8010e5a:	d841      	bhi.n	8010ee0 <__ieee754_atan2f+0x114>
 8010e5c:	4b26      	ldr	r3, [pc, #152]	@ (8010ef8 <__ieee754_atan2f+0x12c>)
 8010e5e:	e7f6      	b.n	8010e4e <__ieee754_atan2f+0x82>
 8010e60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e64:	d0df      	beq.n	8010e26 <__ieee754_atan2f+0x5a>
 8010e66:	1a5b      	subs	r3, r3, r1
 8010e68:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010e6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010e70:	da1a      	bge.n	8010ea8 <__ieee754_atan2f+0xdc>
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	da01      	bge.n	8010e7a <__ieee754_atan2f+0xae>
 8010e76:	313c      	adds	r1, #60	@ 0x3c
 8010e78:	db19      	blt.n	8010eae <__ieee754_atan2f+0xe2>
 8010e7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010e7e:	f7fe fb67 	bl	800f550 <fabsf>
 8010e82:	f000 f843 	bl	8010f0c <atanf>
 8010e86:	eef0 7a40 	vmov.f32	s15, s0
 8010e8a:	2c01      	cmp	r4, #1
 8010e8c:	d012      	beq.n	8010eb4 <__ieee754_atan2f+0xe8>
 8010e8e:	2c02      	cmp	r4, #2
 8010e90:	d017      	beq.n	8010ec2 <__ieee754_atan2f+0xf6>
 8010e92:	2c00      	cmp	r4, #0
 8010e94:	d0ad      	beq.n	8010df2 <__ieee754_atan2f+0x26>
 8010e96:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010efc <__ieee754_atan2f+0x130>
 8010e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e9e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010f00 <__ieee754_atan2f+0x134>
 8010ea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ea6:	e7a4      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010ea8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010eec <__ieee754_atan2f+0x120>
 8010eac:	e7ed      	b.n	8010e8a <__ieee754_atan2f+0xbe>
 8010eae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010f04 <__ieee754_atan2f+0x138>
 8010eb2:	e7ea      	b.n	8010e8a <__ieee754_atan2f+0xbe>
 8010eb4:	ee17 3a90 	vmov	r3, s15
 8010eb8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	e797      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010ec2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010efc <__ieee754_atan2f+0x130>
 8010ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010eca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010f00 <__ieee754_atan2f+0x134>
 8010ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ed2:	e78e      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010ed4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010f00 <__ieee754_atan2f+0x134>
 8010ed8:	e78b      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010eda:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010f08 <__ieee754_atan2f+0x13c>
 8010ede:	e788      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010ee0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010f04 <__ieee754_atan2f+0x138>
 8010ee4:	e785      	b.n	8010df2 <__ieee754_atan2f+0x26>
 8010ee6:	bf00      	nop
 8010ee8:	c0490fdb 	.word	0xc0490fdb
 8010eec:	3fc90fdb 	.word	0x3fc90fdb
 8010ef0:	bfc90fdb 	.word	0xbfc90fdb
 8010ef4:	08011f94 	.word	0x08011f94
 8010ef8:	08011f88 	.word	0x08011f88
 8010efc:	33bbbd2e 	.word	0x33bbbd2e
 8010f00:	40490fdb 	.word	0x40490fdb
 8010f04:	00000000 	.word	0x00000000
 8010f08:	3f490fdb 	.word	0x3f490fdb

08010f0c <atanf>:
 8010f0c:	b538      	push	{r3, r4, r5, lr}
 8010f0e:	ee10 5a10 	vmov	r5, s0
 8010f12:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010f16:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010f1a:	eef0 7a40 	vmov.f32	s15, s0
 8010f1e:	d310      	bcc.n	8010f42 <atanf+0x36>
 8010f20:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010f24:	d904      	bls.n	8010f30 <atanf+0x24>
 8010f26:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011068 <atanf+0x15c>
 8010f34:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801106c <atanf+0x160>
 8010f38:	2d00      	cmp	r5, #0
 8010f3a:	bfc8      	it	gt
 8010f3c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010f40:	e7f3      	b.n	8010f2a <atanf+0x1e>
 8010f42:	4b4b      	ldr	r3, [pc, #300]	@ (8011070 <atanf+0x164>)
 8010f44:	429c      	cmp	r4, r3
 8010f46:	d810      	bhi.n	8010f6a <atanf+0x5e>
 8010f48:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010f4c:	d20a      	bcs.n	8010f64 <atanf+0x58>
 8010f4e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011074 <atanf+0x168>
 8010f52:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f5a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f62:	dce2      	bgt.n	8010f2a <atanf+0x1e>
 8010f64:	f04f 33ff 	mov.w	r3, #4294967295
 8010f68:	e013      	b.n	8010f92 <atanf+0x86>
 8010f6a:	f7fe faf1 	bl	800f550 <fabsf>
 8010f6e:	4b42      	ldr	r3, [pc, #264]	@ (8011078 <atanf+0x16c>)
 8010f70:	429c      	cmp	r4, r3
 8010f72:	d84f      	bhi.n	8011014 <atanf+0x108>
 8010f74:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010f78:	429c      	cmp	r4, r3
 8010f7a:	d841      	bhi.n	8011000 <atanf+0xf4>
 8010f7c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010f80:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010f84:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010f88:	2300      	movs	r3, #0
 8010f8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010f92:	1c5a      	adds	r2, r3, #1
 8010f94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010f98:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801107c <atanf+0x170>
 8010f9c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011080 <atanf+0x174>
 8010fa0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011084 <atanf+0x178>
 8010fa4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010fa8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010fac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011088 <atanf+0x17c>
 8010fb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010fb4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801108c <atanf+0x180>
 8010fb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010fbc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011090 <atanf+0x184>
 8010fc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010fc4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011094 <atanf+0x188>
 8010fc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010fcc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011098 <atanf+0x18c>
 8010fd0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010fd4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801109c <atanf+0x190>
 8010fd8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010fdc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80110a0 <atanf+0x194>
 8010fe0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010fe4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80110a4 <atanf+0x198>
 8010fe8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010fec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010ff0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010ff4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010ff8:	d121      	bne.n	801103e <atanf+0x132>
 8010ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ffe:	e794      	b.n	8010f2a <atanf+0x1e>
 8011000:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011004:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011008:	ee30 0a27 	vadd.f32	s0, s0, s15
 801100c:	2301      	movs	r3, #1
 801100e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011012:	e7be      	b.n	8010f92 <atanf+0x86>
 8011014:	4b24      	ldr	r3, [pc, #144]	@ (80110a8 <atanf+0x19c>)
 8011016:	429c      	cmp	r4, r3
 8011018:	d80b      	bhi.n	8011032 <atanf+0x126>
 801101a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801101e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011022:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011026:	2302      	movs	r3, #2
 8011028:	ee70 6a67 	vsub.f32	s13, s0, s15
 801102c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011030:	e7af      	b.n	8010f92 <atanf+0x86>
 8011032:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011036:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801103a:	2303      	movs	r3, #3
 801103c:	e7a9      	b.n	8010f92 <atanf+0x86>
 801103e:	4a1b      	ldr	r2, [pc, #108]	@ (80110ac <atanf+0x1a0>)
 8011040:	491b      	ldr	r1, [pc, #108]	@ (80110b0 <atanf+0x1a4>)
 8011042:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011046:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801104a:	edd3 6a00 	vldr	s13, [r3]
 801104e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011052:	2d00      	cmp	r5, #0
 8011054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011058:	edd2 7a00 	vldr	s15, [r2]
 801105c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011060:	bfb8      	it	lt
 8011062:	eef1 7a67 	vneglt.f32	s15, s15
 8011066:	e760      	b.n	8010f2a <atanf+0x1e>
 8011068:	bfc90fdb 	.word	0xbfc90fdb
 801106c:	3fc90fdb 	.word	0x3fc90fdb
 8011070:	3edfffff 	.word	0x3edfffff
 8011074:	7149f2ca 	.word	0x7149f2ca
 8011078:	3f97ffff 	.word	0x3f97ffff
 801107c:	3c8569d7 	.word	0x3c8569d7
 8011080:	3d4bda59 	.word	0x3d4bda59
 8011084:	bd6ef16b 	.word	0xbd6ef16b
 8011088:	3d886b35 	.word	0x3d886b35
 801108c:	3dba2e6e 	.word	0x3dba2e6e
 8011090:	3e124925 	.word	0x3e124925
 8011094:	3eaaaaab 	.word	0x3eaaaaab
 8011098:	bd15a221 	.word	0xbd15a221
 801109c:	bd9d8795 	.word	0xbd9d8795
 80110a0:	bde38e38 	.word	0xbde38e38
 80110a4:	be4ccccd 	.word	0xbe4ccccd
 80110a8:	401bffff 	.word	0x401bffff
 80110ac:	08011fb0 	.word	0x08011fb0
 80110b0:	08011fa0 	.word	0x08011fa0
 80110b4:	00000000 	.word	0x00000000

080110b8 <scalbn>:
 80110b8:	b570      	push	{r4, r5, r6, lr}
 80110ba:	ec55 4b10 	vmov	r4, r5, d0
 80110be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80110c2:	4606      	mov	r6, r0
 80110c4:	462b      	mov	r3, r5
 80110c6:	b991      	cbnz	r1, 80110ee <scalbn+0x36>
 80110c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80110cc:	4323      	orrs	r3, r4
 80110ce:	d03d      	beq.n	801114c <scalbn+0x94>
 80110d0:	4b35      	ldr	r3, [pc, #212]	@ (80111a8 <scalbn+0xf0>)
 80110d2:	4620      	mov	r0, r4
 80110d4:	4629      	mov	r1, r5
 80110d6:	2200      	movs	r2, #0
 80110d8:	f7ef faae 	bl	8000638 <__aeabi_dmul>
 80110dc:	4b33      	ldr	r3, [pc, #204]	@ (80111ac <scalbn+0xf4>)
 80110de:	429e      	cmp	r6, r3
 80110e0:	4604      	mov	r4, r0
 80110e2:	460d      	mov	r5, r1
 80110e4:	da0f      	bge.n	8011106 <scalbn+0x4e>
 80110e6:	a328      	add	r3, pc, #160	@ (adr r3, 8011188 <scalbn+0xd0>)
 80110e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ec:	e01e      	b.n	801112c <scalbn+0x74>
 80110ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80110f2:	4291      	cmp	r1, r2
 80110f4:	d10b      	bne.n	801110e <scalbn+0x56>
 80110f6:	4622      	mov	r2, r4
 80110f8:	4620      	mov	r0, r4
 80110fa:	4629      	mov	r1, r5
 80110fc:	f7ef f8e6 	bl	80002cc <__adddf3>
 8011100:	4604      	mov	r4, r0
 8011102:	460d      	mov	r5, r1
 8011104:	e022      	b.n	801114c <scalbn+0x94>
 8011106:	460b      	mov	r3, r1
 8011108:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801110c:	3936      	subs	r1, #54	@ 0x36
 801110e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011112:	4296      	cmp	r6, r2
 8011114:	dd0d      	ble.n	8011132 <scalbn+0x7a>
 8011116:	2d00      	cmp	r5, #0
 8011118:	a11d      	add	r1, pc, #116	@ (adr r1, 8011190 <scalbn+0xd8>)
 801111a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801111e:	da02      	bge.n	8011126 <scalbn+0x6e>
 8011120:	a11d      	add	r1, pc, #116	@ (adr r1, 8011198 <scalbn+0xe0>)
 8011122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011126:	a31a      	add	r3, pc, #104	@ (adr r3, 8011190 <scalbn+0xd8>)
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	f7ef fa84 	bl	8000638 <__aeabi_dmul>
 8011130:	e7e6      	b.n	8011100 <scalbn+0x48>
 8011132:	1872      	adds	r2, r6, r1
 8011134:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011138:	428a      	cmp	r2, r1
 801113a:	dcec      	bgt.n	8011116 <scalbn+0x5e>
 801113c:	2a00      	cmp	r2, #0
 801113e:	dd08      	ble.n	8011152 <scalbn+0x9a>
 8011140:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011144:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011148:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801114c:	ec45 4b10 	vmov	d0, r4, r5
 8011150:	bd70      	pop	{r4, r5, r6, pc}
 8011152:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011156:	da08      	bge.n	801116a <scalbn+0xb2>
 8011158:	2d00      	cmp	r5, #0
 801115a:	a10b      	add	r1, pc, #44	@ (adr r1, 8011188 <scalbn+0xd0>)
 801115c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011160:	dac1      	bge.n	80110e6 <scalbn+0x2e>
 8011162:	a10f      	add	r1, pc, #60	@ (adr r1, 80111a0 <scalbn+0xe8>)
 8011164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011168:	e7bd      	b.n	80110e6 <scalbn+0x2e>
 801116a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801116e:	3236      	adds	r2, #54	@ 0x36
 8011170:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011174:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011178:	4620      	mov	r0, r4
 801117a:	4b0d      	ldr	r3, [pc, #52]	@ (80111b0 <scalbn+0xf8>)
 801117c:	4629      	mov	r1, r5
 801117e:	2200      	movs	r2, #0
 8011180:	e7d4      	b.n	801112c <scalbn+0x74>
 8011182:	bf00      	nop
 8011184:	f3af 8000 	nop.w
 8011188:	c2f8f359 	.word	0xc2f8f359
 801118c:	01a56e1f 	.word	0x01a56e1f
 8011190:	8800759c 	.word	0x8800759c
 8011194:	7e37e43c 	.word	0x7e37e43c
 8011198:	8800759c 	.word	0x8800759c
 801119c:	fe37e43c 	.word	0xfe37e43c
 80111a0:	c2f8f359 	.word	0xc2f8f359
 80111a4:	81a56e1f 	.word	0x81a56e1f
 80111a8:	43500000 	.word	0x43500000
 80111ac:	ffff3cb0 	.word	0xffff3cb0
 80111b0:	3c900000 	.word	0x3c900000

080111b4 <with_errno>:
 80111b4:	b510      	push	{r4, lr}
 80111b6:	ed2d 8b02 	vpush	{d8}
 80111ba:	eeb0 8a40 	vmov.f32	s16, s0
 80111be:	eef0 8a60 	vmov.f32	s17, s1
 80111c2:	4604      	mov	r4, r0
 80111c4:	f7fb ffe4 	bl	800d190 <__errno>
 80111c8:	eeb0 0a48 	vmov.f32	s0, s16
 80111cc:	eef0 0a68 	vmov.f32	s1, s17
 80111d0:	ecbd 8b02 	vpop	{d8}
 80111d4:	6004      	str	r4, [r0, #0]
 80111d6:	bd10      	pop	{r4, pc}

080111d8 <xflow>:
 80111d8:	4603      	mov	r3, r0
 80111da:	b507      	push	{r0, r1, r2, lr}
 80111dc:	ec51 0b10 	vmov	r0, r1, d0
 80111e0:	b183      	cbz	r3, 8011204 <xflow+0x2c>
 80111e2:	4602      	mov	r2, r0
 80111e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80111e8:	e9cd 2300 	strd	r2, r3, [sp]
 80111ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111f0:	f7ef fa22 	bl	8000638 <__aeabi_dmul>
 80111f4:	ec41 0b10 	vmov	d0, r0, r1
 80111f8:	2022      	movs	r0, #34	@ 0x22
 80111fa:	b003      	add	sp, #12
 80111fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011200:	f7ff bfd8 	b.w	80111b4 <with_errno>
 8011204:	4602      	mov	r2, r0
 8011206:	460b      	mov	r3, r1
 8011208:	e7ee      	b.n	80111e8 <xflow+0x10>
 801120a:	0000      	movs	r0, r0
 801120c:	0000      	movs	r0, r0
	...

08011210 <__math_uflow>:
 8011210:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011218 <__math_uflow+0x8>
 8011214:	f7ff bfe0 	b.w	80111d8 <xflow>
 8011218:	00000000 	.word	0x00000000
 801121c:	10000000 	.word	0x10000000

08011220 <__math_oflow>:
 8011220:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011228 <__math_oflow+0x8>
 8011224:	f7ff bfd8 	b.w	80111d8 <xflow>
 8011228:	00000000 	.word	0x00000000
 801122c:	70000000 	.word	0x70000000

08011230 <__kernel_rem_pio2>:
 8011230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	ed2d 8b02 	vpush	{d8}
 8011238:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801123c:	f112 0f14 	cmn.w	r2, #20
 8011240:	9306      	str	r3, [sp, #24]
 8011242:	9104      	str	r1, [sp, #16]
 8011244:	4bbe      	ldr	r3, [pc, #760]	@ (8011540 <__kernel_rem_pio2+0x310>)
 8011246:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011248:	9008      	str	r0, [sp, #32]
 801124a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801124e:	9300      	str	r3, [sp, #0]
 8011250:	9b06      	ldr	r3, [sp, #24]
 8011252:	f103 33ff 	add.w	r3, r3, #4294967295
 8011256:	bfa8      	it	ge
 8011258:	1ed4      	subge	r4, r2, #3
 801125a:	9305      	str	r3, [sp, #20]
 801125c:	bfb2      	itee	lt
 801125e:	2400      	movlt	r4, #0
 8011260:	2318      	movge	r3, #24
 8011262:	fb94 f4f3 	sdivge	r4, r4, r3
 8011266:	f06f 0317 	mvn.w	r3, #23
 801126a:	fb04 3303 	mla	r3, r4, r3, r3
 801126e:	eb03 0b02 	add.w	fp, r3, r2
 8011272:	9b00      	ldr	r3, [sp, #0]
 8011274:	9a05      	ldr	r2, [sp, #20]
 8011276:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011530 <__kernel_rem_pio2+0x300>
 801127a:	eb03 0802 	add.w	r8, r3, r2
 801127e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011280:	1aa7      	subs	r7, r4, r2
 8011282:	ae20      	add	r6, sp, #128	@ 0x80
 8011284:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011288:	2500      	movs	r5, #0
 801128a:	4545      	cmp	r5, r8
 801128c:	dd13      	ble.n	80112b6 <__kernel_rem_pio2+0x86>
 801128e:	9b06      	ldr	r3, [sp, #24]
 8011290:	aa20      	add	r2, sp, #128	@ 0x80
 8011292:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011296:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801129a:	f04f 0800 	mov.w	r8, #0
 801129e:	9b00      	ldr	r3, [sp, #0]
 80112a0:	4598      	cmp	r8, r3
 80112a2:	dc31      	bgt.n	8011308 <__kernel_rem_pio2+0xd8>
 80112a4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011530 <__kernel_rem_pio2+0x300>
 80112a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80112ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112b0:	462f      	mov	r7, r5
 80112b2:	2600      	movs	r6, #0
 80112b4:	e01b      	b.n	80112ee <__kernel_rem_pio2+0xbe>
 80112b6:	42ef      	cmn	r7, r5
 80112b8:	d407      	bmi.n	80112ca <__kernel_rem_pio2+0x9a>
 80112ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80112be:	f7ef f951 	bl	8000564 <__aeabi_i2d>
 80112c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80112c6:	3501      	adds	r5, #1
 80112c8:	e7df      	b.n	801128a <__kernel_rem_pio2+0x5a>
 80112ca:	ec51 0b18 	vmov	r0, r1, d8
 80112ce:	e7f8      	b.n	80112c2 <__kernel_rem_pio2+0x92>
 80112d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80112d8:	f7ef f9ae 	bl	8000638 <__aeabi_dmul>
 80112dc:	4602      	mov	r2, r0
 80112de:	460b      	mov	r3, r1
 80112e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112e4:	f7ee fff2 	bl	80002cc <__adddf3>
 80112e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112ec:	3601      	adds	r6, #1
 80112ee:	9b05      	ldr	r3, [sp, #20]
 80112f0:	429e      	cmp	r6, r3
 80112f2:	f1a7 0708 	sub.w	r7, r7, #8
 80112f6:	ddeb      	ble.n	80112d0 <__kernel_rem_pio2+0xa0>
 80112f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112fc:	f108 0801 	add.w	r8, r8, #1
 8011300:	ecaa 7b02 	vstmia	sl!, {d7}
 8011304:	3508      	adds	r5, #8
 8011306:	e7ca      	b.n	801129e <__kernel_rem_pio2+0x6e>
 8011308:	9b00      	ldr	r3, [sp, #0]
 801130a:	f8dd 8000 	ldr.w	r8, [sp]
 801130e:	aa0c      	add	r2, sp, #48	@ 0x30
 8011310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011314:	930a      	str	r3, [sp, #40]	@ 0x28
 8011316:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011318:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801131c:	9309      	str	r3, [sp, #36]	@ 0x24
 801131e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011324:	ab98      	add	r3, sp, #608	@ 0x260
 8011326:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801132a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801132e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011332:	ac0c      	add	r4, sp, #48	@ 0x30
 8011334:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011336:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801133a:	46a1      	mov	r9, r4
 801133c:	46c2      	mov	sl, r8
 801133e:	f1ba 0f00 	cmp.w	sl, #0
 8011342:	f1a5 0508 	sub.w	r5, r5, #8
 8011346:	dc77      	bgt.n	8011438 <__kernel_rem_pio2+0x208>
 8011348:	4658      	mov	r0, fp
 801134a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801134e:	f7ff feb3 	bl	80110b8 <scalbn>
 8011352:	ec57 6b10 	vmov	r6, r7, d0
 8011356:	2200      	movs	r2, #0
 8011358:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801135c:	4630      	mov	r0, r6
 801135e:	4639      	mov	r1, r7
 8011360:	f7ef f96a 	bl	8000638 <__aeabi_dmul>
 8011364:	ec41 0b10 	vmov	d0, r0, r1
 8011368:	f000 faba 	bl	80118e0 <floor>
 801136c:	4b75      	ldr	r3, [pc, #468]	@ (8011544 <__kernel_rem_pio2+0x314>)
 801136e:	ec51 0b10 	vmov	r0, r1, d0
 8011372:	2200      	movs	r2, #0
 8011374:	f7ef f960 	bl	8000638 <__aeabi_dmul>
 8011378:	4602      	mov	r2, r0
 801137a:	460b      	mov	r3, r1
 801137c:	4630      	mov	r0, r6
 801137e:	4639      	mov	r1, r7
 8011380:	f7ee ffa2 	bl	80002c8 <__aeabi_dsub>
 8011384:	460f      	mov	r7, r1
 8011386:	4606      	mov	r6, r0
 8011388:	f7ef fc06 	bl	8000b98 <__aeabi_d2iz>
 801138c:	9002      	str	r0, [sp, #8]
 801138e:	f7ef f8e9 	bl	8000564 <__aeabi_i2d>
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4630      	mov	r0, r6
 8011398:	4639      	mov	r1, r7
 801139a:	f7ee ff95 	bl	80002c8 <__aeabi_dsub>
 801139e:	f1bb 0f00 	cmp.w	fp, #0
 80113a2:	4606      	mov	r6, r0
 80113a4:	460f      	mov	r7, r1
 80113a6:	dd6c      	ble.n	8011482 <__kernel_rem_pio2+0x252>
 80113a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80113ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80113ae:	9d02      	ldr	r5, [sp, #8]
 80113b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113b4:	f1cb 0018 	rsb	r0, fp, #24
 80113b8:	fa43 f200 	asr.w	r2, r3, r0
 80113bc:	4415      	add	r5, r2
 80113be:	4082      	lsls	r2, r0
 80113c0:	1a9b      	subs	r3, r3, r2
 80113c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80113c4:	9502      	str	r5, [sp, #8]
 80113c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80113ca:	f1cb 0217 	rsb	r2, fp, #23
 80113ce:	fa43 f902 	asr.w	r9, r3, r2
 80113d2:	f1b9 0f00 	cmp.w	r9, #0
 80113d6:	dd64      	ble.n	80114a2 <__kernel_rem_pio2+0x272>
 80113d8:	9b02      	ldr	r3, [sp, #8]
 80113da:	2200      	movs	r2, #0
 80113dc:	3301      	adds	r3, #1
 80113de:	9302      	str	r3, [sp, #8]
 80113e0:	4615      	mov	r5, r2
 80113e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80113e6:	4590      	cmp	r8, r2
 80113e8:	f300 80b8 	bgt.w	801155c <__kernel_rem_pio2+0x32c>
 80113ec:	f1bb 0f00 	cmp.w	fp, #0
 80113f0:	dd07      	ble.n	8011402 <__kernel_rem_pio2+0x1d2>
 80113f2:	f1bb 0f01 	cmp.w	fp, #1
 80113f6:	f000 80bf 	beq.w	8011578 <__kernel_rem_pio2+0x348>
 80113fa:	f1bb 0f02 	cmp.w	fp, #2
 80113fe:	f000 80c6 	beq.w	801158e <__kernel_rem_pio2+0x35e>
 8011402:	f1b9 0f02 	cmp.w	r9, #2
 8011406:	d14c      	bne.n	80114a2 <__kernel_rem_pio2+0x272>
 8011408:	4632      	mov	r2, r6
 801140a:	463b      	mov	r3, r7
 801140c:	494e      	ldr	r1, [pc, #312]	@ (8011548 <__kernel_rem_pio2+0x318>)
 801140e:	2000      	movs	r0, #0
 8011410:	f7ee ff5a 	bl	80002c8 <__aeabi_dsub>
 8011414:	4606      	mov	r6, r0
 8011416:	460f      	mov	r7, r1
 8011418:	2d00      	cmp	r5, #0
 801141a:	d042      	beq.n	80114a2 <__kernel_rem_pio2+0x272>
 801141c:	4658      	mov	r0, fp
 801141e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011538 <__kernel_rem_pio2+0x308>
 8011422:	f7ff fe49 	bl	80110b8 <scalbn>
 8011426:	4630      	mov	r0, r6
 8011428:	4639      	mov	r1, r7
 801142a:	ec53 2b10 	vmov	r2, r3, d0
 801142e:	f7ee ff4b 	bl	80002c8 <__aeabi_dsub>
 8011432:	4606      	mov	r6, r0
 8011434:	460f      	mov	r7, r1
 8011436:	e034      	b.n	80114a2 <__kernel_rem_pio2+0x272>
 8011438:	4b44      	ldr	r3, [pc, #272]	@ (801154c <__kernel_rem_pio2+0x31c>)
 801143a:	2200      	movs	r2, #0
 801143c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011440:	f7ef f8fa 	bl	8000638 <__aeabi_dmul>
 8011444:	f7ef fba8 	bl	8000b98 <__aeabi_d2iz>
 8011448:	f7ef f88c 	bl	8000564 <__aeabi_i2d>
 801144c:	4b40      	ldr	r3, [pc, #256]	@ (8011550 <__kernel_rem_pio2+0x320>)
 801144e:	2200      	movs	r2, #0
 8011450:	4606      	mov	r6, r0
 8011452:	460f      	mov	r7, r1
 8011454:	f7ef f8f0 	bl	8000638 <__aeabi_dmul>
 8011458:	4602      	mov	r2, r0
 801145a:	460b      	mov	r3, r1
 801145c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011460:	f7ee ff32 	bl	80002c8 <__aeabi_dsub>
 8011464:	f7ef fb98 	bl	8000b98 <__aeabi_d2iz>
 8011468:	e9d5 2300 	ldrd	r2, r3, [r5]
 801146c:	f849 0b04 	str.w	r0, [r9], #4
 8011470:	4639      	mov	r1, r7
 8011472:	4630      	mov	r0, r6
 8011474:	f7ee ff2a 	bl	80002cc <__adddf3>
 8011478:	f10a 3aff 	add.w	sl, sl, #4294967295
 801147c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011480:	e75d      	b.n	801133e <__kernel_rem_pio2+0x10e>
 8011482:	d107      	bne.n	8011494 <__kernel_rem_pio2+0x264>
 8011484:	f108 33ff 	add.w	r3, r8, #4294967295
 8011488:	aa0c      	add	r2, sp, #48	@ 0x30
 801148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801148e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011492:	e79e      	b.n	80113d2 <__kernel_rem_pio2+0x1a2>
 8011494:	4b2f      	ldr	r3, [pc, #188]	@ (8011554 <__kernel_rem_pio2+0x324>)
 8011496:	2200      	movs	r2, #0
 8011498:	f7ef fb54 	bl	8000b44 <__aeabi_dcmpge>
 801149c:	2800      	cmp	r0, #0
 801149e:	d143      	bne.n	8011528 <__kernel_rem_pio2+0x2f8>
 80114a0:	4681      	mov	r9, r0
 80114a2:	2200      	movs	r2, #0
 80114a4:	2300      	movs	r3, #0
 80114a6:	4630      	mov	r0, r6
 80114a8:	4639      	mov	r1, r7
 80114aa:	f7ef fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	f000 80bf 	beq.w	8011632 <__kernel_rem_pio2+0x402>
 80114b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80114b8:	2200      	movs	r2, #0
 80114ba:	9900      	ldr	r1, [sp, #0]
 80114bc:	428b      	cmp	r3, r1
 80114be:	da6e      	bge.n	801159e <__kernel_rem_pio2+0x36e>
 80114c0:	2a00      	cmp	r2, #0
 80114c2:	f000 8089 	beq.w	80115d8 <__kernel_rem_pio2+0x3a8>
 80114c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80114ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80114cc:	f1ab 0b18 	sub.w	fp, fp, #24
 80114d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d0f6      	beq.n	80114c6 <__kernel_rem_pio2+0x296>
 80114d8:	4658      	mov	r0, fp
 80114da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011538 <__kernel_rem_pio2+0x308>
 80114de:	f7ff fdeb 	bl	80110b8 <scalbn>
 80114e2:	f108 0301 	add.w	r3, r8, #1
 80114e6:	00da      	lsls	r2, r3, #3
 80114e8:	9205      	str	r2, [sp, #20]
 80114ea:	ec55 4b10 	vmov	r4, r5, d0
 80114ee:	aa70      	add	r2, sp, #448	@ 0x1c0
 80114f0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801154c <__kernel_rem_pio2+0x31c>
 80114f4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80114f8:	4646      	mov	r6, r8
 80114fa:	f04f 0a00 	mov.w	sl, #0
 80114fe:	2e00      	cmp	r6, #0
 8011500:	f280 80cf 	bge.w	80116a2 <__kernel_rem_pio2+0x472>
 8011504:	4644      	mov	r4, r8
 8011506:	2c00      	cmp	r4, #0
 8011508:	f2c0 80fd 	blt.w	8011706 <__kernel_rem_pio2+0x4d6>
 801150c:	4b12      	ldr	r3, [pc, #72]	@ (8011558 <__kernel_rem_pio2+0x328>)
 801150e:	461f      	mov	r7, r3
 8011510:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011516:	9306      	str	r3, [sp, #24]
 8011518:	f04f 0a00 	mov.w	sl, #0
 801151c:	f04f 0b00 	mov.w	fp, #0
 8011520:	2600      	movs	r6, #0
 8011522:	eba8 0504 	sub.w	r5, r8, r4
 8011526:	e0e2      	b.n	80116ee <__kernel_rem_pio2+0x4be>
 8011528:	f04f 0902 	mov.w	r9, #2
 801152c:	e754      	b.n	80113d8 <__kernel_rem_pio2+0x1a8>
 801152e:	bf00      	nop
	...
 801153c:	3ff00000 	.word	0x3ff00000
 8011540:	08012000 	.word	0x08012000
 8011544:	40200000 	.word	0x40200000
 8011548:	3ff00000 	.word	0x3ff00000
 801154c:	3e700000 	.word	0x3e700000
 8011550:	41700000 	.word	0x41700000
 8011554:	3fe00000 	.word	0x3fe00000
 8011558:	08011fc0 	.word	0x08011fc0
 801155c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011560:	b945      	cbnz	r5, 8011574 <__kernel_rem_pio2+0x344>
 8011562:	b123      	cbz	r3, 801156e <__kernel_rem_pio2+0x33e>
 8011564:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011568:	f844 3c04 	str.w	r3, [r4, #-4]
 801156c:	2301      	movs	r3, #1
 801156e:	3201      	adds	r2, #1
 8011570:	461d      	mov	r5, r3
 8011572:	e738      	b.n	80113e6 <__kernel_rem_pio2+0x1b6>
 8011574:	1acb      	subs	r3, r1, r3
 8011576:	e7f7      	b.n	8011568 <__kernel_rem_pio2+0x338>
 8011578:	f108 32ff 	add.w	r2, r8, #4294967295
 801157c:	ab0c      	add	r3, sp, #48	@ 0x30
 801157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011582:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011586:	a90c      	add	r1, sp, #48	@ 0x30
 8011588:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801158c:	e739      	b.n	8011402 <__kernel_rem_pio2+0x1d2>
 801158e:	f108 32ff 	add.w	r2, r8, #4294967295
 8011592:	ab0c      	add	r3, sp, #48	@ 0x30
 8011594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011598:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801159c:	e7f3      	b.n	8011586 <__kernel_rem_pio2+0x356>
 801159e:	a90c      	add	r1, sp, #48	@ 0x30
 80115a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80115a4:	3b01      	subs	r3, #1
 80115a6:	430a      	orrs	r2, r1
 80115a8:	e787      	b.n	80114ba <__kernel_rem_pio2+0x28a>
 80115aa:	3401      	adds	r4, #1
 80115ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80115b0:	2a00      	cmp	r2, #0
 80115b2:	d0fa      	beq.n	80115aa <__kernel_rem_pio2+0x37a>
 80115b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80115ba:	eb0d 0503 	add.w	r5, sp, r3
 80115be:	9b06      	ldr	r3, [sp, #24]
 80115c0:	aa20      	add	r2, sp, #128	@ 0x80
 80115c2:	4443      	add	r3, r8
 80115c4:	f108 0701 	add.w	r7, r8, #1
 80115c8:	3d98      	subs	r5, #152	@ 0x98
 80115ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80115ce:	4444      	add	r4, r8
 80115d0:	42bc      	cmp	r4, r7
 80115d2:	da04      	bge.n	80115de <__kernel_rem_pio2+0x3ae>
 80115d4:	46a0      	mov	r8, r4
 80115d6:	e6a2      	b.n	801131e <__kernel_rem_pio2+0xee>
 80115d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115da:	2401      	movs	r4, #1
 80115dc:	e7e6      	b.n	80115ac <__kernel_rem_pio2+0x37c>
 80115de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80115e4:	f7ee ffbe 	bl	8000564 <__aeabi_i2d>
 80115e8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80118b0 <__kernel_rem_pio2+0x680>
 80115ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80115f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80115f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80115f8:	46b2      	mov	sl, r6
 80115fa:	f04f 0800 	mov.w	r8, #0
 80115fe:	9b05      	ldr	r3, [sp, #20]
 8011600:	4598      	cmp	r8, r3
 8011602:	dd05      	ble.n	8011610 <__kernel_rem_pio2+0x3e0>
 8011604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011608:	3701      	adds	r7, #1
 801160a:	eca5 7b02 	vstmia	r5!, {d7}
 801160e:	e7df      	b.n	80115d0 <__kernel_rem_pio2+0x3a0>
 8011610:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011614:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011618:	f7ef f80e 	bl	8000638 <__aeabi_dmul>
 801161c:	4602      	mov	r2, r0
 801161e:	460b      	mov	r3, r1
 8011620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011624:	f7ee fe52 	bl	80002cc <__adddf3>
 8011628:	f108 0801 	add.w	r8, r8, #1
 801162c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011630:	e7e5      	b.n	80115fe <__kernel_rem_pio2+0x3ce>
 8011632:	f1cb 0000 	rsb	r0, fp, #0
 8011636:	ec47 6b10 	vmov	d0, r6, r7
 801163a:	f7ff fd3d 	bl	80110b8 <scalbn>
 801163e:	ec55 4b10 	vmov	r4, r5, d0
 8011642:	4b9d      	ldr	r3, [pc, #628]	@ (80118b8 <__kernel_rem_pio2+0x688>)
 8011644:	2200      	movs	r2, #0
 8011646:	4620      	mov	r0, r4
 8011648:	4629      	mov	r1, r5
 801164a:	f7ef fa7b 	bl	8000b44 <__aeabi_dcmpge>
 801164e:	b300      	cbz	r0, 8011692 <__kernel_rem_pio2+0x462>
 8011650:	4b9a      	ldr	r3, [pc, #616]	@ (80118bc <__kernel_rem_pio2+0x68c>)
 8011652:	2200      	movs	r2, #0
 8011654:	4620      	mov	r0, r4
 8011656:	4629      	mov	r1, r5
 8011658:	f7ee ffee 	bl	8000638 <__aeabi_dmul>
 801165c:	f7ef fa9c 	bl	8000b98 <__aeabi_d2iz>
 8011660:	4606      	mov	r6, r0
 8011662:	f7ee ff7f 	bl	8000564 <__aeabi_i2d>
 8011666:	4b94      	ldr	r3, [pc, #592]	@ (80118b8 <__kernel_rem_pio2+0x688>)
 8011668:	2200      	movs	r2, #0
 801166a:	f7ee ffe5 	bl	8000638 <__aeabi_dmul>
 801166e:	460b      	mov	r3, r1
 8011670:	4602      	mov	r2, r0
 8011672:	4629      	mov	r1, r5
 8011674:	4620      	mov	r0, r4
 8011676:	f7ee fe27 	bl	80002c8 <__aeabi_dsub>
 801167a:	f7ef fa8d 	bl	8000b98 <__aeabi_d2iz>
 801167e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011680:	f10b 0b18 	add.w	fp, fp, #24
 8011684:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011688:	f108 0801 	add.w	r8, r8, #1
 801168c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011690:	e722      	b.n	80114d8 <__kernel_rem_pio2+0x2a8>
 8011692:	4620      	mov	r0, r4
 8011694:	4629      	mov	r1, r5
 8011696:	f7ef fa7f 	bl	8000b98 <__aeabi_d2iz>
 801169a:	ab0c      	add	r3, sp, #48	@ 0x30
 801169c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80116a0:	e71a      	b.n	80114d8 <__kernel_rem_pio2+0x2a8>
 80116a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80116a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80116a8:	f7ee ff5c 	bl	8000564 <__aeabi_i2d>
 80116ac:	4622      	mov	r2, r4
 80116ae:	462b      	mov	r3, r5
 80116b0:	f7ee ffc2 	bl	8000638 <__aeabi_dmul>
 80116b4:	4652      	mov	r2, sl
 80116b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80116ba:	465b      	mov	r3, fp
 80116bc:	4620      	mov	r0, r4
 80116be:	4629      	mov	r1, r5
 80116c0:	f7ee ffba 	bl	8000638 <__aeabi_dmul>
 80116c4:	3e01      	subs	r6, #1
 80116c6:	4604      	mov	r4, r0
 80116c8:	460d      	mov	r5, r1
 80116ca:	e718      	b.n	80114fe <__kernel_rem_pio2+0x2ce>
 80116cc:	9906      	ldr	r1, [sp, #24]
 80116ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80116d2:	9106      	str	r1, [sp, #24]
 80116d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80116d8:	f7ee ffae 	bl	8000638 <__aeabi_dmul>
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	4650      	mov	r0, sl
 80116e2:	4659      	mov	r1, fp
 80116e4:	f7ee fdf2 	bl	80002cc <__adddf3>
 80116e8:	3601      	adds	r6, #1
 80116ea:	4682      	mov	sl, r0
 80116ec:	468b      	mov	fp, r1
 80116ee:	9b00      	ldr	r3, [sp, #0]
 80116f0:	429e      	cmp	r6, r3
 80116f2:	dc01      	bgt.n	80116f8 <__kernel_rem_pio2+0x4c8>
 80116f4:	42b5      	cmp	r5, r6
 80116f6:	dae9      	bge.n	80116cc <__kernel_rem_pio2+0x49c>
 80116f8:	ab48      	add	r3, sp, #288	@ 0x120
 80116fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80116fe:	e9c5 ab00 	strd	sl, fp, [r5]
 8011702:	3c01      	subs	r4, #1
 8011704:	e6ff      	b.n	8011506 <__kernel_rem_pio2+0x2d6>
 8011706:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011708:	2b02      	cmp	r3, #2
 801170a:	dc0b      	bgt.n	8011724 <__kernel_rem_pio2+0x4f4>
 801170c:	2b00      	cmp	r3, #0
 801170e:	dc39      	bgt.n	8011784 <__kernel_rem_pio2+0x554>
 8011710:	d05d      	beq.n	80117ce <__kernel_rem_pio2+0x59e>
 8011712:	9b02      	ldr	r3, [sp, #8]
 8011714:	f003 0007 	and.w	r0, r3, #7
 8011718:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801171c:	ecbd 8b02 	vpop	{d8}
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011726:	2b03      	cmp	r3, #3
 8011728:	d1f3      	bne.n	8011712 <__kernel_rem_pio2+0x4e2>
 801172a:	9b05      	ldr	r3, [sp, #20]
 801172c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011730:	eb0d 0403 	add.w	r4, sp, r3
 8011734:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011738:	4625      	mov	r5, r4
 801173a:	46c2      	mov	sl, r8
 801173c:	f1ba 0f00 	cmp.w	sl, #0
 8011740:	f1a5 0508 	sub.w	r5, r5, #8
 8011744:	dc6b      	bgt.n	801181e <__kernel_rem_pio2+0x5ee>
 8011746:	4645      	mov	r5, r8
 8011748:	2d01      	cmp	r5, #1
 801174a:	f1a4 0408 	sub.w	r4, r4, #8
 801174e:	f300 8087 	bgt.w	8011860 <__kernel_rem_pio2+0x630>
 8011752:	9c05      	ldr	r4, [sp, #20]
 8011754:	ab48      	add	r3, sp, #288	@ 0x120
 8011756:	441c      	add	r4, r3
 8011758:	2000      	movs	r0, #0
 801175a:	2100      	movs	r1, #0
 801175c:	f1b8 0f01 	cmp.w	r8, #1
 8011760:	f300 809c 	bgt.w	801189c <__kernel_rem_pio2+0x66c>
 8011764:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011768:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801176c:	f1b9 0f00 	cmp.w	r9, #0
 8011770:	f040 80a6 	bne.w	80118c0 <__kernel_rem_pio2+0x690>
 8011774:	9b04      	ldr	r3, [sp, #16]
 8011776:	e9c3 7800 	strd	r7, r8, [r3]
 801177a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801177e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011782:	e7c6      	b.n	8011712 <__kernel_rem_pio2+0x4e2>
 8011784:	9d05      	ldr	r5, [sp, #20]
 8011786:	ab48      	add	r3, sp, #288	@ 0x120
 8011788:	441d      	add	r5, r3
 801178a:	4644      	mov	r4, r8
 801178c:	2000      	movs	r0, #0
 801178e:	2100      	movs	r1, #0
 8011790:	2c00      	cmp	r4, #0
 8011792:	da35      	bge.n	8011800 <__kernel_rem_pio2+0x5d0>
 8011794:	f1b9 0f00 	cmp.w	r9, #0
 8011798:	d038      	beq.n	801180c <__kernel_rem_pio2+0x5dc>
 801179a:	4602      	mov	r2, r0
 801179c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80117a0:	9c04      	ldr	r4, [sp, #16]
 80117a2:	e9c4 2300 	strd	r2, r3, [r4]
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80117ae:	f7ee fd8b 	bl	80002c8 <__aeabi_dsub>
 80117b2:	ad4a      	add	r5, sp, #296	@ 0x128
 80117b4:	2401      	movs	r4, #1
 80117b6:	45a0      	cmp	r8, r4
 80117b8:	da2b      	bge.n	8011812 <__kernel_rem_pio2+0x5e2>
 80117ba:	f1b9 0f00 	cmp.w	r9, #0
 80117be:	d002      	beq.n	80117c6 <__kernel_rem_pio2+0x596>
 80117c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80117c4:	4619      	mov	r1, r3
 80117c6:	9b04      	ldr	r3, [sp, #16]
 80117c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80117cc:	e7a1      	b.n	8011712 <__kernel_rem_pio2+0x4e2>
 80117ce:	9c05      	ldr	r4, [sp, #20]
 80117d0:	ab48      	add	r3, sp, #288	@ 0x120
 80117d2:	441c      	add	r4, r3
 80117d4:	2000      	movs	r0, #0
 80117d6:	2100      	movs	r1, #0
 80117d8:	f1b8 0f00 	cmp.w	r8, #0
 80117dc:	da09      	bge.n	80117f2 <__kernel_rem_pio2+0x5c2>
 80117de:	f1b9 0f00 	cmp.w	r9, #0
 80117e2:	d002      	beq.n	80117ea <__kernel_rem_pio2+0x5ba>
 80117e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80117e8:	4619      	mov	r1, r3
 80117ea:	9b04      	ldr	r3, [sp, #16]
 80117ec:	e9c3 0100 	strd	r0, r1, [r3]
 80117f0:	e78f      	b.n	8011712 <__kernel_rem_pio2+0x4e2>
 80117f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80117f6:	f7ee fd69 	bl	80002cc <__adddf3>
 80117fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80117fe:	e7eb      	b.n	80117d8 <__kernel_rem_pio2+0x5a8>
 8011800:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011804:	f7ee fd62 	bl	80002cc <__adddf3>
 8011808:	3c01      	subs	r4, #1
 801180a:	e7c1      	b.n	8011790 <__kernel_rem_pio2+0x560>
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	e7c6      	b.n	80117a0 <__kernel_rem_pio2+0x570>
 8011812:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011816:	f7ee fd59 	bl	80002cc <__adddf3>
 801181a:	3401      	adds	r4, #1
 801181c:	e7cb      	b.n	80117b6 <__kernel_rem_pio2+0x586>
 801181e:	ed95 7b00 	vldr	d7, [r5]
 8011822:	ed8d 7b00 	vstr	d7, [sp]
 8011826:	ed95 7b02 	vldr	d7, [r5, #8]
 801182a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801182e:	ec53 2b17 	vmov	r2, r3, d7
 8011832:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011836:	f7ee fd49 	bl	80002cc <__adddf3>
 801183a:	4602      	mov	r2, r0
 801183c:	460b      	mov	r3, r1
 801183e:	4606      	mov	r6, r0
 8011840:	460f      	mov	r7, r1
 8011842:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011846:	f7ee fd3f 	bl	80002c8 <__aeabi_dsub>
 801184a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801184e:	f7ee fd3d 	bl	80002cc <__adddf3>
 8011852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011856:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801185a:	e9c5 6700 	strd	r6, r7, [r5]
 801185e:	e76d      	b.n	801173c <__kernel_rem_pio2+0x50c>
 8011860:	ed94 7b00 	vldr	d7, [r4]
 8011864:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011868:	ec51 0b17 	vmov	r0, r1, d7
 801186c:	4652      	mov	r2, sl
 801186e:	465b      	mov	r3, fp
 8011870:	ed8d 7b00 	vstr	d7, [sp]
 8011874:	f7ee fd2a 	bl	80002cc <__adddf3>
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	4606      	mov	r6, r0
 801187e:	460f      	mov	r7, r1
 8011880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011884:	f7ee fd20 	bl	80002c8 <__aeabi_dsub>
 8011888:	4652      	mov	r2, sl
 801188a:	465b      	mov	r3, fp
 801188c:	f7ee fd1e 	bl	80002cc <__adddf3>
 8011890:	3d01      	subs	r5, #1
 8011892:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011896:	e9c4 6700 	strd	r6, r7, [r4]
 801189a:	e755      	b.n	8011748 <__kernel_rem_pio2+0x518>
 801189c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80118a0:	f7ee fd14 	bl	80002cc <__adddf3>
 80118a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80118a8:	e758      	b.n	801175c <__kernel_rem_pio2+0x52c>
 80118aa:	bf00      	nop
 80118ac:	f3af 8000 	nop.w
	...
 80118b8:	41700000 	.word	0x41700000
 80118bc:	3e700000 	.word	0x3e700000
 80118c0:	9b04      	ldr	r3, [sp, #16]
 80118c2:	9a04      	ldr	r2, [sp, #16]
 80118c4:	601f      	str	r7, [r3, #0]
 80118c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80118ca:	605c      	str	r4, [r3, #4]
 80118cc:	609d      	str	r5, [r3, #8]
 80118ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80118d2:	60d3      	str	r3, [r2, #12]
 80118d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80118d8:	6110      	str	r0, [r2, #16]
 80118da:	6153      	str	r3, [r2, #20]
 80118dc:	e719      	b.n	8011712 <__kernel_rem_pio2+0x4e2>
 80118de:	bf00      	nop

080118e0 <floor>:
 80118e0:	ec51 0b10 	vmov	r0, r1, d0
 80118e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80118e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80118f0:	2e13      	cmp	r6, #19
 80118f2:	460c      	mov	r4, r1
 80118f4:	4605      	mov	r5, r0
 80118f6:	4680      	mov	r8, r0
 80118f8:	dc34      	bgt.n	8011964 <floor+0x84>
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	da17      	bge.n	801192e <floor+0x4e>
 80118fe:	a332      	add	r3, pc, #200	@ (adr r3, 80119c8 <floor+0xe8>)
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	f7ee fce2 	bl	80002cc <__adddf3>
 8011908:	2200      	movs	r2, #0
 801190a:	2300      	movs	r3, #0
 801190c:	f7ef f924 	bl	8000b58 <__aeabi_dcmpgt>
 8011910:	b150      	cbz	r0, 8011928 <floor+0x48>
 8011912:	2c00      	cmp	r4, #0
 8011914:	da55      	bge.n	80119c2 <floor+0xe2>
 8011916:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801191a:	432c      	orrs	r4, r5
 801191c:	2500      	movs	r5, #0
 801191e:	42ac      	cmp	r4, r5
 8011920:	4c2b      	ldr	r4, [pc, #172]	@ (80119d0 <floor+0xf0>)
 8011922:	bf08      	it	eq
 8011924:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011928:	4621      	mov	r1, r4
 801192a:	4628      	mov	r0, r5
 801192c:	e023      	b.n	8011976 <floor+0x96>
 801192e:	4f29      	ldr	r7, [pc, #164]	@ (80119d4 <floor+0xf4>)
 8011930:	4137      	asrs	r7, r6
 8011932:	ea01 0307 	and.w	r3, r1, r7
 8011936:	4303      	orrs	r3, r0
 8011938:	d01d      	beq.n	8011976 <floor+0x96>
 801193a:	a323      	add	r3, pc, #140	@ (adr r3, 80119c8 <floor+0xe8>)
 801193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011940:	f7ee fcc4 	bl	80002cc <__adddf3>
 8011944:	2200      	movs	r2, #0
 8011946:	2300      	movs	r3, #0
 8011948:	f7ef f906 	bl	8000b58 <__aeabi_dcmpgt>
 801194c:	2800      	cmp	r0, #0
 801194e:	d0eb      	beq.n	8011928 <floor+0x48>
 8011950:	2c00      	cmp	r4, #0
 8011952:	bfbe      	ittt	lt
 8011954:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011958:	4133      	asrlt	r3, r6
 801195a:	18e4      	addlt	r4, r4, r3
 801195c:	ea24 0407 	bic.w	r4, r4, r7
 8011960:	2500      	movs	r5, #0
 8011962:	e7e1      	b.n	8011928 <floor+0x48>
 8011964:	2e33      	cmp	r6, #51	@ 0x33
 8011966:	dd0a      	ble.n	801197e <floor+0x9e>
 8011968:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801196c:	d103      	bne.n	8011976 <floor+0x96>
 801196e:	4602      	mov	r2, r0
 8011970:	460b      	mov	r3, r1
 8011972:	f7ee fcab 	bl	80002cc <__adddf3>
 8011976:	ec41 0b10 	vmov	d0, r0, r1
 801197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011982:	f04f 37ff 	mov.w	r7, #4294967295
 8011986:	40df      	lsrs	r7, r3
 8011988:	4207      	tst	r7, r0
 801198a:	d0f4      	beq.n	8011976 <floor+0x96>
 801198c:	a30e      	add	r3, pc, #56	@ (adr r3, 80119c8 <floor+0xe8>)
 801198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011992:	f7ee fc9b 	bl	80002cc <__adddf3>
 8011996:	2200      	movs	r2, #0
 8011998:	2300      	movs	r3, #0
 801199a:	f7ef f8dd 	bl	8000b58 <__aeabi_dcmpgt>
 801199e:	2800      	cmp	r0, #0
 80119a0:	d0c2      	beq.n	8011928 <floor+0x48>
 80119a2:	2c00      	cmp	r4, #0
 80119a4:	da0a      	bge.n	80119bc <floor+0xdc>
 80119a6:	2e14      	cmp	r6, #20
 80119a8:	d101      	bne.n	80119ae <floor+0xce>
 80119aa:	3401      	adds	r4, #1
 80119ac:	e006      	b.n	80119bc <floor+0xdc>
 80119ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80119b2:	2301      	movs	r3, #1
 80119b4:	40b3      	lsls	r3, r6
 80119b6:	441d      	add	r5, r3
 80119b8:	4545      	cmp	r5, r8
 80119ba:	d3f6      	bcc.n	80119aa <floor+0xca>
 80119bc:	ea25 0507 	bic.w	r5, r5, r7
 80119c0:	e7b2      	b.n	8011928 <floor+0x48>
 80119c2:	2500      	movs	r5, #0
 80119c4:	462c      	mov	r4, r5
 80119c6:	e7af      	b.n	8011928 <floor+0x48>
 80119c8:	8800759c 	.word	0x8800759c
 80119cc:	7e37e43c 	.word	0x7e37e43c
 80119d0:	bff00000 	.word	0xbff00000
 80119d4:	000fffff 	.word	0x000fffff

080119d8 <_init>:
 80119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119da:	bf00      	nop
 80119dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119de:	bc08      	pop	{r3}
 80119e0:	469e      	mov	lr, r3
 80119e2:	4770      	bx	lr

080119e4 <_fini>:
 80119e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e6:	bf00      	nop
 80119e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ea:	bc08      	pop	{r3}
 80119ec:	469e      	mov	lr, r3
 80119ee:	4770      	bx	lr
