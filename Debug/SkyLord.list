
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011458  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08011628  08011628  00012628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c10  08011c10  00013228  2**0
                  CONTENTS
  4 .ARM          00000008  08011c10  08011c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c18  08011c18  00013228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c18  08011c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011c1c  08011c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08011c20  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000228  08011e48  00013228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08011e48  0001385c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3bb  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f7  00000000  00000000  0002d613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00031010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbc  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025653  00000000  00000000  000333cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6ca  00000000  00000000  00058a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8282  00000000  00000000  000750e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d36b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b6c  00000000  00000000  0014d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00153f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011610 	.word	0x08011610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08011610 	.word	0x08011610

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f007 fe4b 	bl	8008eec <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f007 fe27 	bl	8008eec <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00b ff90 	bl	800d1da <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00d fda7 	bl	800eeb8 <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fc51 	bl	8008c98 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 fae6 	bl	80079c8 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f007 fb05 	bl	8008a10 <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 fade 	bl	80079c8 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f007 fd63 	bl	8008eec <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f007 fcca 	bl	8008eec <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f007 fb89 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f007 fb64 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f007 fb40 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 f9a0 	bl	80079c8 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 f98e 	bl	80079c8 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f007 fbe4 	bl	8008eec <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	200005b8 	.word	0x200005b8
 800174c:	2000024c 	.word	0x2000024c
 8001750:	200005dc 	.word	0x200005dc

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 f918 	bl	80079b0 <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 f908 	bl	80079b0 <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af04      	add	r7, sp, #16
 8001faa:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <bmi088_init+0xa8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <bmi088_init+0xac>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2018      	movs	r0, #24
 8001fd8:	f00a fad8 	bl	800c58c <calloc>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68d8      	ldr	r0, [r3, #12]
 8001fe8:	2332      	movs	r3, #50	@ 0x32
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2130      	movs	r1, #48	@ 0x30
 8001ffc:	f006 ff76 	bl	8008eec <HAL_I2C_Mem_Read>
 8002000:	4603      	mov	r3, r0
 8002002:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68d8      	ldr	r0, [r3, #12]
 8002008:	2332      	movs	r3, #50	@ 0x32
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2301      	movs	r3, #1
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	3301      	adds	r3, #1
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	2200      	movs	r2, #0
 800201c:	21d0      	movs	r1, #208	@ 0xd0
 800201e:	f006 ff65 	bl	8008eec <HAL_I2C_Mem_Read>
 8002022:	4603      	mov	r3, r0
 8002024:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	2b1e      	cmp	r3, #30
 800202a:	d003      	beq.n	8002034 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d003      	beq.n	8002042 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000024d 	.word	0x2000024d
 8002050:	2000024e 	.word	0x2000024e

08002054 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002062:	4618      	mov	r0, r3
 8002064:	f005 fdfd 	bl	8007c62 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800206e:	4618      	mov	r0, r3
 8002070:	f005 fdf7 	bl	8007c62 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002078:	2301      	movs	r3, #1
 800207a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68d8      	ldr	r0, [r3, #12]
 8002080:	2364      	movs	r3, #100	@ 0x64
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2301      	movs	r3, #1
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	227c      	movs	r2, #124	@ 0x7c
 8002092:	2130      	movs	r1, #48	@ 0x30
 8002094:	f006 fe30 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4313      	orrs	r3, r2
 80020a0:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d8      	ldr	r0, [r3, #12]
 80020aa:	2364      	movs	r3, #100	@ 0x64
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	227d      	movs	r2, #125	@ 0x7d
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f006 fe1b 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80020cc:	2014      	movs	r0, #20
 80020ce:	f005 fc7b 	bl	80079c8 <HAL_Delay>

	buf[0] = ACC_RESET;
 80020d2:	23b6      	movs	r3, #182	@ 0xb6
 80020d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d8      	ldr	r0, [r3, #12]
 80020da:	2364      	movs	r3, #100	@ 0x64
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	227e      	movs	r2, #126	@ 0x7e
 80020ec:	2130      	movs	r1, #48	@ 0x30
 80020ee:	f006 fe03 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <bmi088_config+0xb4>
 8002102:	4bb4      	ldr	r3, [pc, #720]	@ (80023d4 <bmi088_config+0x380>)
 8002104:	22a1      	movs	r2, #161	@ 0xa1
 8002106:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f005 fc5d 	bl	80079c8 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800210e:	23b0      	movs	r3, #176	@ 0xb0
 8002110:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68d8      	ldr	r0, [r3, #12]
 8002116:	2364      	movs	r3, #100	@ 0x64
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2301      	movs	r3, #1
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	227e      	movs	r2, #126	@ 0x7e
 8002128:	2130      	movs	r1, #48	@ 0x30
 800212a:	f006 fde5 	bl	8008cf8 <HAL_I2C_Mem_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4313      	orrs	r3, r2
 8002136:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <bmi088_config+0xf0>
 800213e:	4ba5      	ldr	r3, [pc, #660]	@ (80023d4 <bmi088_config+0x380>)
 8002140:	22a6      	movs	r2, #166	@ 0xa6
 8002142:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002144:	200a      	movs	r0, #10
 8002146:	f005 fc3f 	bl	80079c8 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800214a:	23b6      	movs	r3, #182	@ 0xb6
 800214c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68d8      	ldr	r0, [r3, #12]
 8002152:	2364      	movs	r3, #100	@ 0x64
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2301      	movs	r3, #1
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	2214      	movs	r2, #20
 8002164:	21d0      	movs	r1, #208	@ 0xd0
 8002166:	f006 fdc7 	bl	8008cf8 <HAL_I2C_Mem_Write>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	4313      	orrs	r3, r2
 8002172:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <bmi088_config+0x12c>
 800217a:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <bmi088_config+0x380>)
 800217c:	22ab      	movs	r2, #171	@ 0xab
 800217e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f005 fc21 	bl	80079c8 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7a9b      	ldrb	r3, [r3, #10]
 800218a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68d8      	ldr	r0, [r3, #12]
 8002190:	2364      	movs	r3, #100	@ 0x64
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	220f      	movs	r2, #15
 80021a2:	21d0      	movs	r1, #208	@ 0xd0
 80021a4:	f006 fda8 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <bmi088_config+0x16a>
 80021b8:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <bmi088_config+0x380>)
 80021ba:	22b1      	movs	r2, #177	@ 0xb1
 80021bc:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7a5b      	ldrb	r3, [r3, #9]
 80021c2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68d8      	ldr	r0, [r3, #12]
 80021c8:	2314      	movs	r3, #20
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	2301      	movs	r3, #1
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2210      	movs	r2, #16
 80021da:	21d0      	movs	r1, #208	@ 0xd0
 80021dc:	f006 fd8c 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <bmi088_config+0x1a2>
 80021f0:	4b78      	ldr	r3, [pc, #480]	@ (80023d4 <bmi088_config+0x380>)
 80021f2:	22b5      	movs	r2, #181	@ 0xb5
 80021f4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7a1b      	ldrb	r3, [r3, #8]
 80021fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68d8      	ldr	r0, [r3, #12]
 8002200:	2314      	movs	r3, #20
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	2211      	movs	r2, #17
 8002212:	21d0      	movs	r1, #208	@ 0xd0
 8002214:	f006 fd70 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	4313      	orrs	r3, r2
 8002220:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <bmi088_config+0x1da>
 8002228:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <bmi088_config+0x380>)
 800222a:	22b9      	movs	r2, #185	@ 0xb9
 800222c:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800222e:	2014      	movs	r0, #20
 8002230:	f005 fbca 	bl	80079c8 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68d8      	ldr	r0, [r3, #12]
 800223c:	2314      	movs	r3, #20
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	2301      	movs	r3, #1
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2301      	movs	r3, #1
 800224c:	2215      	movs	r2, #21
 800224e:	21d0      	movs	r1, #208	@ 0xd0
 8002250:	f006 fd52 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4313      	orrs	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <bmi088_config+0x216>
 8002264:	4b5b      	ldr	r3, [pc, #364]	@ (80023d4 <bmi088_config+0x380>)
 8002266:	22bf      	movs	r2, #191	@ 0xbf
 8002268:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800226a:	2305      	movs	r3, #5
 800226c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d8      	ldr	r0, [r3, #12]
 8002272:	2314      	movs	r3, #20
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2301      	movs	r3, #1
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	2216      	movs	r2, #22
 8002284:	21d0      	movs	r1, #208	@ 0xd0
 8002286:	f006 fd37 	bl	8008cf8 <HAL_I2C_Mem_Write>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	4313      	orrs	r3, r2
 8002292:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <bmi088_config+0x24c>
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <bmi088_config+0x380>)
 800229c:	22c3      	movs	r2, #195	@ 0xc3
 800229e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 80022a0:	2381      	movs	r3, #129	@ 0x81
 80022a2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68d8      	ldr	r0, [r3, #12]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2301      	movs	r3, #1
 80022b8:	2218      	movs	r2, #24
 80022ba:	21d0      	movs	r1, #208	@ 0xd0
 80022bc:	f006 fd1c 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <bmi088_config+0x282>
 80022d0:	4b40      	ldr	r3, [pc, #256]	@ (80023d4 <bmi088_config+0x380>)
 80022d2:	22c7      	movs	r2, #199	@ 0xc7
 80022d4:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 80022d6:	2304      	movs	r3, #4
 80022d8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68d8      	ldr	r0, [r3, #12]
 80022de:	2314      	movs	r3, #20
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	227d      	movs	r2, #125	@ 0x7d
 80022f0:	2130      	movs	r1, #48	@ 0x30
 80022f2:	f006 fd01 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x2b8>
 8002306:	4b33      	ldr	r3, [pc, #204]	@ (80023d4 <bmi088_config+0x380>)
 8002308:	22cc      	movs	r2, #204	@ 0xcc
 800230a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800230c:	2008      	movs	r0, #8
 800230e:	f005 fb5b 	bl	80079c8 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	791b      	ldrb	r3, [r3, #4]
 8002316:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68d8      	ldr	r0, [r3, #12]
 800231c:	2314      	movs	r3, #20
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2301      	movs	r3, #1
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	227c      	movs	r2, #124	@ 0x7c
 800232e:	2130      	movs	r1, #48	@ 0x30
 8002330:	f006 fce2 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4313      	orrs	r3, r2
 800233c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <bmi088_config+0x2f6>
 8002344:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <bmi088_config+0x380>)
 8002346:	22d1      	movs	r2, #209	@ 0xd1
 8002348:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800234a:	2008      	movs	r0, #8
 800234c:	f005 fb3c 	bl	80079c8 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	799b      	ldrb	r3, [r3, #6]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	b25a      	sxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	79db      	ldrb	r3, [r3, #7]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b25b      	sxtb	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68d8      	ldr	r0, [r3, #12]
 800236a:	2314      	movs	r3, #20
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	2240      	movs	r2, #64	@ 0x40
 800237c:	2130      	movs	r1, #48	@ 0x30
 800237e:	f006 fcbb 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	4313      	orrs	r3, r2
 800238a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <bmi088_config+0x344>
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <bmi088_config+0x380>)
 8002394:	22d6      	movs	r2, #214	@ 0xd6
 8002396:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	795b      	ldrb	r3, [r3, #5]
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68d8      	ldr	r0, [r3, #12]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	2241      	movs	r2, #65	@ 0x41
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f006 fc9f 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <bmi088_config+0x384>
 80023ca:	4b02      	ldr	r3, [pc, #8]	@ (80023d4 <bmi088_config+0x380>)
 80023cc:	22da      	movs	r2, #218	@ 0xda
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e002      	b.n	80023d8 <bmi088_config+0x384>
 80023d2:	bf00      	nop
 80023d4:	20000250 	.word	0x20000250

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80023d8:	230a      	movs	r3, #10
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68d8      	ldr	r0, [r3, #12]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	2253      	movs	r2, #83	@ 0x53
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f006 fc80 	bl	8008cf8 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002402:	2304      	movs	r3, #4
 8002404:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68d8      	ldr	r0, [r3, #12]
 800240a:	2314      	movs	r3, #20
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	2258      	movs	r2, #88	@ 0x58
 800241c:	2130      	movs	r1, #48	@ 0x30
 800241e:	f006 fc6b 	bl	8008cf8 <HAL_I2C_Mem_Write>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	4313      	orrs	r3, r2
 800242a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002432:	4618      	mov	r0, r3
 8002434:	f005 fc07 	bl	8007c46 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800243e:	4618      	mov	r0, r3
 8002440:	f005 fc01 	bl	8007c46 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002444:	2046      	movs	r0, #70	@ 0x46
 8002446:	f005 fabf 	bl	80079c8 <HAL_Delay>
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	0000      	movs	r0, r0
	...

08002458 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b092      	sub	sp, #72	@ 0x48
 800245c:	af04      	add	r7, sp, #16
 800245e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 820d 	beq.w	800288a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68d8      	ldr	r0, [r3, #12]
 8002474:	2314      	movs	r3, #20
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	2309      	movs	r3, #9
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	2212      	movs	r2, #18
 8002486:	2130      	movs	r1, #48	@ 0x30
 8002488:	f006 fd30 	bl	8008eec <HAL_I2C_Mem_Read>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68d8      	ldr	r0, [r3, #12]
 8002496:	2314      	movs	r3, #20
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	2302      	movs	r3, #2
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2301      	movs	r3, #1
 80024a6:	2222      	movs	r2, #34	@ 0x22
 80024a8:	2130      	movs	r1, #48	@ 0x30
 80024aa:	f006 fd1f 	bl	8008eec <HAL_I2C_Mem_Read>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 80024b4:	7c3b      	ldrb	r3, [r7, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	7c7b      	ldrb	r3, [r7, #17]
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 80024cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d2:	d305      	bcc.n	80024e0 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 80024d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024d6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024da:	b29b      	uxth	r3, r3
 80024dc:	867b      	strh	r3, [r7, #50]	@ 0x32
 80024de:	e023      	b.n	8002528 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 80024e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80024e2:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 80024e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ee17 0a90 	vmov	r0, s15
 80024f4:	f7fe f848 	bl	8000588 <__aeabi_f2d>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002500:	f7fe f89a 	bl	8000638 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4bcf      	ldr	r3, [pc, #828]	@ (8002850 <bmi088_update+0x3f8>)
 8002512:	f7fd fedb 	bl	80002cc <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	f7fe fb63 	bl	8000be8 <__aeabi_d2f>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 8002528:	7f3b      	ldrb	r3, [r7, #28]
 800252a:	041a      	lsls	r2, r3, #16
 800252c:	7efb      	ldrb	r3, [r7, #27]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4313      	orrs	r3, r2
 8002532:	7eba      	ldrb	r2, [r7, #26]
 8002534:	4313      	orrs	r3, r2
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 8002538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	ee17 0a90 	vmov	r0, s15
 8002546:	f7fe f81f 	bl	8000588 <__aeabi_f2d>
 800254a:	a3b9      	add	r3, pc, #740	@ (adr r3, 8002830 <bmi088_update+0x3d8>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fe f872 	bl	8000638 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	a3b6      	add	r3, pc, #728	@ (adr r3, 8002838 <bmi088_update+0x3e0>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f993 	bl	800088c <__aeabi_ddiv>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4602      	mov	r2, r0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002578:	7e7b      	ldrb	r3, [r7, #25]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21a      	sxth	r2, r3
 800257e:	7e3b      	ldrb	r3, [r7, #24]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002594:	7d7b      	ldrb	r3, [r7, #21]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	b21a      	sxth	r2, r3
 800259a:	7d3b      	ldrb	r3, [r7, #20]
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80025a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ae:	ee17 0a90 	vmov	r0, s15
 80025b2:	f7fd ffe9 	bl	8000588 <__aeabi_f2d>
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002854 <bmi088_update+0x3fc>)
 80025bc:	f7fe f966 	bl	800088c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002858 <bmi088_update+0x400>)
 80025ce:	f7fe f833 	bl	8000638 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b9f      	ldr	r3, [pc, #636]	@ (800285c <bmi088_update+0x404>)
 80025e0:	f7fe f82a 	bl	8000638 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4614      	mov	r4, r2
 80025ea:	461d      	mov	r5, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	3301      	adds	r3, #1
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	ec43 2b11 	vmov	d1, r2, r3
 800260a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8002840 <bmi088_update+0x3e8>
 800260e:	f00c fc53 	bl	800eeb8 <pow>
 8002612:	ec53 2b10 	vmov	r2, r3, d0
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fe f80d 	bl	8000638 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <bmi088_update+0x408>)
 800262c:	f7fd fe4c 	bl	80002c8 <__aeabi_dsub>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	a383      	add	r3, pc, #524	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd fffb 	bl	8000638 <__aeabi_dmul>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <bmi088_update+0x400>)
 8002650:	f7fe f91c 	bl	800088c <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fac4 	bl	8000be8 <__aeabi_d2f>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002666:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	ee17 0a90 	vmov	r0, s15
 8002676:	f7fd ff87 	bl	8000588 <__aeabi_f2d>
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <bmi088_update+0x3fc>)
 8002680:	f7fe f904 	bl	800088c <__aeabi_ddiv>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b71      	ldr	r3, [pc, #452]	@ (8002858 <bmi088_update+0x400>)
 8002692:	f7fd ffd1 	bl	8000638 <__aeabi_dmul>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <bmi088_update+0x404>)
 80026a4:	f7fd ffc8 	bl	8000638 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	795b      	ldrb	r3, [r3, #5]
 80026b4:	3301      	adds	r3, #1
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026be:	ee17 0a90 	vmov	r0, s15
 80026c2:	f7fd ff61 	bl	8000588 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	ec43 2b11 	vmov	d1, r2, r3
 80026ce:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002840 <bmi088_update+0x3e8>
 80026d2:	f00c fbf1 	bl	800eeb8 <pow>
 80026d6:	ec53 2b10 	vmov	r2, r3, d0
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fd ffab 	bl	8000638 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <bmi088_update+0x40c>)
 80026f0:	f7fd fdec 	bl	80002cc <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	a352      	add	r3, pc, #328	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff99 	bl	8000638 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <bmi088_update+0x400>)
 8002714:	f7fe f8ba 	bl	800088c <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_d2f>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 800272a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd ff25 	bl	8000588 <__aeabi_f2d>
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <bmi088_update+0x3fc>)
 8002744:	f7fe f8a2 	bl	800088c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <bmi088_update+0x400>)
 8002756:	f7fd ff6f 	bl	8000638 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <bmi088_update+0x404>)
 8002768:	f7fd ff66 	bl	8000638 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	795b      	ldrb	r3, [r3, #5]
 8002778:	3301      	adds	r3, #1
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002782:	ee17 0a90 	vmov	r0, s15
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b11 	vmov	d1, r2, r3
 8002792:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002840 <bmi088_update+0x3e8>
 8002796:	f00c fb8f 	bl	800eeb8 <pow>
 800279a:	ec53 2b10 	vmov	r2, r3, d0
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd ff49 	bl	8000638 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <bmi088_update+0x408>)
 80027b4:	f7fd fd8a 	bl	80002cc <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	a321      	add	r3, pc, #132	@ (adr r3, 8002848 <bmi088_update+0x3f0>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd ff37 	bl	8000638 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <bmi088_update+0x400>)
 80027d8:	f7fe f858 	bl	800088c <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe fa00 	bl	8000be8 <__aeabi_d2f>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <bmi088_update+0x410>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03c      	beq.n	8002870 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d502      	bpl.n	8002816 <bmi088_update+0x3be>
 8002810:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800286c <bmi088_update+0x414>
 8002814:	e007      	b.n	8002826 <bmi088_update+0x3ce>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 800282c:	e023      	b.n	8002876 <bmi088_update+0x41e>
 800282e:	bf00      	nop
 8002830:	00000000 	.word	0x00000000
 8002834:	40438800 	.word	0x40438800
 8002838:	00000000 	.word	0x00000000
 800283c:	412e8480 	.word	0x412e8480
 8002840:	00000000 	.word	0x00000000
 8002844:	40000000 	.word	0x40000000
 8002848:	51eb851f 	.word	0x51eb851f
 800284c:	40239eb8 	.word	0x40239eb8
 8002850:	40370000 	.word	0x40370000
 8002854:	40e00000 	.word	0x40e00000
 8002858:	408f4000 	.word	0x408f4000
 800285c:	3ff80000 	.word	0x3ff80000
 8002860:	40100000 	.word	0x40100000
 8002864:	402e0000 	.word	0x402e0000
 8002868:	2000024e 	.word	0x2000024e
 800286c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002870:	4bd1      	ldr	r3, [pc, #836]	@ (8002bb8 <bmi088_update+0x760>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002884:	4bcd      	ldr	r3, [pc, #820]	@ (8002bbc <bmi088_update+0x764>)
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 81b1 	beq.w	8002bf6 <bmi088_update+0x79e>
 8002894:	4bc9      	ldr	r3, [pc, #804]	@ (8002bbc <bmi088_update+0x764>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 81ac 	beq.w	8002bf6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800289e:	4bc6      	ldr	r3, [pc, #792]	@ (8002bb8 <bmi088_update+0x760>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 819f 	beq.w	8002be6 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68d8      	ldr	r0, [r3, #12]
 80028ac:	230a      	movs	r3, #10
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2306      	movs	r3, #6
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2202      	movs	r2, #2
 80028be:	21d0      	movs	r1, #208	@ 0xd0
 80028c0:	f006 fb14 	bl	8008eec <HAL_I2C_Mem_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 80028ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f040 8190 	bne.w	8002bf4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b21a      	sxth	r2, r3
 80028da:	7a3b      	ldrb	r3, [r7, #8]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7abb      	ldrb	r3, [r7, #10]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80028fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290a:	ee17 0a90 	vmov	r0, s15
 800290e:	f7fd fe3b 	bl	8000588 <__aeabi_f2d>
 8002912:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ffb8 	bl	800088c <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7a9b      	ldrb	r3, [r3, #10]
 8002928:	461a      	mov	r2, r3
 800292a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800292e:	4113      	asrs	r3, r2
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002938:	ee17 0a90 	vmov	r0, s15
 800293c:	f7fd fe24 	bl	8000588 <__aeabi_f2d>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fe76 	bl	8000638 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe14 	bl	8000588 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fcae 	bl	80002c8 <__aeabi_dsub>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	a38e      	add	r3, pc, #568	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe5d 	bl	8000638 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f92f 	bl	8000be8 <__aeabi_d2f>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002990:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	ee17 0a90 	vmov	r0, s15
 80029a0:	f7fd fdf2 	bl	8000588 <__aeabi_f2d>
 80029a4:	a380      	add	r3, pc, #512	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff6f 	bl	800088c <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4614      	mov	r4, r2
 80029b4:	461d      	mov	r5, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7a9b      	ldrb	r3, [r3, #10]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029c0:	4113      	asrs	r3, r2
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ca:	ee17 0a90 	vmov	r0, s15
 80029ce:	f7fd fddb 	bl	8000588 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4620      	mov	r0, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	f7fd fe2d 	bl	8000638 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	461d      	mov	r5, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdcb 	bl	8000588 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc65 	bl	80002c8 <__aeabi_dsub>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	a36a      	add	r3, pc, #424	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fe14 	bl	8000638 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7fe f8e6 	bl	8000be8 <__aeabi_d2f>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2e:	ee17 0a90 	vmov	r0, s15
 8002a32:	f7fd fda9 	bl	8000588 <__aeabi_f2d>
 8002a36:	a35c      	add	r3, pc, #368	@ (adr r3, 8002ba8 <bmi088_update+0x750>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd ff26 	bl	800088c <__aeabi_ddiv>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7a9b      	ldrb	r3, [r3, #10]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a52:	4113      	asrs	r3, r2
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5c:	ee17 0a90 	vmov	r0, s15
 8002a60:	f7fd fd92 	bl	8000588 <__aeabi_f2d>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fde4 	bl	8000638 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd82 	bl	8000588 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fc1c 	bl	80002c8 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	a345      	add	r3, pc, #276	@ (adr r3, 8002bb0 <bmi088_update+0x758>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fdcb 	bl	8000638 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f89d 	bl	8000be8 <__aeabi_d2f>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac0:	eef1 6a67 	vneg.f32	s13, s15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	ed93 6a08 	vldr	s12, [r3, #32]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002ad6:	eef1 7a67 	vneg.f32	s15, s15
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002ae6:	eeb0 3a64 	vmov.f32	s6, s9
 8002aea:	eef0 2a45 	vmov.f32	s5, s10
 8002aee:	eeb0 2a67 	vmov.f32	s4, s15
 8002af2:	eef0 1a65 	vmov.f32	s3, s11
 8002af6:	eeb0 1a46 	vmov.f32	s2, s12
 8002afa:	eef0 0a66 	vmov.f32	s1, s13
 8002afe:	eeb0 0a47 	vmov.f32	s0, s14
 8002b02:	f002 fef5 	bl	80058f0 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002b06:	f003 fc8f 	bl	8006428 <quaternionToYaw>
 8002b0a:	eef0 7a40 	vmov.f32	s15, s0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002b14:	f003 fce6 	bl	80064e4 <quaternionToPitch>
 8002b18:	eef0 7a40 	vmov.f32	s15, s0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002b22:	f003 fd17 	bl	8006554 <quaternionToRoll>
 8002b26:	eef0 7a40 	vmov.f32	s15, s0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002b30:	f003 fb52 	bl	80061d8 <quaternionToThetaZ>
 8002b34:	eef0 7a40 	vmov.f32	s15, s0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002b3e:	f002 fcc3 	bl	80054c8 <quaternionToYawDegree1>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002b4c:	f003 fbd4 	bl	80062f8 <quaternionToPitchDegree>
 8002b50:	eef0 7a40 	vmov.f32	s15, s0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002b5a:	f003 fc1d 	bl	8006398 <quaternionToRollDegree>
 8002b5e:	eef0 7a40 	vmov.f32	s15, s0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b74:	eef1 7a67 	vneg.f32	s15, s15
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002b84:	eef0 1a46 	vmov.f32	s3, s12
 8002b88:	eeb0 1a66 	vmov.f32	s2, s13
 8002b8c:	eef0 0a67 	vmov.f32	s1, s15
 8002b90:	eeb0 0a47 	vmov.f32	s0, s14
 8002b94:	f002 fa7e 	bl	8005094 <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002b98:	f002 fba2 	bl	80052e0 <quaternionToYaw1>
 8002b9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	e00d      	b.n	8002bc0 <bmi088_update+0x768>
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40dfffc0 	.word	0x40dfffc0
 8002bb0:	a0000000 	.word	0xa0000000
 8002bb4:	3f91df46 	.word	0x3f91df46
 8002bb8:	2000024e 	.word	0x2000024e
 8002bbc:	2000024d 	.word	0x2000024d
 8002bc0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002bc4:	f002 fbea 	bl	800539c <quaternionToPitch1>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002bd2:	f002 fc1b 	bl	800540c <quaternionToRoll1>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <bmi088_update+0x7a4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <bmi088_update+0x7a8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e000      	b.n	8002bf6 <bmi088_update+0x79e>
					return;
 8002bf4:	bf00      	nop
		}
}
 8002bf6:	3738      	adds	r7, #56	@ 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfc:	2000024f 	.word	0x2000024f
 8002c00:	2000024d 	.word	0x2000024d

08002c04 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fc07 	bl	8002458 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <get_offset+0xd0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d1f8      	bne.n	8002c44 <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c58:	da2d      	bge.n	8002cb6 <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	ed93 7a00 	vldr	s14, [r3]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <get_offset+0xd0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e7c6      	b.n	8002c44 <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	ed93 7a00 	vldr	s14, [r3]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d0c <get_offset+0xd4>
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d0c <get_offset+0xd4>
 8002cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce2:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d0c <get_offset+0xd4>
 8002cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfa:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002cfe:	bf00      	nop
		}

	}
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000024f 	.word	0x2000024f
 8002d0c:	447a0000 	.word	0x447a0000

08002d10 <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002d14:	f000 f802 	bl	8002d1c <flight_algorithm_reset>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <flight_algorithm_reset+0x68>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <flight_algorithm_reset+0x6c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <flight_algorithm_reset+0x70>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002d32:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <flight_algorithm_reset+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <flight_algorithm_reset+0x78>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <flight_algorithm_reset+0x7c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002d44:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <flight_algorithm_reset+0x80>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <flight_algorithm_reset+0x84>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <flight_algorithm_reset+0x88>)
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <flight_algorithm_reset+0x8c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    deployed_velocity = 1;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <flight_algorithm_reset+0x90>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    deployed_angle = 1;
 8002d64:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <flight_algorithm_reset+0x94>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
    apogee_counter = 0;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <flight_algorithm_reset+0x98>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    prev_velocity = 0;
 8002d70:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <flight_algorithm_reset+0x9c>)
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000254 	.word	0x20000254
 8002d88:	20000255 	.word	0x20000255
 8002d8c:	20000014 	.word	0x20000014
 8002d90:	20000256 	.word	0x20000256
 8002d94:	20000257 	.word	0x20000257
 8002d98:	20000258 	.word	0x20000258
 8002d9c:	20000268 	.word	0x20000268
 8002da0:	20000270 	.word	0x20000270
 8002da4:	2000026c 	.word	0x2000026c
 8002da8:	20000264 	.word	0x20000264
 8002dac:	20000016 	.word	0x20000016
 8002db0:	20000015 	.word	0x20000015
 8002db4:	2000025c 	.word	0x2000025c
 8002db8:	20000260 	.word	0x20000260

08002dbc <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002dc8:	68b8      	ldr	r0, [r7, #8]
 8002dca:	f000 f92d 	bl	8003028 <calculate_total_acceleration>
 8002dce:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002dd2:	4b84      	ldr	r3, [pc, #528]	@ (8002fe4 <flight_algorithm_update+0x228>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	f200 80fc 	bhi.w	8002fd4 <flight_algorithm_update+0x218>
 8002ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <flight_algorithm_update+0x28>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002e35 	.word	0x08002e35
 8002dec:	08002e67 	.word	0x08002e67
 8002df0:	08002fd5 	.word	0x08002fd5
 8002df4:	08002fd5 	.word	0x08002fd5
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002df8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe8 <flight_algorithm_update+0x22c>)
 8002dfa:	edd3 7a00 	vldr	s15, [r3]
 8002dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	dc00      	bgt.n	8002e0e <flight_algorithm_update+0x52>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002e0c:	e0e2      	b.n	8002fd4 <flight_algorithm_update+0x218>
                current_phase = PHASE_BOOST;
 8002e0e:	4b75      	ldr	r3, [pc, #468]	@ (8002fe4 <flight_algorithm_update+0x228>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002e14:	4b75      	ldr	r3, [pc, #468]	@ (8002fec <flight_algorithm_update+0x230>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002e1a:	f004 fdc9 	bl	80079b0 <HAL_GetTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a73      	ldr	r2, [pc, #460]	@ (8002ff0 <flight_algorithm_update+0x234>)
 8002e22:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002e24:	4b73      	ldr	r3, [pc, #460]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b71      	ldr	r3, [pc, #452]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e30:	801a      	strh	r2, [r3, #0]
            break;
 8002e32:	e0cf      	b.n	8002fd4 <flight_algorithm_update+0x218>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002e34:	f004 fdbc 	bl	80079b0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff0 <flight_algorithm_update+0x234>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f240 80c2 	bls.w	8002fce <flight_algorithm_update+0x212>
                current_phase = PHASE_COAST;
 8002e4a:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <flight_algorithm_update+0x228>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002e50:	4b69      	ldr	r3, [pc, #420]	@ (8002ff8 <flight_algorithm_update+0x23c>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002e56:	4b67      	ldr	r3, [pc, #412]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b64      	ldr	r3, [pc, #400]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e62:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002e64:	e0b3      	b.n	8002fce <flight_algorithm_update+0x212>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude) {
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e6c:	4b63      	ldr	r3, [pc, #396]	@ (8002ffc <flight_algorithm_update+0x240>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd09      	ble.n	8002e90 <flight_algorithm_update+0xd4>
                is_armed = 1;
 8002e7c:	4b60      	ldr	r3, [pc, #384]	@ (8003000 <flight_algorithm_update+0x244>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002e82:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002e8e:	801a      	strh	r2, [r3, #0]
            }

            if (sensor_fusion->filtered_altitude > min_arming_altitude) {
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	ed93 7a00 	vldr	s14, [r3]
 8002e96:	4b59      	ldr	r3, [pc, #356]	@ (8002ffc <flight_algorithm_update+0x240>)
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	dd09      	ble.n	8002eba <flight_algorithm_update+0xfe>
                                        is_armed = 1;
 8002ea6:	4b56      	ldr	r3, [pc, #344]	@ (8003000 <flight_algorithm_update+0x244>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
                                        status_bits |= 0x0008; // Set Bit 2: Minimum altitude threshold exceeded
 8002eac:	4b51      	ldr	r3, [pc, #324]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002eb8:	801a      	strh	r2, [r3, #0]
			}

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.angle_y) > max_angle_threshold) && deployed_angle) {
 8002eba:	4b51      	ldr	r3, [pc, #324]	@ (8003000 <flight_algorithm_update+0x244>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01d      	beq.n	8002efe <flight_algorithm_update+0x142>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002ec8:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8003004 <flight_algorithm_update+0x248>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	dd10      	ble.n	8002efe <flight_algorithm_update+0x142>
 8002edc:	4b4a      	ldr	r3, [pc, #296]	@ (8003008 <flight_algorithm_update+0x24c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <flight_algorithm_update+0x142>
            	drogue_deployed = 1;
 8002ee4:	4b49      	ldr	r3, [pc, #292]	@ (800300c <flight_algorithm_update+0x250>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
            	deployed_angle = 0;
 8002eea:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <flight_algorithm_update+0x24c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8002ef0:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002efc:	801a      	strh	r2, [r3, #0]
				drogue_deployed = 1;
				deployed_velocity = 0;
				// deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8002efe:	4b40      	ldr	r3, [pc, #256]	@ (8003000 <flight_algorithm_update+0x244>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d034      	beq.n	8002f70 <flight_algorithm_update+0x1b4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	d52c      	bpl.n	8002f70 <flight_algorithm_update+0x1b4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <flight_algorithm_update+0x254>)
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2a:	d521      	bpl.n	8002f70 <flight_algorithm_update+0x1b4>
 8002f2c:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <flight_algorithm_update+0x258>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01d      	beq.n	8002f70 <flight_algorithm_update+0x1b4>
				apogee_counter++;
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <flight_algorithm_update+0x25c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4a37      	ldr	r2, [pc, #220]	@ (8003018 <flight_algorithm_update+0x25c>)
 8002f3c:	6013      	str	r3, [r2, #0]
				if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f3e:	4b36      	ldr	r3, [pc, #216]	@ (8003018 <flight_algorithm_update+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	dd17      	ble.n	8002f76 <flight_algorithm_update+0x1ba>
					status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002f46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	f043 0310 	orr.w	r3, r3, #16
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002f52:	801a      	strh	r2, [r3, #0]
					status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f043 0320 	orr.w	r3, r3, #32
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002f60:	801a      	strh	r2, [r3, #0]
					drogue_deployed = 1;
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <flight_algorithm_update+0x250>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
					deployed_velocity = 0;
 8002f68:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <flight_algorithm_update+0x258>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
				if (apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8002f6e:	e002      	b.n	8002f76 <flight_algorithm_update+0x1ba>
				}
			} else {
				apogee_counter = 0;
 8002f70:	4b29      	ldr	r3, [pc, #164]	@ (8003018 <flight_algorithm_update+0x25c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
			}
			prev_velocity = sensor_fusion->velocity;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <flight_algorithm_update+0x254>)
 8002f7c:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8002f7e:	4b23      	ldr	r3, [pc, #140]	@ (800300c <flight_algorithm_update+0x250>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d025      	beq.n	8002fd2 <flight_algorithm_update+0x216>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f8c:	4b23      	ldr	r3, [pc, #140]	@ (800301c <flight_algorithm_update+0x260>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9a:	d400      	bmi.n	8002f9e <flight_algorithm_update+0x1e2>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                // deploy_main_parachute(); // Actual deployment command
            }
            break;
 8002f9c:	e019      	b.n	8002fd2 <flight_algorithm_update+0x216>
                current_phase = PHASE_MAIN_DESCENT;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <flight_algorithm_update+0x228>)
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002fb0:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <flight_algorithm_update+0x238>)
 8002fbe:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002fc0:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <flight_algorithm_update+0x264>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <flight_algorithm_update+0x250>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
            break;
 8002fcc:	e001      	b.n	8002fd2 <flight_algorithm_update+0x216>
            break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <flight_algorithm_update+0x218>
            break;
 8002fd2:	bf00      	nop
        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }

    prev_altitude = bme->altitude;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <flight_algorithm_update+0x268>)
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000254 	.word	0x20000254
 8002fe8:	20000004 	.word	0x20000004
 8002fec:	20000255 	.word	0x20000255
 8002ff0:	20000264 	.word	0x20000264
 8002ff4:	20000270 	.word	0x20000270
 8002ff8:	20000014 	.word	0x20000014
 8002ffc:	20000008 	.word	0x20000008
 8003000:	20000256 	.word	0x20000256
 8003004:	20000010 	.word	0x20000010
 8003008:	20000015 	.word	0x20000015
 800300c:	20000257 	.word	0x20000257
 8003010:	20000260 	.word	0x20000260
 8003014:	20000016 	.word	0x20000016
 8003018:	2000025c 	.word	0x2000025c
 800301c:	2000000c 	.word	0x2000000c
 8003020:	20000258 	.word	0x20000258
 8003024:	2000026c 	.word	0x2000026c

08003028 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800303c:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8003060:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	eeb0 0a67 	vmov.f32	s0, s15
 800306c:	f00c f86e 	bl	800f14c <sqrtf>
 8003070:	eef0 7a40 	vmov.f32	s15, s0
}
 8003074:	eeb0 0a67 	vmov.f32	s0, s15
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
    return status_bits;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <flight_algorithm_get_status_bits+0x14>)
 8003086:	881b      	ldrh	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000270 	.word	0x20000270

08003098 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	ed87 0a03 	vstr	s0, [r7, #12]
 80030a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80030a6:	ed87 1a01 	vstr	s2, [r7, #4]
 80030aa:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 80030ae:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <flight_algorithm_set_parameters+0x3c>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 80030b4:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <flight_algorithm_set_parameters+0x40>)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 80030ba:	4a08      	ldr	r2, [pc, #32]	@ (80030dc <flight_algorithm_set_parameters+0x44>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 80030c0:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <flight_algorithm_set_parameters+0x48>)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000004 	.word	0x20000004
 80030d8:	20000008 	.word	0x20000008
 80030dc:	2000000c 	.word	0x2000000c
 80030e0:	20000010 	.word	0x20000010

080030e4 <flight_algorithm_get_start_time>:
/**
 * @brief Get flight start time in milliseconds
 * @return Flight start time from HAL_GetTick(), or 0 if flight hasn't started
 */
uint32_t flight_algorithm_get_start_time(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
    return flight_start_time;
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <flight_algorithm_get_start_time+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000264 	.word	0x20000264

080030fc <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e01f      	b.n	8003162 <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	e016      	b.n	8003156 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	d101      	bne.n	8003134 <KalmanFilter_Init+0x38>
 8003130:	491b      	ldr	r1, [pc, #108]	@ (80031a0 <KalmanFilter_Init+0xa4>)
 8003132:	e001      	b.n	8003138 <KalmanFilter_Init+0x3c>
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4413      	add	r3, r2
 8003146:	3302      	adds	r3, #2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4403      	add	r3, r0
 800314c:	3304      	adds	r3, #4
 800314e:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b02      	cmp	r3, #2
 800315a:	dde5      	ble.n	8003128 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3301      	adds	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b02      	cmp	r3, #2
 8003166:	dddc      	ble.n	8003122 <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <KalmanFilter_Init+0xa8>)
 800316c:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a0d      	ldr	r2, [pc, #52]	@ (80031a8 <KalmanFilter_Init+0xac>)
 8003172:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0d      	ldr	r2, [pc, #52]	@ (80031ac <KalmanFilter_Init+0xb0>)
 8003178:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	42c80000 	.word	0x42c80000
 80031a4:	3c23d70a 	.word	0x3c23d70a
 80031a8:	3ba3d70a 	.word	0x3ba3d70a
 80031ac:	40a00000 	.word	0x40a00000

080031b0 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80031c0:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ca:	eef0 7ae7 	vabs.f32	s15, s15
 80031ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003234 <KalmanFilter_Update+0x84>
 80031d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	dd0f      	ble.n	80031fc <KalmanFilter_Update+0x4c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	edd3 7a01 	vldr	s15, [r3, #4]
 80031e2:	eef0 7ae7 	vabs.f32	s15, s15
 80031e6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003238 <KalmanFilter_Update+0x88>
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	d503      	bpl.n	80031fc <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80031fa:	e002      	b.n	8003202 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 8003202:	ed97 0a00 	vldr	s0, [r7]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f818 	bl	800323c <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 800320c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003210:	ed97 0a02 	vldr	s0, [r7, #8]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fa1d 	bl	8003654 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f001 f96a 	bl	80044f4 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	ee07 3a90 	vmov	s15, r3
}
 8003228:	eeb0 0a67 	vmov.f32	s0, s15
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	43960000 	.word	0x43960000
 8003238:	43af0000 	.word	0x43af0000

0800323c <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b0b6      	sub	sp, #216	@ 0xd8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003248:	edd7 7a00 	vldr	s15, [r7]
 800324c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003250:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003254:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003258:	edd7 7a00 	vldr	s15, [r7]
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003264:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800326c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	ed93 7a00 	vldr	s14, [r3]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edd3 6a01 	vldr	s13, [r3, #4]
 800327c:	edd7 7a00 	vldr	s15, [r7]
 8003280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	edd3 6a02 	vldr	s13, [r3, #8]
 800328e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003292:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003296:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800329a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80032b2:	edd7 7a00 	vldr	s15, [r7]
 80032b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032d0:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80032d8:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80032e0:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80032ea:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80032ee:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80032f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032f6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80032fe:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003302:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003306:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800330a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800330e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003316:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800331a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800331e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003322:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003326:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800332a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800332e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003332:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003336:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800333a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800333e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003342:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003346:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 800334a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800334e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003356:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 800335a:	ed97 7a00 	vldr	s14, [r7]
 800335e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003366:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 800336a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800336e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003372:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003376:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800337e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 8003382:	ed97 7a00 	vldr	s14, [r7]
 8003386:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800338e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 8003392:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003396:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 800339a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800339e:	657b      	str	r3, [r7, #84]	@ 0x54
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 80033a4:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80033a8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 80033b0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80033ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033be:	667b      	str	r3, [r7, #100]	@ 0x64
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80033d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033d4:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 80033d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033da:	2224      	movs	r2, #36	@ 0x24
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f009 ff0b 	bl	800d1fa <memset>
    float FPFT[3][3] = {0};
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	2224      	movs	r2, #36	@ 0x24
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f009 ff04 	bl	800d1fa <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033f8:	e06a      	b.n	80034d0 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003400:	e05d      	b.n	80034be <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 8003402:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	33d8      	adds	r3, #216	@ 0xd8
 8003416:	443b      	add	r3, r7
 8003418:	3ba8      	subs	r3, #168	@ 0xa8
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003426:	e041      	b.n	80034ac <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003428:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	33d8      	adds	r3, #216	@ 0xd8
 800343c:	443b      	add	r3, r7
 800343e:	3ba8      	subs	r3, #168	@ 0xa8
 8003440:	ed93 7a00 	vldr	s14, [r3]
 8003444:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	33d8      	adds	r3, #216	@ 0xd8
 8003458:	443b      	add	r3, r7
 800345a:	3b84      	subs	r3, #132	@ 0x84
 800345c:	edd3 6a00 	vldr	s13, [r3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003470:	4413      	add	r3, r2
 8003472:	3302      	adds	r3, #2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3304      	adds	r3, #4
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	33d8      	adds	r3, #216	@ 0xd8
 800349a:	443b      	add	r3, r7
 800349c:	3ba8      	subs	r3, #168	@ 0xa8
 800349e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80034a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034a6:	3301      	adds	r3, #1
 80034a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	ddb9      	ble.n	8003428 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 80034b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80034b8:	3301      	adds	r3, #1
 80034ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	dd9d      	ble.n	8003402 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 80034c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ca:	3301      	adds	r3, #1
 80034cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	dd90      	ble.n	80033fa <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034de:	e069      	b.n	80035b4 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034e6:	e05c      	b.n	80035a2 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80034e8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	33d8      	adds	r3, #216	@ 0xd8
 80034fc:	443b      	add	r3, r7
 80034fe:	3bcc      	subs	r3, #204	@ 0xcc
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800350c:	e040      	b.n	8003590 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 800350e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	33d8      	adds	r3, #216	@ 0xd8
 8003522:	443b      	add	r3, r7
 8003524:	3bcc      	subs	r3, #204	@ 0xcc
 8003526:	ed93 7a00 	vldr	s14, [r3]
 800352a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	33d8      	adds	r3, #216	@ 0xd8
 800353e:	443b      	add	r3, r7
 8003540:	3ba8      	subs	r3, #168	@ 0xa8
 8003542:	edd3 6a00 	vldr	s13, [r3]
 8003546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	33d8      	adds	r3, #216	@ 0xd8
 800355a:	443b      	add	r3, r7
 800355c:	3b84      	subs	r3, #132	@ 0x84
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	33d8      	adds	r3, #216	@ 0xd8
 800357e:	443b      	add	r3, r7
 8003580:	3bcc      	subs	r3, #204	@ 0xcc
 8003582:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800358a:	3301      	adds	r3, #1
 800358c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003594:	2b02      	cmp	r3, #2
 8003596:	ddba      	ble.n	800350e <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800359c:	3301      	adds	r3, #1
 800359e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	dd9e      	ble.n	80034e8 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 80035aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035ae:	3301      	adds	r3, #1
 80035b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	dd91      	ble.n	80034e0 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035c2:	e03e      	b.n	8003642 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035ca:	e031      	b.n	8003630 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 80035cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	33d8      	adds	r3, #216	@ 0xd8
 80035e0:	443b      	add	r3, r7
 80035e2:	3bcc      	subs	r3, #204	@ 0xcc
 80035e4:	ed93 7a00 	vldr	s14, [r3]
 80035e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	33d8      	adds	r3, #216	@ 0xd8
 80035fc:	443b      	add	r3, r7
 80035fe:	3b60      	subs	r3, #96	@ 0x60
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003618:	4413      	add	r3, r2
 800361a:	3302      	adds	r3, #2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3304      	adds	r3, #4
 8003622:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800362a:	3301      	adds	r3, #1
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003634:	2b02      	cmp	r3, #2
 8003636:	ddc9      	ble.n	80035cc <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800363c:	3301      	adds	r3, #1
 800363e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003646:	2b02      	cmp	r3, #2
 8003648:	ddbc      	ble.n	80035c4 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	37d8      	adds	r7, #216	@ 0xd8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b0f6      	sub	sp, #472	@ 0x1d8
 8003658:	af00      	add	r7, sp, #0
 800365a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800365e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003662:	6018      	str	r0, [r3, #0]
 8003664:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003668:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800366c:	ed83 0a00 	vstr	s0, [r3]
 8003670:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003674:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003678:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 800367c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003680:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 826b 	beq.w	8003b64 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800369e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80036a2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 80036a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 80036b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036b8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	edd3 7a02 	vldr	s15, [r3, #8]
 80036c2:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ca:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 80036ce:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80036e8:	e044      	b.n	8003774 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 80036ea:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80036ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036f2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80036fc:	3302      	adds	r3, #2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	3304      	adds	r3, #4
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370c:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 8003710:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003714:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800371e:	3305      	adds	r3, #5
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003732:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003736:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800373a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003744:	3308      	adds	r3, #8
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003758:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003762:	443b      	add	r3, r7
 8003764:	3bac      	subs	r3, #172	@ 0xac
 8003766:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 800376a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800376e:	3301      	adds	r3, #1
 8003770:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003774:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003778:	2b02      	cmp	r3, #2
 800377a:	ddb6      	ble.n	80036ea <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 800377c:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003780:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003788:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 800378c:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003798:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 800379c:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80037a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037ac:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80037b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ba:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 80037be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 80037ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ce:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 80037d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d6:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80037e0:	e04f      	b.n	8003882 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 80037e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037e6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	330c      	adds	r3, #12
 80037fc:	ed93 7a00 	vldr	s14, [r3]
 8003800:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003808:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800380c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3304      	adds	r3, #4
 8003824:	edd3 6a00 	vldr	s13, [r3]
 8003828:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 800382c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003834:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003838:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3314      	adds	r3, #20
 800384e:	edd3 6a00 	vldr	s13, [r3]
 8003852:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800385a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800385e:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003870:	443b      	add	r3, r7
 8003872:	3bb8      	subs	r3, #184	@ 0xb8
 8003874:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003878:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800387c:	3301      	adds	r3, #1
 800387e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003882:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003886:	2b02      	cmp	r3, #2
 8003888:	ddab      	ble.n	80037e2 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003890:	e029      	b.n	80038e6 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003892:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003896:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	ed93 7a00 	vldr	s14, [r3]
 80038a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80038b2:	443b      	add	r3, r7
 80038b4:	3bb8      	subs	r3, #184	@ 0xb8
 80038b6:	edd3 6a00 	vldr	s13, [r3]
 80038ba:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 80038be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038ca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80038dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80038e0:	3301      	adds	r3, #1
 80038e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80038e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	ddd1      	ble.n	8003892 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80038ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80038f6:	4618      	mov	r0, r3
 80038f8:	2324      	movs	r3, #36	@ 0x24
 80038fa:	461a      	mov	r2, r3
 80038fc:	2100      	movs	r1, #0
 80038fe:	f009 fc7c 	bl	800d1fa <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003902:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003906:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800390a:	4618      	mov	r0, r3
 800390c:	2324      	movs	r3, #36	@ 0x24
 800390e:	461a      	mov	r2, r3
 8003910:	2100      	movs	r1, #0
 8003912:	f009 fc72 	bl	800d1fa <memset>

        for (int i = 0; i < 3; i++) {
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800391c:	e062      	b.n	80039e4 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003924:	e055      	b.n	80039d2 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003926:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003930:	443b      	add	r3, r7
 8003932:	3bb8      	subs	r3, #184	@ 0xb8
 8003934:	ed93 7a00 	vldr	s14, [r3]
 8003938:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003942:	443b      	add	r3, r7
 8003944:	3ba0      	subs	r3, #160	@ 0xa0
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003952:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003956:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 800396e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003972:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003976:	429a      	cmp	r2, r3
 8003978:	d102      	bne.n	8003980 <KalmanFilter_MeasurementUpdate+0x32c>
 800397a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800397e:	e001      	b.n	8003984 <KalmanFilter_MeasurementUpdate+0x330>
 8003980:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003c70 <KalmanFilter_MeasurementUpdate+0x61c>
 8003984:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003988:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800398c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ac:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80039b0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 80039c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80039cc:	3301      	adds	r3, #1
 80039ce:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	dda5      	ble.n	8003926 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 80039da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039de:	3301      	adds	r3, #1
 80039e0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80039e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	dd98      	ble.n	800391e <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039f2:	e076      	b.n	8003ae2 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80039fa:	e069      	b.n	8003ad0 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 80039fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a00:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003a04:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003a24:	e04b      	b.n	8003abe <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003a26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a2a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003a2e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	ed93 7a00 	vldr	s14, [r3]
 8003a46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a4a:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003a4e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	edd3 6a00 	vldr	s13, [r3]
 8003a66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a6a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a74:	4613      	mov	r3, r2
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4413      	add	r3, r2
 8003a7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003a7e:	4413      	add	r3, r2
 8003a80:	3302      	adds	r3, #2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3304      	adds	r3, #4
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a98:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003a9c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ab4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003abe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	ddaf      	ble.n	8003a26 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003ac6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003aca:	3301      	adds	r3, #1
 8003acc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ad0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	dd91      	ble.n	80039fc <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003ad8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003adc:	3301      	adds	r3, #1
 8003ade:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003ae2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	dd84      	ble.n	80039f4 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003af0:	e032      	b.n	8003b58 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003af8:	e025      	b.n	8003b46 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003afa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003afe:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003b02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b1c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003b30:	4413      	add	r3, r2
 8003b32:	3302      	adds	r3, #2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4403      	add	r3, r0
 8003b38:	3304      	adds	r3, #4
 8003b3a:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003b3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b40:	3301      	adds	r3, #1
 8003b42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003b46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	ddd5      	ble.n	8003afa <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003b4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003b52:	3301      	adds	r3, #1
 8003b54:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003b58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	ddc8      	ble.n	8003af2 <KalmanFilter_MeasurementUpdate+0x49e>
 8003b60:	f000 bcc2 	b.w	80044e8 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003b64:	4b43      	ldr	r3, [pc, #268]	@ (8003c74 <KalmanFilter_MeasurementUpdate+0x620>)
 8003b66:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b74:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003b78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b7c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b8a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003b94:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003b98:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b9c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	edd3 7a00 	vldr	s15, [r3]
 8003ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003baa:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003bae:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003bb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bb6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc4:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003bc8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
 8003bd8:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003bda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	6053      	str	r3, [r2, #4]
 8003bea:	6093      	str	r3, [r2, #8]
 8003bec:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003bee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003bfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bfe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003c20:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c24:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003c2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c34:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003c3c:	e079      	b.n	8003d32 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003c44:	e06c      	b.n	8003d20 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003c46:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c5c:	443b      	add	r3, r7
 8003c5e:	3bf8      	subs	r3, #248	@ 0xf8
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003c6c:	e04f      	b.n	8003d0e <KalmanFilter_MeasurementUpdate+0x6ba>
 8003c6e:	bf00      	nop
 8003c70:	00000000 	.word	0x00000000
 8003c74:	08011628 	.word	0x08011628
 8003c78:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003c7c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c92:	443b      	add	r3, r7
 8003c94:	3bf8      	subs	r3, #248	@ 0xf8
 8003c96:	ed93 7a00 	vldr	s14, [r3]
 8003c9a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003cb0:	443b      	add	r3, r7
 8003cb2:	3bd0      	subs	r3, #208	@ 0xd0
 8003cb4:	edd3 6a00 	vldr	s13, [r3]
 8003cb8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cbc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3304      	adds	r3, #4
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003cfc:	443b      	add	r3, r7
 8003cfe:	3bf8      	subs	r3, #248	@ 0xf8
 8003d00:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003d04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003d0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	ddb2      	ble.n	8003c7c <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003d16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003d20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	dd8e      	ble.n	8003c46 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003d28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003d32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	dd81      	ble.n	8003c3e <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003d40:	e098      	b.n	8003e74 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003d48:	e08a      	b.n	8003e60 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003d4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d4e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003d52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d56:	0059      	lsls	r1, r3, #1
 8003d58:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d5c:	440b      	add	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003d6e:	e042      	b.n	8003df6 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003d70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d74:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003d78:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d7c:	0059      	lsls	r1, r3, #1
 8003d7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d82:	440b      	add	r3, r1
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	ed93 7a00 	vldr	s14, [r3]
 8003d8c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003da2:	443b      	add	r3, r7
 8003da4:	3bf8      	subs	r3, #248	@ 0xf8
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003dc0:	443b      	add	r3, r7
 8003dc2:	3bd0      	subs	r3, #208	@ 0xd0
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dd4:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003dd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ddc:	0059      	lsls	r1, r3, #1
 8003dde:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003de2:	440b      	add	r3, r1
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003dec:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003df0:	3301      	adds	r3, #1
 8003df2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003df6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	ddb8      	ble.n	8003d70 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003dfe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e02:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e0a:	0059      	lsls	r1, r3, #1
 8003e0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e10:	440b      	add	r3, r1
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e1e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003e22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e26:	0059      	lsls	r1, r3, #1
 8003e28:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e2c:	440b      	add	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e3e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003e42:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e46:	0059      	lsls	r1, r3, #1
 8003e48:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e4c:	440b      	add	r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003e56:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003e60:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f77f af70 	ble.w	8003d4a <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003e6a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f77f af62 	ble.w	8003d42 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003e7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e86:	ed93 7a00 	vldr	s14, [r3]
 8003e8a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e92:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e9a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ea2:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ea6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eae:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eba:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003ebe:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003ec2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ec6:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003c78 <KalmanFilter_MeasurementUpdate+0x624>
 8003eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	f100 8308 	bmi.w	80044e6 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003ed6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ede:	edd3 6a03 	vldr	s13, [r3, #12]
 8003ee2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003eea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003ef2:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003ef6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003efe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f02:	eef1 6a67 	vneg.f32	s13, s15
 8003f06:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003f0e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f16:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8003f1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f26:	eef1 6a67 	vneg.f32	s13, s15
 8003f2a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003f32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f3a:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8003f3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f46:	edd3 6a00 	vldr	s13, [r3]
 8003f4a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003f52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f5a:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8003f5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f62:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	6053      	str	r3, [r2, #4]
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	60d3      	str	r3, [r2, #12]
 8003f72:	6113      	str	r3, [r2, #16]
 8003f74:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8003f76:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f7a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2300      	movs	r3, #0
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	6053      	str	r3, [r2, #4]
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	60d3      	str	r3, [r2, #12]
 8003f8a:	6113      	str	r3, [r2, #16]
 8003f8c:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003f94:	e06f      	b.n	8004076 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003f9c:	e062      	b.n	8004064 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8003f9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fa2:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003fa6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003faa:	0059      	lsls	r1, r3, #1
 8003fac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fb0:	440b      	add	r3, r1
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003fc2:	e046      	b.n	8004052 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003fc4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fc8:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003fcc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003fd0:	0059      	lsls	r1, r3, #1
 8003fd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fd6:	440b      	add	r3, r1
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	ed93 7a00 	vldr	s14, [r3]
 8003fe0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003fee:	4613      	mov	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3304      	adds	r3, #4
 8004002:	edd3 6a00 	vldr	s13, [r3]
 8004006:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800401c:	443b      	add	r3, r7
 800401e:	3bd0      	subs	r3, #208	@ 0xd0
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004030:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004034:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004038:	0059      	lsls	r1, r3, #1
 800403a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800403e:	440b      	add	r3, r1
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004048:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800404c:	3301      	adds	r3, #1
 800404e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004052:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004056:	2b02      	cmp	r3, #2
 8004058:	ddb4      	ble.n	8003fc4 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 800405a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800405e:	3301      	adds	r3, #1
 8004060:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004064:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004068:	2b01      	cmp	r3, #1
 800406a:	dd98      	ble.n	8003f9e <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 800406c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004070:	3301      	adds	r3, #1
 8004072:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004076:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800407a:	2b02      	cmp	r3, #2
 800407c:	dd8b      	ble.n	8003f96 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004084:	e069      	b.n	800415a <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800408c:	e05c      	b.n	8004148 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 800408e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004092:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004096:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800409a:	0059      	lsls	r1, r3, #1
 800409c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040a0:	440b      	add	r3, r1
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80040b2:	e040      	b.n	8004136 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 80040b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80040bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80040c0:	0059      	lsls	r1, r3, #1
 80040c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040c6:	440b      	add	r3, r1
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	ed93 7a00 	vldr	s14, [r3]
 80040d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040d4:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80040d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80040dc:	0059      	lsls	r1, r3, #1
 80040de:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040e2:	440b      	add	r3, r1
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	edd3 6a00 	vldr	s13, [r3]
 80040ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040f0:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80040f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80040f8:	0059      	lsls	r1, r3, #1
 80040fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040fe:	440b      	add	r3, r1
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	edd3 7a00 	vldr	s15, [r3]
 8004108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004110:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004114:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004118:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800411c:	0059      	lsls	r1, r3, #1
 800411e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004122:	440b      	add	r3, r1
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 800412c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004130:	3301      	adds	r3, #1
 8004132:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004136:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800413a:	2b01      	cmp	r3, #1
 800413c:	ddba      	ble.n	80040b4 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 800413e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004142:	3301      	adds	r3, #1
 8004144:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004148:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800414c:	2b01      	cmp	r3, #1
 800414e:	dd9e      	ble.n	800408e <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8004150:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004154:	3301      	adds	r3, #1
 8004156:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800415a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800415e:	2b02      	cmp	r3, #2
 8004160:	dd91      	ble.n	8004086 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004168:	e042      	b.n	80041f0 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004170:	e035      	b.n	80041de <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 8004172:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004176:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	ed93 7a00 	vldr	s14, [r3]
 8004188:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800418c:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004190:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004194:	0059      	lsls	r1, r3, #1
 8004196:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800419a:	440b      	add	r3, r1
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	edd3 6a00 	vldr	s13, [r3]
 80041a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80041ae:	443b      	add	r3, r7
 80041b0:	3be0      	subs	r3, #224	@ 0xe0
 80041b2:	edd3 7a00 	vldr	s15, [r3]
 80041b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80041d4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80041d8:	3301      	adds	r3, #1
 80041da:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80041de:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	ddc5      	ble.n	8004172 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80041e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80041ea:	3301      	adds	r3, #1
 80041ec:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80041f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	ddb8      	ble.n	800416a <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80041f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041fc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004200:	4618      	mov	r0, r3
 8004202:	2324      	movs	r3, #36	@ 0x24
 8004204:	461a      	mov	r2, r3
 8004206:	2100      	movs	r1, #0
 8004208:	f008 fff7 	bl	800d1fa <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 800420c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004210:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004214:	4618      	mov	r0, r3
 8004216:	2324      	movs	r3, #36	@ 0x24
 8004218:	461a      	mov	r2, r3
 800421a:	2100      	movs	r1, #0
 800421c:	f008 ffed 	bl	800d1fa <memset>

        for (int i = 0; i < 3; i++) {
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004226:	e09e      	b.n	8004366 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800422e:	e090      	b.n	8004352 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004230:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004234:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004238:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004258:	e045      	b.n	80042e6 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 800425a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800425e:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004262:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	ed93 7a00 	vldr	s14, [r3]
 800427a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800427e:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004282:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004286:	0059      	lsls	r1, r3, #1
 8004288:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800428c:	440b      	add	r3, r1
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	edd3 6a00 	vldr	s13, [r3]
 8004296:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80042ac:	443b      	add	r3, r7
 80042ae:	3bd0      	subs	r3, #208	@ 0xd0
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042c0:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80042c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80042dc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80042e0:	3301      	adds	r3, #1
 80042e2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80042e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	ddb5      	ble.n	800425a <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80042ee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80042f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d102      	bne.n	8004300 <KalmanFilter_MeasurementUpdate+0xcac>
 80042fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042fe:	e001      	b.n	8004304 <KalmanFilter_MeasurementUpdate+0xcb0>
 8004300:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80044f0 <KalmanFilter_MeasurementUpdate+0xe9c>
 8004304:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004308:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800430c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	edd3 7a00 	vldr	s15, [r3]
 8004324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004328:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800432c:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004330:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004348:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800434c:	3301      	adds	r3, #1
 800434e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004352:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004356:	2b02      	cmp	r3, #2
 8004358:	f77f af6a 	ble.w	8004230 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 800435c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004360:	3301      	adds	r3, #1
 8004362:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004366:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800436a:	2b02      	cmp	r3, #2
 800436c:	f77f af5c 	ble.w	8004228 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004376:	e076      	b.n	8004466 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800437e:	e069      	b.n	8004454 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 8004380:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004384:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004388:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80043a8:	e04b      	b.n	8004442 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80043aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043ae:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80043b2:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	ed93 7a00 	vldr	s14, [r3]
 80043ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043ce:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80043d2:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	edd3 6a00 	vldr	s13, [r3]
 80043ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043ee:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80043f8:	4613      	mov	r3, r2
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4413      	add	r3, r2
 80043fe:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004402:	4413      	add	r3, r2
 8004404:	3302      	adds	r3, #2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3304      	adds	r3, #4
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004418:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800441c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004420:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004438:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800443c:	3301      	adds	r3, #1
 800443e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004442:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004446:	2b02      	cmp	r3, #2
 8004448:	ddaf      	ble.n	80043aa <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 800444a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800444e:	3301      	adds	r3, #1
 8004450:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004454:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004458:	2b02      	cmp	r3, #2
 800445a:	dd91      	ble.n	8004380 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 800445c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004460:	3301      	adds	r3, #1
 8004462:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004466:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800446a:	2b02      	cmp	r3, #2
 800446c:	dd84      	ble.n	8004378 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800446e:	2300      	movs	r3, #0
 8004470:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004474:	e032      	b.n	80044dc <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800447c:	e025      	b.n	80044ca <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 800447e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004482:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004486:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800448a:	4613      	mov	r3, r2
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4413      	add	r3, r2
 8004490:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044a0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80044b4:	4413      	add	r3, r2
 80044b6:	3302      	adds	r3, #2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4403      	add	r3, r0
 80044bc:	3304      	adds	r3, #4
 80044be:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80044c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80044c4:	3301      	adds	r3, #1
 80044c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80044ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	ddd5      	ble.n	800447e <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 80044d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044d6:	3301      	adds	r3, #1
 80044d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80044dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	ddc8      	ble.n	8004476 <KalmanFilter_MeasurementUpdate+0xe22>
 80044e4:	e000      	b.n	80044e8 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80044e6:	bf00      	nop
            }
        }
    }
}
 80044e8:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bdb0      	pop	{r4, r5, r7, pc}
 80044f0:	00000000 	.word	0x00000000

080044f4 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450a:	d517      	bpl.n	800453c <KalmanFilter_DetectApogee+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	d50c      	bpl.n	800453c <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	2b04      	cmp	r3, #4
 8004532:	dd06      	ble.n	8004542 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800453a:	e002      	b.n	8004542 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	ee07 3a90 	vmov	s15, r3
}
 800456a:	eeb0 0a67 	vmov.f32	s0, s15
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004596:	f003 f9a5 	bl	80078e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800459a:	f000 f8a7 	bl	80046ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800459e:	f000 fa37 	bl	8004a10 <MX_GPIO_Init>
  MX_DMA_Init();
 80045a2:	f000 fa0d 	bl	80049c0 <MX_DMA_Init>
  MX_I2C1_Init();
 80045a6:	f000 f90d 	bl	80047c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80045aa:	f000 f939 	bl	8004820 <MX_I2C3_Init>
  MX_TIM2_Init();
 80045ae:	f000 f965 	bl	800487c <MX_TIM2_Init>
  MX_UART5_Init();
 80045b2:	f000 f9b1 	bl	8004918 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80045b6:	f000 f9d9 	bl	800496c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	MX_TIM2_Init();
 80045ba:	f000 f95f 	bl	800487c <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80045be:	4840      	ldr	r0, [pc, #256]	@ (80046c0 <main+0x130>)
 80045c0:	f006 f8b2 	bl	800a728 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2101      	movs	r1, #1
 80045c8:	201c      	movs	r0, #28
 80045ca:	f003 fb20 	bl	8007c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045ce:	201c      	movs	r0, #28
 80045d0:	f003 fb39 	bl	8007c46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80045d4:	2201      	movs	r2, #1
 80045d6:	2100      	movs	r1, #0
 80045d8:	2028      	movs	r0, #40	@ 0x28
 80045da:	f003 fb18 	bl	8007c0e <HAL_NVIC_SetPriority>


	bme280_begin();
 80045de:	f000 faed 	bl	8004bbc <bme280_begin>
	HAL_Delay(1000);
 80045e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80045e6:	f003 f9ef 	bl	80079c8 <HAL_Delay>
	bme280_config();
 80045ea:	f7fc fef7 	bl	80013dc <bme280_config>

	bmi_imu_init();
 80045ee:	f000 fafd 	bl	8004bec <bmi_imu_init>
    bmi088_config(&BMI_sensor);
 80045f2:	4834      	ldr	r0, [pc, #208]	@ (80046c4 <main+0x134>)
 80045f4:	f7fd fd2e 	bl	8002054 <bmi088_config>
    get_offset(&BMI_sensor);
 80045f8:	4832      	ldr	r0, [pc, #200]	@ (80046c4 <main+0x134>)
 80045fa:	f7fe fb1d 	bl	8002c38 <get_offset>
	bme280_update();
 80045fe:	f7fd f8a9 	bl	8001754 <bme280_update>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004602:	2028      	movs	r0, #40	@ 0x28
 8004604:	f003 fb1f 	bl	8007c46 <HAL_NVIC_EnableIRQ>
	getInitialQuaternion();
 8004608:	f002 f802 	bl	8006610 <getInitialQuaternion>

	//Lora Ayarı
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);

	sensor_fusion_init(&BME280_sensor);
 800460c:	482e      	ldr	r0, [pc, #184]	@ (80046c8 <main+0x138>)
 800460e:	f002 fa7f 	bl	8006b10 <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, 36);
 8004612:	2224      	movs	r2, #36	@ 0x24
 8004614:	492d      	ldr	r1, [pc, #180]	@ (80046cc <main+0x13c>)
 8004616:	482e      	ldr	r0, [pc, #184]	@ (80046d0 <main+0x140>)
 8004618:	f006 fdfe 	bl	800b218 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(50.0,2000.0,500.0,60.0);
 800461c:	eddf 1a2d 	vldr	s3, [pc, #180]	@ 80046d4 <main+0x144>
 8004620:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 80046d8 <main+0x148>
 8004624:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80046dc <main+0x14c>
 8004628:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80046e0 <main+0x150>
 800462c:	f7fe fd34 	bl	8003098 <flight_algorithm_set_parameters>


	uart_handler_init();
 8004630:	f002 ff96 	bl	8007560 <uart_handler_init>
	flight_algorithm_init();
 8004634:	f7fe fb6c 	bl	8002d10 <flight_algorithm_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  bmi088_update(&BMI_sensor);
 8004638:	4822      	ldr	r0, [pc, #136]	@ (80046c4 <main+0x134>)
 800463a:	f7fd ff0d 	bl	8002458 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 800463e:	4929      	ldr	r1, [pc, #164]	@ (80046e4 <main+0x154>)
 8004640:	4820      	ldr	r0, [pc, #128]	@ (80046c4 <main+0x134>)
 8004642:	f002 fb6b 	bl	8006d1c <sensor_fusion_update_mahony>
		  bme280_update();
 8004646:	f7fd f885 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 800464a:	f002 ffa3 	bl	8007594 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 800464e:	f003 f89f 	bl	8007790 <uart_handler_command_ready>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <main+0xda>
			  uart_handler_clear_command_flag();
 8004658:	f003 f8c8 	bl	80077ec <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 800465c:	f003 f88c 	bl	8007778 <uart_handler_get_mode>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <main+0xda>
				  flight_algorithm_reset();
 8004666:	f7fe fb59 	bl	8002d1c <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <main+0x158>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0e1      	beq.n	8004638 <main+0xa8>
			tx_timer_flag = 0;
 8004674:	4b1c      	ldr	r3, [pc, #112]	@ (80046e8 <main+0x158>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
			//IMU_visual();
			SystemMode_t current_mode = uart_handler_get_mode();
 800467a:	f003 f87d 	bl	8007778 <uart_handler_get_mode>
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d016      	beq.n	80046b6 <main+0x126>
 8004688:	2b02      	cmp	r3, #2
 800468a:	dcd5      	bgt.n	8004638 <main+0xa8>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <main+0x106>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d00b      	beq.n	80046ac <main+0x11c>
 8004694:	e012      	b.n	80046bc <main+0x12c>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004696:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <main+0x154>)
 8004698:	490a      	ldr	r1, [pc, #40]	@ (80046c4 <main+0x134>)
 800469a:	480b      	ldr	r0, [pc, #44]	@ (80046c8 <main+0x138>)
 800469c:	f002 fa8c 	bl	8006bb8 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 80046a0:	4a10      	ldr	r2, [pc, #64]	@ (80046e4 <main+0x154>)
 80046a2:	4908      	ldr	r1, [pc, #32]	@ (80046c4 <main+0x134>)
 80046a4:	4808      	ldr	r0, [pc, #32]	@ (80046c8 <main+0x138>)
 80046a6:	f7fe fb89 	bl	8002dbc <flight_algorithm_update>
						break;
 80046aa:	e007      	b.n	80046bc <main+0x12c>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 80046ac:	4905      	ldr	r1, [pc, #20]	@ (80046c4 <main+0x134>)
 80046ae:	4806      	ldr	r0, [pc, #24]	@ (80046c8 <main+0x138>)
 80046b0:	f002 fed4 	bl	800745c <test_modes_handle_sit>
						break;
 80046b4:	e002      	b.n	80046bc <main+0x12c>

					case MODE_SUT:
						algorithm_update_sut();
 80046b6:	f002 fee9 	bl	800748c <algorithm_update_sut>
						break;
 80046ba:	bf00      	nop
	  	  bmi088_update(&BMI_sensor);
 80046bc:	e7bc      	b.n	8004638 <main+0xa8>
 80046be:	bf00      	nop
 80046c0:	2000031c 	.word	0x2000031c
 80046c4:	200004f8 	.word	0x200004f8
 80046c8:	200004b4 	.word	0x200004b4
 80046cc:	20000594 	.word	0x20000594
 80046d0:	200003ac 	.word	0x200003ac
 80046d4:	42700000 	.word	0x42700000
 80046d8:	43fa0000 	.word	0x43fa0000
 80046dc:	44fa0000 	.word	0x44fa0000
 80046e0:	42480000 	.word	0x42480000
 80046e4:	20000578 	.word	0x20000578
 80046e8:	200005e4 	.word	0x200005e4

080046ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b094      	sub	sp, #80	@ 0x50
 80046f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046f2:	f107 031c 	add.w	r3, r7, #28
 80046f6:	2234      	movs	r2, #52	@ 0x34
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f008 fd7d 	bl	800d1fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	2300      	movs	r3, #0
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	4b29      	ldr	r3, [pc, #164]	@ (80047bc <SystemClock_Config+0xd0>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004718:	4a28      	ldr	r2, [pc, #160]	@ (80047bc <SystemClock_Config+0xd0>)
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004720:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <SystemClock_Config+0xd0>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800472c:	2300      	movs	r3, #0
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	4b23      	ldr	r3, [pc, #140]	@ (80047c0 <SystemClock_Config+0xd4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	@ (80047c0 <SystemClock_Config+0xd4>)
 8004736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b20      	ldr	r3, [pc, #128]	@ (80047c0 <SystemClock_Config+0xd4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004748:	2301      	movs	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800474c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004752:	2302      	movs	r3, #2
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800475a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800475c:	2308      	movs	r3, #8
 800475e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004760:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004764:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004766:	2302      	movs	r3, #2
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800476a:	2302      	movs	r3, #2
 800476c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800476e:	2302      	movs	r3, #2
 8004770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004772:	f107 031c 	add.w	r3, r7, #28
 8004776:	4618      	mov	r0, r3
 8004778:	f005 fce8 	bl	800a14c <HAL_RCC_OscConfig>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004782:	f000 faef 	bl	8004d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004786:	230f      	movs	r3, #15
 8004788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800478a:	2302      	movs	r3, #2
 800478c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004792:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800479c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	2105      	movs	r1, #5
 80047a4:	4618      	mov	r0, r3
 80047a6:	f005 f987 	bl	8009ab8 <HAL_RCC_ClockConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80047b0:	f000 fad8 	bl	8004d64 <Error_Handler>
  }
}
 80047b4:	bf00      	nop
 80047b6:	3750      	adds	r7, #80	@ 0x50
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40007000 	.word	0x40007000

080047c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047c8:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047ca:	4a13      	ldr	r2, [pc, #76]	@ (8004818 <MX_I2C1_Init+0x54>)
 80047cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80047ce:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047d0:	4a12      	ldr	r2, [pc, #72]	@ (800481c <MX_I2C1_Init+0x58>)
 80047d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047dc:	2200      	movs	r2, #0
 80047de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80047ee:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047f4:	4b07      	ldr	r3, [pc, #28]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <MX_I2C1_Init+0x50>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004800:	4804      	ldr	r0, [pc, #16]	@ (8004814 <MX_I2C1_Init+0x50>)
 8004802:	f004 f905 	bl	8008a10 <HAL_I2C_Init>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800480c:	f000 faaa 	bl	8004d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000274 	.word	0x20000274
 8004818:	40005400 	.word	0x40005400
 800481c:	000186a0 	.word	0x000186a0

08004820 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004824:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <MX_I2C3_Init+0x50>)
 8004826:	4a13      	ldr	r2, [pc, #76]	@ (8004874 <MX_I2C3_Init+0x54>)
 8004828:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800482a:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <MX_I2C3_Init+0x50>)
 800482c:	4a12      	ldr	r2, [pc, #72]	@ (8004878 <MX_I2C3_Init+0x58>)
 800482e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <MX_I2C3_Init+0x50>)
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004836:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <MX_I2C3_Init+0x50>)
 8004838:	2200      	movs	r2, #0
 800483a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800483c:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <MX_I2C3_Init+0x50>)
 800483e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004842:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <MX_I2C3_Init+0x50>)
 8004846:	2200      	movs	r2, #0
 8004848:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800484a:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <MX_I2C3_Init+0x50>)
 800484c:	2200      	movs	r2, #0
 800484e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <MX_I2C3_Init+0x50>)
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <MX_I2C3_Init+0x50>)
 8004858:	2200      	movs	r2, #0
 800485a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800485c:	4804      	ldr	r0, [pc, #16]	@ (8004870 <MX_I2C3_Init+0x50>)
 800485e:	f004 f8d7 	bl	8008a10 <HAL_I2C_Init>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004868:	f000 fa7c 	bl	8004d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200002c8 	.word	0x200002c8
 8004874:	40005c00 	.word	0x40005c00
 8004878:	000186a0 	.word	0x000186a0

0800487c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004882:	f107 0308 	add.w	r3, r7, #8
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	609a      	str	r2, [r3, #8]
 800488e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004890:	463b      	mov	r3, r7
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004898:	4b1e      	ldr	r3, [pc, #120]	@ (8004914 <MX_TIM2_Init+0x98>)
 800489a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800489e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 80048a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048a2:	f242 3227 	movw	r2, #8999	@ 0x2327
 80048a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80048ae:	4b19      	ldr	r3, [pc, #100]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80048b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b6:	4b17      	ldr	r3, [pc, #92]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048bc:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048be:	2200      	movs	r2, #0
 80048c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048c2:	4814      	ldr	r0, [pc, #80]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048c4:	f005 fee0 	bl	800a688 <HAL_TIM_Base_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80048ce:	f000 fa49 	bl	8004d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	4619      	mov	r1, r3
 80048de:	480d      	ldr	r0, [pc, #52]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048e0:	f006 f882 	bl	800a9e8 <HAL_TIM_ConfigClockSource>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80048ea:	f000 fa3b 	bl	8004d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048ee:	2300      	movs	r3, #0
 80048f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048f6:	463b      	mov	r3, r7
 80048f8:	4619      	mov	r1, r3
 80048fa:	4806      	ldr	r0, [pc, #24]	@ (8004914 <MX_TIM2_Init+0x98>)
 80048fc:	f006 faa4 	bl	800ae48 <HAL_TIMEx_MasterConfigSynchronization>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004906:	f000 fa2d 	bl	8004d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000031c 	.word	0x2000031c

08004918 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800491c:	4b11      	ldr	r3, [pc, #68]	@ (8004964 <MX_UART5_Init+0x4c>)
 800491e:	4a12      	ldr	r2, [pc, #72]	@ (8004968 <MX_UART5_Init+0x50>)
 8004920:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004922:	4b10      	ldr	r3, [pc, #64]	@ (8004964 <MX_UART5_Init+0x4c>)
 8004924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004928:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800492a:	4b0e      	ldr	r3, [pc, #56]	@ (8004964 <MX_UART5_Init+0x4c>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004930:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <MX_UART5_Init+0x4c>)
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <MX_UART5_Init+0x4c>)
 8004938:	2200      	movs	r2, #0
 800493a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800493c:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <MX_UART5_Init+0x4c>)
 800493e:	220c      	movs	r2, #12
 8004940:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <MX_UART5_Init+0x4c>)
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <MX_UART5_Init+0x4c>)
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800494e:	4805      	ldr	r0, [pc, #20]	@ (8004964 <MX_UART5_Init+0x4c>)
 8004950:	f006 fb0a 	bl	800af68 <HAL_UART_Init>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800495a:	f000 fa03 	bl	8004d64 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000364 	.word	0x20000364
 8004968:	40005000 	.word	0x40005000

0800496c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004970:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 8004972:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <MX_USART1_UART_Init+0x50>)
 8004974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004976:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 8004978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800497c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800497e:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 8004980:	2200      	movs	r2, #0
 8004982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 8004986:	2200      	movs	r2, #0
 8004988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800498a:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 800498c:	2200      	movs	r2, #0
 800498e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 8004992:	220c      	movs	r2, #12
 8004994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004996:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 8004998:	2200      	movs	r2, #0
 800499a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800499c:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049a2:	4805      	ldr	r0, [pc, #20]	@ (80049b8 <MX_USART1_UART_Init+0x4c>)
 80049a4:	f006 fae0 	bl	800af68 <HAL_UART_Init>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049ae:	f000 f9d9 	bl	8004d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200003ac 	.word	0x200003ac
 80049bc:	40011000 	.word	0x40011000

080049c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	4b10      	ldr	r3, [pc, #64]	@ (8004a0c <MX_DMA_Init+0x4c>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	4a0f      	ldr	r2, [pc, #60]	@ (8004a0c <MX_DMA_Init+0x4c>)
 80049d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049d6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <MX_DMA_Init+0x4c>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	203a      	movs	r0, #58	@ 0x3a
 80049e8:	f003 f911 	bl	8007c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80049ec:	203a      	movs	r0, #58	@ 0x3a
 80049ee:	f003 f92a 	bl	8007c46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	2046      	movs	r0, #70	@ 0x46
 80049f8:	f003 f909 	bl	8007c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80049fc:	2046      	movs	r0, #70	@ 0x46
 80049fe:	f003 f922 	bl	8007c46 <HAL_NVIC_EnableIRQ>

}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	@ 0x28
 8004a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	4b60      	ldr	r3, [pc, #384]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a30:	f043 0304 	orr.w	r3, r3, #4
 8004a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a36:	4b5d      	ldr	r3, [pc, #372]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	4a58      	ldr	r2, [pc, #352]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a52:	4b56      	ldr	r3, [pc, #344]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b52      	ldr	r3, [pc, #328]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	4a51      	ldr	r2, [pc, #324]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	4a4a      	ldr	r2, [pc, #296]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8a:	4b48      	ldr	r3, [pc, #288]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4b44      	ldr	r3, [pc, #272]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a43      	ldr	r2, [pc, #268]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004aa0:	f043 0308 	orr.w	r3, r3, #8
 8004aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa6:	4b41      	ldr	r3, [pc, #260]	@ (8004bac <MX_GPIO_Init+0x19c>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f240 4104 	movw	r1, #1028	@ 0x404
 8004ab8:	483d      	ldr	r0, [pc, #244]	@ (8004bb0 <MX_GPIO_Init+0x1a0>)
 8004aba:	f003 ff77 	bl	80089ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ac4:	483a      	ldr	r0, [pc, #232]	@ (8004bb0 <MX_GPIO_Init+0x1a0>)
 8004ac6:	f003 ff71 	bl	80089ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2140      	movs	r1, #64	@ 0x40
 8004ace:	4839      	ldr	r0, [pc, #228]	@ (8004bb4 <MX_GPIO_Init+0x1a4>)
 8004ad0:	f003 ff6c 	bl	80089ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ada:	4837      	ldr	r0, [pc, #220]	@ (8004bb8 <MX_GPIO_Init+0x1a8>)
 8004adc:	f003 ff66 	bl	80089ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14;
 8004ae0:	f244 4304 	movw	r3, #17412	@ 0x4404
 8004ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aee:	2300      	movs	r3, #0
 8004af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	4619      	mov	r1, r3
 8004af8:	482d      	ldr	r0, [pc, #180]	@ (8004bb0 <MX_GPIO_Init+0x1a0>)
 8004afa:	f003 fccf 	bl	800849c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004afe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4619      	mov	r1, r3
 8004b14:	4826      	ldr	r0, [pc, #152]	@ (8004bb0 <MX_GPIO_Init+0x1a0>)
 8004b16:	f003 fcc1 	bl	800849c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004b1a:	2340      	movs	r3, #64	@ 0x40
 8004b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2a:	f107 0314 	add.w	r3, r7, #20
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4820      	ldr	r0, [pc, #128]	@ (8004bb4 <MX_GPIO_Init+0x1a4>)
 8004b32:	f003 fcb3 	bl	800849c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b44:	2300      	movs	r3, #0
 8004b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	481a      	ldr	r0, [pc, #104]	@ (8004bb8 <MX_GPIO_Init+0x1a8>)
 8004b50:	f003 fca4 	bl	800849c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b64:	f107 0314 	add.w	r3, r7, #20
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4813      	ldr	r0, [pc, #76]	@ (8004bb8 <MX_GPIO_Init+0x1a8>)
 8004b6c:	f003 fc96 	bl	800849c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	2028      	movs	r0, #40	@ 0x28
 8004b76:	f003 f84a 	bl	8007c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b7a:	2028      	movs	r0, #40	@ 0x28
 8004b7c:	f003 f863 	bl	8007c46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004b80:	2200      	movs	r2, #0
 8004b82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b86:	480a      	ldr	r0, [pc, #40]	@ (8004bb0 <MX_GPIO_Init+0x1a0>)
 8004b88:	f003 ff10 	bl	80089ac <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004b8c:	2032      	movs	r0, #50	@ 0x32
 8004b8e:	f002 ff1b 	bl	80079c8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004b92:	2201      	movs	r2, #1
 8004b94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b98:	4805      	ldr	r0, [pc, #20]	@ (8004bb0 <MX_GPIO_Init+0x1a0>)
 8004b9a:	f003 ff07 	bl	80089ac <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8004b9e:	2032      	movs	r0, #50	@ 0x32
 8004ba0:	f002 ff12 	bl	80079c8 <HAL_Delay>
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ba4:	bf00      	nop
 8004ba6:	3728      	adds	r7, #40	@ 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40020800 	.word	0x40020800
 8004bb8:	40020000 	.word	0x40020000

08004bbc <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004bc0:	4b08      	ldr	r3, [pc, #32]	@ (8004be4 <bme280_begin+0x28>)
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <bme280_begin+0x28>)
 8004bc8:	2203      	movs	r2, #3
 8004bca:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <bme280_begin+0x28>)
 8004bce:	2204      	movs	r2, #4
 8004bd0:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8004bd2:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <bme280_begin+0x28>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 8004bd8:	4903      	ldr	r1, [pc, #12]	@ (8004be8 <bme280_begin+0x2c>)
 8004bda:	4802      	ldr	r0, [pc, #8]	@ (8004be4 <bme280_begin+0x28>)
 8004bdc:	f7fc fd82 	bl	80016e4 <bme280_init>

}
 8004be0:	bf00      	nop
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200004b4 	.word	0x200004b4
 8004be8:	20000274 	.word	0x20000274

08004bec <bmi_imu_init>:

//BMI sensor struct filled with configuration settings. Then called bmi088_init function.
uint8_t bmi_imu_init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	//Acc config
	BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8004bf0:	4b13      	ldr	r3, [pc, #76]	@ (8004c40 <bmi_imu_init+0x54>)
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	719a      	strb	r2, [r3, #6]
	BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <bmi_imu_init+0x54>)
 8004bf8:	2209      	movs	r2, #9
 8004bfa:	71da      	strb	r2, [r3, #7]
	BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8004bfc:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <bmi_imu_init+0x54>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	711a      	strb	r2, [r3, #4]
	BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8004c02:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c04:	2203      	movs	r2, #3
 8004c06:	715a      	strb	r2, [r3, #5]

	// Gyro config
	BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8004c08:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	725a      	strb	r2, [r3, #9]
	BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	729a      	strb	r2, [r3, #10]
	BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8004c14:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	721a      	strb	r2, [r3, #8]

	BMI_sensor.device_config.acc_IRQ = EXTI15_10_IRQn;
 8004c1a:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c1c:	2228      	movs	r2, #40	@ 0x28
 8004c1e:	741a      	strb	r2, [r3, #16]
	BMI_sensor.device_config.gyro_IRQ = EXTI15_10_IRQn;
 8004c20:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c22:	2228      	movs	r2, #40	@ 0x28
 8004c24:	745a      	strb	r2, [r3, #17]
	BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8004c26:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c28:	4a06      	ldr	r2, [pc, #24]	@ (8004c44 <bmi_imu_init+0x58>)
 8004c2a:	60da      	str	r2, [r3, #12]
	BMI_sensor.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 8004c2c:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	615a      	str	r2, [r3, #20]

	return	bmi088_init(&BMI_sensor);
 8004c32:	4803      	ldr	r0, [pc, #12]	@ (8004c40 <bmi_imu_init+0x54>)
 8004c34:	f7fd f9b6 	bl	8001fa4 <bmi088_init>
 8004c38:	4603      	mov	r3, r0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200004f8 	.word	0x200004f8
 8004c44:	200002c8 	.word	0x200002c8

08004c48 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12)
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c58:	d102      	bne.n	8004c60 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&BMI_sensor);
 8004c5a:	4807      	ldr	r0, [pc, #28]	@ (8004c78 <HAL_GPIO_EXTI_Callback+0x30>)
 8004c5c:	f7fd ffd2 	bl	8002c04 <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c66:	d102      	bne.n	8004c6e <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&BMI_sensor);
 8004c68:	4803      	ldr	r0, [pc, #12]	@ (8004c78 <HAL_GPIO_EXTI_Callback+0x30>)
 8004c6a:	f7fd ffd8 	bl	8002c1e <bmi088_set_gyro_INT>
	}
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200004f8 	.word	0x200004f8

08004c7c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc4 <HAL_UARTEx_RxEventCallback+0x48>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d114      	bne.n	8004cbc <HAL_UARTEx_RxEventCallback+0x40>
        usart1_packet_ready = 1;
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
        usart1_packet_size = Size;
 8004c98:	4a0c      	ldr	r2, [pc, #48]	@ (8004ccc <HAL_UARTEx_RxEventCallback+0x50>)
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, sizeof(usart1_rx_buffer));
 8004c9e:	2224      	movs	r2, #36	@ 0x24
 8004ca0:	490b      	ldr	r1, [pc, #44]	@ (8004cd0 <HAL_UARTEx_RxEventCallback+0x54>)
 8004ca2:	480c      	ldr	r0, [pc, #48]	@ (8004cd4 <HAL_UARTEx_RxEventCallback+0x58>)
 8004ca4:	f006 fab8 	bl	800b218 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <HAL_UARTEx_RxEventCallback+0x58>)
 8004caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b08      	ldr	r3, [pc, #32]	@ (8004cd4 <HAL_UARTEx_RxEventCallback+0x58>)
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0208 	bic.w	r2, r2, #8
 8004cba:	601a      	str	r2, [r3, #0]
    }
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	200005e0 	.word	0x200005e0
 8004ccc:	200005e2 	.word	0x200005e2
 8004cd0:	20000594 	.word	0x20000594
 8004cd4:	200003ac 	.word	0x200003ac

08004cd8 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce8:	d102      	bne.n	8004cf0 <HAL_TIM_PeriodElapsedCallback+0x18>
        tx_timer_flag = 1;
 8004cea:	4b04      	ldr	r3, [pc, #16]	@ (8004cfc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	701a      	strb	r2, [r3, #0]
    }
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	200005e4 	.word	0x200005e4

08004d00 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a05      	ldr	r2, [pc, #20]	@ (8004d24 <HAL_UART_TxCpltCallback+0x24>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d102      	bne.n	8004d18 <HAL_UART_TxCpltCallback+0x18>
        usart1_tx_busy = 0;
 8004d12:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <HAL_UART_TxCpltCallback+0x28>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
    }
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40011000 	.word	0x40011000
 8004d28:	200005e5 	.word	0x200005e5

08004d2c <uart1_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart1_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
    if (!usart1_tx_busy) {
 8004d38:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <uart1_send_packet_dma+0x30>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d108      	bne.n	8004d54 <uart1_send_packet_dma+0x28>
        usart1_tx_busy = 1;
 8004d42:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <uart1_send_packet_dma+0x30>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, data, size);
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4804      	ldr	r0, [pc, #16]	@ (8004d60 <uart1_send_packet_dma+0x34>)
 8004d50:	f006 f9e6 	bl	800b120 <HAL_UART_Transmit_DMA>
    }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	200005e5 	.word	0x200005e5
 8004d60:	200003ac 	.word	0x200003ac

08004d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d68:	b672      	cpsid	i
}
 8004d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <Error_Handler+0x8>

08004d70 <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	e00a      	b.n	8004d98 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8004d82:	4a0e      	ldr	r2, [pc, #56]	@ (8004dbc <check_sum_hesapla_sit+0x4c>)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	dbf0      	blt.n	8004d82 <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	425a      	negs	r2, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	bf58      	it	pl
 8004daa:	4253      	negpl	r3, r2
 8004dac:	b2db      	uxtb	r3, r3
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	200005e8 	.word	0x200005e8

08004dc0 <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <round2+0x50>)
 8004dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dd4:	f7fb fc30 	bl	8000638 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	ec43 2b17 	vmov	d7, r2, r3
 8004de0:	eeb0 0a47 	vmov.f32	s0, s14
 8004de4:	eef0 0a67 	vmov.f32	s1, s15
 8004de8:	f00a fb1a 	bl	800f420 <round>
 8004dec:	ec51 0b10 	vmov	r0, r1, d0
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <round2+0x50>)
 8004df6:	f7fb fd49 	bl	800088c <__aeabi_ddiv>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e02:	eeb0 0a47 	vmov.f32	s0, s14
 8004e06:	eef0 0a67 	vmov.f32	s1, s15
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40590000 	.word	0x40590000

08004e14 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8004e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800505c <addDataPacketSit+0x248>)
 8004e20:	22ab      	movs	r2, #171	@ 0xab
 8004e22:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e34:	ee17 0a90 	vmov	r0, s15
 8004e38:	f7fb fba6 	bl	8000588 <__aeabi_f2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	ec43 2b10 	vmov	d0, r2, r3
 8004e44:	f7ff ffbc 	bl	8004dc0 <round2>
 8004e48:	ec53 2b10 	vmov	r2, r3, d0
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f7fb feca 	bl	8000be8 <__aeabi_d2f>
 8004e54:	4603      	mov	r3, r0
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8004e58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800505c <addDataPacketSit+0x248>)
 8004e5e:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8004e60:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004e64:	4b7d      	ldr	r3, [pc, #500]	@ (800505c <addDataPacketSit+0x248>)
 8004e66:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8004e68:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004e6c:	4b7b      	ldr	r3, [pc, #492]	@ (800505c <addDataPacketSit+0x248>)
 8004e6e:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8004e70:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004e74:	4b79      	ldr	r3, [pc, #484]	@ (800505c <addDataPacketSit+0x248>)
 8004e76:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb83 	bl	8000588 <__aeabi_f2d>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	ec43 2b10 	vmov	d0, r2, r3
 8004e8a:	f7ff ff99 	bl	8004dc0 <round2>
 8004e8e:	ec53 2b10 	vmov	r2, r3, d0
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	f7fb fea7 	bl	8000be8 <__aeabi_d2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8004e9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800505c <addDataPacketSit+0x248>)
 8004ea4:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8004ea6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800505c <addDataPacketSit+0x248>)
 8004eac:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8004eae:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800505c <addDataPacketSit+0x248>)
 8004eb4:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8004eb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004eba:	4b68      	ldr	r3, [pc, #416]	@ (800505c <addDataPacketSit+0x248>)
 8004ebc:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fb fb60 	bl	8000588 <__aeabi_f2d>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	ec43 2b10 	vmov	d0, r2, r3
 8004ed0:	f7ff ff76 	bl	8004dc0 <round2>
 8004ed4:	ec53 2b10 	vmov	r2, r3, d0
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	f7fb fe84 	bl	8000be8 <__aeabi_d2f>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8004ee4:	7ffa      	ldrb	r2, [r7, #31]
 8004ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800505c <addDataPacketSit+0x248>)
 8004ee8:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8004eea:	7fba      	ldrb	r2, [r7, #30]
 8004eec:	4b5b      	ldr	r3, [pc, #364]	@ (800505c <addDataPacketSit+0x248>)
 8004eee:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8004ef0:	7f7a      	ldrb	r2, [r7, #29]
 8004ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800505c <addDataPacketSit+0x248>)
 8004ef4:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8004ef6:	7f3a      	ldrb	r2, [r7, #28]
 8004ef8:	4b58      	ldr	r3, [pc, #352]	@ (800505c <addDataPacketSit+0x248>)
 8004efa:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fb fb41 	bl	8000588 <__aeabi_f2d>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	ec43 2b10 	vmov	d0, r2, r3
 8004f0e:	f7ff ff57 	bl	8004dc0 <round2>
 8004f12:	ec53 2b10 	vmov	r2, r3, d0
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fb fe65 	bl	8000be8 <__aeabi_d2f>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8004f22:	7efa      	ldrb	r2, [r7, #27]
 8004f24:	4b4d      	ldr	r3, [pc, #308]	@ (800505c <addDataPacketSit+0x248>)
 8004f26:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8004f28:	7eba      	ldrb	r2, [r7, #26]
 8004f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800505c <addDataPacketSit+0x248>)
 8004f2c:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8004f2e:	7e7a      	ldrb	r2, [r7, #25]
 8004f30:	4b4a      	ldr	r3, [pc, #296]	@ (800505c <addDataPacketSit+0x248>)
 8004f32:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8004f34:	7e3a      	ldrb	r2, [r7, #24]
 8004f36:	4b49      	ldr	r3, [pc, #292]	@ (800505c <addDataPacketSit+0x248>)
 8004f38:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb fb22 	bl	8000588 <__aeabi_f2d>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	ec43 2b10 	vmov	d0, r2, r3
 8004f4c:	f7ff ff38 	bl	8004dc0 <round2>
 8004f50:	ec53 2b10 	vmov	r2, r3, d0
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fb fe46 	bl	8000be8 <__aeabi_d2f>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8004f60:	7dfa      	ldrb	r2, [r7, #23]
 8004f62:	4b3e      	ldr	r3, [pc, #248]	@ (800505c <addDataPacketSit+0x248>)
 8004f64:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8004f66:	7dba      	ldrb	r2, [r7, #22]
 8004f68:	4b3c      	ldr	r3, [pc, #240]	@ (800505c <addDataPacketSit+0x248>)
 8004f6a:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8004f6c:	7d7a      	ldrb	r2, [r7, #21]
 8004f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800505c <addDataPacketSit+0x248>)
 8004f70:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8004f72:	7d3a      	ldrb	r2, [r7, #20]
 8004f74:	4b39      	ldr	r3, [pc, #228]	@ (800505c <addDataPacketSit+0x248>)
 8004f76:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_x); // Jiroskop X degerinin atamasini yapiyoruz.
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fb fb03 	bl	8000588 <__aeabi_f2d>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	ec43 2b10 	vmov	d0, r2, r3
 8004f8a:	f7ff ff19 	bl	8004dc0 <round2>
 8004f8e:	ec53 2b10 	vmov	r2, r3, d0
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	f7fb fe27 	bl	8000be8 <__aeabi_d2f>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8004f9e:	7cfa      	ldrb	r2, [r7, #19]
 8004fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800505c <addDataPacketSit+0x248>)
 8004fa2:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8004fa4:	7cba      	ldrb	r2, [r7, #18]
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <addDataPacketSit+0x248>)
 8004fa8:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8004faa:	7c7a      	ldrb	r2, [r7, #17]
 8004fac:	4b2b      	ldr	r3, [pc, #172]	@ (800505c <addDataPacketSit+0x248>)
 8004fae:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8004fb0:	7c3a      	ldrb	r2, [r7, #16]
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800505c <addDataPacketSit+0x248>)
 8004fb4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb fae4 	bl	8000588 <__aeabi_f2d>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	ec43 2b10 	vmov	d0, r2, r3
 8004fc8:	f7ff fefa 	bl	8004dc0 <round2>
 8004fcc:	ec53 2b10 	vmov	r2, r3, d0
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fb fe08 	bl	8000be8 <__aeabi_d2f>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	4b1f      	ldr	r3, [pc, #124]	@ (800505c <addDataPacketSit+0x248>)
 8004fe0:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8004fe2:	7bba      	ldrb	r2, [r7, #14]
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <addDataPacketSit+0x248>)
 8004fe6:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8004fe8:	7b7a      	ldrb	r2, [r7, #13]
 8004fea:	4b1c      	ldr	r3, [pc, #112]	@ (800505c <addDataPacketSit+0x248>)
 8004fec:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8004fee:	7b3a      	ldrb	r2, [r7, #12]
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800505c <addDataPacketSit+0x248>)
 8004ff2:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->datas.angle_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb fac5 	bl	8000588 <__aeabi_f2d>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	ec43 2b10 	vmov	d0, r2, r3
 8005006:	f7ff fedb 	bl	8004dc0 <round2>
 800500a:	ec53 2b10 	vmov	r2, r3, d0
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	f7fb fde9 	bl	8000be8 <__aeabi_d2f>
 8005016:	4603      	mov	r3, r0
 8005018:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 800501a:	7afa      	ldrb	r2, [r7, #11]
 800501c:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <addDataPacketSit+0x248>)
 800501e:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8005020:	7aba      	ldrb	r2, [r7, #10]
 8005022:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <addDataPacketSit+0x248>)
 8005024:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8005026:	7a7a      	ldrb	r2, [r7, #9]
 8005028:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <addDataPacketSit+0x248>)
 800502a:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 800502c:	7a3a      	ldrb	r2, [r7, #8]
 800502e:	4b0b      	ldr	r3, [pc, #44]	@ (800505c <addDataPacketSit+0x248>)
 8005030:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8005034:	2021      	movs	r0, #33	@ 0x21
 8005036:	f7ff fe9b 	bl	8004d70 <check_sum_hesapla_sit>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <addDataPacketSit+0x248>)
 8005040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <addDataPacketSit+0x248>)
 8005046:	220d      	movs	r2, #13
 8005048:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 800504c:	4b03      	ldr	r3, [pc, #12]	@ (800505c <addDataPacketSit+0x248>)
 800504e:	220a      	movs	r2, #10
 8005050:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8005054:	bf00      	nop
 8005056:	3728      	adds	r7, #40	@ 0x28
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200005e8 	.word	0x200005e8

08005060 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	78db      	ldrb	r3, [r3, #3]
 800506c:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	789b      	ldrb	r3, [r3, #2]
 8005072:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	ee07 3a90 	vmov	s15, r3
}
 8005086:	eeb0 0a67 	vmov.f32	s0, s15
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b09e      	sub	sp, #120	@ 0x78
 8005098:	af00      	add	r7, sp, #0
 800509a:	ed87 0a03 	vstr	s0, [r7, #12]
 800509e:	edc7 0a02 	vstr	s1, [r7, #8]
 80050a2:	ed87 1a01 	vstr	s2, [r7, #4]
 80050a6:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 80050b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80050b4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80050b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 80050bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80050c0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80050c4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 80050c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80050cc:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80050d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 80050e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80050e6:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80050ea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 80050f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80050f6:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 80050fa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	653b      	str	r3, [r7, #80]	@ 0x50
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005110:	edd7 7a03 	vldr	s15, [r7, #12]
 8005114:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005118:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
 800512c:	609a      	str	r2, [r3, #8]
 800512e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8005130:	2300      	movs	r3, #0
 8005132:	677b      	str	r3, [r7, #116]	@ 0x74
 8005134:	e043      	b.n	80051be <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8005136:	2300      	movs	r3, #0
 8005138:	673b      	str	r3, [r7, #112]	@ 0x70
 800513a:	e024      	b.n	8005186 <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 800513c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3378      	adds	r3, #120	@ 0x78
 8005142:	443b      	add	r3, r7
 8005144:	3b68      	subs	r3, #104	@ 0x68
 8005146:	ed93 7a00 	vldr	s14, [r3]
 800514a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514c:	009a      	lsls	r2, r3, #2
 800514e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3378      	adds	r3, #120	@ 0x78
 8005156:	443b      	add	r3, r7
 8005158:	3b58      	subs	r3, #88	@ 0x58
 800515a:	edd3 6a00 	vldr	s13, [r3]
 800515e:	4a5d      	ldr	r2, [pc, #372]	@ (80052d4 <ekf_predict+0x240>)
 8005160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	edd3 7a00 	vldr	s15, [r3]
 800516a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	3378      	adds	r3, #120	@ 0x78
 8005178:	443b      	add	r3, r7
 800517a:	3b68      	subs	r3, #104	@ 0x68
 800517c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8005180:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005182:	3301      	adds	r3, #1
 8005184:	673b      	str	r3, [r7, #112]	@ 0x70
 8005186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005188:	2b03      	cmp	r3, #3
 800518a:	ddd7      	ble.n	800513c <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 800518c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	3378      	adds	r3, #120	@ 0x78
 8005192:	443b      	add	r3, r7
 8005194:	3b68      	subs	r3, #104	@ 0x68
 8005196:	ed93 7a00 	vldr	s14, [r3]
 800519a:	edd7 7a00 	vldr	s15, [r7]
 800519e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80051a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	3378      	adds	r3, #120	@ 0x78
 80051b0:	443b      	add	r3, r7
 80051b2:	3b68      	subs	r3, #104	@ 0x68
 80051b4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 80051b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ba:	3301      	adds	r3, #1
 80051bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80051be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	ddb8      	ble.n	8005136 <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 80051c4:	2300      	movs	r3, #0
 80051c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051c8:	e017      	b.n	80051fa <ekf_predict+0x166>
        q[i] += dq[i];
 80051ca:	4a42      	ldr	r2, [pc, #264]	@ (80052d4 <ekf_predict+0x240>)
 80051cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	ed93 7a00 	vldr	s14, [r3]
 80051d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	3378      	adds	r3, #120	@ 0x78
 80051dc:	443b      	add	r3, r7
 80051de:	3b68      	subs	r3, #104	@ 0x68
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e8:	4a3a      	ldr	r2, [pc, #232]	@ (80052d4 <ekf_predict+0x240>)
 80051ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80051f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f6:	3301      	adds	r3, #1
 80051f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	dde4      	ble.n	80051ca <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005200:	4b34      	ldr	r3, [pc, #208]	@ (80052d4 <ekf_predict+0x240>)
 8005202:	ed93 7a00 	vldr	s14, [r3]
 8005206:	4b33      	ldr	r3, [pc, #204]	@ (80052d4 <ekf_predict+0x240>)
 8005208:	edd3 7a00 	vldr	s15, [r3]
 800520c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005210:	4b30      	ldr	r3, [pc, #192]	@ (80052d4 <ekf_predict+0x240>)
 8005212:	edd3 6a01 	vldr	s13, [r3, #4]
 8005216:	4b2f      	ldr	r3, [pc, #188]	@ (80052d4 <ekf_predict+0x240>)
 8005218:	edd3 7a01 	vldr	s15, [r3, #4]
 800521c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005224:	4b2b      	ldr	r3, [pc, #172]	@ (80052d4 <ekf_predict+0x240>)
 8005226:	edd3 6a02 	vldr	s13, [r3, #8]
 800522a:	4b2a      	ldr	r3, [pc, #168]	@ (80052d4 <ekf_predict+0x240>)
 800522c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005238:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <ekf_predict+0x240>)
 800523a:	edd3 6a03 	vldr	s13, [r3, #12]
 800523e:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <ekf_predict+0x240>)
 8005240:	edd3 7a03 	vldr	s15, [r3, #12]
 8005244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800524c:	eeb0 0a67 	vmov.f32	s0, s15
 8005250:	f009 ff7c 	bl	800f14c <sqrtf>
 8005254:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800525c:	e012      	b.n	8005284 <ekf_predict+0x1f0>
        q[i] /= norm;
 800525e:	4a1d      	ldr	r2, [pc, #116]	@ (80052d4 <ekf_predict+0x240>)
 8005260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	edd3 6a00 	vldr	s13, [r3]
 800526a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800526e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005272:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <ekf_predict+0x240>)
 8005274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 800527e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005280:	3301      	adds	r3, #1
 8005282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005286:	2b03      	cmp	r3, #3
 8005288:	dde9      	ble.n	800525e <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	667b      	str	r3, [r7, #100]	@ 0x64
 800528e:	e018      	b.n	80052c2 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8005290:	4911      	ldr	r1, [pc, #68]	@ (80052d8 <ekf_predict+0x244>)
 8005292:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	edd3 7a00 	vldr	s15, [r3]
 80052a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80052dc <ekf_predict+0x248>
 80052a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052aa:	490b      	ldr	r1, [pc, #44]	@ (80052d8 <ekf_predict+0x244>)
 80052ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80052bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052be:	3301      	adds	r3, #1
 80052c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80052c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	dde3      	ble.n	8005290 <ekf_predict+0x1fc>
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	3778      	adds	r7, #120	@ 0x78
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000018 	.word	0x20000018
 80052d8:	2000060c 	.word	0x2000060c
 80052dc:	3727c5ac 	.word	0x3727c5ac

080052e0 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80052e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005390 <quaternionToYaw1+0xb0>)
 80052e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ec:	4b28      	ldr	r3, [pc, #160]	@ (8005390 <quaternionToYaw1+0xb0>)
 80052ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80052f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f6:	4b26      	ldr	r3, [pc, #152]	@ (8005390 <quaternionToYaw1+0xb0>)
 80052f8:	edd3 6a00 	vldr	s13, [r3]
 80052fc:	4b24      	ldr	r3, [pc, #144]	@ (8005390 <quaternionToYaw1+0xb0>)
 80052fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8005302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800530a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800530e:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <quaternionToYaw1+0xb0>)
 8005310:	ed93 7a00 	vldr	s14, [r3]
 8005314:	4b1e      	ldr	r3, [pc, #120]	@ (8005390 <quaternionToYaw1+0xb0>)
 8005316:	edd3 7a00 	vldr	s15, [r3]
 800531a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800531e:	4b1c      	ldr	r3, [pc, #112]	@ (8005390 <quaternionToYaw1+0xb0>)
 8005320:	edd3 6a01 	vldr	s13, [r3, #4]
 8005324:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <quaternionToYaw1+0xb0>)
 8005326:	edd3 7a01 	vldr	s15, [r3, #4]
 800532a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800532e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005332:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <quaternionToYaw1+0xb0>)
 8005334:	edd3 6a02 	vldr	s13, [r3, #8]
 8005338:	4b15      	ldr	r3, [pc, #84]	@ (8005390 <quaternionToYaw1+0xb0>)
 800533a:	edd3 7a02 	vldr	s15, [r3, #8]
 800533e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005342:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005346:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <quaternionToYaw1+0xb0>)
 8005348:	edd3 6a03 	vldr	s13, [r3, #12]
 800534c:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <quaternionToYaw1+0xb0>)
 800534e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800535a:	eef0 0a67 	vmov.f32	s1, s15
 800535e:	eeb0 0a46 	vmov.f32	s0, s12
 8005362:	f009 fef1 	bl	800f148 <atan2f>
 8005366:	eef0 7a40 	vmov.f32	s15, s0
 800536a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005394 <quaternionToYaw1+0xb4>
 800536e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005372:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005398 <quaternionToYaw1+0xb8>
 8005376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800537a:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	ee07 3a90 	vmov	s15, r3
}
 8005384:	eeb0 0a67 	vmov.f32	s0, s15
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000018 	.word	0x20000018
 8005394:	43340000 	.word	0x43340000
 8005398:	40490fd0 	.word	0x40490fd0

0800539c <quaternionToPitch1>:

float quaternionToPitch1(){
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80053a2:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <quaternionToPitch1+0x64>)
 80053a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80053a8:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <quaternionToPitch1+0x64>)
 80053aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053b2:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <quaternionToPitch1+0x64>)
 80053b4:	edd3 6a00 	vldr	s13, [r3]
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <quaternionToPitch1+0x64>)
 80053ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80053be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80053ca:	eeb0 0a67 	vmov.f32	s0, s15
 80053ce:	f009 fe8f 	bl	800f0f0 <asinf>
 80053d2:	eef0 7a40 	vmov.f32	s15, s0
 80053d6:	eef1 7a67 	vneg.f32	s15, s15
 80053da:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005404 <quaternionToPitch1+0x68>
 80053de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053e2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005408 <quaternionToPitch1+0x6c>
 80053e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053ea:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	ee07 3a90 	vmov	s15, r3
}
 80053f4:	eeb0 0a67 	vmov.f32	s0, s15
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000018 	.word	0x20000018
 8005404:	43340000 	.word	0x43340000
 8005408:	40490fd0 	.word	0x40490fd0

0800540c <quaternionToRoll1>:

float quaternionToRoll1(){
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8005412:	4b2a      	ldr	r3, [pc, #168]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005414:	ed93 7a00 	vldr	s14, [r3]
 8005418:	4b28      	ldr	r3, [pc, #160]	@ (80054bc <quaternionToRoll1+0xb0>)
 800541a:	edd3 7a01 	vldr	s15, [r3, #4]
 800541e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005422:	4b26      	ldr	r3, [pc, #152]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005424:	edd3 6a02 	vldr	s13, [r3, #8]
 8005428:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <quaternionToRoll1+0xb0>)
 800542a:	edd3 7a03 	vldr	s15, [r3, #12]
 800542e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005436:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800543a:	4b20      	ldr	r3, [pc, #128]	@ (80054bc <quaternionToRoll1+0xb0>)
 800543c:	ed93 7a00 	vldr	s14, [r3]
 8005440:	4b1e      	ldr	r3, [pc, #120]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005442:	edd3 7a00 	vldr	s15, [r3]
 8005446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800544a:	4b1c      	ldr	r3, [pc, #112]	@ (80054bc <quaternionToRoll1+0xb0>)
 800544c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005450:	4b1a      	ldr	r3, [pc, #104]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005452:	edd3 7a01 	vldr	s15, [r3, #4]
 8005456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800545a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800545e:	4b17      	ldr	r3, [pc, #92]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005460:	edd3 6a02 	vldr	s13, [r3, #8]
 8005464:	4b15      	ldr	r3, [pc, #84]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005466:	edd3 7a02 	vldr	s15, [r3, #8]
 800546a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800546e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005472:	4b12      	ldr	r3, [pc, #72]	@ (80054bc <quaternionToRoll1+0xb0>)
 8005474:	edd3 6a03 	vldr	s13, [r3, #12]
 8005478:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <quaternionToRoll1+0xb0>)
 800547a:	edd3 7a03 	vldr	s15, [r3, #12]
 800547e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005486:	eef0 0a67 	vmov.f32	s1, s15
 800548a:	eeb0 0a46 	vmov.f32	s0, s12
 800548e:	f009 fe5b 	bl	800f148 <atan2f>
 8005492:	eef0 7a40 	vmov.f32	s15, s0
 8005496:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80054c0 <quaternionToRoll1+0xb4>
 800549a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800549e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80054c4 <quaternionToRoll1+0xb8>
 80054a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054a6:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	ee07 3a90 	vmov	s15, r3
}
 80054b0:	eeb0 0a67 	vmov.f32	s0, s15
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000018 	.word	0x20000018
 80054c0:	43340000 	.word	0x43340000
 80054c4:	40490fd0 	.word	0x40490fd0

080054c8 <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80054ce:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <quaternionToYawDegree1+0x88>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <quaternionToYawDegree1+0x88>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <quaternionToYawDegree1+0x88>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005550 <quaternionToYawDegree1+0x88>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 80054e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80054ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80054ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054f2:	edd7 6a04 	vldr	s13, [r7, #16]
 80054f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005502:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005506:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800550a:	edd7 7a03 	vldr	s15, [r7, #12]
 800550e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005512:	edd7 7a02 	vldr	s15, [r7, #8]
 8005516:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800551a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005522:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800552a:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 800552e:	edd7 0a00 	vldr	s1, [r7]
 8005532:	ed97 0a01 	vldr	s0, [r7, #4]
 8005536:	f009 fe07 	bl	800f148 <atan2f>
 800553a:	eef0 7a40 	vmov.f32	s15, s0
 800553e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005554 <quaternionToYawDegree1+0x8c>
 8005542:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005546:	eeb0 0a67 	vmov.f32	s0, s15
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000018 	.word	0x20000018
 8005554:	42652ee0 	.word	0x42652ee0

08005558 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b08c      	sub	sp, #48	@ 0x30
 800555c:	af00      	add	r7, sp, #0
 800555e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005562:	edc7 0a02 	vstr	s1, [r7, #8]
 8005566:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800556a:	4bd5      	ldr	r3, [pc, #852]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800556c:	ed93 7a00 	vldr	s14, [r3]
 8005570:	4bd3      	ldr	r3, [pc, #844]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005572:	edd3 7a00 	vldr	s15, [r3]
 8005576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800557a:	4bd1      	ldr	r3, [pc, #836]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800557c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005580:	4bcf      	ldr	r3, [pc, #828]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005582:	edd3 7a01 	vldr	s15, [r3, #4]
 8005586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800558a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800558e:	4bcc      	ldr	r3, [pc, #816]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005590:	edd3 6a02 	vldr	s13, [r3, #8]
 8005594:	4bca      	ldr	r3, [pc, #808]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005596:	edd3 7a02 	vldr	s15, [r3, #8]
 800559a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800559e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a2:	4bc7      	ldr	r3, [pc, #796]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055a4:	edd3 6a03 	vldr	s13, [r3, #12]
 80055a8:	4bc5      	ldr	r3, [pc, #788]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80055ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b6:	eeb0 0a67 	vmov.f32	s0, s15
 80055ba:	f009 fdc7 	bl	800f14c <sqrtf>
 80055be:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80055c2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80055c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80055ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ce:	f000 8172 	beq.w	80058b6 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 80055d2:	4bbb      	ldr	r3, [pc, #748]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055d4:	edd3 6a00 	vldr	s13, [r3]
 80055d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80055dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e0:	4bb7      	ldr	r3, [pc, #732]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055e2:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 80055e6:	4bb6      	ldr	r3, [pc, #728]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80055ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80055f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f4:	4bb2      	ldr	r3, [pc, #712]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055f6:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80055fa:	4bb1      	ldr	r3, [pc, #708]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80055fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005600:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005608:	4bad      	ldr	r3, [pc, #692]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800560a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 800560e:	4bac      	ldr	r3, [pc, #688]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005610:	edd3 6a03 	vldr	s13, [r3, #12]
 8005614:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800561c:	4ba8      	ldr	r3, [pc, #672]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800561e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005622:	4ba7      	ldr	r3, [pc, #668]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005624:	ed93 7a01 	vldr	s14, [r3, #4]
 8005628:	4ba5      	ldr	r3, [pc, #660]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800562a:	edd3 7a03 	vldr	s15, [r3, #12]
 800562e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005632:	4ba3      	ldr	r3, [pc, #652]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005634:	edd3 6a00 	vldr	s13, [r3]
 8005638:	4ba1      	ldr	r3, [pc, #644]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800563a:	edd3 7a02 	vldr	s15, [r3, #8]
 800563e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005646:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800564a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 800564e:	4b9c      	ldr	r3, [pc, #624]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005650:	ed93 7a00 	vldr	s14, [r3]
 8005654:	4b9a      	ldr	r3, [pc, #616]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005656:	edd3 7a01 	vldr	s15, [r3, #4]
 800565a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800565e:	4b98      	ldr	r3, [pc, #608]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005660:	edd3 6a02 	vldr	s13, [r3, #8]
 8005664:	4b96      	ldr	r3, [pc, #600]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005666:	edd3 7a03 	vldr	s15, [r3, #12]
 800566a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800566e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005672:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005676:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 800567a:	4b91      	ldr	r3, [pc, #580]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800567c:	ed93 7a00 	vldr	s14, [r3]
 8005680:	4b8f      	ldr	r3, [pc, #572]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005682:	edd3 7a00 	vldr	s15, [r3]
 8005686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800568a:	4b8d      	ldr	r3, [pc, #564]	@ (80058c0 <UpdateMahonyGains+0x368>)
 800568c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005690:	4b8b      	ldr	r3, [pc, #556]	@ (80058c0 <UpdateMahonyGains+0x368>)
 8005692:	edd3 7a01 	vldr	s15, [r3, #4]
 8005696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800569a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800569e:	4b88      	ldr	r3, [pc, #544]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80056a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80056a4:	4b86      	ldr	r3, [pc, #536]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80056a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80056aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056b2:	4b83      	ldr	r3, [pc, #524]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80056b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80056b8:	4b81      	ldr	r3, [pc, #516]	@ (80058c0 <UpdateMahonyGains+0x368>)
 80056ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80056be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80056ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80056ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80056d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80056d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80056da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056de:	edd7 7a07 	vldr	s15, [r7, #28]
 80056e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80056e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ea:	eeb0 0a67 	vmov.f32	s0, s15
 80056ee:	f001 f8cb 	bl	8006888 <invSqrt>
 80056f2:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80056f6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80056fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005706:	ed97 7a08 	vldr	s14, [r7, #32]
 800570a:	edd7 7a06 	vldr	s15, [r7, #24]
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005716:	ed97 7a07 	vldr	s14, [r7, #28]
 800571a:	edd7 7a06 	vldr	s15, [r7, #24]
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005726:	edd7 7a03 	vldr	s15, [r7, #12]
 800572a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800572e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005732:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800573a:	edd7 7a01 	vldr	s15, [r7, #4]
 800573e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005746:	eeb0 0a67 	vmov.f32	s0, s15
 800574a:	f001 f89d 	bl	8006888 <invSqrt>
 800574e:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8005752:	ed97 7a03 	vldr	s14, [r7, #12]
 8005756:	edd7 7a05 	vldr	s15, [r7, #20]
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8005762:	ed97 7a02 	vldr	s14, [r7, #8]
 8005766:	edd7 7a05 	vldr	s15, [r7, #20]
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8005772:	ed97 7a01 	vldr	s14, [r7, #4]
 8005776:	edd7 7a05 	vldr	s15, [r7, #20]
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8005782:	ed97 7a03 	vldr	s14, [r7, #12]
 8005786:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800578a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800578e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005792:	edd7 7a08 	vldr	s15, [r7, #32]
 8005796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800579a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800579e:	edd7 6a01 	vldr	s13, [r7, #4]
 80057a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80057a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 80057b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80057b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	dd02      	ble.n	80057ca <UpdateMahonyGains+0x272>
 80057c4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 80057ca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80057ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80057d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057da:	d501      	bpl.n	80057e0 <UpdateMahonyGains+0x288>
 80057dc:	4b39      	ldr	r3, [pc, #228]	@ (80058c4 <UpdateMahonyGains+0x36c>)
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80057e0:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80057e4:	f009 fc58 	bl	800f098 <acosf>
 80057e8:	eef0 7a40 	vmov.f32	s15, s0
 80057ec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80058c8 <UpdateMahonyGains+0x370>
 80057f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057f4:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80057f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80057fc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005808:	dd0a      	ble.n	8005820 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 800580a:	4b30      	ldr	r3, [pc, #192]	@ (80058cc <UpdateMahonyGains+0x374>)
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005810:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <UpdateMahonyGains+0x378>)
 8005812:	4a30      	ldr	r2, [pc, #192]	@ (80058d4 <UpdateMahonyGains+0x37c>)
 8005814:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005816:	4b30      	ldr	r3, [pc, #192]	@ (80058d8 <UpdateMahonyGains+0x380>)
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e01d      	b.n	800585c <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005820:	edd7 7a04 	vldr	s15, [r7, #16]
 8005824:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	dd0a      	ble.n	8005848 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8005832:	4b26      	ldr	r3, [pc, #152]	@ (80058cc <UpdateMahonyGains+0x374>)
 8005834:	2202      	movs	r2, #2
 8005836:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005838:	4b25      	ldr	r3, [pc, #148]	@ (80058d0 <UpdateMahonyGains+0x378>)
 800583a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800583e:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005840:	4b25      	ldr	r3, [pc, #148]	@ (80058d8 <UpdateMahonyGains+0x380>)
 8005842:	4a26      	ldr	r2, [pc, #152]	@ (80058dc <UpdateMahonyGains+0x384>)
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e009      	b.n	800585c <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005848:	4b20      	ldr	r3, [pc, #128]	@ (80058cc <UpdateMahonyGains+0x374>)
 800584a:	2203      	movs	r2, #3
 800584c:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 800584e:	4b20      	ldr	r3, [pc, #128]	@ (80058d0 <UpdateMahonyGains+0x378>)
 8005850:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005854:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005856:	4b20      	ldr	r3, [pc, #128]	@ (80058d8 <UpdateMahonyGains+0x380>)
 8005858:	4a21      	ldr	r2, [pc, #132]	@ (80058e0 <UpdateMahonyGains+0x388>)
 800585a:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 800585c:	4b1c      	ldr	r3, [pc, #112]	@ (80058d0 <UpdateMahonyGains+0x378>)
 800585e:	edd3 7a00 	vldr	s15, [r3]
 8005862:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005866:	eeb0 0a67 	vmov.f32	s0, s15
 800586a:	f009 fcc2 	bl	800f1f2 <fminf>
 800586e:	eef0 7a40 	vmov.f32	s15, s0
 8005872:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80058e4 <UpdateMahonyGains+0x38c>
 8005876:	eeb0 0a67 	vmov.f32	s0, s15
 800587a:	f009 fc9d 	bl	800f1b8 <fmaxf>
 800587e:	eef0 7a40 	vmov.f32	s15, s0
 8005882:	4b13      	ldr	r3, [pc, #76]	@ (80058d0 <UpdateMahonyGains+0x378>)
 8005884:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005888:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <UpdateMahonyGains+0x380>)
 800588a:	edd3 7a00 	vldr	s15, [r3]
 800588e:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80058e8 <UpdateMahonyGains+0x390>
 8005892:	eeb0 0a67 	vmov.f32	s0, s15
 8005896:	f009 fcac 	bl	800f1f2 <fminf>
 800589a:	eef0 7a40 	vmov.f32	s15, s0
 800589e:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80058ec <UpdateMahonyGains+0x394>
 80058a2:	eeb0 0a67 	vmov.f32	s0, s15
 80058a6:	f009 fc87 	bl	800f1b8 <fmaxf>
 80058aa:	eef0 7a40 	vmov.f32	s15, s0
 80058ae:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <UpdateMahonyGains+0x380>)
 80058b0:	edc3 7a00 	vstr	s15, [r3]
 80058b4:	e000      	b.n	80058b8 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 80058b6:	bf00      	nop
}
 80058b8:	3730      	adds	r7, #48	@ 0x30
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000028 	.word	0x20000028
 80058c4:	bf800000 	.word	0xbf800000
 80058c8:	42652ee2 	.word	0x42652ee2
 80058cc:	20000658 	.word	0x20000658
 80058d0:	20000038 	.word	0x20000038
 80058d4:	3e4ccccd 	.word	0x3e4ccccd
 80058d8:	2000003c 	.word	0x2000003c
 80058dc:	3c23d70a 	.word	0x3c23d70a
 80058e0:	3d4ccccd 	.word	0x3d4ccccd
 80058e4:	3dcccccd 	.word	0x3dcccccd
 80058e8:	3d4ccccd 	.word	0x3d4ccccd
 80058ec:	00000000 	.word	0x00000000

080058f0 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	@ 0x28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	ed87 0a07 	vstr	s0, [r7, #28]
 80058fa:	edc7 0a06 	vstr	s1, [r7, #24]
 80058fe:	ed87 1a05 	vstr	s2, [r7, #20]
 8005902:	edc7 1a04 	vstr	s3, [r7, #16]
 8005906:	ed87 2a03 	vstr	s4, [r7, #12]
 800590a:	edc7 2a02 	vstr	s5, [r7, #8]
 800590e:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8005912:	4b60      	ldr	r3, [pc, #384]	@ (8005a94 <Orientation_Update+0x1a4>)
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8005916:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800591a:	edd7 7a04 	vldr	s15, [r7, #16]
 800591e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005926:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800592a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800592e:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <Orientation_Update+0x1a8>)
 8005930:	edd3 7a00 	vldr	s15, [r3]
 8005934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800593c:	4b56      	ldr	r3, [pc, #344]	@ (8005a98 <Orientation_Update+0x1a8>)
 800593e:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8005942:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005946:	edd7 7a03 	vldr	s15, [r7, #12]
 800594a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800594e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005952:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005956:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800595a:	4b50      	ldr	r3, [pc, #320]	@ (8005a9c <Orientation_Update+0x1ac>)
 800595c:	edd3 7a00 	vldr	s15, [r3]
 8005960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005968:	4b4c      	ldr	r3, [pc, #304]	@ (8005a9c <Orientation_Update+0x1ac>)
 800596a:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 800596e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005972:	edd7 7a02 	vldr	s15, [r7, #8]
 8005976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800597a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005982:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005986:	4b46      	ldr	r3, [pc, #280]	@ (8005aa0 <Orientation_Update+0x1b0>)
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005994:	4b42      	ldr	r3, [pc, #264]	@ (8005aa0 <Orientation_Update+0x1b0>)
 8005996:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 800599a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a98 <Orientation_Update+0x1a8>)
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <Orientation_Update+0x1ac>)
 80059a2:	ed93 7a00 	vldr	s14, [r3]
 80059a6:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa0 <Orientation_Update+0x1b0>)
 80059a8:	edd3 6a00 	vldr	s13, [r3]
 80059ac:	eeb0 1a66 	vmov.f32	s2, s13
 80059b0:	eef0 0a47 	vmov.f32	s1, s14
 80059b4:	eeb0 0a67 	vmov.f32	s0, s15
 80059b8:	f7ff fdce 	bl	8005558 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80059bc:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <Orientation_Update+0x1a8>)
 80059be:	ed93 7a00 	vldr	s14, [r3]
 80059c2:	4b35      	ldr	r3, [pc, #212]	@ (8005a98 <Orientation_Update+0x1a8>)
 80059c4:	edd3 7a00 	vldr	s15, [r3]
 80059c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059cc:	4b33      	ldr	r3, [pc, #204]	@ (8005a9c <Orientation_Update+0x1ac>)
 80059ce:	edd3 6a00 	vldr	s13, [r3]
 80059d2:	4b32      	ldr	r3, [pc, #200]	@ (8005a9c <Orientation_Update+0x1ac>)
 80059d4:	edd3 7a00 	vldr	s15, [r3]
 80059d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e0:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa0 <Orientation_Update+0x1b0>)
 80059e2:	edd3 6a00 	vldr	s13, [r3]
 80059e6:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa0 <Orientation_Update+0x1b0>)
 80059e8:	edd3 7a00 	vldr	s15, [r3]
 80059ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f4:	eeb0 0a67 	vmov.f32	s0, s15
 80059f8:	f009 fba8 	bl	800f14c <sqrtf>
 80059fc:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8005a00:	4b28      	ldr	r3, [pc, #160]	@ (8005aa4 <Orientation_Update+0x1b4>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8005a08:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a0c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005aa8 <Orientation_Update+0x1b8>
 8005a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	d50f      	bpl.n	8005a3a <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8005a1a:	4b22      	ldr	r3, [pc, #136]	@ (8005aa4 <Orientation_Update+0x1b4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	e00b      	b.n	8005a3a <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8005a22:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a26:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005aac <Orientation_Update+0x1bc>
 8005a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a32:	dd02      	ble.n	8005a3a <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8005a34:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <Orientation_Update+0x1b4>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa4 <Orientation_Update+0x1b4>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8005a42:	edd7 1a01 	vldr	s3, [r7, #4]
 8005a46:	ed97 1a05 	vldr	s2, [r7, #20]
 8005a4a:	edd7 0a06 	vldr	s1, [r7, #24]
 8005a4e:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a52:	f000 f82d 	bl	8005ab0 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8005a56:	e018      	b.n	8005a8a <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8005a58:	4b0f      	ldr	r3, [pc, #60]	@ (8005a98 <Orientation_Update+0x1a8>)
 8005a5a:	edd3 7a00 	vldr	s15, [r3]
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <Orientation_Update+0x1ac>)
 8005a60:	ed93 7a00 	vldr	s14, [r3]
 8005a64:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa0 <Orientation_Update+0x1b0>)
 8005a66:	edd3 6a00 	vldr	s13, [r3]
 8005a6a:	ed97 3a01 	vldr	s6, [r7, #4]
 8005a6e:	eef0 2a66 	vmov.f32	s5, s13
 8005a72:	eeb0 2a47 	vmov.f32	s4, s14
 8005a76:	eef0 1a67 	vmov.f32	s3, s15
 8005a7a:	ed97 1a05 	vldr	s2, [r7, #20]
 8005a7e:	edd7 0a06 	vldr	s1, [r7, #24]
 8005a82:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a86:	f000 f93b 	bl	8005d00 <MahonyAHRSupdateIMU>
}
 8005a8a:	bf00      	nop
 8005a8c:	3728      	adds	r7, #40	@ 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	3e99999a 	.word	0x3e99999a
 8005a98:	2000065c 	.word	0x2000065c
 8005a9c:	20000660 	.word	0x20000660
 8005aa0:	20000664 	.word	0x20000664
 8005aa4:	20000659 	.word	0x20000659
 8005aa8:	41d3d2db 	.word	0x41d3d2db
 8005aac:	420172a2 	.word	0x420172a2

08005ab0 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	@ 0x28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005aba:	edc7 0a02 	vstr	s1, [r7, #8]
 8005abe:	ed87 1a01 	vstr	s2, [r7, #4]
 8005ac2:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8005ac6:	4b8c      	ldr	r3, [pc, #560]	@ (8005cf8 <updateQuaternion+0x248>)
 8005ac8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005acc:	eeb1 7a67 	vneg.f32	s14, s15
 8005ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ad8:	4b87      	ldr	r3, [pc, #540]	@ (8005cf8 <updateQuaternion+0x248>)
 8005ada:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005aea:	4b83      	ldr	r3, [pc, #524]	@ (8005cf8 <updateQuaternion+0x248>)
 8005aec:	edd3 6a03 	vldr	s13, [r3, #12]
 8005af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005afc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8005b08:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b0a:	ed93 7a00 	vldr	s14, [r3]
 8005b0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b16:	4b78      	ldr	r3, [pc, #480]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b18:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b28:	4b73      	ldr	r3, [pc, #460]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b2a:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b42:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8005b46:	4b6c      	ldr	r3, [pc, #432]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b48:	ed93 7a00 	vldr	s14, [r3]
 8005b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b54:	4b68      	ldr	r3, [pc, #416]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b56:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b66:	4b64      	ldr	r3, [pc, #400]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b68:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b78:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b80:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8005b84:	4b5c      	ldr	r3, [pc, #368]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b86:	ed93 7a00 	vldr	s14, [r3]
 8005b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b92:	4b59      	ldr	r3, [pc, #356]	@ (8005cf8 <updateQuaternion+0x248>)
 8005b94:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b98:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ba4:	4b54      	ldr	r3, [pc, #336]	@ (8005cf8 <updateQuaternion+0x248>)
 8005ba6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005baa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bbe:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8005bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8005cf8 <updateQuaternion+0x248>)
 8005bc4:	ed93 7a00 	vldr	s14, [r3]
 8005bc8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005bcc:	edd7 7a00 	vldr	s15, [r7]
 8005bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bd8:	4b47      	ldr	r3, [pc, #284]	@ (8005cf8 <updateQuaternion+0x248>)
 8005bda:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8005bde:	4b46      	ldr	r3, [pc, #280]	@ (8005cf8 <updateQuaternion+0x248>)
 8005be0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005be4:	edd7 6a08 	vldr	s13, [r7, #32]
 8005be8:	edd7 7a00 	vldr	s15, [r7]
 8005bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf4:	4b40      	ldr	r3, [pc, #256]	@ (8005cf8 <updateQuaternion+0x248>)
 8005bf6:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8005bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf8 <updateQuaternion+0x248>)
 8005bfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8005c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c04:	edd7 7a00 	vldr	s15, [r7]
 8005c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c10:	4b39      	ldr	r3, [pc, #228]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c12:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8005c16:	4b38      	ldr	r3, [pc, #224]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c18:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c1c:	edd7 6a06 	vldr	s13, [r7, #24]
 8005c20:	edd7 7a00 	vldr	s15, [r7]
 8005c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c2c:	4b32      	ldr	r3, [pc, #200]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c2e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005c32:	4b31      	ldr	r3, [pc, #196]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c34:	ed93 7a00 	vldr	s14, [r3]
 8005c38:	4b2f      	ldr	r3, [pc, #188]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c3a:	edd3 7a00 	vldr	s15, [r3]
 8005c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c42:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c44:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c48:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c56:	4b28      	ldr	r3, [pc, #160]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c58:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c5c:	4b26      	ldr	r3, [pc, #152]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c6a:	4b23      	ldr	r3, [pc, #140]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c6c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <updateQuaternion+0x248>)
 8005c72:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c82:	f009 fa63 	bl	800f14c <sqrtf>
 8005c86:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8005c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c8e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005cfc <updateQuaternion+0x24c>
 8005c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9a:	dc00      	bgt.n	8005c9e <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8005c9c:	e027      	b.n	8005cee <updateQuaternion+0x23e>
        q[0] /= norm;
 8005c9e:	4b16      	ldr	r3, [pc, #88]	@ (8005cf8 <updateQuaternion+0x248>)
 8005ca0:	edd3 6a00 	vldr	s13, [r3]
 8005ca4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cac:	4b12      	ldr	r3, [pc, #72]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cae:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8005cb2:	4b11      	ldr	r3, [pc, #68]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cb4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005cb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cc2:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cc8:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ccc:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd4:	4b08      	ldr	r3, [pc, #32]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cd6:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8005cda:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cdc:	edd3 6a03 	vldr	s13, [r3, #12]
 8005ce0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce8:	4b03      	ldr	r3, [pc, #12]	@ (8005cf8 <updateQuaternion+0x248>)
 8005cea:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005cee:	bf00      	nop
 8005cf0:	3728      	adds	r7, #40	@ 0x28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000028 	.word	0x20000028
 8005cfc:	358637bd 	.word	0x358637bd

08005d00 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b092      	sub	sp, #72	@ 0x48
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	ed87 0a07 	vstr	s0, [r7, #28]
 8005d0a:	edc7 0a06 	vstr	s1, [r7, #24]
 8005d0e:	ed87 1a05 	vstr	s2, [r7, #20]
 8005d12:	edc7 1a04 	vstr	s3, [r7, #16]
 8005d16:	ed87 2a03 	vstr	s4, [r7, #12]
 8005d1a:	edc7 2a02 	vstr	s5, [r7, #8]
 8005d1e:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8005d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2e:	d10e      	bne.n	8005d4e <MahonyAHRSupdateIMU+0x4e>
 8005d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3c:	d107      	bne.n	8005d4e <MahonyAHRSupdateIMU+0x4e>
 8005d3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4a:	f000 8138 	beq.w	8005fbe <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8005d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d52:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d72:	f000 fd89 	bl	8006888 <invSqrt>
 8005d76:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8005d7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d7e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8005d8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d8e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8005d9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d9e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8005daa:	4b66      	ldr	r3, [pc, #408]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dac:	ed93 7a01 	vldr	s14, [r3, #4]
 8005db0:	4b64      	ldr	r3, [pc, #400]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005db2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dba:	4b62      	ldr	r3, [pc, #392]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dbc:	edd3 6a00 	vldr	s13, [r3]
 8005dc0:	4b60      	ldr	r3, [pc, #384]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dce:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8005dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dd4:	ed93 7a00 	vldr	s14, [r3]
 8005dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dda:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005de2:	4b58      	ldr	r3, [pc, #352]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005de4:	edd3 6a02 	vldr	s13, [r3, #8]
 8005de8:	4b56      	ldr	r3, [pc, #344]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dea:	edd3 7a03 	vldr	s15, [r3, #12]
 8005dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8005dfa:	4b52      	ldr	r3, [pc, #328]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005dfc:	ed93 7a00 	vldr	s14, [r3]
 8005e00:	4b50      	ldr	r3, [pc, #320]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005e02:	edd3 7a00 	vldr	s15, [r3]
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e0e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e12:	4b4c      	ldr	r3, [pc, #304]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005e14:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e18:	4b4a      	ldr	r3, [pc, #296]	@ (8005f44 <MahonyAHRSupdateIMU+0x244>)
 8005e1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e26:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8005e2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e2e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e36:	edd7 6a02 	vldr	s13, [r7, #8]
 8005e3a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e46:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8005e4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e4e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e56:	edd7 6a04 	vldr	s13, [r7, #16]
 8005e5a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e66:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8005e6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e6e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e76:	edd7 6a03 	vldr	s13, [r7, #12]
 8005e7a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e86:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8005e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f48 <MahonyAHRSupdateIMU+0x248>)
 8005e8c:	edd3 7a00 	vldr	s15, [r3]
 8005e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e98:	dd5e      	ble.n	8005f58 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8005e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005f48 <MahonyAHRSupdateIMU+0x248>)
 8005e9c:	ed93 7a00 	vldr	s14, [r3]
 8005ea0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eb0:	4b26      	ldr	r3, [pc, #152]	@ (8005f4c <MahonyAHRSupdateIMU+0x24c>)
 8005eb2:	edd3 7a00 	vldr	s15, [r3]
 8005eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eba:	4b24      	ldr	r3, [pc, #144]	@ (8005f4c <MahonyAHRSupdateIMU+0x24c>)
 8005ebc:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8005ec0:	4b21      	ldr	r3, [pc, #132]	@ (8005f48 <MahonyAHRSupdateIMU+0x248>)
 8005ec2:	ed93 7a00 	vldr	s14, [r3]
 8005ec6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f50 <MahonyAHRSupdateIMU+0x250>)
 8005ed8:	edd3 7a00 	vldr	s15, [r3]
 8005edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <MahonyAHRSupdateIMU+0x250>)
 8005ee2:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8005ee6:	4b18      	ldr	r3, [pc, #96]	@ (8005f48 <MahonyAHRSupdateIMU+0x248>)
 8005ee8:	ed93 7a00 	vldr	s14, [r3]
 8005eec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efc:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <MahonyAHRSupdateIMU+0x254>)
 8005efe:	edd3 7a00 	vldr	s15, [r3]
 8005f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f06:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <MahonyAHRSupdateIMU+0x254>)
 8005f08:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f4c <MahonyAHRSupdateIMU+0x24c>)
 8005f0e:	edd3 7a00 	vldr	s15, [r3]
 8005f12:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f50 <MahonyAHRSupdateIMU+0x250>)
 8005f20:	edd3 7a00 	vldr	s15, [r3]
 8005f24:	ed97 7a06 	vldr	s14, [r7, #24]
 8005f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f2c:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8005f30:	4b08      	ldr	r3, [pc, #32]	@ (8005f54 <MahonyAHRSupdateIMU+0x254>)
 8005f32:	edd3 7a00 	vldr	s15, [r3]
 8005f36:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f3e:	edc7 7a05 	vstr	s15, [r7, #20]
 8005f42:	e015      	b.n	8005f70 <MahonyAHRSupdateIMU+0x270>
 8005f44:	20000028 	.word	0x20000028
 8005f48:	2000003c 	.word	0x2000003c
 8005f4c:	2000064c 	.word	0x2000064c
 8005f50:	20000650 	.word	0x20000650
 8005f54:	20000654 	.word	0x20000654
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8005f58:	4b9a      	ldr	r3, [pc, #616]	@ (80061c4 <MahonyAHRSupdateIMU+0x4c4>)
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8005f60:	4b99      	ldr	r3, [pc, #612]	@ (80061c8 <MahonyAHRSupdateIMU+0x4c8>)
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8005f68:	4b98      	ldr	r3, [pc, #608]	@ (80061cc <MahonyAHRSupdateIMU+0x4cc>)
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8005f70:	4b97      	ldr	r3, [pc, #604]	@ (80061d0 <MahonyAHRSupdateIMU+0x4d0>)
 8005f72:	ed93 7a00 	vldr	s14, [r3]
 8005f76:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8005f8a:	4b91      	ldr	r3, [pc, #580]	@ (80061d0 <MahonyAHRSupdateIMU+0x4d0>)
 8005f8c:	ed93 7a00 	vldr	s14, [r3]
 8005f90:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f98:	ed97 7a06 	vldr	s14, [r7, #24]
 8005f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fa0:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8005fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80061d0 <MahonyAHRSupdateIMU+0x4d0>)
 8005fa6:	ed93 7a00 	vldr	s14, [r3]
 8005faa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fba:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8005fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fca:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8005fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fe2:	ed97 7a06 	vldr	s14, [r7, #24]
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8005fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ff2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ffa:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006006:	4b73      	ldr	r3, [pc, #460]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 800600c:	4b71      	ldr	r3, [pc, #452]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8006012:	4b70      	ldr	r3, [pc, #448]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006018:	4b6e      	ldr	r3, [pc, #440]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800601a:	ed93 7a00 	vldr	s14, [r3]
 800601e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006022:	eef1 6a67 	vneg.f32	s13, s15
 8006026:	edd7 7a07 	vldr	s15, [r7, #28]
 800602a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800602e:	ed97 6a08 	vldr	s12, [r7, #32]
 8006032:	edd7 7a06 	vldr	s15, [r7, #24]
 8006036:	ee66 7a27 	vmul.f32	s15, s12, s15
 800603a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800603e:	4b65      	ldr	r3, [pc, #404]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006040:	ed93 6a03 	vldr	s12, [r3, #12]
 8006044:	edd7 7a05 	vldr	s15, [r7, #20]
 8006048:	ee66 7a27 	vmul.f32	s15, s12, s15
 800604c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006054:	4b5f      	ldr	r3, [pc, #380]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006056:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 800605a:	4b5e      	ldr	r3, [pc, #376]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800605c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006060:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006064:	edd7 7a07 	vldr	s15, [r7, #28]
 8006068:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800606c:	ed97 6a08 	vldr	s12, [r7, #32]
 8006070:	edd7 7a05 	vldr	s15, [r7, #20]
 8006074:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006078:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800607c:	4b55      	ldr	r3, [pc, #340]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800607e:	ed93 6a03 	vldr	s12, [r3, #12]
 8006082:	edd7 7a06 	vldr	s15, [r7, #24]
 8006086:	ee66 7a27 	vmul.f32	s15, s12, s15
 800608a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800608e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006092:	4b50      	ldr	r3, [pc, #320]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006094:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006098:	4b4e      	ldr	r3, [pc, #312]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800609a:	ed93 7a02 	vldr	s14, [r3, #8]
 800609e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80060a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80060a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060aa:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80060ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80060b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060ba:	4b46      	ldr	r3, [pc, #280]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 80060bc:	ed93 6a03 	vldr	s12, [r3, #12]
 80060c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80060c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060d0:	4b40      	ldr	r3, [pc, #256]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 80060d2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 80060d6:	4b3f      	ldr	r3, [pc, #252]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 80060d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80060dc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80060e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80060e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060e8:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80060ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80060f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80060f8:	ed97 6a08 	vldr	s12, [r7, #32]
 80060fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006100:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006104:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800610c:	4b31      	ldr	r3, [pc, #196]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800610e:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8006112:	4b30      	ldr	r3, [pc, #192]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006114:	ed93 7a00 	vldr	s14, [r3]
 8006118:	4b2e      	ldr	r3, [pc, #184]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800611a:	edd3 7a00 	vldr	s15, [r3]
 800611e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006122:	4b2c      	ldr	r3, [pc, #176]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006124:	edd3 6a01 	vldr	s13, [r3, #4]
 8006128:	4b2a      	ldr	r3, [pc, #168]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800612a:	edd3 7a01 	vldr	s15, [r3, #4]
 800612e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006136:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006138:	edd3 6a02 	vldr	s13, [r3, #8]
 800613c:	4b25      	ldr	r3, [pc, #148]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800613e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800614a:	4b22      	ldr	r3, [pc, #136]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800614c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006150:	4b20      	ldr	r3, [pc, #128]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006152:	edd3 7a03 	vldr	s15, [r3, #12]
 8006156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800615a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800615e:	eeb0 0a67 	vmov.f32	s0, s15
 8006162:	f000 fb91 	bl	8006888 <invSqrt>
 8006166:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 800616a:	4b1a      	ldr	r3, [pc, #104]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800616c:	ed93 7a00 	vldr	s14, [r3]
 8006170:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006178:	4b16      	ldr	r3, [pc, #88]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800617a:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 800617e:	4b15      	ldr	r3, [pc, #84]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006180:	ed93 7a01 	vldr	s14, [r3, #4]
 8006184:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618c:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 800618e:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006192:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 8006194:	ed93 7a02 	vldr	s14, [r3, #8]
 8006198:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800619c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a0:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 80061a2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 80061a6:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 80061a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80061ac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80061b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b4:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <MahonyAHRSupdateIMU+0x4d4>)
 80061b6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80061ba:	bf00      	nop
 80061bc:	3748      	adds	r7, #72	@ 0x48
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2000064c 	.word	0x2000064c
 80061c8:	20000650 	.word	0x20000650
 80061cc:	20000654 	.word	0x20000654
 80061d0:	20000038 	.word	0x20000038
 80061d4:	20000028 	.word	0x20000028

080061d8 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 80061de:	4b44      	ldr	r3, [pc, #272]	@ (80062f0 <quaternionToThetaZ+0x118>)
 80061e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80061e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80061e8:	4b41      	ldr	r3, [pc, #260]	@ (80062f0 <quaternionToThetaZ+0x118>)
 80061ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80061ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f2:	4b3f      	ldr	r3, [pc, #252]	@ (80062f0 <quaternionToThetaZ+0x118>)
 80061f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80061f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80061fc:	4b3c      	ldr	r3, [pc, #240]	@ (80062f0 <quaternionToThetaZ+0x118>)
 80061fe:	edd3 7a00 	vldr	s15, [r3]
 8006202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800620a:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800620e:	4b38      	ldr	r3, [pc, #224]	@ (80062f0 <quaternionToThetaZ+0x118>)
 8006210:	edd3 7a02 	vldr	s15, [r3, #8]
 8006214:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006218:	4b35      	ldr	r3, [pc, #212]	@ (80062f0 <quaternionToThetaZ+0x118>)
 800621a:	edd3 7a03 	vldr	s15, [r3, #12]
 800621e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006222:	4b33      	ldr	r3, [pc, #204]	@ (80062f0 <quaternionToThetaZ+0x118>)
 8006224:	edd3 7a01 	vldr	s15, [r3, #4]
 8006228:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800622c:	4b30      	ldr	r3, [pc, #192]	@ (80062f0 <quaternionToThetaZ+0x118>)
 800622e:	edd3 7a00 	vldr	s15, [r3]
 8006232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800623a:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800623e:	4b2c      	ldr	r3, [pc, #176]	@ (80062f0 <quaternionToThetaZ+0x118>)
 8006240:	edd3 7a01 	vldr	s15, [r3, #4]
 8006244:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006248:	4b29      	ldr	r3, [pc, #164]	@ (80062f0 <quaternionToThetaZ+0x118>)
 800624a:	edd3 7a01 	vldr	s15, [r3, #4]
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800625a:	4b25      	ldr	r3, [pc, #148]	@ (80062f0 <quaternionToThetaZ+0x118>)
 800625c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006260:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006264:	4b22      	ldr	r3, [pc, #136]	@ (80062f0 <quaternionToThetaZ+0x118>)
 8006266:	edd3 7a02 	vldr	s15, [r3, #8]
 800626a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800626e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006272:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 800627a:	edd7 7a05 	vldr	s15, [r7, #20]
 800627e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006282:	edd7 7a04 	vldr	s15, [r7, #16]
 8006286:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800628a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800628e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006292:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629a:	eeb0 0a67 	vmov.f32	s0, s15
 800629e:	f008 ff55 	bl	800f14c <sqrtf>
 80062a2:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 80062a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80062aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80062b2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80062b6:	eeb0 0a66 	vmov.f32	s0, s13
 80062ba:	f008 ff9a 	bl	800f1f2 <fminf>
 80062be:	eef0 7a40 	vmov.f32	s15, s0
 80062c2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80062c6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ca:	f008 ff75 	bl	800f1b8 <fmaxf>
 80062ce:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 80062d2:	ed97 0a00 	vldr	s0, [r7]
 80062d6:	f008 fedf 	bl	800f098 <acosf>
 80062da:	eef0 7a40 	vmov.f32	s15, s0
 80062de:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80062f4 <quaternionToThetaZ+0x11c>
 80062e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80062e6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000028 	.word	0x20000028
 80062f4:	42654ca3 	.word	0x42654ca3

080062f8 <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80062fe:	4b22      	ldr	r3, [pc, #136]	@ (8006388 <quaternionToPitchDegree+0x90>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	4b20      	ldr	r3, [pc, #128]	@ (8006388 <quaternionToPitchDegree+0x90>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	4b1f      	ldr	r3, [pc, #124]	@ (8006388 <quaternionToPitchDegree+0x90>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <quaternionToPitchDegree+0x90>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 8006316:	ed97 7a05 	vldr	s14, [r7, #20]
 800631a:	edd7 7a03 	vldr	s15, [r7, #12]
 800631e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006322:	edd7 6a02 	vldr	s13, [r7, #8]
 8006326:	edd7 7a04 	vldr	s15, [r7, #16]
 800632a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800632e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006332:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006336:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 800633a:	edd7 7a01 	vldr	s15, [r7, #4]
 800633e:	eef0 7ae7 	vabs.f32	s15, s15
 8006342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634e:	db0c      	blt.n	800636a <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8006350:	edd7 7a01 	vldr	s15, [r7, #4]
 8006354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635c:	dd02      	ble.n	8006364 <quaternionToPitchDegree+0x6c>
 800635e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800638c <quaternionToPitchDegree+0x94>
 8006362:	e00c      	b.n	800637e <quaternionToPitchDegree+0x86>
 8006364:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8006390 <quaternionToPitchDegree+0x98>
 8006368:	e009      	b.n	800637e <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800636a:	ed97 0a01 	vldr	s0, [r7, #4]
 800636e:	f008 febf 	bl	800f0f0 <asinf>
 8006372:	eef0 7a40 	vmov.f32	s15, s0
 8006376:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006394 <quaternionToPitchDegree+0x9c>
 800637a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800637e:	eeb0 0a67 	vmov.f32	s0, s15
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20000028 	.word	0x20000028
 800638c:	42b40000 	.word	0x42b40000
 8006390:	c2b40000 	.word	0xc2b40000
 8006394:	42652ee0 	.word	0x42652ee0

08006398 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 800639e:	4b20      	ldr	r3, [pc, #128]	@ (8006420 <quaternionToRollDegree+0x88>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006420 <quaternionToRollDegree+0x88>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006420 <quaternionToRollDegree+0x88>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006420 <quaternionToRollDegree+0x88>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80063b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80063ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80063be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80063c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80063ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063d6:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80063da:	edd7 7a04 	vldr	s15, [r7, #16]
 80063de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80063e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063fa:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 80063fe:	edd7 0a00 	vldr	s1, [r7]
 8006402:	ed97 0a01 	vldr	s0, [r7, #4]
 8006406:	f008 fe9f 	bl	800f148 <atan2f>
 800640a:	eef0 7a40 	vmov.f32	s15, s0
 800640e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006424 <quaternionToRollDegree+0x8c>
 8006412:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006416:	eeb0 0a67 	vmov.f32	s0, s15
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000028 	.word	0x20000028
 8006424:	42652ee0 	.word	0x42652ee0

08006428 <quaternionToYaw>:


float quaternionToYaw(){
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800642e:	4b2a      	ldr	r3, [pc, #168]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006430:	ed93 7a01 	vldr	s14, [r3, #4]
 8006434:	4b28      	ldr	r3, [pc, #160]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006436:	edd3 7a02 	vldr	s15, [r3, #8]
 800643a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800643e:	4b26      	ldr	r3, [pc, #152]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006440:	edd3 6a00 	vldr	s13, [r3]
 8006444:	4b24      	ldr	r3, [pc, #144]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006446:	edd3 7a03 	vldr	s15, [r3, #12]
 800644a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800644e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006452:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006456:	4b20      	ldr	r3, [pc, #128]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006458:	ed93 7a00 	vldr	s14, [r3]
 800645c:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <quaternionToYaw+0xb0>)
 800645e:	edd3 7a00 	vldr	s15, [r3]
 8006462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006466:	4b1c      	ldr	r3, [pc, #112]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006468:	edd3 6a01 	vldr	s13, [r3, #4]
 800646c:	4b1a      	ldr	r3, [pc, #104]	@ (80064d8 <quaternionToYaw+0xb0>)
 800646e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800647a:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <quaternionToYaw+0xb0>)
 800647c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006480:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006482:	edd3 7a02 	vldr	s15, [r3, #8]
 8006486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800648a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800648e:	4b12      	ldr	r3, [pc, #72]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006490:	edd3 6a03 	vldr	s13, [r3, #12]
 8006494:	4b10      	ldr	r3, [pc, #64]	@ (80064d8 <quaternionToYaw+0xb0>)
 8006496:	edd3 7a03 	vldr	s15, [r3, #12]
 800649a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800649e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a2:	eef0 0a67 	vmov.f32	s1, s15
 80064a6:	eeb0 0a46 	vmov.f32	s0, s12
 80064aa:	f008 fe4d 	bl	800f148 <atan2f>
 80064ae:	eef0 7a40 	vmov.f32	s15, s0
 80064b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80064dc <quaternionToYaw+0xb4>
 80064b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064ba:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80064e0 <quaternionToYaw+0xb8>
 80064be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064c2:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	ee07 3a90 	vmov	s15, r3
}
 80064cc:	eeb0 0a67 	vmov.f32	s0, s15
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000028 	.word	0x20000028
 80064dc:	43340000 	.word	0x43340000
 80064e0:	40490fd0 	.word	0x40490fd0

080064e4 <quaternionToPitch>:

float quaternionToPitch(){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80064ea:	4b17      	ldr	r3, [pc, #92]	@ (8006548 <quaternionToPitch+0x64>)
 80064ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80064f0:	4b15      	ldr	r3, [pc, #84]	@ (8006548 <quaternionToPitch+0x64>)
 80064f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80064f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064fa:	4b13      	ldr	r3, [pc, #76]	@ (8006548 <quaternionToPitch+0x64>)
 80064fc:	edd3 6a00 	vldr	s13, [r3]
 8006500:	4b11      	ldr	r3, [pc, #68]	@ (8006548 <quaternionToPitch+0x64>)
 8006502:	edd3 7a02 	vldr	s15, [r3, #8]
 8006506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800650a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800650e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006512:	eeb0 0a67 	vmov.f32	s0, s15
 8006516:	f008 fdeb 	bl	800f0f0 <asinf>
 800651a:	eef0 7a40 	vmov.f32	s15, s0
 800651e:	eef1 7a67 	vneg.f32	s15, s15
 8006522:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800654c <quaternionToPitch+0x68>
 8006526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800652a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006550 <quaternionToPitch+0x6c>
 800652e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006532:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	ee07 3a90 	vmov	s15, r3
}
 800653c:	eeb0 0a67 	vmov.f32	s0, s15
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000028 	.word	0x20000028
 800654c:	43340000 	.word	0x43340000
 8006550:	40490fd0 	.word	0x40490fd0

08006554 <quaternionToRoll>:

float quaternionToRoll(){
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800655a:	4b2a      	ldr	r3, [pc, #168]	@ (8006604 <quaternionToRoll+0xb0>)
 800655c:	ed93 7a00 	vldr	s14, [r3]
 8006560:	4b28      	ldr	r3, [pc, #160]	@ (8006604 <quaternionToRoll+0xb0>)
 8006562:	edd3 7a01 	vldr	s15, [r3, #4]
 8006566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800656a:	4b26      	ldr	r3, [pc, #152]	@ (8006604 <quaternionToRoll+0xb0>)
 800656c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006570:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <quaternionToRoll+0xb0>)
 8006572:	edd3 7a03 	vldr	s15, [r3, #12]
 8006576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800657a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800657e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006582:	4b20      	ldr	r3, [pc, #128]	@ (8006604 <quaternionToRoll+0xb0>)
 8006584:	ed93 7a00 	vldr	s14, [r3]
 8006588:	4b1e      	ldr	r3, [pc, #120]	@ (8006604 <quaternionToRoll+0xb0>)
 800658a:	edd3 7a00 	vldr	s15, [r3]
 800658e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006592:	4b1c      	ldr	r3, [pc, #112]	@ (8006604 <quaternionToRoll+0xb0>)
 8006594:	edd3 6a01 	vldr	s13, [r3, #4]
 8006598:	4b1a      	ldr	r3, [pc, #104]	@ (8006604 <quaternionToRoll+0xb0>)
 800659a:	edd3 7a01 	vldr	s15, [r3, #4]
 800659e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065a6:	4b17      	ldr	r3, [pc, #92]	@ (8006604 <quaternionToRoll+0xb0>)
 80065a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80065ac:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <quaternionToRoll+0xb0>)
 80065ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80065b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065ba:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <quaternionToRoll+0xb0>)
 80065bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80065c0:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <quaternionToRoll+0xb0>)
 80065c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80065c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ce:	eef0 0a67 	vmov.f32	s1, s15
 80065d2:	eeb0 0a46 	vmov.f32	s0, s12
 80065d6:	f008 fdb7 	bl	800f148 <atan2f>
 80065da:	eef0 7a40 	vmov.f32	s15, s0
 80065de:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006608 <quaternionToRoll+0xb4>
 80065e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065e6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800660c <quaternionToRoll+0xb8>
 80065ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065ee:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	ee07 3a90 	vmov	s15, r3
}
 80065f8:	eeb0 0a67 	vmov.f32	s0, s15
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000028 	.word	0x20000028
 8006608:	43340000 	.word	0x43340000
 800660c:	40490fd0 	.word	0x40490fd0

08006610 <getInitialQuaternion>:

void getInitialQuaternion() {
 8006610:	b5b0      	push	{r4, r5, r7, lr}
 8006612:	b092      	sub	sp, #72	@ 0x48
 8006614:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8006616:	4b98      	ldr	r3, [pc, #608]	@ (8006878 <getInitialQuaternion+0x268>)
 8006618:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 800661c:	4b96      	ldr	r3, [pc, #600]	@ (8006878 <getInitialQuaternion+0x268>)
 800661e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006626:	4b94      	ldr	r3, [pc, #592]	@ (8006878 <getInitialQuaternion+0x268>)
 8006628:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800662c:	4b92      	ldr	r3, [pc, #584]	@ (8006878 <getInitialQuaternion+0x268>)
 800662e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8006632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800663a:	4b8f      	ldr	r3, [pc, #572]	@ (8006878 <getInitialQuaternion+0x268>)
 800663c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8006640:	4b8d      	ldr	r3, [pc, #564]	@ (8006878 <getInitialQuaternion+0x268>)
 8006642:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8006646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800664a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800664e:	ee17 0a90 	vmov	r0, s15
 8006652:	f7f9 ff99 	bl	8000588 <__aeabi_f2d>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	ec43 2b10 	vmov	d0, r2, r3
 800665e:	f008 fc9b 	bl	800ef98 <sqrt>
 8006662:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8006666:	4b84      	ldr	r3, [pc, #528]	@ (8006878 <getInitialQuaternion+0x268>)
 8006668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 ff8c 	bl	8000588 <__aeabi_f2d>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006678:	4b7f      	ldr	r3, [pc, #508]	@ (8006878 <getInitialQuaternion+0x268>)
 800667a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800667e:	eef1 7a67 	vneg.f32	s15, s15
 8006682:	ee17 3a90 	vmov	r3, s15
 8006686:	4618      	mov	r0, r3
 8006688:	f7f9 ff7e 	bl	8000588 <__aeabi_f2d>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8006694:	4b78      	ldr	r3, [pc, #480]	@ (8006878 <getInitialQuaternion+0x268>)
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006698:	4618      	mov	r0, r3
 800669a:	f7f9 ff75 	bl	8000588 <__aeabi_f2d>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 80066a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80066aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066ae:	f7fa f8ed 	bl	800088c <__aeabi_ddiv>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80066ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80066be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c2:	f7fa f8e3 	bl	800088c <__aeabi_ddiv>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80066ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80066d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066d6:	f7fa f8d9 	bl	800088c <__aeabi_ddiv>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80066e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066e6:	f04f 0000 	mov.w	r0, #0
 80066ea:	4964      	ldr	r1, [pc, #400]	@ (800687c <getInitialQuaternion+0x26c>)
 80066ec:	f7f9 fdec 	bl	80002c8 <__aeabi_dsub>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	ec43 2b17 	vmov	d7, r2, r3
 80066f8:	eeb0 0a47 	vmov.f32	s0, s14
 80066fc:	eef0 0a67 	vmov.f32	s1, s15
 8006700:	f008 fc4a 	bl	800ef98 <sqrt>
 8006704:	ec51 0b10 	vmov	r0, r1, d0
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	4b5c      	ldr	r3, [pc, #368]	@ (8006880 <getInitialQuaternion+0x270>)
 800670e:	f7f9 ff93 	bl	8000638 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 800671a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671e:	f04f 0000 	mov.w	r0, #0
 8006722:	4957      	ldr	r1, [pc, #348]	@ (8006880 <getInitialQuaternion+0x270>)
 8006724:	f7fa f8b2 	bl	800088c <__aeabi_ddiv>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006730:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006738:	f7f9 ff7e 	bl	8000638 <__aeabi_dmul>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	4b4d      	ldr	r3, [pc, #308]	@ (8006880 <getInitialQuaternion+0x270>)
 800674a:	f7f9 ff75 	bl	8000638 <__aeabi_dmul>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006756:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800675a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800675e:	f7f9 ff6b 	bl	8000638 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	4b44      	ldr	r3, [pc, #272]	@ (8006880 <getInitialQuaternion+0x270>)
 8006770:	f7f9 ff62 	bl	8000638 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006790:	f7f9 ff52 	bl	8000638 <__aeabi_dmul>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4614      	mov	r4, r2
 800679a:	461d      	mov	r5, r3
 800679c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067a4:	f7f9 ff48 	bl	8000638 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7f9 fd8c 	bl	80002cc <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80067c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067c4:	f7f9 ff38 	bl	8000638 <__aeabi_dmul>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4620      	mov	r0, r4
 80067ce:	4629      	mov	r1, r5
 80067d0:	f7f9 fd7c 	bl	80002cc <__adddf3>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	461d      	mov	r5, r3
 80067dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e4:	f7f9 ff28 	bl	8000638 <__aeabi_dmul>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7f9 fd6c 	bl	80002cc <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	ec43 2b17 	vmov	d7, r2, r3
 80067fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006800:	eef0 0a67 	vmov.f32	s1, s15
 8006804:	f008 fbc8 	bl	800ef98 <sqrt>
 8006808:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 800680c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006810:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006814:	f7fa f83a 	bl	800088c <__aeabi_ddiv>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f7fa f9e2 	bl	8000be8 <__aeabi_d2f>
 8006824:	4603      	mov	r3, r0
 8006826:	4a17      	ldr	r2, [pc, #92]	@ (8006884 <getInitialQuaternion+0x274>)
 8006828:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 800682a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800682e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006832:	f7fa f82b 	bl	800088c <__aeabi_ddiv>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	f7fa f9d3 	bl	8000be8 <__aeabi_d2f>
 8006842:	4603      	mov	r3, r0
 8006844:	4a0f      	ldr	r2, [pc, #60]	@ (8006884 <getInitialQuaternion+0x274>)
 8006846:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800684c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006850:	f7fa f81c 	bl	800088c <__aeabi_ddiv>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4610      	mov	r0, r2
 800685a:	4619      	mov	r1, r3
 800685c:	f7fa f9c4 	bl	8000be8 <__aeabi_d2f>
 8006860:	4603      	mov	r3, r0
 8006862:	4a08      	ldr	r2, [pc, #32]	@ (8006884 <getInitialQuaternion+0x274>)
 8006864:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006866:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <getInitialQuaternion+0x274>)
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	60da      	str	r2, [r3, #12]
}
 800686e:	bf00      	nop
 8006870:	3748      	adds	r7, #72	@ 0x48
 8006872:	46bd      	mov	sp, r7
 8006874:	bdb0      	pop	{r4, r5, r7, pc}
 8006876:	bf00      	nop
 8006878:	200004f8 	.word	0x200004f8
 800687c:	3ff00000 	.word	0x3ff00000
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	20000028 	.word	0x20000028

08006888 <invSqrt>:

float invSqrt(float x) {
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006892:	edd7 7a01 	vldr	s15, [r7, #4]
 8006896:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800689a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800689e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80068a6:	f107 0310 	add.w	r3, r7, #16
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	105a      	asrs	r2, r3, #1
 80068b2:	4b12      	ldr	r3, [pc, #72]	@ (80068fc <invSqrt+0x74>)
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80068c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80068c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80068c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80068d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80068d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80068e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	ee07 3a90 	vmov	s15, r3
}
 80068ee:	eeb0 0a67 	vmov.f32	s0, s15
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	5f3759df 	.word	0x5f3759df

08006900 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006906:	4b3d      	ldr	r3, [pc, #244]	@ (80069fc <calculate_accel_std_deviation+0xfc>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <calculate_accel_std_deviation+0x1c>
 800690e:	4b3c      	ldr	r3, [pc, #240]	@ (8006a00 <calculate_accel_std_deviation+0x100>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d802      	bhi.n	800691c <calculate_accel_std_deviation+0x1c>
 8006916:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006a04 <calculate_accel_std_deviation+0x104>
 800691a:	e069      	b.n	80069f0 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 800691c:	4b37      	ldr	r3, [pc, #220]	@ (80069fc <calculate_accel_std_deviation+0xfc>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <calculate_accel_std_deviation+0x2a>
 8006924:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <calculate_accel_std_deviation+0x100>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	e000      	b.n	800692c <calculate_accel_std_deviation+0x2c>
 800692a:	2305      	movs	r3, #5
 800692c:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e00e      	b.n	8006964 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006946:	4a30      	ldr	r2, [pc, #192]	@ (8006a08 <calculate_accel_std_deviation+0x108>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	edd3 7a00 	vldr	s15, [r3]
 8006952:	ed97 7a05 	vldr	s14, [r7, #20]
 8006956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800695a:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	dbec      	blt.n	8006946 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006976:	edd7 6a05 	vldr	s13, [r7, #20]
 800697a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697e:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	e01e      	b.n	80069c6 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006988:	4a1f      	ldr	r2, [pc, #124]	@ (8006a08 <calculate_accel_std_deviation+0x108>)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	ed93 7a00 	vldr	s14, [r3]
 8006994:	edd7 7a00 	vldr	s15, [r7]
 8006998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800699c:	4a1a      	ldr	r2, [pc, #104]	@ (8006a08 <calculate_accel_std_deviation+0x108>)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	edd3 6a00 	vldr	s13, [r3]
 80069a8:	edd7 7a00 	vldr	s15, [r7]
 80069ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80069b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069bc:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	dbdc      	blt.n	8006988 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	ee07 3a90 	vmov	s15, r3
 80069d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069d8:	edd7 6a04 	vldr	s13, [r7, #16]
 80069dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e0:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 80069e4:	ed97 0a04 	vldr	s0, [r7, #16]
 80069e8:	f008 fbb0 	bl	800f14c <sqrtf>
 80069ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80069f0:	eeb0 0a67 	vmov.f32	s0, s15
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	200006d9 	.word	0x200006d9
 8006a00:	200006d8 	.word	0x200006d8
 8006a04:	00000000 	.word	0x00000000
 8006a08:	200006c4 	.word	0x200006c4

08006a0c <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a1a:	eef0 7ae7 	vabs.f32	s15, s15
 8006a1e:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006a22:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <detect_accel_failure+0xdc>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4a31      	ldr	r2, [pc, #196]	@ (8006aec <detect_accel_failure+0xe0>)
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006a30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae8 <detect_accel_failure+0xdc>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	4b2e      	ldr	r3, [pc, #184]	@ (8006af0 <detect_accel_failure+0xe4>)
 8006a38:	fb83 1302 	smull	r1, r3, r3, r2
 8006a3c:	1059      	asrs	r1, r3, #1
 8006a3e:	17d3      	asrs	r3, r2, #31
 8006a40:	1ac9      	subs	r1, r1, r3
 8006a42:	460b      	mov	r3, r1
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	1ad1      	subs	r1, r2, r3
 8006a4a:	b2ca      	uxtb	r2, r1
 8006a4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ae8 <detect_accel_failure+0xdc>)
 8006a4e:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8006a50:	4b25      	ldr	r3, [pc, #148]	@ (8006ae8 <detect_accel_failure+0xdc>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006a58:	4b26      	ldr	r3, [pc, #152]	@ (8006af4 <detect_accel_failure+0xe8>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8006a5e:	f7ff ff4f 	bl	8006900 <calculate_accel_std_deviation>
 8006a62:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8006a66:	f7fc fb3d 	bl	80030e4 <flight_algorithm_get_start_time>
 8006a6a:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8006a72:	4a21      	ldr	r2, [pc, #132]	@ (8006af8 <detect_accel_failure+0xec>)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006a78:	4b1f      	ldr	r3, [pc, #124]	@ (8006af8 <detect_accel_failure+0xec>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8006a80:	4b1e      	ldr	r3, [pc, #120]	@ (8006afc <detect_accel_failure+0xf0>)
 8006a82:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8006a84:	4b1e      	ldr	r3, [pc, #120]	@ (8006b00 <detect_accel_failure+0xf4>)
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e014      	b.n	8006ab4 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006a8a:	f000 ff91 	bl	80079b0 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	4b19      	ldr	r3, [pc, #100]	@ (8006af8 <detect_accel_failure+0xec>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d804      	bhi.n	8006aac <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8006aa2:	4b18      	ldr	r3, [pc, #96]	@ (8006b04 <detect_accel_failure+0xf8>)
 8006aa4:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 8006aa6:	4b18      	ldr	r3, [pc, #96]	@ (8006b08 <detect_accel_failure+0xfc>)
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e003      	b.n	8006ab4 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006aac:	4b16      	ldr	r3, [pc, #88]	@ (8006b08 <detect_accel_failure+0xfc>)
 8006aae:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8006ab0:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <detect_accel_failure+0x100>)
 8006ab2:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8006ab4:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ab8:	edd7 7a07 	vldr	s15, [r7, #28]
 8006abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac4:	dc08      	bgt.n	8006ad8 <detect_accel_failure+0xcc>
 8006ac6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006aca:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ace:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad6:	dd01      	ble.n	8006adc <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200006d8 	.word	0x200006d8
 8006aec:	200006c4 	.word	0x200006c4
 8006af0:	66666667 	.word	0x66666667
 8006af4:	200006d9 	.word	0x200006d9
 8006af8:	200006c0 	.word	0x200006c0
 8006afc:	43480000 	.word	0x43480000
 8006b00:	42c80000 	.word	0x42c80000
 8006b04:	43160000 	.word	0x43160000
 8006b08:	42480000 	.word	0x42480000
 8006b0c:	41700000 	.word	0x41700000

08006b10 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006b18:	481b      	ldr	r0, [pc, #108]	@ (8006b88 <sensor_fusion_init+0x78>)
 8006b1a:	f7fc faef 	bl	80030fc <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8006b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b88 <sensor_fusion_init+0x78>)
 8006b20:	4a1a      	ldr	r2, [pc, #104]	@ (8006b8c <sensor_fusion_init+0x7c>)
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006b24:	4b18      	ldr	r3, [pc, #96]	@ (8006b88 <sensor_fusion_init+0x78>)
 8006b26:	4a1a      	ldr	r2, [pc, #104]	@ (8006b90 <sensor_fusion_init+0x80>)
 8006b28:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006b2a:	4b17      	ldr	r3, [pc, #92]	@ (8006b88 <sensor_fusion_init+0x78>)
 8006b2c:	4a19      	ldr	r2, [pc, #100]	@ (8006b94 <sensor_fusion_init+0x84>)
 8006b2e:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e009      	b.n	8006b4a <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006b36:	4a18      	ldr	r2, [pc, #96]	@ (8006b98 <sensor_fusion_init+0x88>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	ddf2      	ble.n	8006b36 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8006b50:	4b12      	ldr	r3, [pc, #72]	@ (8006b9c <sensor_fusion_init+0x8c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <sensor_fusion_init+0x90>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006b5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <sensor_fusion_init+0x94>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8006b62:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <sensor_fusion_init+0x98>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8006bac <sensor_fusion_init+0x9c>)
 8006b6e:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8006b70:	f000 ff1e 	bl	80079b0 <HAL_GetTick>
 8006b74:	4603      	mov	r3, r0
 8006b76:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb0 <sensor_fusion_init+0xa0>)
 8006b78:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <sensor_fusion_init+0xa4>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000668 	.word	0x20000668
 8006b8c:	3dcccccd 	.word	0x3dcccccd
 8006b90:	3ba3d70a 	.word	0x3ba3d70a
 8006b94:	40a00000 	.word	0x40a00000
 8006b98:	200006c4 	.word	0x200006c4
 8006b9c:	200006d8 	.word	0x200006d8
 8006ba0:	200006d9 	.word	0x200006d9
 8006ba4:	200006da 	.word	0x200006da
 8006ba8:	200006b4 	.word	0x200006b4
 8006bac:	200006b8 	.word	0x200006b8
 8006bb0:	200006bc 	.word	0x200006bc
 8006bb4:	200006c0 	.word	0x200006c0

08006bb8 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	@ 0x28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 8006bc4:	f000 fef4 	bl	80079b0 <HAL_GetTick>
 8006bc8:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8006bca:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf8 <sensor_fusion_update_kalman+0x140>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006cfc <sensor_fusion_update_kalman+0x144>
 8006bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006be2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8006be6:	4a44      	ldr	r2, [pc, #272]	@ (8006cf8 <sensor_fusion_update_kalman+0x140>)
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8006bf2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006bf6:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006d00 <sensor_fusion_update_kalman+0x148>
 8006bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c02:	d801      	bhi.n	8006c08 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8006c04:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <sensor_fusion_update_kalman+0x14c>)
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7f9 fcbb 	bl	8000588 <__aeabi_f2d>
 8006c12:	a335      	add	r3, pc, #212	@ (adr r3, 8006ce8 <sensor_fusion_update_kalman+0x130>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fd0e 	bl	8000638 <__aeabi_dmul>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4610      	mov	r0, r2
 8006c22:	4619      	mov	r1, r3
 8006c24:	f7f9 ffe0 	bl	8000be8 <__aeabi_d2f>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8006c2c:	69b8      	ldr	r0, [r7, #24]
 8006c2e:	f7f9 fcab 	bl	8000588 <__aeabi_f2d>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	ec43 2b10 	vmov	d0, r2, r3
 8006c3a:	f008 f9d9 	bl	800eff0 <cos>
 8006c3e:	ec51 0b10 	vmov	r0, r1, d0
 8006c42:	a32b      	add	r3, pc, #172	@ (adr r3, 8006cf0 <sensor_fusion_update_kalman+0x138>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fcf6 	bl	8000638 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f7f9 ffc8 	bl	8000be8 <__aeabi_d2f>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8006c62:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c6a:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006c6e:	ed97 0a04 	vldr	s0, [r7, #16]
 8006c72:	f7ff fecb 	bl	8006a0c <detect_accel_failure>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4b23      	ldr	r3, [pc, #140]	@ (8006d08 <sensor_fusion_update_kalman+0x150>)
 8006c7c:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006c7e:	4b22      	ldr	r3, [pc, #136]	@ (8006d08 <sensor_fusion_update_kalman+0x150>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006c86:	4b21      	ldr	r3, [pc, #132]	@ (8006d0c <sensor_fusion_update_kalman+0x154>)
 8006c88:	4a21      	ldr	r2, [pc, #132]	@ (8006d10 <sensor_fusion_update_kalman+0x158>)
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c8c:	e002      	b.n	8006c94 <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d0c <sensor_fusion_update_kalman+0x154>)
 8006c90:	4a20      	ldr	r2, [pc, #128]	@ (8006d14 <sensor_fusion_update_kalman+0x15c>)
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8006c94:	4b20      	ldr	r3, [pc, #128]	@ (8006d18 <sensor_fusion_update_kalman+0x160>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d020      	beq.n	8006cde <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8006c9c:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8006ca0:	edd7 0a04 	vldr	s1, [r7, #16]
 8006ca4:	ed97 0a07 	vldr	s0, [r7, #28]
 8006ca8:	4818      	ldr	r0, [pc, #96]	@ (8006d0c <sensor_fusion_update_kalman+0x154>)
 8006caa:	f7fc fa81 	bl	80031b0 <KalmanFilter_Update>
 8006cae:	eef0 7a40 	vmov.f32	s15, s0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8006cb8:	4814      	ldr	r0, [pc, #80]	@ (8006d0c <sensor_fusion_update_kalman+0x154>)
 8006cba:	f7fd fc5d 	bl	8004578 <KalmanFilter_IsApogeeDetected>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 8006cc6:	4811      	ldr	r0, [pc, #68]	@ (8006d0c <sensor_fusion_update_kalman+0x154>)
 8006cc8:	f7fd fc47 	bl	800455a <Kalman_Get_Velocity>
 8006ccc:	eef0 7a40 	vmov.f32	s15, s0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d08 <sensor_fusion_update_kalman+0x150>)
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	765a      	strb	r2, [r3, #25]
    }
}
 8006cde:	bf00      	nop
 8006ce0:	3728      	adds	r7, #40	@ 0x28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	a2529d39 	.word	0xa2529d39
 8006cec:	3f91df46 	.word	0x3f91df46
 8006cf0:	60000000 	.word	0x60000000
 8006cf4:	40239eb8 	.word	0x40239eb8
 8006cf8:	200006bc 	.word	0x200006bc
 8006cfc:	447a0000 	.word	0x447a0000
 8006d00:	3a83126f 	.word	0x3a83126f
 8006d04:	3c23d70a 	.word	0x3c23d70a
 8006d08:	200006da 	.word	0x200006da
 8006d0c:	20000668 	.word	0x20000668
 8006d10:	42480000 	.word	0x42480000
 8006d14:	3e99999a 	.word	0x3e99999a
 8006d18:	200006b4 	.word	0x200006b4

08006d1c <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	4b10      	ldr	r3, [pc, #64]	@ (8006d80 <HAL_MspInit+0x4c>)
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d42:	4a0f      	ldr	r2, [pc, #60]	@ (8006d80 <HAL_MspInit+0x4c>)
 8006d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <HAL_MspInit+0x4c>)
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <HAL_MspInit+0x4c>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	4a08      	ldr	r2, [pc, #32]	@ (8006d80 <HAL_MspInit+0x4c>)
 8006d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d66:	4b06      	ldr	r3, [pc, #24]	@ (8006d80 <HAL_MspInit+0x4c>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800

08006d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08c      	sub	sp, #48	@ 0x30
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d8c:	f107 031c 	add.w	r3, r7, #28
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	609a      	str	r2, [r3, #8]
 8006d98:	60da      	str	r2, [r3, #12]
 8006d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a42      	ldr	r2, [pc, #264]	@ (8006eac <HAL_I2C_MspInit+0x128>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d12d      	bne.n	8006e02 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	4b41      	ldr	r3, [pc, #260]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dae:	4a40      	ldr	r2, [pc, #256]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006db6:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006dc2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dc8:	2312      	movs	r3, #18
 8006dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd8:	f107 031c 	add.w	r3, r7, #28
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4835      	ldr	r0, [pc, #212]	@ (8006eb4 <HAL_I2C_MspInit+0x130>)
 8006de0:	f001 fb5c 	bl	800849c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	4b31      	ldr	r3, [pc, #196]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dec:	4a30      	ldr	r2, [pc, #192]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006dee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006df4:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006e00:	e050      	b.n	8006ea4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb8 <HAL_I2C_MspInit+0x134>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d14b      	bne.n	8006ea4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	4b27      	ldr	r3, [pc, #156]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e14:	4a26      	ldr	r2, [pc, #152]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e16:	f043 0304 	orr.w	r3, r3, #4
 8006e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e1c:	4b24      	ldr	r3, [pc, #144]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e30:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e38:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e4a:	2312      	movs	r3, #18
 8006e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e52:	2303      	movs	r3, #3
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006e56:	2304      	movs	r3, #4
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e5a:	f107 031c 	add.w	r3, r7, #28
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4816      	ldr	r0, [pc, #88]	@ (8006ebc <HAL_I2C_MspInit+0x138>)
 8006e62:	f001 fb1b 	bl	800849c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e6c:	2312      	movs	r3, #18
 8006e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e70:	2301      	movs	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e74:	2303      	movs	r3, #3
 8006e76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006e78:	2304      	movs	r3, #4
 8006e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e7c:	f107 031c 	add.w	r3, r7, #28
 8006e80:	4619      	mov	r1, r3
 8006e82:	480f      	ldr	r0, [pc, #60]	@ (8006ec0 <HAL_I2C_MspInit+0x13c>)
 8006e84:	f001 fb0a 	bl	800849c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	4b08      	ldr	r3, [pc, #32]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e90:	4a07      	ldr	r2, [pc, #28]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e98:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <HAL_I2C_MspInit+0x12c>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	3730      	adds	r7, #48	@ 0x30
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40005400 	.word	0x40005400
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	40020400 	.word	0x40020400
 8006eb8:	40005c00 	.word	0x40005c00
 8006ebc:	40020800 	.word	0x40020800
 8006ec0:	40020000 	.word	0x40020000

08006ec4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	@ (8006f28 <HAL_I2C_MspDeInit+0x64>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006ed6:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <HAL_I2C_MspDeInit+0x68>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eda:	4a14      	ldr	r2, [pc, #80]	@ (8006f2c <HAL_I2C_MspDeInit+0x68>)
 8006edc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ee0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006ee2:	2180      	movs	r1, #128	@ 0x80
 8006ee4:	4812      	ldr	r0, [pc, #72]	@ (8006f30 <HAL_I2C_MspDeInit+0x6c>)
 8006ee6:	f001 fc6d 	bl	80087c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8006eea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006eee:	4810      	ldr	r0, [pc, #64]	@ (8006f30 <HAL_I2C_MspDeInit+0x6c>)
 8006ef0:	f001 fc68 	bl	80087c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8006ef4:	e014      	b.n	8006f20 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a0e      	ldr	r2, [pc, #56]	@ (8006f34 <HAL_I2C_MspDeInit+0x70>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10f      	bne.n	8006f20 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8006f00:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <HAL_I2C_MspDeInit+0x68>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	4a09      	ldr	r2, [pc, #36]	@ (8006f2c <HAL_I2C_MspDeInit+0x68>)
 8006f06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f0a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8006f0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f10:	4809      	ldr	r0, [pc, #36]	@ (8006f38 <HAL_I2C_MspDeInit+0x74>)
 8006f12:	f001 fc57 	bl	80087c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8006f16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f1a:	4808      	ldr	r0, [pc, #32]	@ (8006f3c <HAL_I2C_MspDeInit+0x78>)
 8006f1c:	f001 fc52 	bl	80087c4 <HAL_GPIO_DeInit>
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40005400 	.word	0x40005400
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	40020400 	.word	0x40020400
 8006f34:	40005c00 	.word	0x40005c00
 8006f38:	40020800 	.word	0x40020800
 8006f3c:	40020000 	.word	0x40020000

08006f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f50:	d115      	bne.n	8006f7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <HAL_TIM_Base_MspInit+0x48>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8006f88 <HAL_TIM_Base_MspInit+0x48>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f62:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <HAL_TIM_Base_MspInit+0x48>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2100      	movs	r1, #0
 8006f72:	201c      	movs	r0, #28
 8006f74:	f000 fe4b 	bl	8007c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006f78:	201c      	movs	r0, #28
 8006f7a:	f000 fe64 	bl	8007c46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800

08006f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08e      	sub	sp, #56	@ 0x38
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a83      	ldr	r2, [pc, #524]	@ (80071b8 <HAL_UART_MspInit+0x22c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d14b      	bne.n	8007046 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	623b      	str	r3, [r7, #32]
 8006fb2:	4b82      	ldr	r3, [pc, #520]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb6:	4a81      	ldr	r2, [pc, #516]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	4b7b      	ldr	r3, [pc, #492]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd2:	4a7a      	ldr	r2, [pc, #488]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fd4:	f043 0304 	orr.w	r3, r3, #4
 8006fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fda:	4b78      	ldr	r3, [pc, #480]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	4b74      	ldr	r3, [pc, #464]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	4a73      	ldr	r2, [pc, #460]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006ff0:	f043 0308 	orr.w	r3, r3, #8
 8006ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ff6:	4b71      	ldr	r3, [pc, #452]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007008:	2302      	movs	r3, #2
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700c:	2300      	movs	r3, #0
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007010:	2303      	movs	r3, #3
 8007012:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007014:	2308      	movs	r3, #8
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800701c:	4619      	mov	r1, r3
 800701e:	4868      	ldr	r0, [pc, #416]	@ (80071c0 <HAL_UART_MspInit+0x234>)
 8007020:	f001 fa3c 	bl	800849c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007024:	2304      	movs	r3, #4
 8007026:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007028:	2302      	movs	r3, #2
 800702a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702c:	2300      	movs	r3, #0
 800702e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007030:	2303      	movs	r3, #3
 8007032:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007034:	2308      	movs	r3, #8
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800703c:	4619      	mov	r1, r3
 800703e:	4861      	ldr	r0, [pc, #388]	@ (80071c4 <HAL_UART_MspInit+0x238>)
 8007040:	f001 fa2c 	bl	800849c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007044:	e0b4      	b.n	80071b0 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a5f      	ldr	r2, [pc, #380]	@ (80071c8 <HAL_UART_MspInit+0x23c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	f040 80af 	bne.w	80071b0 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	4b59      	ldr	r3, [pc, #356]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705a:	4a58      	ldr	r2, [pc, #352]	@ (80071bc <HAL_UART_MspInit+0x230>)
 800705c:	f043 0310 	orr.w	r3, r3, #16
 8007060:	6453      	str	r3, [r2, #68]	@ 0x44
 8007062:	4b56      	ldr	r3, [pc, #344]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	4b52      	ldr	r3, [pc, #328]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	4a51      	ldr	r2, [pc, #324]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	6313      	str	r3, [r2, #48]	@ 0x30
 800707e:	4b4f      	ldr	r3, [pc, #316]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	4b4b      	ldr	r3, [pc, #300]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007092:	4a4a      	ldr	r2, [pc, #296]	@ (80071bc <HAL_UART_MspInit+0x230>)
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	6313      	str	r3, [r2, #48]	@ 0x30
 800709a:	4b48      	ldr	r3, [pc, #288]	@ (80071bc <HAL_UART_MspInit+0x230>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80070a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ac:	2302      	movs	r3, #2
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b4:	2303      	movs	r3, #3
 80070b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070b8:	2307      	movs	r3, #7
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070c0:	4619      	mov	r1, r3
 80070c2:	4842      	ldr	r0, [pc, #264]	@ (80071cc <HAL_UART_MspInit+0x240>)
 80070c4:	f001 f9ea 	bl	800849c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80070c8:	2340      	movs	r3, #64	@ 0x40
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070cc:	2302      	movs	r3, #2
 80070ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070d4:	2303      	movs	r3, #3
 80070d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070d8:	2307      	movs	r3, #7
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070e0:	4619      	mov	r1, r3
 80070e2:	483b      	ldr	r0, [pc, #236]	@ (80071d0 <HAL_UART_MspInit+0x244>)
 80070e4:	f001 f9da 	bl	800849c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80070e8:	4b3a      	ldr	r3, [pc, #232]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 80070ea:	4a3b      	ldr	r2, [pc, #236]	@ (80071d8 <HAL_UART_MspInit+0x24c>)
 80070ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80070ee:	4b39      	ldr	r3, [pc, #228]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 80070f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80070f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070f6:	4b37      	ldr	r3, [pc, #220]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070fc:	4b35      	ldr	r3, [pc, #212]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007102:	4b34      	ldr	r3, [pc, #208]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 8007104:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007108:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800710a:	4b32      	ldr	r3, [pc, #200]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 800710c:	2200      	movs	r2, #0
 800710e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007110:	4b30      	ldr	r3, [pc, #192]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 8007112:	2200      	movs	r2, #0
 8007114:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007116:	4b2f      	ldr	r3, [pc, #188]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 8007118:	2200      	movs	r2, #0
 800711a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800711c:	4b2d      	ldr	r3, [pc, #180]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 800711e:	2200      	movs	r2, #0
 8007120:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007122:	4b2c      	ldr	r3, [pc, #176]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 8007124:	2200      	movs	r2, #0
 8007126:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007128:	482a      	ldr	r0, [pc, #168]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 800712a:	f000 fdb5 	bl	8007c98 <HAL_DMA_Init>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8007134:	f7fd fe16 	bl	8004d64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a26      	ldr	r2, [pc, #152]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 800713c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800713e:	4a25      	ldr	r2, [pc, #148]	@ (80071d4 <HAL_UART_MspInit+0x248>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8007144:	4b25      	ldr	r3, [pc, #148]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007146:	4a26      	ldr	r2, [pc, #152]	@ (80071e0 <HAL_UART_MspInit+0x254>)
 8007148:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800714a:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <HAL_UART_MspInit+0x250>)
 800714c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007150:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007152:	4b22      	ldr	r3, [pc, #136]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007154:	2240      	movs	r2, #64	@ 0x40
 8007156:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007158:	4b20      	ldr	r3, [pc, #128]	@ (80071dc <HAL_UART_MspInit+0x250>)
 800715a:	2200      	movs	r2, #0
 800715c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800715e:	4b1f      	ldr	r3, [pc, #124]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007164:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007166:	4b1d      	ldr	r3, [pc, #116]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007168:	2200      	movs	r2, #0
 800716a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <HAL_UART_MspInit+0x250>)
 800716e:	2200      	movs	r2, #0
 8007170:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007172:	4b1a      	ldr	r3, [pc, #104]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007174:	2200      	movs	r2, #0
 8007176:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007178:	4b18      	ldr	r3, [pc, #96]	@ (80071dc <HAL_UART_MspInit+0x250>)
 800717a:	2200      	movs	r2, #0
 800717c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800717e:	4b17      	ldr	r3, [pc, #92]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007180:	2200      	movs	r2, #0
 8007182:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007184:	4815      	ldr	r0, [pc, #84]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007186:	f000 fd87 	bl	8007c98 <HAL_DMA_Init>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8007190:	f7fd fde8 	bl	8004d64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a11      	ldr	r2, [pc, #68]	@ (80071dc <HAL_UART_MspInit+0x250>)
 8007198:	639a      	str	r2, [r3, #56]	@ 0x38
 800719a:	4a10      	ldr	r2, [pc, #64]	@ (80071dc <HAL_UART_MspInit+0x250>)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	2025      	movs	r0, #37	@ 0x25
 80071a6:	f000 fd32 	bl	8007c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071aa:	2025      	movs	r0, #37	@ 0x25
 80071ac:	f000 fd4b 	bl	8007c46 <HAL_NVIC_EnableIRQ>
}
 80071b0:	bf00      	nop
 80071b2:	3738      	adds	r7, #56	@ 0x38
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40005000 	.word	0x40005000
 80071bc:	40023800 	.word	0x40023800
 80071c0:	40020800 	.word	0x40020800
 80071c4:	40020c00 	.word	0x40020c00
 80071c8:	40011000 	.word	0x40011000
 80071cc:	40020000 	.word	0x40020000
 80071d0:	40020400 	.word	0x40020400
 80071d4:	200003f4 	.word	0x200003f4
 80071d8:	40026440 	.word	0x40026440
 80071dc:	20000454 	.word	0x20000454
 80071e0:	400264b8 	.word	0x400264b8

080071e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <NMI_Handler+0x4>

080071ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <HardFault_Handler+0x4>

080071f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071f8:	bf00      	nop
 80071fa:	e7fd      	b.n	80071f8 <MemManage_Handler+0x4>

080071fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <BusFault_Handler+0x4>

08007204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <UsageFault_Handler+0x4>

0800720c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007210:	bf00      	nop
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800722c:	bf00      	nop
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800723a:	f000 fba5 	bl	8007988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007248:	4802      	ldr	r0, [pc, #8]	@ (8007254 <TIM2_IRQHandler+0x10>)
 800724a:	f003 fadd 	bl	800a808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	2000031c 	.word	0x2000031c

08007258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800725c:	4802      	ldr	r0, [pc, #8]	@ (8007268 <USART1_IRQHandler+0x10>)
 800725e:	f004 f835 	bl	800b2cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007262:	bf00      	nop
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200003ac 	.word	0x200003ac

0800726c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007270:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007274:	f001 fbb4 	bl	80089e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007278:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800727c:	f001 fbb0 	bl	80089e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007280:	bf00      	nop
 8007282:	bd80      	pop	{r7, pc}

08007284 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007288:	4802      	ldr	r0, [pc, #8]	@ (8007294 <DMA2_Stream2_IRQHandler+0x10>)
 800728a:	f000 fe9d 	bl	8007fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800728e:	bf00      	nop
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200003f4 	.word	0x200003f4

08007298 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800729c:	4802      	ldr	r0, [pc, #8]	@ (80072a8 <DMA2_Stream7_IRQHandler+0x10>)
 800729e:	f000 fe93 	bl	8007fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80072a2:	bf00      	nop
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000454 	.word	0x20000454

080072ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  return 1;
 80072b0:	2301      	movs	r3, #1
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <_kill>:

int _kill(int pid, int sig)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80072c6:	f005 fffb 	bl	800d2c0 <__errno>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2216      	movs	r2, #22
 80072ce:	601a      	str	r2, [r3, #0]
  return -1;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <_exit>:

void _exit (int status)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80072e4:	f04f 31ff 	mov.w	r1, #4294967295
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ffe7 	bl	80072bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80072ee:	bf00      	nop
 80072f0:	e7fd      	b.n	80072ee <_exit+0x12>

080072f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e00a      	b.n	800731a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007304:	f3af 8000 	nop.w
 8007308:	4601      	mov	r1, r0
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	60ba      	str	r2, [r7, #8]
 8007310:	b2ca      	uxtb	r2, r1
 8007312:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	3301      	adds	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	429a      	cmp	r2, r3
 8007320:	dbf0      	blt.n	8007304 <_read+0x12>
  }

  return len;
 8007322:	687b      	ldr	r3, [r7, #4]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e009      	b.n	8007352 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	60ba      	str	r2, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3301      	adds	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	429a      	cmp	r2, r3
 8007358:	dbf1      	blt.n	800733e <_write+0x12>
  }
  return len;
 800735a:	687b      	ldr	r3, [r7, #4]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <_close>:

int _close(int file)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800736c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800738c:	605a      	str	r2, [r3, #4]
  return 0;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <_isatty>:

int _isatty(int file)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80073a4:	2301      	movs	r3, #1
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073d4:	4a14      	ldr	r2, [pc, #80]	@ (8007428 <_sbrk+0x5c>)
 80073d6:	4b15      	ldr	r3, [pc, #84]	@ (800742c <_sbrk+0x60>)
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073e0:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <_sbrk+0x64>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073e8:	4b11      	ldr	r3, [pc, #68]	@ (8007430 <_sbrk+0x64>)
 80073ea:	4a12      	ldr	r2, [pc, #72]	@ (8007434 <_sbrk+0x68>)
 80073ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073ee:	4b10      	ldr	r3, [pc, #64]	@ (8007430 <_sbrk+0x64>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d207      	bcs.n	800740c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80073fc:	f005 ff60 	bl	800d2c0 <__errno>
 8007400:	4603      	mov	r3, r0
 8007402:	220c      	movs	r2, #12
 8007404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
 800740a:	e009      	b.n	8007420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800740c:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <_sbrk+0x64>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007412:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <_sbrk+0x64>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	4a05      	ldr	r2, [pc, #20]	@ (8007430 <_sbrk+0x64>)
 800741c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800741e:	68fb      	ldr	r3, [r7, #12]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20020000 	.word	0x20020000
 800742c:	00000400 	.word	0x00000400
 8007430:	200006dc 	.word	0x200006dc
 8007434:	20000860 	.word	0x20000860

08007438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800743c:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <SystemInit+0x20>)
 800743e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007442:	4a05      	ldr	r2, [pc, #20]	@ (8007458 <SystemInit+0x20>)
 8007444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800744c:	bf00      	nop
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	e000ed00 	.word	0xe000ed00

0800745c <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fd fcd3 	bl	8004e14 <addDataPacketSit>
   // if (!usart1_tx_busy) {
       // uart1_send_packet_dma((uint8_t*)sit_paket, 36);
    	HAL_UART_Transmit(&huart1, (uint8_t*)sit_paket, 36, 100);
 800746e:	2364      	movs	r3, #100	@ 0x64
 8007470:	2224      	movs	r2, #36	@ 0x24
 8007472:	4904      	ldr	r1, [pc, #16]	@ (8007484 <test_modes_handle_sit+0x28>)
 8007474:	4804      	ldr	r0, [pc, #16]	@ (8007488 <test_modes_handle_sit+0x2c>)
 8007476:	f003 fdc7 	bl	800b008 <HAL_UART_Transmit>
    //}
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	200005e8 	.word	0x200005e8
 8007488:	200003ac 	.word	0x200003ac

0800748c <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 8007492:	f000 f989 	bl	80077a8 <uart_handler_sut_data_ready>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d013      	beq.n	80074c4 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 800749c:	f000 f9b2 	bl	8007804 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f98c 	bl	80077c0 <uart_handler_get_sut_data>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	4906      	ldr	r1, [pc, #24]	@ (80074cc <algorithm_update_sut+0x40>)
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f80c 	bl	80074d0 <test_modes_handle_sut>
 80074b8:	4603      	mov	r3, r0
 80074ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 80074bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f9ac 	bl	800781c <uart_handler_send_status>
        }
    }
}
 80074c4:	bf00      	nop
 80074c6:	3728      	adds	r7, #40	@ 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000578 	.word	0x20000578

080074d0 <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b0b4      	sub	sp, #208	@ 0xd0
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 80074da:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80074de:	2244      	movs	r2, #68	@ 0x44
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f005 fe89 	bl	800d1fa <memset>
    bmi088_struct_t bmi_sut = {0};
 80074e8:	f107 0308 	add.w	r3, r7, #8
 80074ec:	2280      	movs	r2, #128	@ 0x80
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f005 fe82 	bl	800d1fa <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bme_sut.pressure = sut_data->pressure;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    // Fill BMI data
    bmi_sut.datas.acc_x = sut_data->acc_x;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	663b      	str	r3, [r7, #96]	@ 0x60
    bmi_sut.datas.acc_y = sut_data->acc_y;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	667b      	str	r3, [r7, #100]	@ 0x64
    bmi_sut.datas.acc_z = sut_data->acc_z;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	66bb      	str	r3, [r7, #104]	@ 0x68
    bmi_sut.datas.gyro_x = sut_data->gyro_x;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	623b      	str	r3, [r7, #32]
    bmi_sut.datas.angle_y = sut_data->gyro_y;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
    bmi_sut.datas.gyro_z = sut_data->gyro_z;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 800752a:	f107 0108 	add.w	r1, r7, #8
 800752e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff fb3f 	bl	8006bb8 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 800753a:	f107 0108 	add.w	r1, r7, #8
 800753e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f7fb fc39 	bl	8002dbc <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 800754a:	f7fb fd99 	bl	8003080 <flight_algorithm_get_status_bits>
 800754e:	4603      	mov	r3, r0
 8007550:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce

    return status_bits;
 8007554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
}
 8007558:	4618      	mov	r0, r3
 800755a:	37d0      	adds	r7, #208	@ 0xd0
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 8007564:	4b07      	ldr	r3, [pc, #28]	@ (8007584 <uart_handler_init+0x24>)
 8007566:	2200      	movs	r2, #0
 8007568:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 800756a:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <uart_handler_init+0x28>)
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 8007570:	4b06      	ldr	r3, [pc, #24]	@ (800758c <uart_handler_init+0x2c>)
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 8007576:	2220      	movs	r2, #32
 8007578:	2100      	movs	r1, #0
 800757a:	4805      	ldr	r0, [pc, #20]	@ (8007590 <uart_handler_init+0x30>)
 800757c:	f005 fe3d 	bl	800d1fa <memset>
}
 8007580:	bf00      	nop
 8007582:	bd80      	pop	{r7, pc}
 8007584:	200006e0 	.word	0x200006e0
 8007588:	200006e1 	.word	0x200006e1
 800758c:	200006e2 	.word	0x200006e2
 8007590:	200006e4 	.word	0x200006e4

08007594 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
    if (usart1_packet_ready) {
 8007598:	4b14      	ldr	r3, [pc, #80]	@ (80075ec <uart_handler_process_packets+0x58>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d021      	beq.n	80075e6 <uart_handler_process_packets+0x52>
        usart1_packet_ready = 0; // Clear flag immediately
 80075a2:	4b12      	ldr	r3, [pc, #72]	@ (80075ec <uart_handler_process_packets+0x58>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart1_rx_buffer[0] == CMD_HEADER && usart1_packet_size == 5) {
 80075a8:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <uart_handler_process_packets+0x5c>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2baa      	cmp	r3, #170	@ 0xaa
 80075ae:	d10b      	bne.n	80075c8 <uart_handler_process_packets+0x34>
 80075b0:	4b10      	ldr	r3, [pc, #64]	@ (80075f4 <uart_handler_process_packets+0x60>)
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d106      	bne.n	80075c8 <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 80075ba:	4b0f      	ldr	r3, [pc, #60]	@ (80075f8 <uart_handler_process_packets+0x64>)
 80075bc:	2201      	movs	r2, #1
 80075be:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart1_rx_buffer);
 80075c0:	480b      	ldr	r0, [pc, #44]	@ (80075f0 <uart_handler_process_packets+0x5c>)
 80075c2:	f000 f81d 	bl	8007600 <process_command_packet>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart1_rx_buffer);
        }
    }
}
 80075c6:	e00e      	b.n	80075e6 <uart_handler_process_packets+0x52>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
 80075c8:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <uart_handler_process_packets+0x5c>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2bab      	cmp	r3, #171	@ 0xab
 80075ce:	d10a      	bne.n	80075e6 <uart_handler_process_packets+0x52>
 80075d0:	4b08      	ldr	r3, [pc, #32]	@ (80075f4 <uart_handler_process_packets+0x60>)
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b24      	cmp	r3, #36	@ 0x24
 80075d8:	d105      	bne.n	80075e6 <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 80075da:	4b08      	ldr	r3, [pc, #32]	@ (80075fc <uart_handler_process_packets+0x68>)
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart1_rx_buffer);
 80075e0:	4803      	ldr	r0, [pc, #12]	@ (80075f0 <uart_handler_process_packets+0x5c>)
 80075e2:	f000 f843 	bl	800766c <process_sut_packet>
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200005e0 	.word	0x200005e0
 80075f0:	20000594 	.word	0x20000594
 80075f4:	200005e2 	.word	0x200005e2
 80075f8:	200006e1 	.word	0x200006e1
 80075fc:	200006e2 	.word	0x200006e2

08007600 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2baa      	cmp	r3, #170	@ 0xaa
 800760e:	d124      	bne.n	800765a <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	78db      	ldrb	r3, [r3, #3]
 800761a:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b0d      	cmp	r3, #13
 8007626:	d118      	bne.n	800765a <process_command_packet+0x5a>
 8007628:	7b7b      	ldrb	r3, [r7, #13]
 800762a:	2b0a      	cmp	r3, #10
 800762c:	d115      	bne.n	800765a <process_command_packet+0x5a>
            switch (command) {
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b24      	cmp	r3, #36	@ 0x24
 8007632:	d00e      	beq.n	8007652 <process_command_packet+0x52>
 8007634:	2b24      	cmp	r3, #36	@ 0x24
 8007636:	dc10      	bgt.n	800765a <process_command_packet+0x5a>
 8007638:	2b20      	cmp	r3, #32
 800763a:	d002      	beq.n	8007642 <process_command_packet+0x42>
 800763c:	2b22      	cmp	r3, #34	@ 0x22
 800763e:	d004      	beq.n	800764a <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 8007640:	e00b      	b.n	800765a <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 8007642:	4b09      	ldr	r3, [pc, #36]	@ (8007668 <process_command_packet+0x68>)
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
                    break;
 8007648:	e007      	b.n	800765a <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 800764a:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <process_command_packet+0x68>)
 800764c:	2202      	movs	r2, #2
 800764e:	701a      	strb	r2, [r3, #0]
                    break;
 8007650:	e003      	b.n	800765a <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 8007652:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <process_command_packet+0x68>)
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
                    break;
 8007658:	bf00      	nop
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	200006e0 	.word	0x200006e0

0800766c <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2bab      	cmp	r3, #171	@ 0xab
 800767a:	d172      	bne.n	8007762 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3322      	adds	r3, #34	@ 0x22
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b0d      	cmp	r3, #13
 8007684:	d16f      	bne.n	8007766 <process_sut_packet+0xfa>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3323      	adds	r3, #35	@ 0x23
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b0a      	cmp	r3, #10
 800768e:	d16a      	bne.n	8007766 <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 8007694:	2300      	movs	r3, #0
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	e009      	b.n	80076ae <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	4413      	add	r3, r2
 80076a6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	ddf2      	ble.n	800769a <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3321      	adds	r3, #33	@ 0x21
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	7bfa      	ldrb	r2, [r7, #15]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d154      	bne.n	800776a <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fd fccb 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 80076ca:	eef0 7a40 	vmov.f32	s15, s0
 80076ce:	4b29      	ldr	r3, [pc, #164]	@ (8007774 <process_sut_packet+0x108>)
 80076d0:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3305      	adds	r3, #5
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fd fcc1 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 80076de:	eef0 7a40 	vmov.f32	s15, s0
 80076e2:	4b24      	ldr	r3, [pc, #144]	@ (8007774 <process_sut_packet+0x108>)
 80076e4:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3309      	adds	r3, #9
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fd fcb7 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 80076f2:	eef0 7a40 	vmov.f32	s15, s0
 80076f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007774 <process_sut_packet+0x108>)
 80076f8:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	330d      	adds	r3, #13
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fcad 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 8007706:	eef0 7a40 	vmov.f32	s15, s0
 800770a:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <process_sut_packet+0x108>)
 800770c:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3311      	adds	r3, #17
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fca3 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 800771a:	eef0 7a40 	vmov.f32	s15, s0
 800771e:	4b15      	ldr	r3, [pc, #84]	@ (8007774 <process_sut_packet+0x108>)
 8007720:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3315      	adds	r3, #21
 8007728:	4618      	mov	r0, r3
 800772a:	f7fd fc99 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 800772e:	eef0 7a40 	vmov.f32	s15, s0
 8007732:	4b10      	ldr	r3, [pc, #64]	@ (8007774 <process_sut_packet+0x108>)
 8007734:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3319      	adds	r3, #25
 800773c:	4618      	mov	r0, r3
 800773e:	f7fd fc8f 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 8007742:	eef0 7a40 	vmov.f32	s15, s0
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <process_sut_packet+0x108>)
 8007748:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	331d      	adds	r3, #29
 8007750:	4618      	mov	r0, r3
 8007752:	f7fd fc85 	bl	8005060 <uint8_arrayi_float32_ye_donustur>
 8007756:	eef0 7a40 	vmov.f32	s15, s0
 800775a:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <process_sut_packet+0x108>)
 800775c:	edc3 7a07 	vstr	s15, [r3, #28]
 8007760:	e004      	b.n	800776c <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 8007762:	bf00      	nop
 8007764:	e002      	b.n	800776c <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 8007766:	bf00      	nop
 8007768:	e000      	b.n	800776c <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 800776a:	bf00      	nop
}
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	200006e4 	.word	0x200006e4

08007778 <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
    return current_mode;
 800777c:	4b03      	ldr	r3, [pc, #12]	@ (800778c <uart_handler_get_mode+0x14>)
 800777e:	781b      	ldrb	r3, [r3, #0]
}
 8007780:	4618      	mov	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	200006e0 	.word	0x200006e0

08007790 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
    return command_packet_ready;
 8007794:	4b03      	ldr	r3, [pc, #12]	@ (80077a4 <uart_handler_command_ready+0x14>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b2db      	uxtb	r3, r3
}
 800779a:	4618      	mov	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	200006e1 	.word	0x200006e1

080077a8 <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 80077ac:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <uart_handler_sut_data_ready+0x14>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	200006e2 	.word	0x200006e2

080077c0 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <uart_handler_get_sut_data+0x12>
 80077ce:	2300      	movs	r3, #0
 80077d0:	e005      	b.n	80077de <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 80077d2:	2220      	movs	r2, #32
 80077d4:	4904      	ldr	r1, [pc, #16]	@ (80077e8 <uart_handler_get_sut_data+0x28>)
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f005 fd9f 	bl	800d31a <memcpy>
    return 1;
 80077dc:	2301      	movs	r3, #1
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200006e4 	.word	0x200006e4

080077ec <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 80077f0:	4b03      	ldr	r3, [pc, #12]	@ (8007800 <uart_handler_clear_command_flag+0x14>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
}
 80077f6:	bf00      	nop
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	200006e1 	.word	0x200006e1

08007804 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 8007808:	4b03      	ldr	r3, [pc, #12]	@ (8007818 <uart_handler_clear_sut_flag+0x14>)
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
}
 800780e:	bf00      	nop
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	200006e2 	.word	0x200006e2

0800781c <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	80fb      	strh	r3, [r7, #6]
    if (!usart1_tx_busy) {
 8007826:	4b18      	ldr	r3, [pc, #96]	@ (8007888 <uart_handler_send_status+0x6c>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d127      	bne.n	8007880 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = CMD_HEADER;
 8007830:	4b16      	ldr	r3, [pc, #88]	@ (800788c <uart_handler_send_status+0x70>)
 8007832:	22aa      	movs	r2, #170	@ 0xaa
 8007834:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4b14      	ldr	r3, [pc, #80]	@ (800788c <uart_handler_send_status+0x70>)
 800783c:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	b29b      	uxth	r3, r3
 8007844:	b2da      	uxtb	r2, r3
 8007846:	4b11      	ldr	r3, [pc, #68]	@ (800788c <uart_handler_send_status+0x70>)
 8007848:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 800784a:	4b10      	ldr	r3, [pc, #64]	@ (800788c <uart_handler_send_status+0x70>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <uart_handler_send_status+0x70>)
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	4413      	add	r3, r2
 8007856:	4a0d      	ldr	r2, [pc, #52]	@ (800788c <uart_handler_send_status+0x70>)
 8007858:	7892      	ldrb	r2, [r2, #2]
 800785a:	4413      	add	r3, r2
 800785c:	425a      	negs	r2, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	bf58      	it	pl
 8007864:	4253      	negpl	r3, r2
 8007866:	b2da      	uxtb	r2, r3
 8007868:	4b08      	ldr	r3, [pc, #32]	@ (800788c <uart_handler_send_status+0x70>)
 800786a:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = CMD_FOOTER1;
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <uart_handler_send_status+0x70>)
 800786e:	220d      	movs	r2, #13
 8007870:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = CMD_FOOTER2;
 8007872:	4b06      	ldr	r3, [pc, #24]	@ (800788c <uart_handler_send_status+0x70>)
 8007874:	220a      	movs	r2, #10
 8007876:	715a      	strb	r2, [r3, #5]

        uart1_send_packet_dma(status_packet_dma, 6);
 8007878:	2106      	movs	r1, #6
 800787a:	4804      	ldr	r0, [pc, #16]	@ (800788c <uart_handler_send_status+0x70>)
 800787c:	f7fd fa56 	bl	8004d2c <uart1_send_packet_dma>
    }
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	200005e5 	.word	0x200005e5
 800788c:	20000704 	.word	0x20000704

08007890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80078c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007894:	f7ff fdd0 	bl	8007438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007898:	480c      	ldr	r0, [pc, #48]	@ (80078cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800789a:	490d      	ldr	r1, [pc, #52]	@ (80078d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800789c:	4a0d      	ldr	r2, [pc, #52]	@ (80078d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800789e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078a0:	e002      	b.n	80078a8 <LoopCopyDataInit>

080078a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078a6:	3304      	adds	r3, #4

080078a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078ac:	d3f9      	bcc.n	80078a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078ae:	4a0a      	ldr	r2, [pc, #40]	@ (80078d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80078b0:	4c0a      	ldr	r4, [pc, #40]	@ (80078dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80078b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078b4:	e001      	b.n	80078ba <LoopFillZerobss>

080078b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078b8:	3204      	adds	r2, #4

080078ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078bc:	d3fb      	bcc.n	80078b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80078be:	f005 fd05 	bl	800d2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078c2:	f7fc fe65 	bl	8004590 <main>
  bx  lr    
 80078c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80078c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80078cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80078d0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80078d4:	08011c20 	.word	0x08011c20
  ldr r2, =_sbss
 80078d8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80078dc:	2000085c 	.word	0x2000085c

080078e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078e0:	e7fe      	b.n	80078e0 <ADC_IRQHandler>
	...

080078e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <HAL_Init+0x40>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007924 <HAL_Init+0x40>)
 80078ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <HAL_Init+0x40>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007924 <HAL_Init+0x40>)
 80078fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007900:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <HAL_Init+0x40>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a07      	ldr	r2, [pc, #28]	@ (8007924 <HAL_Init+0x40>)
 8007906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800790a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800790c:	2003      	movs	r0, #3
 800790e:	f000 f973 	bl	8007bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007912:	200f      	movs	r0, #15
 8007914:	f000 f808 	bl	8007928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007918:	f7ff fa0c 	bl	8006d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	40023c00 	.word	0x40023c00

08007928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007930:	4b12      	ldr	r3, [pc, #72]	@ (800797c <HAL_InitTick+0x54>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	4b12      	ldr	r3, [pc, #72]	@ (8007980 <HAL_InitTick+0x58>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	4619      	mov	r1, r3
 800793a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800793e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f999 	bl	8007c7e <HAL_SYSTICK_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e00e      	b.n	8007974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d80a      	bhi.n	8007972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800795c:	2200      	movs	r2, #0
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	f000 f953 	bl	8007c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007968:	4a06      	ldr	r2, [pc, #24]	@ (8007984 <HAL_InitTick+0x5c>)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000040 	.word	0x20000040
 8007980:	20000048 	.word	0x20000048
 8007984:	20000044 	.word	0x20000044

08007988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800798c:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <HAL_IncTick+0x20>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <HAL_IncTick+0x24>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4413      	add	r3, r2
 8007998:	4a04      	ldr	r2, [pc, #16]	@ (80079ac <HAL_IncTick+0x24>)
 800799a:	6013      	str	r3, [r2, #0]
}
 800799c:	bf00      	nop
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000048 	.word	0x20000048
 80079ac:	2000070c 	.word	0x2000070c

080079b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  return uwTick;
 80079b4:	4b03      	ldr	r3, [pc, #12]	@ (80079c4 <HAL_GetTick+0x14>)
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	2000070c 	.word	0x2000070c

080079c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079d0:	f7ff ffee 	bl	80079b0 <HAL_GetTick>
 80079d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d005      	beq.n	80079ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079e2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <HAL_Delay+0x44>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80079ee:	bf00      	nop
 80079f0:	f7ff ffde 	bl	80079b0 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d8f7      	bhi.n	80079f0 <HAL_Delay+0x28>
  {
  }
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20000048 	.word	0x20000048

08007a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a20:	4b0c      	ldr	r3, [pc, #48]	@ (8007a54 <__NVIC_SetPriorityGrouping+0x44>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a42:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <__NVIC_SetPriorityGrouping+0x44>)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	60d3      	str	r3, [r2, #12]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	e000ed00 	.word	0xe000ed00

08007a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <__NVIC_GetPriorityGrouping+0x18>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	f003 0307 	and.w	r3, r3, #7
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	e000ed00 	.word	0xe000ed00

08007a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	db0b      	blt.n	8007a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	f003 021f 	and.w	r2, r3, #31
 8007a8c:	4907      	ldr	r1, [pc, #28]	@ (8007aac <__NVIC_EnableIRQ+0x38>)
 8007a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	2001      	movs	r0, #1
 8007a96:	fa00 f202 	lsl.w	r2, r0, r2
 8007a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	e000e100 	.word	0xe000e100

08007ab0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	db12      	blt.n	8007ae8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	f003 021f 	and.w	r2, r3, #31
 8007ac8:	490a      	ldr	r1, [pc, #40]	@ (8007af4 <__NVIC_DisableIRQ+0x44>)
 8007aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ad6:	3320      	adds	r3, #32
 8007ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007adc:	f3bf 8f4f 	dsb	sy
}
 8007ae0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ae2:	f3bf 8f6f 	isb	sy
}
 8007ae6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	e000e100 	.word	0xe000e100

08007af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	db0a      	blt.n	8007b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	490c      	ldr	r1, [pc, #48]	@ (8007b44 <__NVIC_SetPriority+0x4c>)
 8007b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b16:	0112      	lsls	r2, r2, #4
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b20:	e00a      	b.n	8007b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	4908      	ldr	r1, [pc, #32]	@ (8007b48 <__NVIC_SetPriority+0x50>)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	3b04      	subs	r3, #4
 8007b30:	0112      	lsls	r2, r2, #4
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	440b      	add	r3, r1
 8007b36:	761a      	strb	r2, [r3, #24]
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	e000e100 	.word	0xe000e100
 8007b48:	e000ed00 	.word	0xe000ed00

08007b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b089      	sub	sp, #36	@ 0x24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f1c3 0307 	rsb	r3, r3, #7
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	bf28      	it	cs
 8007b6a:	2304      	movcs	r3, #4
 8007b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	3304      	adds	r3, #4
 8007b72:	2b06      	cmp	r3, #6
 8007b74:	d902      	bls.n	8007b7c <NVIC_EncodePriority+0x30>
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3b03      	subs	r3, #3
 8007b7a:	e000      	b.n	8007b7e <NVIC_EncodePriority+0x32>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b80:	f04f 32ff 	mov.w	r2, #4294967295
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	43da      	mvns	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	401a      	ands	r2, r3
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b94:	f04f 31ff 	mov.w	r1, #4294967295
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9e:	43d9      	mvns	r1, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba4:	4313      	orrs	r3, r2
         );
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3724      	adds	r7, #36	@ 0x24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bc4:	d301      	bcc.n	8007bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e00f      	b.n	8007bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bca:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf4 <SysTick_Config+0x40>)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bd2:	210f      	movs	r1, #15
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	f7ff ff8e 	bl	8007af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bdc:	4b05      	ldr	r3, [pc, #20]	@ (8007bf4 <SysTick_Config+0x40>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007be2:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <SysTick_Config+0x40>)
 8007be4:	2207      	movs	r2, #7
 8007be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	e000e010 	.word	0xe000e010

08007bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff05 	bl	8007a10 <__NVIC_SetPriorityGrouping>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	4603      	mov	r3, r0
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
 8007c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c20:	f7ff ff1a 	bl	8007a58 <__NVIC_GetPriorityGrouping>
 8007c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	6978      	ldr	r0, [r7, #20]
 8007c2c:	f7ff ff8e 	bl	8007b4c <NVIC_EncodePriority>
 8007c30:	4602      	mov	r2, r0
 8007c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff ff5d 	bl	8007af8 <__NVIC_SetPriority>
}
 8007c3e:	bf00      	nop
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff ff0d 	bl	8007a74 <__NVIC_EnableIRQ>
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	4603      	mov	r3, r0
 8007c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff ff1d 	bl	8007ab0 <__NVIC_DisableIRQ>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff ff94 	bl	8007bb4 <SysTick_Config>
 8007c8c:	4603      	mov	r3, r0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ca4:	f7ff fe84 	bl	80079b0 <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e099      	b.n	8007de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cd4:	e00f      	b.n	8007cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cd6:	f7ff fe6b 	bl	80079b0 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b05      	cmp	r3, #5
 8007ce2:	d908      	bls.n	8007cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2203      	movs	r2, #3
 8007cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e078      	b.n	8007de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e8      	bne.n	8007cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4b38      	ldr	r3, [pc, #224]	@ (8007df0 <HAL_DMA_Init+0x158>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d107      	bne.n	8007d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f023 0307 	bic.w	r3, r3, #7
 8007d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d117      	bne.n	8007dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fb01 	bl	80083a4 <DMA_CheckFifoParam>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2240      	movs	r2, #64	@ 0x40
 8007dac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007db6:	2301      	movs	r3, #1
 8007db8:	e016      	b.n	8007de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fab8 	bl	8008338 <DMA_CalcBaseAndBitshift>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd0:	223f      	movs	r2, #63	@ 0x3f
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	f010803f 	.word	0xf010803f

08007df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_DMA_Start_IT+0x26>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e040      	b.n	8007e9c <HAL_DMA_Start_IT+0xa8>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d12f      	bne.n	8007e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2202      	movs	r2, #2
 8007e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fa4a 	bl	80082dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e4c:	223f      	movs	r2, #63	@ 0x3f
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0216 	orr.w	r2, r2, #22
 8007e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0208 	orr.w	r2, r2, #8
 8007e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e005      	b.n	8007e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007e96:	2302      	movs	r3, #2
 8007e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007eb2:	f7ff fd7d 	bl	80079b0 <HAL_GetTick>
 8007eb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d008      	beq.n	8007ed6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2280      	movs	r2, #128	@ 0x80
 8007ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e052      	b.n	8007f7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0216 	bic.w	r2, r2, #22
 8007ee4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ef4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <HAL_DMA_Abort+0x62>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0208 	bic.w	r2, r2, #8
 8007f14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f26:	e013      	b.n	8007f50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f28:	f7ff fd42 	bl	80079b0 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d90c      	bls.n	8007f50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e015      	b.n	8007f7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e4      	bne.n	8007f28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f62:	223f      	movs	r2, #63	@ 0x3f
 8007f64:	409a      	lsls	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d004      	beq.n	8007fa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2280      	movs	r2, #128	@ 0x80
 8007f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e00c      	b.n	8007fbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2205      	movs	r2, #5
 8007fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0201 	bic.w	r2, r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8008210 <HAL_DMA_IRQHandler+0x248>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a8e      	ldr	r2, [pc, #568]	@ (8008214 <HAL_DMA_IRQHandler+0x24c>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	0a9b      	lsrs	r3, r3, #10
 8007fe0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	409a      	lsls	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01a      	beq.n	8008034 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d013      	beq.n	8008034 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0204 	bic.w	r2, r2, #4
 800801a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008020:	2208      	movs	r2, #8
 8008022:	409a      	lsls	r2, r3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802c:	f043 0201 	orr.w	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008038:	2201      	movs	r2, #1
 800803a:	409a      	lsls	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4013      	ands	r3, r2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d012      	beq.n	800806a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00b      	beq.n	800806a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008056:	2201      	movs	r2, #1
 8008058:	409a      	lsls	r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008062:	f043 0202 	orr.w	r2, r3, #2
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800806e:	2204      	movs	r2, #4
 8008070:	409a      	lsls	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4013      	ands	r3, r2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d012      	beq.n	80080a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800808c:	2204      	movs	r2, #4
 800808e:	409a      	lsls	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008098:	f043 0204 	orr.w	r2, r3, #4
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a4:	2210      	movs	r2, #16
 80080a6:	409a      	lsls	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d043      	beq.n	8008138 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d03c      	beq.n	8008138 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080c2:	2210      	movs	r2, #16
 80080c4:	409a      	lsls	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d018      	beq.n	800810a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d108      	bne.n	80080f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d024      	beq.n	8008138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
 80080f6:	e01f      	b.n	8008138 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01b      	beq.n	8008138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
 8008108:	e016      	b.n	8008138 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d107      	bne.n	8008128 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0208 	bic.w	r2, r2, #8
 8008126:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800813c:	2220      	movs	r2, #32
 800813e:	409a      	lsls	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4013      	ands	r3, r2
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 808f 	beq.w	8008268 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 8087 	beq.w	8008268 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800815e:	2220      	movs	r2, #32
 8008160:	409a      	lsls	r2, r3
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b05      	cmp	r3, #5
 8008170:	d136      	bne.n	80081e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0216 	bic.w	r2, r2, #22
 8008180:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695a      	ldr	r2, [r3, #20]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008190:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	d103      	bne.n	80081a2 <HAL_DMA_IRQHandler+0x1da>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0208 	bic.w	r2, r2, #8
 80081b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081b6:	223f      	movs	r2, #63	@ 0x3f
 80081b8:	409a      	lsls	r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d07e      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
        }
        return;
 80081de:	e079      	b.n	80082d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01d      	beq.n	800822a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008200:	2b00      	cmp	r3, #0
 8008202:	d031      	beq.n	8008268 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
 800820c:	e02c      	b.n	8008268 <HAL_DMA_IRQHandler+0x2a0>
 800820e:	bf00      	nop
 8008210:	20000040 	.word	0x20000040
 8008214:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d023      	beq.n	8008268 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
 8008228:	e01e      	b.n	8008268 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10f      	bne.n	8008258 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0210 	bic.w	r2, r2, #16
 8008246:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	2b00      	cmp	r3, #0
 800826e:	d032      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d022      	beq.n	80082c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2205      	movs	r2, #5
 8008280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0201 	bic.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	3301      	adds	r3, #1
 8008298:	60bb      	str	r3, [r7, #8]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	429a      	cmp	r2, r3
 800829e:	d307      	bcc.n	80082b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f2      	bne.n	8008294 <HAL_DMA_IRQHandler+0x2cc>
 80082ae:	e000      	b.n	80082b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80082b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d005      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
 80082d2:	e000      	b.n	80082d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80082d4:	bf00      	nop
    }
  }
}
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80082f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b40      	cmp	r3, #64	@ 0x40
 8008308:	d108      	bne.n	800831c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800831a:	e007      	b.n	800832c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	60da      	str	r2, [r3, #12]
}
 800832c:	bf00      	nop
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	3b10      	subs	r3, #16
 8008348:	4a14      	ldr	r2, [pc, #80]	@ (800839c <DMA_CalcBaseAndBitshift+0x64>)
 800834a:	fba2 2303 	umull	r2, r3, r2, r3
 800834e:	091b      	lsrs	r3, r3, #4
 8008350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008352:	4a13      	ldr	r2, [pc, #76]	@ (80083a0 <DMA_CalcBaseAndBitshift+0x68>)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4413      	add	r3, r2
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d909      	bls.n	800837a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800836e:	f023 0303 	bic.w	r3, r3, #3
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	659a      	str	r2, [r3, #88]	@ 0x58
 8008378:	e007      	b.n	800838a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	aaaaaaab 	.word	0xaaaaaaab
 80083a0:	08011658 	.word	0x08011658

080083a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d11f      	bne.n	80083fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d856      	bhi.n	8008472 <DMA_CheckFifoParam+0xce>
 80083c4:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <DMA_CheckFifoParam+0x28>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083ef 	.word	0x080083ef
 80083d4:	080083dd 	.word	0x080083dd
 80083d8:	08008473 	.word	0x08008473
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d046      	beq.n	8008476 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083ec:	e043      	b.n	8008476 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80083f6:	d140      	bne.n	800847a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083fc:	e03d      	b.n	800847a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008406:	d121      	bne.n	800844c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d837      	bhi.n	800847e <DMA_CheckFifoParam+0xda>
 800840e:	a201      	add	r2, pc, #4	@ (adr r2, 8008414 <DMA_CheckFifoParam+0x70>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008425 	.word	0x08008425
 8008418:	0800842b 	.word	0x0800842b
 800841c:	08008425 	.word	0x08008425
 8008420:	0800843d 	.word	0x0800843d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
      break;
 8008428:	e030      	b.n	800848c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d025      	beq.n	8008482 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800843a:	e022      	b.n	8008482 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008440:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008444:	d11f      	bne.n	8008486 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800844a:	e01c      	b.n	8008486 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d903      	bls.n	800845a <DMA_CheckFifoParam+0xb6>
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d003      	beq.n	8008460 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008458:	e018      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]
      break;
 800845e:	e015      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00e      	beq.n	800848a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	e00b      	b.n	800848a <DMA_CheckFifoParam+0xe6>
      break;
 8008472:	bf00      	nop
 8008474:	e00a      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      break;
 8008476:	bf00      	nop
 8008478:	e008      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      break;
 800847a:	bf00      	nop
 800847c:	e006      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      break;
 800847e:	bf00      	nop
 8008480:	e004      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      break;
 8008482:	bf00      	nop
 8008484:	e002      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      break;   
 8008486:	bf00      	nop
 8008488:	e000      	b.n	800848c <DMA_CheckFifoParam+0xe8>
      break;
 800848a:	bf00      	nop
    }
  } 
  
  return status; 
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop

0800849c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800849c:	b480      	push	{r7}
 800849e:	b089      	sub	sp, #36	@ 0x24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
 80084b6:	e165      	b.n	8008784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084b8:	2201      	movs	r2, #1
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	fa02 f303 	lsl.w	r3, r2, r3
 80084c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4013      	ands	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	f040 8154 	bne.w	800877e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d005      	beq.n	80084ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d130      	bne.n	8008550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	2203      	movs	r2, #3
 80084fa:	fa02 f303 	lsl.w	r3, r2, r3
 80084fe:	43db      	mvns	r3, r3
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	4013      	ands	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4313      	orrs	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008524:	2201      	movs	r2, #1
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	43db      	mvns	r3, r3
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	4013      	ands	r3, r2
 8008532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	f003 0201 	and.w	r2, r3, #1
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4313      	orrs	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	2b03      	cmp	r3, #3
 800855a:	d017      	beq.n	800858c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	2203      	movs	r2, #3
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	4013      	ands	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	fa02 f303 	lsl.w	r3, r2, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4313      	orrs	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d123      	bne.n	80085e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	08da      	lsrs	r2, r3, #3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3208      	adds	r2, #8
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	220f      	movs	r2, #15
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	43db      	mvns	r3, r3
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	4013      	ands	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	08da      	lsrs	r2, r3, #3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3208      	adds	r2, #8
 80085da:	69b9      	ldr	r1, [r7, #24]
 80085dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	2203      	movs	r2, #3
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	4013      	ands	r3, r2
 80085f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f003 0203 	and.w	r2, r3, #3
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4313      	orrs	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80ae 	beq.w	800877e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	4b5d      	ldr	r3, [pc, #372]	@ (800879c <HAL_GPIO_Init+0x300>)
 8008628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862a:	4a5c      	ldr	r2, [pc, #368]	@ (800879c <HAL_GPIO_Init+0x300>)
 800862c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008630:	6453      	str	r3, [r2, #68]	@ 0x44
 8008632:	4b5a      	ldr	r3, [pc, #360]	@ (800879c <HAL_GPIO_Init+0x300>)
 8008634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800863e:	4a58      	ldr	r2, [pc, #352]	@ (80087a0 <HAL_GPIO_Init+0x304>)
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	3302      	adds	r3, #2
 8008646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	220f      	movs	r2, #15
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	43db      	mvns	r3, r3
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	4013      	ands	r3, r2
 8008660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a4f      	ldr	r2, [pc, #316]	@ (80087a4 <HAL_GPIO_Init+0x308>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d025      	beq.n	80086b6 <HAL_GPIO_Init+0x21a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a4e      	ldr	r2, [pc, #312]	@ (80087a8 <HAL_GPIO_Init+0x30c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01f      	beq.n	80086b2 <HAL_GPIO_Init+0x216>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a4d      	ldr	r2, [pc, #308]	@ (80087ac <HAL_GPIO_Init+0x310>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d019      	beq.n	80086ae <HAL_GPIO_Init+0x212>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a4c      	ldr	r2, [pc, #304]	@ (80087b0 <HAL_GPIO_Init+0x314>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <HAL_GPIO_Init+0x20e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a4b      	ldr	r2, [pc, #300]	@ (80087b4 <HAL_GPIO_Init+0x318>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00d      	beq.n	80086a6 <HAL_GPIO_Init+0x20a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a4a      	ldr	r2, [pc, #296]	@ (80087b8 <HAL_GPIO_Init+0x31c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <HAL_GPIO_Init+0x206>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a49      	ldr	r2, [pc, #292]	@ (80087bc <HAL_GPIO_Init+0x320>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d101      	bne.n	800869e <HAL_GPIO_Init+0x202>
 800869a:	2306      	movs	r3, #6
 800869c:	e00c      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 800869e:	2307      	movs	r3, #7
 80086a0:	e00a      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 80086a2:	2305      	movs	r3, #5
 80086a4:	e008      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 80086a6:	2304      	movs	r3, #4
 80086a8:	e006      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 80086aa:	2303      	movs	r3, #3
 80086ac:	e004      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e002      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <HAL_GPIO_Init+0x21c>
 80086b6:	2300      	movs	r3, #0
 80086b8:	69fa      	ldr	r2, [r7, #28]
 80086ba:	f002 0203 	and.w	r2, r2, #3
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	4093      	lsls	r3, r2
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086c8:	4935      	ldr	r1, [pc, #212]	@ (80087a0 <HAL_GPIO_Init+0x304>)
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	3302      	adds	r3, #2
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086d6:	4b3a      	ldr	r3, [pc, #232]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	43db      	mvns	r3, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4013      	ands	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086fa:	4a31      	ldr	r2, [pc, #196]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008700:	4b2f      	ldr	r3, [pc, #188]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	43db      	mvns	r3, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4013      	ands	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008724:	4a26      	ldr	r2, [pc, #152]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800872a:	4b25      	ldr	r3, [pc, #148]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800874e:	4a1c      	ldr	r2, [pc, #112]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008754:	4b1a      	ldr	r3, [pc, #104]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	43db      	mvns	r3, r3
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	4013      	ands	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008778:	4a11      	ldr	r2, [pc, #68]	@ (80087c0 <HAL_GPIO_Init+0x324>)
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3301      	adds	r3, #1
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	f67f ae96 	bls.w	80084b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	3724      	adds	r7, #36	@ 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40023800 	.word	0x40023800
 80087a0:	40013800 	.word	0x40013800
 80087a4:	40020000 	.word	0x40020000
 80087a8:	40020400 	.word	0x40020400
 80087ac:	40020800 	.word	0x40020800
 80087b0:	40020c00 	.word	0x40020c00
 80087b4:	40021000 	.word	0x40021000
 80087b8:	40021400 	.word	0x40021400
 80087bc:	40021800 	.word	0x40021800
 80087c0:	40013c00 	.word	0x40013c00

080087c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e0c7      	b.n	8008970 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80087e0:	2201      	movs	r2, #1
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	4013      	ands	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	f040 80b7 	bne.w	800896a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80087fc:	4a62      	ldr	r2, [pc, #392]	@ (8008988 <HAL_GPIO_DeInit+0x1c4>)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	089b      	lsrs	r3, r3, #2
 8008802:	3302      	adds	r3, #2
 8008804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008808:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	220f      	movs	r2, #15
 8008814:	fa02 f303 	lsl.w	r3, r2, r3
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	4013      	ands	r3, r2
 800881c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a5a      	ldr	r2, [pc, #360]	@ (800898c <HAL_GPIO_DeInit+0x1c8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d025      	beq.n	8008872 <HAL_GPIO_DeInit+0xae>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a59      	ldr	r2, [pc, #356]	@ (8008990 <HAL_GPIO_DeInit+0x1cc>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01f      	beq.n	800886e <HAL_GPIO_DeInit+0xaa>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a58      	ldr	r2, [pc, #352]	@ (8008994 <HAL_GPIO_DeInit+0x1d0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d019      	beq.n	800886a <HAL_GPIO_DeInit+0xa6>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a57      	ldr	r2, [pc, #348]	@ (8008998 <HAL_GPIO_DeInit+0x1d4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d013      	beq.n	8008866 <HAL_GPIO_DeInit+0xa2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a56      	ldr	r2, [pc, #344]	@ (800899c <HAL_GPIO_DeInit+0x1d8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00d      	beq.n	8008862 <HAL_GPIO_DeInit+0x9e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a55      	ldr	r2, [pc, #340]	@ (80089a0 <HAL_GPIO_DeInit+0x1dc>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d007      	beq.n	800885e <HAL_GPIO_DeInit+0x9a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a54      	ldr	r2, [pc, #336]	@ (80089a4 <HAL_GPIO_DeInit+0x1e0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d101      	bne.n	800885a <HAL_GPIO_DeInit+0x96>
 8008856:	2306      	movs	r3, #6
 8008858:	e00c      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 800885a:	2307      	movs	r3, #7
 800885c:	e00a      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 800885e:	2305      	movs	r3, #5
 8008860:	e008      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 8008862:	2304      	movs	r3, #4
 8008864:	e006      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 8008866:	2303      	movs	r3, #3
 8008868:	e004      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 800886a:	2302      	movs	r3, #2
 800886c:	e002      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <HAL_GPIO_DeInit+0xb0>
 8008872:	2300      	movs	r3, #0
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	f002 0203 	and.w	r2, r2, #3
 800887a:	0092      	lsls	r2, r2, #2
 800887c:	4093      	lsls	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	429a      	cmp	r2, r3
 8008882:	d132      	bne.n	80088ea <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008884:	4b48      	ldr	r3, [pc, #288]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	43db      	mvns	r3, r3
 800888c:	4946      	ldr	r1, [pc, #280]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 800888e:	4013      	ands	r3, r2
 8008890:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008892:	4b45      	ldr	r3, [pc, #276]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	43db      	mvns	r3, r3
 800889a:	4943      	ldr	r1, [pc, #268]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 800889c:	4013      	ands	r3, r2
 800889e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80088a0:	4b41      	ldr	r3, [pc, #260]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	43db      	mvns	r3, r3
 80088a8:	493f      	ldr	r1, [pc, #252]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80088ae:	4b3e      	ldr	r3, [pc, #248]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	43db      	mvns	r3, r3
 80088b6:	493c      	ldr	r1, [pc, #240]	@ (80089a8 <HAL_GPIO_DeInit+0x1e4>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	220f      	movs	r2, #15
 80088c6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80088cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008988 <HAL_GPIO_DeInit+0x1c4>)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	089b      	lsrs	r3, r3, #2
 80088d2:	3302      	adds	r3, #2
 80088d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	43da      	mvns	r2, r3
 80088dc:	482a      	ldr	r0, [pc, #168]	@ (8008988 <HAL_GPIO_DeInit+0x1c4>)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	089b      	lsrs	r3, r3, #2
 80088e2:	400a      	ands	r2, r1
 80088e4:	3302      	adds	r3, #2
 80088e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	2103      	movs	r1, #3
 80088f4:	fa01 f303 	lsl.w	r3, r1, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	401a      	ands	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	08da      	lsrs	r2, r3, #3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3208      	adds	r2, #8
 8008908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	220f      	movs	r2, #15
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	08d2      	lsrs	r2, r2, #3
 8008920:	4019      	ands	r1, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3208      	adds	r2, #8
 8008926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	2103      	movs	r1, #3
 8008934:	fa01 f303 	lsl.w	r3, r1, r3
 8008938:	43db      	mvns	r3, r3
 800893a:	401a      	ands	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	2101      	movs	r1, #1
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	fa01 f303 	lsl.w	r3, r1, r3
 800894c:	43db      	mvns	r3, r3
 800894e:	401a      	ands	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	2103      	movs	r1, #3
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	43db      	mvns	r3, r3
 8008964:	401a      	ands	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	3301      	adds	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b0f      	cmp	r3, #15
 8008974:	f67f af34 	bls.w	80087e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40013800 	.word	0x40013800
 800898c:	40020000 	.word	0x40020000
 8008990:	40020400 	.word	0x40020400
 8008994:	40020800 	.word	0x40020800
 8008998:	40020c00 	.word	0x40020c00
 800899c:	40021000 	.word	0x40021000
 80089a0:	40021400 	.word	0x40021400
 80089a4:	40021800 	.word	0x40021800
 80089a8:	40013c00 	.word	0x40013c00

080089ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
 80089b8:	4613      	mov	r3, r2
 80089ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089bc:	787b      	ldrb	r3, [r7, #1]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089c2:	887a      	ldrh	r2, [r7, #2]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80089c8:	e003      	b.n	80089d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80089ca:	887b      	ldrh	r3, [r7, #2]
 80089cc:	041a      	lsls	r2, r3, #16
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	619a      	str	r2, [r3, #24]
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80089ea:	4b08      	ldr	r3, [pc, #32]	@ (8008a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	4013      	ands	r3, r2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d006      	beq.n	8008a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80089f6:	4a05      	ldr	r2, [pc, #20]	@ (8008a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fc f922 	bl	8004c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	40013c00 	.word	0x40013c00

08008a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e12b      	b.n	8008c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fe f9a4 	bl	8006d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2224      	movs	r2, #36	@ 0x24
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0201 	bic.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a74:	f001 f912 	bl	8009c9c <HAL_RCC_GetPCLK1Freq>
 8008a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4a81      	ldr	r2, [pc, #516]	@ (8008c84 <HAL_I2C_Init+0x274>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d807      	bhi.n	8008a94 <HAL_I2C_Init+0x84>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4a80      	ldr	r2, [pc, #512]	@ (8008c88 <HAL_I2C_Init+0x278>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	bf94      	ite	ls
 8008a8c:	2301      	movls	r3, #1
 8008a8e:	2300      	movhi	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	e006      	b.n	8008aa2 <HAL_I2C_Init+0x92>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a7d      	ldr	r2, [pc, #500]	@ (8008c8c <HAL_I2C_Init+0x27c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	bf94      	ite	ls
 8008a9c:	2301      	movls	r3, #1
 8008a9e:	2300      	movhi	r3, #0
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e0e7      	b.n	8008c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4a78      	ldr	r2, [pc, #480]	@ (8008c90 <HAL_I2C_Init+0x280>)
 8008aae:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab2:	0c9b      	lsrs	r3, r3, #18
 8008ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8008c84 <HAL_I2C_Init+0x274>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d802      	bhi.n	8008ae4 <HAL_I2C_Init+0xd4>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	e009      	b.n	8008af8 <HAL_I2C_Init+0xe8>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	4a69      	ldr	r2, [pc, #420]	@ (8008c94 <HAL_I2C_Init+0x284>)
 8008af0:	fba2 2303 	umull	r2, r3, r2, r3
 8008af4:	099b      	lsrs	r3, r3, #6
 8008af6:	3301      	adds	r3, #1
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008b0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	495c      	ldr	r1, [pc, #368]	@ (8008c84 <HAL_I2C_Init+0x274>)
 8008b14:	428b      	cmp	r3, r1
 8008b16:	d819      	bhi.n	8008b4c <HAL_I2C_Init+0x13c>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	1e59      	subs	r1, r3, #1
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b26:	1c59      	adds	r1, r3, #1
 8008b28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008b2c:	400b      	ands	r3, r1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <HAL_I2C_Init+0x138>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1e59      	subs	r1, r3, #1
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b40:	3301      	adds	r3, #1
 8008b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b46:	e051      	b.n	8008bec <HAL_I2C_Init+0x1dc>
 8008b48:	2304      	movs	r3, #4
 8008b4a:	e04f      	b.n	8008bec <HAL_I2C_Init+0x1dc>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d111      	bne.n	8008b78 <HAL_I2C_Init+0x168>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	1e58      	subs	r0, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6859      	ldr	r1, [r3, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	440b      	add	r3, r1
 8008b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b66:	3301      	adds	r3, #1
 8008b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	e012      	b.n	8008b9e <HAL_I2C_Init+0x18e>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	1e58      	subs	r0, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6859      	ldr	r1, [r3, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	0099      	lsls	r1, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b8e:	3301      	adds	r3, #1
 8008b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <HAL_I2C_Init+0x196>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e022      	b.n	8008bec <HAL_I2C_Init+0x1dc>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10e      	bne.n	8008bcc <HAL_I2C_Init+0x1bc>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1e58      	subs	r0, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6859      	ldr	r1, [r3, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	440b      	add	r3, r1
 8008bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bca:	e00f      	b.n	8008bec <HAL_I2C_Init+0x1dc>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	1e58      	subs	r0, r3, #1
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6859      	ldr	r1, [r3, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	0099      	lsls	r1, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8008be2:	3301      	adds	r3, #1
 8008be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	6809      	ldr	r1, [r1, #0]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69da      	ldr	r2, [r3, #28]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6911      	ldr	r1, [r2, #16]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68d2      	ldr	r2, [r2, #12]
 8008c26:	4311      	orrs	r1, r2
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0201 	orr.w	r2, r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	000186a0 	.word	0x000186a0
 8008c88:	001e847f 	.word	0x001e847f
 8008c8c:	003d08ff 	.word	0x003d08ff
 8008c90:	431bde83 	.word	0x431bde83
 8008c94:	10624dd3 	.word	0x10624dd3

08008c98 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e021      	b.n	8008cee <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2224      	movs	r2, #36	@ 0x24
 8008cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0201 	bic.w	r2, r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fe f8fe 	bl	8006ec4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	4608      	mov	r0, r1
 8008d02:	4611      	mov	r1, r2
 8008d04:	461a      	mov	r2, r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	817b      	strh	r3, [r7, #10]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	813b      	strh	r3, [r7, #8]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d12:	f7fe fe4d 	bl	80079b0 <HAL_GetTick>
 8008d16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	f040 80d9 	bne.w	8008ed8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	2319      	movs	r3, #25
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	496d      	ldr	r1, [pc, #436]	@ (8008ee4 <HAL_I2C_Mem_Write+0x1ec>)
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fc8b 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e0cc      	b.n	8008eda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_I2C_Mem_Write+0x56>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e0c5      	b.n	8008eda <HAL_I2C_Mem_Write+0x1e2>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d007      	beq.n	8008d74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2221      	movs	r2, #33	@ 0x21
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2240      	movs	r2, #64	@ 0x40
 8008d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a3a      	ldr	r2, [r7, #32]
 8008d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4a4d      	ldr	r2, [pc, #308]	@ (8008ee8 <HAL_I2C_Mem_Write+0x1f0>)
 8008db4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008db6:	88f8      	ldrh	r0, [r7, #6]
 8008db8:	893a      	ldrh	r2, [r7, #8]
 8008dba:	8979      	ldrh	r1, [r7, #10]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 fac2 	bl	8009350 <I2C_RequestMemoryWrite>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d052      	beq.n	8008e78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e081      	b.n	8008eda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fd50 	bl	8009880 <I2C_WaitOnTXEFlagUntilTimeout>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00d      	beq.n	8008e02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d107      	bne.n	8008dfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e06b      	b.n	8008eda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e06:	781a      	ldrb	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d11b      	bne.n	8008e78 <HAL_I2C_Mem_Write+0x180>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d017      	beq.n	8008e78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1aa      	bne.n	8008dd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fd43 	bl	8009910 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00d      	beq.n	8008eac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d107      	bne.n	8008ea8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ea6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e016      	b.n	8008eda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e000      	b.n	8008eda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008ed8:	2302      	movs	r3, #2
  }
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	00100002 	.word	0x00100002
 8008ee8:	ffff0000 	.word	0xffff0000

08008eec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08c      	sub	sp, #48	@ 0x30
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	817b      	strh	r3, [r7, #10]
 8008efe:	460b      	mov	r3, r1
 8008f00:	813b      	strh	r3, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f06:	f7fe fd53 	bl	80079b0 <HAL_GetTick>
 8008f0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	f040 8214 	bne.w	8009342 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	2319      	movs	r3, #25
 8008f20:	2201      	movs	r2, #1
 8008f22:	497b      	ldr	r1, [pc, #492]	@ (8009110 <HAL_I2C_Mem_Read+0x224>)
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 fb91 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e207      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_I2C_Mem_Read+0x56>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e200      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d007      	beq.n	8008f68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2222      	movs	r2, #34	@ 0x22
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2240      	movs	r2, #64	@ 0x40
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8009114 <HAL_I2C_Mem_Read+0x228>)
 8008fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008faa:	88f8      	ldrh	r0, [r7, #6]
 8008fac:	893a      	ldrh	r2, [r7, #8]
 8008fae:	8979      	ldrh	r1, [r7, #10]
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4603      	mov	r3, r0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fa5e 	bl	800947c <I2C_RequestMemoryRead>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e1bc      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d113      	bne.n	8008ffa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	623b      	str	r3, [r7, #32]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	623b      	str	r3, [r7, #32]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	623b      	str	r3, [r7, #32]
 8008fe6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	e190      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d11b      	bne.n	800903a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009012:	2300      	movs	r3, #0
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	61fb      	str	r3, [r7, #28]
 8009026:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	e170      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800903e:	2b02      	cmp	r3, #2
 8009040:	d11b      	bne.n	800907a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009050:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009062:	2300      	movs	r3, #0
 8009064:	61bb      	str	r3, [r7, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	e150      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800907a:	2300      	movs	r3, #0
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	617b      	str	r3, [r7, #20]
 800908e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009090:	e144      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009096:	2b03      	cmp	r3, #3
 8009098:	f200 80f1 	bhi.w	800927e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d123      	bne.n	80090ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 fc79 	bl	80099a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e145      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80090ea:	e117      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d14e      	bne.n	8009192 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	2200      	movs	r2, #0
 80090fc:	4906      	ldr	r1, [pc, #24]	@ (8009118 <HAL_I2C_Mem_Read+0x22c>)
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 faa4 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d008      	beq.n	800911c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e11a      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
 800910e:	bf00      	nop
 8009110:	00100002 	.word	0x00100002
 8009114:	ffff0000 	.word	0xffff0000
 8009118:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800912a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009190:	e0c4      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	2200      	movs	r2, #0
 800919a:	496c      	ldr	r1, [pc, #432]	@ (800934c <HAL_I2C_Mem_Read+0x460>)
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fa55 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0cb      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	2200      	movs	r2, #0
 80091f6:	4955      	ldr	r1, [pc, #340]	@ (800934c <HAL_I2C_Mem_Read+0x460>)
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fa27 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e09d      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691a      	ldr	r2, [r3, #16]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691a      	ldr	r2, [r3, #16]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	b2d2      	uxtb	r2, r2
 8009256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009266:	3b01      	subs	r3, #1
 8009268:	b29a      	uxth	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800927c:	e04e      	b.n	800931c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800927e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fb8c 	bl	80099a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e058      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929c:	b2d2      	uxtb	r2, r2
 800929e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f003 0304 	and.w	r3, r3, #4
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d124      	bne.n	800931c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d107      	bne.n	80092ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	b2d2      	uxtb	r2, r2
 80092f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009320:	2b00      	cmp	r3, #0
 8009322:	f47f aeb6 	bne.w	8009092 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2220      	movs	r2, #32
 800932a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	e000      	b.n	8009344 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009342:	2302      	movs	r3, #2
  }
}
 8009344:	4618      	mov	r0, r3
 8009346:	3728      	adds	r7, #40	@ 0x28
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	00010004 	.word	0x00010004

08009350 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	461a      	mov	r2, r3
 800935e:	4603      	mov	r3, r0
 8009360:	817b      	strh	r3, [r7, #10]
 8009362:	460b      	mov	r3, r1
 8009364:	813b      	strh	r3, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	2200      	movs	r2, #0
 8009382:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 f960 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00d      	beq.n	80093ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093a0:	d103      	bne.n	80093aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e05f      	b.n	800946e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093ae:	897b      	ldrh	r3, [r7, #10]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	461a      	mov	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80093bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	6a3a      	ldr	r2, [r7, #32]
 80093c2:	492d      	ldr	r1, [pc, #180]	@ (8009478 <I2C_RequestMemoryWrite+0x128>)
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f9bb 	bl	8009740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e04c      	b.n	800946e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ec:	6a39      	ldr	r1, [r7, #32]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fa46 	bl	8009880 <I2C_WaitOnTXEFlagUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00d      	beq.n	8009416 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d107      	bne.n	8009412 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e02b      	b.n	800946e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d105      	bne.n	8009428 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800941c:	893b      	ldrh	r3, [r7, #8]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	611a      	str	r2, [r3, #16]
 8009426:	e021      	b.n	800946c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009428:	893b      	ldrh	r3, [r7, #8]
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	b29b      	uxth	r3, r3
 800942e:	b2da      	uxtb	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009438:	6a39      	ldr	r1, [r7, #32]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fa20 	bl	8009880 <I2C_WaitOnTXEFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00d      	beq.n	8009462 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944a:	2b04      	cmp	r3, #4
 800944c:	d107      	bne.n	800945e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800945c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e005      	b.n	800946e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009462:	893b      	ldrh	r3, [r7, #8]
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	00010002 	.word	0x00010002

0800947c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af02      	add	r7, sp, #8
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	461a      	mov	r2, r3
 800948a:	4603      	mov	r3, r0
 800948c:	817b      	strh	r3, [r7, #10]
 800948e:	460b      	mov	r3, r1
 8009490:	813b      	strh	r3, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80094a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	2200      	movs	r2, #0
 80094be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 f8c2 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00d      	beq.n	80094ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094dc:	d103      	bne.n	80094e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e0aa      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80094ea:	897b      	ldrh	r3, [r7, #10]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	461a      	mov	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80094f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	6a3a      	ldr	r2, [r7, #32]
 80094fe:	4952      	ldr	r1, [pc, #328]	@ (8009648 <I2C_RequestMemoryRead+0x1cc>)
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 f91d 	bl	8009740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e097      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009528:	6a39      	ldr	r1, [r7, #32]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f9a8 	bl	8009880 <I2C_WaitOnTXEFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00d      	beq.n	8009552 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953a:	2b04      	cmp	r3, #4
 800953c:	d107      	bne.n	800954e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800954c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e076      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d105      	bne.n	8009564 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009558:	893b      	ldrh	r3, [r7, #8]
 800955a:	b2da      	uxtb	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	611a      	str	r2, [r3, #16]
 8009562:	e021      	b.n	80095a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009564:	893b      	ldrh	r3, [r7, #8]
 8009566:	0a1b      	lsrs	r3, r3, #8
 8009568:	b29b      	uxth	r3, r3
 800956a:	b2da      	uxtb	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009574:	6a39      	ldr	r1, [r7, #32]
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 f982 	bl	8009880 <I2C_WaitOnTXEFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00d      	beq.n	800959e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	2b04      	cmp	r3, #4
 8009588:	d107      	bne.n	800959a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e050      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800959e:	893b      	ldrh	r3, [r7, #8]
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095aa:	6a39      	ldr	r1, [r7, #32]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f967 	bl	8009880 <I2C_WaitOnTXEFlagUntilTimeout>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00d      	beq.n	80095d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d107      	bne.n	80095d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e035      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f82b 	bl	800964c <I2C_WaitOnFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00d      	beq.n	8009618 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800960a:	d103      	bne.n	8009614 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e013      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009618:	897b      	ldrh	r3, [r7, #10]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f043 0301 	orr.w	r3, r3, #1
 8009620:	b2da      	uxtb	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	6a3a      	ldr	r2, [r7, #32]
 800962c:	4906      	ldr	r1, [pc, #24]	@ (8009648 <I2C_RequestMemoryRead+0x1cc>)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f886 	bl	8009740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e000      	b.n	8009640 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	00010002 	.word	0x00010002

0800964c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	4613      	mov	r3, r2
 800965a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800965c:	e048      	b.n	80096f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d044      	beq.n	80096f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009666:	f7fe f9a3 	bl	80079b0 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d302      	bcc.n	800967c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d139      	bne.n	80096f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b01      	cmp	r3, #1
 8009684:	d10d      	bne.n	80096a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	43da      	mvns	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4013      	ands	r3, r2
 8009692:	b29b      	uxth	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	e00c      	b.n	80096bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	43da      	mvns	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4013      	ands	r3, r2
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bf0c      	ite	eq
 80096b4:	2301      	moveq	r3, #1
 80096b6:	2300      	movne	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	461a      	mov	r2, r3
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d116      	bne.n	80096f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096dc:	f043 0220 	orr.w	r2, r3, #32
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e023      	b.n	8009738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	0c1b      	lsrs	r3, r3, #16
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10d      	bne.n	8009716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	43da      	mvns	r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4013      	ands	r3, r2
 8009706:	b29b      	uxth	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	bf0c      	ite	eq
 800970c:	2301      	moveq	r3, #1
 800970e:	2300      	movne	r3, #0
 8009710:	b2db      	uxtb	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	e00c      	b.n	8009730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	43da      	mvns	r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4013      	ands	r3, r2
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	bf0c      	ite	eq
 8009728:	2301      	moveq	r3, #1
 800972a:	2300      	movne	r3, #0
 800972c:	b2db      	uxtb	r3, r3
 800972e:	461a      	mov	r2, r3
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	429a      	cmp	r2, r3
 8009734:	d093      	beq.n	800965e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800974e:	e071      	b.n	8009834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800975a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800975e:	d123      	bne.n	80097a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800976e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009794:	f043 0204 	orr.w	r2, r3, #4
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e067      	b.n	8009878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ae:	d041      	beq.n	8009834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097b0:	f7fe f8fe 	bl	80079b0 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d302      	bcc.n	80097c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d136      	bne.n	8009834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d10c      	bne.n	80097ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	43da      	mvns	r2, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4013      	ands	r3, r2
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bf14      	ite	ne
 80097e2:	2301      	movne	r3, #1
 80097e4:	2300      	moveq	r3, #0
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	e00b      	b.n	8009802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	43da      	mvns	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4013      	ands	r3, r2
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bf14      	ite	ne
 80097fc:	2301      	movne	r3, #1
 80097fe:	2300      	moveq	r3, #0
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d016      	beq.n	8009834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009820:	f043 0220 	orr.w	r2, r3, #32
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e021      	b.n	8009878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b01      	cmp	r3, #1
 800983c:	d10c      	bne.n	8009858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	43da      	mvns	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4013      	ands	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf14      	ite	ne
 8009850:	2301      	movne	r3, #1
 8009852:	2300      	moveq	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	e00b      	b.n	8009870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	43da      	mvns	r2, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4013      	ands	r3, r2
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	bf14      	ite	ne
 800986a:	2301      	movne	r3, #1
 800986c:	2300      	moveq	r3, #0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	f47f af6d 	bne.w	8009750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800988c:	e034      	b.n	80098f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 f8e3 	bl	8009a5a <I2C_IsAcknowledgeFailed>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e034      	b.n	8009908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d028      	beq.n	80098f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a6:	f7fe f883 	bl	80079b0 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d302      	bcc.n	80098bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d11d      	bne.n	80098f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c6:	2b80      	cmp	r3, #128	@ 0x80
 80098c8:	d016      	beq.n	80098f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e4:	f043 0220 	orr.w	r2, r3, #32
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e007      	b.n	8009908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009902:	2b80      	cmp	r3, #128	@ 0x80
 8009904:	d1c3      	bne.n	800988e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800991c:	e034      	b.n	8009988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f89b 	bl	8009a5a <I2C_IsAcknowledgeFailed>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e034      	b.n	8009998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d028      	beq.n	8009988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009936:	f7fe f83b 	bl	80079b0 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11d      	bne.n	8009988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f003 0304 	and.w	r3, r3, #4
 8009956:	2b04      	cmp	r3, #4
 8009958:	d016      	beq.n	8009988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009974:	f043 0220 	orr.w	r2, r3, #32
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e007      	b.n	8009998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b04      	cmp	r3, #4
 8009994:	d1c3      	bne.n	800991e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099ac:	e049      	b.n	8009a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d119      	bne.n	80099f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0210 	mvn.w	r2, #16
 80099c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2220      	movs	r2, #32
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e030      	b.n	8009a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099f0:	f7fd ffde 	bl	80079b0 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d302      	bcc.n	8009a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d11d      	bne.n	8009a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a10:	2b40      	cmp	r3, #64	@ 0x40
 8009a12:	d016      	beq.n	8009a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2e:	f043 0220 	orr.w	r2, r3, #32
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e007      	b.n	8009a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4c:	2b40      	cmp	r3, #64	@ 0x40
 8009a4e:	d1ae      	bne.n	80099ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a70:	d11b      	bne.n	8009aaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	f043 0204 	orr.w	r2, r3, #4
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e0cc      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009acc:	4b68      	ldr	r3, [pc, #416]	@ (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d90c      	bls.n	8009af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ada:	4b65      	ldr	r3, [pc, #404]	@ (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	b2d2      	uxtb	r2, r2
 8009ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ae2:	4b63      	ldr	r3, [pc, #396]	@ (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d001      	beq.n	8009af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e0b8      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d020      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b0c:	4b59      	ldr	r3, [pc, #356]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	4a58      	ldr	r2, [pc, #352]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0308 	and.w	r3, r3, #8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b24:	4b53      	ldr	r3, [pc, #332]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	4a52      	ldr	r2, [pc, #328]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b30:	4b50      	ldr	r3, [pc, #320]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	494d      	ldr	r1, [pc, #308]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d044      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d107      	bne.n	8009b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b56:	4b47      	ldr	r3, [pc, #284]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d119      	bne.n	8009b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e07f      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d003      	beq.n	8009b76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d107      	bne.n	8009b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b76:	4b3f      	ldr	r3, [pc, #252]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e06f      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b86:	4b3b      	ldr	r3, [pc, #236]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e067      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b96:	4b37      	ldr	r3, [pc, #220]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f023 0203 	bic.w	r2, r3, #3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	4934      	ldr	r1, [pc, #208]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ba8:	f7fd ff02 	bl	80079b0 <HAL_GetTick>
 8009bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bae:	e00a      	b.n	8009bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bb0:	f7fd fefe 	bl	80079b0 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e04f      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f003 020c 	and.w	r2, r3, #12
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d1eb      	bne.n	8009bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bd8:	4b25      	ldr	r3, [pc, #148]	@ (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 030f 	and.w	r3, r3, #15
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d20c      	bcs.n	8009c00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009be6:	4b22      	ldr	r3, [pc, #136]	@ (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bee:	4b20      	ldr	r3, [pc, #128]	@ (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e032      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d008      	beq.n	8009c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c0c:	4b19      	ldr	r3, [pc, #100]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	4916      	ldr	r1, [pc, #88]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0308 	and.w	r3, r3, #8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c2a:	4b12      	ldr	r3, [pc, #72]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	490e      	ldr	r1, [pc, #56]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009c3e:	f000 f855 	bl	8009cec <HAL_RCC_GetSysClockFreq>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	091b      	lsrs	r3, r3, #4
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	490a      	ldr	r1, [pc, #40]	@ (8009c78 <HAL_RCC_ClockConfig+0x1c0>)
 8009c50:	5ccb      	ldrb	r3, [r1, r3]
 8009c52:	fa22 f303 	lsr.w	r3, r2, r3
 8009c56:	4a09      	ldr	r2, [pc, #36]	@ (8009c7c <HAL_RCC_ClockConfig+0x1c4>)
 8009c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009c5a:	4b09      	ldr	r3, [pc, #36]	@ (8009c80 <HAL_RCC_ClockConfig+0x1c8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fd fe62 	bl	8007928 <HAL_InitTick>

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	40023c00 	.word	0x40023c00
 8009c74:	40023800 	.word	0x40023800
 8009c78:	08011640 	.word	0x08011640
 8009c7c:	20000040 	.word	0x20000040
 8009c80:	20000044 	.word	0x20000044

08009c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c88:	4b03      	ldr	r3, [pc, #12]	@ (8009c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20000040 	.word	0x20000040

08009c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ca0:	f7ff fff0 	bl	8009c84 <HAL_RCC_GetHCLKFreq>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	4b05      	ldr	r3, [pc, #20]	@ (8009cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	0a9b      	lsrs	r3, r3, #10
 8009cac:	f003 0307 	and.w	r3, r3, #7
 8009cb0:	4903      	ldr	r1, [pc, #12]	@ (8009cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cb2:	5ccb      	ldrb	r3, [r1, r3]
 8009cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	40023800 	.word	0x40023800
 8009cc0:	08011650 	.word	0x08011650

08009cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009cc8:	f7ff ffdc 	bl	8009c84 <HAL_RCC_GetHCLKFreq>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	4b05      	ldr	r3, [pc, #20]	@ (8009ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	0b5b      	lsrs	r3, r3, #13
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	4903      	ldr	r1, [pc, #12]	@ (8009ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009cda:	5ccb      	ldrb	r3, [r1, r3]
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	40023800 	.word	0x40023800
 8009ce8:	08011650 	.word	0x08011650

08009cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf0:	b0ae      	sub	sp, #184	@ 0xb8
 8009cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d12:	4bcb      	ldr	r3, [pc, #812]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 030c 	and.w	r3, r3, #12
 8009d1a:	2b0c      	cmp	r3, #12
 8009d1c:	f200 8206 	bhi.w	800a12c <HAL_RCC_GetSysClockFreq+0x440>
 8009d20:	a201      	add	r2, pc, #4	@ (adr r2, 8009d28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d5d 	.word	0x08009d5d
 8009d2c:	0800a12d 	.word	0x0800a12d
 8009d30:	0800a12d 	.word	0x0800a12d
 8009d34:	0800a12d 	.word	0x0800a12d
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	0800a12d 	.word	0x0800a12d
 8009d40:	0800a12d 	.word	0x0800a12d
 8009d44:	0800a12d 	.word	0x0800a12d
 8009d48:	08009d6d 	.word	0x08009d6d
 8009d4c:	0800a12d 	.word	0x0800a12d
 8009d50:	0800a12d 	.word	0x0800a12d
 8009d54:	0800a12d 	.word	0x0800a12d
 8009d58:	08009f5d 	.word	0x08009f5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d5c:	4bb9      	ldr	r3, [pc, #740]	@ (800a044 <HAL_RCC_GetSysClockFreq+0x358>)
 8009d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009d62:	e1e7      	b.n	800a134 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d64:	4bb8      	ldr	r3, [pc, #736]	@ (800a048 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009d6a:	e1e3      	b.n	800a134 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d6c:	4bb4      	ldr	r3, [pc, #720]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d78:	4bb1      	ldr	r3, [pc, #708]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d071      	beq.n	8009e68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d84:	4bae      	ldr	r3, [pc, #696]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	099b      	lsrs	r3, r3, #6
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d90:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009da0:	2300      	movs	r3, #0
 8009da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009daa:	4622      	mov	r2, r4
 8009dac:	462b      	mov	r3, r5
 8009dae:	f04f 0000 	mov.w	r0, #0
 8009db2:	f04f 0100 	mov.w	r1, #0
 8009db6:	0159      	lsls	r1, r3, #5
 8009db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dbc:	0150      	lsls	r0, r2, #5
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	1a51      	subs	r1, r2, r1
 8009dc6:	6439      	str	r1, [r7, #64]	@ 0x40
 8009dc8:	4629      	mov	r1, r5
 8009dca:	eb63 0301 	sbc.w	r3, r3, r1
 8009dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009ddc:	4649      	mov	r1, r9
 8009dde:	018b      	lsls	r3, r1, #6
 8009de0:	4641      	mov	r1, r8
 8009de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009de6:	4641      	mov	r1, r8
 8009de8:	018a      	lsls	r2, r1, #6
 8009dea:	4641      	mov	r1, r8
 8009dec:	1a51      	subs	r1, r2, r1
 8009dee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009df0:	4649      	mov	r1, r9
 8009df2:	eb63 0301 	sbc.w	r3, r3, r1
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	f04f 0300 	mov.w	r3, #0
 8009e00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009e04:	4649      	mov	r1, r9
 8009e06:	00cb      	lsls	r3, r1, #3
 8009e08:	4641      	mov	r1, r8
 8009e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e0e:	4641      	mov	r1, r8
 8009e10:	00ca      	lsls	r2, r1, #3
 8009e12:	4610      	mov	r0, r2
 8009e14:	4619      	mov	r1, r3
 8009e16:	4603      	mov	r3, r0
 8009e18:	4622      	mov	r2, r4
 8009e1a:	189b      	adds	r3, r3, r2
 8009e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e1e:	462b      	mov	r3, r5
 8009e20:	460a      	mov	r2, r1
 8009e22:	eb42 0303 	adc.w	r3, r2, r3
 8009e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	f04f 0300 	mov.w	r3, #0
 8009e30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009e34:	4629      	mov	r1, r5
 8009e36:	024b      	lsls	r3, r1, #9
 8009e38:	4621      	mov	r1, r4
 8009e3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e3e:	4621      	mov	r1, r4
 8009e40:	024a      	lsls	r2, r1, #9
 8009e42:	4610      	mov	r0, r2
 8009e44:	4619      	mov	r1, r3
 8009e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009e58:	f7f7 f874 	bl	8000f44 <__aeabi_uldivmod>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4613      	mov	r3, r2
 8009e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e66:	e067      	b.n	8009f38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e68:	4b75      	ldr	r3, [pc, #468]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	099b      	lsrs	r3, r3, #6
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e82:	2300      	movs	r3, #0
 8009e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	f04f 0000 	mov.w	r0, #0
 8009e92:	f04f 0100 	mov.w	r1, #0
 8009e96:	0159      	lsls	r1, r3, #5
 8009e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e9c:	0150      	lsls	r0, r2, #5
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	1a51      	subs	r1, r2, r1
 8009ea6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8009eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	018b      	lsls	r3, r1, #6
 8009ec0:	4641      	mov	r1, r8
 8009ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009ec6:	4641      	mov	r1, r8
 8009ec8:	018a      	lsls	r2, r1, #6
 8009eca:	4641      	mov	r1, r8
 8009ecc:	ebb2 0a01 	subs.w	sl, r2, r1
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ed6:	f04f 0200 	mov.w	r2, #0
 8009eda:	f04f 0300 	mov.w	r3, #0
 8009ede:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ee2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009eea:	4692      	mov	sl, r2
 8009eec:	469b      	mov	fp, r3
 8009eee:	4623      	mov	r3, r4
 8009ef0:	eb1a 0303 	adds.w	r3, sl, r3
 8009ef4:	623b      	str	r3, [r7, #32]
 8009ef6:	462b      	mov	r3, r5
 8009ef8:	eb4b 0303 	adc.w	r3, fp, r3
 8009efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009efe:	f04f 0200 	mov.w	r2, #0
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	028b      	lsls	r3, r1, #10
 8009f0e:	4621      	mov	r1, r4
 8009f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f14:	4621      	mov	r1, r4
 8009f16:	028a      	lsls	r2, r1, #10
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f20:	2200      	movs	r2, #0
 8009f22:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f24:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009f2a:	f7f7 f80b 	bl	8000f44 <__aeabi_uldivmod>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4613      	mov	r3, r2
 8009f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009f38:	4b41      	ldr	r3, [pc, #260]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	0c1b      	lsrs	r3, r3, #16
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	3301      	adds	r3, #1
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009f5a:	e0eb      	b.n	800a134 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f5c:	4b38      	ldr	r3, [pc, #224]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f68:	4b35      	ldr	r3, [pc, #212]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d06b      	beq.n	800a04c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f74:	4b32      	ldr	r3, [pc, #200]	@ (800a040 <HAL_RCC_GetSysClockFreq+0x354>)
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	099b      	lsrs	r3, r3, #6
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f88:	2300      	movs	r3, #0
 8009f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009f90:	4622      	mov	r2, r4
 8009f92:	462b      	mov	r3, r5
 8009f94:	f04f 0000 	mov.w	r0, #0
 8009f98:	f04f 0100 	mov.w	r1, #0
 8009f9c:	0159      	lsls	r1, r3, #5
 8009f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fa2:	0150      	lsls	r0, r2, #5
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4621      	mov	r1, r4
 8009faa:	1a51      	subs	r1, r2, r1
 8009fac:	61b9      	str	r1, [r7, #24]
 8009fae:	4629      	mov	r1, r5
 8009fb0:	eb63 0301 	sbc.w	r3, r3, r1
 8009fb4:	61fb      	str	r3, [r7, #28]
 8009fb6:	f04f 0200 	mov.w	r2, #0
 8009fba:	f04f 0300 	mov.w	r3, #0
 8009fbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009fc2:	4659      	mov	r1, fp
 8009fc4:	018b      	lsls	r3, r1, #6
 8009fc6:	4651      	mov	r1, sl
 8009fc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009fcc:	4651      	mov	r1, sl
 8009fce:	018a      	lsls	r2, r1, #6
 8009fd0:	4651      	mov	r1, sl
 8009fd2:	ebb2 0801 	subs.w	r8, r2, r1
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	eb63 0901 	sbc.w	r9, r3, r1
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	f04f 0300 	mov.w	r3, #0
 8009fe4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fe8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ff0:	4690      	mov	r8, r2
 8009ff2:	4699      	mov	r9, r3
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	eb18 0303 	adds.w	r3, r8, r3
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	eb49 0303 	adc.w	r3, r9, r3
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	f04f 0200 	mov.w	r2, #0
 800a008:	f04f 0300 	mov.w	r3, #0
 800a00c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a010:	4629      	mov	r1, r5
 800a012:	024b      	lsls	r3, r1, #9
 800a014:	4621      	mov	r1, r4
 800a016:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a01a:	4621      	mov	r1, r4
 800a01c:	024a      	lsls	r2, r1, #9
 800a01e:	4610      	mov	r0, r2
 800a020:	4619      	mov	r1, r3
 800a022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a026:	2200      	movs	r2, #0
 800a028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a02a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a02c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a030:	f7f6 ff88 	bl	8000f44 <__aeabi_uldivmod>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	4613      	mov	r3, r2
 800a03a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a03e:	e065      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x420>
 800a040:	40023800 	.word	0x40023800
 800a044:	00f42400 	.word	0x00f42400
 800a048:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a04c:	4b3d      	ldr	r3, [pc, #244]	@ (800a144 <HAL_RCC_GetSysClockFreq+0x458>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	099b      	lsrs	r3, r3, #6
 800a052:	2200      	movs	r2, #0
 800a054:	4618      	mov	r0, r3
 800a056:	4611      	mov	r1, r2
 800a058:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a05c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a05e:	2300      	movs	r3, #0
 800a060:	657b      	str	r3, [r7, #84]	@ 0x54
 800a062:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800a066:	4642      	mov	r2, r8
 800a068:	464b      	mov	r3, r9
 800a06a:	f04f 0000 	mov.w	r0, #0
 800a06e:	f04f 0100 	mov.w	r1, #0
 800a072:	0159      	lsls	r1, r3, #5
 800a074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a078:	0150      	lsls	r0, r2, #5
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4641      	mov	r1, r8
 800a080:	1a51      	subs	r1, r2, r1
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	4649      	mov	r1, r9
 800a086:	eb63 0301 	sbc.w	r3, r3, r1
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a098:	4659      	mov	r1, fp
 800a09a:	018b      	lsls	r3, r1, #6
 800a09c:	4651      	mov	r1, sl
 800a09e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a0a2:	4651      	mov	r1, sl
 800a0a4:	018a      	lsls	r2, r1, #6
 800a0a6:	4651      	mov	r1, sl
 800a0a8:	1a54      	subs	r4, r2, r1
 800a0aa:	4659      	mov	r1, fp
 800a0ac:	eb63 0501 	sbc.w	r5, r3, r1
 800a0b0:	f04f 0200 	mov.w	r2, #0
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	00eb      	lsls	r3, r5, #3
 800a0ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0be:	00e2      	lsls	r2, r4, #3
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	461d      	mov	r5, r3
 800a0c4:	4643      	mov	r3, r8
 800a0c6:	18e3      	adds	r3, r4, r3
 800a0c8:	603b      	str	r3, [r7, #0]
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	eb45 0303 	adc.w	r3, r5, r3
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	f04f 0200 	mov.w	r2, #0
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a0de:	4629      	mov	r1, r5
 800a0e0:	028b      	lsls	r3, r1, #10
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	028a      	lsls	r2, r1, #10
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a0fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a0fe:	f7f6 ff21 	bl	8000f44 <__aeabi_uldivmod>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4613      	mov	r3, r2
 800a108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a10c:	4b0d      	ldr	r3, [pc, #52]	@ (800a144 <HAL_RCC_GetSysClockFreq+0x458>)
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	0f1b      	lsrs	r3, r3, #28
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800a11a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a11e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a122:	fbb2 f3f3 	udiv	r3, r2, r3
 800a126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a12a:	e003      	b.n	800a134 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a12e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a132:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	37b8      	adds	r7, #184	@ 0xb8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a142:	bf00      	nop
 800a144:	40023800 	.word	0x40023800
 800a148:	00f42400 	.word	0x00f42400

0800a14c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e28d      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 8083 	beq.w	800a272 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a16c:	4b94      	ldr	r3, [pc, #592]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f003 030c 	and.w	r3, r3, #12
 800a174:	2b04      	cmp	r3, #4
 800a176:	d019      	beq.n	800a1ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a178:	4b91      	ldr	r3, [pc, #580]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f003 030c 	and.w	r3, r3, #12
        || \
 800a180:	2b08      	cmp	r3, #8
 800a182:	d106      	bne.n	800a192 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a184:	4b8e      	ldr	r3, [pc, #568]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a18c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a190:	d00c      	beq.n	800a1ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a192:	4b8b      	ldr	r3, [pc, #556]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a19a:	2b0c      	cmp	r3, #12
 800a19c:	d112      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a19e:	4b88      	ldr	r3, [pc, #544]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1aa:	d10b      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1ac:	4b84      	ldr	r3, [pc, #528]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d05b      	beq.n	800a270 <HAL_RCC_OscConfig+0x124>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d157      	bne.n	800a270 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e25a      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1cc:	d106      	bne.n	800a1dc <HAL_RCC_OscConfig+0x90>
 800a1ce:	4b7c      	ldr	r3, [pc, #496]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a7b      	ldr	r2, [pc, #492]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e01d      	b.n	800a218 <HAL_RCC_OscConfig+0xcc>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1e4:	d10c      	bne.n	800a200 <HAL_RCC_OscConfig+0xb4>
 800a1e6:	4b76      	ldr	r3, [pc, #472]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a75      	ldr	r2, [pc, #468]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	4b73      	ldr	r3, [pc, #460]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a72      	ldr	r2, [pc, #456]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a1f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	e00b      	b.n	800a218 <HAL_RCC_OscConfig+0xcc>
 800a200:	4b6f      	ldr	r3, [pc, #444]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a6e      	ldr	r2, [pc, #440]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	4b6c      	ldr	r3, [pc, #432]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a6b      	ldr	r2, [pc, #428]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d013      	beq.n	800a248 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a220:	f7fd fbc6 	bl	80079b0 <HAL_GetTick>
 800a224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a226:	e008      	b.n	800a23a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a228:	f7fd fbc2 	bl	80079b0 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	2b64      	cmp	r3, #100	@ 0x64
 800a234:	d901      	bls.n	800a23a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e21f      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a23a:	4b61      	ldr	r3, [pc, #388]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0f0      	beq.n	800a228 <HAL_RCC_OscConfig+0xdc>
 800a246:	e014      	b.n	800a272 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a248:	f7fd fbb2 	bl	80079b0 <HAL_GetTick>
 800a24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a24e:	e008      	b.n	800a262 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a250:	f7fd fbae 	bl	80079b0 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b64      	cmp	r3, #100	@ 0x64
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e20b      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a262:	4b57      	ldr	r3, [pc, #348]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1f0      	bne.n	800a250 <HAL_RCC_OscConfig+0x104>
 800a26e:	e000      	b.n	800a272 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d06f      	beq.n	800a35e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a27e:	4b50      	ldr	r3, [pc, #320]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 030c 	and.w	r3, r3, #12
 800a286:	2b00      	cmp	r3, #0
 800a288:	d017      	beq.n	800a2ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a28a:	4b4d      	ldr	r3, [pc, #308]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f003 030c 	and.w	r3, r3, #12
        || \
 800a292:	2b08      	cmp	r3, #8
 800a294:	d105      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a296:	4b4a      	ldr	r3, [pc, #296]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2a2:	4b47      	ldr	r3, [pc, #284]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a2aa:	2b0c      	cmp	r3, #12
 800a2ac:	d11c      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2ae:	4b44      	ldr	r3, [pc, #272]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d116      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ba:	4b41      	ldr	r3, [pc, #260]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x186>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d001      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e1d3      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d2:	4b3b      	ldr	r3, [pc, #236]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	4937      	ldr	r1, [pc, #220]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2e6:	e03a      	b.n	800a35e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d020      	beq.n	800a332 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2f0:	4b34      	ldr	r3, [pc, #208]	@ (800a3c4 <HAL_RCC_OscConfig+0x278>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f6:	f7fd fb5b 	bl	80079b0 <HAL_GetTick>
 800a2fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2fc:	e008      	b.n	800a310 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2fe:	f7fd fb57 	bl	80079b0 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d901      	bls.n	800a310 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e1b4      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a310:	4b2b      	ldr	r3, [pc, #172]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0f0      	beq.n	800a2fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a31c:	4b28      	ldr	r3, [pc, #160]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	4925      	ldr	r1, [pc, #148]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	600b      	str	r3, [r1, #0]
 800a330:	e015      	b.n	800a35e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a332:	4b24      	ldr	r3, [pc, #144]	@ (800a3c4 <HAL_RCC_OscConfig+0x278>)
 800a334:	2200      	movs	r2, #0
 800a336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a338:	f7fd fb3a 	bl	80079b0 <HAL_GetTick>
 800a33c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a33e:	e008      	b.n	800a352 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a340:	f7fd fb36 	bl	80079b0 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d901      	bls.n	800a352 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e193      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a352:	4b1b      	ldr	r3, [pc, #108]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f0      	bne.n	800a340 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0308 	and.w	r3, r3, #8
 800a366:	2b00      	cmp	r3, #0
 800a368:	d036      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d016      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a372:	4b15      	ldr	r3, [pc, #84]	@ (800a3c8 <HAL_RCC_OscConfig+0x27c>)
 800a374:	2201      	movs	r2, #1
 800a376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a378:	f7fd fb1a 	bl	80079b0 <HAL_GetTick>
 800a37c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a37e:	e008      	b.n	800a392 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a380:	f7fd fb16 	bl	80079b0 <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d901      	bls.n	800a392 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e173      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a392:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c0 <HAL_RCC_OscConfig+0x274>)
 800a394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0f0      	beq.n	800a380 <HAL_RCC_OscConfig+0x234>
 800a39e:	e01b      	b.n	800a3d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3a0:	4b09      	ldr	r3, [pc, #36]	@ (800a3c8 <HAL_RCC_OscConfig+0x27c>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3a6:	f7fd fb03 	bl	80079b0 <HAL_GetTick>
 800a3aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3ac:	e00e      	b.n	800a3cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3ae:	f7fd faff 	bl	80079b0 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d907      	bls.n	800a3cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e15c      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
 800a3c0:	40023800 	.word	0x40023800
 800a3c4:	42470000 	.word	0x42470000
 800a3c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3cc:	4b8a      	ldr	r3, [pc, #552]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1ea      	bne.n	800a3ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 8097 	beq.w	800a514 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3ea:	4b83      	ldr	r3, [pc, #524]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10f      	bne.n	800a416 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	4b7f      	ldr	r3, [pc, #508]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fe:	4a7e      	ldr	r2, [pc, #504]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a404:	6413      	str	r3, [r2, #64]	@ 0x40
 800a406:	4b7c      	ldr	r3, [pc, #496]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a40e:	60bb      	str	r3, [r7, #8]
 800a410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a412:	2301      	movs	r3, #1
 800a414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a416:	4b79      	ldr	r3, [pc, #484]	@ (800a5fc <HAL_RCC_OscConfig+0x4b0>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d118      	bne.n	800a454 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a422:	4b76      	ldr	r3, [pc, #472]	@ (800a5fc <HAL_RCC_OscConfig+0x4b0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a75      	ldr	r2, [pc, #468]	@ (800a5fc <HAL_RCC_OscConfig+0x4b0>)
 800a428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a42c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a42e:	f7fd fabf 	bl	80079b0 <HAL_GetTick>
 800a432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a434:	e008      	b.n	800a448 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a436:	f7fd fabb 	bl	80079b0 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b02      	cmp	r3, #2
 800a442:	d901      	bls.n	800a448 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e118      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a448:	4b6c      	ldr	r3, [pc, #432]	@ (800a5fc <HAL_RCC_OscConfig+0x4b0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0f0      	beq.n	800a436 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d106      	bne.n	800a46a <HAL_RCC_OscConfig+0x31e>
 800a45c:	4b66      	ldr	r3, [pc, #408]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a45e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a460:	4a65      	ldr	r2, [pc, #404]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a462:	f043 0301 	orr.w	r3, r3, #1
 800a466:	6713      	str	r3, [r2, #112]	@ 0x70
 800a468:	e01c      	b.n	800a4a4 <HAL_RCC_OscConfig+0x358>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d10c      	bne.n	800a48c <HAL_RCC_OscConfig+0x340>
 800a472:	4b61      	ldr	r3, [pc, #388]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a476:	4a60      	ldr	r2, [pc, #384]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a478:	f043 0304 	orr.w	r3, r3, #4
 800a47c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a47e:	4b5e      	ldr	r3, [pc, #376]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a482:	4a5d      	ldr	r2, [pc, #372]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a484:	f043 0301 	orr.w	r3, r3, #1
 800a488:	6713      	str	r3, [r2, #112]	@ 0x70
 800a48a:	e00b      	b.n	800a4a4 <HAL_RCC_OscConfig+0x358>
 800a48c:	4b5a      	ldr	r3, [pc, #360]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a490:	4a59      	ldr	r2, [pc, #356]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	6713      	str	r3, [r2, #112]	@ 0x70
 800a498:	4b57      	ldr	r3, [pc, #348]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a49a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49c:	4a56      	ldr	r2, [pc, #344]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a49e:	f023 0304 	bic.w	r3, r3, #4
 800a4a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d015      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4ac:	f7fd fa80 	bl	80079b0 <HAL_GetTick>
 800a4b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b2:	e00a      	b.n	800a4ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4b4:	f7fd fa7c 	bl	80079b0 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e0d7      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ca:	4b4b      	ldr	r3, [pc, #300]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a4cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0ee      	beq.n	800a4b4 <HAL_RCC_OscConfig+0x368>
 800a4d6:	e014      	b.n	800a502 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d8:	f7fd fa6a 	bl	80079b0 <HAL_GetTick>
 800a4dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4de:	e00a      	b.n	800a4f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e0:	f7fd fa66 	bl	80079b0 <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e0c1      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4f6:	4b40      	ldr	r3, [pc, #256]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1ee      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d105      	bne.n	800a514 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a508:	4b3b      	ldr	r3, [pc, #236]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50c:	4a3a      	ldr	r2, [pc, #232]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a50e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80ad 	beq.w	800a678 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a51e:	4b36      	ldr	r3, [pc, #216]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f003 030c 	and.w	r3, r3, #12
 800a526:	2b08      	cmp	r3, #8
 800a528:	d060      	beq.n	800a5ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d145      	bne.n	800a5be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a532:	4b33      	ldr	r3, [pc, #204]	@ (800a600 <HAL_RCC_OscConfig+0x4b4>)
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a538:	f7fd fa3a 	bl	80079b0 <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53e:	e008      	b.n	800a552 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a540:	f7fd fa36 	bl	80079b0 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e093      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a552:	4b29      	ldr	r3, [pc, #164]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1f0      	bne.n	800a540 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69da      	ldr	r2, [r3, #28]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	431a      	orrs	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56c:	019b      	lsls	r3, r3, #6
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	3b01      	subs	r3, #1
 800a578:	041b      	lsls	r3, r3, #16
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a580:	061b      	lsls	r3, r3, #24
 800a582:	431a      	orrs	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a588:	071b      	lsls	r3, r3, #28
 800a58a:	491b      	ldr	r1, [pc, #108]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a590:	4b1b      	ldr	r3, [pc, #108]	@ (800a600 <HAL_RCC_OscConfig+0x4b4>)
 800a592:	2201      	movs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a596:	f7fd fa0b 	bl	80079b0 <HAL_GetTick>
 800a59a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a59c:	e008      	b.n	800a5b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a59e:	f7fd fa07 	bl	80079b0 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e064      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5b0:	4b11      	ldr	r3, [pc, #68]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <HAL_RCC_OscConfig+0x452>
 800a5bc:	e05c      	b.n	800a678 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5be:	4b10      	ldr	r3, [pc, #64]	@ (800a600 <HAL_RCC_OscConfig+0x4b4>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c4:	f7fd f9f4 	bl	80079b0 <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5ca:	e008      	b.n	800a5de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5cc:	f7fd f9f0 	bl	80079b0 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e04d      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5de:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <HAL_RCC_OscConfig+0x4ac>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f0      	bne.n	800a5cc <HAL_RCC_OscConfig+0x480>
 800a5ea:	e045      	b.n	800a678 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d107      	bne.n	800a604 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e040      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
 800a5f8:	40023800 	.word	0x40023800
 800a5fc:	40007000 	.word	0x40007000
 800a600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a604:	4b1f      	ldr	r3, [pc, #124]	@ (800a684 <HAL_RCC_OscConfig+0x538>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d030      	beq.n	800a674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d129      	bne.n	800a674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d122      	bne.n	800a674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a634:	4013      	ands	r3, r2
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a63a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d119      	bne.n	800a674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	3b01      	subs	r3, #1
 800a64e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a650:	429a      	cmp	r2, r3
 800a652:	d10f      	bne.n	800a674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a660:	429a      	cmp	r2, r3
 800a662:	d107      	bne.n	800a674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a670:	429a      	cmp	r2, r3
 800a672:	d001      	beq.n	800a678 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40023800 	.word	0x40023800

0800a688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e041      	b.n	800a71e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fc fc46 	bl	8006f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f000 fa7e 	bl	800abc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d001      	beq.n	800a740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e04e      	b.n	800a7de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68da      	ldr	r2, [r3, #12]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f042 0201 	orr.w	r2, r2, #1
 800a756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a23      	ldr	r2, [pc, #140]	@ (800a7ec <HAL_TIM_Base_Start_IT+0xc4>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d022      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a76a:	d01d      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a1f      	ldr	r2, [pc, #124]	@ (800a7f0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d018      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d013      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a1c      	ldr	r2, [pc, #112]	@ (800a7f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00e      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a1b      	ldr	r2, [pc, #108]	@ (800a7fc <HAL_TIM_Base_Start_IT+0xd4>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d009      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a19      	ldr	r2, [pc, #100]	@ (800a800 <HAL_TIM_Base_Start_IT+0xd8>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d004      	beq.n	800a7a8 <HAL_TIM_Base_Start_IT+0x80>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a18      	ldr	r2, [pc, #96]	@ (800a804 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d111      	bne.n	800a7cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b06      	cmp	r3, #6
 800a7b8:	d010      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f042 0201 	orr.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ca:	e007      	b.n	800a7dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f042 0201 	orr.w	r2, r2, #1
 800a7da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40010000 	.word	0x40010000
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40000800 	.word	0x40000800
 800a7f8:	40000c00 	.word	0x40000c00
 800a7fc:	40010400 	.word	0x40010400
 800a800:	40014000 	.word	0x40014000
 800a804:	40001800 	.word	0x40001800

0800a808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d020      	beq.n	800a86c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f003 0302 	and.w	r3, r3, #2
 800a830:	2b00      	cmp	r3, #0
 800a832:	d01b      	beq.n	800a86c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f06f 0202 	mvn.w	r2, #2
 800a83c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f999 	bl	800ab8a <HAL_TIM_IC_CaptureCallback>
 800a858:	e005      	b.n	800a866 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f98b 	bl	800ab76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f99c 	bl	800ab9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f003 0304 	and.w	r3, r3, #4
 800a872:	2b00      	cmp	r3, #0
 800a874:	d020      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01b      	beq.n	800a8b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f06f 0204 	mvn.w	r2, #4
 800a888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2202      	movs	r2, #2
 800a88e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f973 	bl	800ab8a <HAL_TIM_IC_CaptureCallback>
 800a8a4:	e005      	b.n	800a8b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f965 	bl	800ab76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f976 	bl	800ab9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f003 0308 	and.w	r3, r3, #8
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d020      	beq.n	800a904 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f003 0308 	and.w	r3, r3, #8
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01b      	beq.n	800a904 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f06f 0208 	mvn.w	r2, #8
 800a8d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2204      	movs	r2, #4
 800a8da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	69db      	ldr	r3, [r3, #28]
 800a8e2:	f003 0303 	and.w	r3, r3, #3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f94d 	bl	800ab8a <HAL_TIM_IC_CaptureCallback>
 800a8f0:	e005      	b.n	800a8fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f93f 	bl	800ab76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f950 	bl	800ab9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f003 0310 	and.w	r3, r3, #16
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d020      	beq.n	800a950 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	d01b      	beq.n	800a950 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f06f 0210 	mvn.w	r2, #16
 800a920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2208      	movs	r2, #8
 800a926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f927 	bl	800ab8a <HAL_TIM_IC_CaptureCallback>
 800a93c:	e005      	b.n	800a94a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f919 	bl	800ab76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f92a 	bl	800ab9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00c      	beq.n	800a974 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d007      	beq.n	800a974 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0201 	mvn.w	r2, #1
 800a96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fa f9b2 	bl	8004cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00c      	beq.n	800a998 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fade 	bl	800af54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00c      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d007      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f8fb 	bl	800abb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f003 0320 	and.w	r3, r3, #32
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00c      	beq.n	800a9e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0220 	mvn.w	r2, #32
 800a9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fab0 	bl	800af40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9e0:	bf00      	nop
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_TIM_ConfigClockSource+0x1c>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e0b4      	b.n	800ab6e <HAL_TIM_ConfigClockSource+0x186>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aa22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa3c:	d03e      	beq.n	800aabc <HAL_TIM_ConfigClockSource+0xd4>
 800aa3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa42:	f200 8087 	bhi.w	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa4a:	f000 8086 	beq.w	800ab5a <HAL_TIM_ConfigClockSource+0x172>
 800aa4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa52:	d87f      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa54:	2b70      	cmp	r3, #112	@ 0x70
 800aa56:	d01a      	beq.n	800aa8e <HAL_TIM_ConfigClockSource+0xa6>
 800aa58:	2b70      	cmp	r3, #112	@ 0x70
 800aa5a:	d87b      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa5c:	2b60      	cmp	r3, #96	@ 0x60
 800aa5e:	d050      	beq.n	800ab02 <HAL_TIM_ConfigClockSource+0x11a>
 800aa60:	2b60      	cmp	r3, #96	@ 0x60
 800aa62:	d877      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa64:	2b50      	cmp	r3, #80	@ 0x50
 800aa66:	d03c      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0xfa>
 800aa68:	2b50      	cmp	r3, #80	@ 0x50
 800aa6a:	d873      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa6c:	2b40      	cmp	r3, #64	@ 0x40
 800aa6e:	d058      	beq.n	800ab22 <HAL_TIM_ConfigClockSource+0x13a>
 800aa70:	2b40      	cmp	r3, #64	@ 0x40
 800aa72:	d86f      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa74:	2b30      	cmp	r3, #48	@ 0x30
 800aa76:	d064      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x15a>
 800aa78:	2b30      	cmp	r3, #48	@ 0x30
 800aa7a:	d86b      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d060      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x15a>
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	d867      	bhi.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d05c      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x15a>
 800aa88:	2b10      	cmp	r3, #16
 800aa8a:	d05a      	beq.n	800ab42 <HAL_TIM_ConfigClockSource+0x15a>
 800aa8c:	e062      	b.n	800ab54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa9e:	f000 f9b3 	bl	800ae08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	609a      	str	r2, [r3, #8]
      break;
 800aaba:	e04f      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aacc:	f000 f99c 	bl	800ae08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aade:	609a      	str	r2, [r3, #8]
      break;
 800aae0:	e03c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f000 f910 	bl	800ad14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2150      	movs	r1, #80	@ 0x50
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f969 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800ab00:	e02c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f000 f92f 	bl	800ad72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2160      	movs	r1, #96	@ 0x60
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f959 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800ab20:	e01c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f000 f8f0 	bl	800ad14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2140      	movs	r1, #64	@ 0x40
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f949 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800ab40:	e00c      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f000 f940 	bl	800add2 <TIM_ITRx_SetConfig>
      break;
 800ab52:	e003      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	e000      	b.n	800ab5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab7e:	bf00      	nop
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab92:	bf00      	nop
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b083      	sub	sp, #12
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aba6:	bf00      	nop
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
	...

0800abc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a43      	ldr	r2, [pc, #268]	@ (800ace8 <TIM_Base_SetConfig+0x120>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d013      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe6:	d00f      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a40      	ldr	r2, [pc, #256]	@ (800acec <TIM_Base_SetConfig+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d00b      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a3f      	ldr	r2, [pc, #252]	@ (800acf0 <TIM_Base_SetConfig+0x128>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d007      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a3e      	ldr	r2, [pc, #248]	@ (800acf4 <TIM_Base_SetConfig+0x12c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d003      	beq.n	800ac08 <TIM_Base_SetConfig+0x40>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a3d      	ldr	r2, [pc, #244]	@ (800acf8 <TIM_Base_SetConfig+0x130>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d108      	bne.n	800ac1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a32      	ldr	r2, [pc, #200]	@ (800ace8 <TIM_Base_SetConfig+0x120>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d02b      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac28:	d027      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a2f      	ldr	r2, [pc, #188]	@ (800acec <TIM_Base_SetConfig+0x124>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d023      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a2e      	ldr	r2, [pc, #184]	@ (800acf0 <TIM_Base_SetConfig+0x128>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d01f      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a2d      	ldr	r2, [pc, #180]	@ (800acf4 <TIM_Base_SetConfig+0x12c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d01b      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a2c      	ldr	r2, [pc, #176]	@ (800acf8 <TIM_Base_SetConfig+0x130>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d017      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a2b      	ldr	r2, [pc, #172]	@ (800acfc <TIM_Base_SetConfig+0x134>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a2a      	ldr	r2, [pc, #168]	@ (800ad00 <TIM_Base_SetConfig+0x138>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d00f      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a29      	ldr	r2, [pc, #164]	@ (800ad04 <TIM_Base_SetConfig+0x13c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d00b      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a28      	ldr	r2, [pc, #160]	@ (800ad08 <TIM_Base_SetConfig+0x140>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d007      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a27      	ldr	r2, [pc, #156]	@ (800ad0c <TIM_Base_SetConfig+0x144>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d003      	beq.n	800ac7a <TIM_Base_SetConfig+0xb2>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a26      	ldr	r2, [pc, #152]	@ (800ad10 <TIM_Base_SetConfig+0x148>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d108      	bne.n	800ac8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a0e      	ldr	r2, [pc, #56]	@ (800ace8 <TIM_Base_SetConfig+0x120>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_Base_SetConfig+0xf2>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a10      	ldr	r2, [pc, #64]	@ (800acf8 <TIM_Base_SetConfig+0x130>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d103      	bne.n	800acc2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	691a      	ldr	r2, [r3, #16]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f043 0204 	orr.w	r2, r3, #4
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	601a      	str	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	40010000 	.word	0x40010000
 800acec:	40000400 	.word	0x40000400
 800acf0:	40000800 	.word	0x40000800
 800acf4:	40000c00 	.word	0x40000c00
 800acf8:	40010400 	.word	0x40010400
 800acfc:	40014000 	.word	0x40014000
 800ad00:	40014400 	.word	0x40014400
 800ad04:	40014800 	.word	0x40014800
 800ad08:	40001800 	.word	0x40001800
 800ad0c:	40001c00 	.word	0x40001c00
 800ad10:	40002000 	.word	0x40002000

0800ad14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f023 0201 	bic.w	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	011b      	lsls	r3, r3, #4
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f023 030a 	bic.w	r3, r3, #10
 800ad50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	621a      	str	r2, [r3, #32]
}
 800ad66:	bf00      	nop
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b087      	sub	sp, #28
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
 800ad88:	f023 0210 	bic.w	r2, r3, #16
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	031b      	lsls	r3, r3, #12
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	011b      	lsls	r3, r3, #4
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	621a      	str	r2, [r3, #32]
}
 800adc6:	bf00      	nop
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	f043 0307 	orr.w	r3, r3, #7
 800adf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	609a      	str	r2, [r3, #8]
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	021a      	lsls	r2, r3, #8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	609a      	str	r2, [r3, #8]
}
 800ae3c:	bf00      	nop
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d101      	bne.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e05a      	b.n	800af16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a21      	ldr	r2, [pc, #132]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d022      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeac:	d01d      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a1d      	ldr	r2, [pc, #116]	@ (800af28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d018      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a1b      	ldr	r2, [pc, #108]	@ (800af2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d013      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a1a      	ldr	r2, [pc, #104]	@ (800af30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00e      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a18      	ldr	r2, [pc, #96]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d009      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a17      	ldr	r2, [pc, #92]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d004      	beq.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a15      	ldr	r2, [pc, #84]	@ (800af3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d10c      	bne.n	800af04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40010000 	.word	0x40010000
 800af28:	40000400 	.word	0x40000400
 800af2c:	40000800 	.word	0x40000800
 800af30:	40000c00 	.word	0x40000c00
 800af34:	40010400 	.word	0x40010400
 800af38:	40014000 	.word	0x40014000
 800af3c:	40001800 	.word	0x40001800

0800af40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e042      	b.n	800b000 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d106      	bne.n	800af94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7fb fffc 	bl	8006f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2224      	movs	r2, #36	@ 0x24
 800af98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 f879 	bl	800c0a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800afc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	695a      	ldr	r2, [r3, #20]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800afd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800afe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2220      	movs	r2, #32
 800aff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08a      	sub	sp, #40	@ 0x28
 800b00c:	af02      	add	r7, sp, #8
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	4613      	mov	r3, r2
 800b016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b20      	cmp	r3, #32
 800b026:	d175      	bne.n	800b114 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <HAL_UART_Transmit+0x2c>
 800b02e:	88fb      	ldrh	r3, [r7, #6]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e06e      	b.n	800b116 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2221      	movs	r2, #33	@ 0x21
 800b042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b046:	f7fc fcb3 	bl	80079b0 <HAL_GetTick>
 800b04a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	88fa      	ldrh	r2, [r7, #6]
 800b050:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	88fa      	ldrh	r2, [r7, #6]
 800b056:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b060:	d108      	bne.n	800b074 <HAL_UART_Transmit+0x6c>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d104      	bne.n	800b074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	61bb      	str	r3, [r7, #24]
 800b072:	e003      	b.n	800b07c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b07c:	e02e      	b.n	800b0dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2200      	movs	r2, #0
 800b086:	2180      	movs	r1, #128	@ 0x80
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 fd4a 	bl	800bb22 <UART_WaitOnFlagUntilTimeout>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d005      	beq.n	800b0a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2220      	movs	r2, #32
 800b098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e03a      	b.n	800b116 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10b      	bne.n	800b0be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	61bb      	str	r3, [r7, #24]
 800b0bc:	e007      	b.n	800b0ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	781a      	ldrb	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1cb      	bne.n	800b07e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2140      	movs	r1, #64	@ 0x40
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 fd16 	bl	800bb22 <UART_WaitOnFlagUntilTimeout>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d005      	beq.n	800b108 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2220      	movs	r2, #32
 800b100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e006      	b.n	800b116 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2220      	movs	r2, #32
 800b10c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	e000      	b.n	800b116 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b114:	2302      	movs	r3, #2
  }
}
 800b116:	4618      	mov	r0, r3
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08c      	sub	sp, #48	@ 0x30
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4613      	mov	r3, r2
 800b12c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b20      	cmp	r3, #32
 800b138:	d162      	bne.n	800b200 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <HAL_UART_Transmit_DMA+0x26>
 800b140:	88fb      	ldrh	r3, [r7, #6]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e05b      	b.n	800b202 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	88fa      	ldrh	r2, [r7, #6]
 800b154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	88fa      	ldrh	r2, [r7, #6]
 800b15a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2221      	movs	r2, #33	@ 0x21
 800b166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16e:	4a27      	ldr	r2, [pc, #156]	@ (800b20c <HAL_UART_Transmit_DMA+0xec>)
 800b170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b176:	4a26      	ldr	r2, [pc, #152]	@ (800b210 <HAL_UART_Transmit_DMA+0xf0>)
 800b178:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17e:	4a25      	ldr	r2, [pc, #148]	@ (800b214 <HAL_UART_Transmit_DMA+0xf4>)
 800b180:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b186:	2200      	movs	r2, #0
 800b188:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b18a:	f107 0308 	add.w	r3, r7, #8
 800b18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	6819      	ldr	r1, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3304      	adds	r3, #4
 800b19e:	461a      	mov	r2, r3
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	f7fc fe27 	bl	8007df4 <HAL_DMA_Start_IT>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d008      	beq.n	800b1be <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e021      	b.n	800b202 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b1c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3314      	adds	r3, #20
 800b1ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	e853 3f00 	ldrex	r3, [r3]
 800b1d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3314      	adds	r3, #20
 800b1e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1e8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ec:	6a39      	ldr	r1, [r7, #32]
 800b1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f0:	e841 2300 	strex	r3, r2, [r1]
 800b1f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e5      	bne.n	800b1c8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e000      	b.n	800b202 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800b200:	2302      	movs	r3, #2
  }
}
 800b202:	4618      	mov	r0, r3
 800b204:	3730      	adds	r7, #48	@ 0x30
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	0800b871 	.word	0x0800b871
 800b210:	0800b90b 	.word	0x0800b90b
 800b214:	0800ba8f 	.word	0x0800ba8f

0800b218 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08c      	sub	sp, #48	@ 0x30
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	4613      	mov	r3, r2
 800b224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b20      	cmp	r3, #32
 800b230:	d146      	bne.n	800b2c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b238:	88fb      	ldrh	r3, [r7, #6]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e03f      	b.n	800b2c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2201      	movs	r2, #1
 800b246:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b24e:	88fb      	ldrh	r3, [r7, #6]
 800b250:	461a      	mov	r2, r3
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 fcbd 	bl	800bbd4 <UART_Start_Receive_DMA>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b264:	2b01      	cmp	r3, #1
 800b266:	d125      	bne.n	800b2b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	613b      	str	r3, [r7, #16]
 800b27c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	330c      	adds	r3, #12
 800b284:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	617b      	str	r3, [r7, #20]
   return(result);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f043 0310 	orr.w	r3, r3, #16
 800b294:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	330c      	adds	r3, #12
 800b29c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b29e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a2:	6a39      	ldr	r1, [r7, #32]
 800b2a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1e5      	bne.n	800b27e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800b2b2:	e002      	b.n	800b2ba <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b2ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2be:	e000      	b.n	800b2c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800b2c0:	2302      	movs	r3, #2
  }
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3730      	adds	r7, #48	@ 0x30
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
	...

0800b2cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b0ba      	sub	sp, #232	@ 0xe8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b302:	f003 030f 	and.w	r3, r3, #15
 800b306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b30a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10f      	bne.n	800b332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b316:	f003 0320 	and.w	r3, r3, #32
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <HAL_UART_IRQHandler+0x66>
 800b31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fdfc 	bl	800bf28 <UART_Receive_IT>
      return;
 800b330:	e273      	b.n	800b81a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b336:	2b00      	cmp	r3, #0
 800b338:	f000 80de 	beq.w	800b4f8 <HAL_UART_IRQHandler+0x22c>
 800b33c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b34c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 80d1 	beq.w	800b4f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <HAL_UART_IRQHandler+0xae>
 800b362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b372:	f043 0201 	orr.w	r2, r3, #1
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00b      	beq.n	800b39e <HAL_UART_IRQHandler+0xd2>
 800b386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d005      	beq.n	800b39e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b396:	f043 0202 	orr.w	r2, r3, #2
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a2:	f003 0302 	and.w	r3, r3, #2
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00b      	beq.n	800b3c2 <HAL_UART_IRQHandler+0xf6>
 800b3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d005      	beq.n	800b3c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ba:	f043 0204 	orr.w	r2, r3, #4
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3c6:	f003 0308 	and.w	r3, r3, #8
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <HAL_UART_IRQHandler+0x126>
 800b3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d105      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ea:	f043 0208 	orr.w	r2, r3, #8
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 820a 	beq.w	800b810 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b00      	cmp	r3, #0
 800b406:	d008      	beq.n	800b41a <HAL_UART_IRQHandler+0x14e>
 800b408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b40c:	f003 0320 	and.w	r3, r3, #32
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fd87 	bl	800bf28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b424:	2b40      	cmp	r3, #64	@ 0x40
 800b426:	bf0c      	ite	eq
 800b428:	2301      	moveq	r3, #1
 800b42a:	2300      	movne	r3, #0
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b436:	f003 0308 	and.w	r3, r3, #8
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <HAL_UART_IRQHandler+0x17a>
 800b43e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b442:	2b00      	cmp	r3, #0
 800b444:	d04f      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fc92 	bl	800bd70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b456:	2b40      	cmp	r3, #64	@ 0x40
 800b458:	d141      	bne.n	800b4de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3314      	adds	r3, #20
 800b460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3314      	adds	r3, #20
 800b482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b48a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b49e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1d9      	bne.n	800b45a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d013      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b2:	4a8a      	ldr	r2, [pc, #552]	@ (800b6dc <HAL_UART_IRQHandler+0x410>)
 800b4b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fc fd62 	bl	8007f84 <HAL_DMA_Abort_IT>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d016      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d4:	e00e      	b.n	800b4f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f9c0 	bl	800b85c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4dc:	e00a      	b.n	800b4f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9bc 	bl	800b85c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4e4:	e006      	b.n	800b4f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f9b8 	bl	800b85c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b4f2:	e18d      	b.n	800b810 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4f4:	bf00      	nop
    return;
 800b4f6:	e18b      	b.n	800b810 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	f040 8167 	bne.w	800b7d0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 8160 	beq.w	800b7d0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b514:	f003 0310 	and.w	r3, r3, #16
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 8159 	beq.w	800b7d0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b51e:	2300      	movs	r3, #0
 800b520:	60bb      	str	r3, [r7, #8]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60bb      	str	r3, [r7, #8]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	60bb      	str	r3, [r7, #8]
 800b532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53e:	2b40      	cmp	r3, #64	@ 0x40
 800b540:	f040 80ce 	bne.w	800b6e0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80a9 	beq.w	800b6ac <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b55e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b562:	429a      	cmp	r2, r3
 800b564:	f080 80a2 	bcs.w	800b6ac <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b56e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b57a:	f000 8088 	beq.w	800b68e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	330c      	adds	r3, #12
 800b584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b59c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	330c      	adds	r3, #12
 800b5a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b5aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b5ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b5b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b5c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1d9      	bne.n	800b57e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3314      	adds	r3, #20
 800b5d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b5da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5dc:	f023 0301 	bic.w	r3, r3, #1
 800b5e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3314      	adds	r3, #20
 800b5ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b5f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b5f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e1      	bne.n	800b5ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3314      	adds	r3, #20
 800b60c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b61c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3314      	adds	r3, #20
 800b626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b62a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b62c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b630:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b632:	e841 2300 	strex	r3, r2, [r1]
 800b636:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1e3      	bne.n	800b606 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2220      	movs	r2, #32
 800b642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	330c      	adds	r3, #12
 800b652:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b656:	e853 3f00 	ldrex	r3, [r3]
 800b65a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b65e:	f023 0310 	bic.w	r3, r3, #16
 800b662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	330c      	adds	r3, #12
 800b66c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b670:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b672:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b676:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b678:	e841 2300 	strex	r3, r2, [r1]
 800b67c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b67e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1e3      	bne.n	800b64c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fc fc0b 	bl	8007ea4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2202      	movs	r2, #2
 800b692:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7f9 fae9 	bl	8004c7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b6aa:	e0b3      	b.n	800b814 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	f040 80ad 	bne.w	800b814 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6be:	69db      	ldr	r3, [r3, #28]
 800b6c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6c4:	f040 80a6 	bne.w	800b814 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2202      	movs	r2, #2
 800b6cc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7f9 fad1 	bl	8004c7c <HAL_UARTEx_RxEventCallback>
      return;
 800b6da:	e09b      	b.n	800b814 <HAL_UART_IRQHandler+0x548>
 800b6dc:	0800be37 	.word	0x0800be37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 808e 	beq.w	800b818 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b6fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 8089 	beq.w	800b818 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	330c      	adds	r3, #12
 800b70c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b71c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	330c      	adds	r3, #12
 800b726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b72a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b72c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e3      	bne.n	800b706 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3314      	adds	r3, #20
 800b744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	e853 3f00 	ldrex	r3, [r3]
 800b74c:	623b      	str	r3, [r7, #32]
   return(result);
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	f023 0301 	bic.w	r3, r3, #1
 800b754:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3314      	adds	r3, #20
 800b75e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b762:	633a      	str	r2, [r7, #48]	@ 0x30
 800b764:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b76a:	e841 2300 	strex	r3, r2, [r1]
 800b76e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1e3      	bne.n	800b73e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2220      	movs	r2, #32
 800b77a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	330c      	adds	r3, #12
 800b78a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	60fb      	str	r3, [r7, #12]
   return(result);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f023 0310 	bic.w	r3, r3, #16
 800b79a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	330c      	adds	r3, #12
 800b7a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b7a8:	61fa      	str	r2, [r7, #28]
 800b7aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	69b9      	ldr	r1, [r7, #24]
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e3      	bne.n	800b784 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7f9 fa57 	bl	8004c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b7ce:	e023      	b.n	800b818 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d009      	beq.n	800b7f0 <HAL_UART_IRQHandler+0x524>
 800b7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fb35 	bl	800be58 <UART_Transmit_IT>
    return;
 800b7ee:	e014      	b.n	800b81a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00e      	beq.n	800b81a <HAL_UART_IRQHandler+0x54e>
 800b7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	d008      	beq.n	800b81a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fb75 	bl	800bef8 <UART_EndTransmit_IT>
    return;
 800b80e:	e004      	b.n	800b81a <HAL_UART_IRQHandler+0x54e>
    return;
 800b810:	bf00      	nop
 800b812:	e002      	b.n	800b81a <HAL_UART_IRQHandler+0x54e>
      return;
 800b814:	bf00      	nop
 800b816:	e000      	b.n	800b81a <HAL_UART_IRQHandler+0x54e>
      return;
 800b818:	bf00      	nop
  }
}
 800b81a:	37e8      	adds	r7, #232	@ 0xe8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b090      	sub	sp, #64	@ 0x40
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d137      	bne.n	800b8fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b88e:	2200      	movs	r2, #0
 800b890:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3314      	adds	r3, #20
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e5      	bne.n	800b892 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	330c      	adds	r3, #12
 800b8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	e853 3f00 	ldrex	r3, [r3]
 800b8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	330c      	adds	r3, #12
 800b8e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8e6:	61fa      	str	r2, [r7, #28]
 800b8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	69b9      	ldr	r1, [r7, #24]
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e5      	bne.n	800b8c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8fa:	e002      	b.n	800b902 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b8fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b8fe:	f7f9 f9ff 	bl	8004d00 <HAL_UART_TxCpltCallback>
}
 800b902:	bf00      	nop
 800b904:	3740      	adds	r7, #64	@ 0x40
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b916:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f7ff ff81 	bl	800b820 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b91e:	bf00      	nop
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b09c      	sub	sp, #112	@ 0x70
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b932:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d172      	bne.n	800ba28 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b944:	2200      	movs	r2, #0
 800b946:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	330c      	adds	r3, #12
 800b94e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b95a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b95e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	330c      	adds	r3, #12
 800b966:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b968:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b96a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b96e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b970:	e841 2300 	strex	r3, r2, [r1]
 800b974:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1e5      	bne.n	800b948 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b97c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3314      	adds	r3, #20
 800b982:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	e853 3f00 	ldrex	r3, [r3]
 800b98a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b98e:	f023 0301 	bic.w	r3, r3, #1
 800b992:	667b      	str	r3, [r7, #100]	@ 0x64
 800b994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3314      	adds	r3, #20
 800b99a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b99c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b99e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9a4:	e841 2300 	strex	r3, r2, [r1]
 800b9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e5      	bne.n	800b97c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3314      	adds	r3, #20
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	e853 3f00 	ldrex	r3, [r3]
 800b9be:	623b      	str	r3, [r7, #32]
   return(result);
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3314      	adds	r3, #20
 800b9ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b9d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d8:	e841 2300 	strex	r3, r2, [r1]
 800b9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1e5      	bne.n	800b9b0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b9e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d119      	bne.n	800ba28 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	330c      	adds	r3, #12
 800b9fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	e853 3f00 	ldrex	r3, [r3]
 800ba02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f023 0310 	bic.w	r3, r3, #16
 800ba0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	330c      	adds	r3, #12
 800ba12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba14:	61fa      	str	r2, [r7, #28]
 800ba16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba18:	69b9      	ldr	r1, [r7, #24]
 800ba1a:	69fa      	ldr	r2, [r7, #28]
 800ba1c:	e841 2300 	strex	r3, r2, [r1]
 800ba20:	617b      	str	r3, [r7, #20]
   return(result);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e5      	bne.n	800b9f4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d106      	bne.n	800ba44 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba3e:	f7f9 f91d 	bl	8004c7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba42:	e002      	b.n	800ba4a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ba44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba46:	f7ff fef5 	bl	800b834 <HAL_UART_RxCpltCallback>
}
 800ba4a:	bf00      	nop
 800ba4c:	3770      	adds	r7, #112	@ 0x70
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2201      	movs	r2, #1
 800ba64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d108      	bne.n	800ba80 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba72:	085b      	lsrs	r3, r3, #1
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	4619      	mov	r1, r3
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7f9 f8ff 	bl	8004c7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba7e:	e002      	b.n	800ba86 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fee1 	bl	800b848 <HAL_UART_RxHalfCpltCallback>
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baaa:	2b80      	cmp	r3, #128	@ 0x80
 800baac:	bf0c      	ite	eq
 800baae:	2301      	moveq	r3, #1
 800bab0:	2300      	movne	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800babc:	b2db      	uxtb	r3, r3
 800babe:	2b21      	cmp	r3, #33	@ 0x21
 800bac0:	d108      	bne.n	800bad4 <UART_DMAError+0x46>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d005      	beq.n	800bad4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2200      	movs	r2, #0
 800bacc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bace:	68b8      	ldr	r0, [r7, #8]
 800bad0:	f000 f926 	bl	800bd20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bade:	2b40      	cmp	r3, #64	@ 0x40
 800bae0:	bf0c      	ite	eq
 800bae2:	2301      	moveq	r3, #1
 800bae4:	2300      	movne	r3, #0
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b22      	cmp	r3, #34	@ 0x22
 800baf4:	d108      	bne.n	800bb08 <UART_DMAError+0x7a>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d005      	beq.n	800bb08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2200      	movs	r2, #0
 800bb00:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bb02:	68b8      	ldr	r0, [r7, #8]
 800bb04:	f000 f934 	bl	800bd70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb0c:	f043 0210 	orr.w	r2, r3, #16
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb14:	68b8      	ldr	r0, [r7, #8]
 800bb16:	f7ff fea1 	bl	800b85c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb1a:	bf00      	nop
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b086      	sub	sp, #24
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	603b      	str	r3, [r7, #0]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb32:	e03b      	b.n	800bbac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3a:	d037      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb3c:	f7fb ff38 	bl	80079b0 <HAL_GetTick>
 800bb40:	4602      	mov	r2, r0
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	6a3a      	ldr	r2, [r7, #32]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d302      	bcc.n	800bb52 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e03a      	b.n	800bbcc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d023      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0x8a>
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2b80      	cmp	r3, #128	@ 0x80
 800bb68:	d020      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0x8a>
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2b40      	cmp	r3, #64	@ 0x40
 800bb6e:	d01d      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0308 	and.w	r3, r3, #8
 800bb7a:	2b08      	cmp	r3, #8
 800bb7c:	d116      	bne.n	800bbac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	617b      	str	r3, [r7, #20]
 800bb92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f8eb 	bl	800bd70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2208      	movs	r2, #8
 800bb9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e00f      	b.n	800bbcc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	bf0c      	ite	eq
 800bbbc:	2301      	moveq	r3, #1
 800bbbe:	2300      	movne	r3, #0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d0b4      	beq.n	800bb34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b098      	sub	sp, #96	@ 0x60
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	88fa      	ldrh	r2, [r7, #6]
 800bbec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2222      	movs	r2, #34	@ 0x22
 800bbf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc00:	4a44      	ldr	r2, [pc, #272]	@ (800bd14 <UART_Start_Receive_DMA+0x140>)
 800bc02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc08:	4a43      	ldr	r2, [pc, #268]	@ (800bd18 <UART_Start_Receive_DMA+0x144>)
 800bc0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc10:	4a42      	ldr	r2, [pc, #264]	@ (800bd1c <UART_Start_Receive_DMA+0x148>)
 800bc12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc18:	2200      	movs	r2, #0
 800bc1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bc1c:	f107 0308 	add.w	r3, r7, #8
 800bc20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	f7fc f8de 	bl	8007df4 <HAL_DMA_Start_IT>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d008      	beq.n	800bc50 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2210      	movs	r2, #16
 800bc42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e05d      	b.n	800bd0c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bc50:	2300      	movs	r3, #0
 800bc52:	613b      	str	r3, [r7, #16]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d019      	beq.n	800bca2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	330c      	adds	r3, #12
 800bc74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc78:	e853 3f00 	ldrex	r3, [r3]
 800bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc84:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	330c      	adds	r3, #12
 800bc8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc8e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bc90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bc94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc96:	e841 2300 	strex	r3, r2, [r1]
 800bc9a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bc9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1e5      	bne.n	800bc6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3314      	adds	r3, #20
 800bca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb4:	f043 0301 	orr.w	r3, r3, #1
 800bcb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3314      	adds	r3, #20
 800bcc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcc2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bcc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bcc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcca:	e841 2300 	strex	r3, r2, [r1]
 800bcce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1e5      	bne.n	800bca2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3314      	adds	r3, #20
 800bcdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	617b      	str	r3, [r7, #20]
   return(result);
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcec:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	3314      	adds	r3, #20
 800bcf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcf6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	6a39      	ldr	r1, [r7, #32]
 800bcfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e5      	bne.n	800bcd6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3760      	adds	r7, #96	@ 0x60
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	0800b927 	.word	0x0800b927
 800bd18:	0800ba53 	.word	0x0800ba53
 800bd1c:	0800ba8f 	.word	0x0800ba8f

0800bd20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b089      	sub	sp, #36	@ 0x24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	330c      	adds	r3, #12
 800bd2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bd3e:	61fb      	str	r3, [r7, #28]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	330c      	adds	r3, #12
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	61ba      	str	r2, [r7, #24]
 800bd4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	6979      	ldr	r1, [r7, #20]
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	613b      	str	r3, [r7, #16]
   return(result);
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e5      	bne.n	800bd28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2220      	movs	r2, #32
 800bd60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bd64:	bf00      	nop
 800bd66:	3724      	adds	r7, #36	@ 0x24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b095      	sub	sp, #84	@ 0x54
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	330c      	adds	r3, #12
 800bd7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd82:	e853 3f00 	ldrex	r3, [r3]
 800bd86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	330c      	adds	r3, #12
 800bd96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd98:	643a      	str	r2, [r7, #64]	@ 0x40
 800bd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bda0:	e841 2300 	strex	r3, r2, [r1]
 800bda4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1e5      	bne.n	800bd78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3314      	adds	r3, #20
 800bdb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	e853 3f00 	ldrex	r3, [r3]
 800bdba:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	f023 0301 	bic.w	r3, r3, #1
 800bdc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3314      	adds	r3, #20
 800bdca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bdce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd4:	e841 2300 	strex	r3, r2, [r1]
 800bdd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e5      	bne.n	800bdac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d119      	bne.n	800be1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	330c      	adds	r3, #12
 800bdee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f023 0310 	bic.w	r3, r3, #16
 800bdfe:	647b      	str	r3, [r7, #68]	@ 0x44
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	330c      	adds	r3, #12
 800be06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be08:	61ba      	str	r2, [r7, #24]
 800be0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	6979      	ldr	r1, [r7, #20]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	613b      	str	r3, [r7, #16]
   return(result);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e5      	bne.n	800bde8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800be2a:	bf00      	nop
 800be2c:	3754      	adds	r7, #84	@ 0x54
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7ff fd06 	bl	800b85c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be50:	bf00      	nop
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b21      	cmp	r3, #33	@ 0x21
 800be6a:	d13e      	bne.n	800beea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be74:	d114      	bne.n	800bea0 <UART_Transmit_IT+0x48>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d110      	bne.n	800bea0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	461a      	mov	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a1b      	ldr	r3, [r3, #32]
 800be98:	1c9a      	adds	r2, r3, #2
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	621a      	str	r2, [r3, #32]
 800be9e:	e008      	b.n	800beb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	1c59      	adds	r1, r3, #1
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6211      	str	r1, [r2, #32]
 800beaa:	781a      	ldrb	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	3b01      	subs	r3, #1
 800beba:	b29b      	uxth	r3, r3
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4619      	mov	r1, r3
 800bec0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10f      	bne.n	800bee6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68da      	ldr	r2, [r3, #12]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bed4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bee4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e000      	b.n	800beec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800beea:	2302      	movs	r3, #2
  }
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7f8 fef1 	bl	8004d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08c      	sub	sp, #48	@ 0x30
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b22      	cmp	r3, #34	@ 0x22
 800bf42:	f040 80aa 	bne.w	800c09a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf4e:	d115      	bne.n	800bf7c <UART_Receive_IT+0x54>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d111      	bne.n	800bf7c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	1c9a      	adds	r2, r3, #2
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	629a      	str	r2, [r3, #40]	@ 0x28
 800bf7a:	e024      	b.n	800bfc6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf8a:	d007      	beq.n	800bf9c <UART_Receive_IT+0x74>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <UART_Receive_IT+0x82>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d106      	bne.n	800bfaa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa6:	701a      	strb	r2, [r3, #0]
 800bfa8:	e008      	b.n	800bfbc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d15d      	bne.n	800c096 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f022 0220 	bic.w	r2, r2, #32
 800bfe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	695a      	ldr	r2, [r3, #20]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0201 	bic.w	r2, r2, #1
 800c008:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2220      	movs	r2, #32
 800c00e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d135      	bne.n	800c08c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	330c      	adds	r3, #12
 800c02c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	613b      	str	r3, [r7, #16]
   return(result);
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	f023 0310 	bic.w	r3, r3, #16
 800c03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	330c      	adds	r3, #12
 800c044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c046:	623a      	str	r2, [r7, #32]
 800c048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	69f9      	ldr	r1, [r7, #28]
 800c04c:	6a3a      	ldr	r2, [r7, #32]
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	61bb      	str	r3, [r7, #24]
   return(result);
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0310 	and.w	r3, r3, #16
 800c064:	2b10      	cmp	r3, #16
 800c066:	d10a      	bne.n	800c07e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7f8 fdf9 	bl	8004c7c <HAL_UARTEx_RxEventCallback>
 800c08a:	e002      	b.n	800c092 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff fbd1 	bl	800b834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	e002      	b.n	800c09c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	e000      	b.n	800c09c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c09a:	2302      	movs	r3, #2
  }
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3730      	adds	r7, #48	@ 0x30
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0a8:	b0c0      	sub	sp, #256	@ 0x100
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0c0:	68d9      	ldr	r1, [r3, #12]
 800c0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	ea40 0301 	orr.w	r3, r0, r1
 800c0cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0d2:	689a      	ldr	r2, [r3, #8]
 800c0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	431a      	orrs	r2, r3
 800c0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c0fc:	f021 010c 	bic.w	r1, r1, #12
 800c100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c10a:	430b      	orrs	r3, r1
 800c10c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c11e:	6999      	ldr	r1, [r3, #24]
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	ea40 0301 	orr.w	r3, r0, r1
 800c12a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4b8f      	ldr	r3, [pc, #572]	@ (800c370 <UART_SetConfig+0x2cc>)
 800c134:	429a      	cmp	r2, r3
 800c136:	d005      	beq.n	800c144 <UART_SetConfig+0xa0>
 800c138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4b8d      	ldr	r3, [pc, #564]	@ (800c374 <UART_SetConfig+0x2d0>)
 800c140:	429a      	cmp	r2, r3
 800c142:	d104      	bne.n	800c14e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c144:	f7fd fdbe 	bl	8009cc4 <HAL_RCC_GetPCLK2Freq>
 800c148:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c14c:	e003      	b.n	800c156 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c14e:	f7fd fda5 	bl	8009c9c <HAL_RCC_GetPCLK1Freq>
 800c152:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c160:	f040 810c 	bne.w	800c37c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c168:	2200      	movs	r2, #0
 800c16a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c16e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c172:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c176:	4622      	mov	r2, r4
 800c178:	462b      	mov	r3, r5
 800c17a:	1891      	adds	r1, r2, r2
 800c17c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c17e:	415b      	adcs	r3, r3
 800c180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c182:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c186:	4621      	mov	r1, r4
 800c188:	eb12 0801 	adds.w	r8, r2, r1
 800c18c:	4629      	mov	r1, r5
 800c18e:	eb43 0901 	adc.w	r9, r3, r1
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c19e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1a6:	4690      	mov	r8, r2
 800c1a8:	4699      	mov	r9, r3
 800c1aa:	4623      	mov	r3, r4
 800c1ac:	eb18 0303 	adds.w	r3, r8, r3
 800c1b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1b4:	462b      	mov	r3, r5
 800c1b6:	eb49 0303 	adc.w	r3, r9, r3
 800c1ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c1ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c1ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	18db      	adds	r3, r3, r3
 800c1d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1d8:	4613      	mov	r3, r2
 800c1da:	eb42 0303 	adc.w	r3, r2, r3
 800c1de:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c1e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c1e8:	f7f4 feac 	bl	8000f44 <__aeabi_uldivmod>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4b61      	ldr	r3, [pc, #388]	@ (800c378 <UART_SetConfig+0x2d4>)
 800c1f2:	fba3 2302 	umull	r2, r3, r3, r2
 800c1f6:	095b      	lsrs	r3, r3, #5
 800c1f8:	011c      	lsls	r4, r3, #4
 800c1fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c204:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c208:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c20c:	4642      	mov	r2, r8
 800c20e:	464b      	mov	r3, r9
 800c210:	1891      	adds	r1, r2, r2
 800c212:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c214:	415b      	adcs	r3, r3
 800c216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c21c:	4641      	mov	r1, r8
 800c21e:	eb12 0a01 	adds.w	sl, r2, r1
 800c222:	4649      	mov	r1, r9
 800c224:	eb43 0b01 	adc.w	fp, r3, r1
 800c228:	f04f 0200 	mov.w	r2, #0
 800c22c:	f04f 0300 	mov.w	r3, #0
 800c230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c234:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c23c:	4692      	mov	sl, r2
 800c23e:	469b      	mov	fp, r3
 800c240:	4643      	mov	r3, r8
 800c242:	eb1a 0303 	adds.w	r3, sl, r3
 800c246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c24a:	464b      	mov	r3, r9
 800c24c:	eb4b 0303 	adc.w	r3, fp, r3
 800c250:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c260:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c264:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c268:	460b      	mov	r3, r1
 800c26a:	18db      	adds	r3, r3, r3
 800c26c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c26e:	4613      	mov	r3, r2
 800c270:	eb42 0303 	adc.w	r3, r2, r3
 800c274:	647b      	str	r3, [r7, #68]	@ 0x44
 800c276:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c27a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c27e:	f7f4 fe61 	bl	8000f44 <__aeabi_uldivmod>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4611      	mov	r1, r2
 800c288:	4b3b      	ldr	r3, [pc, #236]	@ (800c378 <UART_SetConfig+0x2d4>)
 800c28a:	fba3 2301 	umull	r2, r3, r3, r1
 800c28e:	095b      	lsrs	r3, r3, #5
 800c290:	2264      	movs	r2, #100	@ 0x64
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	1acb      	subs	r3, r1, r3
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c29e:	4b36      	ldr	r3, [pc, #216]	@ (800c378 <UART_SetConfig+0x2d4>)
 800c2a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c2a4:	095b      	lsrs	r3, r3, #5
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c2ac:	441c      	add	r4, r3
 800c2ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c2bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	464b      	mov	r3, r9
 800c2c4:	1891      	adds	r1, r2, r2
 800c2c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c2c8:	415b      	adcs	r3, r3
 800c2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c2d0:	4641      	mov	r1, r8
 800c2d2:	1851      	adds	r1, r2, r1
 800c2d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	414b      	adcs	r3, r1
 800c2da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2dc:	f04f 0200 	mov.w	r2, #0
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c2e8:	4659      	mov	r1, fp
 800c2ea:	00cb      	lsls	r3, r1, #3
 800c2ec:	4651      	mov	r1, sl
 800c2ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2f2:	4651      	mov	r1, sl
 800c2f4:	00ca      	lsls	r2, r1, #3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4642      	mov	r2, r8
 800c2fe:	189b      	adds	r3, r3, r2
 800c300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c304:	464b      	mov	r3, r9
 800c306:	460a      	mov	r2, r1
 800c308:	eb42 0303 	adc.w	r3, r2, r3
 800c30c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c31c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c320:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c324:	460b      	mov	r3, r1
 800c326:	18db      	adds	r3, r3, r3
 800c328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c32a:	4613      	mov	r3, r2
 800c32c:	eb42 0303 	adc.w	r3, r2, r3
 800c330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c336:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c33a:	f7f4 fe03 	bl	8000f44 <__aeabi_uldivmod>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4b0d      	ldr	r3, [pc, #52]	@ (800c378 <UART_SetConfig+0x2d4>)
 800c344:	fba3 1302 	umull	r1, r3, r3, r2
 800c348:	095b      	lsrs	r3, r3, #5
 800c34a:	2164      	movs	r1, #100	@ 0x64
 800c34c:	fb01 f303 	mul.w	r3, r1, r3
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	3332      	adds	r3, #50	@ 0x32
 800c356:	4a08      	ldr	r2, [pc, #32]	@ (800c378 <UART_SetConfig+0x2d4>)
 800c358:	fba2 2303 	umull	r2, r3, r2, r3
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	f003 0207 	and.w	r2, r3, #7
 800c362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4422      	add	r2, r4
 800c36a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c36c:	e106      	b.n	800c57c <UART_SetConfig+0x4d8>
 800c36e:	bf00      	nop
 800c370:	40011000 	.word	0x40011000
 800c374:	40011400 	.word	0x40011400
 800c378:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c37c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c380:	2200      	movs	r2, #0
 800c382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c386:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c38a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c38e:	4642      	mov	r2, r8
 800c390:	464b      	mov	r3, r9
 800c392:	1891      	adds	r1, r2, r2
 800c394:	6239      	str	r1, [r7, #32]
 800c396:	415b      	adcs	r3, r3
 800c398:	627b      	str	r3, [r7, #36]	@ 0x24
 800c39a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c39e:	4641      	mov	r1, r8
 800c3a0:	1854      	adds	r4, r2, r1
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	eb43 0501 	adc.w	r5, r3, r1
 800c3a8:	f04f 0200 	mov.w	r2, #0
 800c3ac:	f04f 0300 	mov.w	r3, #0
 800c3b0:	00eb      	lsls	r3, r5, #3
 800c3b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3b6:	00e2      	lsls	r2, r4, #3
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	461d      	mov	r5, r3
 800c3bc:	4643      	mov	r3, r8
 800c3be:	18e3      	adds	r3, r4, r3
 800c3c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3c4:	464b      	mov	r3, r9
 800c3c6:	eb45 0303 	adc.w	r3, r5, r3
 800c3ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c3de:	f04f 0200 	mov.w	r2, #0
 800c3e2:	f04f 0300 	mov.w	r3, #0
 800c3e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	008b      	lsls	r3, r1, #2
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	008a      	lsls	r2, r1, #2
 800c3f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c3fc:	f7f4 fda2 	bl	8000f44 <__aeabi_uldivmod>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	4b60      	ldr	r3, [pc, #384]	@ (800c588 <UART_SetConfig+0x4e4>)
 800c406:	fba3 2302 	umull	r2, r3, r3, r2
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	011c      	lsls	r4, r3, #4
 800c40e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c412:	2200      	movs	r2, #0
 800c414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c418:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c41c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c420:	4642      	mov	r2, r8
 800c422:	464b      	mov	r3, r9
 800c424:	1891      	adds	r1, r2, r2
 800c426:	61b9      	str	r1, [r7, #24]
 800c428:	415b      	adcs	r3, r3
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c430:	4641      	mov	r1, r8
 800c432:	1851      	adds	r1, r2, r1
 800c434:	6139      	str	r1, [r7, #16]
 800c436:	4649      	mov	r1, r9
 800c438:	414b      	adcs	r3, r1
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	f04f 0200 	mov.w	r2, #0
 800c440:	f04f 0300 	mov.w	r3, #0
 800c444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c448:	4659      	mov	r1, fp
 800c44a:	00cb      	lsls	r3, r1, #3
 800c44c:	4651      	mov	r1, sl
 800c44e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c452:	4651      	mov	r1, sl
 800c454:	00ca      	lsls	r2, r1, #3
 800c456:	4610      	mov	r0, r2
 800c458:	4619      	mov	r1, r3
 800c45a:	4603      	mov	r3, r0
 800c45c:	4642      	mov	r2, r8
 800c45e:	189b      	adds	r3, r3, r2
 800c460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c464:	464b      	mov	r3, r9
 800c466:	460a      	mov	r2, r1
 800c468:	eb42 0303 	adc.w	r3, r2, r3
 800c46c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c47a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c47c:	f04f 0200 	mov.w	r2, #0
 800c480:	f04f 0300 	mov.w	r3, #0
 800c484:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c488:	4649      	mov	r1, r9
 800c48a:	008b      	lsls	r3, r1, #2
 800c48c:	4641      	mov	r1, r8
 800c48e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c492:	4641      	mov	r1, r8
 800c494:	008a      	lsls	r2, r1, #2
 800c496:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c49a:	f7f4 fd53 	bl	8000f44 <__aeabi_uldivmod>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4b38      	ldr	r3, [pc, #224]	@ (800c588 <UART_SetConfig+0x4e4>)
 800c4a6:	fba3 2301 	umull	r2, r3, r3, r1
 800c4aa:	095b      	lsrs	r3, r3, #5
 800c4ac:	2264      	movs	r2, #100	@ 0x64
 800c4ae:	fb02 f303 	mul.w	r3, r2, r3
 800c4b2:	1acb      	subs	r3, r1, r3
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	3332      	adds	r3, #50	@ 0x32
 800c4b8:	4a33      	ldr	r2, [pc, #204]	@ (800c588 <UART_SetConfig+0x4e4>)
 800c4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c4be:	095b      	lsrs	r3, r3, #5
 800c4c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4c4:	441c      	add	r4, r3
 800c4c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4ce:	677a      	str	r2, [r7, #116]	@ 0x74
 800c4d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c4d4:	4642      	mov	r2, r8
 800c4d6:	464b      	mov	r3, r9
 800c4d8:	1891      	adds	r1, r2, r2
 800c4da:	60b9      	str	r1, [r7, #8]
 800c4dc:	415b      	adcs	r3, r3
 800c4de:	60fb      	str	r3, [r7, #12]
 800c4e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4e4:	4641      	mov	r1, r8
 800c4e6:	1851      	adds	r1, r2, r1
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	414b      	adcs	r3, r1
 800c4ee:	607b      	str	r3, [r7, #4]
 800c4f0:	f04f 0200 	mov.w	r2, #0
 800c4f4:	f04f 0300 	mov.w	r3, #0
 800c4f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	00cb      	lsls	r3, r1, #3
 800c500:	4651      	mov	r1, sl
 800c502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c506:	4651      	mov	r1, sl
 800c508:	00ca      	lsls	r2, r1, #3
 800c50a:	4610      	mov	r0, r2
 800c50c:	4619      	mov	r1, r3
 800c50e:	4603      	mov	r3, r0
 800c510:	4642      	mov	r2, r8
 800c512:	189b      	adds	r3, r3, r2
 800c514:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c516:	464b      	mov	r3, r9
 800c518:	460a      	mov	r2, r1
 800c51a:	eb42 0303 	adc.w	r3, r2, r3
 800c51e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	663b      	str	r3, [r7, #96]	@ 0x60
 800c52a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c52c:	f04f 0200 	mov.w	r2, #0
 800c530:	f04f 0300 	mov.w	r3, #0
 800c534:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c538:	4649      	mov	r1, r9
 800c53a:	008b      	lsls	r3, r1, #2
 800c53c:	4641      	mov	r1, r8
 800c53e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c542:	4641      	mov	r1, r8
 800c544:	008a      	lsls	r2, r1, #2
 800c546:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c54a:	f7f4 fcfb 	bl	8000f44 <__aeabi_uldivmod>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4b0d      	ldr	r3, [pc, #52]	@ (800c588 <UART_SetConfig+0x4e4>)
 800c554:	fba3 1302 	umull	r1, r3, r3, r2
 800c558:	095b      	lsrs	r3, r3, #5
 800c55a:	2164      	movs	r1, #100	@ 0x64
 800c55c:	fb01 f303 	mul.w	r3, r1, r3
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	011b      	lsls	r3, r3, #4
 800c564:	3332      	adds	r3, #50	@ 0x32
 800c566:	4a08      	ldr	r2, [pc, #32]	@ (800c588 <UART_SetConfig+0x4e4>)
 800c568:	fba2 2303 	umull	r2, r3, r2, r3
 800c56c:	095b      	lsrs	r3, r3, #5
 800c56e:	f003 020f 	and.w	r2, r3, #15
 800c572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4422      	add	r2, r4
 800c57a:	609a      	str	r2, [r3, #8]
}
 800c57c:	bf00      	nop
 800c57e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c582:	46bd      	mov	sp, r7
 800c584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c588:	51eb851f 	.word	0x51eb851f

0800c58c <calloc>:
 800c58c:	4b02      	ldr	r3, [pc, #8]	@ (800c598 <calloc+0xc>)
 800c58e:	460a      	mov	r2, r1
 800c590:	4601      	mov	r1, r0
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	f000 b802 	b.w	800c59c <_calloc_r>
 800c598:	20000058 	.word	0x20000058

0800c59c <_calloc_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	fba1 5402 	umull	r5, r4, r1, r2
 800c5a2:	b93c      	cbnz	r4, 800c5b4 <_calloc_r+0x18>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	f000 f82f 	bl	800c608 <_malloc_r>
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	b928      	cbnz	r0, 800c5ba <_calloc_r+0x1e>
 800c5ae:	2600      	movs	r6, #0
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}
 800c5b4:	220c      	movs	r2, #12
 800c5b6:	6002      	str	r2, [r0, #0]
 800c5b8:	e7f9      	b.n	800c5ae <_calloc_r+0x12>
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4621      	mov	r1, r4
 800c5be:	f000 fe1c 	bl	800d1fa <memset>
 800c5c2:	e7f5      	b.n	800c5b0 <_calloc_r+0x14>

0800c5c4 <sbrk_aligned>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c604 <sbrk_aligned+0x40>)
 800c5c8:	460c      	mov	r4, r1
 800c5ca:	6831      	ldr	r1, [r6, #0]
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	b911      	cbnz	r1, 800c5d6 <sbrk_aligned+0x12>
 800c5d0:	f000 fe54 	bl	800d27c <_sbrk_r>
 800c5d4:	6030      	str	r0, [r6, #0]
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	4628      	mov	r0, r5
 800c5da:	f000 fe4f 	bl	800d27c <_sbrk_r>
 800c5de:	1c43      	adds	r3, r0, #1
 800c5e0:	d103      	bne.n	800c5ea <sbrk_aligned+0x26>
 800c5e2:	f04f 34ff 	mov.w	r4, #4294967295
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ea:	1cc4      	adds	r4, r0, #3
 800c5ec:	f024 0403 	bic.w	r4, r4, #3
 800c5f0:	42a0      	cmp	r0, r4
 800c5f2:	d0f8      	beq.n	800c5e6 <sbrk_aligned+0x22>
 800c5f4:	1a21      	subs	r1, r4, r0
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f000 fe40 	bl	800d27c <_sbrk_r>
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	d1f2      	bne.n	800c5e6 <sbrk_aligned+0x22>
 800c600:	e7ef      	b.n	800c5e2 <sbrk_aligned+0x1e>
 800c602:	bf00      	nop
 800c604:	20000710 	.word	0x20000710

0800c608 <_malloc_r>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	1ccd      	adds	r5, r1, #3
 800c60e:	f025 0503 	bic.w	r5, r5, #3
 800c612:	3508      	adds	r5, #8
 800c614:	2d0c      	cmp	r5, #12
 800c616:	bf38      	it	cc
 800c618:	250c      	movcc	r5, #12
 800c61a:	2d00      	cmp	r5, #0
 800c61c:	4606      	mov	r6, r0
 800c61e:	db01      	blt.n	800c624 <_malloc_r+0x1c>
 800c620:	42a9      	cmp	r1, r5
 800c622:	d904      	bls.n	800c62e <_malloc_r+0x26>
 800c624:	230c      	movs	r3, #12
 800c626:	6033      	str	r3, [r6, #0]
 800c628:	2000      	movs	r0, #0
 800c62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c62e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c704 <_malloc_r+0xfc>
 800c632:	f000 f869 	bl	800c708 <__malloc_lock>
 800c636:	f8d8 3000 	ldr.w	r3, [r8]
 800c63a:	461c      	mov	r4, r3
 800c63c:	bb44      	cbnz	r4, 800c690 <_malloc_r+0x88>
 800c63e:	4629      	mov	r1, r5
 800c640:	4630      	mov	r0, r6
 800c642:	f7ff ffbf 	bl	800c5c4 <sbrk_aligned>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	4604      	mov	r4, r0
 800c64a:	d158      	bne.n	800c6fe <_malloc_r+0xf6>
 800c64c:	f8d8 4000 	ldr.w	r4, [r8]
 800c650:	4627      	mov	r7, r4
 800c652:	2f00      	cmp	r7, #0
 800c654:	d143      	bne.n	800c6de <_malloc_r+0xd6>
 800c656:	2c00      	cmp	r4, #0
 800c658:	d04b      	beq.n	800c6f2 <_malloc_r+0xea>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	4639      	mov	r1, r7
 800c65e:	4630      	mov	r0, r6
 800c660:	eb04 0903 	add.w	r9, r4, r3
 800c664:	f000 fe0a 	bl	800d27c <_sbrk_r>
 800c668:	4581      	cmp	r9, r0
 800c66a:	d142      	bne.n	800c6f2 <_malloc_r+0xea>
 800c66c:	6821      	ldr	r1, [r4, #0]
 800c66e:	1a6d      	subs	r5, r5, r1
 800c670:	4629      	mov	r1, r5
 800c672:	4630      	mov	r0, r6
 800c674:	f7ff ffa6 	bl	800c5c4 <sbrk_aligned>
 800c678:	3001      	adds	r0, #1
 800c67a:	d03a      	beq.n	800c6f2 <_malloc_r+0xea>
 800c67c:	6823      	ldr	r3, [r4, #0]
 800c67e:	442b      	add	r3, r5
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	f8d8 3000 	ldr.w	r3, [r8]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	bb62      	cbnz	r2, 800c6e4 <_malloc_r+0xdc>
 800c68a:	f8c8 7000 	str.w	r7, [r8]
 800c68e:	e00f      	b.n	800c6b0 <_malloc_r+0xa8>
 800c690:	6822      	ldr	r2, [r4, #0]
 800c692:	1b52      	subs	r2, r2, r5
 800c694:	d420      	bmi.n	800c6d8 <_malloc_r+0xd0>
 800c696:	2a0b      	cmp	r2, #11
 800c698:	d917      	bls.n	800c6ca <_malloc_r+0xc2>
 800c69a:	1961      	adds	r1, r4, r5
 800c69c:	42a3      	cmp	r3, r4
 800c69e:	6025      	str	r5, [r4, #0]
 800c6a0:	bf18      	it	ne
 800c6a2:	6059      	strne	r1, [r3, #4]
 800c6a4:	6863      	ldr	r3, [r4, #4]
 800c6a6:	bf08      	it	eq
 800c6a8:	f8c8 1000 	streq.w	r1, [r8]
 800c6ac:	5162      	str	r2, [r4, r5]
 800c6ae:	604b      	str	r3, [r1, #4]
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f000 f82f 	bl	800c714 <__malloc_unlock>
 800c6b6:	f104 000b 	add.w	r0, r4, #11
 800c6ba:	1d23      	adds	r3, r4, #4
 800c6bc:	f020 0007 	bic.w	r0, r0, #7
 800c6c0:	1ac2      	subs	r2, r0, r3
 800c6c2:	bf1c      	itt	ne
 800c6c4:	1a1b      	subne	r3, r3, r0
 800c6c6:	50a3      	strne	r3, [r4, r2]
 800c6c8:	e7af      	b.n	800c62a <_malloc_r+0x22>
 800c6ca:	6862      	ldr	r2, [r4, #4]
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	bf0c      	ite	eq
 800c6d0:	f8c8 2000 	streq.w	r2, [r8]
 800c6d4:	605a      	strne	r2, [r3, #4]
 800c6d6:	e7eb      	b.n	800c6b0 <_malloc_r+0xa8>
 800c6d8:	4623      	mov	r3, r4
 800c6da:	6864      	ldr	r4, [r4, #4]
 800c6dc:	e7ae      	b.n	800c63c <_malloc_r+0x34>
 800c6de:	463c      	mov	r4, r7
 800c6e0:	687f      	ldr	r7, [r7, #4]
 800c6e2:	e7b6      	b.n	800c652 <_malloc_r+0x4a>
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d1fb      	bne.n	800c6e4 <_malloc_r+0xdc>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	6053      	str	r3, [r2, #4]
 800c6f0:	e7de      	b.n	800c6b0 <_malloc_r+0xa8>
 800c6f2:	230c      	movs	r3, #12
 800c6f4:	6033      	str	r3, [r6, #0]
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f000 f80c 	bl	800c714 <__malloc_unlock>
 800c6fc:	e794      	b.n	800c628 <_malloc_r+0x20>
 800c6fe:	6005      	str	r5, [r0, #0]
 800c700:	e7d6      	b.n	800c6b0 <_malloc_r+0xa8>
 800c702:	bf00      	nop
 800c704:	20000714 	.word	0x20000714

0800c708 <__malloc_lock>:
 800c708:	4801      	ldr	r0, [pc, #4]	@ (800c710 <__malloc_lock+0x8>)
 800c70a:	f000 be04 	b.w	800d316 <__retarget_lock_acquire_recursive>
 800c70e:	bf00      	nop
 800c710:	20000858 	.word	0x20000858

0800c714 <__malloc_unlock>:
 800c714:	4801      	ldr	r0, [pc, #4]	@ (800c71c <__malloc_unlock+0x8>)
 800c716:	f000 bdff 	b.w	800d318 <__retarget_lock_release_recursive>
 800c71a:	bf00      	nop
 800c71c:	20000858 	.word	0x20000858

0800c720 <__cvt>:
 800c720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c724:	ec57 6b10 	vmov	r6, r7, d0
 800c728:	2f00      	cmp	r7, #0
 800c72a:	460c      	mov	r4, r1
 800c72c:	4619      	mov	r1, r3
 800c72e:	463b      	mov	r3, r7
 800c730:	bfbb      	ittet	lt
 800c732:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c736:	461f      	movlt	r7, r3
 800c738:	2300      	movge	r3, #0
 800c73a:	232d      	movlt	r3, #45	@ 0x2d
 800c73c:	700b      	strb	r3, [r1, #0]
 800c73e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c740:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c744:	4691      	mov	r9, r2
 800c746:	f023 0820 	bic.w	r8, r3, #32
 800c74a:	bfbc      	itt	lt
 800c74c:	4632      	movlt	r2, r6
 800c74e:	4616      	movlt	r6, r2
 800c750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c754:	d005      	beq.n	800c762 <__cvt+0x42>
 800c756:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c75a:	d100      	bne.n	800c75e <__cvt+0x3e>
 800c75c:	3401      	adds	r4, #1
 800c75e:	2102      	movs	r1, #2
 800c760:	e000      	b.n	800c764 <__cvt+0x44>
 800c762:	2103      	movs	r1, #3
 800c764:	ab03      	add	r3, sp, #12
 800c766:	9301      	str	r3, [sp, #4]
 800c768:	ab02      	add	r3, sp, #8
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	ec47 6b10 	vmov	d0, r6, r7
 800c770:	4653      	mov	r3, sl
 800c772:	4622      	mov	r2, r4
 800c774:	f000 fe68 	bl	800d448 <_dtoa_r>
 800c778:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c77c:	4605      	mov	r5, r0
 800c77e:	d119      	bne.n	800c7b4 <__cvt+0x94>
 800c780:	f019 0f01 	tst.w	r9, #1
 800c784:	d00e      	beq.n	800c7a4 <__cvt+0x84>
 800c786:	eb00 0904 	add.w	r9, r0, r4
 800c78a:	2200      	movs	r2, #0
 800c78c:	2300      	movs	r3, #0
 800c78e:	4630      	mov	r0, r6
 800c790:	4639      	mov	r1, r7
 800c792:	f7f4 f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 800c796:	b108      	cbz	r0, 800c79c <__cvt+0x7c>
 800c798:	f8cd 900c 	str.w	r9, [sp, #12]
 800c79c:	2230      	movs	r2, #48	@ 0x30
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	454b      	cmp	r3, r9
 800c7a2:	d31e      	bcc.n	800c7e2 <__cvt+0xc2>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7a8:	1b5b      	subs	r3, r3, r5
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	b004      	add	sp, #16
 800c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c7b8:	eb00 0904 	add.w	r9, r0, r4
 800c7bc:	d1e5      	bne.n	800c78a <__cvt+0x6a>
 800c7be:	7803      	ldrb	r3, [r0, #0]
 800c7c0:	2b30      	cmp	r3, #48	@ 0x30
 800c7c2:	d10a      	bne.n	800c7da <__cvt+0xba>
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f7f4 f99c 	bl	8000b08 <__aeabi_dcmpeq>
 800c7d0:	b918      	cbnz	r0, 800c7da <__cvt+0xba>
 800c7d2:	f1c4 0401 	rsb	r4, r4, #1
 800c7d6:	f8ca 4000 	str.w	r4, [sl]
 800c7da:	f8da 3000 	ldr.w	r3, [sl]
 800c7de:	4499      	add	r9, r3
 800c7e0:	e7d3      	b.n	800c78a <__cvt+0x6a>
 800c7e2:	1c59      	adds	r1, r3, #1
 800c7e4:	9103      	str	r1, [sp, #12]
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	e7d9      	b.n	800c79e <__cvt+0x7e>

0800c7ea <__exponent>:
 800c7ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7ec:	2900      	cmp	r1, #0
 800c7ee:	bfba      	itte	lt
 800c7f0:	4249      	neglt	r1, r1
 800c7f2:	232d      	movlt	r3, #45	@ 0x2d
 800c7f4:	232b      	movge	r3, #43	@ 0x2b
 800c7f6:	2909      	cmp	r1, #9
 800c7f8:	7002      	strb	r2, [r0, #0]
 800c7fa:	7043      	strb	r3, [r0, #1]
 800c7fc:	dd29      	ble.n	800c852 <__exponent+0x68>
 800c7fe:	f10d 0307 	add.w	r3, sp, #7
 800c802:	461d      	mov	r5, r3
 800c804:	270a      	movs	r7, #10
 800c806:	461a      	mov	r2, r3
 800c808:	fbb1 f6f7 	udiv	r6, r1, r7
 800c80c:	fb07 1416 	mls	r4, r7, r6, r1
 800c810:	3430      	adds	r4, #48	@ 0x30
 800c812:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c816:	460c      	mov	r4, r1
 800c818:	2c63      	cmp	r4, #99	@ 0x63
 800c81a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c81e:	4631      	mov	r1, r6
 800c820:	dcf1      	bgt.n	800c806 <__exponent+0x1c>
 800c822:	3130      	adds	r1, #48	@ 0x30
 800c824:	1e94      	subs	r4, r2, #2
 800c826:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c82a:	1c41      	adds	r1, r0, #1
 800c82c:	4623      	mov	r3, r4
 800c82e:	42ab      	cmp	r3, r5
 800c830:	d30a      	bcc.n	800c848 <__exponent+0x5e>
 800c832:	f10d 0309 	add.w	r3, sp, #9
 800c836:	1a9b      	subs	r3, r3, r2
 800c838:	42ac      	cmp	r4, r5
 800c83a:	bf88      	it	hi
 800c83c:	2300      	movhi	r3, #0
 800c83e:	3302      	adds	r3, #2
 800c840:	4403      	add	r3, r0
 800c842:	1a18      	subs	r0, r3, r0
 800c844:	b003      	add	sp, #12
 800c846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c848:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c84c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c850:	e7ed      	b.n	800c82e <__exponent+0x44>
 800c852:	2330      	movs	r3, #48	@ 0x30
 800c854:	3130      	adds	r1, #48	@ 0x30
 800c856:	7083      	strb	r3, [r0, #2]
 800c858:	70c1      	strb	r1, [r0, #3]
 800c85a:	1d03      	adds	r3, r0, #4
 800c85c:	e7f1      	b.n	800c842 <__exponent+0x58>
	...

0800c860 <_printf_float>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	b08d      	sub	sp, #52	@ 0x34
 800c866:	460c      	mov	r4, r1
 800c868:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c86c:	4616      	mov	r6, r2
 800c86e:	461f      	mov	r7, r3
 800c870:	4605      	mov	r5, r0
 800c872:	f000 fccb 	bl	800d20c <_localeconv_r>
 800c876:	6803      	ldr	r3, [r0, #0]
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7f3 fd18 	bl	80002b0 <strlen>
 800c880:	2300      	movs	r3, #0
 800c882:	930a      	str	r3, [sp, #40]	@ 0x28
 800c884:	f8d8 3000 	ldr.w	r3, [r8]
 800c888:	9005      	str	r0, [sp, #20]
 800c88a:	3307      	adds	r3, #7
 800c88c:	f023 0307 	bic.w	r3, r3, #7
 800c890:	f103 0208 	add.w	r2, r3, #8
 800c894:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c898:	f8d4 b000 	ldr.w	fp, [r4]
 800c89c:	f8c8 2000 	str.w	r2, [r8]
 800c8a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c8a8:	9307      	str	r3, [sp, #28]
 800c8aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c8b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8b6:	4b9c      	ldr	r3, [pc, #624]	@ (800cb28 <_printf_float+0x2c8>)
 800c8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8bc:	f7f4 f956 	bl	8000b6c <__aeabi_dcmpun>
 800c8c0:	bb70      	cbnz	r0, 800c920 <_printf_float+0xc0>
 800c8c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8c6:	4b98      	ldr	r3, [pc, #608]	@ (800cb28 <_printf_float+0x2c8>)
 800c8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8cc:	f7f4 f930 	bl	8000b30 <__aeabi_dcmple>
 800c8d0:	bb30      	cbnz	r0, 800c920 <_printf_float+0xc0>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	4649      	mov	r1, r9
 800c8da:	f7f4 f91f 	bl	8000b1c <__aeabi_dcmplt>
 800c8de:	b110      	cbz	r0, 800c8e6 <_printf_float+0x86>
 800c8e0:	232d      	movs	r3, #45	@ 0x2d
 800c8e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8e6:	4a91      	ldr	r2, [pc, #580]	@ (800cb2c <_printf_float+0x2cc>)
 800c8e8:	4b91      	ldr	r3, [pc, #580]	@ (800cb30 <_printf_float+0x2d0>)
 800c8ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c8ee:	bf94      	ite	ls
 800c8f0:	4690      	movls	r8, r2
 800c8f2:	4698      	movhi	r8, r3
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	6123      	str	r3, [r4, #16]
 800c8f8:	f02b 0304 	bic.w	r3, fp, #4
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	f04f 0900 	mov.w	r9, #0
 800c902:	9700      	str	r7, [sp, #0]
 800c904:	4633      	mov	r3, r6
 800c906:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c908:	4621      	mov	r1, r4
 800c90a:	4628      	mov	r0, r5
 800c90c:	f000 f9d2 	bl	800ccb4 <_printf_common>
 800c910:	3001      	adds	r0, #1
 800c912:	f040 808d 	bne.w	800ca30 <_printf_float+0x1d0>
 800c916:	f04f 30ff 	mov.w	r0, #4294967295
 800c91a:	b00d      	add	sp, #52	@ 0x34
 800c91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c920:	4642      	mov	r2, r8
 800c922:	464b      	mov	r3, r9
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f4 f920 	bl	8000b6c <__aeabi_dcmpun>
 800c92c:	b140      	cbz	r0, 800c940 <_printf_float+0xe0>
 800c92e:	464b      	mov	r3, r9
 800c930:	2b00      	cmp	r3, #0
 800c932:	bfbc      	itt	lt
 800c934:	232d      	movlt	r3, #45	@ 0x2d
 800c936:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c93a:	4a7e      	ldr	r2, [pc, #504]	@ (800cb34 <_printf_float+0x2d4>)
 800c93c:	4b7e      	ldr	r3, [pc, #504]	@ (800cb38 <_printf_float+0x2d8>)
 800c93e:	e7d4      	b.n	800c8ea <_printf_float+0x8a>
 800c940:	6863      	ldr	r3, [r4, #4]
 800c942:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c946:	9206      	str	r2, [sp, #24]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	d13b      	bne.n	800c9c4 <_printf_float+0x164>
 800c94c:	2306      	movs	r3, #6
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c954:	2300      	movs	r3, #0
 800c956:	6022      	str	r2, [r4, #0]
 800c958:	9303      	str	r3, [sp, #12]
 800c95a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c95c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c960:	ab09      	add	r3, sp, #36	@ 0x24
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	6861      	ldr	r1, [r4, #4]
 800c966:	ec49 8b10 	vmov	d0, r8, r9
 800c96a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c96e:	4628      	mov	r0, r5
 800c970:	f7ff fed6 	bl	800c720 <__cvt>
 800c974:	9b06      	ldr	r3, [sp, #24]
 800c976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c978:	2b47      	cmp	r3, #71	@ 0x47
 800c97a:	4680      	mov	r8, r0
 800c97c:	d129      	bne.n	800c9d2 <_printf_float+0x172>
 800c97e:	1cc8      	adds	r0, r1, #3
 800c980:	db02      	blt.n	800c988 <_printf_float+0x128>
 800c982:	6863      	ldr	r3, [r4, #4]
 800c984:	4299      	cmp	r1, r3
 800c986:	dd41      	ble.n	800ca0c <_printf_float+0x1ac>
 800c988:	f1aa 0a02 	sub.w	sl, sl, #2
 800c98c:	fa5f fa8a 	uxtb.w	sl, sl
 800c990:	3901      	subs	r1, #1
 800c992:	4652      	mov	r2, sl
 800c994:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c998:	9109      	str	r1, [sp, #36]	@ 0x24
 800c99a:	f7ff ff26 	bl	800c7ea <__exponent>
 800c99e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9a0:	1813      	adds	r3, r2, r0
 800c9a2:	2a01      	cmp	r2, #1
 800c9a4:	4681      	mov	r9, r0
 800c9a6:	6123      	str	r3, [r4, #16]
 800c9a8:	dc02      	bgt.n	800c9b0 <_printf_float+0x150>
 800c9aa:	6822      	ldr	r2, [r4, #0]
 800c9ac:	07d2      	lsls	r2, r2, #31
 800c9ae:	d501      	bpl.n	800c9b4 <_printf_float+0x154>
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	6123      	str	r3, [r4, #16]
 800c9b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0a2      	beq.n	800c902 <_printf_float+0xa2>
 800c9bc:	232d      	movs	r3, #45	@ 0x2d
 800c9be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9c2:	e79e      	b.n	800c902 <_printf_float+0xa2>
 800c9c4:	9a06      	ldr	r2, [sp, #24]
 800c9c6:	2a47      	cmp	r2, #71	@ 0x47
 800c9c8:	d1c2      	bne.n	800c950 <_printf_float+0xf0>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1c0      	bne.n	800c950 <_printf_float+0xf0>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e7bd      	b.n	800c94e <_printf_float+0xee>
 800c9d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c9d6:	d9db      	bls.n	800c990 <_printf_float+0x130>
 800c9d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c9dc:	d118      	bne.n	800ca10 <_printf_float+0x1b0>
 800c9de:	2900      	cmp	r1, #0
 800c9e0:	6863      	ldr	r3, [r4, #4]
 800c9e2:	dd0b      	ble.n	800c9fc <_printf_float+0x19c>
 800c9e4:	6121      	str	r1, [r4, #16]
 800c9e6:	b913      	cbnz	r3, 800c9ee <_printf_float+0x18e>
 800c9e8:	6822      	ldr	r2, [r4, #0]
 800c9ea:	07d0      	lsls	r0, r2, #31
 800c9ec:	d502      	bpl.n	800c9f4 <_printf_float+0x194>
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	440b      	add	r3, r1
 800c9f2:	6123      	str	r3, [r4, #16]
 800c9f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c9f6:	f04f 0900 	mov.w	r9, #0
 800c9fa:	e7db      	b.n	800c9b4 <_printf_float+0x154>
 800c9fc:	b913      	cbnz	r3, 800ca04 <_printf_float+0x1a4>
 800c9fe:	6822      	ldr	r2, [r4, #0]
 800ca00:	07d2      	lsls	r2, r2, #31
 800ca02:	d501      	bpl.n	800ca08 <_printf_float+0x1a8>
 800ca04:	3302      	adds	r3, #2
 800ca06:	e7f4      	b.n	800c9f2 <_printf_float+0x192>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e7f2      	b.n	800c9f2 <_printf_float+0x192>
 800ca0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ca10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca12:	4299      	cmp	r1, r3
 800ca14:	db05      	blt.n	800ca22 <_printf_float+0x1c2>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	6121      	str	r1, [r4, #16]
 800ca1a:	07d8      	lsls	r0, r3, #31
 800ca1c:	d5ea      	bpl.n	800c9f4 <_printf_float+0x194>
 800ca1e:	1c4b      	adds	r3, r1, #1
 800ca20:	e7e7      	b.n	800c9f2 <_printf_float+0x192>
 800ca22:	2900      	cmp	r1, #0
 800ca24:	bfd4      	ite	le
 800ca26:	f1c1 0202 	rsble	r2, r1, #2
 800ca2a:	2201      	movgt	r2, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	e7e0      	b.n	800c9f2 <_printf_float+0x192>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	055a      	lsls	r2, r3, #21
 800ca34:	d407      	bmi.n	800ca46 <_printf_float+0x1e6>
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	4642      	mov	r2, r8
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	47b8      	blx	r7
 800ca40:	3001      	adds	r0, #1
 800ca42:	d12b      	bne.n	800ca9c <_printf_float+0x23c>
 800ca44:	e767      	b.n	800c916 <_printf_float+0xb6>
 800ca46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca4a:	f240 80dd 	bls.w	800cc08 <_printf_float+0x3a8>
 800ca4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca52:	2200      	movs	r2, #0
 800ca54:	2300      	movs	r3, #0
 800ca56:	f7f4 f857 	bl	8000b08 <__aeabi_dcmpeq>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d033      	beq.n	800cac6 <_printf_float+0x266>
 800ca5e:	4a37      	ldr	r2, [pc, #220]	@ (800cb3c <_printf_float+0x2dc>)
 800ca60:	2301      	movs	r3, #1
 800ca62:	4631      	mov	r1, r6
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	f43f af54 	beq.w	800c916 <_printf_float+0xb6>
 800ca6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ca72:	4543      	cmp	r3, r8
 800ca74:	db02      	blt.n	800ca7c <_printf_float+0x21c>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	07d8      	lsls	r0, r3, #31
 800ca7a:	d50f      	bpl.n	800ca9c <_printf_float+0x23c>
 800ca7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca80:	4631      	mov	r1, r6
 800ca82:	4628      	mov	r0, r5
 800ca84:	47b8      	blx	r7
 800ca86:	3001      	adds	r0, #1
 800ca88:	f43f af45 	beq.w	800c916 <_printf_float+0xb6>
 800ca8c:	f04f 0900 	mov.w	r9, #0
 800ca90:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca94:	f104 0a1a 	add.w	sl, r4, #26
 800ca98:	45c8      	cmp	r8, r9
 800ca9a:	dc09      	bgt.n	800cab0 <_printf_float+0x250>
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	079b      	lsls	r3, r3, #30
 800caa0:	f100 8103 	bmi.w	800ccaa <_printf_float+0x44a>
 800caa4:	68e0      	ldr	r0, [r4, #12]
 800caa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caa8:	4298      	cmp	r0, r3
 800caaa:	bfb8      	it	lt
 800caac:	4618      	movlt	r0, r3
 800caae:	e734      	b.n	800c91a <_printf_float+0xba>
 800cab0:	2301      	movs	r3, #1
 800cab2:	4652      	mov	r2, sl
 800cab4:	4631      	mov	r1, r6
 800cab6:	4628      	mov	r0, r5
 800cab8:	47b8      	blx	r7
 800caba:	3001      	adds	r0, #1
 800cabc:	f43f af2b 	beq.w	800c916 <_printf_float+0xb6>
 800cac0:	f109 0901 	add.w	r9, r9, #1
 800cac4:	e7e8      	b.n	800ca98 <_printf_float+0x238>
 800cac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac8:	2b00      	cmp	r3, #0
 800caca:	dc39      	bgt.n	800cb40 <_printf_float+0x2e0>
 800cacc:	4a1b      	ldr	r2, [pc, #108]	@ (800cb3c <_printf_float+0x2dc>)
 800cace:	2301      	movs	r3, #1
 800cad0:	4631      	mov	r1, r6
 800cad2:	4628      	mov	r0, r5
 800cad4:	47b8      	blx	r7
 800cad6:	3001      	adds	r0, #1
 800cad8:	f43f af1d 	beq.w	800c916 <_printf_float+0xb6>
 800cadc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cae0:	ea59 0303 	orrs.w	r3, r9, r3
 800cae4:	d102      	bne.n	800caec <_printf_float+0x28c>
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	07d9      	lsls	r1, r3, #31
 800caea:	d5d7      	bpl.n	800ca9c <_printf_float+0x23c>
 800caec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caf0:	4631      	mov	r1, r6
 800caf2:	4628      	mov	r0, r5
 800caf4:	47b8      	blx	r7
 800caf6:	3001      	adds	r0, #1
 800caf8:	f43f af0d 	beq.w	800c916 <_printf_float+0xb6>
 800cafc:	f04f 0a00 	mov.w	sl, #0
 800cb00:	f104 0b1a 	add.w	fp, r4, #26
 800cb04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb06:	425b      	negs	r3, r3
 800cb08:	4553      	cmp	r3, sl
 800cb0a:	dc01      	bgt.n	800cb10 <_printf_float+0x2b0>
 800cb0c:	464b      	mov	r3, r9
 800cb0e:	e793      	b.n	800ca38 <_printf_float+0x1d8>
 800cb10:	2301      	movs	r3, #1
 800cb12:	465a      	mov	r2, fp
 800cb14:	4631      	mov	r1, r6
 800cb16:	4628      	mov	r0, r5
 800cb18:	47b8      	blx	r7
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	f43f aefb 	beq.w	800c916 <_printf_float+0xb6>
 800cb20:	f10a 0a01 	add.w	sl, sl, #1
 800cb24:	e7ee      	b.n	800cb04 <_printf_float+0x2a4>
 800cb26:	bf00      	nop
 800cb28:	7fefffff 	.word	0x7fefffff
 800cb2c:	08011660 	.word	0x08011660
 800cb30:	08011664 	.word	0x08011664
 800cb34:	08011668 	.word	0x08011668
 800cb38:	0801166c 	.word	0x0801166c
 800cb3c:	08011670 	.word	0x08011670
 800cb40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cb42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb46:	4553      	cmp	r3, sl
 800cb48:	bfa8      	it	ge
 800cb4a:	4653      	movge	r3, sl
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	4699      	mov	r9, r3
 800cb50:	dc36      	bgt.n	800cbc0 <_printf_float+0x360>
 800cb52:	f04f 0b00 	mov.w	fp, #0
 800cb56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb5a:	f104 021a 	add.w	r2, r4, #26
 800cb5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cb60:	9306      	str	r3, [sp, #24]
 800cb62:	eba3 0309 	sub.w	r3, r3, r9
 800cb66:	455b      	cmp	r3, fp
 800cb68:	dc31      	bgt.n	800cbce <_printf_float+0x36e>
 800cb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb6c:	459a      	cmp	sl, r3
 800cb6e:	dc3a      	bgt.n	800cbe6 <_printf_float+0x386>
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	07da      	lsls	r2, r3, #31
 800cb74:	d437      	bmi.n	800cbe6 <_printf_float+0x386>
 800cb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb78:	ebaa 0903 	sub.w	r9, sl, r3
 800cb7c:	9b06      	ldr	r3, [sp, #24]
 800cb7e:	ebaa 0303 	sub.w	r3, sl, r3
 800cb82:	4599      	cmp	r9, r3
 800cb84:	bfa8      	it	ge
 800cb86:	4699      	movge	r9, r3
 800cb88:	f1b9 0f00 	cmp.w	r9, #0
 800cb8c:	dc33      	bgt.n	800cbf6 <_printf_float+0x396>
 800cb8e:	f04f 0800 	mov.w	r8, #0
 800cb92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb96:	f104 0b1a 	add.w	fp, r4, #26
 800cb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb9c:	ebaa 0303 	sub.w	r3, sl, r3
 800cba0:	eba3 0309 	sub.w	r3, r3, r9
 800cba4:	4543      	cmp	r3, r8
 800cba6:	f77f af79 	ble.w	800ca9c <_printf_float+0x23c>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	465a      	mov	r2, fp
 800cbae:	4631      	mov	r1, r6
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b8      	blx	r7
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	f43f aeae 	beq.w	800c916 <_printf_float+0xb6>
 800cbba:	f108 0801 	add.w	r8, r8, #1
 800cbbe:	e7ec      	b.n	800cb9a <_printf_float+0x33a>
 800cbc0:	4642      	mov	r2, r8
 800cbc2:	4631      	mov	r1, r6
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	47b8      	blx	r7
 800cbc8:	3001      	adds	r0, #1
 800cbca:	d1c2      	bne.n	800cb52 <_printf_float+0x2f2>
 800cbcc:	e6a3      	b.n	800c916 <_printf_float+0xb6>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	9206      	str	r2, [sp, #24]
 800cbd6:	47b8      	blx	r7
 800cbd8:	3001      	adds	r0, #1
 800cbda:	f43f ae9c 	beq.w	800c916 <_printf_float+0xb6>
 800cbde:	9a06      	ldr	r2, [sp, #24]
 800cbe0:	f10b 0b01 	add.w	fp, fp, #1
 800cbe4:	e7bb      	b.n	800cb5e <_printf_float+0x2fe>
 800cbe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d1c0      	bne.n	800cb76 <_printf_float+0x316>
 800cbf4:	e68f      	b.n	800c916 <_printf_float+0xb6>
 800cbf6:	9a06      	ldr	r2, [sp, #24]
 800cbf8:	464b      	mov	r3, r9
 800cbfa:	4442      	add	r2, r8
 800cbfc:	4631      	mov	r1, r6
 800cbfe:	4628      	mov	r0, r5
 800cc00:	47b8      	blx	r7
 800cc02:	3001      	adds	r0, #1
 800cc04:	d1c3      	bne.n	800cb8e <_printf_float+0x32e>
 800cc06:	e686      	b.n	800c916 <_printf_float+0xb6>
 800cc08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc0c:	f1ba 0f01 	cmp.w	sl, #1
 800cc10:	dc01      	bgt.n	800cc16 <_printf_float+0x3b6>
 800cc12:	07db      	lsls	r3, r3, #31
 800cc14:	d536      	bpl.n	800cc84 <_printf_float+0x424>
 800cc16:	2301      	movs	r3, #1
 800cc18:	4642      	mov	r2, r8
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	47b8      	blx	r7
 800cc20:	3001      	adds	r0, #1
 800cc22:	f43f ae78 	beq.w	800c916 <_printf_float+0xb6>
 800cc26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	47b8      	blx	r7
 800cc30:	3001      	adds	r0, #1
 800cc32:	f43f ae70 	beq.w	800c916 <_printf_float+0xb6>
 800cc36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc42:	f7f3 ff61 	bl	8000b08 <__aeabi_dcmpeq>
 800cc46:	b9c0      	cbnz	r0, 800cc7a <_printf_float+0x41a>
 800cc48:	4653      	mov	r3, sl
 800cc4a:	f108 0201 	add.w	r2, r8, #1
 800cc4e:	4631      	mov	r1, r6
 800cc50:	4628      	mov	r0, r5
 800cc52:	47b8      	blx	r7
 800cc54:	3001      	adds	r0, #1
 800cc56:	d10c      	bne.n	800cc72 <_printf_float+0x412>
 800cc58:	e65d      	b.n	800c916 <_printf_float+0xb6>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	465a      	mov	r2, fp
 800cc5e:	4631      	mov	r1, r6
 800cc60:	4628      	mov	r0, r5
 800cc62:	47b8      	blx	r7
 800cc64:	3001      	adds	r0, #1
 800cc66:	f43f ae56 	beq.w	800c916 <_printf_float+0xb6>
 800cc6a:	f108 0801 	add.w	r8, r8, #1
 800cc6e:	45d0      	cmp	r8, sl
 800cc70:	dbf3      	blt.n	800cc5a <_printf_float+0x3fa>
 800cc72:	464b      	mov	r3, r9
 800cc74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cc78:	e6df      	b.n	800ca3a <_printf_float+0x1da>
 800cc7a:	f04f 0800 	mov.w	r8, #0
 800cc7e:	f104 0b1a 	add.w	fp, r4, #26
 800cc82:	e7f4      	b.n	800cc6e <_printf_float+0x40e>
 800cc84:	2301      	movs	r3, #1
 800cc86:	4642      	mov	r2, r8
 800cc88:	e7e1      	b.n	800cc4e <_printf_float+0x3ee>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	464a      	mov	r2, r9
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b8      	blx	r7
 800cc94:	3001      	adds	r0, #1
 800cc96:	f43f ae3e 	beq.w	800c916 <_printf_float+0xb6>
 800cc9a:	f108 0801 	add.w	r8, r8, #1
 800cc9e:	68e3      	ldr	r3, [r4, #12]
 800cca0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cca2:	1a5b      	subs	r3, r3, r1
 800cca4:	4543      	cmp	r3, r8
 800cca6:	dcf0      	bgt.n	800cc8a <_printf_float+0x42a>
 800cca8:	e6fc      	b.n	800caa4 <_printf_float+0x244>
 800ccaa:	f04f 0800 	mov.w	r8, #0
 800ccae:	f104 0919 	add.w	r9, r4, #25
 800ccb2:	e7f4      	b.n	800cc9e <_printf_float+0x43e>

0800ccb4 <_printf_common>:
 800ccb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb8:	4616      	mov	r6, r2
 800ccba:	4698      	mov	r8, r3
 800ccbc:	688a      	ldr	r2, [r1, #8]
 800ccbe:	690b      	ldr	r3, [r1, #16]
 800ccc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	bfb8      	it	lt
 800ccc8:	4613      	movlt	r3, r2
 800ccca:	6033      	str	r3, [r6, #0]
 800cccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b10a      	cbz	r2, 800ccda <_printf_common+0x26>
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	6033      	str	r3, [r6, #0]
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	0699      	lsls	r1, r3, #26
 800ccde:	bf42      	ittt	mi
 800cce0:	6833      	ldrmi	r3, [r6, #0]
 800cce2:	3302      	addmi	r3, #2
 800cce4:	6033      	strmi	r3, [r6, #0]
 800cce6:	6825      	ldr	r5, [r4, #0]
 800cce8:	f015 0506 	ands.w	r5, r5, #6
 800ccec:	d106      	bne.n	800ccfc <_printf_common+0x48>
 800ccee:	f104 0a19 	add.w	sl, r4, #25
 800ccf2:	68e3      	ldr	r3, [r4, #12]
 800ccf4:	6832      	ldr	r2, [r6, #0]
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	dc26      	bgt.n	800cd4a <_printf_common+0x96>
 800ccfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd00:	6822      	ldr	r2, [r4, #0]
 800cd02:	3b00      	subs	r3, #0
 800cd04:	bf18      	it	ne
 800cd06:	2301      	movne	r3, #1
 800cd08:	0692      	lsls	r2, r2, #26
 800cd0a:	d42b      	bmi.n	800cd64 <_printf_common+0xb0>
 800cd0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd10:	4641      	mov	r1, r8
 800cd12:	4638      	mov	r0, r7
 800cd14:	47c8      	blx	r9
 800cd16:	3001      	adds	r0, #1
 800cd18:	d01e      	beq.n	800cd58 <_printf_common+0xa4>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	6922      	ldr	r2, [r4, #16]
 800cd1e:	f003 0306 	and.w	r3, r3, #6
 800cd22:	2b04      	cmp	r3, #4
 800cd24:	bf02      	ittt	eq
 800cd26:	68e5      	ldreq	r5, [r4, #12]
 800cd28:	6833      	ldreq	r3, [r6, #0]
 800cd2a:	1aed      	subeq	r5, r5, r3
 800cd2c:	68a3      	ldr	r3, [r4, #8]
 800cd2e:	bf0c      	ite	eq
 800cd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd34:	2500      	movne	r5, #0
 800cd36:	4293      	cmp	r3, r2
 800cd38:	bfc4      	itt	gt
 800cd3a:	1a9b      	subgt	r3, r3, r2
 800cd3c:	18ed      	addgt	r5, r5, r3
 800cd3e:	2600      	movs	r6, #0
 800cd40:	341a      	adds	r4, #26
 800cd42:	42b5      	cmp	r5, r6
 800cd44:	d11a      	bne.n	800cd7c <_printf_common+0xc8>
 800cd46:	2000      	movs	r0, #0
 800cd48:	e008      	b.n	800cd5c <_printf_common+0xa8>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	4641      	mov	r1, r8
 800cd50:	4638      	mov	r0, r7
 800cd52:	47c8      	blx	r9
 800cd54:	3001      	adds	r0, #1
 800cd56:	d103      	bne.n	800cd60 <_printf_common+0xac>
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd60:	3501      	adds	r5, #1
 800cd62:	e7c6      	b.n	800ccf2 <_printf_common+0x3e>
 800cd64:	18e1      	adds	r1, r4, r3
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	2030      	movs	r0, #48	@ 0x30
 800cd6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd6e:	4422      	add	r2, r4
 800cd70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd78:	3302      	adds	r3, #2
 800cd7a:	e7c7      	b.n	800cd0c <_printf_common+0x58>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4622      	mov	r2, r4
 800cd80:	4641      	mov	r1, r8
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c8      	blx	r9
 800cd86:	3001      	adds	r0, #1
 800cd88:	d0e6      	beq.n	800cd58 <_printf_common+0xa4>
 800cd8a:	3601      	adds	r6, #1
 800cd8c:	e7d9      	b.n	800cd42 <_printf_common+0x8e>
	...

0800cd90 <_printf_i>:
 800cd90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd94:	7e0f      	ldrb	r7, [r1, #24]
 800cd96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd98:	2f78      	cmp	r7, #120	@ 0x78
 800cd9a:	4691      	mov	r9, r2
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	469a      	mov	sl, r3
 800cda2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cda6:	d807      	bhi.n	800cdb8 <_printf_i+0x28>
 800cda8:	2f62      	cmp	r7, #98	@ 0x62
 800cdaa:	d80a      	bhi.n	800cdc2 <_printf_i+0x32>
 800cdac:	2f00      	cmp	r7, #0
 800cdae:	f000 80d2 	beq.w	800cf56 <_printf_i+0x1c6>
 800cdb2:	2f58      	cmp	r7, #88	@ 0x58
 800cdb4:	f000 80b9 	beq.w	800cf2a <_printf_i+0x19a>
 800cdb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdc0:	e03a      	b.n	800ce38 <_printf_i+0xa8>
 800cdc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdc6:	2b15      	cmp	r3, #21
 800cdc8:	d8f6      	bhi.n	800cdb8 <_printf_i+0x28>
 800cdca:	a101      	add	r1, pc, #4	@ (adr r1, 800cdd0 <_printf_i+0x40>)
 800cdcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdd0:	0800ce29 	.word	0x0800ce29
 800cdd4:	0800ce3d 	.word	0x0800ce3d
 800cdd8:	0800cdb9 	.word	0x0800cdb9
 800cddc:	0800cdb9 	.word	0x0800cdb9
 800cde0:	0800cdb9 	.word	0x0800cdb9
 800cde4:	0800cdb9 	.word	0x0800cdb9
 800cde8:	0800ce3d 	.word	0x0800ce3d
 800cdec:	0800cdb9 	.word	0x0800cdb9
 800cdf0:	0800cdb9 	.word	0x0800cdb9
 800cdf4:	0800cdb9 	.word	0x0800cdb9
 800cdf8:	0800cdb9 	.word	0x0800cdb9
 800cdfc:	0800cf3d 	.word	0x0800cf3d
 800ce00:	0800ce67 	.word	0x0800ce67
 800ce04:	0800cef7 	.word	0x0800cef7
 800ce08:	0800cdb9 	.word	0x0800cdb9
 800ce0c:	0800cdb9 	.word	0x0800cdb9
 800ce10:	0800cf5f 	.word	0x0800cf5f
 800ce14:	0800cdb9 	.word	0x0800cdb9
 800ce18:	0800ce67 	.word	0x0800ce67
 800ce1c:	0800cdb9 	.word	0x0800cdb9
 800ce20:	0800cdb9 	.word	0x0800cdb9
 800ce24:	0800ceff 	.word	0x0800ceff
 800ce28:	6833      	ldr	r3, [r6, #0]
 800ce2a:	1d1a      	adds	r2, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	6032      	str	r2, [r6, #0]
 800ce30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e09d      	b.n	800cf78 <_printf_i+0x1e8>
 800ce3c:	6833      	ldr	r3, [r6, #0]
 800ce3e:	6820      	ldr	r0, [r4, #0]
 800ce40:	1d19      	adds	r1, r3, #4
 800ce42:	6031      	str	r1, [r6, #0]
 800ce44:	0606      	lsls	r6, r0, #24
 800ce46:	d501      	bpl.n	800ce4c <_printf_i+0xbc>
 800ce48:	681d      	ldr	r5, [r3, #0]
 800ce4a:	e003      	b.n	800ce54 <_printf_i+0xc4>
 800ce4c:	0645      	lsls	r5, r0, #25
 800ce4e:	d5fb      	bpl.n	800ce48 <_printf_i+0xb8>
 800ce50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	da03      	bge.n	800ce60 <_printf_i+0xd0>
 800ce58:	232d      	movs	r3, #45	@ 0x2d
 800ce5a:	426d      	negs	r5, r5
 800ce5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce60:	4859      	ldr	r0, [pc, #356]	@ (800cfc8 <_printf_i+0x238>)
 800ce62:	230a      	movs	r3, #10
 800ce64:	e011      	b.n	800ce8a <_printf_i+0xfa>
 800ce66:	6821      	ldr	r1, [r4, #0]
 800ce68:	6833      	ldr	r3, [r6, #0]
 800ce6a:	0608      	lsls	r0, r1, #24
 800ce6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce70:	d402      	bmi.n	800ce78 <_printf_i+0xe8>
 800ce72:	0649      	lsls	r1, r1, #25
 800ce74:	bf48      	it	mi
 800ce76:	b2ad      	uxthmi	r5, r5
 800ce78:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce7a:	4853      	ldr	r0, [pc, #332]	@ (800cfc8 <_printf_i+0x238>)
 800ce7c:	6033      	str	r3, [r6, #0]
 800ce7e:	bf14      	ite	ne
 800ce80:	230a      	movne	r3, #10
 800ce82:	2308      	moveq	r3, #8
 800ce84:	2100      	movs	r1, #0
 800ce86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce8a:	6866      	ldr	r6, [r4, #4]
 800ce8c:	60a6      	str	r6, [r4, #8]
 800ce8e:	2e00      	cmp	r6, #0
 800ce90:	bfa2      	ittt	ge
 800ce92:	6821      	ldrge	r1, [r4, #0]
 800ce94:	f021 0104 	bicge.w	r1, r1, #4
 800ce98:	6021      	strge	r1, [r4, #0]
 800ce9a:	b90d      	cbnz	r5, 800cea0 <_printf_i+0x110>
 800ce9c:	2e00      	cmp	r6, #0
 800ce9e:	d04b      	beq.n	800cf38 <_printf_i+0x1a8>
 800cea0:	4616      	mov	r6, r2
 800cea2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cea6:	fb03 5711 	mls	r7, r3, r1, r5
 800ceaa:	5dc7      	ldrb	r7, [r0, r7]
 800ceac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ceb0:	462f      	mov	r7, r5
 800ceb2:	42bb      	cmp	r3, r7
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	d9f4      	bls.n	800cea2 <_printf_i+0x112>
 800ceb8:	2b08      	cmp	r3, #8
 800ceba:	d10b      	bne.n	800ced4 <_printf_i+0x144>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	07df      	lsls	r7, r3, #31
 800cec0:	d508      	bpl.n	800ced4 <_printf_i+0x144>
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	6861      	ldr	r1, [r4, #4]
 800cec6:	4299      	cmp	r1, r3
 800cec8:	bfde      	ittt	le
 800ceca:	2330      	movle	r3, #48	@ 0x30
 800cecc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ced0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ced4:	1b92      	subs	r2, r2, r6
 800ced6:	6122      	str	r2, [r4, #16]
 800ced8:	f8cd a000 	str.w	sl, [sp]
 800cedc:	464b      	mov	r3, r9
 800cede:	aa03      	add	r2, sp, #12
 800cee0:	4621      	mov	r1, r4
 800cee2:	4640      	mov	r0, r8
 800cee4:	f7ff fee6 	bl	800ccb4 <_printf_common>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d14a      	bne.n	800cf82 <_printf_i+0x1f2>
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295
 800cef0:	b004      	add	sp, #16
 800cef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	f043 0320 	orr.w	r3, r3, #32
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	4833      	ldr	r0, [pc, #204]	@ (800cfcc <_printf_i+0x23c>)
 800cf00:	2778      	movs	r7, #120	@ 0x78
 800cf02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	6831      	ldr	r1, [r6, #0]
 800cf0a:	061f      	lsls	r7, r3, #24
 800cf0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf10:	d402      	bmi.n	800cf18 <_printf_i+0x188>
 800cf12:	065f      	lsls	r7, r3, #25
 800cf14:	bf48      	it	mi
 800cf16:	b2ad      	uxthmi	r5, r5
 800cf18:	6031      	str	r1, [r6, #0]
 800cf1a:	07d9      	lsls	r1, r3, #31
 800cf1c:	bf44      	itt	mi
 800cf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf22:	6023      	strmi	r3, [r4, #0]
 800cf24:	b11d      	cbz	r5, 800cf2e <_printf_i+0x19e>
 800cf26:	2310      	movs	r3, #16
 800cf28:	e7ac      	b.n	800ce84 <_printf_i+0xf4>
 800cf2a:	4827      	ldr	r0, [pc, #156]	@ (800cfc8 <_printf_i+0x238>)
 800cf2c:	e7e9      	b.n	800cf02 <_printf_i+0x172>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	f023 0320 	bic.w	r3, r3, #32
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	e7f6      	b.n	800cf26 <_printf_i+0x196>
 800cf38:	4616      	mov	r6, r2
 800cf3a:	e7bd      	b.n	800ceb8 <_printf_i+0x128>
 800cf3c:	6833      	ldr	r3, [r6, #0]
 800cf3e:	6825      	ldr	r5, [r4, #0]
 800cf40:	6961      	ldr	r1, [r4, #20]
 800cf42:	1d18      	adds	r0, r3, #4
 800cf44:	6030      	str	r0, [r6, #0]
 800cf46:	062e      	lsls	r6, r5, #24
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	d501      	bpl.n	800cf50 <_printf_i+0x1c0>
 800cf4c:	6019      	str	r1, [r3, #0]
 800cf4e:	e002      	b.n	800cf56 <_printf_i+0x1c6>
 800cf50:	0668      	lsls	r0, r5, #25
 800cf52:	d5fb      	bpl.n	800cf4c <_printf_i+0x1bc>
 800cf54:	8019      	strh	r1, [r3, #0]
 800cf56:	2300      	movs	r3, #0
 800cf58:	6123      	str	r3, [r4, #16]
 800cf5a:	4616      	mov	r6, r2
 800cf5c:	e7bc      	b.n	800ced8 <_printf_i+0x148>
 800cf5e:	6833      	ldr	r3, [r6, #0]
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	6032      	str	r2, [r6, #0]
 800cf64:	681e      	ldr	r6, [r3, #0]
 800cf66:	6862      	ldr	r2, [r4, #4]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7f3 f950 	bl	8000210 <memchr>
 800cf70:	b108      	cbz	r0, 800cf76 <_printf_i+0x1e6>
 800cf72:	1b80      	subs	r0, r0, r6
 800cf74:	6060      	str	r0, [r4, #4]
 800cf76:	6863      	ldr	r3, [r4, #4]
 800cf78:	6123      	str	r3, [r4, #16]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf80:	e7aa      	b.n	800ced8 <_printf_i+0x148>
 800cf82:	6923      	ldr	r3, [r4, #16]
 800cf84:	4632      	mov	r2, r6
 800cf86:	4649      	mov	r1, r9
 800cf88:	4640      	mov	r0, r8
 800cf8a:	47d0      	blx	sl
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d0ad      	beq.n	800ceec <_printf_i+0x15c>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	079b      	lsls	r3, r3, #30
 800cf94:	d413      	bmi.n	800cfbe <_printf_i+0x22e>
 800cf96:	68e0      	ldr	r0, [r4, #12]
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	4298      	cmp	r0, r3
 800cf9c:	bfb8      	it	lt
 800cf9e:	4618      	movlt	r0, r3
 800cfa0:	e7a6      	b.n	800cef0 <_printf_i+0x160>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	47d0      	blx	sl
 800cfac:	3001      	adds	r0, #1
 800cfae:	d09d      	beq.n	800ceec <_printf_i+0x15c>
 800cfb0:	3501      	adds	r5, #1
 800cfb2:	68e3      	ldr	r3, [r4, #12]
 800cfb4:	9903      	ldr	r1, [sp, #12]
 800cfb6:	1a5b      	subs	r3, r3, r1
 800cfb8:	42ab      	cmp	r3, r5
 800cfba:	dcf2      	bgt.n	800cfa2 <_printf_i+0x212>
 800cfbc:	e7eb      	b.n	800cf96 <_printf_i+0x206>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	f104 0619 	add.w	r6, r4, #25
 800cfc4:	e7f5      	b.n	800cfb2 <_printf_i+0x222>
 800cfc6:	bf00      	nop
 800cfc8:	08011672 	.word	0x08011672
 800cfcc:	08011683 	.word	0x08011683

0800cfd0 <std>:
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	e9c0 3300 	strd	r3, r3, [r0]
 800cfda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfde:	6083      	str	r3, [r0, #8]
 800cfe0:	8181      	strh	r1, [r0, #12]
 800cfe2:	6643      	str	r3, [r0, #100]	@ 0x64
 800cfe4:	81c2      	strh	r2, [r0, #14]
 800cfe6:	6183      	str	r3, [r0, #24]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	2208      	movs	r2, #8
 800cfec:	305c      	adds	r0, #92	@ 0x5c
 800cfee:	f000 f904 	bl	800d1fa <memset>
 800cff2:	4b0d      	ldr	r3, [pc, #52]	@ (800d028 <std+0x58>)
 800cff4:	6263      	str	r3, [r4, #36]	@ 0x24
 800cff6:	4b0d      	ldr	r3, [pc, #52]	@ (800d02c <std+0x5c>)
 800cff8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cffa:	4b0d      	ldr	r3, [pc, #52]	@ (800d030 <std+0x60>)
 800cffc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cffe:	4b0d      	ldr	r3, [pc, #52]	@ (800d034 <std+0x64>)
 800d000:	6323      	str	r3, [r4, #48]	@ 0x30
 800d002:	4b0d      	ldr	r3, [pc, #52]	@ (800d038 <std+0x68>)
 800d004:	6224      	str	r4, [r4, #32]
 800d006:	429c      	cmp	r4, r3
 800d008:	d006      	beq.n	800d018 <std+0x48>
 800d00a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d00e:	4294      	cmp	r4, r2
 800d010:	d002      	beq.n	800d018 <std+0x48>
 800d012:	33d0      	adds	r3, #208	@ 0xd0
 800d014:	429c      	cmp	r4, r3
 800d016:	d105      	bne.n	800d024 <std+0x54>
 800d018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d020:	f000 b978 	b.w	800d314 <__retarget_lock_init_recursive>
 800d024:	bd10      	pop	{r4, pc}
 800d026:	bf00      	nop
 800d028:	0800d155 	.word	0x0800d155
 800d02c:	0800d177 	.word	0x0800d177
 800d030:	0800d1af 	.word	0x0800d1af
 800d034:	0800d1d3 	.word	0x0800d1d3
 800d038:	20000718 	.word	0x20000718

0800d03c <stdio_exit_handler>:
 800d03c:	4a02      	ldr	r2, [pc, #8]	@ (800d048 <stdio_exit_handler+0xc>)
 800d03e:	4903      	ldr	r1, [pc, #12]	@ (800d04c <stdio_exit_handler+0x10>)
 800d040:	4803      	ldr	r0, [pc, #12]	@ (800d050 <stdio_exit_handler+0x14>)
 800d042:	f000 b869 	b.w	800d118 <_fwalk_sglue>
 800d046:	bf00      	nop
 800d048:	2000004c 	.word	0x2000004c
 800d04c:	0800e881 	.word	0x0800e881
 800d050:	2000005c 	.word	0x2000005c

0800d054 <cleanup_stdio>:
 800d054:	6841      	ldr	r1, [r0, #4]
 800d056:	4b0c      	ldr	r3, [pc, #48]	@ (800d088 <cleanup_stdio+0x34>)
 800d058:	4299      	cmp	r1, r3
 800d05a:	b510      	push	{r4, lr}
 800d05c:	4604      	mov	r4, r0
 800d05e:	d001      	beq.n	800d064 <cleanup_stdio+0x10>
 800d060:	f001 fc0e 	bl	800e880 <_fflush_r>
 800d064:	68a1      	ldr	r1, [r4, #8]
 800d066:	4b09      	ldr	r3, [pc, #36]	@ (800d08c <cleanup_stdio+0x38>)
 800d068:	4299      	cmp	r1, r3
 800d06a:	d002      	beq.n	800d072 <cleanup_stdio+0x1e>
 800d06c:	4620      	mov	r0, r4
 800d06e:	f001 fc07 	bl	800e880 <_fflush_r>
 800d072:	68e1      	ldr	r1, [r4, #12]
 800d074:	4b06      	ldr	r3, [pc, #24]	@ (800d090 <cleanup_stdio+0x3c>)
 800d076:	4299      	cmp	r1, r3
 800d078:	d004      	beq.n	800d084 <cleanup_stdio+0x30>
 800d07a:	4620      	mov	r0, r4
 800d07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d080:	f001 bbfe 	b.w	800e880 <_fflush_r>
 800d084:	bd10      	pop	{r4, pc}
 800d086:	bf00      	nop
 800d088:	20000718 	.word	0x20000718
 800d08c:	20000780 	.word	0x20000780
 800d090:	200007e8 	.word	0x200007e8

0800d094 <global_stdio_init.part.0>:
 800d094:	b510      	push	{r4, lr}
 800d096:	4b0b      	ldr	r3, [pc, #44]	@ (800d0c4 <global_stdio_init.part.0+0x30>)
 800d098:	4c0b      	ldr	r4, [pc, #44]	@ (800d0c8 <global_stdio_init.part.0+0x34>)
 800d09a:	4a0c      	ldr	r2, [pc, #48]	@ (800d0cc <global_stdio_init.part.0+0x38>)
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	4620      	mov	r0, r4
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2104      	movs	r1, #4
 800d0a4:	f7ff ff94 	bl	800cfd0 <std>
 800d0a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	2109      	movs	r1, #9
 800d0b0:	f7ff ff8e 	bl	800cfd0 <std>
 800d0b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0be:	2112      	movs	r1, #18
 800d0c0:	f7ff bf86 	b.w	800cfd0 <std>
 800d0c4:	20000850 	.word	0x20000850
 800d0c8:	20000718 	.word	0x20000718
 800d0cc:	0800d03d 	.word	0x0800d03d

0800d0d0 <__sfp_lock_acquire>:
 800d0d0:	4801      	ldr	r0, [pc, #4]	@ (800d0d8 <__sfp_lock_acquire+0x8>)
 800d0d2:	f000 b920 	b.w	800d316 <__retarget_lock_acquire_recursive>
 800d0d6:	bf00      	nop
 800d0d8:	20000859 	.word	0x20000859

0800d0dc <__sfp_lock_release>:
 800d0dc:	4801      	ldr	r0, [pc, #4]	@ (800d0e4 <__sfp_lock_release+0x8>)
 800d0de:	f000 b91b 	b.w	800d318 <__retarget_lock_release_recursive>
 800d0e2:	bf00      	nop
 800d0e4:	20000859 	.word	0x20000859

0800d0e8 <__sinit>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	f7ff fff0 	bl	800d0d0 <__sfp_lock_acquire>
 800d0f0:	6a23      	ldr	r3, [r4, #32]
 800d0f2:	b11b      	cbz	r3, 800d0fc <__sinit+0x14>
 800d0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0f8:	f7ff bff0 	b.w	800d0dc <__sfp_lock_release>
 800d0fc:	4b04      	ldr	r3, [pc, #16]	@ (800d110 <__sinit+0x28>)
 800d0fe:	6223      	str	r3, [r4, #32]
 800d100:	4b04      	ldr	r3, [pc, #16]	@ (800d114 <__sinit+0x2c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1f5      	bne.n	800d0f4 <__sinit+0xc>
 800d108:	f7ff ffc4 	bl	800d094 <global_stdio_init.part.0>
 800d10c:	e7f2      	b.n	800d0f4 <__sinit+0xc>
 800d10e:	bf00      	nop
 800d110:	0800d055 	.word	0x0800d055
 800d114:	20000850 	.word	0x20000850

0800d118 <_fwalk_sglue>:
 800d118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d11c:	4607      	mov	r7, r0
 800d11e:	4688      	mov	r8, r1
 800d120:	4614      	mov	r4, r2
 800d122:	2600      	movs	r6, #0
 800d124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d128:	f1b9 0901 	subs.w	r9, r9, #1
 800d12c:	d505      	bpl.n	800d13a <_fwalk_sglue+0x22>
 800d12e:	6824      	ldr	r4, [r4, #0]
 800d130:	2c00      	cmp	r4, #0
 800d132:	d1f7      	bne.n	800d124 <_fwalk_sglue+0xc>
 800d134:	4630      	mov	r0, r6
 800d136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d907      	bls.n	800d150 <_fwalk_sglue+0x38>
 800d140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d144:	3301      	adds	r3, #1
 800d146:	d003      	beq.n	800d150 <_fwalk_sglue+0x38>
 800d148:	4629      	mov	r1, r5
 800d14a:	4638      	mov	r0, r7
 800d14c:	47c0      	blx	r8
 800d14e:	4306      	orrs	r6, r0
 800d150:	3568      	adds	r5, #104	@ 0x68
 800d152:	e7e9      	b.n	800d128 <_fwalk_sglue+0x10>

0800d154 <__sread>:
 800d154:	b510      	push	{r4, lr}
 800d156:	460c      	mov	r4, r1
 800d158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15c:	f000 f87c 	bl	800d258 <_read_r>
 800d160:	2800      	cmp	r0, #0
 800d162:	bfab      	itete	ge
 800d164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d166:	89a3      	ldrhlt	r3, [r4, #12]
 800d168:	181b      	addge	r3, r3, r0
 800d16a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d16e:	bfac      	ite	ge
 800d170:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d172:	81a3      	strhlt	r3, [r4, #12]
 800d174:	bd10      	pop	{r4, pc}

0800d176 <__swrite>:
 800d176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	461f      	mov	r7, r3
 800d17c:	898b      	ldrh	r3, [r1, #12]
 800d17e:	05db      	lsls	r3, r3, #23
 800d180:	4605      	mov	r5, r0
 800d182:	460c      	mov	r4, r1
 800d184:	4616      	mov	r6, r2
 800d186:	d505      	bpl.n	800d194 <__swrite+0x1e>
 800d188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18c:	2302      	movs	r3, #2
 800d18e:	2200      	movs	r2, #0
 800d190:	f000 f850 	bl	800d234 <_lseek_r>
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d19a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d19e:	81a3      	strh	r3, [r4, #12]
 800d1a0:	4632      	mov	r2, r6
 800d1a2:	463b      	mov	r3, r7
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1aa:	f000 b877 	b.w	800d29c <_write_r>

0800d1ae <__sseek>:
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1b6:	f000 f83d 	bl	800d234 <_lseek_r>
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	89a3      	ldrh	r3, [r4, #12]
 800d1be:	bf15      	itete	ne
 800d1c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1ca:	81a3      	strheq	r3, [r4, #12]
 800d1cc:	bf18      	it	ne
 800d1ce:	81a3      	strhne	r3, [r4, #12]
 800d1d0:	bd10      	pop	{r4, pc}

0800d1d2 <__sclose>:
 800d1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d6:	f000 b81d 	b.w	800d214 <_close_r>

0800d1da <memcmp>:
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	3901      	subs	r1, #1
 800d1de:	4402      	add	r2, r0
 800d1e0:	4290      	cmp	r0, r2
 800d1e2:	d101      	bne.n	800d1e8 <memcmp+0xe>
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	e005      	b.n	800d1f4 <memcmp+0x1a>
 800d1e8:	7803      	ldrb	r3, [r0, #0]
 800d1ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1ee:	42a3      	cmp	r3, r4
 800d1f0:	d001      	beq.n	800d1f6 <memcmp+0x1c>
 800d1f2:	1b18      	subs	r0, r3, r4
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	e7f2      	b.n	800d1e0 <memcmp+0x6>

0800d1fa <memset>:
 800d1fa:	4402      	add	r2, r0
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d100      	bne.n	800d204 <memset+0xa>
 800d202:	4770      	bx	lr
 800d204:	f803 1b01 	strb.w	r1, [r3], #1
 800d208:	e7f9      	b.n	800d1fe <memset+0x4>
	...

0800d20c <_localeconv_r>:
 800d20c:	4800      	ldr	r0, [pc, #0]	@ (800d210 <_localeconv_r+0x4>)
 800d20e:	4770      	bx	lr
 800d210:	20000198 	.word	0x20000198

0800d214 <_close_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d06      	ldr	r5, [pc, #24]	@ (800d230 <_close_r+0x1c>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	602b      	str	r3, [r5, #0]
 800d220:	f7fa f8a0 	bl	8007364 <_close>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_close_r+0x1a>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_close_r+0x1a>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	20000854 	.word	0x20000854

0800d234 <_lseek_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d07      	ldr	r5, [pc, #28]	@ (800d254 <_lseek_r+0x20>)
 800d238:	4604      	mov	r4, r0
 800d23a:	4608      	mov	r0, r1
 800d23c:	4611      	mov	r1, r2
 800d23e:	2200      	movs	r2, #0
 800d240:	602a      	str	r2, [r5, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	f7fa f8b5 	bl	80073b2 <_lseek>
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	d102      	bne.n	800d252 <_lseek_r+0x1e>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	b103      	cbz	r3, 800d252 <_lseek_r+0x1e>
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	20000854 	.word	0x20000854

0800d258 <_read_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d07      	ldr	r5, [pc, #28]	@ (800d278 <_read_r+0x20>)
 800d25c:	4604      	mov	r4, r0
 800d25e:	4608      	mov	r0, r1
 800d260:	4611      	mov	r1, r2
 800d262:	2200      	movs	r2, #0
 800d264:	602a      	str	r2, [r5, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	f7fa f843 	bl	80072f2 <_read>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_read_r+0x1e>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_read_r+0x1e>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	20000854 	.word	0x20000854

0800d27c <_sbrk_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4d06      	ldr	r5, [pc, #24]	@ (800d298 <_sbrk_r+0x1c>)
 800d280:	2300      	movs	r3, #0
 800d282:	4604      	mov	r4, r0
 800d284:	4608      	mov	r0, r1
 800d286:	602b      	str	r3, [r5, #0]
 800d288:	f7fa f8a0 	bl	80073cc <_sbrk>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_sbrk_r+0x1a>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_sbrk_r+0x1a>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	20000854 	.word	0x20000854

0800d29c <_write_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d07      	ldr	r5, [pc, #28]	@ (800d2bc <_write_r+0x20>)
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	602a      	str	r2, [r5, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f7fa f83e 	bl	800732c <_write>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d102      	bne.n	800d2ba <_write_r+0x1e>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	b103      	cbz	r3, 800d2ba <_write_r+0x1e>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	20000854 	.word	0x20000854

0800d2c0 <__errno>:
 800d2c0:	4b01      	ldr	r3, [pc, #4]	@ (800d2c8 <__errno+0x8>)
 800d2c2:	6818      	ldr	r0, [r3, #0]
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	20000058 	.word	0x20000058

0800d2cc <__libc_init_array>:
 800d2cc:	b570      	push	{r4, r5, r6, lr}
 800d2ce:	4d0d      	ldr	r5, [pc, #52]	@ (800d304 <__libc_init_array+0x38>)
 800d2d0:	4c0d      	ldr	r4, [pc, #52]	@ (800d308 <__libc_init_array+0x3c>)
 800d2d2:	1b64      	subs	r4, r4, r5
 800d2d4:	10a4      	asrs	r4, r4, #2
 800d2d6:	2600      	movs	r6, #0
 800d2d8:	42a6      	cmp	r6, r4
 800d2da:	d109      	bne.n	800d2f0 <__libc_init_array+0x24>
 800d2dc:	4d0b      	ldr	r5, [pc, #44]	@ (800d30c <__libc_init_array+0x40>)
 800d2de:	4c0c      	ldr	r4, [pc, #48]	@ (800d310 <__libc_init_array+0x44>)
 800d2e0:	f004 f996 	bl	8011610 <_init>
 800d2e4:	1b64      	subs	r4, r4, r5
 800d2e6:	10a4      	asrs	r4, r4, #2
 800d2e8:	2600      	movs	r6, #0
 800d2ea:	42a6      	cmp	r6, r4
 800d2ec:	d105      	bne.n	800d2fa <__libc_init_array+0x2e>
 800d2ee:	bd70      	pop	{r4, r5, r6, pc}
 800d2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f4:	4798      	blx	r3
 800d2f6:	3601      	adds	r6, #1
 800d2f8:	e7ee      	b.n	800d2d8 <__libc_init_array+0xc>
 800d2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2fe:	4798      	blx	r3
 800d300:	3601      	adds	r6, #1
 800d302:	e7f2      	b.n	800d2ea <__libc_init_array+0x1e>
 800d304:	08011c18 	.word	0x08011c18
 800d308:	08011c18 	.word	0x08011c18
 800d30c:	08011c18 	.word	0x08011c18
 800d310:	08011c1c 	.word	0x08011c1c

0800d314 <__retarget_lock_init_recursive>:
 800d314:	4770      	bx	lr

0800d316 <__retarget_lock_acquire_recursive>:
 800d316:	4770      	bx	lr

0800d318 <__retarget_lock_release_recursive>:
 800d318:	4770      	bx	lr

0800d31a <memcpy>:
 800d31a:	440a      	add	r2, r1
 800d31c:	4291      	cmp	r1, r2
 800d31e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d322:	d100      	bne.n	800d326 <memcpy+0xc>
 800d324:	4770      	bx	lr
 800d326:	b510      	push	{r4, lr}
 800d328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d32c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d330:	4291      	cmp	r1, r2
 800d332:	d1f9      	bne.n	800d328 <memcpy+0xe>
 800d334:	bd10      	pop	{r4, pc}

0800d336 <quorem>:
 800d336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	6903      	ldr	r3, [r0, #16]
 800d33c:	690c      	ldr	r4, [r1, #16]
 800d33e:	42a3      	cmp	r3, r4
 800d340:	4607      	mov	r7, r0
 800d342:	db7e      	blt.n	800d442 <quorem+0x10c>
 800d344:	3c01      	subs	r4, #1
 800d346:	f101 0814 	add.w	r8, r1, #20
 800d34a:	00a3      	lsls	r3, r4, #2
 800d34c:	f100 0514 	add.w	r5, r0, #20
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d35c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d360:	3301      	adds	r3, #1
 800d362:	429a      	cmp	r2, r3
 800d364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d368:	fbb2 f6f3 	udiv	r6, r2, r3
 800d36c:	d32e      	bcc.n	800d3cc <quorem+0x96>
 800d36e:	f04f 0a00 	mov.w	sl, #0
 800d372:	46c4      	mov	ip, r8
 800d374:	46ae      	mov	lr, r5
 800d376:	46d3      	mov	fp, sl
 800d378:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d37c:	b298      	uxth	r0, r3
 800d37e:	fb06 a000 	mla	r0, r6, r0, sl
 800d382:	0c02      	lsrs	r2, r0, #16
 800d384:	0c1b      	lsrs	r3, r3, #16
 800d386:	fb06 2303 	mla	r3, r6, r3, r2
 800d38a:	f8de 2000 	ldr.w	r2, [lr]
 800d38e:	b280      	uxth	r0, r0
 800d390:	b292      	uxth	r2, r2
 800d392:	1a12      	subs	r2, r2, r0
 800d394:	445a      	add	r2, fp
 800d396:	f8de 0000 	ldr.w	r0, [lr]
 800d39a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3a8:	b292      	uxth	r2, r2
 800d3aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3ae:	45e1      	cmp	r9, ip
 800d3b0:	f84e 2b04 	str.w	r2, [lr], #4
 800d3b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3b8:	d2de      	bcs.n	800d378 <quorem+0x42>
 800d3ba:	9b00      	ldr	r3, [sp, #0]
 800d3bc:	58eb      	ldr	r3, [r5, r3]
 800d3be:	b92b      	cbnz	r3, 800d3cc <quorem+0x96>
 800d3c0:	9b01      	ldr	r3, [sp, #4]
 800d3c2:	3b04      	subs	r3, #4
 800d3c4:	429d      	cmp	r5, r3
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	d32f      	bcc.n	800d42a <quorem+0xf4>
 800d3ca:	613c      	str	r4, [r7, #16]
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	f001 f8cb 	bl	800e568 <__mcmp>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	db25      	blt.n	800d422 <quorem+0xec>
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3de:	f8d1 c000 	ldr.w	ip, [r1]
 800d3e2:	fa1f fe82 	uxth.w	lr, r2
 800d3e6:	fa1f f38c 	uxth.w	r3, ip
 800d3ea:	eba3 030e 	sub.w	r3, r3, lr
 800d3ee:	4403      	add	r3, r0
 800d3f0:	0c12      	lsrs	r2, r2, #16
 800d3f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d3f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d400:	45c1      	cmp	r9, r8
 800d402:	f841 3b04 	str.w	r3, [r1], #4
 800d406:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d40a:	d2e6      	bcs.n	800d3da <quorem+0xa4>
 800d40c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d414:	b922      	cbnz	r2, 800d420 <quorem+0xea>
 800d416:	3b04      	subs	r3, #4
 800d418:	429d      	cmp	r5, r3
 800d41a:	461a      	mov	r2, r3
 800d41c:	d30b      	bcc.n	800d436 <quorem+0x100>
 800d41e:	613c      	str	r4, [r7, #16]
 800d420:	3601      	adds	r6, #1
 800d422:	4630      	mov	r0, r6
 800d424:	b003      	add	sp, #12
 800d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42a:	6812      	ldr	r2, [r2, #0]
 800d42c:	3b04      	subs	r3, #4
 800d42e:	2a00      	cmp	r2, #0
 800d430:	d1cb      	bne.n	800d3ca <quorem+0x94>
 800d432:	3c01      	subs	r4, #1
 800d434:	e7c6      	b.n	800d3c4 <quorem+0x8e>
 800d436:	6812      	ldr	r2, [r2, #0]
 800d438:	3b04      	subs	r3, #4
 800d43a:	2a00      	cmp	r2, #0
 800d43c:	d1ef      	bne.n	800d41e <quorem+0xe8>
 800d43e:	3c01      	subs	r4, #1
 800d440:	e7ea      	b.n	800d418 <quorem+0xe2>
 800d442:	2000      	movs	r0, #0
 800d444:	e7ee      	b.n	800d424 <quorem+0xee>
	...

0800d448 <_dtoa_r>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	69c7      	ldr	r7, [r0, #28]
 800d44e:	b099      	sub	sp, #100	@ 0x64
 800d450:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d454:	ec55 4b10 	vmov	r4, r5, d0
 800d458:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d45a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d45c:	4683      	mov	fp, r0
 800d45e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d460:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d462:	b97f      	cbnz	r7, 800d484 <_dtoa_r+0x3c>
 800d464:	2010      	movs	r0, #16
 800d466:	f000 fdfd 	bl	800e064 <malloc>
 800d46a:	4602      	mov	r2, r0
 800d46c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d470:	b920      	cbnz	r0, 800d47c <_dtoa_r+0x34>
 800d472:	4ba7      	ldr	r3, [pc, #668]	@ (800d710 <_dtoa_r+0x2c8>)
 800d474:	21ef      	movs	r1, #239	@ 0xef
 800d476:	48a7      	ldr	r0, [pc, #668]	@ (800d714 <_dtoa_r+0x2cc>)
 800d478:	f001 fa2a 	bl	800e8d0 <__assert_func>
 800d47c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d480:	6007      	str	r7, [r0, #0]
 800d482:	60c7      	str	r7, [r0, #12]
 800d484:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d488:	6819      	ldr	r1, [r3, #0]
 800d48a:	b159      	cbz	r1, 800d4a4 <_dtoa_r+0x5c>
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	604a      	str	r2, [r1, #4]
 800d490:	2301      	movs	r3, #1
 800d492:	4093      	lsls	r3, r2
 800d494:	608b      	str	r3, [r1, #8]
 800d496:	4658      	mov	r0, fp
 800d498:	f000 fe2c 	bl	800e0f4 <_Bfree>
 800d49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	1e2b      	subs	r3, r5, #0
 800d4a6:	bfb9      	ittee	lt
 800d4a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4ac:	9303      	strlt	r3, [sp, #12]
 800d4ae:	2300      	movge	r3, #0
 800d4b0:	6033      	strge	r3, [r6, #0]
 800d4b2:	9f03      	ldr	r7, [sp, #12]
 800d4b4:	4b98      	ldr	r3, [pc, #608]	@ (800d718 <_dtoa_r+0x2d0>)
 800d4b6:	bfbc      	itt	lt
 800d4b8:	2201      	movlt	r2, #1
 800d4ba:	6032      	strlt	r2, [r6, #0]
 800d4bc:	43bb      	bics	r3, r7
 800d4be:	d112      	bne.n	800d4e6 <_dtoa_r+0x9e>
 800d4c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4cc:	4323      	orrs	r3, r4
 800d4ce:	f000 854d 	beq.w	800df6c <_dtoa_r+0xb24>
 800d4d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d72c <_dtoa_r+0x2e4>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 854f 	beq.w	800df7c <_dtoa_r+0xb34>
 800d4de:	f10a 0303 	add.w	r3, sl, #3
 800d4e2:	f000 bd49 	b.w	800df78 <_dtoa_r+0xb30>
 800d4e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	ec51 0b17 	vmov	r0, r1, d7
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d4f6:	f7f3 fb07 	bl	8000b08 <__aeabi_dcmpeq>
 800d4fa:	4680      	mov	r8, r0
 800d4fc:	b158      	cbz	r0, 800d516 <_dtoa_r+0xce>
 800d4fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d500:	2301      	movs	r3, #1
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d506:	b113      	cbz	r3, 800d50e <_dtoa_r+0xc6>
 800d508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d50a:	4b84      	ldr	r3, [pc, #528]	@ (800d71c <_dtoa_r+0x2d4>)
 800d50c:	6013      	str	r3, [r2, #0]
 800d50e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d730 <_dtoa_r+0x2e8>
 800d512:	f000 bd33 	b.w	800df7c <_dtoa_r+0xb34>
 800d516:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d51a:	aa16      	add	r2, sp, #88	@ 0x58
 800d51c:	a917      	add	r1, sp, #92	@ 0x5c
 800d51e:	4658      	mov	r0, fp
 800d520:	f001 f8d2 	bl	800e6c8 <__d2b>
 800d524:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d528:	4681      	mov	r9, r0
 800d52a:	2e00      	cmp	r6, #0
 800d52c:	d077      	beq.n	800d61e <_dtoa_r+0x1d6>
 800d52e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d530:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d53c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d540:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d544:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d548:	4619      	mov	r1, r3
 800d54a:	2200      	movs	r2, #0
 800d54c:	4b74      	ldr	r3, [pc, #464]	@ (800d720 <_dtoa_r+0x2d8>)
 800d54e:	f7f2 febb 	bl	80002c8 <__aeabi_dsub>
 800d552:	a369      	add	r3, pc, #420	@ (adr r3, 800d6f8 <_dtoa_r+0x2b0>)
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	f7f3 f86e 	bl	8000638 <__aeabi_dmul>
 800d55c:	a368      	add	r3, pc, #416	@ (adr r3, 800d700 <_dtoa_r+0x2b8>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 feb3 	bl	80002cc <__adddf3>
 800d566:	4604      	mov	r4, r0
 800d568:	4630      	mov	r0, r6
 800d56a:	460d      	mov	r5, r1
 800d56c:	f7f2 fffa 	bl	8000564 <__aeabi_i2d>
 800d570:	a365      	add	r3, pc, #404	@ (adr r3, 800d708 <_dtoa_r+0x2c0>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	f7f3 f85f 	bl	8000638 <__aeabi_dmul>
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4620      	mov	r0, r4
 800d580:	4629      	mov	r1, r5
 800d582:	f7f2 fea3 	bl	80002cc <__adddf3>
 800d586:	4604      	mov	r4, r0
 800d588:	460d      	mov	r5, r1
 800d58a:	f7f3 fb05 	bl	8000b98 <__aeabi_d2iz>
 800d58e:	2200      	movs	r2, #0
 800d590:	4607      	mov	r7, r0
 800d592:	2300      	movs	r3, #0
 800d594:	4620      	mov	r0, r4
 800d596:	4629      	mov	r1, r5
 800d598:	f7f3 fac0 	bl	8000b1c <__aeabi_dcmplt>
 800d59c:	b140      	cbz	r0, 800d5b0 <_dtoa_r+0x168>
 800d59e:	4638      	mov	r0, r7
 800d5a0:	f7f2 ffe0 	bl	8000564 <__aeabi_i2d>
 800d5a4:	4622      	mov	r2, r4
 800d5a6:	462b      	mov	r3, r5
 800d5a8:	f7f3 faae 	bl	8000b08 <__aeabi_dcmpeq>
 800d5ac:	b900      	cbnz	r0, 800d5b0 <_dtoa_r+0x168>
 800d5ae:	3f01      	subs	r7, #1
 800d5b0:	2f16      	cmp	r7, #22
 800d5b2:	d851      	bhi.n	800d658 <_dtoa_r+0x210>
 800d5b4:	4b5b      	ldr	r3, [pc, #364]	@ (800d724 <_dtoa_r+0x2dc>)
 800d5b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5c2:	f7f3 faab 	bl	8000b1c <__aeabi_dcmplt>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d048      	beq.n	800d65c <_dtoa_r+0x214>
 800d5ca:	3f01      	subs	r7, #1
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d5d2:	1b9b      	subs	r3, r3, r6
 800d5d4:	1e5a      	subs	r2, r3, #1
 800d5d6:	bf44      	itt	mi
 800d5d8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d5dc:	2300      	movmi	r3, #0
 800d5de:	9208      	str	r2, [sp, #32]
 800d5e0:	bf54      	ite	pl
 800d5e2:	f04f 0800 	movpl.w	r8, #0
 800d5e6:	9308      	strmi	r3, [sp, #32]
 800d5e8:	2f00      	cmp	r7, #0
 800d5ea:	db39      	blt.n	800d660 <_dtoa_r+0x218>
 800d5ec:	9b08      	ldr	r3, [sp, #32]
 800d5ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d5f0:	443b      	add	r3, r7
 800d5f2:	9308      	str	r3, [sp, #32]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5fa:	2b09      	cmp	r3, #9
 800d5fc:	d864      	bhi.n	800d6c8 <_dtoa_r+0x280>
 800d5fe:	2b05      	cmp	r3, #5
 800d600:	bfc4      	itt	gt
 800d602:	3b04      	subgt	r3, #4
 800d604:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d608:	f1a3 0302 	sub.w	r3, r3, #2
 800d60c:	bfcc      	ite	gt
 800d60e:	2400      	movgt	r4, #0
 800d610:	2401      	movle	r4, #1
 800d612:	2b03      	cmp	r3, #3
 800d614:	d863      	bhi.n	800d6de <_dtoa_r+0x296>
 800d616:	e8df f003 	tbb	[pc, r3]
 800d61a:	372a      	.short	0x372a
 800d61c:	5535      	.short	0x5535
 800d61e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d622:	441e      	add	r6, r3
 800d624:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d628:	2b20      	cmp	r3, #32
 800d62a:	bfc1      	itttt	gt
 800d62c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d630:	409f      	lslgt	r7, r3
 800d632:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d636:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d63a:	bfd6      	itet	le
 800d63c:	f1c3 0320 	rsble	r3, r3, #32
 800d640:	ea47 0003 	orrgt.w	r0, r7, r3
 800d644:	fa04 f003 	lslle.w	r0, r4, r3
 800d648:	f7f2 ff7c 	bl	8000544 <__aeabi_ui2d>
 800d64c:	2201      	movs	r2, #1
 800d64e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d652:	3e01      	subs	r6, #1
 800d654:	9214      	str	r2, [sp, #80]	@ 0x50
 800d656:	e777      	b.n	800d548 <_dtoa_r+0x100>
 800d658:	2301      	movs	r3, #1
 800d65a:	e7b8      	b.n	800d5ce <_dtoa_r+0x186>
 800d65c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d65e:	e7b7      	b.n	800d5d0 <_dtoa_r+0x188>
 800d660:	427b      	negs	r3, r7
 800d662:	930a      	str	r3, [sp, #40]	@ 0x28
 800d664:	2300      	movs	r3, #0
 800d666:	eba8 0807 	sub.w	r8, r8, r7
 800d66a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d66c:	e7c4      	b.n	800d5f8 <_dtoa_r+0x1b0>
 800d66e:	2300      	movs	r3, #0
 800d670:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d674:	2b00      	cmp	r3, #0
 800d676:	dc35      	bgt.n	800d6e4 <_dtoa_r+0x29c>
 800d678:	2301      	movs	r3, #1
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	9307      	str	r3, [sp, #28]
 800d67e:	461a      	mov	r2, r3
 800d680:	920e      	str	r2, [sp, #56]	@ 0x38
 800d682:	e00b      	b.n	800d69c <_dtoa_r+0x254>
 800d684:	2301      	movs	r3, #1
 800d686:	e7f3      	b.n	800d670 <_dtoa_r+0x228>
 800d688:	2300      	movs	r3, #0
 800d68a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d68e:	18fb      	adds	r3, r7, r3
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	3301      	adds	r3, #1
 800d694:	2b01      	cmp	r3, #1
 800d696:	9307      	str	r3, [sp, #28]
 800d698:	bfb8      	it	lt
 800d69a:	2301      	movlt	r3, #1
 800d69c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	f102 0514 	add.w	r5, r2, #20
 800d6a8:	429d      	cmp	r5, r3
 800d6aa:	d91f      	bls.n	800d6ec <_dtoa_r+0x2a4>
 800d6ac:	6041      	str	r1, [r0, #4]
 800d6ae:	4658      	mov	r0, fp
 800d6b0:	f000 fce0 	bl	800e074 <_Balloc>
 800d6b4:	4682      	mov	sl, r0
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d13c      	bne.n	800d734 <_dtoa_r+0x2ec>
 800d6ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d728 <_dtoa_r+0x2e0>)
 800d6bc:	4602      	mov	r2, r0
 800d6be:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6c2:	e6d8      	b.n	800d476 <_dtoa_r+0x2e>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e7e0      	b.n	800d68a <_dtoa_r+0x242>
 800d6c8:	2401      	movs	r4, #1
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	9307      	str	r3, [sp, #28]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2312      	movs	r3, #18
 800d6dc:	e7d0      	b.n	800d680 <_dtoa_r+0x238>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6e2:	e7f5      	b.n	800d6d0 <_dtoa_r+0x288>
 800d6e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	9307      	str	r3, [sp, #28]
 800d6ea:	e7d7      	b.n	800d69c <_dtoa_r+0x254>
 800d6ec:	3101      	adds	r1, #1
 800d6ee:	0052      	lsls	r2, r2, #1
 800d6f0:	e7d8      	b.n	800d6a4 <_dtoa_r+0x25c>
 800d6f2:	bf00      	nop
 800d6f4:	f3af 8000 	nop.w
 800d6f8:	636f4361 	.word	0x636f4361
 800d6fc:	3fd287a7 	.word	0x3fd287a7
 800d700:	8b60c8b3 	.word	0x8b60c8b3
 800d704:	3fc68a28 	.word	0x3fc68a28
 800d708:	509f79fb 	.word	0x509f79fb
 800d70c:	3fd34413 	.word	0x3fd34413
 800d710:	080116a1 	.word	0x080116a1
 800d714:	080116b8 	.word	0x080116b8
 800d718:	7ff00000 	.word	0x7ff00000
 800d71c:	08011671 	.word	0x08011671
 800d720:	3ff80000 	.word	0x3ff80000
 800d724:	080117b0 	.word	0x080117b0
 800d728:	08011710 	.word	0x08011710
 800d72c:	0801169d 	.word	0x0801169d
 800d730:	08011670 	.word	0x08011670
 800d734:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d738:	6018      	str	r0, [r3, #0]
 800d73a:	9b07      	ldr	r3, [sp, #28]
 800d73c:	2b0e      	cmp	r3, #14
 800d73e:	f200 80a4 	bhi.w	800d88a <_dtoa_r+0x442>
 800d742:	2c00      	cmp	r4, #0
 800d744:	f000 80a1 	beq.w	800d88a <_dtoa_r+0x442>
 800d748:	2f00      	cmp	r7, #0
 800d74a:	dd33      	ble.n	800d7b4 <_dtoa_r+0x36c>
 800d74c:	4bad      	ldr	r3, [pc, #692]	@ (800da04 <_dtoa_r+0x5bc>)
 800d74e:	f007 020f 	and.w	r2, r7, #15
 800d752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d756:	ed93 7b00 	vldr	d7, [r3]
 800d75a:	05f8      	lsls	r0, r7, #23
 800d75c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d760:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d764:	d516      	bpl.n	800d794 <_dtoa_r+0x34c>
 800d766:	4ba8      	ldr	r3, [pc, #672]	@ (800da08 <_dtoa_r+0x5c0>)
 800d768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d76c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d770:	f7f3 f88c 	bl	800088c <__aeabi_ddiv>
 800d774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d778:	f004 040f 	and.w	r4, r4, #15
 800d77c:	2603      	movs	r6, #3
 800d77e:	4da2      	ldr	r5, [pc, #648]	@ (800da08 <_dtoa_r+0x5c0>)
 800d780:	b954      	cbnz	r4, 800d798 <_dtoa_r+0x350>
 800d782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d78a:	f7f3 f87f 	bl	800088c <__aeabi_ddiv>
 800d78e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d792:	e028      	b.n	800d7e6 <_dtoa_r+0x39e>
 800d794:	2602      	movs	r6, #2
 800d796:	e7f2      	b.n	800d77e <_dtoa_r+0x336>
 800d798:	07e1      	lsls	r1, r4, #31
 800d79a:	d508      	bpl.n	800d7ae <_dtoa_r+0x366>
 800d79c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7a4:	f7f2 ff48 	bl	8000638 <__aeabi_dmul>
 800d7a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7ac:	3601      	adds	r6, #1
 800d7ae:	1064      	asrs	r4, r4, #1
 800d7b0:	3508      	adds	r5, #8
 800d7b2:	e7e5      	b.n	800d780 <_dtoa_r+0x338>
 800d7b4:	f000 80d2 	beq.w	800d95c <_dtoa_r+0x514>
 800d7b8:	427c      	negs	r4, r7
 800d7ba:	4b92      	ldr	r3, [pc, #584]	@ (800da04 <_dtoa_r+0x5bc>)
 800d7bc:	4d92      	ldr	r5, [pc, #584]	@ (800da08 <_dtoa_r+0x5c0>)
 800d7be:	f004 020f 	and.w	r2, r4, #15
 800d7c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7ce:	f7f2 ff33 	bl	8000638 <__aeabi_dmul>
 800d7d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7d6:	1124      	asrs	r4, r4, #4
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2602      	movs	r6, #2
 800d7dc:	2c00      	cmp	r4, #0
 800d7de:	f040 80b2 	bne.w	800d946 <_dtoa_r+0x4fe>
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1d3      	bne.n	800d78e <_dtoa_r+0x346>
 800d7e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 80b7 	beq.w	800d960 <_dtoa_r+0x518>
 800d7f2:	4b86      	ldr	r3, [pc, #536]	@ (800da0c <_dtoa_r+0x5c4>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	f7f3 f98f 	bl	8000b1c <__aeabi_dcmplt>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f000 80ae 	beq.w	800d960 <_dtoa_r+0x518>
 800d804:	9b07      	ldr	r3, [sp, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 80aa 	beq.w	800d960 <_dtoa_r+0x518>
 800d80c:	9b00      	ldr	r3, [sp, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	dd37      	ble.n	800d882 <_dtoa_r+0x43a>
 800d812:	1e7b      	subs	r3, r7, #1
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	4620      	mov	r0, r4
 800d818:	4b7d      	ldr	r3, [pc, #500]	@ (800da10 <_dtoa_r+0x5c8>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	4629      	mov	r1, r5
 800d81e:	f7f2 ff0b 	bl	8000638 <__aeabi_dmul>
 800d822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d826:	9c00      	ldr	r4, [sp, #0]
 800d828:	3601      	adds	r6, #1
 800d82a:	4630      	mov	r0, r6
 800d82c:	f7f2 fe9a 	bl	8000564 <__aeabi_i2d>
 800d830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d834:	f7f2 ff00 	bl	8000638 <__aeabi_dmul>
 800d838:	4b76      	ldr	r3, [pc, #472]	@ (800da14 <_dtoa_r+0x5cc>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	f7f2 fd46 	bl	80002cc <__adddf3>
 800d840:	4605      	mov	r5, r0
 800d842:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d846:	2c00      	cmp	r4, #0
 800d848:	f040 808d 	bne.w	800d966 <_dtoa_r+0x51e>
 800d84c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d850:	4b71      	ldr	r3, [pc, #452]	@ (800da18 <_dtoa_r+0x5d0>)
 800d852:	2200      	movs	r2, #0
 800d854:	f7f2 fd38 	bl	80002c8 <__aeabi_dsub>
 800d858:	4602      	mov	r2, r0
 800d85a:	460b      	mov	r3, r1
 800d85c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d860:	462a      	mov	r2, r5
 800d862:	4633      	mov	r3, r6
 800d864:	f7f3 f978 	bl	8000b58 <__aeabi_dcmpgt>
 800d868:	2800      	cmp	r0, #0
 800d86a:	f040 828b 	bne.w	800dd84 <_dtoa_r+0x93c>
 800d86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d872:	462a      	mov	r2, r5
 800d874:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d878:	f7f3 f950 	bl	8000b1c <__aeabi_dcmplt>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	f040 8128 	bne.w	800dad2 <_dtoa_r+0x68a>
 800d882:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d886:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d88a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f2c0 815a 	blt.w	800db46 <_dtoa_r+0x6fe>
 800d892:	2f0e      	cmp	r7, #14
 800d894:	f300 8157 	bgt.w	800db46 <_dtoa_r+0x6fe>
 800d898:	4b5a      	ldr	r3, [pc, #360]	@ (800da04 <_dtoa_r+0x5bc>)
 800d89a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d89e:	ed93 7b00 	vldr	d7, [r3]
 800d8a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	ed8d 7b00 	vstr	d7, [sp]
 800d8aa:	da03      	bge.n	800d8b4 <_dtoa_r+0x46c>
 800d8ac:	9b07      	ldr	r3, [sp, #28]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f340 8101 	ble.w	800dab6 <_dtoa_r+0x66e>
 800d8b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8b8:	4656      	mov	r6, sl
 800d8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8be:	4620      	mov	r0, r4
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7f2 ffe3 	bl	800088c <__aeabi_ddiv>
 800d8c6:	f7f3 f967 	bl	8000b98 <__aeabi_d2iz>
 800d8ca:	4680      	mov	r8, r0
 800d8cc:	f7f2 fe4a 	bl	8000564 <__aeabi_i2d>
 800d8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d4:	f7f2 feb0 	bl	8000638 <__aeabi_dmul>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4620      	mov	r0, r4
 800d8de:	4629      	mov	r1, r5
 800d8e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d8e4:	f7f2 fcf0 	bl	80002c8 <__aeabi_dsub>
 800d8e8:	f806 4b01 	strb.w	r4, [r6], #1
 800d8ec:	9d07      	ldr	r5, [sp, #28]
 800d8ee:	eba6 040a 	sub.w	r4, r6, sl
 800d8f2:	42a5      	cmp	r5, r4
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	f040 8117 	bne.w	800db2a <_dtoa_r+0x6e2>
 800d8fc:	f7f2 fce6 	bl	80002cc <__adddf3>
 800d900:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d904:	4604      	mov	r4, r0
 800d906:	460d      	mov	r5, r1
 800d908:	f7f3 f926 	bl	8000b58 <__aeabi_dcmpgt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f040 80f9 	bne.w	800db04 <_dtoa_r+0x6bc>
 800d912:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d916:	4620      	mov	r0, r4
 800d918:	4629      	mov	r1, r5
 800d91a:	f7f3 f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800d91e:	b118      	cbz	r0, 800d928 <_dtoa_r+0x4e0>
 800d920:	f018 0f01 	tst.w	r8, #1
 800d924:	f040 80ee 	bne.w	800db04 <_dtoa_r+0x6bc>
 800d928:	4649      	mov	r1, r9
 800d92a:	4658      	mov	r0, fp
 800d92c:	f000 fbe2 	bl	800e0f4 <_Bfree>
 800d930:	2300      	movs	r3, #0
 800d932:	7033      	strb	r3, [r6, #0]
 800d934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d936:	3701      	adds	r7, #1
 800d938:	601f      	str	r7, [r3, #0]
 800d93a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f000 831d 	beq.w	800df7c <_dtoa_r+0xb34>
 800d942:	601e      	str	r6, [r3, #0]
 800d944:	e31a      	b.n	800df7c <_dtoa_r+0xb34>
 800d946:	07e2      	lsls	r2, r4, #31
 800d948:	d505      	bpl.n	800d956 <_dtoa_r+0x50e>
 800d94a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d94e:	f7f2 fe73 	bl	8000638 <__aeabi_dmul>
 800d952:	3601      	adds	r6, #1
 800d954:	2301      	movs	r3, #1
 800d956:	1064      	asrs	r4, r4, #1
 800d958:	3508      	adds	r5, #8
 800d95a:	e73f      	b.n	800d7dc <_dtoa_r+0x394>
 800d95c:	2602      	movs	r6, #2
 800d95e:	e742      	b.n	800d7e6 <_dtoa_r+0x39e>
 800d960:	9c07      	ldr	r4, [sp, #28]
 800d962:	9704      	str	r7, [sp, #16]
 800d964:	e761      	b.n	800d82a <_dtoa_r+0x3e2>
 800d966:	4b27      	ldr	r3, [pc, #156]	@ (800da04 <_dtoa_r+0x5bc>)
 800d968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d96a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d96e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d972:	4454      	add	r4, sl
 800d974:	2900      	cmp	r1, #0
 800d976:	d053      	beq.n	800da20 <_dtoa_r+0x5d8>
 800d978:	4928      	ldr	r1, [pc, #160]	@ (800da1c <_dtoa_r+0x5d4>)
 800d97a:	2000      	movs	r0, #0
 800d97c:	f7f2 ff86 	bl	800088c <__aeabi_ddiv>
 800d980:	4633      	mov	r3, r6
 800d982:	462a      	mov	r2, r5
 800d984:	f7f2 fca0 	bl	80002c8 <__aeabi_dsub>
 800d988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d98c:	4656      	mov	r6, sl
 800d98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d992:	f7f3 f901 	bl	8000b98 <__aeabi_d2iz>
 800d996:	4605      	mov	r5, r0
 800d998:	f7f2 fde4 	bl	8000564 <__aeabi_i2d>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9a4:	f7f2 fc90 	bl	80002c8 <__aeabi_dsub>
 800d9a8:	3530      	adds	r5, #48	@ 0x30
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9b2:	f806 5b01 	strb.w	r5, [r6], #1
 800d9b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9ba:	f7f3 f8af 	bl	8000b1c <__aeabi_dcmplt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d171      	bne.n	800daa6 <_dtoa_r+0x65e>
 800d9c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9c6:	4911      	ldr	r1, [pc, #68]	@ (800da0c <_dtoa_r+0x5c4>)
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f7f2 fc7d 	bl	80002c8 <__aeabi_dsub>
 800d9ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9d2:	f7f3 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	f040 8095 	bne.w	800db06 <_dtoa_r+0x6be>
 800d9dc:	42a6      	cmp	r6, r4
 800d9de:	f43f af50 	beq.w	800d882 <_dtoa_r+0x43a>
 800d9e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800da10 <_dtoa_r+0x5c8>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f7f2 fe25 	bl	8000638 <__aeabi_dmul>
 800d9ee:	4b08      	ldr	r3, [pc, #32]	@ (800da10 <_dtoa_r+0x5c8>)
 800d9f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9fa:	f7f2 fe1d 	bl	8000638 <__aeabi_dmul>
 800d9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da02:	e7c4      	b.n	800d98e <_dtoa_r+0x546>
 800da04:	080117b0 	.word	0x080117b0
 800da08:	08011788 	.word	0x08011788
 800da0c:	3ff00000 	.word	0x3ff00000
 800da10:	40240000 	.word	0x40240000
 800da14:	401c0000 	.word	0x401c0000
 800da18:	40140000 	.word	0x40140000
 800da1c:	3fe00000 	.word	0x3fe00000
 800da20:	4631      	mov	r1, r6
 800da22:	4628      	mov	r0, r5
 800da24:	f7f2 fe08 	bl	8000638 <__aeabi_dmul>
 800da28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da2c:	9415      	str	r4, [sp, #84]	@ 0x54
 800da2e:	4656      	mov	r6, sl
 800da30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da34:	f7f3 f8b0 	bl	8000b98 <__aeabi_d2iz>
 800da38:	4605      	mov	r5, r0
 800da3a:	f7f2 fd93 	bl	8000564 <__aeabi_i2d>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da46:	f7f2 fc3f 	bl	80002c8 <__aeabi_dsub>
 800da4a:	3530      	adds	r5, #48	@ 0x30
 800da4c:	f806 5b01 	strb.w	r5, [r6], #1
 800da50:	4602      	mov	r2, r0
 800da52:	460b      	mov	r3, r1
 800da54:	42a6      	cmp	r6, r4
 800da56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da5a:	f04f 0200 	mov.w	r2, #0
 800da5e:	d124      	bne.n	800daaa <_dtoa_r+0x662>
 800da60:	4bac      	ldr	r3, [pc, #688]	@ (800dd14 <_dtoa_r+0x8cc>)
 800da62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da66:	f7f2 fc31 	bl	80002cc <__adddf3>
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da72:	f7f3 f871 	bl	8000b58 <__aeabi_dcmpgt>
 800da76:	2800      	cmp	r0, #0
 800da78:	d145      	bne.n	800db06 <_dtoa_r+0x6be>
 800da7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da7e:	49a5      	ldr	r1, [pc, #660]	@ (800dd14 <_dtoa_r+0x8cc>)
 800da80:	2000      	movs	r0, #0
 800da82:	f7f2 fc21 	bl	80002c8 <__aeabi_dsub>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da8e:	f7f3 f845 	bl	8000b1c <__aeabi_dcmplt>
 800da92:	2800      	cmp	r0, #0
 800da94:	f43f aef5 	beq.w	800d882 <_dtoa_r+0x43a>
 800da98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800da9a:	1e73      	subs	r3, r6, #1
 800da9c:	9315      	str	r3, [sp, #84]	@ 0x54
 800da9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daa2:	2b30      	cmp	r3, #48	@ 0x30
 800daa4:	d0f8      	beq.n	800da98 <_dtoa_r+0x650>
 800daa6:	9f04      	ldr	r7, [sp, #16]
 800daa8:	e73e      	b.n	800d928 <_dtoa_r+0x4e0>
 800daaa:	4b9b      	ldr	r3, [pc, #620]	@ (800dd18 <_dtoa_r+0x8d0>)
 800daac:	f7f2 fdc4 	bl	8000638 <__aeabi_dmul>
 800dab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dab4:	e7bc      	b.n	800da30 <_dtoa_r+0x5e8>
 800dab6:	d10c      	bne.n	800dad2 <_dtoa_r+0x68a>
 800dab8:	4b98      	ldr	r3, [pc, #608]	@ (800dd1c <_dtoa_r+0x8d4>)
 800daba:	2200      	movs	r2, #0
 800dabc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dac0:	f7f2 fdba 	bl	8000638 <__aeabi_dmul>
 800dac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dac8:	f7f3 f83c 	bl	8000b44 <__aeabi_dcmpge>
 800dacc:	2800      	cmp	r0, #0
 800dace:	f000 8157 	beq.w	800dd80 <_dtoa_r+0x938>
 800dad2:	2400      	movs	r4, #0
 800dad4:	4625      	mov	r5, r4
 800dad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dad8:	43db      	mvns	r3, r3
 800dada:	9304      	str	r3, [sp, #16]
 800dadc:	4656      	mov	r6, sl
 800dade:	2700      	movs	r7, #0
 800dae0:	4621      	mov	r1, r4
 800dae2:	4658      	mov	r0, fp
 800dae4:	f000 fb06 	bl	800e0f4 <_Bfree>
 800dae8:	2d00      	cmp	r5, #0
 800daea:	d0dc      	beq.n	800daa6 <_dtoa_r+0x65e>
 800daec:	b12f      	cbz	r7, 800dafa <_dtoa_r+0x6b2>
 800daee:	42af      	cmp	r7, r5
 800daf0:	d003      	beq.n	800dafa <_dtoa_r+0x6b2>
 800daf2:	4639      	mov	r1, r7
 800daf4:	4658      	mov	r0, fp
 800daf6:	f000 fafd 	bl	800e0f4 <_Bfree>
 800dafa:	4629      	mov	r1, r5
 800dafc:	4658      	mov	r0, fp
 800dafe:	f000 faf9 	bl	800e0f4 <_Bfree>
 800db02:	e7d0      	b.n	800daa6 <_dtoa_r+0x65e>
 800db04:	9704      	str	r7, [sp, #16]
 800db06:	4633      	mov	r3, r6
 800db08:	461e      	mov	r6, r3
 800db0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db0e:	2a39      	cmp	r2, #57	@ 0x39
 800db10:	d107      	bne.n	800db22 <_dtoa_r+0x6da>
 800db12:	459a      	cmp	sl, r3
 800db14:	d1f8      	bne.n	800db08 <_dtoa_r+0x6c0>
 800db16:	9a04      	ldr	r2, [sp, #16]
 800db18:	3201      	adds	r2, #1
 800db1a:	9204      	str	r2, [sp, #16]
 800db1c:	2230      	movs	r2, #48	@ 0x30
 800db1e:	f88a 2000 	strb.w	r2, [sl]
 800db22:	781a      	ldrb	r2, [r3, #0]
 800db24:	3201      	adds	r2, #1
 800db26:	701a      	strb	r2, [r3, #0]
 800db28:	e7bd      	b.n	800daa6 <_dtoa_r+0x65e>
 800db2a:	4b7b      	ldr	r3, [pc, #492]	@ (800dd18 <_dtoa_r+0x8d0>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	f7f2 fd83 	bl	8000638 <__aeabi_dmul>
 800db32:	2200      	movs	r2, #0
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	460d      	mov	r5, r1
 800db3a:	f7f2 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f43f aebb 	beq.w	800d8ba <_dtoa_r+0x472>
 800db44:	e6f0      	b.n	800d928 <_dtoa_r+0x4e0>
 800db46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db48:	2a00      	cmp	r2, #0
 800db4a:	f000 80db 	beq.w	800dd04 <_dtoa_r+0x8bc>
 800db4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db50:	2a01      	cmp	r2, #1
 800db52:	f300 80bf 	bgt.w	800dcd4 <_dtoa_r+0x88c>
 800db56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db58:	2a00      	cmp	r2, #0
 800db5a:	f000 80b7 	beq.w	800dccc <_dtoa_r+0x884>
 800db5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db64:	4646      	mov	r6, r8
 800db66:	9a08      	ldr	r2, [sp, #32]
 800db68:	2101      	movs	r1, #1
 800db6a:	441a      	add	r2, r3
 800db6c:	4658      	mov	r0, fp
 800db6e:	4498      	add	r8, r3
 800db70:	9208      	str	r2, [sp, #32]
 800db72:	f000 fb73 	bl	800e25c <__i2b>
 800db76:	4605      	mov	r5, r0
 800db78:	b15e      	cbz	r6, 800db92 <_dtoa_r+0x74a>
 800db7a:	9b08      	ldr	r3, [sp, #32]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd08      	ble.n	800db92 <_dtoa_r+0x74a>
 800db80:	42b3      	cmp	r3, r6
 800db82:	9a08      	ldr	r2, [sp, #32]
 800db84:	bfa8      	it	ge
 800db86:	4633      	movge	r3, r6
 800db88:	eba8 0803 	sub.w	r8, r8, r3
 800db8c:	1af6      	subs	r6, r6, r3
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	9308      	str	r3, [sp, #32]
 800db92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db94:	b1f3      	cbz	r3, 800dbd4 <_dtoa_r+0x78c>
 800db96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f000 80b7 	beq.w	800dd0c <_dtoa_r+0x8c4>
 800db9e:	b18c      	cbz	r4, 800dbc4 <_dtoa_r+0x77c>
 800dba0:	4629      	mov	r1, r5
 800dba2:	4622      	mov	r2, r4
 800dba4:	4658      	mov	r0, fp
 800dba6:	f000 fc19 	bl	800e3dc <__pow5mult>
 800dbaa:	464a      	mov	r2, r9
 800dbac:	4601      	mov	r1, r0
 800dbae:	4605      	mov	r5, r0
 800dbb0:	4658      	mov	r0, fp
 800dbb2:	f000 fb69 	bl	800e288 <__multiply>
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	9004      	str	r0, [sp, #16]
 800dbba:	4658      	mov	r0, fp
 800dbbc:	f000 fa9a 	bl	800e0f4 <_Bfree>
 800dbc0:	9b04      	ldr	r3, [sp, #16]
 800dbc2:	4699      	mov	r9, r3
 800dbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbc6:	1b1a      	subs	r2, r3, r4
 800dbc8:	d004      	beq.n	800dbd4 <_dtoa_r+0x78c>
 800dbca:	4649      	mov	r1, r9
 800dbcc:	4658      	mov	r0, fp
 800dbce:	f000 fc05 	bl	800e3dc <__pow5mult>
 800dbd2:	4681      	mov	r9, r0
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	f000 fb40 	bl	800e25c <__i2b>
 800dbdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbde:	4604      	mov	r4, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 81cf 	beq.w	800df84 <_dtoa_r+0xb3c>
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	4601      	mov	r1, r0
 800dbea:	4658      	mov	r0, fp
 800dbec:	f000 fbf6 	bl	800e3dc <__pow5mult>
 800dbf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	f300 8095 	bgt.w	800dd24 <_dtoa_r+0x8dc>
 800dbfa:	9b02      	ldr	r3, [sp, #8]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f040 8087 	bne.w	800dd10 <_dtoa_r+0x8c8>
 800dc02:	9b03      	ldr	r3, [sp, #12]
 800dc04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f040 8089 	bne.w	800dd20 <_dtoa_r+0x8d8>
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc14:	0d1b      	lsrs	r3, r3, #20
 800dc16:	051b      	lsls	r3, r3, #20
 800dc18:	b12b      	cbz	r3, 800dc26 <_dtoa_r+0x7de>
 800dc1a:	9b08      	ldr	r3, [sp, #32]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	9308      	str	r3, [sp, #32]
 800dc20:	f108 0801 	add.w	r8, r8, #1
 800dc24:	2301      	movs	r3, #1
 800dc26:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f000 81b0 	beq.w	800df90 <_dtoa_r+0xb48>
 800dc30:	6923      	ldr	r3, [r4, #16]
 800dc32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc36:	6918      	ldr	r0, [r3, #16]
 800dc38:	f000 fac4 	bl	800e1c4 <__hi0bits>
 800dc3c:	f1c0 0020 	rsb	r0, r0, #32
 800dc40:	9b08      	ldr	r3, [sp, #32]
 800dc42:	4418      	add	r0, r3
 800dc44:	f010 001f 	ands.w	r0, r0, #31
 800dc48:	d077      	beq.n	800dd3a <_dtoa_r+0x8f2>
 800dc4a:	f1c0 0320 	rsb	r3, r0, #32
 800dc4e:	2b04      	cmp	r3, #4
 800dc50:	dd6b      	ble.n	800dd2a <_dtoa_r+0x8e2>
 800dc52:	9b08      	ldr	r3, [sp, #32]
 800dc54:	f1c0 001c 	rsb	r0, r0, #28
 800dc58:	4403      	add	r3, r0
 800dc5a:	4480      	add	r8, r0
 800dc5c:	4406      	add	r6, r0
 800dc5e:	9308      	str	r3, [sp, #32]
 800dc60:	f1b8 0f00 	cmp.w	r8, #0
 800dc64:	dd05      	ble.n	800dc72 <_dtoa_r+0x82a>
 800dc66:	4649      	mov	r1, r9
 800dc68:	4642      	mov	r2, r8
 800dc6a:	4658      	mov	r0, fp
 800dc6c:	f000 fc10 	bl	800e490 <__lshift>
 800dc70:	4681      	mov	r9, r0
 800dc72:	9b08      	ldr	r3, [sp, #32]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	dd05      	ble.n	800dc84 <_dtoa_r+0x83c>
 800dc78:	4621      	mov	r1, r4
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	4658      	mov	r0, fp
 800dc7e:	f000 fc07 	bl	800e490 <__lshift>
 800dc82:	4604      	mov	r4, r0
 800dc84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d059      	beq.n	800dd3e <_dtoa_r+0x8f6>
 800dc8a:	4621      	mov	r1, r4
 800dc8c:	4648      	mov	r0, r9
 800dc8e:	f000 fc6b 	bl	800e568 <__mcmp>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	da53      	bge.n	800dd3e <_dtoa_r+0x8f6>
 800dc96:	1e7b      	subs	r3, r7, #1
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	220a      	movs	r2, #10
 800dca0:	4658      	mov	r0, fp
 800dca2:	f000 fa49 	bl	800e138 <__multadd>
 800dca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dca8:	4681      	mov	r9, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 8172 	beq.w	800df94 <_dtoa_r+0xb4c>
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	220a      	movs	r2, #10
 800dcb6:	4658      	mov	r0, fp
 800dcb8:	f000 fa3e 	bl	800e138 <__multadd>
 800dcbc:	9b00      	ldr	r3, [sp, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	dc67      	bgt.n	800dd94 <_dtoa_r+0x94c>
 800dcc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	dc41      	bgt.n	800dd4e <_dtoa_r+0x906>
 800dcca:	e063      	b.n	800dd94 <_dtoa_r+0x94c>
 800dccc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dcce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dcd2:	e746      	b.n	800db62 <_dtoa_r+0x71a>
 800dcd4:	9b07      	ldr	r3, [sp, #28]
 800dcd6:	1e5c      	subs	r4, r3, #1
 800dcd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcda:	42a3      	cmp	r3, r4
 800dcdc:	bfbf      	itttt	lt
 800dcde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dce0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dce2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dce4:	1ae3      	sublt	r3, r4, r3
 800dce6:	bfb4      	ite	lt
 800dce8:	18d2      	addlt	r2, r2, r3
 800dcea:	1b1c      	subge	r4, r3, r4
 800dcec:	9b07      	ldr	r3, [sp, #28]
 800dcee:	bfbc      	itt	lt
 800dcf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dcf2:	2400      	movlt	r4, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	bfb5      	itete	lt
 800dcf8:	eba8 0603 	sublt.w	r6, r8, r3
 800dcfc:	9b07      	ldrge	r3, [sp, #28]
 800dcfe:	2300      	movlt	r3, #0
 800dd00:	4646      	movge	r6, r8
 800dd02:	e730      	b.n	800db66 <_dtoa_r+0x71e>
 800dd04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd08:	4646      	mov	r6, r8
 800dd0a:	e735      	b.n	800db78 <_dtoa_r+0x730>
 800dd0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd0e:	e75c      	b.n	800dbca <_dtoa_r+0x782>
 800dd10:	2300      	movs	r3, #0
 800dd12:	e788      	b.n	800dc26 <_dtoa_r+0x7de>
 800dd14:	3fe00000 	.word	0x3fe00000
 800dd18:	40240000 	.word	0x40240000
 800dd1c:	40140000 	.word	0x40140000
 800dd20:	9b02      	ldr	r3, [sp, #8]
 800dd22:	e780      	b.n	800dc26 <_dtoa_r+0x7de>
 800dd24:	2300      	movs	r3, #0
 800dd26:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd28:	e782      	b.n	800dc30 <_dtoa_r+0x7e8>
 800dd2a:	d099      	beq.n	800dc60 <_dtoa_r+0x818>
 800dd2c:	9a08      	ldr	r2, [sp, #32]
 800dd2e:	331c      	adds	r3, #28
 800dd30:	441a      	add	r2, r3
 800dd32:	4498      	add	r8, r3
 800dd34:	441e      	add	r6, r3
 800dd36:	9208      	str	r2, [sp, #32]
 800dd38:	e792      	b.n	800dc60 <_dtoa_r+0x818>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	e7f6      	b.n	800dd2c <_dtoa_r+0x8e4>
 800dd3e:	9b07      	ldr	r3, [sp, #28]
 800dd40:	9704      	str	r7, [sp, #16]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	dc20      	bgt.n	800dd88 <_dtoa_r+0x940>
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	dd1e      	ble.n	800dd8c <_dtoa_r+0x944>
 800dd4e:	9b00      	ldr	r3, [sp, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f47f aec0 	bne.w	800dad6 <_dtoa_r+0x68e>
 800dd56:	4621      	mov	r1, r4
 800dd58:	2205      	movs	r2, #5
 800dd5a:	4658      	mov	r0, fp
 800dd5c:	f000 f9ec 	bl	800e138 <__multadd>
 800dd60:	4601      	mov	r1, r0
 800dd62:	4604      	mov	r4, r0
 800dd64:	4648      	mov	r0, r9
 800dd66:	f000 fbff 	bl	800e568 <__mcmp>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	f77f aeb3 	ble.w	800dad6 <_dtoa_r+0x68e>
 800dd70:	4656      	mov	r6, sl
 800dd72:	2331      	movs	r3, #49	@ 0x31
 800dd74:	f806 3b01 	strb.w	r3, [r6], #1
 800dd78:	9b04      	ldr	r3, [sp, #16]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	9304      	str	r3, [sp, #16]
 800dd7e:	e6ae      	b.n	800dade <_dtoa_r+0x696>
 800dd80:	9c07      	ldr	r4, [sp, #28]
 800dd82:	9704      	str	r7, [sp, #16]
 800dd84:	4625      	mov	r5, r4
 800dd86:	e7f3      	b.n	800dd70 <_dtoa_r+0x928>
 800dd88:	9b07      	ldr	r3, [sp, #28]
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f000 8104 	beq.w	800df9c <_dtoa_r+0xb54>
 800dd94:	2e00      	cmp	r6, #0
 800dd96:	dd05      	ble.n	800dda4 <_dtoa_r+0x95c>
 800dd98:	4629      	mov	r1, r5
 800dd9a:	4632      	mov	r2, r6
 800dd9c:	4658      	mov	r0, fp
 800dd9e:	f000 fb77 	bl	800e490 <__lshift>
 800dda2:	4605      	mov	r5, r0
 800dda4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d05a      	beq.n	800de60 <_dtoa_r+0xa18>
 800ddaa:	6869      	ldr	r1, [r5, #4]
 800ddac:	4658      	mov	r0, fp
 800ddae:	f000 f961 	bl	800e074 <_Balloc>
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	b928      	cbnz	r0, 800ddc2 <_dtoa_r+0x97a>
 800ddb6:	4b84      	ldr	r3, [pc, #528]	@ (800dfc8 <_dtoa_r+0xb80>)
 800ddb8:	4602      	mov	r2, r0
 800ddba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ddbe:	f7ff bb5a 	b.w	800d476 <_dtoa_r+0x2e>
 800ddc2:	692a      	ldr	r2, [r5, #16]
 800ddc4:	3202      	adds	r2, #2
 800ddc6:	0092      	lsls	r2, r2, #2
 800ddc8:	f105 010c 	add.w	r1, r5, #12
 800ddcc:	300c      	adds	r0, #12
 800ddce:	f7ff faa4 	bl	800d31a <memcpy>
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	4631      	mov	r1, r6
 800ddd6:	4658      	mov	r0, fp
 800ddd8:	f000 fb5a 	bl	800e490 <__lshift>
 800dddc:	f10a 0301 	add.w	r3, sl, #1
 800dde0:	9307      	str	r3, [sp, #28]
 800dde2:	9b00      	ldr	r3, [sp, #0]
 800dde4:	4453      	add	r3, sl
 800dde6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dde8:	9b02      	ldr	r3, [sp, #8]
 800ddea:	f003 0301 	and.w	r3, r3, #1
 800ddee:	462f      	mov	r7, r5
 800ddf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	9b07      	ldr	r3, [sp, #28]
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	4648      	mov	r0, r9
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	f7ff fa9a 	bl	800d336 <quorem>
 800de02:	4639      	mov	r1, r7
 800de04:	9002      	str	r0, [sp, #8]
 800de06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de0a:	4648      	mov	r0, r9
 800de0c:	f000 fbac 	bl	800e568 <__mcmp>
 800de10:	462a      	mov	r2, r5
 800de12:	9008      	str	r0, [sp, #32]
 800de14:	4621      	mov	r1, r4
 800de16:	4658      	mov	r0, fp
 800de18:	f000 fbc2 	bl	800e5a0 <__mdiff>
 800de1c:	68c2      	ldr	r2, [r0, #12]
 800de1e:	4606      	mov	r6, r0
 800de20:	bb02      	cbnz	r2, 800de64 <_dtoa_r+0xa1c>
 800de22:	4601      	mov	r1, r0
 800de24:	4648      	mov	r0, r9
 800de26:	f000 fb9f 	bl	800e568 <__mcmp>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4631      	mov	r1, r6
 800de2e:	4658      	mov	r0, fp
 800de30:	920e      	str	r2, [sp, #56]	@ 0x38
 800de32:	f000 f95f 	bl	800e0f4 <_Bfree>
 800de36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de3a:	9e07      	ldr	r6, [sp, #28]
 800de3c:	ea43 0102 	orr.w	r1, r3, r2
 800de40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de42:	4319      	orrs	r1, r3
 800de44:	d110      	bne.n	800de68 <_dtoa_r+0xa20>
 800de46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de4a:	d029      	beq.n	800dea0 <_dtoa_r+0xa58>
 800de4c:	9b08      	ldr	r3, [sp, #32]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dd02      	ble.n	800de58 <_dtoa_r+0xa10>
 800de52:	9b02      	ldr	r3, [sp, #8]
 800de54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de58:	9b00      	ldr	r3, [sp, #0]
 800de5a:	f883 8000 	strb.w	r8, [r3]
 800de5e:	e63f      	b.n	800dae0 <_dtoa_r+0x698>
 800de60:	4628      	mov	r0, r5
 800de62:	e7bb      	b.n	800dddc <_dtoa_r+0x994>
 800de64:	2201      	movs	r2, #1
 800de66:	e7e1      	b.n	800de2c <_dtoa_r+0x9e4>
 800de68:	9b08      	ldr	r3, [sp, #32]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	db04      	blt.n	800de78 <_dtoa_r+0xa30>
 800de6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de70:	430b      	orrs	r3, r1
 800de72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de74:	430b      	orrs	r3, r1
 800de76:	d120      	bne.n	800deba <_dtoa_r+0xa72>
 800de78:	2a00      	cmp	r2, #0
 800de7a:	dded      	ble.n	800de58 <_dtoa_r+0xa10>
 800de7c:	4649      	mov	r1, r9
 800de7e:	2201      	movs	r2, #1
 800de80:	4658      	mov	r0, fp
 800de82:	f000 fb05 	bl	800e490 <__lshift>
 800de86:	4621      	mov	r1, r4
 800de88:	4681      	mov	r9, r0
 800de8a:	f000 fb6d 	bl	800e568 <__mcmp>
 800de8e:	2800      	cmp	r0, #0
 800de90:	dc03      	bgt.n	800de9a <_dtoa_r+0xa52>
 800de92:	d1e1      	bne.n	800de58 <_dtoa_r+0xa10>
 800de94:	f018 0f01 	tst.w	r8, #1
 800de98:	d0de      	beq.n	800de58 <_dtoa_r+0xa10>
 800de9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de9e:	d1d8      	bne.n	800de52 <_dtoa_r+0xa0a>
 800dea0:	9a00      	ldr	r2, [sp, #0]
 800dea2:	2339      	movs	r3, #57	@ 0x39
 800dea4:	7013      	strb	r3, [r2, #0]
 800dea6:	4633      	mov	r3, r6
 800dea8:	461e      	mov	r6, r3
 800deaa:	3b01      	subs	r3, #1
 800deac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800deb0:	2a39      	cmp	r2, #57	@ 0x39
 800deb2:	d052      	beq.n	800df5a <_dtoa_r+0xb12>
 800deb4:	3201      	adds	r2, #1
 800deb6:	701a      	strb	r2, [r3, #0]
 800deb8:	e612      	b.n	800dae0 <_dtoa_r+0x698>
 800deba:	2a00      	cmp	r2, #0
 800debc:	dd07      	ble.n	800dece <_dtoa_r+0xa86>
 800debe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dec2:	d0ed      	beq.n	800dea0 <_dtoa_r+0xa58>
 800dec4:	9a00      	ldr	r2, [sp, #0]
 800dec6:	f108 0301 	add.w	r3, r8, #1
 800deca:	7013      	strb	r3, [r2, #0]
 800decc:	e608      	b.n	800dae0 <_dtoa_r+0x698>
 800dece:	9b07      	ldr	r3, [sp, #28]
 800ded0:	9a07      	ldr	r2, [sp, #28]
 800ded2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ded6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ded8:	4293      	cmp	r3, r2
 800deda:	d028      	beq.n	800df2e <_dtoa_r+0xae6>
 800dedc:	4649      	mov	r1, r9
 800dede:	2300      	movs	r3, #0
 800dee0:	220a      	movs	r2, #10
 800dee2:	4658      	mov	r0, fp
 800dee4:	f000 f928 	bl	800e138 <__multadd>
 800dee8:	42af      	cmp	r7, r5
 800deea:	4681      	mov	r9, r0
 800deec:	f04f 0300 	mov.w	r3, #0
 800def0:	f04f 020a 	mov.w	r2, #10
 800def4:	4639      	mov	r1, r7
 800def6:	4658      	mov	r0, fp
 800def8:	d107      	bne.n	800df0a <_dtoa_r+0xac2>
 800defa:	f000 f91d 	bl	800e138 <__multadd>
 800defe:	4607      	mov	r7, r0
 800df00:	4605      	mov	r5, r0
 800df02:	9b07      	ldr	r3, [sp, #28]
 800df04:	3301      	adds	r3, #1
 800df06:	9307      	str	r3, [sp, #28]
 800df08:	e774      	b.n	800ddf4 <_dtoa_r+0x9ac>
 800df0a:	f000 f915 	bl	800e138 <__multadd>
 800df0e:	4629      	mov	r1, r5
 800df10:	4607      	mov	r7, r0
 800df12:	2300      	movs	r3, #0
 800df14:	220a      	movs	r2, #10
 800df16:	4658      	mov	r0, fp
 800df18:	f000 f90e 	bl	800e138 <__multadd>
 800df1c:	4605      	mov	r5, r0
 800df1e:	e7f0      	b.n	800df02 <_dtoa_r+0xaba>
 800df20:	9b00      	ldr	r3, [sp, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	bfcc      	ite	gt
 800df26:	461e      	movgt	r6, r3
 800df28:	2601      	movle	r6, #1
 800df2a:	4456      	add	r6, sl
 800df2c:	2700      	movs	r7, #0
 800df2e:	4649      	mov	r1, r9
 800df30:	2201      	movs	r2, #1
 800df32:	4658      	mov	r0, fp
 800df34:	f000 faac 	bl	800e490 <__lshift>
 800df38:	4621      	mov	r1, r4
 800df3a:	4681      	mov	r9, r0
 800df3c:	f000 fb14 	bl	800e568 <__mcmp>
 800df40:	2800      	cmp	r0, #0
 800df42:	dcb0      	bgt.n	800dea6 <_dtoa_r+0xa5e>
 800df44:	d102      	bne.n	800df4c <_dtoa_r+0xb04>
 800df46:	f018 0f01 	tst.w	r8, #1
 800df4a:	d1ac      	bne.n	800dea6 <_dtoa_r+0xa5e>
 800df4c:	4633      	mov	r3, r6
 800df4e:	461e      	mov	r6, r3
 800df50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df54:	2a30      	cmp	r2, #48	@ 0x30
 800df56:	d0fa      	beq.n	800df4e <_dtoa_r+0xb06>
 800df58:	e5c2      	b.n	800dae0 <_dtoa_r+0x698>
 800df5a:	459a      	cmp	sl, r3
 800df5c:	d1a4      	bne.n	800dea8 <_dtoa_r+0xa60>
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	3301      	adds	r3, #1
 800df62:	9304      	str	r3, [sp, #16]
 800df64:	2331      	movs	r3, #49	@ 0x31
 800df66:	f88a 3000 	strb.w	r3, [sl]
 800df6a:	e5b9      	b.n	800dae0 <_dtoa_r+0x698>
 800df6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dfcc <_dtoa_r+0xb84>
 800df72:	b11b      	cbz	r3, 800df7c <_dtoa_r+0xb34>
 800df74:	f10a 0308 	add.w	r3, sl, #8
 800df78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	4650      	mov	r0, sl
 800df7e:	b019      	add	sp, #100	@ 0x64
 800df80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df86:	2b01      	cmp	r3, #1
 800df88:	f77f ae37 	ble.w	800dbfa <_dtoa_r+0x7b2>
 800df8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800df90:	2001      	movs	r0, #1
 800df92:	e655      	b.n	800dc40 <_dtoa_r+0x7f8>
 800df94:	9b00      	ldr	r3, [sp, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	f77f aed6 	ble.w	800dd48 <_dtoa_r+0x900>
 800df9c:	4656      	mov	r6, sl
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4648      	mov	r0, r9
 800dfa2:	f7ff f9c8 	bl	800d336 <quorem>
 800dfa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfaa:	f806 8b01 	strb.w	r8, [r6], #1
 800dfae:	9b00      	ldr	r3, [sp, #0]
 800dfb0:	eba6 020a 	sub.w	r2, r6, sl
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	ddb3      	ble.n	800df20 <_dtoa_r+0xad8>
 800dfb8:	4649      	mov	r1, r9
 800dfba:	2300      	movs	r3, #0
 800dfbc:	220a      	movs	r2, #10
 800dfbe:	4658      	mov	r0, fp
 800dfc0:	f000 f8ba 	bl	800e138 <__multadd>
 800dfc4:	4681      	mov	r9, r0
 800dfc6:	e7ea      	b.n	800df9e <_dtoa_r+0xb56>
 800dfc8:	08011710 	.word	0x08011710
 800dfcc:	08011694 	.word	0x08011694

0800dfd0 <_free_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	2900      	cmp	r1, #0
 800dfd6:	d041      	beq.n	800e05c <_free_r+0x8c>
 800dfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfdc:	1f0c      	subs	r4, r1, #4
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	bfb8      	it	lt
 800dfe2:	18e4      	addlt	r4, r4, r3
 800dfe4:	f7fe fb90 	bl	800c708 <__malloc_lock>
 800dfe8:	4a1d      	ldr	r2, [pc, #116]	@ (800e060 <_free_r+0x90>)
 800dfea:	6813      	ldr	r3, [r2, #0]
 800dfec:	b933      	cbnz	r3, 800dffc <_free_r+0x2c>
 800dfee:	6063      	str	r3, [r4, #4]
 800dff0:	6014      	str	r4, [r2, #0]
 800dff2:	4628      	mov	r0, r5
 800dff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dff8:	f7fe bb8c 	b.w	800c714 <__malloc_unlock>
 800dffc:	42a3      	cmp	r3, r4
 800dffe:	d908      	bls.n	800e012 <_free_r+0x42>
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	1821      	adds	r1, r4, r0
 800e004:	428b      	cmp	r3, r1
 800e006:	bf01      	itttt	eq
 800e008:	6819      	ldreq	r1, [r3, #0]
 800e00a:	685b      	ldreq	r3, [r3, #4]
 800e00c:	1809      	addeq	r1, r1, r0
 800e00e:	6021      	streq	r1, [r4, #0]
 800e010:	e7ed      	b.n	800dfee <_free_r+0x1e>
 800e012:	461a      	mov	r2, r3
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	b10b      	cbz	r3, 800e01c <_free_r+0x4c>
 800e018:	42a3      	cmp	r3, r4
 800e01a:	d9fa      	bls.n	800e012 <_free_r+0x42>
 800e01c:	6811      	ldr	r1, [r2, #0]
 800e01e:	1850      	adds	r0, r2, r1
 800e020:	42a0      	cmp	r0, r4
 800e022:	d10b      	bne.n	800e03c <_free_r+0x6c>
 800e024:	6820      	ldr	r0, [r4, #0]
 800e026:	4401      	add	r1, r0
 800e028:	1850      	adds	r0, r2, r1
 800e02a:	4283      	cmp	r3, r0
 800e02c:	6011      	str	r1, [r2, #0]
 800e02e:	d1e0      	bne.n	800dff2 <_free_r+0x22>
 800e030:	6818      	ldr	r0, [r3, #0]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	6053      	str	r3, [r2, #4]
 800e036:	4408      	add	r0, r1
 800e038:	6010      	str	r0, [r2, #0]
 800e03a:	e7da      	b.n	800dff2 <_free_r+0x22>
 800e03c:	d902      	bls.n	800e044 <_free_r+0x74>
 800e03e:	230c      	movs	r3, #12
 800e040:	602b      	str	r3, [r5, #0]
 800e042:	e7d6      	b.n	800dff2 <_free_r+0x22>
 800e044:	6820      	ldr	r0, [r4, #0]
 800e046:	1821      	adds	r1, r4, r0
 800e048:	428b      	cmp	r3, r1
 800e04a:	bf04      	itt	eq
 800e04c:	6819      	ldreq	r1, [r3, #0]
 800e04e:	685b      	ldreq	r3, [r3, #4]
 800e050:	6063      	str	r3, [r4, #4]
 800e052:	bf04      	itt	eq
 800e054:	1809      	addeq	r1, r1, r0
 800e056:	6021      	streq	r1, [r4, #0]
 800e058:	6054      	str	r4, [r2, #4]
 800e05a:	e7ca      	b.n	800dff2 <_free_r+0x22>
 800e05c:	bd38      	pop	{r3, r4, r5, pc}
 800e05e:	bf00      	nop
 800e060:	20000714 	.word	0x20000714

0800e064 <malloc>:
 800e064:	4b02      	ldr	r3, [pc, #8]	@ (800e070 <malloc+0xc>)
 800e066:	4601      	mov	r1, r0
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f7fe bacd 	b.w	800c608 <_malloc_r>
 800e06e:	bf00      	nop
 800e070:	20000058 	.word	0x20000058

0800e074 <_Balloc>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	69c6      	ldr	r6, [r0, #28]
 800e078:	4604      	mov	r4, r0
 800e07a:	460d      	mov	r5, r1
 800e07c:	b976      	cbnz	r6, 800e09c <_Balloc+0x28>
 800e07e:	2010      	movs	r0, #16
 800e080:	f7ff fff0 	bl	800e064 <malloc>
 800e084:	4602      	mov	r2, r0
 800e086:	61e0      	str	r0, [r4, #28]
 800e088:	b920      	cbnz	r0, 800e094 <_Balloc+0x20>
 800e08a:	4b18      	ldr	r3, [pc, #96]	@ (800e0ec <_Balloc+0x78>)
 800e08c:	4818      	ldr	r0, [pc, #96]	@ (800e0f0 <_Balloc+0x7c>)
 800e08e:	216b      	movs	r1, #107	@ 0x6b
 800e090:	f000 fc1e 	bl	800e8d0 <__assert_func>
 800e094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e098:	6006      	str	r6, [r0, #0]
 800e09a:	60c6      	str	r6, [r0, #12]
 800e09c:	69e6      	ldr	r6, [r4, #28]
 800e09e:	68f3      	ldr	r3, [r6, #12]
 800e0a0:	b183      	cbz	r3, 800e0c4 <_Balloc+0x50>
 800e0a2:	69e3      	ldr	r3, [r4, #28]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0aa:	b9b8      	cbnz	r0, 800e0dc <_Balloc+0x68>
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	fa01 f605 	lsl.w	r6, r1, r5
 800e0b2:	1d72      	adds	r2, r6, #5
 800e0b4:	0092      	lsls	r2, r2, #2
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f7fe fa70 	bl	800c59c <_calloc_r>
 800e0bc:	b160      	cbz	r0, 800e0d8 <_Balloc+0x64>
 800e0be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0c2:	e00e      	b.n	800e0e2 <_Balloc+0x6e>
 800e0c4:	2221      	movs	r2, #33	@ 0x21
 800e0c6:	2104      	movs	r1, #4
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	f7fe fa67 	bl	800c59c <_calloc_r>
 800e0ce:	69e3      	ldr	r3, [r4, #28]
 800e0d0:	60f0      	str	r0, [r6, #12]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1e4      	bne.n	800e0a2 <_Balloc+0x2e>
 800e0d8:	2000      	movs	r0, #0
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	6802      	ldr	r2, [r0, #0]
 800e0de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0e8:	e7f7      	b.n	800e0da <_Balloc+0x66>
 800e0ea:	bf00      	nop
 800e0ec:	080116a1 	.word	0x080116a1
 800e0f0:	08011721 	.word	0x08011721

0800e0f4 <_Bfree>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	69c6      	ldr	r6, [r0, #28]
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	b976      	cbnz	r6, 800e11c <_Bfree+0x28>
 800e0fe:	2010      	movs	r0, #16
 800e100:	f7ff ffb0 	bl	800e064 <malloc>
 800e104:	4602      	mov	r2, r0
 800e106:	61e8      	str	r0, [r5, #28]
 800e108:	b920      	cbnz	r0, 800e114 <_Bfree+0x20>
 800e10a:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <_Bfree+0x3c>)
 800e10c:	4809      	ldr	r0, [pc, #36]	@ (800e134 <_Bfree+0x40>)
 800e10e:	218f      	movs	r1, #143	@ 0x8f
 800e110:	f000 fbde 	bl	800e8d0 <__assert_func>
 800e114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e118:	6006      	str	r6, [r0, #0]
 800e11a:	60c6      	str	r6, [r0, #12]
 800e11c:	b13c      	cbz	r4, 800e12e <_Bfree+0x3a>
 800e11e:	69eb      	ldr	r3, [r5, #28]
 800e120:	6862      	ldr	r2, [r4, #4]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e128:	6021      	str	r1, [r4, #0]
 800e12a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e12e:	bd70      	pop	{r4, r5, r6, pc}
 800e130:	080116a1 	.word	0x080116a1
 800e134:	08011721 	.word	0x08011721

0800e138 <__multadd>:
 800e138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e13c:	690d      	ldr	r5, [r1, #16]
 800e13e:	4607      	mov	r7, r0
 800e140:	460c      	mov	r4, r1
 800e142:	461e      	mov	r6, r3
 800e144:	f101 0c14 	add.w	ip, r1, #20
 800e148:	2000      	movs	r0, #0
 800e14a:	f8dc 3000 	ldr.w	r3, [ip]
 800e14e:	b299      	uxth	r1, r3
 800e150:	fb02 6101 	mla	r1, r2, r1, r6
 800e154:	0c1e      	lsrs	r6, r3, #16
 800e156:	0c0b      	lsrs	r3, r1, #16
 800e158:	fb02 3306 	mla	r3, r2, r6, r3
 800e15c:	b289      	uxth	r1, r1
 800e15e:	3001      	adds	r0, #1
 800e160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e164:	4285      	cmp	r5, r0
 800e166:	f84c 1b04 	str.w	r1, [ip], #4
 800e16a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e16e:	dcec      	bgt.n	800e14a <__multadd+0x12>
 800e170:	b30e      	cbz	r6, 800e1b6 <__multadd+0x7e>
 800e172:	68a3      	ldr	r3, [r4, #8]
 800e174:	42ab      	cmp	r3, r5
 800e176:	dc19      	bgt.n	800e1ac <__multadd+0x74>
 800e178:	6861      	ldr	r1, [r4, #4]
 800e17a:	4638      	mov	r0, r7
 800e17c:	3101      	adds	r1, #1
 800e17e:	f7ff ff79 	bl	800e074 <_Balloc>
 800e182:	4680      	mov	r8, r0
 800e184:	b928      	cbnz	r0, 800e192 <__multadd+0x5a>
 800e186:	4602      	mov	r2, r0
 800e188:	4b0c      	ldr	r3, [pc, #48]	@ (800e1bc <__multadd+0x84>)
 800e18a:	480d      	ldr	r0, [pc, #52]	@ (800e1c0 <__multadd+0x88>)
 800e18c:	21ba      	movs	r1, #186	@ 0xba
 800e18e:	f000 fb9f 	bl	800e8d0 <__assert_func>
 800e192:	6922      	ldr	r2, [r4, #16]
 800e194:	3202      	adds	r2, #2
 800e196:	f104 010c 	add.w	r1, r4, #12
 800e19a:	0092      	lsls	r2, r2, #2
 800e19c:	300c      	adds	r0, #12
 800e19e:	f7ff f8bc 	bl	800d31a <memcpy>
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f7ff ffa5 	bl	800e0f4 <_Bfree>
 800e1aa:	4644      	mov	r4, r8
 800e1ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1b0:	3501      	adds	r5, #1
 800e1b2:	615e      	str	r6, [r3, #20]
 800e1b4:	6125      	str	r5, [r4, #16]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1bc:	08011710 	.word	0x08011710
 800e1c0:	08011721 	.word	0x08011721

0800e1c4 <__hi0bits>:
 800e1c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	bf36      	itet	cc
 800e1cc:	0403      	lslcc	r3, r0, #16
 800e1ce:	2000      	movcs	r0, #0
 800e1d0:	2010      	movcc	r0, #16
 800e1d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e1d6:	bf3c      	itt	cc
 800e1d8:	021b      	lslcc	r3, r3, #8
 800e1da:	3008      	addcc	r0, #8
 800e1dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1e0:	bf3c      	itt	cc
 800e1e2:	011b      	lslcc	r3, r3, #4
 800e1e4:	3004      	addcc	r0, #4
 800e1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ea:	bf3c      	itt	cc
 800e1ec:	009b      	lslcc	r3, r3, #2
 800e1ee:	3002      	addcc	r0, #2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	db05      	blt.n	800e200 <__hi0bits+0x3c>
 800e1f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e1f8:	f100 0001 	add.w	r0, r0, #1
 800e1fc:	bf08      	it	eq
 800e1fe:	2020      	moveq	r0, #32
 800e200:	4770      	bx	lr

0800e202 <__lo0bits>:
 800e202:	6803      	ldr	r3, [r0, #0]
 800e204:	4602      	mov	r2, r0
 800e206:	f013 0007 	ands.w	r0, r3, #7
 800e20a:	d00b      	beq.n	800e224 <__lo0bits+0x22>
 800e20c:	07d9      	lsls	r1, r3, #31
 800e20e:	d421      	bmi.n	800e254 <__lo0bits+0x52>
 800e210:	0798      	lsls	r0, r3, #30
 800e212:	bf49      	itett	mi
 800e214:	085b      	lsrmi	r3, r3, #1
 800e216:	089b      	lsrpl	r3, r3, #2
 800e218:	2001      	movmi	r0, #1
 800e21a:	6013      	strmi	r3, [r2, #0]
 800e21c:	bf5c      	itt	pl
 800e21e:	6013      	strpl	r3, [r2, #0]
 800e220:	2002      	movpl	r0, #2
 800e222:	4770      	bx	lr
 800e224:	b299      	uxth	r1, r3
 800e226:	b909      	cbnz	r1, 800e22c <__lo0bits+0x2a>
 800e228:	0c1b      	lsrs	r3, r3, #16
 800e22a:	2010      	movs	r0, #16
 800e22c:	b2d9      	uxtb	r1, r3
 800e22e:	b909      	cbnz	r1, 800e234 <__lo0bits+0x32>
 800e230:	3008      	adds	r0, #8
 800e232:	0a1b      	lsrs	r3, r3, #8
 800e234:	0719      	lsls	r1, r3, #28
 800e236:	bf04      	itt	eq
 800e238:	091b      	lsreq	r3, r3, #4
 800e23a:	3004      	addeq	r0, #4
 800e23c:	0799      	lsls	r1, r3, #30
 800e23e:	bf04      	itt	eq
 800e240:	089b      	lsreq	r3, r3, #2
 800e242:	3002      	addeq	r0, #2
 800e244:	07d9      	lsls	r1, r3, #31
 800e246:	d403      	bmi.n	800e250 <__lo0bits+0x4e>
 800e248:	085b      	lsrs	r3, r3, #1
 800e24a:	f100 0001 	add.w	r0, r0, #1
 800e24e:	d003      	beq.n	800e258 <__lo0bits+0x56>
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	4770      	bx	lr
 800e254:	2000      	movs	r0, #0
 800e256:	4770      	bx	lr
 800e258:	2020      	movs	r0, #32
 800e25a:	4770      	bx	lr

0800e25c <__i2b>:
 800e25c:	b510      	push	{r4, lr}
 800e25e:	460c      	mov	r4, r1
 800e260:	2101      	movs	r1, #1
 800e262:	f7ff ff07 	bl	800e074 <_Balloc>
 800e266:	4602      	mov	r2, r0
 800e268:	b928      	cbnz	r0, 800e276 <__i2b+0x1a>
 800e26a:	4b05      	ldr	r3, [pc, #20]	@ (800e280 <__i2b+0x24>)
 800e26c:	4805      	ldr	r0, [pc, #20]	@ (800e284 <__i2b+0x28>)
 800e26e:	f240 1145 	movw	r1, #325	@ 0x145
 800e272:	f000 fb2d 	bl	800e8d0 <__assert_func>
 800e276:	2301      	movs	r3, #1
 800e278:	6144      	str	r4, [r0, #20]
 800e27a:	6103      	str	r3, [r0, #16]
 800e27c:	bd10      	pop	{r4, pc}
 800e27e:	bf00      	nop
 800e280:	08011710 	.word	0x08011710
 800e284:	08011721 	.word	0x08011721

0800e288 <__multiply>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	4614      	mov	r4, r2
 800e28e:	690a      	ldr	r2, [r1, #16]
 800e290:	6923      	ldr	r3, [r4, #16]
 800e292:	429a      	cmp	r2, r3
 800e294:	bfa8      	it	ge
 800e296:	4623      	movge	r3, r4
 800e298:	460f      	mov	r7, r1
 800e29a:	bfa4      	itt	ge
 800e29c:	460c      	movge	r4, r1
 800e29e:	461f      	movge	r7, r3
 800e2a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e2a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e2a8:	68a3      	ldr	r3, [r4, #8]
 800e2aa:	6861      	ldr	r1, [r4, #4]
 800e2ac:	eb0a 0609 	add.w	r6, sl, r9
 800e2b0:	42b3      	cmp	r3, r6
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	bfb8      	it	lt
 800e2b6:	3101      	addlt	r1, #1
 800e2b8:	f7ff fedc 	bl	800e074 <_Balloc>
 800e2bc:	b930      	cbnz	r0, 800e2cc <__multiply+0x44>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	4b44      	ldr	r3, [pc, #272]	@ (800e3d4 <__multiply+0x14c>)
 800e2c2:	4845      	ldr	r0, [pc, #276]	@ (800e3d8 <__multiply+0x150>)
 800e2c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e2c8:	f000 fb02 	bl	800e8d0 <__assert_func>
 800e2cc:	f100 0514 	add.w	r5, r0, #20
 800e2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	4543      	cmp	r3, r8
 800e2da:	d321      	bcc.n	800e320 <__multiply+0x98>
 800e2dc:	f107 0114 	add.w	r1, r7, #20
 800e2e0:	f104 0214 	add.w	r2, r4, #20
 800e2e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e2e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e2ec:	9302      	str	r3, [sp, #8]
 800e2ee:	1b13      	subs	r3, r2, r4
 800e2f0:	3b15      	subs	r3, #21
 800e2f2:	f023 0303 	bic.w	r3, r3, #3
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	f104 0715 	add.w	r7, r4, #21
 800e2fc:	42ba      	cmp	r2, r7
 800e2fe:	bf38      	it	cc
 800e300:	2304      	movcc	r3, #4
 800e302:	9301      	str	r3, [sp, #4]
 800e304:	9b02      	ldr	r3, [sp, #8]
 800e306:	9103      	str	r1, [sp, #12]
 800e308:	428b      	cmp	r3, r1
 800e30a:	d80c      	bhi.n	800e326 <__multiply+0x9e>
 800e30c:	2e00      	cmp	r6, #0
 800e30e:	dd03      	ble.n	800e318 <__multiply+0x90>
 800e310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e314:	2b00      	cmp	r3, #0
 800e316:	d05b      	beq.n	800e3d0 <__multiply+0x148>
 800e318:	6106      	str	r6, [r0, #16]
 800e31a:	b005      	add	sp, #20
 800e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e320:	f843 2b04 	str.w	r2, [r3], #4
 800e324:	e7d8      	b.n	800e2d8 <__multiply+0x50>
 800e326:	f8b1 a000 	ldrh.w	sl, [r1]
 800e32a:	f1ba 0f00 	cmp.w	sl, #0
 800e32e:	d024      	beq.n	800e37a <__multiply+0xf2>
 800e330:	f104 0e14 	add.w	lr, r4, #20
 800e334:	46a9      	mov	r9, r5
 800e336:	f04f 0c00 	mov.w	ip, #0
 800e33a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e33e:	f8d9 3000 	ldr.w	r3, [r9]
 800e342:	fa1f fb87 	uxth.w	fp, r7
 800e346:	b29b      	uxth	r3, r3
 800e348:	fb0a 330b 	mla	r3, sl, fp, r3
 800e34c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e350:	f8d9 7000 	ldr.w	r7, [r9]
 800e354:	4463      	add	r3, ip
 800e356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e35a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e35e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e362:	b29b      	uxth	r3, r3
 800e364:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e368:	4572      	cmp	r2, lr
 800e36a:	f849 3b04 	str.w	r3, [r9], #4
 800e36e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e372:	d8e2      	bhi.n	800e33a <__multiply+0xb2>
 800e374:	9b01      	ldr	r3, [sp, #4]
 800e376:	f845 c003 	str.w	ip, [r5, r3]
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e380:	3104      	adds	r1, #4
 800e382:	f1b9 0f00 	cmp.w	r9, #0
 800e386:	d021      	beq.n	800e3cc <__multiply+0x144>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	f104 0c14 	add.w	ip, r4, #20
 800e38e:	46ae      	mov	lr, r5
 800e390:	f04f 0a00 	mov.w	sl, #0
 800e394:	f8bc b000 	ldrh.w	fp, [ip]
 800e398:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e39c:	fb09 770b 	mla	r7, r9, fp, r7
 800e3a0:	4457      	add	r7, sl
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3a8:	f84e 3b04 	str.w	r3, [lr], #4
 800e3ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3b4:	f8be 3000 	ldrh.w	r3, [lr]
 800e3b8:	fb09 330a 	mla	r3, r9, sl, r3
 800e3bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e3c0:	4562      	cmp	r2, ip
 800e3c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3c6:	d8e5      	bhi.n	800e394 <__multiply+0x10c>
 800e3c8:	9f01      	ldr	r7, [sp, #4]
 800e3ca:	51eb      	str	r3, [r5, r7]
 800e3cc:	3504      	adds	r5, #4
 800e3ce:	e799      	b.n	800e304 <__multiply+0x7c>
 800e3d0:	3e01      	subs	r6, #1
 800e3d2:	e79b      	b.n	800e30c <__multiply+0x84>
 800e3d4:	08011710 	.word	0x08011710
 800e3d8:	08011721 	.word	0x08011721

0800e3dc <__pow5mult>:
 800e3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e0:	4615      	mov	r5, r2
 800e3e2:	f012 0203 	ands.w	r2, r2, #3
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	460e      	mov	r6, r1
 800e3ea:	d007      	beq.n	800e3fc <__pow5mult+0x20>
 800e3ec:	4c25      	ldr	r4, [pc, #148]	@ (800e484 <__pow5mult+0xa8>)
 800e3ee:	3a01      	subs	r2, #1
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3f6:	f7ff fe9f 	bl	800e138 <__multadd>
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	10ad      	asrs	r5, r5, #2
 800e3fe:	d03d      	beq.n	800e47c <__pow5mult+0xa0>
 800e400:	69fc      	ldr	r4, [r7, #28]
 800e402:	b97c      	cbnz	r4, 800e424 <__pow5mult+0x48>
 800e404:	2010      	movs	r0, #16
 800e406:	f7ff fe2d 	bl	800e064 <malloc>
 800e40a:	4602      	mov	r2, r0
 800e40c:	61f8      	str	r0, [r7, #28]
 800e40e:	b928      	cbnz	r0, 800e41c <__pow5mult+0x40>
 800e410:	4b1d      	ldr	r3, [pc, #116]	@ (800e488 <__pow5mult+0xac>)
 800e412:	481e      	ldr	r0, [pc, #120]	@ (800e48c <__pow5mult+0xb0>)
 800e414:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e418:	f000 fa5a 	bl	800e8d0 <__assert_func>
 800e41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e420:	6004      	str	r4, [r0, #0]
 800e422:	60c4      	str	r4, [r0, #12]
 800e424:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e42c:	b94c      	cbnz	r4, 800e442 <__pow5mult+0x66>
 800e42e:	f240 2171 	movw	r1, #625	@ 0x271
 800e432:	4638      	mov	r0, r7
 800e434:	f7ff ff12 	bl	800e25c <__i2b>
 800e438:	2300      	movs	r3, #0
 800e43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e43e:	4604      	mov	r4, r0
 800e440:	6003      	str	r3, [r0, #0]
 800e442:	f04f 0900 	mov.w	r9, #0
 800e446:	07eb      	lsls	r3, r5, #31
 800e448:	d50a      	bpl.n	800e460 <__pow5mult+0x84>
 800e44a:	4631      	mov	r1, r6
 800e44c:	4622      	mov	r2, r4
 800e44e:	4638      	mov	r0, r7
 800e450:	f7ff ff1a 	bl	800e288 <__multiply>
 800e454:	4631      	mov	r1, r6
 800e456:	4680      	mov	r8, r0
 800e458:	4638      	mov	r0, r7
 800e45a:	f7ff fe4b 	bl	800e0f4 <_Bfree>
 800e45e:	4646      	mov	r6, r8
 800e460:	106d      	asrs	r5, r5, #1
 800e462:	d00b      	beq.n	800e47c <__pow5mult+0xa0>
 800e464:	6820      	ldr	r0, [r4, #0]
 800e466:	b938      	cbnz	r0, 800e478 <__pow5mult+0x9c>
 800e468:	4622      	mov	r2, r4
 800e46a:	4621      	mov	r1, r4
 800e46c:	4638      	mov	r0, r7
 800e46e:	f7ff ff0b 	bl	800e288 <__multiply>
 800e472:	6020      	str	r0, [r4, #0]
 800e474:	f8c0 9000 	str.w	r9, [r0]
 800e478:	4604      	mov	r4, r0
 800e47a:	e7e4      	b.n	800e446 <__pow5mult+0x6a>
 800e47c:	4630      	mov	r0, r6
 800e47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e482:	bf00      	nop
 800e484:	0801177c 	.word	0x0801177c
 800e488:	080116a1 	.word	0x080116a1
 800e48c:	08011721 	.word	0x08011721

0800e490 <__lshift>:
 800e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e494:	460c      	mov	r4, r1
 800e496:	6849      	ldr	r1, [r1, #4]
 800e498:	6923      	ldr	r3, [r4, #16]
 800e49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e49e:	68a3      	ldr	r3, [r4, #8]
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	4691      	mov	r9, r2
 800e4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4a8:	f108 0601 	add.w	r6, r8, #1
 800e4ac:	42b3      	cmp	r3, r6
 800e4ae:	db0b      	blt.n	800e4c8 <__lshift+0x38>
 800e4b0:	4638      	mov	r0, r7
 800e4b2:	f7ff fddf 	bl	800e074 <_Balloc>
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	b948      	cbnz	r0, 800e4ce <__lshift+0x3e>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	4b28      	ldr	r3, [pc, #160]	@ (800e560 <__lshift+0xd0>)
 800e4be:	4829      	ldr	r0, [pc, #164]	@ (800e564 <__lshift+0xd4>)
 800e4c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e4c4:	f000 fa04 	bl	800e8d0 <__assert_func>
 800e4c8:	3101      	adds	r1, #1
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	e7ee      	b.n	800e4ac <__lshift+0x1c>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f100 0114 	add.w	r1, r0, #20
 800e4d4:	f100 0210 	add.w	r2, r0, #16
 800e4d8:	4618      	mov	r0, r3
 800e4da:	4553      	cmp	r3, sl
 800e4dc:	db33      	blt.n	800e546 <__lshift+0xb6>
 800e4de:	6920      	ldr	r0, [r4, #16]
 800e4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4e4:	f104 0314 	add.w	r3, r4, #20
 800e4e8:	f019 091f 	ands.w	r9, r9, #31
 800e4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4f4:	d02b      	beq.n	800e54e <__lshift+0xbe>
 800e4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800e4fa:	468a      	mov	sl, r1
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	6818      	ldr	r0, [r3, #0]
 800e500:	fa00 f009 	lsl.w	r0, r0, r9
 800e504:	4310      	orrs	r0, r2
 800e506:	f84a 0b04 	str.w	r0, [sl], #4
 800e50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50e:	459c      	cmp	ip, r3
 800e510:	fa22 f20e 	lsr.w	r2, r2, lr
 800e514:	d8f3      	bhi.n	800e4fe <__lshift+0x6e>
 800e516:	ebac 0304 	sub.w	r3, ip, r4
 800e51a:	3b15      	subs	r3, #21
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	3304      	adds	r3, #4
 800e522:	f104 0015 	add.w	r0, r4, #21
 800e526:	4584      	cmp	ip, r0
 800e528:	bf38      	it	cc
 800e52a:	2304      	movcc	r3, #4
 800e52c:	50ca      	str	r2, [r1, r3]
 800e52e:	b10a      	cbz	r2, 800e534 <__lshift+0xa4>
 800e530:	f108 0602 	add.w	r6, r8, #2
 800e534:	3e01      	subs	r6, #1
 800e536:	4638      	mov	r0, r7
 800e538:	612e      	str	r6, [r5, #16]
 800e53a:	4621      	mov	r1, r4
 800e53c:	f7ff fdda 	bl	800e0f4 <_Bfree>
 800e540:	4628      	mov	r0, r5
 800e542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e546:	f842 0f04 	str.w	r0, [r2, #4]!
 800e54a:	3301      	adds	r3, #1
 800e54c:	e7c5      	b.n	800e4da <__lshift+0x4a>
 800e54e:	3904      	subs	r1, #4
 800e550:	f853 2b04 	ldr.w	r2, [r3], #4
 800e554:	f841 2f04 	str.w	r2, [r1, #4]!
 800e558:	459c      	cmp	ip, r3
 800e55a:	d8f9      	bhi.n	800e550 <__lshift+0xc0>
 800e55c:	e7ea      	b.n	800e534 <__lshift+0xa4>
 800e55e:	bf00      	nop
 800e560:	08011710 	.word	0x08011710
 800e564:	08011721 	.word	0x08011721

0800e568 <__mcmp>:
 800e568:	690a      	ldr	r2, [r1, #16]
 800e56a:	4603      	mov	r3, r0
 800e56c:	6900      	ldr	r0, [r0, #16]
 800e56e:	1a80      	subs	r0, r0, r2
 800e570:	b530      	push	{r4, r5, lr}
 800e572:	d10e      	bne.n	800e592 <__mcmp+0x2a>
 800e574:	3314      	adds	r3, #20
 800e576:	3114      	adds	r1, #20
 800e578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e57c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e588:	4295      	cmp	r5, r2
 800e58a:	d003      	beq.n	800e594 <__mcmp+0x2c>
 800e58c:	d205      	bcs.n	800e59a <__mcmp+0x32>
 800e58e:	f04f 30ff 	mov.w	r0, #4294967295
 800e592:	bd30      	pop	{r4, r5, pc}
 800e594:	42a3      	cmp	r3, r4
 800e596:	d3f3      	bcc.n	800e580 <__mcmp+0x18>
 800e598:	e7fb      	b.n	800e592 <__mcmp+0x2a>
 800e59a:	2001      	movs	r0, #1
 800e59c:	e7f9      	b.n	800e592 <__mcmp+0x2a>
	...

0800e5a0 <__mdiff>:
 800e5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	4689      	mov	r9, r1
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	4648      	mov	r0, r9
 800e5ac:	4614      	mov	r4, r2
 800e5ae:	f7ff ffdb 	bl	800e568 <__mcmp>
 800e5b2:	1e05      	subs	r5, r0, #0
 800e5b4:	d112      	bne.n	800e5dc <__mdiff+0x3c>
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f7ff fd5b 	bl	800e074 <_Balloc>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	b928      	cbnz	r0, 800e5ce <__mdiff+0x2e>
 800e5c2:	4b3f      	ldr	r3, [pc, #252]	@ (800e6c0 <__mdiff+0x120>)
 800e5c4:	f240 2137 	movw	r1, #567	@ 0x237
 800e5c8:	483e      	ldr	r0, [pc, #248]	@ (800e6c4 <__mdiff+0x124>)
 800e5ca:	f000 f981 	bl	800e8d0 <__assert_func>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	b003      	add	sp, #12
 800e5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5dc:	bfbc      	itt	lt
 800e5de:	464b      	movlt	r3, r9
 800e5e0:	46a1      	movlt	r9, r4
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e5e8:	bfba      	itte	lt
 800e5ea:	461c      	movlt	r4, r3
 800e5ec:	2501      	movlt	r5, #1
 800e5ee:	2500      	movge	r5, #0
 800e5f0:	f7ff fd40 	bl	800e074 <_Balloc>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	b918      	cbnz	r0, 800e600 <__mdiff+0x60>
 800e5f8:	4b31      	ldr	r3, [pc, #196]	@ (800e6c0 <__mdiff+0x120>)
 800e5fa:	f240 2145 	movw	r1, #581	@ 0x245
 800e5fe:	e7e3      	b.n	800e5c8 <__mdiff+0x28>
 800e600:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e604:	6926      	ldr	r6, [r4, #16]
 800e606:	60c5      	str	r5, [r0, #12]
 800e608:	f109 0310 	add.w	r3, r9, #16
 800e60c:	f109 0514 	add.w	r5, r9, #20
 800e610:	f104 0e14 	add.w	lr, r4, #20
 800e614:	f100 0b14 	add.w	fp, r0, #20
 800e618:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e61c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e620:	9301      	str	r3, [sp, #4]
 800e622:	46d9      	mov	r9, fp
 800e624:	f04f 0c00 	mov.w	ip, #0
 800e628:	9b01      	ldr	r3, [sp, #4]
 800e62a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e62e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	fa1f f38a 	uxth.w	r3, sl
 800e638:	4619      	mov	r1, r3
 800e63a:	b283      	uxth	r3, r0
 800e63c:	1acb      	subs	r3, r1, r3
 800e63e:	0c00      	lsrs	r0, r0, #16
 800e640:	4463      	add	r3, ip
 800e642:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e646:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e650:	4576      	cmp	r6, lr
 800e652:	f849 3b04 	str.w	r3, [r9], #4
 800e656:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e65a:	d8e5      	bhi.n	800e628 <__mdiff+0x88>
 800e65c:	1b33      	subs	r3, r6, r4
 800e65e:	3b15      	subs	r3, #21
 800e660:	f023 0303 	bic.w	r3, r3, #3
 800e664:	3415      	adds	r4, #21
 800e666:	3304      	adds	r3, #4
 800e668:	42a6      	cmp	r6, r4
 800e66a:	bf38      	it	cc
 800e66c:	2304      	movcc	r3, #4
 800e66e:	441d      	add	r5, r3
 800e670:	445b      	add	r3, fp
 800e672:	461e      	mov	r6, r3
 800e674:	462c      	mov	r4, r5
 800e676:	4544      	cmp	r4, r8
 800e678:	d30e      	bcc.n	800e698 <__mdiff+0xf8>
 800e67a:	f108 0103 	add.w	r1, r8, #3
 800e67e:	1b49      	subs	r1, r1, r5
 800e680:	f021 0103 	bic.w	r1, r1, #3
 800e684:	3d03      	subs	r5, #3
 800e686:	45a8      	cmp	r8, r5
 800e688:	bf38      	it	cc
 800e68a:	2100      	movcc	r1, #0
 800e68c:	440b      	add	r3, r1
 800e68e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e692:	b191      	cbz	r1, 800e6ba <__mdiff+0x11a>
 800e694:	6117      	str	r7, [r2, #16]
 800e696:	e79d      	b.n	800e5d4 <__mdiff+0x34>
 800e698:	f854 1b04 	ldr.w	r1, [r4], #4
 800e69c:	46e6      	mov	lr, ip
 800e69e:	0c08      	lsrs	r0, r1, #16
 800e6a0:	fa1c fc81 	uxtah	ip, ip, r1
 800e6a4:	4471      	add	r1, lr
 800e6a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6aa:	b289      	uxth	r1, r1
 800e6ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6b0:	f846 1b04 	str.w	r1, [r6], #4
 800e6b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6b8:	e7dd      	b.n	800e676 <__mdiff+0xd6>
 800e6ba:	3f01      	subs	r7, #1
 800e6bc:	e7e7      	b.n	800e68e <__mdiff+0xee>
 800e6be:	bf00      	nop
 800e6c0:	08011710 	.word	0x08011710
 800e6c4:	08011721 	.word	0x08011721

0800e6c8 <__d2b>:
 800e6c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6cc:	460f      	mov	r7, r1
 800e6ce:	2101      	movs	r1, #1
 800e6d0:	ec59 8b10 	vmov	r8, r9, d0
 800e6d4:	4616      	mov	r6, r2
 800e6d6:	f7ff fccd 	bl	800e074 <_Balloc>
 800e6da:	4604      	mov	r4, r0
 800e6dc:	b930      	cbnz	r0, 800e6ec <__d2b+0x24>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	4b23      	ldr	r3, [pc, #140]	@ (800e770 <__d2b+0xa8>)
 800e6e2:	4824      	ldr	r0, [pc, #144]	@ (800e774 <__d2b+0xac>)
 800e6e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e6e8:	f000 f8f2 	bl	800e8d0 <__assert_func>
 800e6ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6f4:	b10d      	cbz	r5, 800e6fa <__d2b+0x32>
 800e6f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e6fa:	9301      	str	r3, [sp, #4]
 800e6fc:	f1b8 0300 	subs.w	r3, r8, #0
 800e700:	d023      	beq.n	800e74a <__d2b+0x82>
 800e702:	4668      	mov	r0, sp
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	f7ff fd7c 	bl	800e202 <__lo0bits>
 800e70a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e70e:	b1d0      	cbz	r0, 800e746 <__d2b+0x7e>
 800e710:	f1c0 0320 	rsb	r3, r0, #32
 800e714:	fa02 f303 	lsl.w	r3, r2, r3
 800e718:	430b      	orrs	r3, r1
 800e71a:	40c2      	lsrs	r2, r0
 800e71c:	6163      	str	r3, [r4, #20]
 800e71e:	9201      	str	r2, [sp, #4]
 800e720:	9b01      	ldr	r3, [sp, #4]
 800e722:	61a3      	str	r3, [r4, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	bf0c      	ite	eq
 800e728:	2201      	moveq	r2, #1
 800e72a:	2202      	movne	r2, #2
 800e72c:	6122      	str	r2, [r4, #16]
 800e72e:	b1a5      	cbz	r5, 800e75a <__d2b+0x92>
 800e730:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e734:	4405      	add	r5, r0
 800e736:	603d      	str	r5, [r7, #0]
 800e738:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e73c:	6030      	str	r0, [r6, #0]
 800e73e:	4620      	mov	r0, r4
 800e740:	b003      	add	sp, #12
 800e742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e746:	6161      	str	r1, [r4, #20]
 800e748:	e7ea      	b.n	800e720 <__d2b+0x58>
 800e74a:	a801      	add	r0, sp, #4
 800e74c:	f7ff fd59 	bl	800e202 <__lo0bits>
 800e750:	9b01      	ldr	r3, [sp, #4]
 800e752:	6163      	str	r3, [r4, #20]
 800e754:	3020      	adds	r0, #32
 800e756:	2201      	movs	r2, #1
 800e758:	e7e8      	b.n	800e72c <__d2b+0x64>
 800e75a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e75e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e762:	6038      	str	r0, [r7, #0]
 800e764:	6918      	ldr	r0, [r3, #16]
 800e766:	f7ff fd2d 	bl	800e1c4 <__hi0bits>
 800e76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e76e:	e7e5      	b.n	800e73c <__d2b+0x74>
 800e770:	08011710 	.word	0x08011710
 800e774:	08011721 	.word	0x08011721

0800e778 <__sflush_r>:
 800e778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	0716      	lsls	r6, r2, #28
 800e782:	4605      	mov	r5, r0
 800e784:	460c      	mov	r4, r1
 800e786:	d454      	bmi.n	800e832 <__sflush_r+0xba>
 800e788:	684b      	ldr	r3, [r1, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	dc02      	bgt.n	800e794 <__sflush_r+0x1c>
 800e78e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e790:	2b00      	cmp	r3, #0
 800e792:	dd48      	ble.n	800e826 <__sflush_r+0xae>
 800e794:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e796:	2e00      	cmp	r6, #0
 800e798:	d045      	beq.n	800e826 <__sflush_r+0xae>
 800e79a:	2300      	movs	r3, #0
 800e79c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e7a0:	682f      	ldr	r7, [r5, #0]
 800e7a2:	6a21      	ldr	r1, [r4, #32]
 800e7a4:	602b      	str	r3, [r5, #0]
 800e7a6:	d030      	beq.n	800e80a <__sflush_r+0x92>
 800e7a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e7aa:	89a3      	ldrh	r3, [r4, #12]
 800e7ac:	0759      	lsls	r1, r3, #29
 800e7ae:	d505      	bpl.n	800e7bc <__sflush_r+0x44>
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	1ad2      	subs	r2, r2, r3
 800e7b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e7b6:	b10b      	cbz	r3, 800e7bc <__sflush_r+0x44>
 800e7b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e7ba:	1ad2      	subs	r2, r2, r3
 800e7bc:	2300      	movs	r3, #0
 800e7be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7c0:	6a21      	ldr	r1, [r4, #32]
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b0      	blx	r6
 800e7c6:	1c43      	adds	r3, r0, #1
 800e7c8:	89a3      	ldrh	r3, [r4, #12]
 800e7ca:	d106      	bne.n	800e7da <__sflush_r+0x62>
 800e7cc:	6829      	ldr	r1, [r5, #0]
 800e7ce:	291d      	cmp	r1, #29
 800e7d0:	d82b      	bhi.n	800e82a <__sflush_r+0xb2>
 800e7d2:	4a2a      	ldr	r2, [pc, #168]	@ (800e87c <__sflush_r+0x104>)
 800e7d4:	410a      	asrs	r2, r1
 800e7d6:	07d6      	lsls	r6, r2, #31
 800e7d8:	d427      	bmi.n	800e82a <__sflush_r+0xb2>
 800e7da:	2200      	movs	r2, #0
 800e7dc:	6062      	str	r2, [r4, #4]
 800e7de:	04d9      	lsls	r1, r3, #19
 800e7e0:	6922      	ldr	r2, [r4, #16]
 800e7e2:	6022      	str	r2, [r4, #0]
 800e7e4:	d504      	bpl.n	800e7f0 <__sflush_r+0x78>
 800e7e6:	1c42      	adds	r2, r0, #1
 800e7e8:	d101      	bne.n	800e7ee <__sflush_r+0x76>
 800e7ea:	682b      	ldr	r3, [r5, #0]
 800e7ec:	b903      	cbnz	r3, 800e7f0 <__sflush_r+0x78>
 800e7ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800e7f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7f2:	602f      	str	r7, [r5, #0]
 800e7f4:	b1b9      	cbz	r1, 800e826 <__sflush_r+0xae>
 800e7f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7fa:	4299      	cmp	r1, r3
 800e7fc:	d002      	beq.n	800e804 <__sflush_r+0x8c>
 800e7fe:	4628      	mov	r0, r5
 800e800:	f7ff fbe6 	bl	800dfd0 <_free_r>
 800e804:	2300      	movs	r3, #0
 800e806:	6363      	str	r3, [r4, #52]	@ 0x34
 800e808:	e00d      	b.n	800e826 <__sflush_r+0xae>
 800e80a:	2301      	movs	r3, #1
 800e80c:	4628      	mov	r0, r5
 800e80e:	47b0      	blx	r6
 800e810:	4602      	mov	r2, r0
 800e812:	1c50      	adds	r0, r2, #1
 800e814:	d1c9      	bne.n	800e7aa <__sflush_r+0x32>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d0c6      	beq.n	800e7aa <__sflush_r+0x32>
 800e81c:	2b1d      	cmp	r3, #29
 800e81e:	d001      	beq.n	800e824 <__sflush_r+0xac>
 800e820:	2b16      	cmp	r3, #22
 800e822:	d11e      	bne.n	800e862 <__sflush_r+0xea>
 800e824:	602f      	str	r7, [r5, #0]
 800e826:	2000      	movs	r0, #0
 800e828:	e022      	b.n	800e870 <__sflush_r+0xf8>
 800e82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e82e:	b21b      	sxth	r3, r3
 800e830:	e01b      	b.n	800e86a <__sflush_r+0xf2>
 800e832:	690f      	ldr	r7, [r1, #16]
 800e834:	2f00      	cmp	r7, #0
 800e836:	d0f6      	beq.n	800e826 <__sflush_r+0xae>
 800e838:	0793      	lsls	r3, r2, #30
 800e83a:	680e      	ldr	r6, [r1, #0]
 800e83c:	bf08      	it	eq
 800e83e:	694b      	ldreq	r3, [r1, #20]
 800e840:	600f      	str	r7, [r1, #0]
 800e842:	bf18      	it	ne
 800e844:	2300      	movne	r3, #0
 800e846:	eba6 0807 	sub.w	r8, r6, r7
 800e84a:	608b      	str	r3, [r1, #8]
 800e84c:	f1b8 0f00 	cmp.w	r8, #0
 800e850:	dde9      	ble.n	800e826 <__sflush_r+0xae>
 800e852:	6a21      	ldr	r1, [r4, #32]
 800e854:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e856:	4643      	mov	r3, r8
 800e858:	463a      	mov	r2, r7
 800e85a:	4628      	mov	r0, r5
 800e85c:	47b0      	blx	r6
 800e85e:	2800      	cmp	r0, #0
 800e860:	dc08      	bgt.n	800e874 <__sflush_r+0xfc>
 800e862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e86a:	81a3      	strh	r3, [r4, #12]
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295
 800e870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e874:	4407      	add	r7, r0
 800e876:	eba8 0800 	sub.w	r8, r8, r0
 800e87a:	e7e7      	b.n	800e84c <__sflush_r+0xd4>
 800e87c:	dfbffffe 	.word	0xdfbffffe

0800e880 <_fflush_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	690b      	ldr	r3, [r1, #16]
 800e884:	4605      	mov	r5, r0
 800e886:	460c      	mov	r4, r1
 800e888:	b913      	cbnz	r3, 800e890 <_fflush_r+0x10>
 800e88a:	2500      	movs	r5, #0
 800e88c:	4628      	mov	r0, r5
 800e88e:	bd38      	pop	{r3, r4, r5, pc}
 800e890:	b118      	cbz	r0, 800e89a <_fflush_r+0x1a>
 800e892:	6a03      	ldr	r3, [r0, #32]
 800e894:	b90b      	cbnz	r3, 800e89a <_fflush_r+0x1a>
 800e896:	f7fe fc27 	bl	800d0e8 <__sinit>
 800e89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d0f3      	beq.n	800e88a <_fflush_r+0xa>
 800e8a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8a4:	07d0      	lsls	r0, r2, #31
 800e8a6:	d404      	bmi.n	800e8b2 <_fflush_r+0x32>
 800e8a8:	0599      	lsls	r1, r3, #22
 800e8aa:	d402      	bmi.n	800e8b2 <_fflush_r+0x32>
 800e8ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8ae:	f7fe fd32 	bl	800d316 <__retarget_lock_acquire_recursive>
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	f7ff ff5f 	bl	800e778 <__sflush_r>
 800e8ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8bc:	07da      	lsls	r2, r3, #31
 800e8be:	4605      	mov	r5, r0
 800e8c0:	d4e4      	bmi.n	800e88c <_fflush_r+0xc>
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	059b      	lsls	r3, r3, #22
 800e8c6:	d4e1      	bmi.n	800e88c <_fflush_r+0xc>
 800e8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8ca:	f7fe fd25 	bl	800d318 <__retarget_lock_release_recursive>
 800e8ce:	e7dd      	b.n	800e88c <_fflush_r+0xc>

0800e8d0 <__assert_func>:
 800e8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8d2:	4614      	mov	r4, r2
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	4b09      	ldr	r3, [pc, #36]	@ (800e8fc <__assert_func+0x2c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4605      	mov	r5, r0
 800e8dc:	68d8      	ldr	r0, [r3, #12]
 800e8de:	b954      	cbnz	r4, 800e8f6 <__assert_func+0x26>
 800e8e0:	4b07      	ldr	r3, [pc, #28]	@ (800e900 <__assert_func+0x30>)
 800e8e2:	461c      	mov	r4, r3
 800e8e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8e8:	9100      	str	r1, [sp, #0]
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	4905      	ldr	r1, [pc, #20]	@ (800e904 <__assert_func+0x34>)
 800e8ee:	f000 f82d 	bl	800e94c <fiprintf>
 800e8f2:	f000 f83d 	bl	800e970 <abort>
 800e8f6:	4b04      	ldr	r3, [pc, #16]	@ (800e908 <__assert_func+0x38>)
 800e8f8:	e7f4      	b.n	800e8e4 <__assert_func+0x14>
 800e8fa:	bf00      	nop
 800e8fc:	20000058 	.word	0x20000058
 800e900:	080118bd 	.word	0x080118bd
 800e904:	0801188f 	.word	0x0801188f
 800e908:	08011882 	.word	0x08011882

0800e90c <__ascii_mbtowc>:
 800e90c:	b082      	sub	sp, #8
 800e90e:	b901      	cbnz	r1, 800e912 <__ascii_mbtowc+0x6>
 800e910:	a901      	add	r1, sp, #4
 800e912:	b142      	cbz	r2, 800e926 <__ascii_mbtowc+0x1a>
 800e914:	b14b      	cbz	r3, 800e92a <__ascii_mbtowc+0x1e>
 800e916:	7813      	ldrb	r3, [r2, #0]
 800e918:	600b      	str	r3, [r1, #0]
 800e91a:	7812      	ldrb	r2, [r2, #0]
 800e91c:	1e10      	subs	r0, r2, #0
 800e91e:	bf18      	it	ne
 800e920:	2001      	movne	r0, #1
 800e922:	b002      	add	sp, #8
 800e924:	4770      	bx	lr
 800e926:	4610      	mov	r0, r2
 800e928:	e7fb      	b.n	800e922 <__ascii_mbtowc+0x16>
 800e92a:	f06f 0001 	mvn.w	r0, #1
 800e92e:	e7f8      	b.n	800e922 <__ascii_mbtowc+0x16>

0800e930 <__ascii_wctomb>:
 800e930:	4603      	mov	r3, r0
 800e932:	4608      	mov	r0, r1
 800e934:	b141      	cbz	r1, 800e948 <__ascii_wctomb+0x18>
 800e936:	2aff      	cmp	r2, #255	@ 0xff
 800e938:	d904      	bls.n	800e944 <__ascii_wctomb+0x14>
 800e93a:	228a      	movs	r2, #138	@ 0x8a
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	f04f 30ff 	mov.w	r0, #4294967295
 800e942:	4770      	bx	lr
 800e944:	700a      	strb	r2, [r1, #0]
 800e946:	2001      	movs	r0, #1
 800e948:	4770      	bx	lr
	...

0800e94c <fiprintf>:
 800e94c:	b40e      	push	{r1, r2, r3}
 800e94e:	b503      	push	{r0, r1, lr}
 800e950:	4601      	mov	r1, r0
 800e952:	ab03      	add	r3, sp, #12
 800e954:	4805      	ldr	r0, [pc, #20]	@ (800e96c <fiprintf+0x20>)
 800e956:	f853 2b04 	ldr.w	r2, [r3], #4
 800e95a:	6800      	ldr	r0, [r0, #0]
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	f000 f837 	bl	800e9d0 <_vfiprintf_r>
 800e962:	b002      	add	sp, #8
 800e964:	f85d eb04 	ldr.w	lr, [sp], #4
 800e968:	b003      	add	sp, #12
 800e96a:	4770      	bx	lr
 800e96c:	20000058 	.word	0x20000058

0800e970 <abort>:
 800e970:	b508      	push	{r3, lr}
 800e972:	2006      	movs	r0, #6
 800e974:	f000 fa00 	bl	800ed78 <raise>
 800e978:	2001      	movs	r0, #1
 800e97a:	f7f8 fcaf 	bl	80072dc <_exit>

0800e97e <__sfputc_r>:
 800e97e:	6893      	ldr	r3, [r2, #8]
 800e980:	3b01      	subs	r3, #1
 800e982:	2b00      	cmp	r3, #0
 800e984:	b410      	push	{r4}
 800e986:	6093      	str	r3, [r2, #8]
 800e988:	da08      	bge.n	800e99c <__sfputc_r+0x1e>
 800e98a:	6994      	ldr	r4, [r2, #24]
 800e98c:	42a3      	cmp	r3, r4
 800e98e:	db01      	blt.n	800e994 <__sfputc_r+0x16>
 800e990:	290a      	cmp	r1, #10
 800e992:	d103      	bne.n	800e99c <__sfputc_r+0x1e>
 800e994:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e998:	f000 b932 	b.w	800ec00 <__swbuf_r>
 800e99c:	6813      	ldr	r3, [r2, #0]
 800e99e:	1c58      	adds	r0, r3, #1
 800e9a0:	6010      	str	r0, [r2, #0]
 800e9a2:	7019      	strb	r1, [r3, #0]
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <__sfputs_r>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460f      	mov	r7, r1
 800e9b2:	4614      	mov	r4, r2
 800e9b4:	18d5      	adds	r5, r2, r3
 800e9b6:	42ac      	cmp	r4, r5
 800e9b8:	d101      	bne.n	800e9be <__sfputs_r+0x12>
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	e007      	b.n	800e9ce <__sfputs_r+0x22>
 800e9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9c2:	463a      	mov	r2, r7
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff ffda 	bl	800e97e <__sfputc_r>
 800e9ca:	1c43      	adds	r3, r0, #1
 800e9cc:	d1f3      	bne.n	800e9b6 <__sfputs_r+0xa>
 800e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9d0 <_vfiprintf_r>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	460d      	mov	r5, r1
 800e9d6:	b09d      	sub	sp, #116	@ 0x74
 800e9d8:	4614      	mov	r4, r2
 800e9da:	4698      	mov	r8, r3
 800e9dc:	4606      	mov	r6, r0
 800e9de:	b118      	cbz	r0, 800e9e8 <_vfiprintf_r+0x18>
 800e9e0:	6a03      	ldr	r3, [r0, #32]
 800e9e2:	b90b      	cbnz	r3, 800e9e8 <_vfiprintf_r+0x18>
 800e9e4:	f7fe fb80 	bl	800d0e8 <__sinit>
 800e9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9ea:	07d9      	lsls	r1, r3, #31
 800e9ec:	d405      	bmi.n	800e9fa <_vfiprintf_r+0x2a>
 800e9ee:	89ab      	ldrh	r3, [r5, #12]
 800e9f0:	059a      	lsls	r2, r3, #22
 800e9f2:	d402      	bmi.n	800e9fa <_vfiprintf_r+0x2a>
 800e9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9f6:	f7fe fc8e 	bl	800d316 <__retarget_lock_acquire_recursive>
 800e9fa:	89ab      	ldrh	r3, [r5, #12]
 800e9fc:	071b      	lsls	r3, r3, #28
 800e9fe:	d501      	bpl.n	800ea04 <_vfiprintf_r+0x34>
 800ea00:	692b      	ldr	r3, [r5, #16]
 800ea02:	b99b      	cbnz	r3, 800ea2c <_vfiprintf_r+0x5c>
 800ea04:	4629      	mov	r1, r5
 800ea06:	4630      	mov	r0, r6
 800ea08:	f000 f938 	bl	800ec7c <__swsetup_r>
 800ea0c:	b170      	cbz	r0, 800ea2c <_vfiprintf_r+0x5c>
 800ea0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea10:	07dc      	lsls	r4, r3, #31
 800ea12:	d504      	bpl.n	800ea1e <_vfiprintf_r+0x4e>
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	b01d      	add	sp, #116	@ 0x74
 800ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1e:	89ab      	ldrh	r3, [r5, #12]
 800ea20:	0598      	lsls	r0, r3, #22
 800ea22:	d4f7      	bmi.n	800ea14 <_vfiprintf_r+0x44>
 800ea24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea26:	f7fe fc77 	bl	800d318 <__retarget_lock_release_recursive>
 800ea2a:	e7f3      	b.n	800ea14 <_vfiprintf_r+0x44>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea30:	2320      	movs	r3, #32
 800ea32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea3a:	2330      	movs	r3, #48	@ 0x30
 800ea3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebec <_vfiprintf_r+0x21c>
 800ea40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea44:	f04f 0901 	mov.w	r9, #1
 800ea48:	4623      	mov	r3, r4
 800ea4a:	469a      	mov	sl, r3
 800ea4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea50:	b10a      	cbz	r2, 800ea56 <_vfiprintf_r+0x86>
 800ea52:	2a25      	cmp	r2, #37	@ 0x25
 800ea54:	d1f9      	bne.n	800ea4a <_vfiprintf_r+0x7a>
 800ea56:	ebba 0b04 	subs.w	fp, sl, r4
 800ea5a:	d00b      	beq.n	800ea74 <_vfiprintf_r+0xa4>
 800ea5c:	465b      	mov	r3, fp
 800ea5e:	4622      	mov	r2, r4
 800ea60:	4629      	mov	r1, r5
 800ea62:	4630      	mov	r0, r6
 800ea64:	f7ff ffa2 	bl	800e9ac <__sfputs_r>
 800ea68:	3001      	adds	r0, #1
 800ea6a:	f000 80a7 	beq.w	800ebbc <_vfiprintf_r+0x1ec>
 800ea6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea70:	445a      	add	r2, fp
 800ea72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea74:	f89a 3000 	ldrb.w	r3, [sl]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f000 809f 	beq.w	800ebbc <_vfiprintf_r+0x1ec>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f04f 32ff 	mov.w	r2, #4294967295
 800ea84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea88:	f10a 0a01 	add.w	sl, sl, #1
 800ea8c:	9304      	str	r3, [sp, #16]
 800ea8e:	9307      	str	r3, [sp, #28]
 800ea90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea96:	4654      	mov	r4, sl
 800ea98:	2205      	movs	r2, #5
 800ea9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9e:	4853      	ldr	r0, [pc, #332]	@ (800ebec <_vfiprintf_r+0x21c>)
 800eaa0:	f7f1 fbb6 	bl	8000210 <memchr>
 800eaa4:	9a04      	ldr	r2, [sp, #16]
 800eaa6:	b9d8      	cbnz	r0, 800eae0 <_vfiprintf_r+0x110>
 800eaa8:	06d1      	lsls	r1, r2, #27
 800eaaa:	bf44      	itt	mi
 800eaac:	2320      	movmi	r3, #32
 800eaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eab2:	0713      	lsls	r3, r2, #28
 800eab4:	bf44      	itt	mi
 800eab6:	232b      	movmi	r3, #43	@ 0x2b
 800eab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eabc:	f89a 3000 	ldrb.w	r3, [sl]
 800eac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eac2:	d015      	beq.n	800eaf0 <_vfiprintf_r+0x120>
 800eac4:	9a07      	ldr	r2, [sp, #28]
 800eac6:	4654      	mov	r4, sl
 800eac8:	2000      	movs	r0, #0
 800eaca:	f04f 0c0a 	mov.w	ip, #10
 800eace:	4621      	mov	r1, r4
 800ead0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead4:	3b30      	subs	r3, #48	@ 0x30
 800ead6:	2b09      	cmp	r3, #9
 800ead8:	d94b      	bls.n	800eb72 <_vfiprintf_r+0x1a2>
 800eada:	b1b0      	cbz	r0, 800eb0a <_vfiprintf_r+0x13a>
 800eadc:	9207      	str	r2, [sp, #28]
 800eade:	e014      	b.n	800eb0a <_vfiprintf_r+0x13a>
 800eae0:	eba0 0308 	sub.w	r3, r0, r8
 800eae4:	fa09 f303 	lsl.w	r3, r9, r3
 800eae8:	4313      	orrs	r3, r2
 800eaea:	9304      	str	r3, [sp, #16]
 800eaec:	46a2      	mov	sl, r4
 800eaee:	e7d2      	b.n	800ea96 <_vfiprintf_r+0xc6>
 800eaf0:	9b03      	ldr	r3, [sp, #12]
 800eaf2:	1d19      	adds	r1, r3, #4
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	9103      	str	r1, [sp, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	bfbb      	ittet	lt
 800eafc:	425b      	neglt	r3, r3
 800eafe:	f042 0202 	orrlt.w	r2, r2, #2
 800eb02:	9307      	strge	r3, [sp, #28]
 800eb04:	9307      	strlt	r3, [sp, #28]
 800eb06:	bfb8      	it	lt
 800eb08:	9204      	strlt	r2, [sp, #16]
 800eb0a:	7823      	ldrb	r3, [r4, #0]
 800eb0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb0e:	d10a      	bne.n	800eb26 <_vfiprintf_r+0x156>
 800eb10:	7863      	ldrb	r3, [r4, #1]
 800eb12:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb14:	d132      	bne.n	800eb7c <_vfiprintf_r+0x1ac>
 800eb16:	9b03      	ldr	r3, [sp, #12]
 800eb18:	1d1a      	adds	r2, r3, #4
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	9203      	str	r2, [sp, #12]
 800eb1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb22:	3402      	adds	r4, #2
 800eb24:	9305      	str	r3, [sp, #20]
 800eb26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebfc <_vfiprintf_r+0x22c>
 800eb2a:	7821      	ldrb	r1, [r4, #0]
 800eb2c:	2203      	movs	r2, #3
 800eb2e:	4650      	mov	r0, sl
 800eb30:	f7f1 fb6e 	bl	8000210 <memchr>
 800eb34:	b138      	cbz	r0, 800eb46 <_vfiprintf_r+0x176>
 800eb36:	9b04      	ldr	r3, [sp, #16]
 800eb38:	eba0 000a 	sub.w	r0, r0, sl
 800eb3c:	2240      	movs	r2, #64	@ 0x40
 800eb3e:	4082      	lsls	r2, r0
 800eb40:	4313      	orrs	r3, r2
 800eb42:	3401      	adds	r4, #1
 800eb44:	9304      	str	r3, [sp, #16]
 800eb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4a:	4829      	ldr	r0, [pc, #164]	@ (800ebf0 <_vfiprintf_r+0x220>)
 800eb4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb50:	2206      	movs	r2, #6
 800eb52:	f7f1 fb5d 	bl	8000210 <memchr>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d03f      	beq.n	800ebda <_vfiprintf_r+0x20a>
 800eb5a:	4b26      	ldr	r3, [pc, #152]	@ (800ebf4 <_vfiprintf_r+0x224>)
 800eb5c:	bb1b      	cbnz	r3, 800eba6 <_vfiprintf_r+0x1d6>
 800eb5e:	9b03      	ldr	r3, [sp, #12]
 800eb60:	3307      	adds	r3, #7
 800eb62:	f023 0307 	bic.w	r3, r3, #7
 800eb66:	3308      	adds	r3, #8
 800eb68:	9303      	str	r3, [sp, #12]
 800eb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb6c:	443b      	add	r3, r7
 800eb6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb70:	e76a      	b.n	800ea48 <_vfiprintf_r+0x78>
 800eb72:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb76:	460c      	mov	r4, r1
 800eb78:	2001      	movs	r0, #1
 800eb7a:	e7a8      	b.n	800eace <_vfiprintf_r+0xfe>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	3401      	adds	r4, #1
 800eb80:	9305      	str	r3, [sp, #20]
 800eb82:	4619      	mov	r1, r3
 800eb84:	f04f 0c0a 	mov.w	ip, #10
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb8e:	3a30      	subs	r2, #48	@ 0x30
 800eb90:	2a09      	cmp	r2, #9
 800eb92:	d903      	bls.n	800eb9c <_vfiprintf_r+0x1cc>
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d0c6      	beq.n	800eb26 <_vfiprintf_r+0x156>
 800eb98:	9105      	str	r1, [sp, #20]
 800eb9a:	e7c4      	b.n	800eb26 <_vfiprintf_r+0x156>
 800eb9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba0:	4604      	mov	r4, r0
 800eba2:	2301      	movs	r3, #1
 800eba4:	e7f0      	b.n	800eb88 <_vfiprintf_r+0x1b8>
 800eba6:	ab03      	add	r3, sp, #12
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	462a      	mov	r2, r5
 800ebac:	4b12      	ldr	r3, [pc, #72]	@ (800ebf8 <_vfiprintf_r+0x228>)
 800ebae:	a904      	add	r1, sp, #16
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7fd fe55 	bl	800c860 <_printf_float>
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	1c78      	adds	r0, r7, #1
 800ebba:	d1d6      	bne.n	800eb6a <_vfiprintf_r+0x19a>
 800ebbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebbe:	07d9      	lsls	r1, r3, #31
 800ebc0:	d405      	bmi.n	800ebce <_vfiprintf_r+0x1fe>
 800ebc2:	89ab      	ldrh	r3, [r5, #12]
 800ebc4:	059a      	lsls	r2, r3, #22
 800ebc6:	d402      	bmi.n	800ebce <_vfiprintf_r+0x1fe>
 800ebc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebca:	f7fe fba5 	bl	800d318 <__retarget_lock_release_recursive>
 800ebce:	89ab      	ldrh	r3, [r5, #12]
 800ebd0:	065b      	lsls	r3, r3, #25
 800ebd2:	f53f af1f 	bmi.w	800ea14 <_vfiprintf_r+0x44>
 800ebd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebd8:	e71e      	b.n	800ea18 <_vfiprintf_r+0x48>
 800ebda:	ab03      	add	r3, sp, #12
 800ebdc:	9300      	str	r3, [sp, #0]
 800ebde:	462a      	mov	r2, r5
 800ebe0:	4b05      	ldr	r3, [pc, #20]	@ (800ebf8 <_vfiprintf_r+0x228>)
 800ebe2:	a904      	add	r1, sp, #16
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f7fe f8d3 	bl	800cd90 <_printf_i>
 800ebea:	e7e4      	b.n	800ebb6 <_vfiprintf_r+0x1e6>
 800ebec:	080119bf 	.word	0x080119bf
 800ebf0:	080119c9 	.word	0x080119c9
 800ebf4:	0800c861 	.word	0x0800c861
 800ebf8:	0800e9ad 	.word	0x0800e9ad
 800ebfc:	080119c5 	.word	0x080119c5

0800ec00 <__swbuf_r>:
 800ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec02:	460e      	mov	r6, r1
 800ec04:	4614      	mov	r4, r2
 800ec06:	4605      	mov	r5, r0
 800ec08:	b118      	cbz	r0, 800ec12 <__swbuf_r+0x12>
 800ec0a:	6a03      	ldr	r3, [r0, #32]
 800ec0c:	b90b      	cbnz	r3, 800ec12 <__swbuf_r+0x12>
 800ec0e:	f7fe fa6b 	bl	800d0e8 <__sinit>
 800ec12:	69a3      	ldr	r3, [r4, #24]
 800ec14:	60a3      	str	r3, [r4, #8]
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	071a      	lsls	r2, r3, #28
 800ec1a:	d501      	bpl.n	800ec20 <__swbuf_r+0x20>
 800ec1c:	6923      	ldr	r3, [r4, #16]
 800ec1e:	b943      	cbnz	r3, 800ec32 <__swbuf_r+0x32>
 800ec20:	4621      	mov	r1, r4
 800ec22:	4628      	mov	r0, r5
 800ec24:	f000 f82a 	bl	800ec7c <__swsetup_r>
 800ec28:	b118      	cbz	r0, 800ec32 <__swbuf_r+0x32>
 800ec2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ec2e:	4638      	mov	r0, r7
 800ec30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec32:	6823      	ldr	r3, [r4, #0]
 800ec34:	6922      	ldr	r2, [r4, #16]
 800ec36:	1a98      	subs	r0, r3, r2
 800ec38:	6963      	ldr	r3, [r4, #20]
 800ec3a:	b2f6      	uxtb	r6, r6
 800ec3c:	4283      	cmp	r3, r0
 800ec3e:	4637      	mov	r7, r6
 800ec40:	dc05      	bgt.n	800ec4e <__swbuf_r+0x4e>
 800ec42:	4621      	mov	r1, r4
 800ec44:	4628      	mov	r0, r5
 800ec46:	f7ff fe1b 	bl	800e880 <_fflush_r>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d1ed      	bne.n	800ec2a <__swbuf_r+0x2a>
 800ec4e:	68a3      	ldr	r3, [r4, #8]
 800ec50:	3b01      	subs	r3, #1
 800ec52:	60a3      	str	r3, [r4, #8]
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	6022      	str	r2, [r4, #0]
 800ec5a:	701e      	strb	r6, [r3, #0]
 800ec5c:	6962      	ldr	r2, [r4, #20]
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d004      	beq.n	800ec6e <__swbuf_r+0x6e>
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	07db      	lsls	r3, r3, #31
 800ec68:	d5e1      	bpl.n	800ec2e <__swbuf_r+0x2e>
 800ec6a:	2e0a      	cmp	r6, #10
 800ec6c:	d1df      	bne.n	800ec2e <__swbuf_r+0x2e>
 800ec6e:	4621      	mov	r1, r4
 800ec70:	4628      	mov	r0, r5
 800ec72:	f7ff fe05 	bl	800e880 <_fflush_r>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d0d9      	beq.n	800ec2e <__swbuf_r+0x2e>
 800ec7a:	e7d6      	b.n	800ec2a <__swbuf_r+0x2a>

0800ec7c <__swsetup_r>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4b29      	ldr	r3, [pc, #164]	@ (800ed24 <__swsetup_r+0xa8>)
 800ec80:	4605      	mov	r5, r0
 800ec82:	6818      	ldr	r0, [r3, #0]
 800ec84:	460c      	mov	r4, r1
 800ec86:	b118      	cbz	r0, 800ec90 <__swsetup_r+0x14>
 800ec88:	6a03      	ldr	r3, [r0, #32]
 800ec8a:	b90b      	cbnz	r3, 800ec90 <__swsetup_r+0x14>
 800ec8c:	f7fe fa2c 	bl	800d0e8 <__sinit>
 800ec90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec94:	0719      	lsls	r1, r3, #28
 800ec96:	d422      	bmi.n	800ecde <__swsetup_r+0x62>
 800ec98:	06da      	lsls	r2, r3, #27
 800ec9a:	d407      	bmi.n	800ecac <__swsetup_r+0x30>
 800ec9c:	2209      	movs	r2, #9
 800ec9e:	602a      	str	r2, [r5, #0]
 800eca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eca4:	81a3      	strh	r3, [r4, #12]
 800eca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecaa:	e033      	b.n	800ed14 <__swsetup_r+0x98>
 800ecac:	0758      	lsls	r0, r3, #29
 800ecae:	d512      	bpl.n	800ecd6 <__swsetup_r+0x5a>
 800ecb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ecb2:	b141      	cbz	r1, 800ecc6 <__swsetup_r+0x4a>
 800ecb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ecb8:	4299      	cmp	r1, r3
 800ecba:	d002      	beq.n	800ecc2 <__swsetup_r+0x46>
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f7ff f987 	bl	800dfd0 <_free_r>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eccc:	81a3      	strh	r3, [r4, #12]
 800ecce:	2300      	movs	r3, #0
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	6923      	ldr	r3, [r4, #16]
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	f043 0308 	orr.w	r3, r3, #8
 800ecdc:	81a3      	strh	r3, [r4, #12]
 800ecde:	6923      	ldr	r3, [r4, #16]
 800ece0:	b94b      	cbnz	r3, 800ecf6 <__swsetup_r+0x7a>
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ece8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecec:	d003      	beq.n	800ecf6 <__swsetup_r+0x7a>
 800ecee:	4621      	mov	r1, r4
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f000 f883 	bl	800edfc <__smakebuf_r>
 800ecf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecfa:	f013 0201 	ands.w	r2, r3, #1
 800ecfe:	d00a      	beq.n	800ed16 <__swsetup_r+0x9a>
 800ed00:	2200      	movs	r2, #0
 800ed02:	60a2      	str	r2, [r4, #8]
 800ed04:	6962      	ldr	r2, [r4, #20]
 800ed06:	4252      	negs	r2, r2
 800ed08:	61a2      	str	r2, [r4, #24]
 800ed0a:	6922      	ldr	r2, [r4, #16]
 800ed0c:	b942      	cbnz	r2, 800ed20 <__swsetup_r+0xa4>
 800ed0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed12:	d1c5      	bne.n	800eca0 <__swsetup_r+0x24>
 800ed14:	bd38      	pop	{r3, r4, r5, pc}
 800ed16:	0799      	lsls	r1, r3, #30
 800ed18:	bf58      	it	pl
 800ed1a:	6962      	ldrpl	r2, [r4, #20]
 800ed1c:	60a2      	str	r2, [r4, #8]
 800ed1e:	e7f4      	b.n	800ed0a <__swsetup_r+0x8e>
 800ed20:	2000      	movs	r0, #0
 800ed22:	e7f7      	b.n	800ed14 <__swsetup_r+0x98>
 800ed24:	20000058 	.word	0x20000058

0800ed28 <_raise_r>:
 800ed28:	291f      	cmp	r1, #31
 800ed2a:	b538      	push	{r3, r4, r5, lr}
 800ed2c:	4605      	mov	r5, r0
 800ed2e:	460c      	mov	r4, r1
 800ed30:	d904      	bls.n	800ed3c <_raise_r+0x14>
 800ed32:	2316      	movs	r3, #22
 800ed34:	6003      	str	r3, [r0, #0]
 800ed36:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3a:	bd38      	pop	{r3, r4, r5, pc}
 800ed3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed3e:	b112      	cbz	r2, 800ed46 <_raise_r+0x1e>
 800ed40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed44:	b94b      	cbnz	r3, 800ed5a <_raise_r+0x32>
 800ed46:	4628      	mov	r0, r5
 800ed48:	f000 f830 	bl	800edac <_getpid_r>
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	4601      	mov	r1, r0
 800ed50:	4628      	mov	r0, r5
 800ed52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed56:	f000 b817 	b.w	800ed88 <_kill_r>
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d00a      	beq.n	800ed74 <_raise_r+0x4c>
 800ed5e:	1c59      	adds	r1, r3, #1
 800ed60:	d103      	bne.n	800ed6a <_raise_r+0x42>
 800ed62:	2316      	movs	r3, #22
 800ed64:	6003      	str	r3, [r0, #0]
 800ed66:	2001      	movs	r0, #1
 800ed68:	e7e7      	b.n	800ed3a <_raise_r+0x12>
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed70:	4620      	mov	r0, r4
 800ed72:	4798      	blx	r3
 800ed74:	2000      	movs	r0, #0
 800ed76:	e7e0      	b.n	800ed3a <_raise_r+0x12>

0800ed78 <raise>:
 800ed78:	4b02      	ldr	r3, [pc, #8]	@ (800ed84 <raise+0xc>)
 800ed7a:	4601      	mov	r1, r0
 800ed7c:	6818      	ldr	r0, [r3, #0]
 800ed7e:	f7ff bfd3 	b.w	800ed28 <_raise_r>
 800ed82:	bf00      	nop
 800ed84:	20000058 	.word	0x20000058

0800ed88 <_kill_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d07      	ldr	r5, [pc, #28]	@ (800eda8 <_kill_r+0x20>)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	4611      	mov	r1, r2
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	f7f8 fa91 	bl	80072bc <_kill>
 800ed9a:	1c43      	adds	r3, r0, #1
 800ed9c:	d102      	bne.n	800eda4 <_kill_r+0x1c>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	b103      	cbz	r3, 800eda4 <_kill_r+0x1c>
 800eda2:	6023      	str	r3, [r4, #0]
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	bf00      	nop
 800eda8:	20000854 	.word	0x20000854

0800edac <_getpid_r>:
 800edac:	f7f8 ba7e 	b.w	80072ac <_getpid>

0800edb0 <__swhatbuf_r>:
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	460c      	mov	r4, r1
 800edb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb8:	2900      	cmp	r1, #0
 800edba:	b096      	sub	sp, #88	@ 0x58
 800edbc:	4615      	mov	r5, r2
 800edbe:	461e      	mov	r6, r3
 800edc0:	da0d      	bge.n	800edde <__swhatbuf_r+0x2e>
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800edc8:	f04f 0100 	mov.w	r1, #0
 800edcc:	bf14      	ite	ne
 800edce:	2340      	movne	r3, #64	@ 0x40
 800edd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edd4:	2000      	movs	r0, #0
 800edd6:	6031      	str	r1, [r6, #0]
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	b016      	add	sp, #88	@ 0x58
 800eddc:	bd70      	pop	{r4, r5, r6, pc}
 800edde:	466a      	mov	r2, sp
 800ede0:	f000 f848 	bl	800ee74 <_fstat_r>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	dbec      	blt.n	800edc2 <__swhatbuf_r+0x12>
 800ede8:	9901      	ldr	r1, [sp, #4]
 800edea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edf2:	4259      	negs	r1, r3
 800edf4:	4159      	adcs	r1, r3
 800edf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edfa:	e7eb      	b.n	800edd4 <__swhatbuf_r+0x24>

0800edfc <__smakebuf_r>:
 800edfc:	898b      	ldrh	r3, [r1, #12]
 800edfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee00:	079d      	lsls	r5, r3, #30
 800ee02:	4606      	mov	r6, r0
 800ee04:	460c      	mov	r4, r1
 800ee06:	d507      	bpl.n	800ee18 <__smakebuf_r+0x1c>
 800ee08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	6123      	str	r3, [r4, #16]
 800ee10:	2301      	movs	r3, #1
 800ee12:	6163      	str	r3, [r4, #20]
 800ee14:	b003      	add	sp, #12
 800ee16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee18:	ab01      	add	r3, sp, #4
 800ee1a:	466a      	mov	r2, sp
 800ee1c:	f7ff ffc8 	bl	800edb0 <__swhatbuf_r>
 800ee20:	9f00      	ldr	r7, [sp, #0]
 800ee22:	4605      	mov	r5, r0
 800ee24:	4639      	mov	r1, r7
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7fd fbee 	bl	800c608 <_malloc_r>
 800ee2c:	b948      	cbnz	r0, 800ee42 <__smakebuf_r+0x46>
 800ee2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee32:	059a      	lsls	r2, r3, #22
 800ee34:	d4ee      	bmi.n	800ee14 <__smakebuf_r+0x18>
 800ee36:	f023 0303 	bic.w	r3, r3, #3
 800ee3a:	f043 0302 	orr.w	r3, r3, #2
 800ee3e:	81a3      	strh	r3, [r4, #12]
 800ee40:	e7e2      	b.n	800ee08 <__smakebuf_r+0xc>
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	6020      	str	r0, [r4, #0]
 800ee46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee4a:	81a3      	strh	r3, [r4, #12]
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee52:	b15b      	cbz	r3, 800ee6c <__smakebuf_r+0x70>
 800ee54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f000 f81d 	bl	800ee98 <_isatty_r>
 800ee5e:	b128      	cbz	r0, 800ee6c <__smakebuf_r+0x70>
 800ee60:	89a3      	ldrh	r3, [r4, #12]
 800ee62:	f023 0303 	bic.w	r3, r3, #3
 800ee66:	f043 0301 	orr.w	r3, r3, #1
 800ee6a:	81a3      	strh	r3, [r4, #12]
 800ee6c:	89a3      	ldrh	r3, [r4, #12]
 800ee6e:	431d      	orrs	r5, r3
 800ee70:	81a5      	strh	r5, [r4, #12]
 800ee72:	e7cf      	b.n	800ee14 <__smakebuf_r+0x18>

0800ee74 <_fstat_r>:
 800ee74:	b538      	push	{r3, r4, r5, lr}
 800ee76:	4d07      	ldr	r5, [pc, #28]	@ (800ee94 <_fstat_r+0x20>)
 800ee78:	2300      	movs	r3, #0
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	4608      	mov	r0, r1
 800ee7e:	4611      	mov	r1, r2
 800ee80:	602b      	str	r3, [r5, #0]
 800ee82:	f7f8 fa7b 	bl	800737c <_fstat>
 800ee86:	1c43      	adds	r3, r0, #1
 800ee88:	d102      	bne.n	800ee90 <_fstat_r+0x1c>
 800ee8a:	682b      	ldr	r3, [r5, #0]
 800ee8c:	b103      	cbz	r3, 800ee90 <_fstat_r+0x1c>
 800ee8e:	6023      	str	r3, [r4, #0]
 800ee90:	bd38      	pop	{r3, r4, r5, pc}
 800ee92:	bf00      	nop
 800ee94:	20000854 	.word	0x20000854

0800ee98 <_isatty_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4d06      	ldr	r5, [pc, #24]	@ (800eeb4 <_isatty_r+0x1c>)
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	4604      	mov	r4, r0
 800eea0:	4608      	mov	r0, r1
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	f7f8 fa7a 	bl	800739c <_isatty>
 800eea8:	1c43      	adds	r3, r0, #1
 800eeaa:	d102      	bne.n	800eeb2 <_isatty_r+0x1a>
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	b103      	cbz	r3, 800eeb2 <_isatty_r+0x1a>
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	bd38      	pop	{r3, r4, r5, pc}
 800eeb4:	20000854 	.word	0x20000854

0800eeb8 <pow>:
 800eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeba:	ed2d 8b02 	vpush	{d8}
 800eebe:	eeb0 8a40 	vmov.f32	s16, s0
 800eec2:	eef0 8a60 	vmov.f32	s17, s1
 800eec6:	ec55 4b11 	vmov	r4, r5, d1
 800eeca:	f000 fc75 	bl	800f7b8 <__ieee754_pow>
 800eece:	4622      	mov	r2, r4
 800eed0:	462b      	mov	r3, r5
 800eed2:	4620      	mov	r0, r4
 800eed4:	4629      	mov	r1, r5
 800eed6:	ec57 6b10 	vmov	r6, r7, d0
 800eeda:	f7f1 fe47 	bl	8000b6c <__aeabi_dcmpun>
 800eede:	2800      	cmp	r0, #0
 800eee0:	d13b      	bne.n	800ef5a <pow+0xa2>
 800eee2:	ec51 0b18 	vmov	r0, r1, d8
 800eee6:	2200      	movs	r2, #0
 800eee8:	2300      	movs	r3, #0
 800eeea:	f7f1 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 800eeee:	b1b8      	cbz	r0, 800ef20 <pow+0x68>
 800eef0:	2200      	movs	r2, #0
 800eef2:	2300      	movs	r3, #0
 800eef4:	4620      	mov	r0, r4
 800eef6:	4629      	mov	r1, r5
 800eef8:	f7f1 fe06 	bl	8000b08 <__aeabi_dcmpeq>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d146      	bne.n	800ef8e <pow+0xd6>
 800ef00:	ec45 4b10 	vmov	d0, r4, r5
 800ef04:	f000 f947 	bl	800f196 <finite>
 800ef08:	b338      	cbz	r0, 800ef5a <pow+0xa2>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	4620      	mov	r0, r4
 800ef10:	4629      	mov	r1, r5
 800ef12:	f7f1 fe03 	bl	8000b1c <__aeabi_dcmplt>
 800ef16:	b300      	cbz	r0, 800ef5a <pow+0xa2>
 800ef18:	f7fe f9d2 	bl	800d2c0 <__errno>
 800ef1c:	2322      	movs	r3, #34	@ 0x22
 800ef1e:	e01b      	b.n	800ef58 <pow+0xa0>
 800ef20:	ec47 6b10 	vmov	d0, r6, r7
 800ef24:	f000 f937 	bl	800f196 <finite>
 800ef28:	b9e0      	cbnz	r0, 800ef64 <pow+0xac>
 800ef2a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef2e:	eef0 0a68 	vmov.f32	s1, s17
 800ef32:	f000 f930 	bl	800f196 <finite>
 800ef36:	b1a8      	cbz	r0, 800ef64 <pow+0xac>
 800ef38:	ec45 4b10 	vmov	d0, r4, r5
 800ef3c:	f000 f92b 	bl	800f196 <finite>
 800ef40:	b180      	cbz	r0, 800ef64 <pow+0xac>
 800ef42:	4632      	mov	r2, r6
 800ef44:	463b      	mov	r3, r7
 800ef46:	4630      	mov	r0, r6
 800ef48:	4639      	mov	r1, r7
 800ef4a:	f7f1 fe0f 	bl	8000b6c <__aeabi_dcmpun>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d0e2      	beq.n	800ef18 <pow+0x60>
 800ef52:	f7fe f9b5 	bl	800d2c0 <__errno>
 800ef56:	2321      	movs	r3, #33	@ 0x21
 800ef58:	6003      	str	r3, [r0, #0]
 800ef5a:	ecbd 8b02 	vpop	{d8}
 800ef5e:	ec47 6b10 	vmov	d0, r6, r7
 800ef62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef64:	2200      	movs	r2, #0
 800ef66:	2300      	movs	r3, #0
 800ef68:	4630      	mov	r0, r6
 800ef6a:	4639      	mov	r1, r7
 800ef6c:	f7f1 fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d0f2      	beq.n	800ef5a <pow+0xa2>
 800ef74:	eeb0 0a48 	vmov.f32	s0, s16
 800ef78:	eef0 0a68 	vmov.f32	s1, s17
 800ef7c:	f000 f90b 	bl	800f196 <finite>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d0ea      	beq.n	800ef5a <pow+0xa2>
 800ef84:	ec45 4b10 	vmov	d0, r4, r5
 800ef88:	f000 f905 	bl	800f196 <finite>
 800ef8c:	e7c3      	b.n	800ef16 <pow+0x5e>
 800ef8e:	4f01      	ldr	r7, [pc, #4]	@ (800ef94 <pow+0xdc>)
 800ef90:	2600      	movs	r6, #0
 800ef92:	e7e2      	b.n	800ef5a <pow+0xa2>
 800ef94:	3ff00000 	.word	0x3ff00000

0800ef98 <sqrt>:
 800ef98:	b538      	push	{r3, r4, r5, lr}
 800ef9a:	ed2d 8b02 	vpush	{d8}
 800ef9e:	ec55 4b10 	vmov	r4, r5, d0
 800efa2:	f000 f95f 	bl	800f264 <__ieee754_sqrt>
 800efa6:	4622      	mov	r2, r4
 800efa8:	462b      	mov	r3, r5
 800efaa:	4620      	mov	r0, r4
 800efac:	4629      	mov	r1, r5
 800efae:	eeb0 8a40 	vmov.f32	s16, s0
 800efb2:	eef0 8a60 	vmov.f32	s17, s1
 800efb6:	f7f1 fdd9 	bl	8000b6c <__aeabi_dcmpun>
 800efba:	b990      	cbnz	r0, 800efe2 <sqrt+0x4a>
 800efbc:	2200      	movs	r2, #0
 800efbe:	2300      	movs	r3, #0
 800efc0:	4620      	mov	r0, r4
 800efc2:	4629      	mov	r1, r5
 800efc4:	f7f1 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 800efc8:	b158      	cbz	r0, 800efe2 <sqrt+0x4a>
 800efca:	f7fe f979 	bl	800d2c0 <__errno>
 800efce:	2321      	movs	r3, #33	@ 0x21
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	2200      	movs	r2, #0
 800efd4:	2300      	movs	r3, #0
 800efd6:	4610      	mov	r0, r2
 800efd8:	4619      	mov	r1, r3
 800efda:	f7f1 fc57 	bl	800088c <__aeabi_ddiv>
 800efde:	ec41 0b18 	vmov	d8, r0, r1
 800efe2:	eeb0 0a48 	vmov.f32	s0, s16
 800efe6:	eef0 0a68 	vmov.f32	s1, s17
 800efea:	ecbd 8b02 	vpop	{d8}
 800efee:	bd38      	pop	{r3, r4, r5, pc}

0800eff0 <cos>:
 800eff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eff2:	ec53 2b10 	vmov	r2, r3, d0
 800eff6:	4826      	ldr	r0, [pc, #152]	@ (800f090 <cos+0xa0>)
 800eff8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800effc:	4281      	cmp	r1, r0
 800effe:	d806      	bhi.n	800f00e <cos+0x1e>
 800f000:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f088 <cos+0x98>
 800f004:	b005      	add	sp, #20
 800f006:	f85d eb04 	ldr.w	lr, [sp], #4
 800f00a:	f000 ba51 	b.w	800f4b0 <__kernel_cos>
 800f00e:	4821      	ldr	r0, [pc, #132]	@ (800f094 <cos+0xa4>)
 800f010:	4281      	cmp	r1, r0
 800f012:	d908      	bls.n	800f026 <cos+0x36>
 800f014:	4610      	mov	r0, r2
 800f016:	4619      	mov	r1, r3
 800f018:	f7f1 f956 	bl	80002c8 <__aeabi_dsub>
 800f01c:	ec41 0b10 	vmov	d0, r0, r1
 800f020:	b005      	add	sp, #20
 800f022:	f85d fb04 	ldr.w	pc, [sp], #4
 800f026:	4668      	mov	r0, sp
 800f028:	f001 f90a 	bl	8010240 <__ieee754_rem_pio2>
 800f02c:	f000 0003 	and.w	r0, r0, #3
 800f030:	2801      	cmp	r0, #1
 800f032:	d00b      	beq.n	800f04c <cos+0x5c>
 800f034:	2802      	cmp	r0, #2
 800f036:	d015      	beq.n	800f064 <cos+0x74>
 800f038:	b9d8      	cbnz	r0, 800f072 <cos+0x82>
 800f03a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f03e:	ed9d 0b00 	vldr	d0, [sp]
 800f042:	f000 fa35 	bl	800f4b0 <__kernel_cos>
 800f046:	ec51 0b10 	vmov	r0, r1, d0
 800f04a:	e7e7      	b.n	800f01c <cos+0x2c>
 800f04c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f050:	ed9d 0b00 	vldr	d0, [sp]
 800f054:	f000 faf4 	bl	800f640 <__kernel_sin>
 800f058:	ec53 2b10 	vmov	r2, r3, d0
 800f05c:	4610      	mov	r0, r2
 800f05e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f062:	e7db      	b.n	800f01c <cos+0x2c>
 800f064:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f068:	ed9d 0b00 	vldr	d0, [sp]
 800f06c:	f000 fa20 	bl	800f4b0 <__kernel_cos>
 800f070:	e7f2      	b.n	800f058 <cos+0x68>
 800f072:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f076:	ed9d 0b00 	vldr	d0, [sp]
 800f07a:	2001      	movs	r0, #1
 800f07c:	f000 fae0 	bl	800f640 <__kernel_sin>
 800f080:	e7e1      	b.n	800f046 <cos+0x56>
 800f082:	bf00      	nop
 800f084:	f3af 8000 	nop.w
	...
 800f090:	3fe921fb 	.word	0x3fe921fb
 800f094:	7fefffff 	.word	0x7fefffff

0800f098 <acosf>:
 800f098:	b508      	push	{r3, lr}
 800f09a:	ed2d 8b02 	vpush	{d8}
 800f09e:	eeb0 8a40 	vmov.f32	s16, s0
 800f0a2:	f001 fad1 	bl	8010648 <__ieee754_acosf>
 800f0a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ae:	eef0 8a40 	vmov.f32	s17, s0
 800f0b2:	d615      	bvs.n	800f0e0 <acosf+0x48>
 800f0b4:	eeb0 0a48 	vmov.f32	s0, s16
 800f0b8:	f000 f866 	bl	800f188 <fabsf>
 800f0bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f0c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c8:	dd0a      	ble.n	800f0e0 <acosf+0x48>
 800f0ca:	f7fe f8f9 	bl	800d2c0 <__errno>
 800f0ce:	ecbd 8b02 	vpop	{d8}
 800f0d2:	2321      	movs	r3, #33	@ 0x21
 800f0d4:	6003      	str	r3, [r0, #0]
 800f0d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f0da:	4804      	ldr	r0, [pc, #16]	@ (800f0ec <acosf+0x54>)
 800f0dc:	f000 b866 	b.w	800f1ac <nanf>
 800f0e0:	eeb0 0a68 	vmov.f32	s0, s17
 800f0e4:	ecbd 8b02 	vpop	{d8}
 800f0e8:	bd08      	pop	{r3, pc}
 800f0ea:	bf00      	nop
 800f0ec:	080118bd 	.word	0x080118bd

0800f0f0 <asinf>:
 800f0f0:	b508      	push	{r3, lr}
 800f0f2:	ed2d 8b02 	vpush	{d8}
 800f0f6:	eeb0 8a40 	vmov.f32	s16, s0
 800f0fa:	f001 fb9d 	bl	8010838 <__ieee754_asinf>
 800f0fe:	eeb4 8a48 	vcmp.f32	s16, s16
 800f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f106:	eef0 8a40 	vmov.f32	s17, s0
 800f10a:	d615      	bvs.n	800f138 <asinf+0x48>
 800f10c:	eeb0 0a48 	vmov.f32	s0, s16
 800f110:	f000 f83a 	bl	800f188 <fabsf>
 800f114:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f118:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f120:	dd0a      	ble.n	800f138 <asinf+0x48>
 800f122:	f7fe f8cd 	bl	800d2c0 <__errno>
 800f126:	ecbd 8b02 	vpop	{d8}
 800f12a:	2321      	movs	r3, #33	@ 0x21
 800f12c:	6003      	str	r3, [r0, #0]
 800f12e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f132:	4804      	ldr	r0, [pc, #16]	@ (800f144 <asinf+0x54>)
 800f134:	f000 b83a 	b.w	800f1ac <nanf>
 800f138:	eeb0 0a68 	vmov.f32	s0, s17
 800f13c:	ecbd 8b02 	vpop	{d8}
 800f140:	bd08      	pop	{r3, pc}
 800f142:	bf00      	nop
 800f144:	080118bd 	.word	0x080118bd

0800f148 <atan2f>:
 800f148:	f001 bc5c 	b.w	8010a04 <__ieee754_atan2f>

0800f14c <sqrtf>:
 800f14c:	b508      	push	{r3, lr}
 800f14e:	ed2d 8b02 	vpush	{d8}
 800f152:	eeb0 8a40 	vmov.f32	s16, s0
 800f156:	f000 f95f 	bl	800f418 <__ieee754_sqrtf>
 800f15a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f162:	d60c      	bvs.n	800f17e <sqrtf+0x32>
 800f164:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f184 <sqrtf+0x38>
 800f168:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f170:	d505      	bpl.n	800f17e <sqrtf+0x32>
 800f172:	f7fe f8a5 	bl	800d2c0 <__errno>
 800f176:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f17a:	2321      	movs	r3, #33	@ 0x21
 800f17c:	6003      	str	r3, [r0, #0]
 800f17e:	ecbd 8b02 	vpop	{d8}
 800f182:	bd08      	pop	{r3, pc}
 800f184:	00000000 	.word	0x00000000

0800f188 <fabsf>:
 800f188:	ee10 3a10 	vmov	r3, s0
 800f18c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f190:	ee00 3a10 	vmov	s0, r3
 800f194:	4770      	bx	lr

0800f196 <finite>:
 800f196:	b082      	sub	sp, #8
 800f198:	ed8d 0b00 	vstr	d0, [sp]
 800f19c:	9801      	ldr	r0, [sp, #4]
 800f19e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f1a2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f1a6:	0fc0      	lsrs	r0, r0, #31
 800f1a8:	b002      	add	sp, #8
 800f1aa:	4770      	bx	lr

0800f1ac <nanf>:
 800f1ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f1b4 <nanf+0x8>
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	7fc00000 	.word	0x7fc00000

0800f1b8 <fmaxf>:
 800f1b8:	b508      	push	{r3, lr}
 800f1ba:	ed2d 8b02 	vpush	{d8}
 800f1be:	eeb0 8a40 	vmov.f32	s16, s0
 800f1c2:	eef0 8a60 	vmov.f32	s17, s1
 800f1c6:	f000 f831 	bl	800f22c <__fpclassifyf>
 800f1ca:	b930      	cbnz	r0, 800f1da <fmaxf+0x22>
 800f1cc:	eeb0 8a68 	vmov.f32	s16, s17
 800f1d0:	eeb0 0a48 	vmov.f32	s0, s16
 800f1d4:	ecbd 8b02 	vpop	{d8}
 800f1d8:	bd08      	pop	{r3, pc}
 800f1da:	eeb0 0a68 	vmov.f32	s0, s17
 800f1de:	f000 f825 	bl	800f22c <__fpclassifyf>
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	d0f4      	beq.n	800f1d0 <fmaxf+0x18>
 800f1e6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ee:	dded      	ble.n	800f1cc <fmaxf+0x14>
 800f1f0:	e7ee      	b.n	800f1d0 <fmaxf+0x18>

0800f1f2 <fminf>:
 800f1f2:	b508      	push	{r3, lr}
 800f1f4:	ed2d 8b02 	vpush	{d8}
 800f1f8:	eeb0 8a40 	vmov.f32	s16, s0
 800f1fc:	eef0 8a60 	vmov.f32	s17, s1
 800f200:	f000 f814 	bl	800f22c <__fpclassifyf>
 800f204:	b930      	cbnz	r0, 800f214 <fminf+0x22>
 800f206:	eeb0 8a68 	vmov.f32	s16, s17
 800f20a:	eeb0 0a48 	vmov.f32	s0, s16
 800f20e:	ecbd 8b02 	vpop	{d8}
 800f212:	bd08      	pop	{r3, pc}
 800f214:	eeb0 0a68 	vmov.f32	s0, s17
 800f218:	f000 f808 	bl	800f22c <__fpclassifyf>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d0f4      	beq.n	800f20a <fminf+0x18>
 800f220:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f228:	d5ed      	bpl.n	800f206 <fminf+0x14>
 800f22a:	e7ee      	b.n	800f20a <fminf+0x18>

0800f22c <__fpclassifyf>:
 800f22c:	ee10 3a10 	vmov	r3, s0
 800f230:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f234:	d00d      	beq.n	800f252 <__fpclassifyf+0x26>
 800f236:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f23a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f23e:	d30a      	bcc.n	800f256 <__fpclassifyf+0x2a>
 800f240:	4b07      	ldr	r3, [pc, #28]	@ (800f260 <__fpclassifyf+0x34>)
 800f242:	1e42      	subs	r2, r0, #1
 800f244:	429a      	cmp	r2, r3
 800f246:	d908      	bls.n	800f25a <__fpclassifyf+0x2e>
 800f248:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f24c:	4258      	negs	r0, r3
 800f24e:	4158      	adcs	r0, r3
 800f250:	4770      	bx	lr
 800f252:	2002      	movs	r0, #2
 800f254:	4770      	bx	lr
 800f256:	2004      	movs	r0, #4
 800f258:	4770      	bx	lr
 800f25a:	2003      	movs	r0, #3
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	007ffffe 	.word	0x007ffffe

0800f264 <__ieee754_sqrt>:
 800f264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	4a68      	ldr	r2, [pc, #416]	@ (800f40c <__ieee754_sqrt+0x1a8>)
 800f26a:	ec55 4b10 	vmov	r4, r5, d0
 800f26e:	43aa      	bics	r2, r5
 800f270:	462b      	mov	r3, r5
 800f272:	4621      	mov	r1, r4
 800f274:	d110      	bne.n	800f298 <__ieee754_sqrt+0x34>
 800f276:	4622      	mov	r2, r4
 800f278:	4620      	mov	r0, r4
 800f27a:	4629      	mov	r1, r5
 800f27c:	f7f1 f9dc 	bl	8000638 <__aeabi_dmul>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	f7f1 f820 	bl	80002cc <__adddf3>
 800f28c:	4604      	mov	r4, r0
 800f28e:	460d      	mov	r5, r1
 800f290:	ec45 4b10 	vmov	d0, r4, r5
 800f294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f298:	2d00      	cmp	r5, #0
 800f29a:	dc0e      	bgt.n	800f2ba <__ieee754_sqrt+0x56>
 800f29c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f2a0:	4322      	orrs	r2, r4
 800f2a2:	d0f5      	beq.n	800f290 <__ieee754_sqrt+0x2c>
 800f2a4:	b19d      	cbz	r5, 800f2ce <__ieee754_sqrt+0x6a>
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	f7f1 f80c 	bl	80002c8 <__aeabi_dsub>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	f7f1 faea 	bl	800088c <__aeabi_ddiv>
 800f2b8:	e7e8      	b.n	800f28c <__ieee754_sqrt+0x28>
 800f2ba:	152a      	asrs	r2, r5, #20
 800f2bc:	d115      	bne.n	800f2ea <__ieee754_sqrt+0x86>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	e009      	b.n	800f2d6 <__ieee754_sqrt+0x72>
 800f2c2:	0acb      	lsrs	r3, r1, #11
 800f2c4:	3a15      	subs	r2, #21
 800f2c6:	0549      	lsls	r1, r1, #21
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0fa      	beq.n	800f2c2 <__ieee754_sqrt+0x5e>
 800f2cc:	e7f7      	b.n	800f2be <__ieee754_sqrt+0x5a>
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	e7fa      	b.n	800f2c8 <__ieee754_sqrt+0x64>
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	02dc      	lsls	r4, r3, #11
 800f2d8:	d5fb      	bpl.n	800f2d2 <__ieee754_sqrt+0x6e>
 800f2da:	1e44      	subs	r4, r0, #1
 800f2dc:	1b12      	subs	r2, r2, r4
 800f2de:	f1c0 0420 	rsb	r4, r0, #32
 800f2e2:	fa21 f404 	lsr.w	r4, r1, r4
 800f2e6:	4323      	orrs	r3, r4
 800f2e8:	4081      	lsls	r1, r0
 800f2ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f2f6:	07d2      	lsls	r2, r2, #31
 800f2f8:	bf5c      	itt	pl
 800f2fa:	005b      	lslpl	r3, r3, #1
 800f2fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f300:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f304:	bf58      	it	pl
 800f306:	0049      	lslpl	r1, r1, #1
 800f308:	2600      	movs	r6, #0
 800f30a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f30e:	106d      	asrs	r5, r5, #1
 800f310:	0049      	lsls	r1, r1, #1
 800f312:	2016      	movs	r0, #22
 800f314:	4632      	mov	r2, r6
 800f316:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f31a:	1917      	adds	r7, r2, r4
 800f31c:	429f      	cmp	r7, r3
 800f31e:	bfde      	ittt	le
 800f320:	193a      	addle	r2, r7, r4
 800f322:	1bdb      	suble	r3, r3, r7
 800f324:	1936      	addle	r6, r6, r4
 800f326:	0fcf      	lsrs	r7, r1, #31
 800f328:	3801      	subs	r0, #1
 800f32a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f32e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f332:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f336:	d1f0      	bne.n	800f31a <__ieee754_sqrt+0xb6>
 800f338:	4604      	mov	r4, r0
 800f33a:	2720      	movs	r7, #32
 800f33c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f340:	429a      	cmp	r2, r3
 800f342:	eb00 0e0c 	add.w	lr, r0, ip
 800f346:	db02      	blt.n	800f34e <__ieee754_sqrt+0xea>
 800f348:	d113      	bne.n	800f372 <__ieee754_sqrt+0x10e>
 800f34a:	458e      	cmp	lr, r1
 800f34c:	d811      	bhi.n	800f372 <__ieee754_sqrt+0x10e>
 800f34e:	f1be 0f00 	cmp.w	lr, #0
 800f352:	eb0e 000c 	add.w	r0, lr, ip
 800f356:	da42      	bge.n	800f3de <__ieee754_sqrt+0x17a>
 800f358:	2800      	cmp	r0, #0
 800f35a:	db40      	blt.n	800f3de <__ieee754_sqrt+0x17a>
 800f35c:	f102 0801 	add.w	r8, r2, #1
 800f360:	1a9b      	subs	r3, r3, r2
 800f362:	458e      	cmp	lr, r1
 800f364:	bf88      	it	hi
 800f366:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f36a:	eba1 010e 	sub.w	r1, r1, lr
 800f36e:	4464      	add	r4, ip
 800f370:	4642      	mov	r2, r8
 800f372:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f376:	3f01      	subs	r7, #1
 800f378:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f37c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f380:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f384:	d1dc      	bne.n	800f340 <__ieee754_sqrt+0xdc>
 800f386:	4319      	orrs	r1, r3
 800f388:	d01b      	beq.n	800f3c2 <__ieee754_sqrt+0x15e>
 800f38a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f410 <__ieee754_sqrt+0x1ac>
 800f38e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f414 <__ieee754_sqrt+0x1b0>
 800f392:	e9da 0100 	ldrd	r0, r1, [sl]
 800f396:	e9db 2300 	ldrd	r2, r3, [fp]
 800f39a:	f7f0 ff95 	bl	80002c8 <__aeabi_dsub>
 800f39e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	4640      	mov	r0, r8
 800f3a8:	4649      	mov	r1, r9
 800f3aa:	f7f1 fbc1 	bl	8000b30 <__aeabi_dcmple>
 800f3ae:	b140      	cbz	r0, 800f3c2 <__ieee754_sqrt+0x15e>
 800f3b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f3b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f3bc:	d111      	bne.n	800f3e2 <__ieee754_sqrt+0x17e>
 800f3be:	3601      	adds	r6, #1
 800f3c0:	463c      	mov	r4, r7
 800f3c2:	1072      	asrs	r2, r6, #1
 800f3c4:	0863      	lsrs	r3, r4, #1
 800f3c6:	07f1      	lsls	r1, r6, #31
 800f3c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f3cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f3d0:	bf48      	it	mi
 800f3d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f3d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f3da:	4618      	mov	r0, r3
 800f3dc:	e756      	b.n	800f28c <__ieee754_sqrt+0x28>
 800f3de:	4690      	mov	r8, r2
 800f3e0:	e7be      	b.n	800f360 <__ieee754_sqrt+0xfc>
 800f3e2:	f7f0 ff73 	bl	80002cc <__adddf3>
 800f3e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	4649      	mov	r1, r9
 800f3f2:	f7f1 fb93 	bl	8000b1c <__aeabi_dcmplt>
 800f3f6:	b120      	cbz	r0, 800f402 <__ieee754_sqrt+0x19e>
 800f3f8:	1ca0      	adds	r0, r4, #2
 800f3fa:	bf08      	it	eq
 800f3fc:	3601      	addeq	r6, #1
 800f3fe:	3402      	adds	r4, #2
 800f400:	e7df      	b.n	800f3c2 <__ieee754_sqrt+0x15e>
 800f402:	1c63      	adds	r3, r4, #1
 800f404:	f023 0401 	bic.w	r4, r3, #1
 800f408:	e7db      	b.n	800f3c2 <__ieee754_sqrt+0x15e>
 800f40a:	bf00      	nop
 800f40c:	7ff00000 	.word	0x7ff00000
 800f410:	20000220 	.word	0x20000220
 800f414:	20000218 	.word	0x20000218

0800f418 <__ieee754_sqrtf>:
 800f418:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f41c:	4770      	bx	lr
	...

0800f420 <round>:
 800f420:	ec51 0b10 	vmov	r0, r1, d0
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f42a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f42e:	2a13      	cmp	r2, #19
 800f430:	460b      	mov	r3, r1
 800f432:	4605      	mov	r5, r0
 800f434:	dc1b      	bgt.n	800f46e <round+0x4e>
 800f436:	2a00      	cmp	r2, #0
 800f438:	da0b      	bge.n	800f452 <round+0x32>
 800f43a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f43e:	3201      	adds	r2, #1
 800f440:	bf04      	itt	eq
 800f442:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f446:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f44a:	2200      	movs	r2, #0
 800f44c:	4619      	mov	r1, r3
 800f44e:	4610      	mov	r0, r2
 800f450:	e015      	b.n	800f47e <round+0x5e>
 800f452:	4c15      	ldr	r4, [pc, #84]	@ (800f4a8 <round+0x88>)
 800f454:	4114      	asrs	r4, r2
 800f456:	ea04 0601 	and.w	r6, r4, r1
 800f45a:	4306      	orrs	r6, r0
 800f45c:	d00f      	beq.n	800f47e <round+0x5e>
 800f45e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f462:	fa41 f202 	asr.w	r2, r1, r2
 800f466:	4413      	add	r3, r2
 800f468:	ea23 0304 	bic.w	r3, r3, r4
 800f46c:	e7ed      	b.n	800f44a <round+0x2a>
 800f46e:	2a33      	cmp	r2, #51	@ 0x33
 800f470:	dd08      	ble.n	800f484 <round+0x64>
 800f472:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f476:	d102      	bne.n	800f47e <round+0x5e>
 800f478:	4602      	mov	r2, r0
 800f47a:	f7f0 ff27 	bl	80002cc <__adddf3>
 800f47e:	ec41 0b10 	vmov	d0, r0, r1
 800f482:	bd70      	pop	{r4, r5, r6, pc}
 800f484:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f488:	f04f 34ff 	mov.w	r4, #4294967295
 800f48c:	40f4      	lsrs	r4, r6
 800f48e:	4204      	tst	r4, r0
 800f490:	d0f5      	beq.n	800f47e <round+0x5e>
 800f492:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f496:	2201      	movs	r2, #1
 800f498:	408a      	lsls	r2, r1
 800f49a:	1952      	adds	r2, r2, r5
 800f49c:	bf28      	it	cs
 800f49e:	3301      	addcs	r3, #1
 800f4a0:	ea22 0204 	bic.w	r2, r2, r4
 800f4a4:	e7d2      	b.n	800f44c <round+0x2c>
 800f4a6:	bf00      	nop
 800f4a8:	000fffff 	.word	0x000fffff
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <__kernel_cos>:
 800f4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b4:	ec57 6b10 	vmov	r6, r7, d0
 800f4b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f4bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f4c0:	ed8d 1b00 	vstr	d1, [sp]
 800f4c4:	d206      	bcs.n	800f4d4 <__kernel_cos+0x24>
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	f7f1 fb65 	bl	8000b98 <__aeabi_d2iz>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	f000 8088 	beq.w	800f5e4 <__kernel_cos+0x134>
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	463b      	mov	r3, r7
 800f4d8:	4630      	mov	r0, r6
 800f4da:	4639      	mov	r1, r7
 800f4dc:	f7f1 f8ac 	bl	8000638 <__aeabi_dmul>
 800f4e0:	4b51      	ldr	r3, [pc, #324]	@ (800f628 <__kernel_cos+0x178>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	460d      	mov	r5, r1
 800f4e8:	f7f1 f8a6 	bl	8000638 <__aeabi_dmul>
 800f4ec:	a340      	add	r3, pc, #256	@ (adr r3, 800f5f0 <__kernel_cos+0x140>)
 800f4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f2:	4682      	mov	sl, r0
 800f4f4:	468b      	mov	fp, r1
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	f7f1 f89d 	bl	8000638 <__aeabi_dmul>
 800f4fe:	a33e      	add	r3, pc, #248	@ (adr r3, 800f5f8 <__kernel_cos+0x148>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f0 fee2 	bl	80002cc <__adddf3>
 800f508:	4622      	mov	r2, r4
 800f50a:	462b      	mov	r3, r5
 800f50c:	f7f1 f894 	bl	8000638 <__aeabi_dmul>
 800f510:	a33b      	add	r3, pc, #236	@ (adr r3, 800f600 <__kernel_cos+0x150>)
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	f7f0 fed7 	bl	80002c8 <__aeabi_dsub>
 800f51a:	4622      	mov	r2, r4
 800f51c:	462b      	mov	r3, r5
 800f51e:	f7f1 f88b 	bl	8000638 <__aeabi_dmul>
 800f522:	a339      	add	r3, pc, #228	@ (adr r3, 800f608 <__kernel_cos+0x158>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	f7f0 fed0 	bl	80002cc <__adddf3>
 800f52c:	4622      	mov	r2, r4
 800f52e:	462b      	mov	r3, r5
 800f530:	f7f1 f882 	bl	8000638 <__aeabi_dmul>
 800f534:	a336      	add	r3, pc, #216	@ (adr r3, 800f610 <__kernel_cos+0x160>)
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	f7f0 fec5 	bl	80002c8 <__aeabi_dsub>
 800f53e:	4622      	mov	r2, r4
 800f540:	462b      	mov	r3, r5
 800f542:	f7f1 f879 	bl	8000638 <__aeabi_dmul>
 800f546:	a334      	add	r3, pc, #208	@ (adr r3, 800f618 <__kernel_cos+0x168>)
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f7f0 febe 	bl	80002cc <__adddf3>
 800f550:	4622      	mov	r2, r4
 800f552:	462b      	mov	r3, r5
 800f554:	f7f1 f870 	bl	8000638 <__aeabi_dmul>
 800f558:	4622      	mov	r2, r4
 800f55a:	462b      	mov	r3, r5
 800f55c:	f7f1 f86c 	bl	8000638 <__aeabi_dmul>
 800f560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f564:	4604      	mov	r4, r0
 800f566:	460d      	mov	r5, r1
 800f568:	4630      	mov	r0, r6
 800f56a:	4639      	mov	r1, r7
 800f56c:	f7f1 f864 	bl	8000638 <__aeabi_dmul>
 800f570:	460b      	mov	r3, r1
 800f572:	4602      	mov	r2, r0
 800f574:	4629      	mov	r1, r5
 800f576:	4620      	mov	r0, r4
 800f578:	f7f0 fea6 	bl	80002c8 <__aeabi_dsub>
 800f57c:	4b2b      	ldr	r3, [pc, #172]	@ (800f62c <__kernel_cos+0x17c>)
 800f57e:	4598      	cmp	r8, r3
 800f580:	4606      	mov	r6, r0
 800f582:	460f      	mov	r7, r1
 800f584:	d810      	bhi.n	800f5a8 <__kernel_cos+0xf8>
 800f586:	4602      	mov	r2, r0
 800f588:	460b      	mov	r3, r1
 800f58a:	4650      	mov	r0, sl
 800f58c:	4659      	mov	r1, fp
 800f58e:	f7f0 fe9b 	bl	80002c8 <__aeabi_dsub>
 800f592:	460b      	mov	r3, r1
 800f594:	4926      	ldr	r1, [pc, #152]	@ (800f630 <__kernel_cos+0x180>)
 800f596:	4602      	mov	r2, r0
 800f598:	2000      	movs	r0, #0
 800f59a:	f7f0 fe95 	bl	80002c8 <__aeabi_dsub>
 800f59e:	ec41 0b10 	vmov	d0, r0, r1
 800f5a2:	b003      	add	sp, #12
 800f5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a8:	4b22      	ldr	r3, [pc, #136]	@ (800f634 <__kernel_cos+0x184>)
 800f5aa:	4921      	ldr	r1, [pc, #132]	@ (800f630 <__kernel_cos+0x180>)
 800f5ac:	4598      	cmp	r8, r3
 800f5ae:	bf8c      	ite	hi
 800f5b0:	4d21      	ldrhi	r5, [pc, #132]	@ (800f638 <__kernel_cos+0x188>)
 800f5b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f5b6:	2400      	movs	r4, #0
 800f5b8:	4622      	mov	r2, r4
 800f5ba:	462b      	mov	r3, r5
 800f5bc:	2000      	movs	r0, #0
 800f5be:	f7f0 fe83 	bl	80002c8 <__aeabi_dsub>
 800f5c2:	4622      	mov	r2, r4
 800f5c4:	4680      	mov	r8, r0
 800f5c6:	4689      	mov	r9, r1
 800f5c8:	462b      	mov	r3, r5
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	4659      	mov	r1, fp
 800f5ce:	f7f0 fe7b 	bl	80002c8 <__aeabi_dsub>
 800f5d2:	4632      	mov	r2, r6
 800f5d4:	463b      	mov	r3, r7
 800f5d6:	f7f0 fe77 	bl	80002c8 <__aeabi_dsub>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4640      	mov	r0, r8
 800f5e0:	4649      	mov	r1, r9
 800f5e2:	e7da      	b.n	800f59a <__kernel_cos+0xea>
 800f5e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f620 <__kernel_cos+0x170>
 800f5e8:	e7db      	b.n	800f5a2 <__kernel_cos+0xf2>
 800f5ea:	bf00      	nop
 800f5ec:	f3af 8000 	nop.w
 800f5f0:	be8838d4 	.word	0xbe8838d4
 800f5f4:	bda8fae9 	.word	0xbda8fae9
 800f5f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f5fc:	3e21ee9e 	.word	0x3e21ee9e
 800f600:	809c52ad 	.word	0x809c52ad
 800f604:	3e927e4f 	.word	0x3e927e4f
 800f608:	19cb1590 	.word	0x19cb1590
 800f60c:	3efa01a0 	.word	0x3efa01a0
 800f610:	16c15177 	.word	0x16c15177
 800f614:	3f56c16c 	.word	0x3f56c16c
 800f618:	5555554c 	.word	0x5555554c
 800f61c:	3fa55555 	.word	0x3fa55555
 800f620:	00000000 	.word	0x00000000
 800f624:	3ff00000 	.word	0x3ff00000
 800f628:	3fe00000 	.word	0x3fe00000
 800f62c:	3fd33332 	.word	0x3fd33332
 800f630:	3ff00000 	.word	0x3ff00000
 800f634:	3fe90000 	.word	0x3fe90000
 800f638:	3fd20000 	.word	0x3fd20000
 800f63c:	00000000 	.word	0x00000000

0800f640 <__kernel_sin>:
 800f640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f644:	ec55 4b10 	vmov	r4, r5, d0
 800f648:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f64c:	b085      	sub	sp, #20
 800f64e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f652:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f656:	4680      	mov	r8, r0
 800f658:	d205      	bcs.n	800f666 <__kernel_sin+0x26>
 800f65a:	4620      	mov	r0, r4
 800f65c:	4629      	mov	r1, r5
 800f65e:	f7f1 fa9b 	bl	8000b98 <__aeabi_d2iz>
 800f662:	2800      	cmp	r0, #0
 800f664:	d052      	beq.n	800f70c <__kernel_sin+0xcc>
 800f666:	4622      	mov	r2, r4
 800f668:	462b      	mov	r3, r5
 800f66a:	4620      	mov	r0, r4
 800f66c:	4629      	mov	r1, r5
 800f66e:	f7f0 ffe3 	bl	8000638 <__aeabi_dmul>
 800f672:	4682      	mov	sl, r0
 800f674:	468b      	mov	fp, r1
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4620      	mov	r0, r4
 800f67c:	4629      	mov	r1, r5
 800f67e:	f7f0 ffdb 	bl	8000638 <__aeabi_dmul>
 800f682:	a342      	add	r3, pc, #264	@ (adr r3, 800f78c <__kernel_sin+0x14c>)
 800f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f688:	e9cd 0100 	strd	r0, r1, [sp]
 800f68c:	4650      	mov	r0, sl
 800f68e:	4659      	mov	r1, fp
 800f690:	f7f0 ffd2 	bl	8000638 <__aeabi_dmul>
 800f694:	a33f      	add	r3, pc, #252	@ (adr r3, 800f794 <__kernel_sin+0x154>)
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	f7f0 fe15 	bl	80002c8 <__aeabi_dsub>
 800f69e:	4652      	mov	r2, sl
 800f6a0:	465b      	mov	r3, fp
 800f6a2:	f7f0 ffc9 	bl	8000638 <__aeabi_dmul>
 800f6a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800f79c <__kernel_sin+0x15c>)
 800f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ac:	f7f0 fe0e 	bl	80002cc <__adddf3>
 800f6b0:	4652      	mov	r2, sl
 800f6b2:	465b      	mov	r3, fp
 800f6b4:	f7f0 ffc0 	bl	8000638 <__aeabi_dmul>
 800f6b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800f7a4 <__kernel_sin+0x164>)
 800f6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6be:	f7f0 fe03 	bl	80002c8 <__aeabi_dsub>
 800f6c2:	4652      	mov	r2, sl
 800f6c4:	465b      	mov	r3, fp
 800f6c6:	f7f0 ffb7 	bl	8000638 <__aeabi_dmul>
 800f6ca:	a338      	add	r3, pc, #224	@ (adr r3, 800f7ac <__kernel_sin+0x16c>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f0 fdfc 	bl	80002cc <__adddf3>
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	460f      	mov	r7, r1
 800f6d8:	f1b8 0f00 	cmp.w	r8, #0
 800f6dc:	d11b      	bne.n	800f716 <__kernel_sin+0xd6>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	4650      	mov	r0, sl
 800f6e4:	4659      	mov	r1, fp
 800f6e6:	f7f0 ffa7 	bl	8000638 <__aeabi_dmul>
 800f6ea:	a325      	add	r3, pc, #148	@ (adr r3, 800f780 <__kernel_sin+0x140>)
 800f6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f0:	f7f0 fdea 	bl	80002c8 <__aeabi_dsub>
 800f6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f8:	f7f0 ff9e 	bl	8000638 <__aeabi_dmul>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	4620      	mov	r0, r4
 800f702:	4629      	mov	r1, r5
 800f704:	f7f0 fde2 	bl	80002cc <__adddf3>
 800f708:	4604      	mov	r4, r0
 800f70a:	460d      	mov	r5, r1
 800f70c:	ec45 4b10 	vmov	d0, r4, r5
 800f710:	b005      	add	sp, #20
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f71a:	4b1b      	ldr	r3, [pc, #108]	@ (800f788 <__kernel_sin+0x148>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	f7f0 ff8b 	bl	8000638 <__aeabi_dmul>
 800f722:	4632      	mov	r2, r6
 800f724:	4680      	mov	r8, r0
 800f726:	4689      	mov	r9, r1
 800f728:	463b      	mov	r3, r7
 800f72a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f72e:	f7f0 ff83 	bl	8000638 <__aeabi_dmul>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4640      	mov	r0, r8
 800f738:	4649      	mov	r1, r9
 800f73a:	f7f0 fdc5 	bl	80002c8 <__aeabi_dsub>
 800f73e:	4652      	mov	r2, sl
 800f740:	465b      	mov	r3, fp
 800f742:	f7f0 ff79 	bl	8000638 <__aeabi_dmul>
 800f746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f74a:	f7f0 fdbd 	bl	80002c8 <__aeabi_dsub>
 800f74e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f780 <__kernel_sin+0x140>)
 800f750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f754:	4606      	mov	r6, r0
 800f756:	460f      	mov	r7, r1
 800f758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f75c:	f7f0 ff6c 	bl	8000638 <__aeabi_dmul>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	4630      	mov	r0, r6
 800f766:	4639      	mov	r1, r7
 800f768:	f7f0 fdb0 	bl	80002cc <__adddf3>
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	4620      	mov	r0, r4
 800f772:	4629      	mov	r1, r5
 800f774:	f7f0 fda8 	bl	80002c8 <__aeabi_dsub>
 800f778:	e7c6      	b.n	800f708 <__kernel_sin+0xc8>
 800f77a:	bf00      	nop
 800f77c:	f3af 8000 	nop.w
 800f780:	55555549 	.word	0x55555549
 800f784:	3fc55555 	.word	0x3fc55555
 800f788:	3fe00000 	.word	0x3fe00000
 800f78c:	5acfd57c 	.word	0x5acfd57c
 800f790:	3de5d93a 	.word	0x3de5d93a
 800f794:	8a2b9ceb 	.word	0x8a2b9ceb
 800f798:	3e5ae5e6 	.word	0x3e5ae5e6
 800f79c:	57b1fe7d 	.word	0x57b1fe7d
 800f7a0:	3ec71de3 	.word	0x3ec71de3
 800f7a4:	19c161d5 	.word	0x19c161d5
 800f7a8:	3f2a01a0 	.word	0x3f2a01a0
 800f7ac:	1110f8a6 	.word	0x1110f8a6
 800f7b0:	3f811111 	.word	0x3f811111
 800f7b4:	00000000 	.word	0x00000000

0800f7b8 <__ieee754_pow>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	b091      	sub	sp, #68	@ 0x44
 800f7be:	ed8d 1b00 	vstr	d1, [sp]
 800f7c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f7c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f7ca:	ea5a 0001 	orrs.w	r0, sl, r1
 800f7ce:	ec57 6b10 	vmov	r6, r7, d0
 800f7d2:	d113      	bne.n	800f7fc <__ieee754_pow+0x44>
 800f7d4:	19b3      	adds	r3, r6, r6
 800f7d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f7da:	4152      	adcs	r2, r2
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	4b98      	ldr	r3, [pc, #608]	@ (800fa40 <__ieee754_pow+0x288>)
 800f7e0:	4193      	sbcs	r3, r2
 800f7e2:	f080 84ea 	bcs.w	80101ba <__ieee754_pow+0xa02>
 800f7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	4639      	mov	r1, r7
 800f7ee:	f7f0 fd6d 	bl	80002cc <__adddf3>
 800f7f2:	ec41 0b10 	vmov	d0, r0, r1
 800f7f6:	b011      	add	sp, #68	@ 0x44
 800f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fc:	4a91      	ldr	r2, [pc, #580]	@ (800fa44 <__ieee754_pow+0x28c>)
 800f7fe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f802:	4590      	cmp	r8, r2
 800f804:	463d      	mov	r5, r7
 800f806:	4633      	mov	r3, r6
 800f808:	d806      	bhi.n	800f818 <__ieee754_pow+0x60>
 800f80a:	d101      	bne.n	800f810 <__ieee754_pow+0x58>
 800f80c:	2e00      	cmp	r6, #0
 800f80e:	d1ea      	bne.n	800f7e6 <__ieee754_pow+0x2e>
 800f810:	4592      	cmp	sl, r2
 800f812:	d801      	bhi.n	800f818 <__ieee754_pow+0x60>
 800f814:	d10e      	bne.n	800f834 <__ieee754_pow+0x7c>
 800f816:	b169      	cbz	r1, 800f834 <__ieee754_pow+0x7c>
 800f818:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f81c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f820:	431d      	orrs	r5, r3
 800f822:	d1e0      	bne.n	800f7e6 <__ieee754_pow+0x2e>
 800f824:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f828:	18db      	adds	r3, r3, r3
 800f82a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f82e:	4152      	adcs	r2, r2
 800f830:	429d      	cmp	r5, r3
 800f832:	e7d4      	b.n	800f7de <__ieee754_pow+0x26>
 800f834:	2d00      	cmp	r5, #0
 800f836:	46c3      	mov	fp, r8
 800f838:	da3a      	bge.n	800f8b0 <__ieee754_pow+0xf8>
 800f83a:	4a83      	ldr	r2, [pc, #524]	@ (800fa48 <__ieee754_pow+0x290>)
 800f83c:	4592      	cmp	sl, r2
 800f83e:	d84d      	bhi.n	800f8dc <__ieee754_pow+0x124>
 800f840:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f844:	4592      	cmp	sl, r2
 800f846:	f240 84c7 	bls.w	80101d8 <__ieee754_pow+0xa20>
 800f84a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f84e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f852:	2a14      	cmp	r2, #20
 800f854:	dd0f      	ble.n	800f876 <__ieee754_pow+0xbe>
 800f856:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f85a:	fa21 f402 	lsr.w	r4, r1, r2
 800f85e:	fa04 f202 	lsl.w	r2, r4, r2
 800f862:	428a      	cmp	r2, r1
 800f864:	f040 84b8 	bne.w	80101d8 <__ieee754_pow+0xa20>
 800f868:	f004 0401 	and.w	r4, r4, #1
 800f86c:	f1c4 0402 	rsb	r4, r4, #2
 800f870:	2900      	cmp	r1, #0
 800f872:	d158      	bne.n	800f926 <__ieee754_pow+0x16e>
 800f874:	e00e      	b.n	800f894 <__ieee754_pow+0xdc>
 800f876:	2900      	cmp	r1, #0
 800f878:	d154      	bne.n	800f924 <__ieee754_pow+0x16c>
 800f87a:	f1c2 0214 	rsb	r2, r2, #20
 800f87e:	fa4a f402 	asr.w	r4, sl, r2
 800f882:	fa04 f202 	lsl.w	r2, r4, r2
 800f886:	4552      	cmp	r2, sl
 800f888:	f040 84a3 	bne.w	80101d2 <__ieee754_pow+0xa1a>
 800f88c:	f004 0401 	and.w	r4, r4, #1
 800f890:	f1c4 0402 	rsb	r4, r4, #2
 800f894:	4a6d      	ldr	r2, [pc, #436]	@ (800fa4c <__ieee754_pow+0x294>)
 800f896:	4592      	cmp	sl, r2
 800f898:	d12e      	bne.n	800f8f8 <__ieee754_pow+0x140>
 800f89a:	f1b9 0f00 	cmp.w	r9, #0
 800f89e:	f280 8494 	bge.w	80101ca <__ieee754_pow+0xa12>
 800f8a2:	496a      	ldr	r1, [pc, #424]	@ (800fa4c <__ieee754_pow+0x294>)
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	463b      	mov	r3, r7
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	f7f0 ffef 	bl	800088c <__aeabi_ddiv>
 800f8ae:	e7a0      	b.n	800f7f2 <__ieee754_pow+0x3a>
 800f8b0:	2400      	movs	r4, #0
 800f8b2:	bbc1      	cbnz	r1, 800f926 <__ieee754_pow+0x16e>
 800f8b4:	4a63      	ldr	r2, [pc, #396]	@ (800fa44 <__ieee754_pow+0x28c>)
 800f8b6:	4592      	cmp	sl, r2
 800f8b8:	d1ec      	bne.n	800f894 <__ieee754_pow+0xdc>
 800f8ba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f8be:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f8c2:	431a      	orrs	r2, r3
 800f8c4:	f000 8479 	beq.w	80101ba <__ieee754_pow+0xa02>
 800f8c8:	4b61      	ldr	r3, [pc, #388]	@ (800fa50 <__ieee754_pow+0x298>)
 800f8ca:	4598      	cmp	r8, r3
 800f8cc:	d908      	bls.n	800f8e0 <__ieee754_pow+0x128>
 800f8ce:	f1b9 0f00 	cmp.w	r9, #0
 800f8d2:	f2c0 8476 	blt.w	80101c2 <__ieee754_pow+0xa0a>
 800f8d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8da:	e78a      	b.n	800f7f2 <__ieee754_pow+0x3a>
 800f8dc:	2402      	movs	r4, #2
 800f8de:	e7e8      	b.n	800f8b2 <__ieee754_pow+0xfa>
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	f04f 0000 	mov.w	r0, #0
 800f8e8:	f04f 0100 	mov.w	r1, #0
 800f8ec:	da81      	bge.n	800f7f2 <__ieee754_pow+0x3a>
 800f8ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f8f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f8f6:	e77c      	b.n	800f7f2 <__ieee754_pow+0x3a>
 800f8f8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f8fc:	d106      	bne.n	800f90c <__ieee754_pow+0x154>
 800f8fe:	4632      	mov	r2, r6
 800f900:	463b      	mov	r3, r7
 800f902:	4630      	mov	r0, r6
 800f904:	4639      	mov	r1, r7
 800f906:	f7f0 fe97 	bl	8000638 <__aeabi_dmul>
 800f90a:	e772      	b.n	800f7f2 <__ieee754_pow+0x3a>
 800f90c:	4a51      	ldr	r2, [pc, #324]	@ (800fa54 <__ieee754_pow+0x29c>)
 800f90e:	4591      	cmp	r9, r2
 800f910:	d109      	bne.n	800f926 <__ieee754_pow+0x16e>
 800f912:	2d00      	cmp	r5, #0
 800f914:	db07      	blt.n	800f926 <__ieee754_pow+0x16e>
 800f916:	ec47 6b10 	vmov	d0, r6, r7
 800f91a:	b011      	add	sp, #68	@ 0x44
 800f91c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f920:	f7ff bca0 	b.w	800f264 <__ieee754_sqrt>
 800f924:	2400      	movs	r4, #0
 800f926:	ec47 6b10 	vmov	d0, r6, r7
 800f92a:	9302      	str	r3, [sp, #8]
 800f92c:	f000 fe84 	bl	8010638 <fabs>
 800f930:	9b02      	ldr	r3, [sp, #8]
 800f932:	ec51 0b10 	vmov	r0, r1, d0
 800f936:	bb53      	cbnz	r3, 800f98e <__ieee754_pow+0x1d6>
 800f938:	4b44      	ldr	r3, [pc, #272]	@ (800fa4c <__ieee754_pow+0x294>)
 800f93a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f93e:	429a      	cmp	r2, r3
 800f940:	d002      	beq.n	800f948 <__ieee754_pow+0x190>
 800f942:	f1b8 0f00 	cmp.w	r8, #0
 800f946:	d122      	bne.n	800f98e <__ieee754_pow+0x1d6>
 800f948:	f1b9 0f00 	cmp.w	r9, #0
 800f94c:	da05      	bge.n	800f95a <__ieee754_pow+0x1a2>
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	2000      	movs	r0, #0
 800f954:	493d      	ldr	r1, [pc, #244]	@ (800fa4c <__ieee754_pow+0x294>)
 800f956:	f7f0 ff99 	bl	800088c <__aeabi_ddiv>
 800f95a:	2d00      	cmp	r5, #0
 800f95c:	f6bf af49 	bge.w	800f7f2 <__ieee754_pow+0x3a>
 800f960:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f964:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f968:	ea58 0804 	orrs.w	r8, r8, r4
 800f96c:	d108      	bne.n	800f980 <__ieee754_pow+0x1c8>
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	4610      	mov	r0, r2
 800f974:	4619      	mov	r1, r3
 800f976:	f7f0 fca7 	bl	80002c8 <__aeabi_dsub>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	e794      	b.n	800f8aa <__ieee754_pow+0xf2>
 800f980:	2c01      	cmp	r4, #1
 800f982:	f47f af36 	bne.w	800f7f2 <__ieee754_pow+0x3a>
 800f986:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f98a:	4619      	mov	r1, r3
 800f98c:	e731      	b.n	800f7f2 <__ieee754_pow+0x3a>
 800f98e:	0feb      	lsrs	r3, r5, #31
 800f990:	3b01      	subs	r3, #1
 800f992:	ea53 0204 	orrs.w	r2, r3, r4
 800f996:	d102      	bne.n	800f99e <__ieee754_pow+0x1e6>
 800f998:	4632      	mov	r2, r6
 800f99a:	463b      	mov	r3, r7
 800f99c:	e7e9      	b.n	800f972 <__ieee754_pow+0x1ba>
 800f99e:	3c01      	subs	r4, #1
 800f9a0:	431c      	orrs	r4, r3
 800f9a2:	d016      	beq.n	800f9d2 <__ieee754_pow+0x21a>
 800f9a4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800fa30 <__ieee754_pow+0x278>
 800f9a8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9b0:	f240 8112 	bls.w	800fbd8 <__ieee754_pow+0x420>
 800f9b4:	4b28      	ldr	r3, [pc, #160]	@ (800fa58 <__ieee754_pow+0x2a0>)
 800f9b6:	459a      	cmp	sl, r3
 800f9b8:	4b25      	ldr	r3, [pc, #148]	@ (800fa50 <__ieee754_pow+0x298>)
 800f9ba:	d916      	bls.n	800f9ea <__ieee754_pow+0x232>
 800f9bc:	4598      	cmp	r8, r3
 800f9be:	d80b      	bhi.n	800f9d8 <__ieee754_pow+0x220>
 800f9c0:	f1b9 0f00 	cmp.w	r9, #0
 800f9c4:	da0b      	bge.n	800f9de <__ieee754_pow+0x226>
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	b011      	add	sp, #68	@ 0x44
 800f9ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ce:	f001 ba43 	b.w	8010e58 <__math_oflow>
 800f9d2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800fa38 <__ieee754_pow+0x280>
 800f9d6:	e7e7      	b.n	800f9a8 <__ieee754_pow+0x1f0>
 800f9d8:	f1b9 0f00 	cmp.w	r9, #0
 800f9dc:	dcf3      	bgt.n	800f9c6 <__ieee754_pow+0x20e>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	b011      	add	sp, #68	@ 0x44
 800f9e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e6:	f001 ba2f 	b.w	8010e48 <__math_uflow>
 800f9ea:	4598      	cmp	r8, r3
 800f9ec:	d20c      	bcs.n	800fa08 <__ieee754_pow+0x250>
 800f9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f7f1 f891 	bl	8000b1c <__aeabi_dcmplt>
 800f9fa:	3800      	subs	r0, #0
 800f9fc:	bf18      	it	ne
 800f9fe:	2001      	movne	r0, #1
 800fa00:	f1b9 0f00 	cmp.w	r9, #0
 800fa04:	daec      	bge.n	800f9e0 <__ieee754_pow+0x228>
 800fa06:	e7df      	b.n	800f9c8 <__ieee754_pow+0x210>
 800fa08:	4b10      	ldr	r3, [pc, #64]	@ (800fa4c <__ieee754_pow+0x294>)
 800fa0a:	4598      	cmp	r8, r3
 800fa0c:	f04f 0200 	mov.w	r2, #0
 800fa10:	d924      	bls.n	800fa5c <__ieee754_pow+0x2a4>
 800fa12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa16:	2300      	movs	r3, #0
 800fa18:	f7f1 f880 	bl	8000b1c <__aeabi_dcmplt>
 800fa1c:	3800      	subs	r0, #0
 800fa1e:	bf18      	it	ne
 800fa20:	2001      	movne	r0, #1
 800fa22:	f1b9 0f00 	cmp.w	r9, #0
 800fa26:	dccf      	bgt.n	800f9c8 <__ieee754_pow+0x210>
 800fa28:	e7da      	b.n	800f9e0 <__ieee754_pow+0x228>
 800fa2a:	bf00      	nop
 800fa2c:	f3af 8000 	nop.w
 800fa30:	00000000 	.word	0x00000000
 800fa34:	3ff00000 	.word	0x3ff00000
 800fa38:	00000000 	.word	0x00000000
 800fa3c:	bff00000 	.word	0xbff00000
 800fa40:	fff00000 	.word	0xfff00000
 800fa44:	7ff00000 	.word	0x7ff00000
 800fa48:	433fffff 	.word	0x433fffff
 800fa4c:	3ff00000 	.word	0x3ff00000
 800fa50:	3fefffff 	.word	0x3fefffff
 800fa54:	3fe00000 	.word	0x3fe00000
 800fa58:	43f00000 	.word	0x43f00000
 800fa5c:	4b5a      	ldr	r3, [pc, #360]	@ (800fbc8 <__ieee754_pow+0x410>)
 800fa5e:	f7f0 fc33 	bl	80002c8 <__aeabi_dsub>
 800fa62:	a351      	add	r3, pc, #324	@ (adr r3, 800fba8 <__ieee754_pow+0x3f0>)
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	4604      	mov	r4, r0
 800fa6a:	460d      	mov	r5, r1
 800fa6c:	f7f0 fde4 	bl	8000638 <__aeabi_dmul>
 800fa70:	a34f      	add	r3, pc, #316	@ (adr r3, 800fbb0 <__ieee754_pow+0x3f8>)
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	4606      	mov	r6, r0
 800fa78:	460f      	mov	r7, r1
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	f7f0 fddb 	bl	8000638 <__aeabi_dmul>
 800fa82:	4b52      	ldr	r3, [pc, #328]	@ (800fbcc <__ieee754_pow+0x414>)
 800fa84:	4682      	mov	sl, r0
 800fa86:	468b      	mov	fp, r1
 800fa88:	2200      	movs	r2, #0
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	f7f0 fdd3 	bl	8000638 <__aeabi_dmul>
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	a148      	add	r1, pc, #288	@ (adr r1, 800fbb8 <__ieee754_pow+0x400>)
 800fa98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa9c:	f7f0 fc14 	bl	80002c8 <__aeabi_dsub>
 800faa0:	4622      	mov	r2, r4
 800faa2:	462b      	mov	r3, r5
 800faa4:	f7f0 fdc8 	bl	8000638 <__aeabi_dmul>
 800faa8:	4602      	mov	r2, r0
 800faaa:	460b      	mov	r3, r1
 800faac:	2000      	movs	r0, #0
 800faae:	4948      	ldr	r1, [pc, #288]	@ (800fbd0 <__ieee754_pow+0x418>)
 800fab0:	f7f0 fc0a 	bl	80002c8 <__aeabi_dsub>
 800fab4:	4622      	mov	r2, r4
 800fab6:	4680      	mov	r8, r0
 800fab8:	4689      	mov	r9, r1
 800faba:	462b      	mov	r3, r5
 800fabc:	4620      	mov	r0, r4
 800fabe:	4629      	mov	r1, r5
 800fac0:	f7f0 fdba 	bl	8000638 <__aeabi_dmul>
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	4640      	mov	r0, r8
 800faca:	4649      	mov	r1, r9
 800facc:	f7f0 fdb4 	bl	8000638 <__aeabi_dmul>
 800fad0:	a33b      	add	r3, pc, #236	@ (adr r3, 800fbc0 <__ieee754_pow+0x408>)
 800fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad6:	f7f0 fdaf 	bl	8000638 <__aeabi_dmul>
 800fada:	4602      	mov	r2, r0
 800fadc:	460b      	mov	r3, r1
 800fade:	4650      	mov	r0, sl
 800fae0:	4659      	mov	r1, fp
 800fae2:	f7f0 fbf1 	bl	80002c8 <__aeabi_dsub>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	4680      	mov	r8, r0
 800faec:	4689      	mov	r9, r1
 800faee:	4630      	mov	r0, r6
 800faf0:	4639      	mov	r1, r7
 800faf2:	f7f0 fbeb 	bl	80002cc <__adddf3>
 800faf6:	2400      	movs	r4, #0
 800faf8:	4632      	mov	r2, r6
 800fafa:	463b      	mov	r3, r7
 800fafc:	4620      	mov	r0, r4
 800fafe:	460d      	mov	r5, r1
 800fb00:	f7f0 fbe2 	bl	80002c8 <__aeabi_dsub>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	4640      	mov	r0, r8
 800fb0a:	4649      	mov	r1, r9
 800fb0c:	f7f0 fbdc 	bl	80002c8 <__aeabi_dsub>
 800fb10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fb18:	2300      	movs	r3, #0
 800fb1a:	9304      	str	r3, [sp, #16]
 800fb1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fb20:	4606      	mov	r6, r0
 800fb22:	460f      	mov	r7, r1
 800fb24:	4652      	mov	r2, sl
 800fb26:	465b      	mov	r3, fp
 800fb28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb2c:	f7f0 fbcc 	bl	80002c8 <__aeabi_dsub>
 800fb30:	4622      	mov	r2, r4
 800fb32:	462b      	mov	r3, r5
 800fb34:	f7f0 fd80 	bl	8000638 <__aeabi_dmul>
 800fb38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb3c:	4680      	mov	r8, r0
 800fb3e:	4689      	mov	r9, r1
 800fb40:	4630      	mov	r0, r6
 800fb42:	4639      	mov	r1, r7
 800fb44:	f7f0 fd78 	bl	8000638 <__aeabi_dmul>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4640      	mov	r0, r8
 800fb4e:	4649      	mov	r1, r9
 800fb50:	f7f0 fbbc 	bl	80002cc <__adddf3>
 800fb54:	4652      	mov	r2, sl
 800fb56:	465b      	mov	r3, fp
 800fb58:	4606      	mov	r6, r0
 800fb5a:	460f      	mov	r7, r1
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	4629      	mov	r1, r5
 800fb60:	f7f0 fd6a 	bl	8000638 <__aeabi_dmul>
 800fb64:	460b      	mov	r3, r1
 800fb66:	4602      	mov	r2, r0
 800fb68:	4680      	mov	r8, r0
 800fb6a:	4689      	mov	r9, r1
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	4639      	mov	r1, r7
 800fb70:	f7f0 fbac 	bl	80002cc <__adddf3>
 800fb74:	4b17      	ldr	r3, [pc, #92]	@ (800fbd4 <__ieee754_pow+0x41c>)
 800fb76:	4299      	cmp	r1, r3
 800fb78:	4604      	mov	r4, r0
 800fb7a:	460d      	mov	r5, r1
 800fb7c:	468a      	mov	sl, r1
 800fb7e:	468b      	mov	fp, r1
 800fb80:	f340 82ef 	ble.w	8010162 <__ieee754_pow+0x9aa>
 800fb84:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800fb88:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800fb8c:	4303      	orrs	r3, r0
 800fb8e:	f000 81e8 	beq.w	800ff62 <__ieee754_pow+0x7aa>
 800fb92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb96:	2200      	movs	r2, #0
 800fb98:	2300      	movs	r3, #0
 800fb9a:	f7f0 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 800fb9e:	3800      	subs	r0, #0
 800fba0:	bf18      	it	ne
 800fba2:	2001      	movne	r0, #1
 800fba4:	e710      	b.n	800f9c8 <__ieee754_pow+0x210>
 800fba6:	bf00      	nop
 800fba8:	60000000 	.word	0x60000000
 800fbac:	3ff71547 	.word	0x3ff71547
 800fbb0:	f85ddf44 	.word	0xf85ddf44
 800fbb4:	3e54ae0b 	.word	0x3e54ae0b
 800fbb8:	55555555 	.word	0x55555555
 800fbbc:	3fd55555 	.word	0x3fd55555
 800fbc0:	652b82fe 	.word	0x652b82fe
 800fbc4:	3ff71547 	.word	0x3ff71547
 800fbc8:	3ff00000 	.word	0x3ff00000
 800fbcc:	3fd00000 	.word	0x3fd00000
 800fbd0:	3fe00000 	.word	0x3fe00000
 800fbd4:	408fffff 	.word	0x408fffff
 800fbd8:	4bd5      	ldr	r3, [pc, #852]	@ (800ff30 <__ieee754_pow+0x778>)
 800fbda:	402b      	ands	r3, r5
 800fbdc:	2200      	movs	r2, #0
 800fbde:	b92b      	cbnz	r3, 800fbec <__ieee754_pow+0x434>
 800fbe0:	4bd4      	ldr	r3, [pc, #848]	@ (800ff34 <__ieee754_pow+0x77c>)
 800fbe2:	f7f0 fd29 	bl	8000638 <__aeabi_dmul>
 800fbe6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fbea:	468b      	mov	fp, r1
 800fbec:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fbf0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fbf4:	4413      	add	r3, r2
 800fbf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbf8:	4bcf      	ldr	r3, [pc, #828]	@ (800ff38 <__ieee754_pow+0x780>)
 800fbfa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800fbfe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800fc02:	459b      	cmp	fp, r3
 800fc04:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fc08:	dd08      	ble.n	800fc1c <__ieee754_pow+0x464>
 800fc0a:	4bcc      	ldr	r3, [pc, #816]	@ (800ff3c <__ieee754_pow+0x784>)
 800fc0c:	459b      	cmp	fp, r3
 800fc0e:	f340 81a5 	ble.w	800ff5c <__ieee754_pow+0x7a4>
 800fc12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc14:	3301      	adds	r3, #1
 800fc16:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc18:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800fc1c:	f04f 0a00 	mov.w	sl, #0
 800fc20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fc24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc26:	4bc6      	ldr	r3, [pc, #792]	@ (800ff40 <__ieee754_pow+0x788>)
 800fc28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fc2c:	ed93 7b00 	vldr	d7, [r3]
 800fc30:	4629      	mov	r1, r5
 800fc32:	ec53 2b17 	vmov	r2, r3, d7
 800fc36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc3e:	f7f0 fb43 	bl	80002c8 <__aeabi_dsub>
 800fc42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fc46:	4606      	mov	r6, r0
 800fc48:	460f      	mov	r7, r1
 800fc4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc4e:	f7f0 fb3d 	bl	80002cc <__adddf3>
 800fc52:	4602      	mov	r2, r0
 800fc54:	460b      	mov	r3, r1
 800fc56:	2000      	movs	r0, #0
 800fc58:	49ba      	ldr	r1, [pc, #744]	@ (800ff44 <__ieee754_pow+0x78c>)
 800fc5a:	f7f0 fe17 	bl	800088c <__aeabi_ddiv>
 800fc5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	4630      	mov	r0, r6
 800fc68:	4639      	mov	r1, r7
 800fc6a:	f7f0 fce5 	bl	8000638 <__aeabi_dmul>
 800fc6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc72:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fc76:	106d      	asrs	r5, r5, #1
 800fc78:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fc7c:	f04f 0b00 	mov.w	fp, #0
 800fc80:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800fc84:	4661      	mov	r1, ip
 800fc86:	2200      	movs	r2, #0
 800fc88:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	46e1      	mov	r9, ip
 800fc90:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fc94:	4614      	mov	r4, r2
 800fc96:	461d      	mov	r5, r3
 800fc98:	f7f0 fcce 	bl	8000638 <__aeabi_dmul>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	460b      	mov	r3, r1
 800fca0:	4630      	mov	r0, r6
 800fca2:	4639      	mov	r1, r7
 800fca4:	f7f0 fb10 	bl	80002c8 <__aeabi_dsub>
 800fca8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcac:	4606      	mov	r6, r0
 800fcae:	460f      	mov	r7, r1
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	f7f0 fb08 	bl	80002c8 <__aeabi_dsub>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fcc0:	f7f0 fb02 	bl	80002c8 <__aeabi_dsub>
 800fcc4:	465a      	mov	r2, fp
 800fcc6:	464b      	mov	r3, r9
 800fcc8:	f7f0 fcb6 	bl	8000638 <__aeabi_dmul>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	4639      	mov	r1, r7
 800fcd4:	f7f0 faf8 	bl	80002c8 <__aeabi_dsub>
 800fcd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fcdc:	f7f0 fcac 	bl	8000638 <__aeabi_dmul>
 800fce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fce4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fce8:	4610      	mov	r0, r2
 800fcea:	4619      	mov	r1, r3
 800fcec:	f7f0 fca4 	bl	8000638 <__aeabi_dmul>
 800fcf0:	a37d      	add	r3, pc, #500	@ (adr r3, 800fee8 <__ieee754_pow+0x730>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	460d      	mov	r5, r1
 800fcfa:	f7f0 fc9d 	bl	8000638 <__aeabi_dmul>
 800fcfe:	a37c      	add	r3, pc, #496	@ (adr r3, 800fef0 <__ieee754_pow+0x738>)
 800fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd04:	f7f0 fae2 	bl	80002cc <__adddf3>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	f7f0 fc94 	bl	8000638 <__aeabi_dmul>
 800fd10:	a379      	add	r3, pc, #484	@ (adr r3, 800fef8 <__ieee754_pow+0x740>)
 800fd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd16:	f7f0 fad9 	bl	80002cc <__adddf3>
 800fd1a:	4622      	mov	r2, r4
 800fd1c:	462b      	mov	r3, r5
 800fd1e:	f7f0 fc8b 	bl	8000638 <__aeabi_dmul>
 800fd22:	a377      	add	r3, pc, #476	@ (adr r3, 800ff00 <__ieee754_pow+0x748>)
 800fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd28:	f7f0 fad0 	bl	80002cc <__adddf3>
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	462b      	mov	r3, r5
 800fd30:	f7f0 fc82 	bl	8000638 <__aeabi_dmul>
 800fd34:	a374      	add	r3, pc, #464	@ (adr r3, 800ff08 <__ieee754_pow+0x750>)
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	f7f0 fac7 	bl	80002cc <__adddf3>
 800fd3e:	4622      	mov	r2, r4
 800fd40:	462b      	mov	r3, r5
 800fd42:	f7f0 fc79 	bl	8000638 <__aeabi_dmul>
 800fd46:	a372      	add	r3, pc, #456	@ (adr r3, 800ff10 <__ieee754_pow+0x758>)
 800fd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4c:	f7f0 fabe 	bl	80002cc <__adddf3>
 800fd50:	4622      	mov	r2, r4
 800fd52:	4606      	mov	r6, r0
 800fd54:	460f      	mov	r7, r1
 800fd56:	462b      	mov	r3, r5
 800fd58:	4620      	mov	r0, r4
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	f7f0 fc6c 	bl	8000638 <__aeabi_dmul>
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	4630      	mov	r0, r6
 800fd66:	4639      	mov	r1, r7
 800fd68:	f7f0 fc66 	bl	8000638 <__aeabi_dmul>
 800fd6c:	465a      	mov	r2, fp
 800fd6e:	4604      	mov	r4, r0
 800fd70:	460d      	mov	r5, r1
 800fd72:	464b      	mov	r3, r9
 800fd74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd78:	f7f0 faa8 	bl	80002cc <__adddf3>
 800fd7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd80:	f7f0 fc5a 	bl	8000638 <__aeabi_dmul>
 800fd84:	4622      	mov	r2, r4
 800fd86:	462b      	mov	r3, r5
 800fd88:	f7f0 faa0 	bl	80002cc <__adddf3>
 800fd8c:	465a      	mov	r2, fp
 800fd8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd92:	464b      	mov	r3, r9
 800fd94:	4658      	mov	r0, fp
 800fd96:	4649      	mov	r1, r9
 800fd98:	f7f0 fc4e 	bl	8000638 <__aeabi_dmul>
 800fd9c:	4b6a      	ldr	r3, [pc, #424]	@ (800ff48 <__ieee754_pow+0x790>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4606      	mov	r6, r0
 800fda2:	460f      	mov	r7, r1
 800fda4:	f7f0 fa92 	bl	80002cc <__adddf3>
 800fda8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fdac:	f7f0 fa8e 	bl	80002cc <__adddf3>
 800fdb0:	46d8      	mov	r8, fp
 800fdb2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	465a      	mov	r2, fp
 800fdba:	460b      	mov	r3, r1
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fdc4:	f7f0 fc38 	bl	8000638 <__aeabi_dmul>
 800fdc8:	465c      	mov	r4, fp
 800fdca:	4680      	mov	r8, r0
 800fdcc:	4689      	mov	r9, r1
 800fdce:	4b5e      	ldr	r3, [pc, #376]	@ (800ff48 <__ieee754_pow+0x790>)
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	f7f0 fa77 	bl	80002c8 <__aeabi_dsub>
 800fdda:	4632      	mov	r2, r6
 800fddc:	463b      	mov	r3, r7
 800fdde:	f7f0 fa73 	bl	80002c8 <__aeabi_dsub>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fdea:	f7f0 fa6d 	bl	80002c8 <__aeabi_dsub>
 800fdee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdf2:	f7f0 fc21 	bl	8000638 <__aeabi_dmul>
 800fdf6:	4622      	mov	r2, r4
 800fdf8:	4606      	mov	r6, r0
 800fdfa:	460f      	mov	r7, r1
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe02:	f7f0 fc19 	bl	8000638 <__aeabi_dmul>
 800fe06:	4602      	mov	r2, r0
 800fe08:	460b      	mov	r3, r1
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	4639      	mov	r1, r7
 800fe0e:	f7f0 fa5d 	bl	80002cc <__adddf3>
 800fe12:	4606      	mov	r6, r0
 800fe14:	460f      	mov	r7, r1
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4640      	mov	r0, r8
 800fe1c:	4649      	mov	r1, r9
 800fe1e:	f7f0 fa55 	bl	80002cc <__adddf3>
 800fe22:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fe26:	a33c      	add	r3, pc, #240	@ (adr r3, 800ff18 <__ieee754_pow+0x760>)
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	4658      	mov	r0, fp
 800fe2e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fe32:	460d      	mov	r5, r1
 800fe34:	f7f0 fc00 	bl	8000638 <__aeabi_dmul>
 800fe38:	465c      	mov	r4, fp
 800fe3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe3e:	4642      	mov	r2, r8
 800fe40:	464b      	mov	r3, r9
 800fe42:	4620      	mov	r0, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	f7f0 fa3f 	bl	80002c8 <__aeabi_dsub>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	4630      	mov	r0, r6
 800fe50:	4639      	mov	r1, r7
 800fe52:	f7f0 fa39 	bl	80002c8 <__aeabi_dsub>
 800fe56:	a332      	add	r3, pc, #200	@ (adr r3, 800ff20 <__ieee754_pow+0x768>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f7f0 fbec 	bl	8000638 <__aeabi_dmul>
 800fe60:	a331      	add	r3, pc, #196	@ (adr r3, 800ff28 <__ieee754_pow+0x770>)
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	4606      	mov	r6, r0
 800fe68:	460f      	mov	r7, r1
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	f7f0 fbe3 	bl	8000638 <__aeabi_dmul>
 800fe72:	4602      	mov	r2, r0
 800fe74:	460b      	mov	r3, r1
 800fe76:	4630      	mov	r0, r6
 800fe78:	4639      	mov	r1, r7
 800fe7a:	f7f0 fa27 	bl	80002cc <__adddf3>
 800fe7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fe80:	4b32      	ldr	r3, [pc, #200]	@ (800ff4c <__ieee754_pow+0x794>)
 800fe82:	4413      	add	r3, r2
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	f7f0 fa20 	bl	80002cc <__adddf3>
 800fe8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fe90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fe92:	f7f0 fb67 	bl	8000564 <__aeabi_i2d>
 800fe96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fe98:	4b2d      	ldr	r3, [pc, #180]	@ (800ff50 <__ieee754_pow+0x798>)
 800fe9a:	4413      	add	r3, r2
 800fe9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fea0:	4606      	mov	r6, r0
 800fea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fea6:	460f      	mov	r7, r1
 800fea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800feac:	f7f0 fa0e 	bl	80002cc <__adddf3>
 800feb0:	4642      	mov	r2, r8
 800feb2:	464b      	mov	r3, r9
 800feb4:	f7f0 fa0a 	bl	80002cc <__adddf3>
 800feb8:	4632      	mov	r2, r6
 800feba:	463b      	mov	r3, r7
 800febc:	f7f0 fa06 	bl	80002cc <__adddf3>
 800fec0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fec4:	4632      	mov	r2, r6
 800fec6:	463b      	mov	r3, r7
 800fec8:	4658      	mov	r0, fp
 800feca:	460d      	mov	r5, r1
 800fecc:	f7f0 f9fc 	bl	80002c8 <__aeabi_dsub>
 800fed0:	4642      	mov	r2, r8
 800fed2:	464b      	mov	r3, r9
 800fed4:	f7f0 f9f8 	bl	80002c8 <__aeabi_dsub>
 800fed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fedc:	f7f0 f9f4 	bl	80002c8 <__aeabi_dsub>
 800fee0:	465c      	mov	r4, fp
 800fee2:	4602      	mov	r2, r0
 800fee4:	e036      	b.n	800ff54 <__ieee754_pow+0x79c>
 800fee6:	bf00      	nop
 800fee8:	4a454eef 	.word	0x4a454eef
 800feec:	3fca7e28 	.word	0x3fca7e28
 800fef0:	93c9db65 	.word	0x93c9db65
 800fef4:	3fcd864a 	.word	0x3fcd864a
 800fef8:	a91d4101 	.word	0xa91d4101
 800fefc:	3fd17460 	.word	0x3fd17460
 800ff00:	518f264d 	.word	0x518f264d
 800ff04:	3fd55555 	.word	0x3fd55555
 800ff08:	db6fabff 	.word	0xdb6fabff
 800ff0c:	3fdb6db6 	.word	0x3fdb6db6
 800ff10:	33333303 	.word	0x33333303
 800ff14:	3fe33333 	.word	0x3fe33333
 800ff18:	e0000000 	.word	0xe0000000
 800ff1c:	3feec709 	.word	0x3feec709
 800ff20:	dc3a03fd 	.word	0xdc3a03fd
 800ff24:	3feec709 	.word	0x3feec709
 800ff28:	145b01f5 	.word	0x145b01f5
 800ff2c:	be3e2fe0 	.word	0xbe3e2fe0
 800ff30:	7ff00000 	.word	0x7ff00000
 800ff34:	43400000 	.word	0x43400000
 800ff38:	0003988e 	.word	0x0003988e
 800ff3c:	000bb679 	.word	0x000bb679
 800ff40:	080119f0 	.word	0x080119f0
 800ff44:	3ff00000 	.word	0x3ff00000
 800ff48:	40080000 	.word	0x40080000
 800ff4c:	080119d0 	.word	0x080119d0
 800ff50:	080119e0 	.word	0x080119e0
 800ff54:	460b      	mov	r3, r1
 800ff56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff5a:	e5d7      	b.n	800fb0c <__ieee754_pow+0x354>
 800ff5c:	f04f 0a01 	mov.w	sl, #1
 800ff60:	e65e      	b.n	800fc20 <__ieee754_pow+0x468>
 800ff62:	a3b4      	add	r3, pc, #720	@ (adr r3, 8010234 <__ieee754_pow+0xa7c>)
 800ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff68:	4630      	mov	r0, r6
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	f7f0 f9ae 	bl	80002cc <__adddf3>
 800ff70:	4642      	mov	r2, r8
 800ff72:	e9cd 0100 	strd	r0, r1, [sp]
 800ff76:	464b      	mov	r3, r9
 800ff78:	4620      	mov	r0, r4
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	f7f0 f9a4 	bl	80002c8 <__aeabi_dsub>
 800ff80:	4602      	mov	r2, r0
 800ff82:	460b      	mov	r3, r1
 800ff84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff88:	f7f0 fde6 	bl	8000b58 <__aeabi_dcmpgt>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	f47f ae00 	bne.w	800fb92 <__ieee754_pow+0x3da>
 800ff92:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ff96:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ff9a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ff9e:	fa43 fa0a 	asr.w	sl, r3, sl
 800ffa2:	44da      	add	sl, fp
 800ffa4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ffa8:	489d      	ldr	r0, [pc, #628]	@ (8010220 <__ieee754_pow+0xa68>)
 800ffaa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ffae:	4108      	asrs	r0, r1
 800ffb0:	ea00 030a 	and.w	r3, r0, sl
 800ffb4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ffb8:	f1c1 0114 	rsb	r1, r1, #20
 800ffbc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ffc0:	fa4a fa01 	asr.w	sl, sl, r1
 800ffc4:	f1bb 0f00 	cmp.w	fp, #0
 800ffc8:	4640      	mov	r0, r8
 800ffca:	4649      	mov	r1, r9
 800ffcc:	f04f 0200 	mov.w	r2, #0
 800ffd0:	bfb8      	it	lt
 800ffd2:	f1ca 0a00 	rsblt	sl, sl, #0
 800ffd6:	f7f0 f977 	bl	80002c8 <__aeabi_dsub>
 800ffda:	4680      	mov	r8, r0
 800ffdc:	4689      	mov	r9, r1
 800ffde:	4632      	mov	r2, r6
 800ffe0:	463b      	mov	r3, r7
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	4649      	mov	r1, r9
 800ffe6:	f7f0 f971 	bl	80002cc <__adddf3>
 800ffea:	2400      	movs	r4, #0
 800ffec:	a37c      	add	r3, pc, #496	@ (adr r3, 80101e0 <__ieee754_pow+0xa28>)
 800ffee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff2:	4620      	mov	r0, r4
 800fff4:	460d      	mov	r5, r1
 800fff6:	f7f0 fb1f 	bl	8000638 <__aeabi_dmul>
 800fffa:	4642      	mov	r2, r8
 800fffc:	e9cd 0100 	strd	r0, r1, [sp]
 8010000:	464b      	mov	r3, r9
 8010002:	4620      	mov	r0, r4
 8010004:	4629      	mov	r1, r5
 8010006:	f7f0 f95f 	bl	80002c8 <__aeabi_dsub>
 801000a:	4602      	mov	r2, r0
 801000c:	460b      	mov	r3, r1
 801000e:	4630      	mov	r0, r6
 8010010:	4639      	mov	r1, r7
 8010012:	f7f0 f959 	bl	80002c8 <__aeabi_dsub>
 8010016:	a374      	add	r3, pc, #464	@ (adr r3, 80101e8 <__ieee754_pow+0xa30>)
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	f7f0 fb0c 	bl	8000638 <__aeabi_dmul>
 8010020:	a373      	add	r3, pc, #460	@ (adr r3, 80101f0 <__ieee754_pow+0xa38>)
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	4680      	mov	r8, r0
 8010028:	4689      	mov	r9, r1
 801002a:	4620      	mov	r0, r4
 801002c:	4629      	mov	r1, r5
 801002e:	f7f0 fb03 	bl	8000638 <__aeabi_dmul>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	4640      	mov	r0, r8
 8010038:	4649      	mov	r1, r9
 801003a:	f7f0 f947 	bl	80002cc <__adddf3>
 801003e:	4604      	mov	r4, r0
 8010040:	460d      	mov	r5, r1
 8010042:	4602      	mov	r2, r0
 8010044:	460b      	mov	r3, r1
 8010046:	e9dd 0100 	ldrd	r0, r1, [sp]
 801004a:	f7f0 f93f 	bl	80002cc <__adddf3>
 801004e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010052:	4680      	mov	r8, r0
 8010054:	4689      	mov	r9, r1
 8010056:	f7f0 f937 	bl	80002c8 <__aeabi_dsub>
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4620      	mov	r0, r4
 8010060:	4629      	mov	r1, r5
 8010062:	f7f0 f931 	bl	80002c8 <__aeabi_dsub>
 8010066:	4642      	mov	r2, r8
 8010068:	4606      	mov	r6, r0
 801006a:	460f      	mov	r7, r1
 801006c:	464b      	mov	r3, r9
 801006e:	4640      	mov	r0, r8
 8010070:	4649      	mov	r1, r9
 8010072:	f7f0 fae1 	bl	8000638 <__aeabi_dmul>
 8010076:	a360      	add	r3, pc, #384	@ (adr r3, 80101f8 <__ieee754_pow+0xa40>)
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	4604      	mov	r4, r0
 801007e:	460d      	mov	r5, r1
 8010080:	f7f0 fada 	bl	8000638 <__aeabi_dmul>
 8010084:	a35e      	add	r3, pc, #376	@ (adr r3, 8010200 <__ieee754_pow+0xa48>)
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	f7f0 f91d 	bl	80002c8 <__aeabi_dsub>
 801008e:	4622      	mov	r2, r4
 8010090:	462b      	mov	r3, r5
 8010092:	f7f0 fad1 	bl	8000638 <__aeabi_dmul>
 8010096:	a35c      	add	r3, pc, #368	@ (adr r3, 8010208 <__ieee754_pow+0xa50>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	f7f0 f916 	bl	80002cc <__adddf3>
 80100a0:	4622      	mov	r2, r4
 80100a2:	462b      	mov	r3, r5
 80100a4:	f7f0 fac8 	bl	8000638 <__aeabi_dmul>
 80100a8:	a359      	add	r3, pc, #356	@ (adr r3, 8010210 <__ieee754_pow+0xa58>)
 80100aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ae:	f7f0 f90b 	bl	80002c8 <__aeabi_dsub>
 80100b2:	4622      	mov	r2, r4
 80100b4:	462b      	mov	r3, r5
 80100b6:	f7f0 fabf 	bl	8000638 <__aeabi_dmul>
 80100ba:	a357      	add	r3, pc, #348	@ (adr r3, 8010218 <__ieee754_pow+0xa60>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 f904 	bl	80002cc <__adddf3>
 80100c4:	4622      	mov	r2, r4
 80100c6:	462b      	mov	r3, r5
 80100c8:	f7f0 fab6 	bl	8000638 <__aeabi_dmul>
 80100cc:	4602      	mov	r2, r0
 80100ce:	460b      	mov	r3, r1
 80100d0:	4640      	mov	r0, r8
 80100d2:	4649      	mov	r1, r9
 80100d4:	f7f0 f8f8 	bl	80002c8 <__aeabi_dsub>
 80100d8:	4604      	mov	r4, r0
 80100da:	460d      	mov	r5, r1
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	4640      	mov	r0, r8
 80100e2:	4649      	mov	r1, r9
 80100e4:	f7f0 faa8 	bl	8000638 <__aeabi_dmul>
 80100e8:	2200      	movs	r2, #0
 80100ea:	e9cd 0100 	strd	r0, r1, [sp]
 80100ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80100f2:	4620      	mov	r0, r4
 80100f4:	4629      	mov	r1, r5
 80100f6:	f7f0 f8e7 	bl	80002c8 <__aeabi_dsub>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010102:	f7f0 fbc3 	bl	800088c <__aeabi_ddiv>
 8010106:	4632      	mov	r2, r6
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	463b      	mov	r3, r7
 801010e:	4640      	mov	r0, r8
 8010110:	4649      	mov	r1, r9
 8010112:	f7f0 fa91 	bl	8000638 <__aeabi_dmul>
 8010116:	4632      	mov	r2, r6
 8010118:	463b      	mov	r3, r7
 801011a:	f7f0 f8d7 	bl	80002cc <__adddf3>
 801011e:	4602      	mov	r2, r0
 8010120:	460b      	mov	r3, r1
 8010122:	4620      	mov	r0, r4
 8010124:	4629      	mov	r1, r5
 8010126:	f7f0 f8cf 	bl	80002c8 <__aeabi_dsub>
 801012a:	4642      	mov	r2, r8
 801012c:	464b      	mov	r3, r9
 801012e:	f7f0 f8cb 	bl	80002c8 <__aeabi_dsub>
 8010132:	460b      	mov	r3, r1
 8010134:	4602      	mov	r2, r0
 8010136:	493b      	ldr	r1, [pc, #236]	@ (8010224 <__ieee754_pow+0xa6c>)
 8010138:	2000      	movs	r0, #0
 801013a:	f7f0 f8c5 	bl	80002c8 <__aeabi_dsub>
 801013e:	ec41 0b10 	vmov	d0, r0, r1
 8010142:	ee10 3a90 	vmov	r3, s1
 8010146:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801014a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801014e:	da30      	bge.n	80101b2 <__ieee754_pow+0x9fa>
 8010150:	4650      	mov	r0, sl
 8010152:	f000 fdcd 	bl	8010cf0 <scalbn>
 8010156:	ec51 0b10 	vmov	r0, r1, d0
 801015a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801015e:	f7ff bbd2 	b.w	800f906 <__ieee754_pow+0x14e>
 8010162:	4c31      	ldr	r4, [pc, #196]	@ (8010228 <__ieee754_pow+0xa70>)
 8010164:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010168:	42a3      	cmp	r3, r4
 801016a:	d91a      	bls.n	80101a2 <__ieee754_pow+0x9ea>
 801016c:	4b2f      	ldr	r3, [pc, #188]	@ (801022c <__ieee754_pow+0xa74>)
 801016e:	440b      	add	r3, r1
 8010170:	4303      	orrs	r3, r0
 8010172:	d009      	beq.n	8010188 <__ieee754_pow+0x9d0>
 8010174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010178:	2200      	movs	r2, #0
 801017a:	2300      	movs	r3, #0
 801017c:	f7f0 fcce 	bl	8000b1c <__aeabi_dcmplt>
 8010180:	3800      	subs	r0, #0
 8010182:	bf18      	it	ne
 8010184:	2001      	movne	r0, #1
 8010186:	e42b      	b.n	800f9e0 <__ieee754_pow+0x228>
 8010188:	4642      	mov	r2, r8
 801018a:	464b      	mov	r3, r9
 801018c:	f7f0 f89c 	bl	80002c8 <__aeabi_dsub>
 8010190:	4632      	mov	r2, r6
 8010192:	463b      	mov	r3, r7
 8010194:	f7f0 fcd6 	bl	8000b44 <__aeabi_dcmpge>
 8010198:	2800      	cmp	r0, #0
 801019a:	d1eb      	bne.n	8010174 <__ieee754_pow+0x9bc>
 801019c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801023c <__ieee754_pow+0xa84>
 80101a0:	e6f7      	b.n	800ff92 <__ieee754_pow+0x7da>
 80101a2:	469a      	mov	sl, r3
 80101a4:	4b22      	ldr	r3, [pc, #136]	@ (8010230 <__ieee754_pow+0xa78>)
 80101a6:	459a      	cmp	sl, r3
 80101a8:	f63f aef3 	bhi.w	800ff92 <__ieee754_pow+0x7da>
 80101ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80101b0:	e715      	b.n	800ffde <__ieee754_pow+0x826>
 80101b2:	ec51 0b10 	vmov	r0, r1, d0
 80101b6:	4619      	mov	r1, r3
 80101b8:	e7cf      	b.n	801015a <__ieee754_pow+0x9a2>
 80101ba:	491a      	ldr	r1, [pc, #104]	@ (8010224 <__ieee754_pow+0xa6c>)
 80101bc:	2000      	movs	r0, #0
 80101be:	f7ff bb18 	b.w	800f7f2 <__ieee754_pow+0x3a>
 80101c2:	2000      	movs	r0, #0
 80101c4:	2100      	movs	r1, #0
 80101c6:	f7ff bb14 	b.w	800f7f2 <__ieee754_pow+0x3a>
 80101ca:	4630      	mov	r0, r6
 80101cc:	4639      	mov	r1, r7
 80101ce:	f7ff bb10 	b.w	800f7f2 <__ieee754_pow+0x3a>
 80101d2:	460c      	mov	r4, r1
 80101d4:	f7ff bb5e 	b.w	800f894 <__ieee754_pow+0xdc>
 80101d8:	2400      	movs	r4, #0
 80101da:	f7ff bb49 	b.w	800f870 <__ieee754_pow+0xb8>
 80101de:	bf00      	nop
 80101e0:	00000000 	.word	0x00000000
 80101e4:	3fe62e43 	.word	0x3fe62e43
 80101e8:	fefa39ef 	.word	0xfefa39ef
 80101ec:	3fe62e42 	.word	0x3fe62e42
 80101f0:	0ca86c39 	.word	0x0ca86c39
 80101f4:	be205c61 	.word	0xbe205c61
 80101f8:	72bea4d0 	.word	0x72bea4d0
 80101fc:	3e663769 	.word	0x3e663769
 8010200:	c5d26bf1 	.word	0xc5d26bf1
 8010204:	3ebbbd41 	.word	0x3ebbbd41
 8010208:	af25de2c 	.word	0xaf25de2c
 801020c:	3f11566a 	.word	0x3f11566a
 8010210:	16bebd93 	.word	0x16bebd93
 8010214:	3f66c16c 	.word	0x3f66c16c
 8010218:	5555553e 	.word	0x5555553e
 801021c:	3fc55555 	.word	0x3fc55555
 8010220:	fff00000 	.word	0xfff00000
 8010224:	3ff00000 	.word	0x3ff00000
 8010228:	4090cbff 	.word	0x4090cbff
 801022c:	3f6f3400 	.word	0x3f6f3400
 8010230:	3fe00000 	.word	0x3fe00000
 8010234:	652b82fe 	.word	0x652b82fe
 8010238:	3c971547 	.word	0x3c971547
 801023c:	4090cc00 	.word	0x4090cc00

08010240 <__ieee754_rem_pio2>:
 8010240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010244:	ec57 6b10 	vmov	r6, r7, d0
 8010248:	4bc5      	ldr	r3, [pc, #788]	@ (8010560 <__ieee754_rem_pio2+0x320>)
 801024a:	b08d      	sub	sp, #52	@ 0x34
 801024c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010250:	4598      	cmp	r8, r3
 8010252:	4604      	mov	r4, r0
 8010254:	9704      	str	r7, [sp, #16]
 8010256:	d807      	bhi.n	8010268 <__ieee754_rem_pio2+0x28>
 8010258:	2200      	movs	r2, #0
 801025a:	2300      	movs	r3, #0
 801025c:	ed80 0b00 	vstr	d0, [r0]
 8010260:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010264:	2500      	movs	r5, #0
 8010266:	e028      	b.n	80102ba <__ieee754_rem_pio2+0x7a>
 8010268:	4bbe      	ldr	r3, [pc, #760]	@ (8010564 <__ieee754_rem_pio2+0x324>)
 801026a:	4598      	cmp	r8, r3
 801026c:	d878      	bhi.n	8010360 <__ieee754_rem_pio2+0x120>
 801026e:	9b04      	ldr	r3, [sp, #16]
 8010270:	4dbd      	ldr	r5, [pc, #756]	@ (8010568 <__ieee754_rem_pio2+0x328>)
 8010272:	2b00      	cmp	r3, #0
 8010274:	4630      	mov	r0, r6
 8010276:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010528 <__ieee754_rem_pio2+0x2e8>)
 8010278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027c:	4639      	mov	r1, r7
 801027e:	dd38      	ble.n	80102f2 <__ieee754_rem_pio2+0xb2>
 8010280:	f7f0 f822 	bl	80002c8 <__aeabi_dsub>
 8010284:	45a8      	cmp	r8, r5
 8010286:	4606      	mov	r6, r0
 8010288:	460f      	mov	r7, r1
 801028a:	d01a      	beq.n	80102c2 <__ieee754_rem_pio2+0x82>
 801028c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010530 <__ieee754_rem_pio2+0x2f0>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	f7f0 f819 	bl	80002c8 <__aeabi_dsub>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4680      	mov	r8, r0
 801029c:	4689      	mov	r9, r1
 801029e:	4630      	mov	r0, r6
 80102a0:	4639      	mov	r1, r7
 80102a2:	f7f0 f811 	bl	80002c8 <__aeabi_dsub>
 80102a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010530 <__ieee754_rem_pio2+0x2f0>)
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	f7f0 f80c 	bl	80002c8 <__aeabi_dsub>
 80102b0:	e9c4 8900 	strd	r8, r9, [r4]
 80102b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80102b8:	2501      	movs	r5, #1
 80102ba:	4628      	mov	r0, r5
 80102bc:	b00d      	add	sp, #52	@ 0x34
 80102be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c2:	a39d      	add	r3, pc, #628	@ (adr r3, 8010538 <__ieee754_rem_pio2+0x2f8>)
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	f7ef fffe 	bl	80002c8 <__aeabi_dsub>
 80102cc:	a39c      	add	r3, pc, #624	@ (adr r3, 8010540 <__ieee754_rem_pio2+0x300>)
 80102ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d2:	4606      	mov	r6, r0
 80102d4:	460f      	mov	r7, r1
 80102d6:	f7ef fff7 	bl	80002c8 <__aeabi_dsub>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	4680      	mov	r8, r0
 80102e0:	4689      	mov	r9, r1
 80102e2:	4630      	mov	r0, r6
 80102e4:	4639      	mov	r1, r7
 80102e6:	f7ef ffef 	bl	80002c8 <__aeabi_dsub>
 80102ea:	a395      	add	r3, pc, #596	@ (adr r3, 8010540 <__ieee754_rem_pio2+0x300>)
 80102ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f0:	e7dc      	b.n	80102ac <__ieee754_rem_pio2+0x6c>
 80102f2:	f7ef ffeb 	bl	80002cc <__adddf3>
 80102f6:	45a8      	cmp	r8, r5
 80102f8:	4606      	mov	r6, r0
 80102fa:	460f      	mov	r7, r1
 80102fc:	d018      	beq.n	8010330 <__ieee754_rem_pio2+0xf0>
 80102fe:	a38c      	add	r3, pc, #560	@ (adr r3, 8010530 <__ieee754_rem_pio2+0x2f0>)
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	f7ef ffe2 	bl	80002cc <__adddf3>
 8010308:	4602      	mov	r2, r0
 801030a:	460b      	mov	r3, r1
 801030c:	4680      	mov	r8, r0
 801030e:	4689      	mov	r9, r1
 8010310:	4630      	mov	r0, r6
 8010312:	4639      	mov	r1, r7
 8010314:	f7ef ffd8 	bl	80002c8 <__aeabi_dsub>
 8010318:	a385      	add	r3, pc, #532	@ (adr r3, 8010530 <__ieee754_rem_pio2+0x2f0>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	f7ef ffd5 	bl	80002cc <__adddf3>
 8010322:	f04f 35ff 	mov.w	r5, #4294967295
 8010326:	e9c4 8900 	strd	r8, r9, [r4]
 801032a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801032e:	e7c4      	b.n	80102ba <__ieee754_rem_pio2+0x7a>
 8010330:	a381      	add	r3, pc, #516	@ (adr r3, 8010538 <__ieee754_rem_pio2+0x2f8>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f7ef ffc9 	bl	80002cc <__adddf3>
 801033a:	a381      	add	r3, pc, #516	@ (adr r3, 8010540 <__ieee754_rem_pio2+0x300>)
 801033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010340:	4606      	mov	r6, r0
 8010342:	460f      	mov	r7, r1
 8010344:	f7ef ffc2 	bl	80002cc <__adddf3>
 8010348:	4602      	mov	r2, r0
 801034a:	460b      	mov	r3, r1
 801034c:	4680      	mov	r8, r0
 801034e:	4689      	mov	r9, r1
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7ef ffb8 	bl	80002c8 <__aeabi_dsub>
 8010358:	a379      	add	r3, pc, #484	@ (adr r3, 8010540 <__ieee754_rem_pio2+0x300>)
 801035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035e:	e7de      	b.n	801031e <__ieee754_rem_pio2+0xde>
 8010360:	4b82      	ldr	r3, [pc, #520]	@ (801056c <__ieee754_rem_pio2+0x32c>)
 8010362:	4598      	cmp	r8, r3
 8010364:	f200 80d1 	bhi.w	801050a <__ieee754_rem_pio2+0x2ca>
 8010368:	f000 f966 	bl	8010638 <fabs>
 801036c:	ec57 6b10 	vmov	r6, r7, d0
 8010370:	a375      	add	r3, pc, #468	@ (adr r3, 8010548 <__ieee754_rem_pio2+0x308>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	4630      	mov	r0, r6
 8010378:	4639      	mov	r1, r7
 801037a:	f7f0 f95d 	bl	8000638 <__aeabi_dmul>
 801037e:	4b7c      	ldr	r3, [pc, #496]	@ (8010570 <__ieee754_rem_pio2+0x330>)
 8010380:	2200      	movs	r2, #0
 8010382:	f7ef ffa3 	bl	80002cc <__adddf3>
 8010386:	f7f0 fc07 	bl	8000b98 <__aeabi_d2iz>
 801038a:	4605      	mov	r5, r0
 801038c:	f7f0 f8ea 	bl	8000564 <__aeabi_i2d>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010398:	a363      	add	r3, pc, #396	@ (adr r3, 8010528 <__ieee754_rem_pio2+0x2e8>)
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	f7f0 f94b 	bl	8000638 <__aeabi_dmul>
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	4630      	mov	r0, r6
 80103a8:	4639      	mov	r1, r7
 80103aa:	f7ef ff8d 	bl	80002c8 <__aeabi_dsub>
 80103ae:	a360      	add	r3, pc, #384	@ (adr r3, 8010530 <__ieee754_rem_pio2+0x2f0>)
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	4682      	mov	sl, r0
 80103b6:	468b      	mov	fp, r1
 80103b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103bc:	f7f0 f93c 	bl	8000638 <__aeabi_dmul>
 80103c0:	2d1f      	cmp	r5, #31
 80103c2:	4606      	mov	r6, r0
 80103c4:	460f      	mov	r7, r1
 80103c6:	dc0c      	bgt.n	80103e2 <__ieee754_rem_pio2+0x1a2>
 80103c8:	4b6a      	ldr	r3, [pc, #424]	@ (8010574 <__ieee754_rem_pio2+0x334>)
 80103ca:	1e6a      	subs	r2, r5, #1
 80103cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103d0:	4543      	cmp	r3, r8
 80103d2:	d006      	beq.n	80103e2 <__ieee754_rem_pio2+0x1a2>
 80103d4:	4632      	mov	r2, r6
 80103d6:	463b      	mov	r3, r7
 80103d8:	4650      	mov	r0, sl
 80103da:	4659      	mov	r1, fp
 80103dc:	f7ef ff74 	bl	80002c8 <__aeabi_dsub>
 80103e0:	e00e      	b.n	8010400 <__ieee754_rem_pio2+0x1c0>
 80103e2:	463b      	mov	r3, r7
 80103e4:	4632      	mov	r2, r6
 80103e6:	4650      	mov	r0, sl
 80103e8:	4659      	mov	r1, fp
 80103ea:	f7ef ff6d 	bl	80002c8 <__aeabi_dsub>
 80103ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80103f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80103fc:	2b10      	cmp	r3, #16
 80103fe:	dc02      	bgt.n	8010406 <__ieee754_rem_pio2+0x1c6>
 8010400:	e9c4 0100 	strd	r0, r1, [r4]
 8010404:	e039      	b.n	801047a <__ieee754_rem_pio2+0x23a>
 8010406:	a34c      	add	r3, pc, #304	@ (adr r3, 8010538 <__ieee754_rem_pio2+0x2f8>)
 8010408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010410:	f7f0 f912 	bl	8000638 <__aeabi_dmul>
 8010414:	4606      	mov	r6, r0
 8010416:	460f      	mov	r7, r1
 8010418:	4602      	mov	r2, r0
 801041a:	460b      	mov	r3, r1
 801041c:	4650      	mov	r0, sl
 801041e:	4659      	mov	r1, fp
 8010420:	f7ef ff52 	bl	80002c8 <__aeabi_dsub>
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	4680      	mov	r8, r0
 801042a:	4689      	mov	r9, r1
 801042c:	4650      	mov	r0, sl
 801042e:	4659      	mov	r1, fp
 8010430:	f7ef ff4a 	bl	80002c8 <__aeabi_dsub>
 8010434:	4632      	mov	r2, r6
 8010436:	463b      	mov	r3, r7
 8010438:	f7ef ff46 	bl	80002c8 <__aeabi_dsub>
 801043c:	a340      	add	r3, pc, #256	@ (adr r3, 8010540 <__ieee754_rem_pio2+0x300>)
 801043e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010442:	4606      	mov	r6, r0
 8010444:	460f      	mov	r7, r1
 8010446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801044a:	f7f0 f8f5 	bl	8000638 <__aeabi_dmul>
 801044e:	4632      	mov	r2, r6
 8010450:	463b      	mov	r3, r7
 8010452:	f7ef ff39 	bl	80002c8 <__aeabi_dsub>
 8010456:	4602      	mov	r2, r0
 8010458:	460b      	mov	r3, r1
 801045a:	4606      	mov	r6, r0
 801045c:	460f      	mov	r7, r1
 801045e:	4640      	mov	r0, r8
 8010460:	4649      	mov	r1, r9
 8010462:	f7ef ff31 	bl	80002c8 <__aeabi_dsub>
 8010466:	9a05      	ldr	r2, [sp, #20]
 8010468:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	2b31      	cmp	r3, #49	@ 0x31
 8010470:	dc20      	bgt.n	80104b4 <__ieee754_rem_pio2+0x274>
 8010472:	e9c4 0100 	strd	r0, r1, [r4]
 8010476:	46c2      	mov	sl, r8
 8010478:	46cb      	mov	fp, r9
 801047a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801047e:	4650      	mov	r0, sl
 8010480:	4642      	mov	r2, r8
 8010482:	464b      	mov	r3, r9
 8010484:	4659      	mov	r1, fp
 8010486:	f7ef ff1f 	bl	80002c8 <__aeabi_dsub>
 801048a:	463b      	mov	r3, r7
 801048c:	4632      	mov	r2, r6
 801048e:	f7ef ff1b 	bl	80002c8 <__aeabi_dsub>
 8010492:	9b04      	ldr	r3, [sp, #16]
 8010494:	2b00      	cmp	r3, #0
 8010496:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801049a:	f6bf af0e 	bge.w	80102ba <__ieee754_rem_pio2+0x7a>
 801049e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80104a2:	6063      	str	r3, [r4, #4]
 80104a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104a8:	f8c4 8000 	str.w	r8, [r4]
 80104ac:	60a0      	str	r0, [r4, #8]
 80104ae:	60e3      	str	r3, [r4, #12]
 80104b0:	426d      	negs	r5, r5
 80104b2:	e702      	b.n	80102ba <__ieee754_rem_pio2+0x7a>
 80104b4:	a326      	add	r3, pc, #152	@ (adr r3, 8010550 <__ieee754_rem_pio2+0x310>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104be:	f7f0 f8bb 	bl	8000638 <__aeabi_dmul>
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	4640      	mov	r0, r8
 80104cc:	4649      	mov	r1, r9
 80104ce:	f7ef fefb 	bl	80002c8 <__aeabi_dsub>
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	4682      	mov	sl, r0
 80104d8:	468b      	mov	fp, r1
 80104da:	4640      	mov	r0, r8
 80104dc:	4649      	mov	r1, r9
 80104de:	f7ef fef3 	bl	80002c8 <__aeabi_dsub>
 80104e2:	4632      	mov	r2, r6
 80104e4:	463b      	mov	r3, r7
 80104e6:	f7ef feef 	bl	80002c8 <__aeabi_dsub>
 80104ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8010558 <__ieee754_rem_pio2+0x318>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	4606      	mov	r6, r0
 80104f2:	460f      	mov	r7, r1
 80104f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f8:	f7f0 f89e 	bl	8000638 <__aeabi_dmul>
 80104fc:	4632      	mov	r2, r6
 80104fe:	463b      	mov	r3, r7
 8010500:	f7ef fee2 	bl	80002c8 <__aeabi_dsub>
 8010504:	4606      	mov	r6, r0
 8010506:	460f      	mov	r7, r1
 8010508:	e764      	b.n	80103d4 <__ieee754_rem_pio2+0x194>
 801050a:	4b1b      	ldr	r3, [pc, #108]	@ (8010578 <__ieee754_rem_pio2+0x338>)
 801050c:	4598      	cmp	r8, r3
 801050e:	d935      	bls.n	801057c <__ieee754_rem_pio2+0x33c>
 8010510:	4632      	mov	r2, r6
 8010512:	463b      	mov	r3, r7
 8010514:	4630      	mov	r0, r6
 8010516:	4639      	mov	r1, r7
 8010518:	f7ef fed6 	bl	80002c8 <__aeabi_dsub>
 801051c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010520:	e9c4 0100 	strd	r0, r1, [r4]
 8010524:	e69e      	b.n	8010264 <__ieee754_rem_pio2+0x24>
 8010526:	bf00      	nop
 8010528:	54400000 	.word	0x54400000
 801052c:	3ff921fb 	.word	0x3ff921fb
 8010530:	1a626331 	.word	0x1a626331
 8010534:	3dd0b461 	.word	0x3dd0b461
 8010538:	1a600000 	.word	0x1a600000
 801053c:	3dd0b461 	.word	0x3dd0b461
 8010540:	2e037073 	.word	0x2e037073
 8010544:	3ba3198a 	.word	0x3ba3198a
 8010548:	6dc9c883 	.word	0x6dc9c883
 801054c:	3fe45f30 	.word	0x3fe45f30
 8010550:	2e000000 	.word	0x2e000000
 8010554:	3ba3198a 	.word	0x3ba3198a
 8010558:	252049c1 	.word	0x252049c1
 801055c:	397b839a 	.word	0x397b839a
 8010560:	3fe921fb 	.word	0x3fe921fb
 8010564:	4002d97b 	.word	0x4002d97b
 8010568:	3ff921fb 	.word	0x3ff921fb
 801056c:	413921fb 	.word	0x413921fb
 8010570:	3fe00000 	.word	0x3fe00000
 8010574:	08011a00 	.word	0x08011a00
 8010578:	7fefffff 	.word	0x7fefffff
 801057c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010580:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010584:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010588:	4630      	mov	r0, r6
 801058a:	460f      	mov	r7, r1
 801058c:	f7f0 fb04 	bl	8000b98 <__aeabi_d2iz>
 8010590:	f7ef ffe8 	bl	8000564 <__aeabi_i2d>
 8010594:	4602      	mov	r2, r0
 8010596:	460b      	mov	r3, r1
 8010598:	4630      	mov	r0, r6
 801059a:	4639      	mov	r1, r7
 801059c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105a0:	f7ef fe92 	bl	80002c8 <__aeabi_dsub>
 80105a4:	4b22      	ldr	r3, [pc, #136]	@ (8010630 <__ieee754_rem_pio2+0x3f0>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	f7f0 f846 	bl	8000638 <__aeabi_dmul>
 80105ac:	460f      	mov	r7, r1
 80105ae:	4606      	mov	r6, r0
 80105b0:	f7f0 faf2 	bl	8000b98 <__aeabi_d2iz>
 80105b4:	f7ef ffd6 	bl	8000564 <__aeabi_i2d>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4630      	mov	r0, r6
 80105be:	4639      	mov	r1, r7
 80105c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80105c4:	f7ef fe80 	bl	80002c8 <__aeabi_dsub>
 80105c8:	4b19      	ldr	r3, [pc, #100]	@ (8010630 <__ieee754_rem_pio2+0x3f0>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	f7f0 f834 	bl	8000638 <__aeabi_dmul>
 80105d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80105d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80105d8:	f04f 0803 	mov.w	r8, #3
 80105dc:	2600      	movs	r6, #0
 80105de:	2700      	movs	r7, #0
 80105e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80105e4:	4632      	mov	r2, r6
 80105e6:	463b      	mov	r3, r7
 80105e8:	46c2      	mov	sl, r8
 80105ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80105ee:	f7f0 fa8b 	bl	8000b08 <__aeabi_dcmpeq>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d1f4      	bne.n	80105e0 <__ieee754_rem_pio2+0x3a0>
 80105f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010634 <__ieee754_rem_pio2+0x3f4>)
 80105f8:	9301      	str	r3, [sp, #4]
 80105fa:	2302      	movs	r3, #2
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	462a      	mov	r2, r5
 8010600:	4653      	mov	r3, sl
 8010602:	4621      	mov	r1, r4
 8010604:	a806      	add	r0, sp, #24
 8010606:	f000 fc2f 	bl	8010e68 <__kernel_rem_pio2>
 801060a:	9b04      	ldr	r3, [sp, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	4605      	mov	r5, r0
 8010610:	f6bf ae53 	bge.w	80102ba <__ieee754_rem_pio2+0x7a>
 8010614:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801061c:	e9c4 2300 	strd	r2, r3, [r4]
 8010620:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010624:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010628:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801062c:	e740      	b.n	80104b0 <__ieee754_rem_pio2+0x270>
 801062e:	bf00      	nop
 8010630:	41700000 	.word	0x41700000
 8010634:	08011a80 	.word	0x08011a80

08010638 <fabs>:
 8010638:	ec51 0b10 	vmov	r0, r1, d0
 801063c:	4602      	mov	r2, r0
 801063e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010642:	ec43 2b10 	vmov	d0, r2, r3
 8010646:	4770      	bx	lr

08010648 <__ieee754_acosf>:
 8010648:	b508      	push	{r3, lr}
 801064a:	ee10 3a10 	vmov	r3, s0
 801064e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010652:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010656:	ed2d 8b0c 	vpush	{d8-d13}
 801065a:	d10a      	bne.n	8010672 <__ieee754_acosf+0x2a>
 801065c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80107f4 <__ieee754_acosf+0x1ac>
 8010660:	eddf 7a65 	vldr	s15, [pc, #404]	@ 80107f8 <__ieee754_acosf+0x1b0>
 8010664:	2b00      	cmp	r3, #0
 8010666:	bfc8      	it	gt
 8010668:	eeb0 0a67 	vmovgt.f32	s0, s15
 801066c:	ecbd 8b0c 	vpop	{d8-d13}
 8010670:	bd08      	pop	{r3, pc}
 8010672:	d904      	bls.n	801067e <__ieee754_acosf+0x36>
 8010674:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010678:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801067c:	e7f6      	b.n	801066c <__ieee754_acosf+0x24>
 801067e:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8010682:	d23c      	bcs.n	80106fe <__ieee754_acosf+0xb6>
 8010684:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8010688:	f240 80b1 	bls.w	80107ee <__ieee754_acosf+0x1a6>
 801068c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010690:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80107fc <__ieee754_acosf+0x1b4>
 8010694:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8010800 <__ieee754_acosf+0x1b8>
 8010698:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8010804 <__ieee754_acosf+0x1bc>
 801069c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80106a0:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010808 <__ieee754_acosf+0x1c0>
 80106a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80106a8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801080c <__ieee754_acosf+0x1c4>
 80106ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106b0:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8010810 <__ieee754_acosf+0x1c8>
 80106b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80106b8:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8010814 <__ieee754_acosf+0x1cc>
 80106bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80106c0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8010818 <__ieee754_acosf+0x1d0>
 80106c4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80106c8:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801081c <__ieee754_acosf+0x1d4>
 80106cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80106d0:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8010820 <__ieee754_acosf+0x1d8>
 80106d4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80106d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80106dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80106e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106e4:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8010824 <__ieee754_acosf+0x1dc>
 80106e8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80106ec:	eee0 7a46 	vfms.f32	s15, s0, s12
 80106f0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80106f4:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8010828 <__ieee754_acosf+0x1e0>
 80106f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106fc:	e7b6      	b.n	801066c <__ieee754_acosf+0x24>
 80106fe:	2b00      	cmp	r3, #0
 8010700:	eddf da3e 	vldr	s27, [pc, #248]	@ 80107fc <__ieee754_acosf+0x1b4>
 8010704:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8010800 <__ieee754_acosf+0x1b8>
 8010708:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8010808 <__ieee754_acosf+0x1c0>
 801070c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801080c <__ieee754_acosf+0x1c4>
 8010710:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8010810 <__ieee754_acosf+0x1c8>
 8010714:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8010814 <__ieee754_acosf+0x1cc>
 8010718:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8010818 <__ieee754_acosf+0x1d0>
 801071c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8010804 <__ieee754_acosf+0x1bc>
 8010720:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801081c <__ieee754_acosf+0x1d4>
 8010724:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8010820 <__ieee754_acosf+0x1d8>
 8010728:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801072c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010730:	da28      	bge.n	8010784 <__ieee754_acosf+0x13c>
 8010732:	ee30 8a09 	vadd.f32	s16, s0, s18
 8010736:	ee28 0a27 	vmul.f32	s0, s16, s15
 801073a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801073e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8010742:	eeac ca80 	vfma.f32	s24, s25, s0
 8010746:	eeaa aa80 	vfma.f32	s20, s21, s0
 801074a:	eeec ba00 	vfma.f32	s23, s24, s0
 801074e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8010752:	eeab ba80 	vfma.f32	s22, s23, s0
 8010756:	eea9 9a80 	vfma.f32	s18, s19, s0
 801075a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801075e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010762:	f7fe fe59 	bl	800f418 <__ieee754_sqrtf>
 8010766:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801076a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801082c <__ieee754_acosf+0x1e4>
 801076e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010772:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010776:	ee77 7a80 	vadd.f32	s15, s15, s0
 801077a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8010830 <__ieee754_acosf+0x1e8>
 801077e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010782:	e773      	b.n	801066c <__ieee754_acosf+0x24>
 8010784:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010788:	ee28 8a27 	vmul.f32	s16, s16, s15
 801078c:	eeb0 0a48 	vmov.f32	s0, s16
 8010790:	f7fe fe42 	bl	800f418 <__ieee754_sqrtf>
 8010794:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010798:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801079c:	eeac ca88 	vfma.f32	s24, s25, s16
 80107a0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80107a4:	eeec ba08 	vfma.f32	s23, s24, s16
 80107a8:	ee10 3a10 	vmov	r3, s0
 80107ac:	eeab ba88 	vfma.f32	s22, s23, s16
 80107b0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80107b4:	f023 030f 	bic.w	r3, r3, #15
 80107b8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80107bc:	ee07 3a90 	vmov	s15, r3
 80107c0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80107c4:	eeb0 6a48 	vmov.f32	s12, s16
 80107c8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80107cc:	eea9 9a88 	vfma.f32	s18, s19, s16
 80107d0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80107d4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80107d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80107dc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80107e0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80107e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80107e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80107ec:	e73e      	b.n	801066c <__ieee754_acosf+0x24>
 80107ee:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8010834 <__ieee754_acosf+0x1ec>
 80107f2:	e73b      	b.n	801066c <__ieee754_acosf+0x24>
 80107f4:	40490fdb 	.word	0x40490fdb
 80107f8:	00000000 	.word	0x00000000
 80107fc:	3811ef08 	.word	0x3811ef08
 8010800:	3a4f7f04 	.word	0x3a4f7f04
 8010804:	bf303361 	.word	0xbf303361
 8010808:	bd241146 	.word	0xbd241146
 801080c:	3e4e0aa8 	.word	0x3e4e0aa8
 8010810:	bea6b090 	.word	0xbea6b090
 8010814:	3e2aaaab 	.word	0x3e2aaaab
 8010818:	3d9dc62e 	.word	0x3d9dc62e
 801081c:	4001572d 	.word	0x4001572d
 8010820:	c019d139 	.word	0xc019d139
 8010824:	33a22168 	.word	0x33a22168
 8010828:	3fc90fda 	.word	0x3fc90fda
 801082c:	b3a22168 	.word	0xb3a22168
 8010830:	40490fda 	.word	0x40490fda
 8010834:	3fc90fdb 	.word	0x3fc90fdb

08010838 <__ieee754_asinf>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	ee10 5a10 	vmov	r5, s0
 801083e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010842:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8010846:	ed2d 8b04 	vpush	{d8-d9}
 801084a:	d10c      	bne.n	8010866 <__ieee754_asinf+0x2e>
 801084c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80109c4 <__ieee754_asinf+0x18c>
 8010850:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80109c8 <__ieee754_asinf+0x190>
 8010854:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010858:	eee0 7a07 	vfma.f32	s15, s0, s14
 801085c:	eeb0 0a67 	vmov.f32	s0, s15
 8010860:	ecbd 8b04 	vpop	{d8-d9}
 8010864:	bd38      	pop	{r3, r4, r5, pc}
 8010866:	d904      	bls.n	8010872 <__ieee754_asinf+0x3a>
 8010868:	ee70 7a40 	vsub.f32	s15, s0, s0
 801086c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010870:	e7f6      	b.n	8010860 <__ieee754_asinf+0x28>
 8010872:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010876:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801087a:	d20b      	bcs.n	8010894 <__ieee754_asinf+0x5c>
 801087c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010880:	d252      	bcs.n	8010928 <__ieee754_asinf+0xf0>
 8010882:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80109cc <__ieee754_asinf+0x194>
 8010886:	ee70 7a27 	vadd.f32	s15, s0, s15
 801088a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010892:	dce5      	bgt.n	8010860 <__ieee754_asinf+0x28>
 8010894:	f7fe fc78 	bl	800f188 <fabsf>
 8010898:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801089c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80108a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80108a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80109d0 <__ieee754_asinf+0x198>
 80108a8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80109d4 <__ieee754_asinf+0x19c>
 80108ac:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80109d8 <__ieee754_asinf+0x1a0>
 80108b0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80108b4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80109dc <__ieee754_asinf+0x1a4>
 80108b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80108bc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80109e0 <__ieee754_asinf+0x1a8>
 80108c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80108c4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80109e4 <__ieee754_asinf+0x1ac>
 80108c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80108cc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80109e8 <__ieee754_asinf+0x1b0>
 80108d0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80108d4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80109ec <__ieee754_asinf+0x1b4>
 80108d8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80108dc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80109f0 <__ieee754_asinf+0x1b8>
 80108e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80108e4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80109f4 <__ieee754_asinf+0x1bc>
 80108e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80108ec:	eeb0 0a48 	vmov.f32	s0, s16
 80108f0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80108f4:	f7fe fd90 	bl	800f418 <__ieee754_sqrtf>
 80108f8:	4b3f      	ldr	r3, [pc, #252]	@ (80109f8 <__ieee754_asinf+0x1c0>)
 80108fa:	ee29 9a08 	vmul.f32	s18, s18, s16
 80108fe:	429c      	cmp	r4, r3
 8010900:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010904:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010908:	d93d      	bls.n	8010986 <__ieee754_asinf+0x14e>
 801090a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801090e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80109fc <__ieee754_asinf+0x1c4>
 8010912:	eee0 7a26 	vfma.f32	s15, s0, s13
 8010916:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80109c8 <__ieee754_asinf+0x190>
 801091a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801091e:	2d00      	cmp	r5, #0
 8010920:	bfd8      	it	le
 8010922:	eeb1 0a40 	vnegle.f32	s0, s0
 8010926:	e79b      	b.n	8010860 <__ieee754_asinf+0x28>
 8010928:	ee60 7a00 	vmul.f32	s15, s0, s0
 801092c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80109d4 <__ieee754_asinf+0x19c>
 8010930:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80109d0 <__ieee754_asinf+0x198>
 8010934:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80109e8 <__ieee754_asinf+0x1b0>
 8010938:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801093c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80109dc <__ieee754_asinf+0x1a4>
 8010940:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010944:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80109e0 <__ieee754_asinf+0x1a8>
 8010948:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801094c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80109e4 <__ieee754_asinf+0x1ac>
 8010950:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010954:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80109d8 <__ieee754_asinf+0x1a0>
 8010958:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801095c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80109ec <__ieee754_asinf+0x1b4>
 8010960:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010964:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80109f0 <__ieee754_asinf+0x1b8>
 8010968:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801096c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80109f4 <__ieee754_asinf+0x1bc>
 8010970:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010978:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801097c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010980:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010984:	e76c      	b.n	8010860 <__ieee754_asinf+0x28>
 8010986:	ee10 3a10 	vmov	r3, s0
 801098a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801098e:	f023 030f 	bic.w	r3, r3, #15
 8010992:	ee07 3a10 	vmov	s14, r3
 8010996:	eea7 8a47 	vfms.f32	s16, s14, s14
 801099a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801099e:	ee30 0a07 	vadd.f32	s0, s0, s14
 80109a2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80109c4 <__ieee754_asinf+0x18c>
 80109a6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80109aa:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010a00 <__ieee754_asinf+0x1c8>
 80109ae:	eee5 7a66 	vfms.f32	s15, s10, s13
 80109b2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80109b6:	eeb0 6a40 	vmov.f32	s12, s0
 80109ba:	eea7 6a66 	vfms.f32	s12, s14, s13
 80109be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80109c2:	e7aa      	b.n	801091a <__ieee754_asinf+0xe2>
 80109c4:	b33bbd2e 	.word	0xb33bbd2e
 80109c8:	3fc90fdb 	.word	0x3fc90fdb
 80109cc:	7149f2ca 	.word	0x7149f2ca
 80109d0:	3a4f7f04 	.word	0x3a4f7f04
 80109d4:	3811ef08 	.word	0x3811ef08
 80109d8:	3e2aaaab 	.word	0x3e2aaaab
 80109dc:	bd241146 	.word	0xbd241146
 80109e0:	3e4e0aa8 	.word	0x3e4e0aa8
 80109e4:	bea6b090 	.word	0xbea6b090
 80109e8:	3d9dc62e 	.word	0x3d9dc62e
 80109ec:	bf303361 	.word	0xbf303361
 80109f0:	4001572d 	.word	0x4001572d
 80109f4:	c019d139 	.word	0xc019d139
 80109f8:	3f799999 	.word	0x3f799999
 80109fc:	333bbd2e 	.word	0x333bbd2e
 8010a00:	3f490fdb 	.word	0x3f490fdb

08010a04 <__ieee754_atan2f>:
 8010a04:	ee10 2a90 	vmov	r2, s1
 8010a08:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010a0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010a10:	b510      	push	{r4, lr}
 8010a12:	eef0 7a40 	vmov.f32	s15, s0
 8010a16:	d806      	bhi.n	8010a26 <__ieee754_atan2f+0x22>
 8010a18:	ee10 0a10 	vmov	r0, s0
 8010a1c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010a20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010a24:	d904      	bls.n	8010a30 <__ieee754_atan2f+0x2c>
 8010a26:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8010a2e:	bd10      	pop	{r4, pc}
 8010a30:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010a34:	d103      	bne.n	8010a3e <__ieee754_atan2f+0x3a>
 8010a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a3a:	f000 b883 	b.w	8010b44 <atanf>
 8010a3e:	1794      	asrs	r4, r2, #30
 8010a40:	f004 0402 	and.w	r4, r4, #2
 8010a44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010a48:	b943      	cbnz	r3, 8010a5c <__ieee754_atan2f+0x58>
 8010a4a:	2c02      	cmp	r4, #2
 8010a4c:	d05e      	beq.n	8010b0c <__ieee754_atan2f+0x108>
 8010a4e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010b20 <__ieee754_atan2f+0x11c>
 8010a52:	2c03      	cmp	r4, #3
 8010a54:	bf08      	it	eq
 8010a56:	eef0 7a47 	vmoveq.f32	s15, s14
 8010a5a:	e7e6      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010a5c:	b941      	cbnz	r1, 8010a70 <__ieee754_atan2f+0x6c>
 8010a5e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010b24 <__ieee754_atan2f+0x120>
 8010a62:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010b28 <__ieee754_atan2f+0x124>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	bfb8      	it	lt
 8010a6a:	eef0 7a47 	vmovlt.f32	s15, s14
 8010a6e:	e7dc      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010a70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010a74:	d110      	bne.n	8010a98 <__ieee754_atan2f+0x94>
 8010a76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010a7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8010a7e:	d107      	bne.n	8010a90 <__ieee754_atan2f+0x8c>
 8010a80:	2c02      	cmp	r4, #2
 8010a82:	d846      	bhi.n	8010b12 <__ieee754_atan2f+0x10e>
 8010a84:	4b29      	ldr	r3, [pc, #164]	@ (8010b2c <__ieee754_atan2f+0x128>)
 8010a86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010a8a:	edd3 7a00 	vldr	s15, [r3]
 8010a8e:	e7cc      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010a90:	2c02      	cmp	r4, #2
 8010a92:	d841      	bhi.n	8010b18 <__ieee754_atan2f+0x114>
 8010a94:	4b26      	ldr	r3, [pc, #152]	@ (8010b30 <__ieee754_atan2f+0x12c>)
 8010a96:	e7f6      	b.n	8010a86 <__ieee754_atan2f+0x82>
 8010a98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010a9c:	d0df      	beq.n	8010a5e <__ieee754_atan2f+0x5a>
 8010a9e:	1a5b      	subs	r3, r3, r1
 8010aa0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010aa4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010aa8:	da1a      	bge.n	8010ae0 <__ieee754_atan2f+0xdc>
 8010aaa:	2a00      	cmp	r2, #0
 8010aac:	da01      	bge.n	8010ab2 <__ieee754_atan2f+0xae>
 8010aae:	313c      	adds	r1, #60	@ 0x3c
 8010ab0:	db19      	blt.n	8010ae6 <__ieee754_atan2f+0xe2>
 8010ab2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010ab6:	f7fe fb67 	bl	800f188 <fabsf>
 8010aba:	f000 f843 	bl	8010b44 <atanf>
 8010abe:	eef0 7a40 	vmov.f32	s15, s0
 8010ac2:	2c01      	cmp	r4, #1
 8010ac4:	d012      	beq.n	8010aec <__ieee754_atan2f+0xe8>
 8010ac6:	2c02      	cmp	r4, #2
 8010ac8:	d017      	beq.n	8010afa <__ieee754_atan2f+0xf6>
 8010aca:	2c00      	cmp	r4, #0
 8010acc:	d0ad      	beq.n	8010a2a <__ieee754_atan2f+0x26>
 8010ace:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010b34 <__ieee754_atan2f+0x130>
 8010ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ad6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010b38 <__ieee754_atan2f+0x134>
 8010ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ade:	e7a4      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010ae0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010b24 <__ieee754_atan2f+0x120>
 8010ae4:	e7ed      	b.n	8010ac2 <__ieee754_atan2f+0xbe>
 8010ae6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010b3c <__ieee754_atan2f+0x138>
 8010aea:	e7ea      	b.n	8010ac2 <__ieee754_atan2f+0xbe>
 8010aec:	ee17 3a90 	vmov	r3, s15
 8010af0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010af4:	ee07 3a90 	vmov	s15, r3
 8010af8:	e797      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010afa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010b34 <__ieee754_atan2f+0x130>
 8010afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b02:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010b38 <__ieee754_atan2f+0x134>
 8010b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b0a:	e78e      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010b0c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010b38 <__ieee754_atan2f+0x134>
 8010b10:	e78b      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010b12:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010b40 <__ieee754_atan2f+0x13c>
 8010b16:	e788      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010b18:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010b3c <__ieee754_atan2f+0x138>
 8010b1c:	e785      	b.n	8010a2a <__ieee754_atan2f+0x26>
 8010b1e:	bf00      	nop
 8010b20:	c0490fdb 	.word	0xc0490fdb
 8010b24:	3fc90fdb 	.word	0x3fc90fdb
 8010b28:	bfc90fdb 	.word	0xbfc90fdb
 8010b2c:	08011b94 	.word	0x08011b94
 8010b30:	08011b88 	.word	0x08011b88
 8010b34:	33bbbd2e 	.word	0x33bbbd2e
 8010b38:	40490fdb 	.word	0x40490fdb
 8010b3c:	00000000 	.word	0x00000000
 8010b40:	3f490fdb 	.word	0x3f490fdb

08010b44 <atanf>:
 8010b44:	b538      	push	{r3, r4, r5, lr}
 8010b46:	ee10 5a10 	vmov	r5, s0
 8010b4a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010b4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010b52:	eef0 7a40 	vmov.f32	s15, s0
 8010b56:	d310      	bcc.n	8010b7a <atanf+0x36>
 8010b58:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010b5c:	d904      	bls.n	8010b68 <atanf+0x24>
 8010b5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010b62:	eeb0 0a67 	vmov.f32	s0, s15
 8010b66:	bd38      	pop	{r3, r4, r5, pc}
 8010b68:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010ca0 <atanf+0x15c>
 8010b6c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010ca4 <atanf+0x160>
 8010b70:	2d00      	cmp	r5, #0
 8010b72:	bfc8      	it	gt
 8010b74:	eef0 7a47 	vmovgt.f32	s15, s14
 8010b78:	e7f3      	b.n	8010b62 <atanf+0x1e>
 8010b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8010ca8 <atanf+0x164>)
 8010b7c:	429c      	cmp	r4, r3
 8010b7e:	d810      	bhi.n	8010ba2 <atanf+0x5e>
 8010b80:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010b84:	d20a      	bcs.n	8010b9c <atanf+0x58>
 8010b86:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010cac <atanf+0x168>
 8010b8a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9a:	dce2      	bgt.n	8010b62 <atanf+0x1e>
 8010b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba0:	e013      	b.n	8010bca <atanf+0x86>
 8010ba2:	f7fe faf1 	bl	800f188 <fabsf>
 8010ba6:	4b42      	ldr	r3, [pc, #264]	@ (8010cb0 <atanf+0x16c>)
 8010ba8:	429c      	cmp	r4, r3
 8010baa:	d84f      	bhi.n	8010c4c <atanf+0x108>
 8010bac:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010bb0:	429c      	cmp	r4, r3
 8010bb2:	d841      	bhi.n	8010c38 <atanf+0xf4>
 8010bb4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010bb8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010bbc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010bca:	1c5a      	adds	r2, r3, #1
 8010bcc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010bd0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010cb4 <atanf+0x170>
 8010bd4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010cb8 <atanf+0x174>
 8010bd8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010cbc <atanf+0x178>
 8010bdc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010be0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010be4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010cc0 <atanf+0x17c>
 8010be8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010bec:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010cc4 <atanf+0x180>
 8010bf0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010bf4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010cc8 <atanf+0x184>
 8010bf8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010bfc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010ccc <atanf+0x188>
 8010c00:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010c04:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010cd0 <atanf+0x18c>
 8010c08:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010c0c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010cd4 <atanf+0x190>
 8010c10:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010c14:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010cd8 <atanf+0x194>
 8010c18:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010c1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010cdc <atanf+0x198>
 8010c20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010c24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010c28:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010c30:	d121      	bne.n	8010c76 <atanf+0x132>
 8010c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c36:	e794      	b.n	8010b62 <atanf+0x1e>
 8010c38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010c3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010c40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c44:	2301      	movs	r3, #1
 8010c46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c4a:	e7be      	b.n	8010bca <atanf+0x86>
 8010c4c:	4b24      	ldr	r3, [pc, #144]	@ (8010ce0 <atanf+0x19c>)
 8010c4e:	429c      	cmp	r4, r3
 8010c50:	d80b      	bhi.n	8010c6a <atanf+0x126>
 8010c52:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010c5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010c5e:	2302      	movs	r3, #2
 8010c60:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c68:	e7af      	b.n	8010bca <atanf+0x86>
 8010c6a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010c6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c72:	2303      	movs	r3, #3
 8010c74:	e7a9      	b.n	8010bca <atanf+0x86>
 8010c76:	4a1b      	ldr	r2, [pc, #108]	@ (8010ce4 <atanf+0x1a0>)
 8010c78:	491b      	ldr	r1, [pc, #108]	@ (8010ce8 <atanf+0x1a4>)
 8010c7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010c7e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010c82:	edd3 6a00 	vldr	s13, [r3]
 8010c86:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010c8a:	2d00      	cmp	r5, #0
 8010c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c90:	edd2 7a00 	vldr	s15, [r2]
 8010c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c98:	bfb8      	it	lt
 8010c9a:	eef1 7a67 	vneglt.f32	s15, s15
 8010c9e:	e760      	b.n	8010b62 <atanf+0x1e>
 8010ca0:	bfc90fdb 	.word	0xbfc90fdb
 8010ca4:	3fc90fdb 	.word	0x3fc90fdb
 8010ca8:	3edfffff 	.word	0x3edfffff
 8010cac:	7149f2ca 	.word	0x7149f2ca
 8010cb0:	3f97ffff 	.word	0x3f97ffff
 8010cb4:	3c8569d7 	.word	0x3c8569d7
 8010cb8:	3d4bda59 	.word	0x3d4bda59
 8010cbc:	bd6ef16b 	.word	0xbd6ef16b
 8010cc0:	3d886b35 	.word	0x3d886b35
 8010cc4:	3dba2e6e 	.word	0x3dba2e6e
 8010cc8:	3e124925 	.word	0x3e124925
 8010ccc:	3eaaaaab 	.word	0x3eaaaaab
 8010cd0:	bd15a221 	.word	0xbd15a221
 8010cd4:	bd9d8795 	.word	0xbd9d8795
 8010cd8:	bde38e38 	.word	0xbde38e38
 8010cdc:	be4ccccd 	.word	0xbe4ccccd
 8010ce0:	401bffff 	.word	0x401bffff
 8010ce4:	08011bb0 	.word	0x08011bb0
 8010ce8:	08011ba0 	.word	0x08011ba0
 8010cec:	00000000 	.word	0x00000000

08010cf0 <scalbn>:
 8010cf0:	b570      	push	{r4, r5, r6, lr}
 8010cf2:	ec55 4b10 	vmov	r4, r5, d0
 8010cf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010cfa:	4606      	mov	r6, r0
 8010cfc:	462b      	mov	r3, r5
 8010cfe:	b991      	cbnz	r1, 8010d26 <scalbn+0x36>
 8010d00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010d04:	4323      	orrs	r3, r4
 8010d06:	d03d      	beq.n	8010d84 <scalbn+0x94>
 8010d08:	4b35      	ldr	r3, [pc, #212]	@ (8010de0 <scalbn+0xf0>)
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	2200      	movs	r2, #0
 8010d10:	f7ef fc92 	bl	8000638 <__aeabi_dmul>
 8010d14:	4b33      	ldr	r3, [pc, #204]	@ (8010de4 <scalbn+0xf4>)
 8010d16:	429e      	cmp	r6, r3
 8010d18:	4604      	mov	r4, r0
 8010d1a:	460d      	mov	r5, r1
 8010d1c:	da0f      	bge.n	8010d3e <scalbn+0x4e>
 8010d1e:	a328      	add	r3, pc, #160	@ (adr r3, 8010dc0 <scalbn+0xd0>)
 8010d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d24:	e01e      	b.n	8010d64 <scalbn+0x74>
 8010d26:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010d2a:	4291      	cmp	r1, r2
 8010d2c:	d10b      	bne.n	8010d46 <scalbn+0x56>
 8010d2e:	4622      	mov	r2, r4
 8010d30:	4620      	mov	r0, r4
 8010d32:	4629      	mov	r1, r5
 8010d34:	f7ef faca 	bl	80002cc <__adddf3>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	460d      	mov	r5, r1
 8010d3c:	e022      	b.n	8010d84 <scalbn+0x94>
 8010d3e:	460b      	mov	r3, r1
 8010d40:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010d44:	3936      	subs	r1, #54	@ 0x36
 8010d46:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010d4a:	4296      	cmp	r6, r2
 8010d4c:	dd0d      	ble.n	8010d6a <scalbn+0x7a>
 8010d4e:	2d00      	cmp	r5, #0
 8010d50:	a11d      	add	r1, pc, #116	@ (adr r1, 8010dc8 <scalbn+0xd8>)
 8010d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d56:	da02      	bge.n	8010d5e <scalbn+0x6e>
 8010d58:	a11d      	add	r1, pc, #116	@ (adr r1, 8010dd0 <scalbn+0xe0>)
 8010d5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8010dc8 <scalbn+0xd8>)
 8010d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d64:	f7ef fc68 	bl	8000638 <__aeabi_dmul>
 8010d68:	e7e6      	b.n	8010d38 <scalbn+0x48>
 8010d6a:	1872      	adds	r2, r6, r1
 8010d6c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010d70:	428a      	cmp	r2, r1
 8010d72:	dcec      	bgt.n	8010d4e <scalbn+0x5e>
 8010d74:	2a00      	cmp	r2, #0
 8010d76:	dd08      	ble.n	8010d8a <scalbn+0x9a>
 8010d78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010d7c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010d80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010d84:	ec45 4b10 	vmov	d0, r4, r5
 8010d88:	bd70      	pop	{r4, r5, r6, pc}
 8010d8a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010d8e:	da08      	bge.n	8010da2 <scalbn+0xb2>
 8010d90:	2d00      	cmp	r5, #0
 8010d92:	a10b      	add	r1, pc, #44	@ (adr r1, 8010dc0 <scalbn+0xd0>)
 8010d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d98:	dac1      	bge.n	8010d1e <scalbn+0x2e>
 8010d9a:	a10f      	add	r1, pc, #60	@ (adr r1, 8010dd8 <scalbn+0xe8>)
 8010d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010da0:	e7bd      	b.n	8010d1e <scalbn+0x2e>
 8010da2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010da6:	3236      	adds	r2, #54	@ 0x36
 8010da8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010dac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010db0:	4620      	mov	r0, r4
 8010db2:	4b0d      	ldr	r3, [pc, #52]	@ (8010de8 <scalbn+0xf8>)
 8010db4:	4629      	mov	r1, r5
 8010db6:	2200      	movs	r2, #0
 8010db8:	e7d4      	b.n	8010d64 <scalbn+0x74>
 8010dba:	bf00      	nop
 8010dbc:	f3af 8000 	nop.w
 8010dc0:	c2f8f359 	.word	0xc2f8f359
 8010dc4:	01a56e1f 	.word	0x01a56e1f
 8010dc8:	8800759c 	.word	0x8800759c
 8010dcc:	7e37e43c 	.word	0x7e37e43c
 8010dd0:	8800759c 	.word	0x8800759c
 8010dd4:	fe37e43c 	.word	0xfe37e43c
 8010dd8:	c2f8f359 	.word	0xc2f8f359
 8010ddc:	81a56e1f 	.word	0x81a56e1f
 8010de0:	43500000 	.word	0x43500000
 8010de4:	ffff3cb0 	.word	0xffff3cb0
 8010de8:	3c900000 	.word	0x3c900000

08010dec <with_errno>:
 8010dec:	b510      	push	{r4, lr}
 8010dee:	ed2d 8b02 	vpush	{d8}
 8010df2:	eeb0 8a40 	vmov.f32	s16, s0
 8010df6:	eef0 8a60 	vmov.f32	s17, s1
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	f7fc fa60 	bl	800d2c0 <__errno>
 8010e00:	eeb0 0a48 	vmov.f32	s0, s16
 8010e04:	eef0 0a68 	vmov.f32	s1, s17
 8010e08:	ecbd 8b02 	vpop	{d8}
 8010e0c:	6004      	str	r4, [r0, #0]
 8010e0e:	bd10      	pop	{r4, pc}

08010e10 <xflow>:
 8010e10:	4603      	mov	r3, r0
 8010e12:	b507      	push	{r0, r1, r2, lr}
 8010e14:	ec51 0b10 	vmov	r0, r1, d0
 8010e18:	b183      	cbz	r3, 8010e3c <xflow+0x2c>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e20:	e9cd 2300 	strd	r2, r3, [sp]
 8010e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e28:	f7ef fc06 	bl	8000638 <__aeabi_dmul>
 8010e2c:	ec41 0b10 	vmov	d0, r0, r1
 8010e30:	2022      	movs	r0, #34	@ 0x22
 8010e32:	b003      	add	sp, #12
 8010e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e38:	f7ff bfd8 	b.w	8010dec <with_errno>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	e7ee      	b.n	8010e20 <xflow+0x10>
 8010e42:	0000      	movs	r0, r0
 8010e44:	0000      	movs	r0, r0
	...

08010e48 <__math_uflow>:
 8010e48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010e50 <__math_uflow+0x8>
 8010e4c:	f7ff bfe0 	b.w	8010e10 <xflow>
 8010e50:	00000000 	.word	0x00000000
 8010e54:	10000000 	.word	0x10000000

08010e58 <__math_oflow>:
 8010e58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010e60 <__math_oflow+0x8>
 8010e5c:	f7ff bfd8 	b.w	8010e10 <xflow>
 8010e60:	00000000 	.word	0x00000000
 8010e64:	70000000 	.word	0x70000000

08010e68 <__kernel_rem_pio2>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	ed2d 8b02 	vpush	{d8}
 8010e70:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010e74:	f112 0f14 	cmn.w	r2, #20
 8010e78:	9306      	str	r3, [sp, #24]
 8010e7a:	9104      	str	r1, [sp, #16]
 8010e7c:	4bbe      	ldr	r3, [pc, #760]	@ (8011178 <__kernel_rem_pio2+0x310>)
 8010e7e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010e80:	9008      	str	r0, [sp, #32]
 8010e82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	9b06      	ldr	r3, [sp, #24]
 8010e8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e8e:	bfa8      	it	ge
 8010e90:	1ed4      	subge	r4, r2, #3
 8010e92:	9305      	str	r3, [sp, #20]
 8010e94:	bfb2      	itee	lt
 8010e96:	2400      	movlt	r4, #0
 8010e98:	2318      	movge	r3, #24
 8010e9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010e9e:	f06f 0317 	mvn.w	r3, #23
 8010ea2:	fb04 3303 	mla	r3, r4, r3, r3
 8010ea6:	eb03 0b02 	add.w	fp, r3, r2
 8010eaa:	9b00      	ldr	r3, [sp, #0]
 8010eac:	9a05      	ldr	r2, [sp, #20]
 8010eae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011168 <__kernel_rem_pio2+0x300>
 8010eb2:	eb03 0802 	add.w	r8, r3, r2
 8010eb6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010eb8:	1aa7      	subs	r7, r4, r2
 8010eba:	ae20      	add	r6, sp, #128	@ 0x80
 8010ebc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010ec0:	2500      	movs	r5, #0
 8010ec2:	4545      	cmp	r5, r8
 8010ec4:	dd13      	ble.n	8010eee <__kernel_rem_pio2+0x86>
 8010ec6:	9b06      	ldr	r3, [sp, #24]
 8010ec8:	aa20      	add	r2, sp, #128	@ 0x80
 8010eca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010ece:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010ed2:	f04f 0800 	mov.w	r8, #0
 8010ed6:	9b00      	ldr	r3, [sp, #0]
 8010ed8:	4598      	cmp	r8, r3
 8010eda:	dc31      	bgt.n	8010f40 <__kernel_rem_pio2+0xd8>
 8010edc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011168 <__kernel_rem_pio2+0x300>
 8010ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ee8:	462f      	mov	r7, r5
 8010eea:	2600      	movs	r6, #0
 8010eec:	e01b      	b.n	8010f26 <__kernel_rem_pio2+0xbe>
 8010eee:	42ef      	cmn	r7, r5
 8010ef0:	d407      	bmi.n	8010f02 <__kernel_rem_pio2+0x9a>
 8010ef2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010ef6:	f7ef fb35 	bl	8000564 <__aeabi_i2d>
 8010efa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010efe:	3501      	adds	r5, #1
 8010f00:	e7df      	b.n	8010ec2 <__kernel_rem_pio2+0x5a>
 8010f02:	ec51 0b18 	vmov	r0, r1, d8
 8010f06:	e7f8      	b.n	8010efa <__kernel_rem_pio2+0x92>
 8010f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010f10:	f7ef fb92 	bl	8000638 <__aeabi_dmul>
 8010f14:	4602      	mov	r2, r0
 8010f16:	460b      	mov	r3, r1
 8010f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f1c:	f7ef f9d6 	bl	80002cc <__adddf3>
 8010f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f24:	3601      	adds	r6, #1
 8010f26:	9b05      	ldr	r3, [sp, #20]
 8010f28:	429e      	cmp	r6, r3
 8010f2a:	f1a7 0708 	sub.w	r7, r7, #8
 8010f2e:	ddeb      	ble.n	8010f08 <__kernel_rem_pio2+0xa0>
 8010f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f34:	f108 0801 	add.w	r8, r8, #1
 8010f38:	ecaa 7b02 	vstmia	sl!, {d7}
 8010f3c:	3508      	adds	r5, #8
 8010f3e:	e7ca      	b.n	8010ed6 <__kernel_rem_pio2+0x6e>
 8010f40:	9b00      	ldr	r3, [sp, #0]
 8010f42:	f8dd 8000 	ldr.w	r8, [sp]
 8010f46:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010f50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010f5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f5c:	ab98      	add	r3, sp, #608	@ 0x260
 8010f5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010f62:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010f66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010f6a:	ac0c      	add	r4, sp, #48	@ 0x30
 8010f6c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010f6e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010f72:	46a1      	mov	r9, r4
 8010f74:	46c2      	mov	sl, r8
 8010f76:	f1ba 0f00 	cmp.w	sl, #0
 8010f7a:	f1a5 0508 	sub.w	r5, r5, #8
 8010f7e:	dc77      	bgt.n	8011070 <__kernel_rem_pio2+0x208>
 8010f80:	4658      	mov	r0, fp
 8010f82:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010f86:	f7ff feb3 	bl	8010cf0 <scalbn>
 8010f8a:	ec57 6b10 	vmov	r6, r7, d0
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010f94:	4630      	mov	r0, r6
 8010f96:	4639      	mov	r1, r7
 8010f98:	f7ef fb4e 	bl	8000638 <__aeabi_dmul>
 8010f9c:	ec41 0b10 	vmov	d0, r0, r1
 8010fa0:	f000 faba 	bl	8011518 <floor>
 8010fa4:	4b75      	ldr	r3, [pc, #468]	@ (801117c <__kernel_rem_pio2+0x314>)
 8010fa6:	ec51 0b10 	vmov	r0, r1, d0
 8010faa:	2200      	movs	r2, #0
 8010fac:	f7ef fb44 	bl	8000638 <__aeabi_dmul>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	4639      	mov	r1, r7
 8010fb8:	f7ef f986 	bl	80002c8 <__aeabi_dsub>
 8010fbc:	460f      	mov	r7, r1
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	f7ef fdea 	bl	8000b98 <__aeabi_d2iz>
 8010fc4:	9002      	str	r0, [sp, #8]
 8010fc6:	f7ef facd 	bl	8000564 <__aeabi_i2d>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	460b      	mov	r3, r1
 8010fce:	4630      	mov	r0, r6
 8010fd0:	4639      	mov	r1, r7
 8010fd2:	f7ef f979 	bl	80002c8 <__aeabi_dsub>
 8010fd6:	f1bb 0f00 	cmp.w	fp, #0
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460f      	mov	r7, r1
 8010fde:	dd6c      	ble.n	80110ba <__kernel_rem_pio2+0x252>
 8010fe0:	f108 31ff 	add.w	r1, r8, #4294967295
 8010fe4:	ab0c      	add	r3, sp, #48	@ 0x30
 8010fe6:	9d02      	ldr	r5, [sp, #8]
 8010fe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fec:	f1cb 0018 	rsb	r0, fp, #24
 8010ff0:	fa43 f200 	asr.w	r2, r3, r0
 8010ff4:	4415      	add	r5, r2
 8010ff6:	4082      	lsls	r2, r0
 8010ff8:	1a9b      	subs	r3, r3, r2
 8010ffa:	aa0c      	add	r2, sp, #48	@ 0x30
 8010ffc:	9502      	str	r5, [sp, #8]
 8010ffe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011002:	f1cb 0217 	rsb	r2, fp, #23
 8011006:	fa43 f902 	asr.w	r9, r3, r2
 801100a:	f1b9 0f00 	cmp.w	r9, #0
 801100e:	dd64      	ble.n	80110da <__kernel_rem_pio2+0x272>
 8011010:	9b02      	ldr	r3, [sp, #8]
 8011012:	2200      	movs	r2, #0
 8011014:	3301      	adds	r3, #1
 8011016:	9302      	str	r3, [sp, #8]
 8011018:	4615      	mov	r5, r2
 801101a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801101e:	4590      	cmp	r8, r2
 8011020:	f300 80b8 	bgt.w	8011194 <__kernel_rem_pio2+0x32c>
 8011024:	f1bb 0f00 	cmp.w	fp, #0
 8011028:	dd07      	ble.n	801103a <__kernel_rem_pio2+0x1d2>
 801102a:	f1bb 0f01 	cmp.w	fp, #1
 801102e:	f000 80bf 	beq.w	80111b0 <__kernel_rem_pio2+0x348>
 8011032:	f1bb 0f02 	cmp.w	fp, #2
 8011036:	f000 80c6 	beq.w	80111c6 <__kernel_rem_pio2+0x35e>
 801103a:	f1b9 0f02 	cmp.w	r9, #2
 801103e:	d14c      	bne.n	80110da <__kernel_rem_pio2+0x272>
 8011040:	4632      	mov	r2, r6
 8011042:	463b      	mov	r3, r7
 8011044:	494e      	ldr	r1, [pc, #312]	@ (8011180 <__kernel_rem_pio2+0x318>)
 8011046:	2000      	movs	r0, #0
 8011048:	f7ef f93e 	bl	80002c8 <__aeabi_dsub>
 801104c:	4606      	mov	r6, r0
 801104e:	460f      	mov	r7, r1
 8011050:	2d00      	cmp	r5, #0
 8011052:	d042      	beq.n	80110da <__kernel_rem_pio2+0x272>
 8011054:	4658      	mov	r0, fp
 8011056:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011170 <__kernel_rem_pio2+0x308>
 801105a:	f7ff fe49 	bl	8010cf0 <scalbn>
 801105e:	4630      	mov	r0, r6
 8011060:	4639      	mov	r1, r7
 8011062:	ec53 2b10 	vmov	r2, r3, d0
 8011066:	f7ef f92f 	bl	80002c8 <__aeabi_dsub>
 801106a:	4606      	mov	r6, r0
 801106c:	460f      	mov	r7, r1
 801106e:	e034      	b.n	80110da <__kernel_rem_pio2+0x272>
 8011070:	4b44      	ldr	r3, [pc, #272]	@ (8011184 <__kernel_rem_pio2+0x31c>)
 8011072:	2200      	movs	r2, #0
 8011074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011078:	f7ef fade 	bl	8000638 <__aeabi_dmul>
 801107c:	f7ef fd8c 	bl	8000b98 <__aeabi_d2iz>
 8011080:	f7ef fa70 	bl	8000564 <__aeabi_i2d>
 8011084:	4b40      	ldr	r3, [pc, #256]	@ (8011188 <__kernel_rem_pio2+0x320>)
 8011086:	2200      	movs	r2, #0
 8011088:	4606      	mov	r6, r0
 801108a:	460f      	mov	r7, r1
 801108c:	f7ef fad4 	bl	8000638 <__aeabi_dmul>
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011098:	f7ef f916 	bl	80002c8 <__aeabi_dsub>
 801109c:	f7ef fd7c 	bl	8000b98 <__aeabi_d2iz>
 80110a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110a4:	f849 0b04 	str.w	r0, [r9], #4
 80110a8:	4639      	mov	r1, r7
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ef f90e 	bl	80002cc <__adddf3>
 80110b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110b8:	e75d      	b.n	8010f76 <__kernel_rem_pio2+0x10e>
 80110ba:	d107      	bne.n	80110cc <__kernel_rem_pio2+0x264>
 80110bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80110c0:	aa0c      	add	r2, sp, #48	@ 0x30
 80110c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110c6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80110ca:	e79e      	b.n	801100a <__kernel_rem_pio2+0x1a2>
 80110cc:	4b2f      	ldr	r3, [pc, #188]	@ (801118c <__kernel_rem_pio2+0x324>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	f7ef fd38 	bl	8000b44 <__aeabi_dcmpge>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d143      	bne.n	8011160 <__kernel_rem_pio2+0x2f8>
 80110d8:	4681      	mov	r9, r0
 80110da:	2200      	movs	r2, #0
 80110dc:	2300      	movs	r3, #0
 80110de:	4630      	mov	r0, r6
 80110e0:	4639      	mov	r1, r7
 80110e2:	f7ef fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	f000 80bf 	beq.w	801126a <__kernel_rem_pio2+0x402>
 80110ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80110f0:	2200      	movs	r2, #0
 80110f2:	9900      	ldr	r1, [sp, #0]
 80110f4:	428b      	cmp	r3, r1
 80110f6:	da6e      	bge.n	80111d6 <__kernel_rem_pio2+0x36e>
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	f000 8089 	beq.w	8011210 <__kernel_rem_pio2+0x3a8>
 80110fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8011102:	ab0c      	add	r3, sp, #48	@ 0x30
 8011104:	f1ab 0b18 	sub.w	fp, fp, #24
 8011108:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d0f6      	beq.n	80110fe <__kernel_rem_pio2+0x296>
 8011110:	4658      	mov	r0, fp
 8011112:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011170 <__kernel_rem_pio2+0x308>
 8011116:	f7ff fdeb 	bl	8010cf0 <scalbn>
 801111a:	f108 0301 	add.w	r3, r8, #1
 801111e:	00da      	lsls	r2, r3, #3
 8011120:	9205      	str	r2, [sp, #20]
 8011122:	ec55 4b10 	vmov	r4, r5, d0
 8011126:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011128:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8011184 <__kernel_rem_pio2+0x31c>
 801112c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011130:	4646      	mov	r6, r8
 8011132:	f04f 0a00 	mov.w	sl, #0
 8011136:	2e00      	cmp	r6, #0
 8011138:	f280 80cf 	bge.w	80112da <__kernel_rem_pio2+0x472>
 801113c:	4644      	mov	r4, r8
 801113e:	2c00      	cmp	r4, #0
 8011140:	f2c0 80fd 	blt.w	801133e <__kernel_rem_pio2+0x4d6>
 8011144:	4b12      	ldr	r3, [pc, #72]	@ (8011190 <__kernel_rem_pio2+0x328>)
 8011146:	461f      	mov	r7, r3
 8011148:	ab70      	add	r3, sp, #448	@ 0x1c0
 801114a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801114e:	9306      	str	r3, [sp, #24]
 8011150:	f04f 0a00 	mov.w	sl, #0
 8011154:	f04f 0b00 	mov.w	fp, #0
 8011158:	2600      	movs	r6, #0
 801115a:	eba8 0504 	sub.w	r5, r8, r4
 801115e:	e0e2      	b.n	8011326 <__kernel_rem_pio2+0x4be>
 8011160:	f04f 0902 	mov.w	r9, #2
 8011164:	e754      	b.n	8011010 <__kernel_rem_pio2+0x1a8>
 8011166:	bf00      	nop
	...
 8011174:	3ff00000 	.word	0x3ff00000
 8011178:	08011c00 	.word	0x08011c00
 801117c:	40200000 	.word	0x40200000
 8011180:	3ff00000 	.word	0x3ff00000
 8011184:	3e700000 	.word	0x3e700000
 8011188:	41700000 	.word	0x41700000
 801118c:	3fe00000 	.word	0x3fe00000
 8011190:	08011bc0 	.word	0x08011bc0
 8011194:	f854 3b04 	ldr.w	r3, [r4], #4
 8011198:	b945      	cbnz	r5, 80111ac <__kernel_rem_pio2+0x344>
 801119a:	b123      	cbz	r3, 80111a6 <__kernel_rem_pio2+0x33e>
 801119c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80111a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80111a4:	2301      	movs	r3, #1
 80111a6:	3201      	adds	r2, #1
 80111a8:	461d      	mov	r5, r3
 80111aa:	e738      	b.n	801101e <__kernel_rem_pio2+0x1b6>
 80111ac:	1acb      	subs	r3, r1, r3
 80111ae:	e7f7      	b.n	80111a0 <__kernel_rem_pio2+0x338>
 80111b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80111b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80111b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80111be:	a90c      	add	r1, sp, #48	@ 0x30
 80111c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80111c4:	e739      	b.n	801103a <__kernel_rem_pio2+0x1d2>
 80111c6:	f108 32ff 	add.w	r2, r8, #4294967295
 80111ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80111cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80111d4:	e7f3      	b.n	80111be <__kernel_rem_pio2+0x356>
 80111d6:	a90c      	add	r1, sp, #48	@ 0x30
 80111d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80111dc:	3b01      	subs	r3, #1
 80111de:	430a      	orrs	r2, r1
 80111e0:	e787      	b.n	80110f2 <__kernel_rem_pio2+0x28a>
 80111e2:	3401      	adds	r4, #1
 80111e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	d0fa      	beq.n	80111e2 <__kernel_rem_pio2+0x37a>
 80111ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80111f2:	eb0d 0503 	add.w	r5, sp, r3
 80111f6:	9b06      	ldr	r3, [sp, #24]
 80111f8:	aa20      	add	r2, sp, #128	@ 0x80
 80111fa:	4443      	add	r3, r8
 80111fc:	f108 0701 	add.w	r7, r8, #1
 8011200:	3d98      	subs	r5, #152	@ 0x98
 8011202:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011206:	4444      	add	r4, r8
 8011208:	42bc      	cmp	r4, r7
 801120a:	da04      	bge.n	8011216 <__kernel_rem_pio2+0x3ae>
 801120c:	46a0      	mov	r8, r4
 801120e:	e6a2      	b.n	8010f56 <__kernel_rem_pio2+0xee>
 8011210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011212:	2401      	movs	r4, #1
 8011214:	e7e6      	b.n	80111e4 <__kernel_rem_pio2+0x37c>
 8011216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011218:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801121c:	f7ef f9a2 	bl	8000564 <__aeabi_i2d>
 8011220:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80114e8 <__kernel_rem_pio2+0x680>
 8011224:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011228:	ed8d 7b02 	vstr	d7, [sp, #8]
 801122c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011230:	46b2      	mov	sl, r6
 8011232:	f04f 0800 	mov.w	r8, #0
 8011236:	9b05      	ldr	r3, [sp, #20]
 8011238:	4598      	cmp	r8, r3
 801123a:	dd05      	ble.n	8011248 <__kernel_rem_pio2+0x3e0>
 801123c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011240:	3701      	adds	r7, #1
 8011242:	eca5 7b02 	vstmia	r5!, {d7}
 8011246:	e7df      	b.n	8011208 <__kernel_rem_pio2+0x3a0>
 8011248:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801124c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011250:	f7ef f9f2 	bl	8000638 <__aeabi_dmul>
 8011254:	4602      	mov	r2, r0
 8011256:	460b      	mov	r3, r1
 8011258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125c:	f7ef f836 	bl	80002cc <__adddf3>
 8011260:	f108 0801 	add.w	r8, r8, #1
 8011264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011268:	e7e5      	b.n	8011236 <__kernel_rem_pio2+0x3ce>
 801126a:	f1cb 0000 	rsb	r0, fp, #0
 801126e:	ec47 6b10 	vmov	d0, r6, r7
 8011272:	f7ff fd3d 	bl	8010cf0 <scalbn>
 8011276:	ec55 4b10 	vmov	r4, r5, d0
 801127a:	4b9d      	ldr	r3, [pc, #628]	@ (80114f0 <__kernel_rem_pio2+0x688>)
 801127c:	2200      	movs	r2, #0
 801127e:	4620      	mov	r0, r4
 8011280:	4629      	mov	r1, r5
 8011282:	f7ef fc5f 	bl	8000b44 <__aeabi_dcmpge>
 8011286:	b300      	cbz	r0, 80112ca <__kernel_rem_pio2+0x462>
 8011288:	4b9a      	ldr	r3, [pc, #616]	@ (80114f4 <__kernel_rem_pio2+0x68c>)
 801128a:	2200      	movs	r2, #0
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	f7ef f9d2 	bl	8000638 <__aeabi_dmul>
 8011294:	f7ef fc80 	bl	8000b98 <__aeabi_d2iz>
 8011298:	4606      	mov	r6, r0
 801129a:	f7ef f963 	bl	8000564 <__aeabi_i2d>
 801129e:	4b94      	ldr	r3, [pc, #592]	@ (80114f0 <__kernel_rem_pio2+0x688>)
 80112a0:	2200      	movs	r2, #0
 80112a2:	f7ef f9c9 	bl	8000638 <__aeabi_dmul>
 80112a6:	460b      	mov	r3, r1
 80112a8:	4602      	mov	r2, r0
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	f7ef f80b 	bl	80002c8 <__aeabi_dsub>
 80112b2:	f7ef fc71 	bl	8000b98 <__aeabi_d2iz>
 80112b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80112b8:	f10b 0b18 	add.w	fp, fp, #24
 80112bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80112c0:	f108 0801 	add.w	r8, r8, #1
 80112c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80112c8:	e722      	b.n	8011110 <__kernel_rem_pio2+0x2a8>
 80112ca:	4620      	mov	r0, r4
 80112cc:	4629      	mov	r1, r5
 80112ce:	f7ef fc63 	bl	8000b98 <__aeabi_d2iz>
 80112d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80112d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80112d8:	e71a      	b.n	8011110 <__kernel_rem_pio2+0x2a8>
 80112da:	ab0c      	add	r3, sp, #48	@ 0x30
 80112dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80112e0:	f7ef f940 	bl	8000564 <__aeabi_i2d>
 80112e4:	4622      	mov	r2, r4
 80112e6:	462b      	mov	r3, r5
 80112e8:	f7ef f9a6 	bl	8000638 <__aeabi_dmul>
 80112ec:	4652      	mov	r2, sl
 80112ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80112f2:	465b      	mov	r3, fp
 80112f4:	4620      	mov	r0, r4
 80112f6:	4629      	mov	r1, r5
 80112f8:	f7ef f99e 	bl	8000638 <__aeabi_dmul>
 80112fc:	3e01      	subs	r6, #1
 80112fe:	4604      	mov	r4, r0
 8011300:	460d      	mov	r5, r1
 8011302:	e718      	b.n	8011136 <__kernel_rem_pio2+0x2ce>
 8011304:	9906      	ldr	r1, [sp, #24]
 8011306:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801130a:	9106      	str	r1, [sp, #24]
 801130c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011310:	f7ef f992 	bl	8000638 <__aeabi_dmul>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	4650      	mov	r0, sl
 801131a:	4659      	mov	r1, fp
 801131c:	f7ee ffd6 	bl	80002cc <__adddf3>
 8011320:	3601      	adds	r6, #1
 8011322:	4682      	mov	sl, r0
 8011324:	468b      	mov	fp, r1
 8011326:	9b00      	ldr	r3, [sp, #0]
 8011328:	429e      	cmp	r6, r3
 801132a:	dc01      	bgt.n	8011330 <__kernel_rem_pio2+0x4c8>
 801132c:	42b5      	cmp	r5, r6
 801132e:	dae9      	bge.n	8011304 <__kernel_rem_pio2+0x49c>
 8011330:	ab48      	add	r3, sp, #288	@ 0x120
 8011332:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011336:	e9c5 ab00 	strd	sl, fp, [r5]
 801133a:	3c01      	subs	r4, #1
 801133c:	e6ff      	b.n	801113e <__kernel_rem_pio2+0x2d6>
 801133e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011340:	2b02      	cmp	r3, #2
 8011342:	dc0b      	bgt.n	801135c <__kernel_rem_pio2+0x4f4>
 8011344:	2b00      	cmp	r3, #0
 8011346:	dc39      	bgt.n	80113bc <__kernel_rem_pio2+0x554>
 8011348:	d05d      	beq.n	8011406 <__kernel_rem_pio2+0x59e>
 801134a:	9b02      	ldr	r3, [sp, #8]
 801134c:	f003 0007 	and.w	r0, r3, #7
 8011350:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011354:	ecbd 8b02 	vpop	{d8}
 8011358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801135e:	2b03      	cmp	r3, #3
 8011360:	d1f3      	bne.n	801134a <__kernel_rem_pio2+0x4e2>
 8011362:	9b05      	ldr	r3, [sp, #20]
 8011364:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011368:	eb0d 0403 	add.w	r4, sp, r3
 801136c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011370:	4625      	mov	r5, r4
 8011372:	46c2      	mov	sl, r8
 8011374:	f1ba 0f00 	cmp.w	sl, #0
 8011378:	f1a5 0508 	sub.w	r5, r5, #8
 801137c:	dc6b      	bgt.n	8011456 <__kernel_rem_pio2+0x5ee>
 801137e:	4645      	mov	r5, r8
 8011380:	2d01      	cmp	r5, #1
 8011382:	f1a4 0408 	sub.w	r4, r4, #8
 8011386:	f300 8087 	bgt.w	8011498 <__kernel_rem_pio2+0x630>
 801138a:	9c05      	ldr	r4, [sp, #20]
 801138c:	ab48      	add	r3, sp, #288	@ 0x120
 801138e:	441c      	add	r4, r3
 8011390:	2000      	movs	r0, #0
 8011392:	2100      	movs	r1, #0
 8011394:	f1b8 0f01 	cmp.w	r8, #1
 8011398:	f300 809c 	bgt.w	80114d4 <__kernel_rem_pio2+0x66c>
 801139c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80113a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80113a4:	f1b9 0f00 	cmp.w	r9, #0
 80113a8:	f040 80a6 	bne.w	80114f8 <__kernel_rem_pio2+0x690>
 80113ac:	9b04      	ldr	r3, [sp, #16]
 80113ae:	e9c3 7800 	strd	r7, r8, [r3]
 80113b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80113b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80113ba:	e7c6      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 80113bc:	9d05      	ldr	r5, [sp, #20]
 80113be:	ab48      	add	r3, sp, #288	@ 0x120
 80113c0:	441d      	add	r5, r3
 80113c2:	4644      	mov	r4, r8
 80113c4:	2000      	movs	r0, #0
 80113c6:	2100      	movs	r1, #0
 80113c8:	2c00      	cmp	r4, #0
 80113ca:	da35      	bge.n	8011438 <__kernel_rem_pio2+0x5d0>
 80113cc:	f1b9 0f00 	cmp.w	r9, #0
 80113d0:	d038      	beq.n	8011444 <__kernel_rem_pio2+0x5dc>
 80113d2:	4602      	mov	r2, r0
 80113d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113d8:	9c04      	ldr	r4, [sp, #16]
 80113da:	e9c4 2300 	strd	r2, r3, [r4]
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80113e6:	f7ee ff6f 	bl	80002c8 <__aeabi_dsub>
 80113ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80113ec:	2401      	movs	r4, #1
 80113ee:	45a0      	cmp	r8, r4
 80113f0:	da2b      	bge.n	801144a <__kernel_rem_pio2+0x5e2>
 80113f2:	f1b9 0f00 	cmp.w	r9, #0
 80113f6:	d002      	beq.n	80113fe <__kernel_rem_pio2+0x596>
 80113f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113fc:	4619      	mov	r1, r3
 80113fe:	9b04      	ldr	r3, [sp, #16]
 8011400:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011404:	e7a1      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 8011406:	9c05      	ldr	r4, [sp, #20]
 8011408:	ab48      	add	r3, sp, #288	@ 0x120
 801140a:	441c      	add	r4, r3
 801140c:	2000      	movs	r0, #0
 801140e:	2100      	movs	r1, #0
 8011410:	f1b8 0f00 	cmp.w	r8, #0
 8011414:	da09      	bge.n	801142a <__kernel_rem_pio2+0x5c2>
 8011416:	f1b9 0f00 	cmp.w	r9, #0
 801141a:	d002      	beq.n	8011422 <__kernel_rem_pio2+0x5ba>
 801141c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011420:	4619      	mov	r1, r3
 8011422:	9b04      	ldr	r3, [sp, #16]
 8011424:	e9c3 0100 	strd	r0, r1, [r3]
 8011428:	e78f      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 801142a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801142e:	f7ee ff4d 	bl	80002cc <__adddf3>
 8011432:	f108 38ff 	add.w	r8, r8, #4294967295
 8011436:	e7eb      	b.n	8011410 <__kernel_rem_pio2+0x5a8>
 8011438:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801143c:	f7ee ff46 	bl	80002cc <__adddf3>
 8011440:	3c01      	subs	r4, #1
 8011442:	e7c1      	b.n	80113c8 <__kernel_rem_pio2+0x560>
 8011444:	4602      	mov	r2, r0
 8011446:	460b      	mov	r3, r1
 8011448:	e7c6      	b.n	80113d8 <__kernel_rem_pio2+0x570>
 801144a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801144e:	f7ee ff3d 	bl	80002cc <__adddf3>
 8011452:	3401      	adds	r4, #1
 8011454:	e7cb      	b.n	80113ee <__kernel_rem_pio2+0x586>
 8011456:	ed95 7b00 	vldr	d7, [r5]
 801145a:	ed8d 7b00 	vstr	d7, [sp]
 801145e:	ed95 7b02 	vldr	d7, [r5, #8]
 8011462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011466:	ec53 2b17 	vmov	r2, r3, d7
 801146a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801146e:	f7ee ff2d 	bl	80002cc <__adddf3>
 8011472:	4602      	mov	r2, r0
 8011474:	460b      	mov	r3, r1
 8011476:	4606      	mov	r6, r0
 8011478:	460f      	mov	r7, r1
 801147a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801147e:	f7ee ff23 	bl	80002c8 <__aeabi_dsub>
 8011482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011486:	f7ee ff21 	bl	80002cc <__adddf3>
 801148a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801148e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8011492:	e9c5 6700 	strd	r6, r7, [r5]
 8011496:	e76d      	b.n	8011374 <__kernel_rem_pio2+0x50c>
 8011498:	ed94 7b00 	vldr	d7, [r4]
 801149c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80114a0:	ec51 0b17 	vmov	r0, r1, d7
 80114a4:	4652      	mov	r2, sl
 80114a6:	465b      	mov	r3, fp
 80114a8:	ed8d 7b00 	vstr	d7, [sp]
 80114ac:	f7ee ff0e 	bl	80002cc <__adddf3>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4606      	mov	r6, r0
 80114b6:	460f      	mov	r7, r1
 80114b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114bc:	f7ee ff04 	bl	80002c8 <__aeabi_dsub>
 80114c0:	4652      	mov	r2, sl
 80114c2:	465b      	mov	r3, fp
 80114c4:	f7ee ff02 	bl	80002cc <__adddf3>
 80114c8:	3d01      	subs	r5, #1
 80114ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114ce:	e9c4 6700 	strd	r6, r7, [r4]
 80114d2:	e755      	b.n	8011380 <__kernel_rem_pio2+0x518>
 80114d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80114d8:	f7ee fef8 	bl	80002cc <__adddf3>
 80114dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80114e0:	e758      	b.n	8011394 <__kernel_rem_pio2+0x52c>
 80114e2:	bf00      	nop
 80114e4:	f3af 8000 	nop.w
	...
 80114f0:	41700000 	.word	0x41700000
 80114f4:	3e700000 	.word	0x3e700000
 80114f8:	9b04      	ldr	r3, [sp, #16]
 80114fa:	9a04      	ldr	r2, [sp, #16]
 80114fc:	601f      	str	r7, [r3, #0]
 80114fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8011502:	605c      	str	r4, [r3, #4]
 8011504:	609d      	str	r5, [r3, #8]
 8011506:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801150a:	60d3      	str	r3, [r2, #12]
 801150c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011510:	6110      	str	r0, [r2, #16]
 8011512:	6153      	str	r3, [r2, #20]
 8011514:	e719      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 8011516:	bf00      	nop

08011518 <floor>:
 8011518:	ec51 0b10 	vmov	r0, r1, d0
 801151c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011524:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011528:	2e13      	cmp	r6, #19
 801152a:	460c      	mov	r4, r1
 801152c:	4605      	mov	r5, r0
 801152e:	4680      	mov	r8, r0
 8011530:	dc34      	bgt.n	801159c <floor+0x84>
 8011532:	2e00      	cmp	r6, #0
 8011534:	da17      	bge.n	8011566 <floor+0x4e>
 8011536:	a332      	add	r3, pc, #200	@ (adr r3, 8011600 <floor+0xe8>)
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	f7ee fec6 	bl	80002cc <__adddf3>
 8011540:	2200      	movs	r2, #0
 8011542:	2300      	movs	r3, #0
 8011544:	f7ef fb08 	bl	8000b58 <__aeabi_dcmpgt>
 8011548:	b150      	cbz	r0, 8011560 <floor+0x48>
 801154a:	2c00      	cmp	r4, #0
 801154c:	da55      	bge.n	80115fa <floor+0xe2>
 801154e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011552:	432c      	orrs	r4, r5
 8011554:	2500      	movs	r5, #0
 8011556:	42ac      	cmp	r4, r5
 8011558:	4c2b      	ldr	r4, [pc, #172]	@ (8011608 <floor+0xf0>)
 801155a:	bf08      	it	eq
 801155c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011560:	4621      	mov	r1, r4
 8011562:	4628      	mov	r0, r5
 8011564:	e023      	b.n	80115ae <floor+0x96>
 8011566:	4f29      	ldr	r7, [pc, #164]	@ (801160c <floor+0xf4>)
 8011568:	4137      	asrs	r7, r6
 801156a:	ea01 0307 	and.w	r3, r1, r7
 801156e:	4303      	orrs	r3, r0
 8011570:	d01d      	beq.n	80115ae <floor+0x96>
 8011572:	a323      	add	r3, pc, #140	@ (adr r3, 8011600 <floor+0xe8>)
 8011574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011578:	f7ee fea8 	bl	80002cc <__adddf3>
 801157c:	2200      	movs	r2, #0
 801157e:	2300      	movs	r3, #0
 8011580:	f7ef faea 	bl	8000b58 <__aeabi_dcmpgt>
 8011584:	2800      	cmp	r0, #0
 8011586:	d0eb      	beq.n	8011560 <floor+0x48>
 8011588:	2c00      	cmp	r4, #0
 801158a:	bfbe      	ittt	lt
 801158c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011590:	4133      	asrlt	r3, r6
 8011592:	18e4      	addlt	r4, r4, r3
 8011594:	ea24 0407 	bic.w	r4, r4, r7
 8011598:	2500      	movs	r5, #0
 801159a:	e7e1      	b.n	8011560 <floor+0x48>
 801159c:	2e33      	cmp	r6, #51	@ 0x33
 801159e:	dd0a      	ble.n	80115b6 <floor+0x9e>
 80115a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80115a4:	d103      	bne.n	80115ae <floor+0x96>
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	f7ee fe8f 	bl	80002cc <__adddf3>
 80115ae:	ec41 0b10 	vmov	d0, r0, r1
 80115b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80115ba:	f04f 37ff 	mov.w	r7, #4294967295
 80115be:	40df      	lsrs	r7, r3
 80115c0:	4207      	tst	r7, r0
 80115c2:	d0f4      	beq.n	80115ae <floor+0x96>
 80115c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8011600 <floor+0xe8>)
 80115c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ca:	f7ee fe7f 	bl	80002cc <__adddf3>
 80115ce:	2200      	movs	r2, #0
 80115d0:	2300      	movs	r3, #0
 80115d2:	f7ef fac1 	bl	8000b58 <__aeabi_dcmpgt>
 80115d6:	2800      	cmp	r0, #0
 80115d8:	d0c2      	beq.n	8011560 <floor+0x48>
 80115da:	2c00      	cmp	r4, #0
 80115dc:	da0a      	bge.n	80115f4 <floor+0xdc>
 80115de:	2e14      	cmp	r6, #20
 80115e0:	d101      	bne.n	80115e6 <floor+0xce>
 80115e2:	3401      	adds	r4, #1
 80115e4:	e006      	b.n	80115f4 <floor+0xdc>
 80115e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80115ea:	2301      	movs	r3, #1
 80115ec:	40b3      	lsls	r3, r6
 80115ee:	441d      	add	r5, r3
 80115f0:	4545      	cmp	r5, r8
 80115f2:	d3f6      	bcc.n	80115e2 <floor+0xca>
 80115f4:	ea25 0507 	bic.w	r5, r5, r7
 80115f8:	e7b2      	b.n	8011560 <floor+0x48>
 80115fa:	2500      	movs	r5, #0
 80115fc:	462c      	mov	r4, r5
 80115fe:	e7af      	b.n	8011560 <floor+0x48>
 8011600:	8800759c 	.word	0x8800759c
 8011604:	7e37e43c 	.word	0x7e37e43c
 8011608:	bff00000 	.word	0xbff00000
 801160c:	000fffff 	.word	0x000fffff

08011610 <_init>:
 8011610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011612:	bf00      	nop
 8011614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011616:	bc08      	pop	{r3}
 8011618:	469e      	mov	lr, r3
 801161a:	4770      	bx	lr

0801161c <_fini>:
 801161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161e:	bf00      	nop
 8011620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011622:	bc08      	pop	{r3}
 8011624:	469e      	mov	lr, r3
 8011626:	4770      	bx	lr
