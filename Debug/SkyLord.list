
SkyLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08011890  08011890  00012890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011eb0  08011eb0  00013228  2**0
                  CONTENTS
  4 .ARM          00000008  08011eb0  08011eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011eb8  08011eb8  00013228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011eb8  08011eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ebc  08011ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08011ec0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000228  080120e8  00013228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  080120e8  000139bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187d4  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d7  00000000  00000000  0002ba2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcb  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025606  00000000  00000000  000316d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7a9  00000000  00000000  00056cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d828f  00000000  00000000  00073482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cac  00000000  00000000  0014b754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00152400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011878 	.word	0x08011878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08011878 	.word	0x08011878

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9b5 	b.w	8001230 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f84d 	bl	8000f74 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f840 	bl	8000f74 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f82f 	bl	8000f74 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f821 	bl	8000f74 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b96a 	b.w	8001230 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	9d08      	ldr	r5, [sp, #32]
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d14e      	bne.n	800101e <__udivmoddi4+0xaa>
 8000f80:	4694      	mov	ip, r2
 8000f82:	458c      	cmp	ip, r1
 8000f84:	4686      	mov	lr, r0
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	d962      	bls.n	8001052 <__udivmoddi4+0xde>
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	4091      	lsls	r1, r2
 8000f94:	fa20 f303 	lsr.w	r3, r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f f68c 	uxth.w	r6, ip
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fba:	fb04 f106 	mul.w	r1, r4, r6
 8000fbe:	4299      	cmp	r1, r3
 8000fc0:	d90a      	bls.n	8000fd8 <__udivmoddi4+0x64>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fca:	f080 8112 	bcs.w	80011f2 <__udivmoddi4+0x27e>
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	f240 810f 	bls.w	80011f2 <__udivmoddi4+0x27e>
 8000fd4:	3c02      	subs	r4, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1a59      	subs	r1, r3, r1
 8000fda:	fa1f f38e 	uxth.w	r3, lr
 8000fde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe2:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f606 	mul.w	r6, r0, r6
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x94>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffa:	f080 80fc 	bcs.w	80011f6 <__udivmoddi4+0x282>
 8000ffe:	429e      	cmp	r6, r3
 8001000:	f240 80f9 	bls.w	80011f6 <__udivmoddi4+0x282>
 8001004:	4463      	add	r3, ip
 8001006:	3802      	subs	r0, #2
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800100e:	2100      	movs	r1, #0
 8001010:	b11d      	cbz	r5, 800101a <__udivmoddi4+0xa6>
 8001012:	40d3      	lsrs	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e9c5 3200 	strd	r3, r2, [r5]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d905      	bls.n	800102e <__udivmoddi4+0xba>
 8001022:	b10d      	cbz	r5, 8001028 <__udivmoddi4+0xb4>
 8001024:	e9c5 0100 	strd	r0, r1, [r5]
 8001028:	2100      	movs	r1, #0
 800102a:	4608      	mov	r0, r1
 800102c:	e7f5      	b.n	800101a <__udivmoddi4+0xa6>
 800102e:	fab3 f183 	clz	r1, r3
 8001032:	2900      	cmp	r1, #0
 8001034:	d146      	bne.n	80010c4 <__udivmoddi4+0x150>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0xcc>
 800103a:	4290      	cmp	r0, r2
 800103c:	f0c0 80f0 	bcc.w	8001220 <__udivmoddi4+0x2ac>
 8001040:	1a86      	subs	r6, r0, r2
 8001042:	eb64 0303 	sbc.w	r3, r4, r3
 8001046:	2001      	movs	r0, #1
 8001048:	2d00      	cmp	r5, #0
 800104a:	d0e6      	beq.n	800101a <__udivmoddi4+0xa6>
 800104c:	e9c5 6300 	strd	r6, r3, [r5]
 8001050:	e7e3      	b.n	800101a <__udivmoddi4+0xa6>
 8001052:	2a00      	cmp	r2, #0
 8001054:	f040 8090 	bne.w	8001178 <__udivmoddi4+0x204>
 8001058:	eba1 040c 	sub.w	r4, r1, ip
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa1f f78c 	uxth.w	r7, ip
 8001064:	2101      	movs	r1, #1
 8001066:	fbb4 f6f8 	udiv	r6, r4, r8
 800106a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800106e:	fb08 4416 	mls	r4, r8, r6, r4
 8001072:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001076:	fb07 f006 	mul.w	r0, r7, r6
 800107a:	4298      	cmp	r0, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x11c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f106 34ff 	add.w	r4, r6, #4294967295
 8001086:	d202      	bcs.n	800108e <__udivmoddi4+0x11a>
 8001088:	4298      	cmp	r0, r3
 800108a:	f200 80cd 	bhi.w	8001228 <__udivmoddi4+0x2b4>
 800108e:	4626      	mov	r6, r4
 8001090:	1a1c      	subs	r4, r3, r0
 8001092:	fa1f f38e 	uxth.w	r3, lr
 8001096:	fbb4 f0f8 	udiv	r0, r4, r8
 800109a:	fb08 4410 	mls	r4, r8, r0, r4
 800109e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010a2:	fb00 f707 	mul.w	r7, r0, r7
 80010a6:	429f      	cmp	r7, r3
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0x148>
 80010aa:	eb1c 0303 	adds.w	r3, ip, r3
 80010ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b2:	d202      	bcs.n	80010ba <__udivmoddi4+0x146>
 80010b4:	429f      	cmp	r7, r3
 80010b6:	f200 80b0 	bhi.w	800121a <__udivmoddi4+0x2a6>
 80010ba:	4620      	mov	r0, r4
 80010bc:	1bdb      	subs	r3, r3, r7
 80010be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010c2:	e7a5      	b.n	8001010 <__udivmoddi4+0x9c>
 80010c4:	f1c1 0620 	rsb	r6, r1, #32
 80010c8:	408b      	lsls	r3, r1
 80010ca:	fa22 f706 	lsr.w	r7, r2, r6
 80010ce:	431f      	orrs	r7, r3
 80010d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80010d4:	fa04 f301 	lsl.w	r3, r4, r1
 80010d8:	ea43 030c 	orr.w	r3, r3, ip
 80010dc:	40f4      	lsrs	r4, r6
 80010de:	fa00 f801 	lsl.w	r8, r0, r1
 80010e2:	0c38      	lsrs	r0, r7, #16
 80010e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e8:	fbb4 fef0 	udiv	lr, r4, r0
 80010ec:	fa1f fc87 	uxth.w	ip, r7
 80010f0:	fb00 441e 	mls	r4, r0, lr, r4
 80010f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f8:	fb0e f90c 	mul.w	r9, lr, ip
 80010fc:	45a1      	cmp	r9, r4
 80010fe:	fa02 f201 	lsl.w	r2, r2, r1
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x1a6>
 8001104:	193c      	adds	r4, r7, r4
 8001106:	f10e 3aff 	add.w	sl, lr, #4294967295
 800110a:	f080 8084 	bcs.w	8001216 <__udivmoddi4+0x2a2>
 800110e:	45a1      	cmp	r9, r4
 8001110:	f240 8081 	bls.w	8001216 <__udivmoddi4+0x2a2>
 8001114:	f1ae 0e02 	sub.w	lr, lr, #2
 8001118:	443c      	add	r4, r7
 800111a:	eba4 0409 	sub.w	r4, r4, r9
 800111e:	fa1f f983 	uxth.w	r9, r3
 8001122:	fbb4 f3f0 	udiv	r3, r4, r0
 8001126:	fb00 4413 	mls	r4, r0, r3, r4
 800112a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800112e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001132:	45a4      	cmp	ip, r4
 8001134:	d907      	bls.n	8001146 <__udivmoddi4+0x1d2>
 8001136:	193c      	adds	r4, r7, r4
 8001138:	f103 30ff 	add.w	r0, r3, #4294967295
 800113c:	d267      	bcs.n	800120e <__udivmoddi4+0x29a>
 800113e:	45a4      	cmp	ip, r4
 8001140:	d965      	bls.n	800120e <__udivmoddi4+0x29a>
 8001142:	3b02      	subs	r3, #2
 8001144:	443c      	add	r4, r7
 8001146:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800114a:	fba0 9302 	umull	r9, r3, r0, r2
 800114e:	eba4 040c 	sub.w	r4, r4, ip
 8001152:	429c      	cmp	r4, r3
 8001154:	46ce      	mov	lr, r9
 8001156:	469c      	mov	ip, r3
 8001158:	d351      	bcc.n	80011fe <__udivmoddi4+0x28a>
 800115a:	d04e      	beq.n	80011fa <__udivmoddi4+0x286>
 800115c:	b155      	cbz	r5, 8001174 <__udivmoddi4+0x200>
 800115e:	ebb8 030e 	subs.w	r3, r8, lr
 8001162:	eb64 040c 	sbc.w	r4, r4, ip
 8001166:	fa04 f606 	lsl.w	r6, r4, r6
 800116a:	40cb      	lsrs	r3, r1
 800116c:	431e      	orrs	r6, r3
 800116e:	40cc      	lsrs	r4, r1
 8001170:	e9c5 6400 	strd	r6, r4, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	e750      	b.n	800101a <__udivmoddi4+0xa6>
 8001178:	f1c2 0320 	rsb	r3, r2, #32
 800117c:	fa20 f103 	lsr.w	r1, r0, r3
 8001180:	fa0c fc02 	lsl.w	ip, ip, r2
 8001184:	fa24 f303 	lsr.w	r3, r4, r3
 8001188:	4094      	lsls	r4, r2
 800118a:	430c      	orrs	r4, r1
 800118c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001190:	fa00 fe02 	lsl.w	lr, r0, r2
 8001194:	fa1f f78c 	uxth.w	r7, ip
 8001198:	fbb3 f0f8 	udiv	r0, r3, r8
 800119c:	fb08 3110 	mls	r1, r8, r0, r3
 80011a0:	0c23      	lsrs	r3, r4, #16
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	fb00 f107 	mul.w	r1, r0, r7
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x24c>
 80011ae:	eb1c 0303 	adds.w	r3, ip, r3
 80011b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011b6:	d22c      	bcs.n	8001212 <__udivmoddi4+0x29e>
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d92a      	bls.n	8001212 <__udivmoddi4+0x29e>
 80011bc:	3802      	subs	r0, #2
 80011be:	4463      	add	r3, ip
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c8:	fb08 3311 	mls	r3, r8, r1, r3
 80011cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011d0:	fb01 f307 	mul.w	r3, r1, r7
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x276>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80011e0:	d213      	bcs.n	800120a <__udivmoddi4+0x296>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d911      	bls.n	800120a <__udivmoddi4+0x296>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4464      	add	r4, ip
 80011ea:	1ae4      	subs	r4, r4, r3
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e739      	b.n	8001066 <__udivmoddi4+0xf2>
 80011f2:	4604      	mov	r4, r0
 80011f4:	e6f0      	b.n	8000fd8 <__udivmoddi4+0x64>
 80011f6:	4608      	mov	r0, r1
 80011f8:	e706      	b.n	8001008 <__udivmoddi4+0x94>
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d2ae      	bcs.n	800115c <__udivmoddi4+0x1e8>
 80011fe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001202:	eb63 0c07 	sbc.w	ip, r3, r7
 8001206:	3801      	subs	r0, #1
 8001208:	e7a8      	b.n	800115c <__udivmoddi4+0x1e8>
 800120a:	4631      	mov	r1, r6
 800120c:	e7ed      	b.n	80011ea <__udivmoddi4+0x276>
 800120e:	4603      	mov	r3, r0
 8001210:	e799      	b.n	8001146 <__udivmoddi4+0x1d2>
 8001212:	4630      	mov	r0, r6
 8001214:	e7d4      	b.n	80011c0 <__udivmoddi4+0x24c>
 8001216:	46d6      	mov	lr, sl
 8001218:	e77f      	b.n	800111a <__udivmoddi4+0x1a6>
 800121a:	4463      	add	r3, ip
 800121c:	3802      	subs	r0, #2
 800121e:	e74d      	b.n	80010bc <__udivmoddi4+0x148>
 8001220:	4606      	mov	r6, r0
 8001222:	4623      	mov	r3, r4
 8001224:	4608      	mov	r0, r1
 8001226:	e70f      	b.n	8001048 <__udivmoddi4+0xd4>
 8001228:	3e02      	subs	r6, #2
 800122a:	4463      	add	r3, ip
 800122c:	e730      	b.n	8001090 <__udivmoddi4+0x11c>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <bme280_getVals+0xf8>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	f107 030d 	add.w	r3, r7, #13
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	22f3      	movs	r2, #243	@ 0xf3
 8001250:	21ec      	movs	r1, #236	@ 0xec
 8001252:	f007 fdbb 	bl	8008dcc <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 800125a:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <bme280_getVals+0xfc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001264:	7b7b      	ldrb	r3, [r7, #13]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <bme280_getVals+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d14f      	bne.n	800131e <bme280_getVals+0xea>
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d14c      	bne.n	800131e <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <bme280_getVals+0xf8>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2314      	movs	r3, #20
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2308      	movs	r3, #8
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f7      	movs	r2, #247	@ 0xf7
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f007 fd97 	bl	8008dcc <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d13a      	bne.n	800131e <bme280_getVals+0xea>
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <bme280_getVals+0xfc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f00b fe56 	bl	800cf66 <memcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d02e      	beq.n	800131e <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <bme280_getVals+0xfc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3334      	adds	r3, #52	@ 0x34
 80012c6:	461a      	mov	r2, r3
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	cb03      	ldmia	r3!, {r0, r1}
 80012cc:	6010      	str	r0, [r2, #0]
 80012ce:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <bme280_getVals+0xfc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	031a      	lsls	r2, r3, #12
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <bme280_getVals+0xfc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	031a      	lsls	r2, r3, #12
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	021a      	lsls	r2, r3, #8
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	4619      	mov	r1, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <bme280_getVals+0xfc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <bme280_getVals+0x100>)
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000244 	.word	0x20000244
 8001330:	20000248 	.word	0x20000248
 8001334:	20000000 	.word	0x20000000

08001338 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 800133e:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <bme280_calculate_altitude+0x98>)
 8001340:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a06 	vldr	s14, [r3, #24]
 800134a:	edd7 7a01 	vldr	s15, [r7, #4]
 800134e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001352:	ee16 0a90 	vmov	r0, s13
 8001356:	f7ff f917 	bl	8000588 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80013c0 <bme280_calculate_altitude+0x88>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f00d fed9 	bl	800f11c <pow>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	4919      	ldr	r1, [pc, #100]	@ (80013d8 <bme280_calculate_altitude+0xa0>)
 8001374:	f7fe ffa8 	bl	80002c8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	a311      	add	r3, pc, #68	@ (adr r3, 80013c8 <bme280_calculate_altitude+0x90>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f957 	bl	8000638 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc29 	bl	8000be8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <bme280_calculate_altitude+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ed97 7a00 	vldr	s14, [r7]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	ccd9456c 	.word	0xccd9456c
 80013c4:	3fc85b95 	.word	0x3fc85b95
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40e5a540 	.word	0x40e5a540
 80013d0:	447d5000 	.word	0x447d5000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	3ff00000 	.word	0x3ff00000

080013dc <bme280_config>:

void bme280_config()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 80013e2:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <bme280_config+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80013ec:	4b97      	ldr	r3, [pc, #604]	@ (800164c <bme280_config+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fbc1 	bl	8008b78 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f006 fa88 	bl	800790c <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80013fc:	4b93      	ldr	r3, [pc, #588]	@ (800164c <bme280_config+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f007 fa75 	bl	80088f0 <HAL_I2C_Init>
    HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f006 fa80 	bl	800790c <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <bme280_config+0x270>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	23c8      	movs	r3, #200	@ 0xc8
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2319      	movs	r3, #25
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2288      	movs	r2, #136	@ 0x88
 8001420:	21ec      	movs	r1, #236	@ 0xec
 8001422:	f007 fcd3 	bl	8008dcc <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
 8001428:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800142a:	793b      	ldrb	r3, [r7, #4]
 800142c:	4619      	mov	r1, r3
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	@ (8001648 <bme280_config+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	b292      	uxth	r2, r2
 800143e:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	b219      	sxth	r1, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <bme280_config+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	b212      	sxth	r2, r2
 8001454:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001456:	7a3b      	ldrb	r3, [r7, #8]
 8001458:	b219      	sxth	r1, r3
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	@ (8001648 <bme280_config+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	b212      	sxth	r2, r2
 800146a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800146c:	7abb      	ldrb	r3, [r7, #10]
 800146e:	b21a      	sxth	r2, r3
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <bme280_config+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	b219      	sxth	r1, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <bme280_config+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	b212      	sxth	r2, r2
 8001498:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	b219      	sxth	r1, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <bme280_config+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	b212      	sxth	r2, r2
 80014ae:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <bme280_config+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	b212      	sxth	r2, r2
 80014c4:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 80014c6:	7cbb      	ldrb	r3, [r7, #18]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <bme280_config+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b212      	sxth	r2, r2
 80014da:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	b219      	sxth	r1, r3
 80014e0:	7d7b      	ldrb	r3, [r7, #21]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <bme280_config+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	b212      	sxth	r2, r2
 80014f0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	b219      	sxth	r1, r3
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <bme280_config+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	b212      	sxth	r2, r2
 8001506:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b219      	sxth	r1, r3
 800150c:	7e7b      	ldrb	r3, [r7, #25]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <bme280_config+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	b212      	sxth	r2, r2
 800151c:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	b219      	sxth	r1, r3
 8001522:	7efb      	ldrb	r3, [r7, #27]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <bme280_config+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	b212      	sxth	r2, r2
 8001532:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <bme280_config+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7f3a      	ldrb	r2, [r7, #28]
 800153c:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <bme280_config+0x270>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	2332      	movs	r3, #50	@ 0x32
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2307      	movs	r3, #7
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	22e1      	movs	r2, #225	@ 0xe1
 8001552:	21ec      	movs	r1, #236	@ 0xec
 8001554:	f007 fc3a 	bl	8008dcc <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800155c:	793b      	ldrb	r3, [r7, #4]
 800155e:	b219      	sxth	r1, r3
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <bme280_config+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	b212      	sxth	r2, r2
 8001570:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <bme280_config+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	b21b      	sxth	r3, r3
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	b219      	sxth	r1, r3
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <bme280_config+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	b212      	sxth	r2, r2
 8001596:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <bme280_config+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	b212      	sxth	r2, r2
 80015b0:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 80015b2:	7aba      	ldrb	r2, [r7, #10]
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <bme280_config+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b252      	sxtb	r2, r2
 80015bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <bme280_config+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	799b      	ldrb	r3, [r3, #6]
 80015ca:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <bme280_config+0x270>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2332      	movs	r3, #50	@ 0x32
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cfb      	adds	r3, r7, #3
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	22f2      	movs	r2, #242	@ 0xf2
 80015e0:	21ec      	movs	r1, #236	@ 0xec
 80015e2:	f007 faf9 	bl	8008bd8 <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <bme280_config+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <bme280_config+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	799b      	ldrb	r3, [r3, #6]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b25a      	sxtb	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <bme280_config+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <bme280_config+0x270>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2301      	movs	r3, #1
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	22f4      	movs	r2, #244	@ 0xf4
 800162a:	21ec      	movs	r1, #236	@ 0xec
 800162c:	f007 fad4 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <bme280_config+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	b25a      	sxtb	r2, r3
 8001642:	4b01      	ldr	r3, [pc, #4]	@ (8001648 <bme280_config+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e003      	b.n	8001650 <bme280_config+0x274>
 8001648:	20000248 	.word	0x20000248
 800164c:	20000244 	.word	0x20000244
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <bme280_config+0x2fc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2332      	movs	r3, #50	@ 0x32
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	1cfb      	adds	r3, r7, #3
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f5      	movs	r2, #245	@ 0xf5
 8001672:	21ec      	movs	r1, #236	@ 0xec
 8001674:	f007 fab0 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8001678:	4603      	mov	r3, r0
 800167a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f006 f942 	bl	800790c <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e011      	b.n	80016b2 <bme280_config+0x2d6>
        bme280_update();
 800168e:	f000 f861 	bl	8001754 <bme280_update>
        base += BME->altitude;
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <bme280_config+0x300>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 80016a6:	201e      	movs	r0, #30
 80016a8:	f006 f930 	bl	800790c <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	2b31      	cmp	r3, #49	@ 0x31
 80016b6:	ddea      	ble.n	800168e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <bme280_config+0x300>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80016e0 <bme280_config+0x304>
 80016c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 80016cc:	f000 f842 	bl	8001754 <bme280_update>

    UNUSED(retVal);
}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	20000248 	.word	0x20000248
 80016e0:	42480000 	.word	0x42480000

080016e4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80016ee:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <bme280_init+0x5c>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80016f4:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <bme280_init+0x60>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <bme280_init+0x5c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <bme280_init+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <bme280_init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <bme280_init+0x60>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2332      	movs	r3, #50	@ 0x32
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2301      	movs	r3, #1
 800171c:	22d0      	movs	r2, #208	@ 0xd0
 800171e:	21ec      	movs	r1, #236	@ 0xec
 8001720:	f007 fb54 	bl	8008dcc <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 8001724:	7b3b      	ldrb	r3, [r7, #12]
 8001726:	2b60      	cmp	r3, #96	@ 0x60
 8001728:	d103      	bne.n	8001732 <bme280_init+0x4e>
        is_BME_ok = 1;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <bme280_init+0x6c>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 8001730:	e002      	b.n	8001738 <bme280_init+0x54>
        is_BME_ok = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <bme280_init+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000248 	.word	0x20000248
 8001744:	20000244 	.word	0x20000244
 8001748:	20000710 	.word	0x20000710
 800174c:	2000024c 	.word	0x2000024c
 8001750:	20000734 	.word	0x20000734

08001754 <bme280_update>:

void bme280_update() {
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b0d2      	sub	sp, #328	@ 0x148
 800175a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800175c:	f7ff fd6a 	bl	8001234 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <bme280_update+0x88>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	f040 840d 	bne.w	8001f88 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <bme280_update+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001776:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <bme280_update+0x8c>)
 8001778:	2301      	movs	r3, #1
 800177a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800177c:	f006 f8ba 	bl	80078f4 <HAL_GetTick>
 8001780:	ee07 0a90 	vmov	s15, r0
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <bme280_update+0x88>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <bme280_update+0x88>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	e041      	b.n	8001820 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800179c:	f006 f8aa 	bl	80078f4 <HAL_GetTick>
 80017a0:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 80017a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <bme280_update+0x88>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd12      	ble.n	80017e8 <bme280_update+0x94>
 80017c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ce:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <bme280_update+0x88>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	e007      	b.n	80017ec <bme280_update+0x98>
 80017dc:	20000248 	.word	0x20000248
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	00000000 	.word	0x00000000
 80017e8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017e4 <bme280_update+0x90>
 80017ec:	4bda      	ldr	r3, [pc, #872]	@ (8001b58 <bme280_update+0x404>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80017f4:	4bd8      	ldr	r3, [pc, #864]	@ (8001b58 <bme280_update+0x404>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80017fc:	4bd6      	ldr	r3, [pc, #856]	@ (8001b58 <bme280_update+0x404>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001b5c <bme280_update+0x408>
 8001804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001808:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 800180c:	4bd2      	ldr	r3, [pc, #840]	@ (8001b58 <bme280_update+0x404>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001814:	ee07 2a90 	vmov	s15, r2
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 8001820:	4bcd      	ldr	r3, [pc, #820]	@ (8001b58 <bme280_update+0x404>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800182a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182e:	10da      	asrs	r2, r3, #3
 8001830:	4bc9      	ldr	r3, [pc, #804]	@ (8001b58 <bme280_update+0x404>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b58 <bme280_update+0x404>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	12db      	asrs	r3, r3, #11
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001850:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001854:	111a      	asrs	r2, r3, #4
 8001856:	4bc0      	ldr	r3, [pc, #768]	@ (8001b58 <bme280_update+0x404>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1ad1      	subs	r1, r2, r3
 8001860:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001864:	111a      	asrs	r2, r3, #4
 8001866:	4bbc      	ldr	r3, [pc, #752]	@ (8001b58 <bme280_update+0x404>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	131a      	asrs	r2, r3, #12
 8001876:	4bb8      	ldr	r3, [pc, #736]	@ (8001b58 <bme280_update+0x404>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	139b      	asrs	r3, r3, #14
 8001886:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800188a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800188e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001898:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	@ 0x80
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 80018aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <bme280_update+0x404>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001b60 <bme280_update+0x40c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 80018c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b58 <bme280_update+0x404>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80018d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80018d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018e4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018e8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80018ec:	460b      	mov	r3, r1
 80018ee:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	4613      	mov	r3, r2
 80018f6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001900:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001904:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001908:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800190c:	fb03 f102 	mul.w	r1, r3, r2
 8001910:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	18ca      	adds	r2, r1, r3
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	fba3 4503 	umull	r4, r5, r3, r3
 8001926:	1953      	adds	r3, r2, r5
 8001928:	461d      	mov	r5, r3
 800192a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b58 <bme280_update+0x404>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f205 	mul.w	r2, r3, r5
 800194a:	460b      	mov	r3, r1
 800194c:	fb04 f303 	mul.w	r3, r4, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba4 1202 	umull	r1, r2, r4, r2
 8001958:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800195c:	460a      	mov	r2, r1
 800195e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001962:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001966:	4413      	add	r3, r2
 8001968:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800196c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001974:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001978:	4b77      	ldr	r3, [pc, #476]	@ (8001b58 <bme280_update+0x404>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001982:	b21b      	sxth	r3, r3
 8001984:	17da      	asrs	r2, r3, #31
 8001986:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001992:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001996:	462a      	mov	r2, r5
 8001998:	fb02 f203 	mul.w	r2, r2, r3
 800199c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019a0:	4621      	mov	r1, r4
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ac:	4621      	mov	r1, r4
 80019ae:	fba3 ab01 	umull	sl, fp, r3, r1
 80019b2:	eb02 030b 	add.w	r3, r2, fp
 80019b6:	469b      	mov	fp, r3
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80019c4:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80019c8:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80019cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d0:	1814      	adds	r4, r2, r0
 80019d2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019d4:	414b      	adcs	r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a02:	00d9      	lsls	r1, r3, #3
 8001a04:	2000      	movs	r0, #0
 8001a06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a0a:	1814      	adds	r4, r2, r0
 8001a0c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a0e:	414b      	adcs	r3, r1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a12:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a16:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001a1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a22:	fb03 f102 	mul.w	r1, r3, r2
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	18ca      	adds	r2, r1, r3
 8001a34:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a38:	fba3 8903 	umull	r8, r9, r3, r3
 8001a3c:	eb02 0309 	add.w	r3, r2, r9
 8001a40:	4699      	mov	r9, r3
 8001a42:	4b45      	ldr	r3, [pc, #276]	@ (8001b58 <bme280_update+0x404>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a58:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f209 	mul.w	r2, r3, r9
 8001a62:	460b      	mov	r3, r1
 8001a64:	fb08 f303 	mul.w	r3, r8, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a70:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a74:	460a      	mov	r2, r1
 8001a76:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a7a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a7e:	4413      	add	r3, r2
 8001a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a90:	4623      	mov	r3, r4
 8001a92:	0a18      	lsrs	r0, r3, #8
 8001a94:	462b      	mov	r3, r5
 8001a96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	1219      	asrs	r1, r3, #8
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <bme280_update+0x404>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ab8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abc:	464a      	mov	r2, r9
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	fb04 f303 	mul.w	r3, r4, r3
 8001acc:	441a      	add	r2, r3
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	fba3 4304 	umull	r4, r3, r3, r4
 8001ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001adc:	4623      	mov	r3, r4
 8001ade:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	4644      	mov	r4, r8
 8001afe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b20:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b24:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <bme280_update+0x404>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b3c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001b40:	462b      	mov	r3, r5
 8001b42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b46:	4642      	mov	r2, r8
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	e005      	b.n	8001b64 <bme280_update+0x410>
 8001b58:	20000248 	.word	0x20000248
 8001b5c:	447a0000 	.word	0x447a0000
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	4622      	mov	r2, r4
 8001b66:	4641      	mov	r1, r8
 8001b68:	fba2 1201 	umull	r1, r2, r2, r1
 8001b6c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b70:	460a      	mov	r2, r1
 8001b72:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	104a      	asrs	r2, r1, #1
 8001b90:	4629      	mov	r1, r5
 8001b92:	17cb      	asrs	r3, r1, #31
 8001b94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001b98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	d106      	bne.n	8001bae <bme280_update+0x45a>
        {
            P = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001bac:	e14b      	b.n	8001e46 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001bae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001bba:	eb61 0303 	sbc.w	r3, r1, r3
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bc4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001bc8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	07d9      	lsls	r1, r3, #31
 8001bd6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bda:	07d0      	lsls	r0, r2, #31
 8001bdc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001be0:	1a84      	subs	r4, r0, r2
 8001be2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001be6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bee:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	1891      	adds	r1, r2, r2
 8001bf8:	6239      	str	r1, [r7, #32]
 8001bfa:	415b      	adcs	r3, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	4621      	mov	r1, r4
 8001c04:	1851      	adds	r1, r2, r1
 8001c06:	61b9      	str	r1, [r7, #24]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	414b      	adcs	r3, r1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c24:	4641      	mov	r1, r8
 8001c26:	018a      	lsls	r2, r1, #6
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1889      	adds	r1, r1, r2
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0101 	adc.w	r1, r3, r1
 8001c34:	6179      	str	r1, [r7, #20]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c42:	4649      	mov	r1, r9
 8001c44:	008b      	lsls	r3, r1, #2
 8001c46:	4641      	mov	r1, r8
 8001c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4c:	4641      	mov	r1, r8
 8001c4e:	008a      	lsls	r2, r1, #2
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	4622      	mov	r2, r4
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	462a      	mov	r2, r5
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c72:	4649      	mov	r1, r9
 8001c74:	008b      	lsls	r3, r1, #2
 8001c76:	4641      	mov	r1, r8
 8001c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	008a      	lsls	r2, r1, #2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	4622      	mov	r2, r4
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ca2:	f7ff f8ff 	bl	8000ea4 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001cae:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <bme280_update+0x840>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cc0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0b50      	lsrs	r0, r2, #13
 8001cce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cd2:	1359      	asrs	r1, r3, #13
 8001cd4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cd8:	462b      	mov	r3, r5
 8001cda:	fb00 f203 	mul.w	r2, r0, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	fba2 1200 	umull	r1, r2, r2, r0
 8001cec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d04:	f04f 0000 	mov.w	r0, #0
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	0b50      	lsrs	r0, r2, #13
 8001d0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d12:	1359      	asrs	r1, r3, #13
 8001d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d18:	462b      	mov	r3, r5
 8001d1a:	fb00 f203 	mul.w	r2, r0, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	fb03 f301 	mul.w	r3, r3, r1
 8001d24:	4413      	add	r3, r2
 8001d26:	4622      	mov	r2, r4
 8001d28:	fba2 1200 	umull	r1, r2, r2, r0
 8001d2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	0e4a      	lsrs	r2, r1, #25
 8001d50:	4629      	mov	r1, r5
 8001d52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d56:	4629      	mov	r1, r5
 8001d58:	164b      	asrs	r3, r1, #25
 8001d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001d74:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d78:	462a      	mov	r2, r5
 8001d7a:	fb02 f203 	mul.w	r2, r2, r3
 8001d7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001d8e:	4621      	mov	r1, r4
 8001d90:	fba2 1201 	umull	r1, r2, r2, r1
 8001d94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d98:	460a      	mov	r2, r1
 8001d9a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001da2:	4413      	add	r3, r2
 8001da4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001db4:	4621      	mov	r1, r4
 8001db6:	0cca      	lsrs	r2, r1, #19
 8001db8:	4629      	mov	r1, r5
 8001dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	14cb      	asrs	r3, r1, #19
 8001dc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001dc6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001dca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dce:	1884      	adds	r4, r0, r2
 8001dd0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001dd2:	eb41 0303 	adc.w	r3, r1, r3
 8001dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dd8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001ddc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001de0:	4621      	mov	r1, r4
 8001de2:	1889      	adds	r1, r1, r2
 8001de4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001de6:	4629      	mov	r1, r5
 8001de8:	eb43 0101 	adc.w	r1, r3, r1
 8001dec:	6679      	str	r1, [r7, #100]	@ 0x64
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	0a18      	lsrs	r0, r3, #8
 8001dfe:	462b      	mov	r3, r5
 8001e00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e04:	462b      	mov	r3, r5
 8001e06:	1219      	asrs	r1, r3, #8
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <bme280_update+0x840>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	17da      	asrs	r2, r3, #31
 8001e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e18:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001e26:	464c      	mov	r4, r9
 8001e28:	0123      	lsls	r3, r4, #4
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001e30:	4644      	mov	r4, r8
 8001e32:	0122      	lsls	r2, r4, #4
 8001e34:	1884      	adds	r4, r0, r2
 8001e36:	603c      	str	r4, [r7, #0]
 8001e38:	eb41 0303 	adc.w	r3, r1, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e42:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001e46:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e4a:	f7fe ffed 	bl	8000e28 <__aeabi_l2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <bme280_update+0x844>)
 8001e5c:	f7fe fd16 	bl	800088c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f9c <bme280_update+0x848>)
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4947      	ldr	r1, [pc, #284]	@ (8001f94 <bme280_update+0x840>)
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <bme280_update+0x840>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea0:	039a      	lsls	r2, r3, #14
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <bme280_update+0x840>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eac:	051b      	lsls	r3, r3, #20
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <bme280_update+0x840>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001eca:	0bdb      	lsrs	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <bme280_update+0x840>)
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	0a92      	lsrs	r2, r2, #10
 8001ee2:	492c      	ldr	r1, [pc, #176]	@ (8001f94 <bme280_update+0x840>)
 8001ee4:	6809      	ldr	r1, [r1, #0]
 8001ee6:	6809      	ldr	r1, [r1, #0]
 8001ee8:	7f09      	ldrb	r1, [r1, #28]
 8001eea:	4608      	mov	r0, r1
 8001eec:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001ef0:	fb00 f101 	mul.w	r1, r0, r1
 8001ef4:	0ac9      	lsrs	r1, r1, #11
 8001ef6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	0a92      	lsrs	r2, r2, #10
 8001f00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f04:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <bme280_update+0x840>)
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f16:	0b92      	lsrs	r2, r2, #14
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f2a:	0bd2      	lsrs	r2, r2, #15
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	09db      	lsrs	r3, r3, #7
 8001f32:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <bme280_update+0x840>)
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	7e12      	ldrb	r2, [r2, #24]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f52:	bf28      	it	cs
 8001f54:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8001f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 8001f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f60:	0b1b      	lsrs	r3, r3, #12
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <bme280_update+0x840>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001fa0 <bme280_update+0x84c>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 8001f7a:	f7ff f9dd 	bl	8001338 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <bme280_update+0x840>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8001f88:	bf00      	nop
 8001f8a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	20000248 	.word	0x20000248
 8001f98:	40700000 	.word	0x40700000
 8001f9c:	40590000 	.word	0x40590000
 8001fa0:	44800000 	.word	0x44800000

08001fa4 <bmi088_config>:
	HAL_I2C_Init(bmi_I2C);

}
*/
void bmi088_config()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af04      	add	r7, sp, #16
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001faa:	2028      	movs	r0, #40	@ 0x28
 8001fac:	f005 fdc9 	bl	8007b42 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef retVal = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002298 <bmi088_config+0x2f4>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	2364      	movs	r3, #100	@ 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	227c      	movs	r2, #124	@ 0x7c
 8001fcc:	2140      	movs	r1, #64	@ 0x40
 8001fce:	f006 fe03 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]

	buf[0] = ACC_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8001fe0:	4bad      	ldr	r3, [pc, #692]	@ (8002298 <bmi088_config+0x2f4>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	2364      	movs	r3, #100	@ 0x64
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	227d      	movs	r2, #125	@ 0x7d
 8001ff4:	2140      	movs	r1, #64	@ 0x40
 8001ff6:	f006 fdef 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4313      	orrs	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(20);
 8002004:	2014      	movs	r0, #20
 8002006:	f005 fc81 	bl	800790c <HAL_Delay>

	buf[0] = ACC_RESET;
 800200a:	23b6      	movs	r3, #182	@ 0xb6
 800200c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800200e:	4ba2      	ldr	r3, [pc, #648]	@ (8002298 <bmi088_config+0x2f4>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	2364      	movs	r3, #100	@ 0x64
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	227e      	movs	r2, #126	@ 0x7e
 8002022:	2140      	movs	r1, #64	@ 0x40
 8002024:	f006 fdd8 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4313      	orrs	r3, r2
 8002030:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <bmi088_config+0x9a>
 8002038:	4b98      	ldr	r3, [pc, #608]	@ (800229c <bmi088_config+0x2f8>)
 800203a:	2284      	movs	r2, #132	@ 0x84
 800203c:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f005 fc64 	bl	800790c <HAL_Delay>

	buf[0] = FIFO_RESET;
 8002044:	23b0      	movs	r3, #176	@ 0xb0
 8002046:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8002048:	4b93      	ldr	r3, [pc, #588]	@ (8002298 <bmi088_config+0x2f4>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	2364      	movs	r3, #100	@ 0x64
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	227e      	movs	r2, #126	@ 0x7e
 800205c:	2140      	movs	r1, #64	@ 0x40
 800205e:	f006 fdbb 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4313      	orrs	r3, r2
 800206a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <bmi088_config+0xd4>
 8002072:	4b8a      	ldr	r3, [pc, #552]	@ (800229c <bmi088_config+0x2f8>)
 8002074:	2289      	movs	r2, #137	@ 0x89
 8002076:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002078:	200a      	movs	r0, #10
 800207a:	f005 fc47 	bl	800790c <HAL_Delay>

	buf[0] = GYRO_RESET;
 800207e:	23b6      	movs	r3, #182	@ 0xb6
 8002080:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <bmi088_config+0x2f4>)
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	2364      	movs	r3, #100	@ 0x64
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	2301      	movs	r3, #1
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	2214      	movs	r2, #20
 8002096:	21e0      	movs	r1, #224	@ 0xe0
 8002098:	f006 fd9e 	bl	8008bd8 <HAL_I2C_Mem_Write>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <bmi088_config+0x10e>
 80020ac:	4b7b      	ldr	r3, [pc, #492]	@ (800229c <bmi088_config+0x2f8>)
 80020ae:	228e      	movs	r2, #142	@ 0x8e
 80020b0:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f005 fc2a 	bl	800790c <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <bmi088_config+0x2fc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	7f5b      	ldrb	r3, [r3, #29]
 80020be:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <bmi088_config+0x2f4>)
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	2364      	movs	r3, #100	@ 0x64
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	220f      	movs	r2, #15
 80020d4:	21e0      	movs	r1, #224	@ 0xe0
 80020d6:	f006 fd7f 	bl	8008bd8 <HAL_I2C_Mem_Write>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <bmi088_config+0x14c>
 80020ea:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <bmi088_config+0x2f8>)
 80020ec:	2294      	movs	r2, #148	@ 0x94
 80020ee:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <bmi088_config+0x2fc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	7f1b      	ldrb	r3, [r3, #28]
 80020f6:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <bmi088_config+0x2f4>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	2314      	movs	r3, #20
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	2301      	movs	r3, #1
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	2210      	movs	r2, #16
 800210c:	21e0      	movs	r1, #224	@ 0xe0
 800210e:	f006 fd63 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4313      	orrs	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <bmi088_config+0x184>
 8002122:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <bmi088_config+0x2f8>)
 8002124:	2298      	movs	r2, #152	@ 0x98
 8002126:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 8002128:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <bmi088_config+0x2fc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	7edb      	ldrb	r3, [r3, #27]
 800212e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <bmi088_config+0x2f4>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	2314      	movs	r3, #20
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	2211      	movs	r2, #17
 8002144:	21e0      	movs	r1, #224	@ 0xe0
 8002146:	f006 fd47 	bl	8008bd8 <HAL_I2C_Mem_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4313      	orrs	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <bmi088_config+0x1bc>
 800215a:	4b50      	ldr	r3, [pc, #320]	@ (800229c <bmi088_config+0x2f8>)
 800215c:	229c      	movs	r2, #156	@ 0x9c
 800215e:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 8002160:	2014      	movs	r0, #20
 8002162:	f005 fbd3 	bl	800790c <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <bmi088_config+0x2f4>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	2314      	movs	r3, #20
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	2215      	movs	r2, #21
 800217e:	21e0      	movs	r1, #224	@ 0xe0
 8002180:	f006 fd2a 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4313      	orrs	r3, r2
 800218c:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <bmi088_config+0x1f6>
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <bmi088_config+0x2f8>)
 8002196:	22a2      	movs	r2, #162	@ 0xa2
 8002198:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 800219a:	2301      	movs	r3, #1
 800219c:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <bmi088_config+0x2f4>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	2314      	movs	r3, #20
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2301      	movs	r3, #1
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	2216      	movs	r2, #22
 80021b2:	21e0      	movs	r1, #224	@ 0xe0
 80021b4:	f006 fd10 	bl	8008bd8 <HAL_I2C_Mem_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4313      	orrs	r3, r2
 80021c0:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <bmi088_config+0x22a>
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <bmi088_config+0x2f8>)
 80021ca:	22a6      	movs	r2, #166	@ 0xa6
 80021cc:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 80021ce:	2301      	movs	r3, #1
 80021d0:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <bmi088_config+0x2f4>)
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	2314      	movs	r3, #20
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2301      	movs	r3, #1
 80021e4:	2218      	movs	r2, #24
 80021e6:	21e0      	movs	r1, #224	@ 0xe0
 80021e8:	f006 fcf6 	bl	8008bd8 <HAL_I2C_Mem_Write>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <bmi088_config+0x25e>
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <bmi088_config+0x2f8>)
 80021fe:	22aa      	movs	r2, #170	@ 0xaa
 8002200:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002202:	2304      	movs	r3, #4
 8002204:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 8002206:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <bmi088_config+0x2f4>)
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	2314      	movs	r3, #20
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	2301      	movs	r3, #1
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	227d      	movs	r2, #125	@ 0x7d
 800221a:	2140      	movs	r1, #64	@ 0x40
 800221c:	f006 fcdc 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4313      	orrs	r3, r2
 8002228:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <bmi088_config+0x292>
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <bmi088_config+0x2f8>)
 8002232:	22af      	movs	r2, #175	@ 0xaf
 8002234:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002236:	2008      	movs	r0, #8
 8002238:	f005 fb68 	bl	800790c <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <bmi088_config+0x2fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7ddb      	ldrb	r3, [r3, #23]
 8002242:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <bmi088_config+0x2f4>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	2314      	movs	r3, #20
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2301      	movs	r3, #1
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	227c      	movs	r2, #124	@ 0x7c
 8002258:	2140      	movs	r1, #64	@ 0x40
 800225a:	f006 fcbd 	bl	8008bd8 <HAL_I2C_Mem_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4313      	orrs	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <bmi088_config+0x2d0>
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <bmi088_config+0x2f8>)
 8002270:	22b4      	movs	r2, #180	@ 0xb4
 8002272:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8002274:	2008      	movs	r0, #8
 8002276:	f005 fb49 	bl	800790c <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <bmi088_config+0x2fc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	7e5b      	ldrb	r3, [r3, #25]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	b25a      	sxtb	r2, r3
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <bmi088_config+0x2fc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	7e9b      	ldrb	r3, [r3, #26]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b25b      	sxtb	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	713b      	strb	r3, [r7, #4]
 8002294:	e006      	b.n	80022a4 <bmi088_config+0x300>
 8002296:	bf00      	nop
 8002298:	20000250 	.word	0x20000250
 800229c:	2000025c 	.word	0x2000025c
 80022a0:	20000254 	.word	0x20000254
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <bmi088_config+0x3c8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	2314      	movs	r3, #20
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2301      	movs	r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2140      	movs	r1, #64	@ 0x40
 80022ba:	f006 fc8d 	bl	8008bd8 <HAL_I2C_Mem_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <bmi088_config+0x330>
 80022ce:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <bmi088_config+0x3cc>)
 80022d0:	22b9      	movs	r2, #185	@ 0xb9
 80022d2:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <bmi088_config+0x3d0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
 80022da:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <bmi088_config+0x3c8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	2314      	movs	r3, #20
 80022e2:	9302      	str	r3, [sp, #8]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	2241      	movs	r2, #65	@ 0x41
 80022f0:	2140      	movs	r1, #64	@ 0x40
 80022f2:	f006 fc71 	bl	8008bd8 <HAL_I2C_Mem_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <bmi088_config+0x368>
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <bmi088_config+0x3cc>)
 8002308:	22bd      	movs	r2, #189	@ 0xbd
 800230a:	601a      	str	r2, [r3, #0]

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800230c:	230a      	movs	r3, #10
 800230e:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <bmi088_config+0x3c8>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	2314      	movs	r3, #20
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	2253      	movs	r2, #83	@ 0x53
 8002324:	2140      	movs	r1, #64	@ 0x40
 8002326:	f006 fc57 	bl	8008bd8 <HAL_I2C_Mem_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4313      	orrs	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8002334:	2304      	movs	r3, #4
 8002336:	713b      	strb	r3, [r7, #4]
	retVal |= HAL_I2C_Mem_Write(bmi_I2C, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <bmi088_config+0x3c8>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	2314      	movs	r3, #20
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	2258      	movs	r2, #88	@ 0x58
 800234c:	2140      	movs	r1, #64	@ 0x40
 800234e:	f006 fc43 	bl	8008bd8 <HAL_I2C_Mem_Write>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4313      	orrs	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800235c:	2028      	movs	r0, #40	@ 0x28
 800235e:	f005 fbf0 	bl	8007b42 <HAL_NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000250 	.word	0x20000250
 8002370:	2000025c 	.word	0x2000025c
 8002374:	20000254 	.word	0x20000254

08002378 <bmi088_init>:

void bmi088_init(bmi088_struct_t* BMI_, I2C_HandleTypeDef* I2C_)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	//quaternionSet_zero();
	bmi_I2C = I2C_;
 8002382:	4a25      	ldr	r2, [pc, #148]	@ (8002418 <bmi088_init+0xa0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6013      	str	r3, [r2, #0]
	BMI = BMI_;
 8002388:	4a24      	ldr	r2, [pc, #144]	@ (800241c <bmi088_init+0xa4>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
	BMI->rawDatas.isGyroUpdated = 0;
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <bmi088_init+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	755a      	strb	r2, [r3, #21]
	BMI->rawDatas.isAccelUpdated = 0;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <bmi088_init+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	759a      	strb	r2, [r3, #22]
	isTimeUpdated = 0;
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <bmi088_init+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002424 <bmi088_init+0xac>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];
	BMI->bmi088_t_2 = &bmi_struct_2;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <bmi088_init+0xa4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <bmi088_init+0xb0>)
 80023b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(I2C_, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80023b2:	2332      	movs	r3, #50	@ 0x32
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2200      	movs	r2, #0
 80023c4:	21e0      	movs	r1, #224	@ 0xe0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f006 fd00 	bl	8008dcc <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 80023cc:	7b3b      	ldrb	r3, [r7, #12]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d103      	bne.n	80023da <bmi088_init+0x62>
		is_BMI_ok = 1;
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <bmi088_init+0xb4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
		BMI->bmi088_t_2->q[1] = 0;
		BMI->bmi088_t_2->q[2] = 0;
		BMI->bmi088_t_2->q[3] = 0;
	}
}
 80023d8:	e01a      	b.n	8002410 <bmi088_init+0x98>
		is_BMI_ok = 0;
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <bmi088_init+0xb4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[0] = 1;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <bmi088_init+0xa4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ea:	601a      	str	r2, [r3, #0]
		BMI->bmi088_t_2->q[1] = 0;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <bmi088_init+0xa4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
		BMI->bmi088_t_2->q[2] = 0;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <bmi088_init+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
		BMI->bmi088_t_2->q[3] = 0;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <bmi088_init+0xa4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000250 	.word	0x20000250
 800241c:	20000254 	.word	0x20000254
 8002420:	20000258 	.word	0x20000258
 8002424:	20000259 	.word	0x20000259
 8002428:	2000065c 	.word	0x2000065c
 800242c:	20000738 	.word	0x20000738

08002430 <bmi088_update>:

void bmi088_update()
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]

		if(BMI->rawDatas.isAccelUpdated)
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <bmi088_update+0x94>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	7d9b      	ldrb	r3, [r3, #22]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 822a 	beq.w	800289a <bmi088_update+0x46a>
		{
			ret_val = HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <bmi088_update+0x98>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <bmi088_update+0x94>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3304      	adds	r3, #4
 8002450:	2214      	movs	r2, #20
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	2209      	movs	r2, #9
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	2212      	movs	r2, #18
 800245e:	2140      	movs	r1, #64	@ 0x40
 8002460:	f006 fcb4 	bl	8008dcc <HAL_I2C_Mem_Read>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
			if(ret_val)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 8365 	bne.w	8002b3a <bmi088_update+0x70a>
				return;
			HAL_I2C_Mem_Read(bmi_I2C, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <bmi088_update+0x98>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <bmi088_update+0x94>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330d      	adds	r3, #13
 800247a:	2214      	movs	r2, #20
 800247c:	9202      	str	r2, [sp, #8]
 800247e:	2202      	movs	r2, #2
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	2222      	movs	r2, #34	@ 0x22
 8002488:	2140      	movs	r1, #64	@ 0x40
 800248a:	f006 fc9f 	bl	8008dcc <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <bmi088_update+0x94>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	7b5b      	ldrb	r3, [r3, #13]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	b21a      	sxth	r2, r3
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <bmi088_update+0x94>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	7b9b      	ldrb	r3, [r3, #14]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	b21b      	sxth	r3, r3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	82bb      	strh	r3, [r7, #20]
			int16_t Temp_int11 = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	827b      	strh	r3, [r7, #18]
			if (Temp_uint11 > 1023){
 80024ae:	8abb      	ldrh	r3, [r7, #20]
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b4:	d30a      	bcc.n	80024cc <bmi088_update+0x9c>
				Temp_int11 = Temp_uint11 - 2048;
 80024b6:	8abb      	ldrh	r3, [r7, #20]
 80024b8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024bc:	b29b      	uxth	r3, r3
 80024be:	827b      	strh	r3, [r7, #18]
 80024c0:	e02a      	b.n	8002518 <bmi088_update+0xe8>
 80024c2:	bf00      	nop
 80024c4:	20000254 	.word	0x20000254
 80024c8:	20000250 	.word	0x20000250
			}
			else{
				Temp_int11 = Temp_uint11;
 80024cc:	8abb      	ldrh	r3, [r7, #20]
 80024ce:	827b      	strh	r3, [r7, #18]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 80024d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024dc:	ee17 0a90 	vmov	r0, s15
 80024e0:	f7fe f852 	bl	8000588 <__aeabi_f2d>
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80024ec:	f7fe f8a4 	bl	8000638 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4bcc      	ldr	r3, [pc, #816]	@ (8002830 <bmi088_update+0x400>)
 80024fe:	f7fd fee5 	bl	80002cc <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	49cb      	ldr	r1, [pc, #812]	@ (8002834 <bmi088_update+0x404>)
 8002508:	680c      	ldr	r4, [r1, #0]
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb6b 	bl	8000be8 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
 8002514:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 8002518:	4bc6      	ldr	r3, [pc, #792]	@ (8002834 <bmi088_update+0x404>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	7b1b      	ldrb	r3, [r3, #12]
 800251e:	041a      	lsls	r2, r3, #16
 8002520:	4bc4      	ldr	r3, [pc, #784]	@ (8002834 <bmi088_update+0x404>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	7adb      	ldrb	r3, [r3, #11]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4313      	orrs	r3, r2
 800252a:	4ac2      	ldr	r2, [pc, #776]	@ (8002834 <bmi088_update+0x404>)
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	7a92      	ldrb	r2, [r2, #10]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	ee17 0a90 	vmov	r0, s15
 8002542:	f7fe f821 	bl	8000588 <__aeabi_f2d>
 8002546:	a3b2      	add	r3, pc, #712	@ (adr r3, 8002810 <bmi088_update+0x3e0>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f874 	bl	8000638 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	a3af      	add	r3, pc, #700	@ (adr r3, 8002818 <bmi088_update+0x3e8>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f995 	bl	800088c <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	49b3      	ldr	r1, [pc, #716]	@ (8002834 <bmi088_update+0x404>)
 8002568:	680c      	ldr	r4, [r1, #0]
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8002578:	4bae      	ldr	r3, [pc, #696]	@ (8002834 <bmi088_update+0x404>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	7a5b      	ldrb	r3, [r3, #9]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b21a      	sxth	r2, r3
 8002582:	4bac      	ldr	r3, [pc, #688]	@ (8002834 <bmi088_update+0x404>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	7a1b      	ldrb	r3, [r3, #8]
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	817b      	strh	r3, [r7, #10]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 800258e:	4ba9      	ldr	r3, [pc, #676]	@ (8002834 <bmi088_update+0x404>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	79db      	ldrb	r3, [r3, #7]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	b21a      	sxth	r2, r3
 8002598:	4ba6      	ldr	r3, [pc, #664]	@ (8002834 <bmi088_update+0x404>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	799b      	ldrb	r3, [r3, #6]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 80025a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002834 <bmi088_update+0x404>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	795b      	ldrb	r3, [r3, #5]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002834 <bmi088_update+0x404>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]

			BMI->acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 80025ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	ee17 0a90 	vmov	r0, s15
 80025ca:	f7fd ffdd 	bl	8000588 <__aeabi_f2d>
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4b99      	ldr	r3, [pc, #612]	@ (8002838 <bmi088_update+0x408>)
 80025d4:	f7fe f95a 	bl	800088c <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	4b95      	ldr	r3, [pc, #596]	@ (800283c <bmi088_update+0x40c>)
 80025e6:	f7fe f827 	bl	8000638 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4b92      	ldr	r3, [pc, #584]	@ (8002840 <bmi088_update+0x410>)
 80025f8:	f7fe f81e 	bl	8000638 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4614      	mov	r4, r2
 8002602:	461d      	mov	r5, r3
 8002604:	4b8b      	ldr	r3, [pc, #556]	@ (8002834 <bmi088_update+0x404>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	7e1b      	ldrb	r3, [r3, #24]
 800260a:	3301      	adds	r3, #1
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ffb6 	bl	8000588 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	ec43 2b11 	vmov	d1, r2, r3
 8002624:	ed9f 0b7e 	vldr	d0, [pc, #504]	@ 8002820 <bmi088_update+0x3f0>
 8002628:	f00c fd78 	bl	800f11c <pow>
 800262c:	ec53 2b10 	vmov	r2, r3, d0
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fe f800 	bl	8000638 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	a379      	add	r3, pc, #484	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd fff7 	bl	8000638 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	4b79      	ldr	r3, [pc, #484]	@ (800283c <bmi088_update+0x40c>)
 8002658:	f7fe f918 	bl	800088c <__aeabi_ddiv>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4974      	ldr	r1, [pc, #464]	@ (8002834 <bmi088_update+0x404>)
 8002662:	680c      	ldr	r4, [r1, #0]
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fabe 	bl	8000be8 <__aeabi_d2f>
 800266c:	4603      	mov	r3, r0
 800266e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
			BMI->acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 8002672:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff81 	bl	8000588 <__aeabi_f2d>
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b6b      	ldr	r3, [pc, #428]	@ (8002838 <bmi088_update+0x408>)
 800268c:	f7fe f8fe 	bl	800088c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b67      	ldr	r3, [pc, #412]	@ (800283c <bmi088_update+0x40c>)
 800269e:	f7fd ffcb 	bl	8000638 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b64      	ldr	r3, [pc, #400]	@ (8002840 <bmi088_update+0x410>)
 80026b0:	f7fd ffc2 	bl	8000638 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002834 <bmi088_update+0x404>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	7e1b      	ldrb	r3, [r3, #24]
 80026c2:	3301      	adds	r3, #1
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026cc:	ee17 0a90 	vmov	r0, s15
 80026d0:	f7fd ff5a 	bl	8000588 <__aeabi_f2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	ec43 2b11 	vmov	d1, r2, r3
 80026dc:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8002820 <bmi088_update+0x3f0>
 80026e0:	f00c fd1c 	bl	800f11c <pow>
 80026e4:	ec53 2b10 	vmov	r2, r3, d0
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd ffa4 	bl	8000638 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	a34b      	add	r3, pc, #300	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff9b 	bl	8000638 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <bmi088_update+0x40c>)
 8002710:	f7fe f8bc 	bl	800088c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4946      	ldr	r1, [pc, #280]	@ (8002834 <bmi088_update+0x404>)
 800271a:	680c      	ldr	r4, [r1, #0]
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe fa62 	bl	8000be8 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
			BMI->acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - 0.0)*9.81/1000;
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd ff25 	bl	8000588 <__aeabi_f2d>
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <bmi088_update+0x408>)
 8002744:	f7fe f8a2 	bl	800088c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b39      	ldr	r3, [pc, #228]	@ (800283c <bmi088_update+0x40c>)
 8002756:	f7fd ff6f 	bl	8000638 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <bmi088_update+0x410>)
 8002768:	f7fd ff66 	bl	8000638 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <bmi088_update+0x404>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	7e1b      	ldrb	r3, [r3, #24]
 800277a:	3301      	adds	r3, #1
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	ee17 0a90 	vmov	r0, s15
 8002788:	f7fd fefe 	bl	8000588 <__aeabi_f2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	ec43 2b11 	vmov	d1, r2, r3
 8002794:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002820 <bmi088_update+0x3f0>
 8002798:	f00c fcc0 	bl	800f11c <pow>
 800279c:	ec53 2b10 	vmov	r2, r3, d0
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7fd ff48 	bl	8000638 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8002828 <bmi088_update+0x3f8>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fd ff3f 	bl	8000638 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <bmi088_update+0x40c>)
 80027c8:	f7fe f860 	bl	800088c <__aeabi_ddiv>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4918      	ldr	r1, [pc, #96]	@ (8002834 <bmi088_update+0x404>)
 80027d2:	680c      	ldr	r4, [r1, #0]
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe fa06 	bl	8000be8 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc

			if(isStarded)
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <bmi088_update+0x414>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d042      	beq.n	8002870 <bmi088_update+0x440>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <bmi088_update+0x404>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <bmi088_update+0x404>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d521      	bpl.n	800284c <bmi088_update+0x41c>
 8002808:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8002848 <bmi088_update+0x418>
 800280c:	e028      	b.n	8002860 <bmi088_update+0x430>
 800280e:	bf00      	nop
 8002810:	00000000 	.word	0x00000000
 8002814:	40438800 	.word	0x40438800
 8002818:	00000000 	.word	0x00000000
 800281c:	412e8480 	.word	0x412e8480
 8002820:	00000000 	.word	0x00000000
 8002824:	40000000 	.word	0x40000000
 8002828:	51eb851f 	.word	0x51eb851f
 800282c:	40239eb8 	.word	0x40239eb8
 8002830:	40370000 	.word	0x40370000
 8002834:	20000254 	.word	0x20000254
 8002838:	40e00000 	.word	0x40e00000
 800283c:	408f4000 	.word	0x408f4000
 8002840:	3ff80000 	.word	0x3ff80000
 8002844:	20000259 	.word	0x20000259
 8002848:	00000000 	.word	0x00000000
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <bmi088_update+0x43c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <bmi088_update+0x43c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	4b02      	ldr	r3, [pc, #8]	@ (800286c <bmi088_update+0x43c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
 8002868:	e008      	b.n	800287c <bmi088_update+0x44c>
 800286a:	bf00      	nop
 800286c:	20000254 	.word	0x20000254
			}
			else
			{
				isStarded++;
 8002870:	4bb3      	ldr	r3, [pc, #716]	@ (8002b40 <bmi088_update+0x710>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	4bb1      	ldr	r3, [pc, #708]	@ (8002b40 <bmi088_update+0x710>)
 800287a:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 800287c:	4bb1      	ldr	r3, [pc, #708]	@ (8002b44 <bmi088_update+0x714>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4bb0      	ldr	r3, [pc, #704]	@ (8002b44 <bmi088_update+0x714>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8002888:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0


			BMI->rawDatas.isAccelUpdated = 0;
 800288c:	4bad      	ldr	r3, [pc, #692]	@ (8002b44 <bmi088_update+0x714>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	759a      	strb	r2, [r3, #22]
			isTimeUpdated = 1;
 8002894:	4bac      	ldr	r3, [pc, #688]	@ (8002b48 <bmi088_update+0x718>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 800289a:	4baa      	ldr	r3, [pc, #680]	@ (8002b44 <bmi088_update+0x714>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	7d5b      	ldrb	r3, [r3, #21]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 815a 	beq.w	8002b5a <bmi088_update+0x72a>
 80028a6:	4ba8      	ldr	r3, [pc, #672]	@ (8002b48 <bmi088_update+0x718>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8155 	beq.w	8002b5a <bmi088_update+0x72a>
		{
			if(isStarded){
 80028b0:	4ba3      	ldr	r3, [pc, #652]	@ (8002b40 <bmi088_update+0x710>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8138 	beq.w	8002b2a <bmi088_update+0x6fa>
				ret_val = HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 80028ba:	4ba4      	ldr	r3, [pc, #656]	@ (8002b4c <bmi088_update+0x71c>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	4ba1      	ldr	r3, [pc, #644]	@ (8002b44 <bmi088_update+0x714>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330f      	adds	r3, #15
 80028c4:	220a      	movs	r2, #10
 80028c6:	9202      	str	r2, [sp, #8]
 80028c8:	2206      	movs	r2, #6
 80028ca:	9201      	str	r2, [sp, #4]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2301      	movs	r3, #1
 80028d0:	2202      	movs	r2, #2
 80028d2:	21e0      	movs	r1, #224	@ 0xe0
 80028d4:	f006 fa7a 	bl	8008dcc <HAL_I2C_Mem_Read>
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
				if(ret_val)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 813a 	bne.w	8002b58 <bmi088_update+0x728>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 80028e4:	4b97      	ldr	r3, [pc, #604]	@ (8002b44 <bmi088_update+0x714>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	7d1b      	ldrb	r3, [r3, #20]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	b21a      	sxth	r2, r3
 80028ee:	4b95      	ldr	r3, [pc, #596]	@ (8002b44 <bmi088_update+0x714>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	7cdb      	ldrb	r3, [r3, #19]
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	80bb      	strh	r3, [r7, #4]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 80028fa:	4b92      	ldr	r3, [pc, #584]	@ (8002b44 <bmi088_update+0x714>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	7c9b      	ldrb	r3, [r3, #18]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b21a      	sxth	r2, r3
 8002904:	4b8f      	ldr	r3, [pc, #572]	@ (8002b44 <bmi088_update+0x714>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	7c5b      	ldrb	r3, [r3, #17]
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	807b      	strh	r3, [r7, #2]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8002910:	4b8c      	ldr	r3, [pc, #560]	@ (8002b44 <bmi088_update+0x714>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	7c1b      	ldrb	r3, [r3, #16]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	b21a      	sxth	r2, r3
 800291a:	4b8a      	ldr	r3, [pc, #552]	@ (8002b44 <bmi088_update+0x714>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	7bdb      	ldrb	r3, [r3, #15]
 8002920:	b21b      	sxth	r3, r3
 8002922:	4313      	orrs	r3, r2
 8002924:	803b      	strh	r3, [r7, #0]

				// Doğrudan rad/s olarak al
				BMI->gyro_x = ((float)gyro_x_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[0];
 8002926:	f9b7 3000 	ldrsh.w	r3, [r7]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8002b50 <bmi088_update+0x720>
 8002936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800293a:	ee17 0a90 	vmov	r0, s15
 800293e:	f7fd fe23 	bl	8000588 <__aeabi_f2d>
 8002942:	4b80      	ldr	r3, [pc, #512]	@ (8002b44 <bmi088_update+0x714>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800294a:	4c7e      	ldr	r4, [pc, #504]	@ (8002b44 <bmi088_update+0x714>)
 800294c:	6824      	ldr	r4, [r4, #0]
 800294e:	f7fd fcbb 	bl	80002c8 <__aeabi_dsub>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	e9c4 2320 	strd	r2, r3, [r4, #128]	@ 0x80
				BMI->gyro_y = ((float)gyro_y_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[1];
 800295a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002966:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002b50 <bmi088_update+0x720>
 800296a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800296e:	ee17 0a90 	vmov	r0, s15
 8002972:	f7fd fe09 	bl	8000588 <__aeabi_f2d>
 8002976:	4b73      	ldr	r3, [pc, #460]	@ (8002b44 <bmi088_update+0x714>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	@ 0xf8
 800297e:	4c71      	ldr	r4, [pc, #452]	@ (8002b44 <bmi088_update+0x714>)
 8002980:	6824      	ldr	r4, [r4, #0]
 8002982:	f7fd fca1 	bl	80002c8 <__aeabi_dsub>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
				BMI->gyro_z = ((float)gyro_z_16 * BMI088_GYRO_LSB_TO_RADS) - BMI->offset_vals[2];
 800298e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002b50 <bmi088_update+0x720>
 800299e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a2:	ee17 0a90 	vmov	r0, s15
 80029a6:	f7fd fdef 	bl	8000588 <__aeabi_f2d>
 80029aa:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <bmi088_update+0x714>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 80029b2:	4c64      	ldr	r4, [pc, #400]	@ (8002b44 <bmi088_update+0x714>)
 80029b4:	6824      	ldr	r4, [r4, #0]
 80029b6:	f7fd fc87 	bl	80002c8 <__aeabi_dsub>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	e9c4 2324 	strd	r2, r3, [r4, #144]	@ 0x90

				Orientation_Update(BMI->gyro_x, BMI->gyro_y, BMI->gyro_z,BMI->acc_x,BMI->acc_y,BMI->acc_z, BMI->deltaTime);
 80029c2:	4b60      	ldr	r3, [pc, #384]	@ (8002b44 <bmi088_update+0x714>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7fe f90b 	bl	8000be8 <__aeabi_d2f>
 80029d2:	4604      	mov	r4, r0
 80029d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b44 <bmi088_update+0x714>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f7fe f902 	bl	8000be8 <__aeabi_d2f>
 80029e4:	4605      	mov	r5, r0
 80029e6:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <bmi088_update+0x714>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f8f9 	bl	8000be8 <__aeabi_d2f>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b52      	ldr	r3, [pc, #328]	@ (8002b44 <bmi088_update+0x714>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8002a00:	4b50      	ldr	r3, [pc, #320]	@ (8002b44 <bmi088_update+0x714>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8002a08:	4b4e      	ldr	r3, [pc, #312]	@ (8002b44 <bmi088_update+0x714>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 8002a10:	4b4c      	ldr	r3, [pc, #304]	@ (8002b44 <bmi088_update+0x714>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	ed93 6a35 	vldr	s12, [r3, #212]	@ 0xd4
 8002a18:	eeb0 3a46 	vmov.f32	s6, s12
 8002a1c:	eef0 2a66 	vmov.f32	s5, s13
 8002a20:	eeb0 2a47 	vmov.f32	s4, s14
 8002a24:	eef0 1a67 	vmov.f32	s3, s15
 8002a28:	ee01 2a10 	vmov	s2, r2
 8002a2c:	ee00 5a90 	vmov	s1, r5
 8002a30:	ee00 4a10 	vmov	s0, r4
 8002a34:	f002 fed0 	bl	80057d8 <Orientation_Update>
				BMI->yaw = quaternionToYaw();
 8002a38:	4b42      	ldr	r3, [pc, #264]	@ (8002b44 <bmi088_update+0x714>)
 8002a3a:	681c      	ldr	r4, [r3, #0]
 8002a3c:	f003 fc20 	bl	8006280 <quaternionToYaw>
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
 8002a44:	edc4 7a26 	vstr	s15, [r4, #152]	@ 0x98
				BMI->pitch = quaternionToPitch();
 8002a48:	4b3e      	ldr	r3, [pc, #248]	@ (8002b44 <bmi088_update+0x714>)
 8002a4a:	681c      	ldr	r4, [r3, #0]
 8002a4c:	f003 fc76 	bl	800633c <quaternionToPitch>
 8002a50:	eef0 7a40 	vmov.f32	s15, s0
 8002a54:	edc4 7a27 	vstr	s15, [r4, #156]	@ 0x9c
				BMI->roll = quaternionToRoll();
 8002a58:	4b3a      	ldr	r3, [pc, #232]	@ (8002b44 <bmi088_update+0x714>)
 8002a5a:	681c      	ldr	r4, [r3, #0]
 8002a5c:	f003 fca6 	bl	80063ac <quaternionToRoll>
 8002a60:	eef0 7a40 	vmov.f32	s15, s0
 8002a64:	edc4 7a28 	vstr	s15, [r4, #160]	@ 0xa0
				BMI->angleZ = quaternionToYawDegree();
 8002a68:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <bmi088_update+0x714>)
 8002a6a:	681c      	ldr	r4, [r3, #0]
 8002a6c:	f003 fb28 	bl	80060c0 <quaternionToYawDegree>
 8002a70:	eef0 7a40 	vmov.f32	s15, s0
 8002a74:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
				BMI->angleY = quaternionToPitchDegree();
 8002a78:	4b32      	ldr	r3, [pc, #200]	@ (8002b44 <bmi088_update+0x714>)
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	f003 fb68 	bl	8006150 <quaternionToPitchDegree>
 8002a80:	eef0 7a40 	vmov.f32	s15, s0
 8002a84:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
				BMI->angleX = quaternionToRollDegree();
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <bmi088_update+0x714>)
 8002a8a:	681c      	ldr	r4, [r3, #0]
 8002a8c:	f003 fbb0 	bl	80061f0 <quaternionToRollDegree>
 8002a90:	eef0 7a40 	vmov.f32	s15, s0
 8002a94:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec

				ekf_predict(BMI->gyro_x,BMI->gyro_y,BMI->gyro_z,BMI->deltaTime);
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <bmi088_update+0x714>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7fe f8a0 	bl	8000be8 <__aeabi_d2f>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	4b26      	ldr	r3, [pc, #152]	@ (8002b44 <bmi088_update+0x714>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f897 	bl	8000be8 <__aeabi_d2f>
 8002aba:	4605      	mov	r5, r0
 8002abc:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <bmi088_update+0x714>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f88e 	bl	8000be8 <__aeabi_d2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <bmi088_update+0x714>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8002ad6:	eef0 1a67 	vmov.f32	s3, s15
 8002ada:	ee01 2a10 	vmov	s2, r2
 8002ade:	ee00 5a90 	vmov	s1, r5
 8002ae2:	ee00 4a10 	vmov	s0, r4
 8002ae6:	f002 fa91 	bl	800500c <ekf_predict>
				BMI->yaw1 = quaternionToYaw1();
 8002aea:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <bmi088_update+0x714>)
 8002aec:	681c      	ldr	r4, [r3, #0]
 8002aee:	f002 fbb3 	bl	8005258 <quaternionToYaw1>
 8002af2:	eef0 7a40 	vmov.f32	s15, s0
 8002af6:	edc4 7a29 	vstr	s15, [r4, #164]	@ 0xa4
				BMI->pitch1 = quaternionToPitch1();
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <bmi088_update+0x714>)
 8002afc:	681c      	ldr	r4, [r3, #0]
 8002afe:	f002 fc09 	bl	8005314 <quaternionToPitch1>
 8002b02:	eef0 7a40 	vmov.f32	s15, s0
 8002b06:	edc4 7a2a 	vstr	s15, [r4, #168]	@ 0xa8
				BMI->roll1 = quaternionToRoll1();
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <bmi088_update+0x714>)
 8002b0c:	681c      	ldr	r4, [r3, #0]
 8002b0e:	f002 fc39 	bl	8005384 <quaternionToRoll1>
 8002b12:	eef0 7a40 	vmov.f32	s15, s0
 8002b16:	edc4 7a2b 	vstr	s15, [r4, #172]	@ 0xac
				BMI->isUpdated = 1;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <bmi088_update+0x714>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

				/*ekf_update(BMI->acc_x, BMI->acc_y, BMI->acc_z);
				BMI->angle = ekf_getTheta();*/
				is_gyro_offset = 1;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <bmi088_update+0x724>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <bmi088_update+0x714>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	755a      	strb	r2, [r3, #21]
			isTimeUpdated = 0;
 8002b32:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <bmi088_update+0x718>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e00f      	b.n	8002b5a <bmi088_update+0x72a>
				return;
 8002b3a:	bf00      	nop
 8002b3c:	e00d      	b.n	8002b5a <bmi088_update+0x72a>
 8002b3e:	bf00      	nop
 8002b40:	20000259 	.word	0x20000259
 8002b44:	20000254 	.word	0x20000254
 8002b48:	20000258 	.word	0x20000258
 8002b4c:	20000250 	.word	0x20000250
 8002b50:	3a8b8bbf 	.word	0x3a8b8bbf
 8002b54:	2000025a 	.word	0x2000025a
					return;
 8002b58:	bf00      	nop
		}


}
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdb0      	pop	{r4, r5, r7, pc}

08002b60 <bmi088_getAccelDatas_INT>:


void bmi088_getAccelDatas_INT()
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	BMI->rawDatas.isAccelUpdated = 1;
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <bmi088_getAccelDatas_INT+0x18>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	759a      	strb	r2, [r3, #22]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000254 	.word	0x20000254

08002b7c <bmi088_getGyroDatas_INT>:

void bmi088_getGyroDatas_INT()
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	BMI->rawDatas.isGyroUpdated = 1;
 8002b80:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <bmi088_getGyroDatas_INT+0x18>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	755a      	strb	r2, [r3, #21]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000254 	.word	0x20000254

08002b98 <getOffset>:
	HAL_I2C_Mem_Read(bmi_I2C, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void getOffset()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	static int offsetCounter = 0;

	while(1)
	{
		bmi088_update();
 8002b9c:	f7ff fc48 	bl	8002430 <bmi088_update>
		if(is_gyro_offset == 1)
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <getOffset+0x100>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d1f9      	bne.n	8002b9c <getOffset+0x4>
		{
			if(offsetCounter < 1000){
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8002c9c <getOffset+0x104>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bb0:	da32      	bge.n	8002c18 <getOffset+0x80>
					 g[0][0] += BMI->gyro_x;
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca0 <getOffset+0x108>)
 8002bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <getOffset+0x10c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002bc0:	f7fd fb84 	bl	80002cc <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4935      	ldr	r1, [pc, #212]	@ (8002ca0 <getOffset+0x108>)
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] += BMI->gyro_y;
 8002bce:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <getOffset+0x108>)
 8002bd0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bd4:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <getOffset+0x10c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002bdc:	f7fd fb76 	bl	80002cc <__adddf3>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	492e      	ldr	r1, [pc, #184]	@ (8002ca0 <getOffset+0x108>)
 8002be6:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] += BMI->gyro_z;
 8002bea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <getOffset+0x108>)
 8002bec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <getOffset+0x10c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002bf8:	f7fd fb68 	bl	80002cc <__adddf3>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4927      	ldr	r1, [pc, #156]	@ (8002ca0 <getOffset+0x108>)
 8002c02:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 offsetCounter++;
 8002c06:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <getOffset+0x104>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a23      	ldr	r2, [pc, #140]	@ (8002c9c <getOffset+0x104>)
 8002c0e:	6013      	str	r3, [r2, #0]
					 BMI->offset_vals[1] = g[0][1];
					 BMI->offset_vals[2] = g[0][2];
					 break;
					 //Error_Handler();
				 }
			is_gyro_offset = 0;
 8002c10:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <getOffset+0x100>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e7c1      	b.n	8002b9c <getOffset+0x4>
					 g[0][0] /= 1000.0;
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <getOffset+0x108>)
 8002c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <getOffset+0x110>)
 8002c24:	f7fd fe32 	bl	800088c <__aeabi_ddiv>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	491c      	ldr	r1, [pc, #112]	@ (8002ca0 <getOffset+0x108>)
 8002c2e:	e9c1 2300 	strd	r2, r3, [r1]
					 g[0][1] /= 1000.0;
 8002c32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <getOffset+0x108>)
 8002c34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca8 <getOffset+0x110>)
 8002c3e:	f7fd fe25 	bl	800088c <__aeabi_ddiv>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4916      	ldr	r1, [pc, #88]	@ (8002ca0 <getOffset+0x108>)
 8002c48:	e9c1 2302 	strd	r2, r3, [r1, #8]
					 g[0][2] /= 1000.0;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <getOffset+0x108>)
 8002c4e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <getOffset+0x110>)
 8002c58:	f7fd fe18 	bl	800088c <__aeabi_ddiv>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	490f      	ldr	r1, [pc, #60]	@ (8002ca0 <getOffset+0x108>)
 8002c62:	e9c1 2304 	strd	r2, r3, [r1, #16]
					 BMI->offset_vals[0] = g[0][0];
 8002c66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <getOffset+0x10c>)
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <getOffset+0x108>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
					 BMI->offset_vals[1] = g[0][1];
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <getOffset+0x10c>)
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <getOffset+0x108>)
 8002c7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c7e:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
					 BMI->offset_vals[2] = g[0][2];
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <getOffset+0x10c>)
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <getOffset+0x108>)
 8002c88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c8c:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
					 break;
 8002c90:	bf00      	nop
		}

	}
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000025a 	.word	0x2000025a
 8002c9c:	20000290 	.word	0x20000290
 8002ca0:	20000260 	.word	0x20000260
 8002ca4:	20000254 	.word	0x20000254
 8002ca8:	408f4000 	.word	0x408f4000

08002cac <flight_algorithm_init>:

/**
 * @brief Initialize the flight algorithm
 */
void flight_algorithm_init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
    flight_algorithm_reset();
 8002cb0:	f000 f802 	bl	8002cb8 <flight_algorithm_reset>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <flight_algorithm_reset>:

/**
 * @brief Reset flight algorithm to initial state
 */
void flight_algorithm_reset(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
    current_phase = PHASE_IDLE;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <flight_algorithm_reset+0x4c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
    is_rising = 0;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <flight_algorithm_reset+0x50>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
    is_stabilized = 1;
 8002cc8:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <flight_algorithm_reset+0x54>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    is_armed = 0;
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <flight_algorithm_reset+0x58>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    drogue_deployed = 0;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <flight_algorithm_reset+0x5c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    main_deployed = 0;
 8002cda:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <flight_algorithm_reset+0x60>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    altitude_decrease_count = 0;
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <flight_algorithm_reset+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
    status_bits = 0;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <flight_algorithm_reset+0x68>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
    prev_altitude = 0.0f;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <flight_algorithm_reset+0x6c>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <flight_algorithm_reset+0x70>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	20000294 	.word	0x20000294
 8002d08:	20000295 	.word	0x20000295
 8002d0c:	20000014 	.word	0x20000014
 8002d10:	20000296 	.word	0x20000296
 8002d14:	20000297 	.word	0x20000297
 8002d18:	20000298 	.word	0x20000298
 8002d1c:	200002a0 	.word	0x200002a0
 8002d20:	200002a8 	.word	0x200002a8
 8002d24:	200002a4 	.word	0x200002a4
 8002d28:	2000029c 	.word	0x2000029c

08002d2c <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	f000 f8d3 	bl	8002ee4 <calculate_total_acceleration>
 8002d3e:	ed87 0a05 	vstr	s0, [r7, #20]
    float theta = sensor_fusion->angle; // Use sensor fusion output
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	613b      	str	r3, [r7, #16]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002d48:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb4 <flight_algorithm_update+0x188>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	f200 80a9 	bhi.w	8002ea4 <flight_algorithm_update+0x178>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <flight_algorithm_update+0x2c>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d71 	.word	0x08002d71
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002ddd 	.word	0x08002ddd
 8002d64:	08002e49 	.word	0x08002e49
 8002d68:	08002ea5 	.word	0x08002ea5
 8002d6c:	08002ea5 	.word	0x08002ea5
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002d70:	4b51      	ldr	r3, [pc, #324]	@ (8002eb8 <flight_algorithm_update+0x18c>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dc00      	bgt.n	8002d86 <flight_algorithm_update+0x5a>
                current_phase = PHASE_BOOST;
                is_rising = 1;
                flight_start_time = HAL_GetTick();
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
            }
            break;
 8002d84:	e08e      	b.n	8002ea4 <flight_algorithm_update+0x178>
                current_phase = PHASE_BOOST;
 8002d86:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <flight_algorithm_update+0x188>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8002d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ebc <flight_algorithm_update+0x190>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8002d92:	f004 fdaf 	bl	80078f4 <HAL_GetTick>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4a49      	ldr	r2, [pc, #292]	@ (8002ec0 <flight_algorithm_update+0x194>)
 8002d9a:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8002d9c:	4b49      	ldr	r3, [pc, #292]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b47      	ldr	r3, [pc, #284]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002da8:	801a      	strh	r2, [r3, #0]
            break;
 8002daa:	e07b      	b.n	8002ea4 <flight_algorithm_update+0x178>

        case PHASE_BOOST:
            // After boost phase (typically 3-5 seconds)
            if (HAL_GetTick() - flight_start_time > 7000) {
 8002dac:	f004 fda2 	bl	80078f4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b43      	ldr	r3, [pc, #268]	@ (8002ec0 <flight_algorithm_update+0x194>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d96c      	bls.n	8002e9a <flight_algorithm_update+0x16e>
                current_phase = PHASE_COAST;
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <flight_algorithm_update+0x188>)
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <flight_algorithm_update+0x19c>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002dd8:	801a      	strh	r2, [r3, #0]
            }
            break;
 8002dda:	e05e      	b.n	8002e9a <flight_algorithm_update+0x16e>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (!is_armed && bme->altitude > min_arming_altitude) {
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <flight_algorithm_update+0x1a0>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d114      	bne.n	8002e0e <flight_algorithm_update+0xe2>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	ed93 7a08 	vldr	s14, [r3, #32]
 8002dea:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <flight_algorithm_update+0x1a4>)
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	dd09      	ble.n	8002e0e <flight_algorithm_update+0xe2>
                is_armed = 1;
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <flight_algorithm_update+0x1a0>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8002e00:	4b30      	ldr	r3, [pc, #192]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e0c:	801a      	strh	r2, [r3, #0]
            if (is_armed && (fabs(bmi->angleY) > max_angle_threshold)) {
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
            }*/

            // Detect altitude decrease (apogee)
            if (is_armed && sensor_fusion->apogeeDetect == 1) {
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ecc <flight_algorithm_update+0x1a0>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d043      	beq.n	8002e9e <flight_algorithm_update+0x172>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7e1b      	ldrb	r3, [r3, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d13f      	bne.n	8002e9e <flight_algorithm_update+0x172>
				current_phase = PHASE_DROGUE_DESCENT;
 8002e1e:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <flight_algorithm_update+0x188>)
 8002e20:	2203      	movs	r2, #3
 8002e22:	701a      	strb	r2, [r3, #0]
				status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8002e24:	4b27      	ldr	r3, [pc, #156]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f043 0310 	orr.w	r3, r3, #16
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e30:	801a      	strh	r2, [r3, #0]

				status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	f043 0320 	orr.w	r3, r3, #32
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e3e:	801a      	strh	r2, [r3, #0]
				drogue_deployed = 1;
 8002e40:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <flight_algorithm_update+0x1a8>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
				// deploy_drogue_parachute(); // Actual deployment command
            }
            break;
 8002e46:	e02a      	b.n	8002e9e <flight_algorithm_update+0x172>

        case PHASE_DROGUE_DESCENT:
            // Deploy main parachute at designated altitude
            if (drogue_deployed && !main_deployed && bme->altitude < main_chute_altitude) {
 8002e48:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <flight_algorithm_update+0x1a8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d028      	beq.n	8002ea2 <flight_algorithm_update+0x176>
 8002e50:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <flight_algorithm_update+0x1ac>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d124      	bne.n	8002ea2 <flight_algorithm_update+0x176>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002edc <flight_algorithm_update+0x1b0>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	d400      	bmi.n	8002e70 <flight_algorithm_update+0x144>

                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                // deploy_main_parachute(); // Actual deployment command
            }
            break;
 8002e6e:	e018      	b.n	8002ea2 <flight_algorithm_update+0x176>
                current_phase = PHASE_MAIN_DESCENT;
 8002e70:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <flight_algorithm_update+0x188>)
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8002e76:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e82:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8002e84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <flight_algorithm_update+0x198>)
 8002e90:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8002e92:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <flight_algorithm_update+0x1ac>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
            break;
 8002e98:	e003      	b.n	8002ea2 <flight_algorithm_update+0x176>
            break;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <flight_algorithm_update+0x178>
            break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <flight_algorithm_update+0x178>
            break;
 8002ea2:	bf00      	nop
        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }

    prev_altitude = bme->altitude;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <flight_algorithm_update+0x1b4>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000294 	.word	0x20000294
 8002eb8:	20000004 	.word	0x20000004
 8002ebc:	20000295 	.word	0x20000295
 8002ec0:	2000029c 	.word	0x2000029c
 8002ec4:	200002a8 	.word	0x200002a8
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	20000296 	.word	0x20000296
 8002ed0:	20000008 	.word	0x20000008
 8002ed4:	20000297 	.word	0x20000297
 8002ed8:	20000298 	.word	0x20000298
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	200002a4 	.word	0x200002a4

08002ee4 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8002ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->acc_y * bmi->acc_y) +
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->acc_z * bmi->acc_z));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	edd3 6a31 	vldr	s13, [r3, #196]	@ 0xc4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->acc_x * bmi->acc_x) +
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	eeb0 0a67 	vmov.f32	s0, s15
 8002f28:	f00c fa44 	bl	800f3b4 <sqrtf>
 8002f2c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <flight_algorithm_get_status_bits>:

/**
 * @brief Get the current status bits
 */
uint16_t flight_algorithm_get_status_bits(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
    return status_bits;
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <flight_algorithm_get_status_bits+0x14>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200002a8 	.word	0x200002a8

08002f54 <flight_algorithm_set_parameters>:
 */
void flight_algorithm_set_parameters(float launch_accel_threshold_param,
                                   float min_arming_altitude_param,
                                   float main_chute_altitude_param,
                                   float max_angle_threshold_param)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f62:	ed87 1a01 	vstr	s2, [r7, #4]
 8002f66:	edc7 1a00 	vstr	s3, [r7]
    launch_accel_threshold = launch_accel_threshold_param;
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <flight_algorithm_set_parameters+0x3c>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6013      	str	r3, [r2, #0]
    min_arming_altitude = min_arming_altitude_param;
 8002f70:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <flight_algorithm_set_parameters+0x40>)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6013      	str	r3, [r2, #0]
    main_chute_altitude = main_chute_altitude_param;
 8002f76:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <flight_algorithm_set_parameters+0x44>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6013      	str	r3, [r2, #0]
    max_angle_threshold = max_angle_threshold_param;
 8002f7c:	4a07      	ldr	r2, [pc, #28]	@ (8002f9c <flight_algorithm_set_parameters+0x48>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6013      	str	r3, [r2, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000004 	.word	0x20000004
 8002f94:	20000008 	.word	0x20000008
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <flight_algorithm_get_start_time>:
/**
 * @brief Get flight start time in milliseconds
 * @return Flight start time from HAL_GetTick(), or 0 if flight hasn't started
 */
uint32_t flight_algorithm_get_start_time(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
    return flight_start_time;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <flight_algorithm_get_start_time+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000029c 	.word	0x2000029c

08002fb8 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e01f      	b.n	800301e <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	e016      	b.n	8003012 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d101      	bne.n	8002ff0 <KalmanFilter_Init+0x38>
 8002fec:	491b      	ldr	r1, [pc, #108]	@ (800305c <KalmanFilter_Init+0xa4>)
 8002fee:	e001      	b.n	8002ff4 <KalmanFilter_Init+0x3c>
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4413      	add	r3, r2
 8003002:	3302      	adds	r3, #2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4403      	add	r3, r0
 8003008:	3304      	adds	r3, #4
 800300a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3301      	adds	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b02      	cmp	r3, #2
 8003016:	dde5      	ble.n	8002fe4 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b02      	cmp	r3, #2
 8003022:	dddc      	ble.n	8002fde <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0e      	ldr	r2, [pc, #56]	@ (8003060 <KalmanFilter_Init+0xa8>)
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <KalmanFilter_Init+0xac>)
 800302e:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <KalmanFilter_Init+0xb0>)
 8003034:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	42c80000 	.word	0x42c80000
 8003060:	3c23d70a 	.word	0x3c23d70a
 8003064:	3ba3d70a 	.word	0x3ba3d70a
 8003068:	40a00000 	.word	0x40a00000

0800306c <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	ed87 0a02 	vstr	s0, [r7, #8]
 8003078:	edc7 0a01 	vstr	s1, [r7, #4]
 800307c:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	edd3 7a01 	vldr	s15, [r3, #4]
 8003086:	eef0 7ae7 	vabs.f32	s15, s15
 800308a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80030f0 <KalmanFilter_Update+0x84>
 800308e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	dd0f      	ble.n	80030b8 <KalmanFilter_Update+0x4c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	edd3 7a01 	vldr	s15, [r3, #4]
 800309e:	eef0 7ae7 	vabs.f32	s15, s15
 80030a2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80030f4 <KalmanFilter_Update+0x88>
 80030a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ae:	d503      	bpl.n	80030b8 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	649a      	str	r2, [r3, #72]	@ 0x48
 80030b6:	e002      	b.n	80030be <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80030be:	ed97 0a00 	vldr	s0, [r7]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f818 	bl	80030f8 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80030c8:	edd7 0a01 	vldr	s1, [r7, #4]
 80030cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fa1d 	bl	8003510 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 f96a 	bl	80043b0 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	ee07 3a90 	vmov	s15, r3
}
 80030e4:	eeb0 0a67 	vmov.f32	s0, s15
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	43960000 	.word	0x43960000
 80030f4:	43af0000 	.word	0x43af0000

080030f8 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0b6      	sub	sp, #216	@ 0xd8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003104:	edd7 7a00 	vldr	s15, [r7]
 8003108:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800310c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003110:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003114:	edd7 7a00 	vldr	s15, [r7]
 8003118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003120:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003128:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	ed93 7a00 	vldr	s14, [r3]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	edd3 6a01 	vldr	s13, [r3, #4]
 8003138:	edd7 7a00 	vldr	s15, [r7]
 800313c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	edd3 6a02 	vldr	s13, [r3, #8]
 800314a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800314e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003152:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003156:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	ed93 7a01 	vldr	s14, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd3 6a02 	vldr	s13, [r3, #8]
 800316e:	edd7 7a00 	vldr	s15, [r7]
 8003172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800318c:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003194:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800319c:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80031a6:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80031aa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80031ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031b2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031ba:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80031be:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80031c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031ca:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031d2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80031d6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80031da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031e2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80031ea:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 80031ee:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80031f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031fa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003202:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003206:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800320a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003212:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003216:	ed97 7a00 	vldr	s14, [r7]
 800321a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003222:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 8003226:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800322a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800322e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003232:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800323a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 800323e:	ed97 7a00 	vldr	s14, [r7]
 8003242:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800324a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 800324e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003252:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 8003256:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800325a:	657b      	str	r3, [r7, #84]	@ 0x54
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003260:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003264:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003268:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 800326c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	663b      	str	r3, [r7, #96]	@ 0x60
 8003276:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800327a:	667b      	str	r3, [r7, #100]	@ 0x64
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	673b      	str	r3, [r7, #112]	@ 0x70
 800328c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003290:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 8003292:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f009 fe73 	bl	800cf86 <memset>
    float FPFT[3][3] = {0};
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	2224      	movs	r2, #36	@ 0x24
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f009 fe6c 	bl	800cf86 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032b4:	e06a      	b.n	800338c <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032bc:	e05d      	b.n	800337a <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80032be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	33d8      	adds	r3, #216	@ 0xd8
 80032d2:	443b      	add	r3, r7
 80032d4:	3ba8      	subs	r3, #168	@ 0xa8
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e2:	e041      	b.n	8003368 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 80032e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	33d8      	adds	r3, #216	@ 0xd8
 80032f8:	443b      	add	r3, r7
 80032fa:	3ba8      	subs	r3, #168	@ 0xa8
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	33d8      	adds	r3, #216	@ 0xd8
 8003314:	443b      	add	r3, r7
 8003316:	3b84      	subs	r3, #132	@ 0x84
 8003318:	edd3 6a00 	vldr	s13, [r3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800332c:	4413      	add	r3, r2
 800332e:	3302      	adds	r3, #2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3304      	adds	r3, #4
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003342:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	33d8      	adds	r3, #216	@ 0xd8
 8003356:	443b      	add	r3, r7
 8003358:	3ba8      	subs	r3, #168	@ 0xa8
 800335a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800335e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003362:	3301      	adds	r3, #1
 8003364:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800336c:	2b02      	cmp	r3, #2
 800336e:	ddb9      	ble.n	80032e4 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003374:	3301      	adds	r3, #1
 8003376:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800337a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800337e:	2b02      	cmp	r3, #2
 8003380:	dd9d      	ble.n	80032be <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 8003382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003386:	3301      	adds	r3, #1
 8003388:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800338c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003390:	2b02      	cmp	r3, #2
 8003392:	dd90      	ble.n	80032b6 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800339a:	e069      	b.n	8003470 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033a2:	e05c      	b.n	800345e <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80033a4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	33d8      	adds	r3, #216	@ 0xd8
 80033b8:	443b      	add	r3, r7
 80033ba:	3bcc      	subs	r3, #204	@ 0xcc
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033c8:	e040      	b.n	800344c <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80033ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	33d8      	adds	r3, #216	@ 0xd8
 80033de:	443b      	add	r3, r7
 80033e0:	3bcc      	subs	r3, #204	@ 0xcc
 80033e2:	ed93 7a00 	vldr	s14, [r3]
 80033e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	33d8      	adds	r3, #216	@ 0xd8
 80033fa:	443b      	add	r3, r7
 80033fc:	3ba8      	subs	r3, #168	@ 0xa8
 80033fe:	edd3 6a00 	vldr	s13, [r3]
 8003402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	33d8      	adds	r3, #216	@ 0xd8
 8003416:	443b      	add	r3, r7
 8003418:	3b84      	subs	r3, #132	@ 0x84
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	33d8      	adds	r3, #216	@ 0xd8
 800343a:	443b      	add	r3, r7
 800343c:	3bcc      	subs	r3, #204	@ 0xcc
 800343e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003446:	3301      	adds	r3, #1
 8003448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800344c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003450:	2b02      	cmp	r3, #2
 8003452:	ddba      	ble.n	80033ca <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003458:	3301      	adds	r3, #1
 800345a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800345e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003462:	2b02      	cmp	r3, #2
 8003464:	dd9e      	ble.n	80033a4 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 8003466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800346a:	3301      	adds	r3, #1
 800346c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003474:	2b02      	cmp	r3, #2
 8003476:	dd91      	ble.n	800339c <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800347e:	e03e      	b.n	80034fe <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003486:	e031      	b.n	80034ec <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003488:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	33d8      	adds	r3, #216	@ 0xd8
 800349c:	443b      	add	r3, r7
 800349e:	3bcc      	subs	r3, #204	@ 0xcc
 80034a0:	ed93 7a00 	vldr	s14, [r3]
 80034a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	33d8      	adds	r3, #216	@ 0xd8
 80034b8:	443b      	add	r3, r7
 80034ba:	3b60      	subs	r3, #96	@ 0x60
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034d4:	4413      	add	r3, r2
 80034d6:	3302      	adds	r3, #2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3304      	adds	r3, #4
 80034de:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80034e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034e6:	3301      	adds	r3, #1
 80034e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	ddc9      	ble.n	8003488 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 80034f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034f8:	3301      	adds	r3, #1
 80034fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80034fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003502:	2b02      	cmp	r3, #2
 8003504:	ddbc      	ble.n	8003480 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	37d8      	adds	r7, #216	@ 0xd8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b0f6      	sub	sp, #472	@ 0x1d8
 8003514:	af00      	add	r7, sp, #0
 8003516:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800351a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800351e:	6018      	str	r0, [r3, #0]
 8003520:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003524:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003528:	ed83 0a00 	vstr	s0, [r3]
 800352c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003530:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003534:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003538:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800353c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 826b 	beq.w	8003a20 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800355a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800355e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 8003562:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003566:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003570:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003574:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	edd3 7a02 	vldr	s15, [r3, #8]
 800357e:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003586:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 800358a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80035a4:	e044      	b.n	8003630 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 80035a6:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80035aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035ae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80035b8:	3302      	adds	r3, #2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3304      	adds	r3, #4
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c8:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 80035cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035d0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80035da:	3305      	adds	r3, #5
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ee:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 80035f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80035f6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003600:	3308      	adds	r3, #8
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003614:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800361e:	443b      	add	r3, r7
 8003620:	3bac      	subs	r3, #172	@ 0xac
 8003622:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003626:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800362a:	3301      	adds	r3, #1
 800362c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003630:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003634:	2b02      	cmp	r3, #2
 8003636:	ddb6      	ble.n	80035a6 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003638:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 800363c:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003644:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003648:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 800364c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003654:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003658:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 800365c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003664:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003668:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 800367a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800368a:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 800368e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003692:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800369c:	e04f      	b.n	800373e <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 800369e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036a2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	330c      	adds	r3, #12
 80036b8:	ed93 7a00 	vldr	s14, [r3]
 80036bc:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80036c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036c8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3304      	adds	r3, #4
 80036e0:	edd3 6a00 	vldr	s13, [r3]
 80036e4:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80036e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80036f4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3314      	adds	r3, #20
 800370a:	edd3 6a00 	vldr	s13, [r3]
 800370e:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800371a:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 800371e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003722:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800372c:	443b      	add	r3, r7
 800372e:	3bb8      	subs	r3, #184	@ 0xb8
 8003730:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003734:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003738:	3301      	adds	r3, #1
 800373a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800373e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003742:	2b02      	cmp	r3, #2
 8003744:	ddab      	ble.n	800369e <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800374c:	e029      	b.n	80037a2 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 800374e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003752:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	ed93 7a00 	vldr	s14, [r3]
 8003764:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800376e:	443b      	add	r3, r7
 8003770:	3bb8      	subs	r3, #184	@ 0xb8
 8003772:	edd3 6a00 	vldr	s13, [r3]
 8003776:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 800377a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003786:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003798:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800379c:	3301      	adds	r3, #1
 800379e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80037a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	ddd1      	ble.n	800374e <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80037aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80037b2:	4618      	mov	r0, r3
 80037b4:	2324      	movs	r3, #36	@ 0x24
 80037b6:	461a      	mov	r2, r3
 80037b8:	2100      	movs	r1, #0
 80037ba:	f009 fbe4 	bl	800cf86 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80037be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80037c2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80037c6:	4618      	mov	r0, r3
 80037c8:	2324      	movs	r3, #36	@ 0x24
 80037ca:	461a      	mov	r2, r3
 80037cc:	2100      	movs	r1, #0
 80037ce:	f009 fbda 	bl	800cf86 <memset>

        for (int i = 0; i < 3; i++) {
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80037d8:	e062      	b.n	80038a0 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80037e0:	e055      	b.n	800388e <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 80037e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80037ec:	443b      	add	r3, r7
 80037ee:	3bb8      	subs	r3, #184	@ 0xb8
 80037f0:	ed93 7a00 	vldr	s14, [r3]
 80037f4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80037fe:	443b      	add	r3, r7
 8003800:	3ba0      	subs	r3, #160	@ 0xa0
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800380e:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003812:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 800382a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800382e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003832:	429a      	cmp	r2, r3
 8003834:	d102      	bne.n	800383c <KalmanFilter_MeasurementUpdate+0x32c>
 8003836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800383a:	e001      	b.n	8003840 <KalmanFilter_MeasurementUpdate+0x330>
 800383c:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003b2c <KalmanFilter_MeasurementUpdate+0x61c>
 8003840:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003844:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003848:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003864:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003868:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800386c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003884:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003888:	3301      	adds	r3, #1
 800388a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800388e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003892:	2b02      	cmp	r3, #2
 8003894:	dda5      	ble.n	80037e2 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003896:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800389a:	3301      	adds	r3, #1
 800389c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80038a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	dd98      	ble.n	80037da <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80038ae:	e076      	b.n	800399e <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80038b6:	e069      	b.n	800398c <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 80038b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038bc:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80038c0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80038e0:	e04b      	b.n	800397a <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80038e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038e6:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80038ea:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	ed93 7a00 	vldr	s14, [r3]
 8003902:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003906:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800390a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	edd3 6a00 	vldr	s13, [r3]
 8003922:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003926:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800393a:	4413      	add	r3, r2
 800393c:	3302      	adds	r3, #2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3304      	adds	r3, #4
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800394c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003950:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003954:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003958:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003970:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003974:	3301      	adds	r3, #1
 8003976:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800397a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800397e:	2b02      	cmp	r3, #2
 8003980:	ddaf      	ble.n	80038e2 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003982:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003986:	3301      	adds	r3, #1
 8003988:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800398c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003990:	2b02      	cmp	r3, #2
 8003992:	dd91      	ble.n	80038b8 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003994:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003998:	3301      	adds	r3, #1
 800399a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800399e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	dd84      	ble.n	80038b0 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80039ac:	e032      	b.n	8003a14 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80039b4:	e025      	b.n	8003a02 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 80039b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039ba:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80039be:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039d8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80039ec:	4413      	add	r3, r2
 80039ee:	3302      	adds	r3, #2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4403      	add	r3, r0
 80039f4:	3304      	adds	r3, #4
 80039f6:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80039f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80039fc:	3301      	adds	r3, #1
 80039fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003a02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	ddd5      	ble.n	80039b6 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003a0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003a14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	ddc8      	ble.n	80039ae <KalmanFilter_MeasurementUpdate+0x49e>
 8003a1c:	f000 bcc2 	b.w	80043a4 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003a20:	4b43      	ldr	r3, [pc, #268]	@ (8003b30 <KalmanFilter_MeasurementUpdate+0x620>)
 8003a22:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003a26:	461d      	mov	r5, r3
 8003a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a30:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003a34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a38:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a46:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003a50:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003a54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a58:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	edd3 7a00 	vldr	s15, [r3]
 8003a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a66:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003a6a:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003a6e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a72:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a80:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003a84:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003a96:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	6053      	str	r3, [r2, #4]
 8003aa6:	6093      	str	r3, [r2, #8]
 8003aa8:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003aaa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003ab6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ac4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ad2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003adc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ae0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003ae8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003af0:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003af8:	e079      	b.n	8003bee <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003b00:	e06c      	b.n	8003bdc <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003b02:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b18:	443b      	add	r3, r7
 8003b1a:	3bf8      	subs	r3, #248	@ 0xf8
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003b28:	e04f      	b.n	8003bca <KalmanFilter_MeasurementUpdate+0x6ba>
 8003b2a:	bf00      	nop
 8003b2c:	00000000 	.word	0x00000000
 8003b30:	08011890 	.word	0x08011890
 8003b34:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003b38:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b4e:	443b      	add	r3, r7
 8003b50:	3bf8      	subs	r3, #248	@ 0xf8
 8003b52:	ed93 7a00 	vldr	s14, [r3]
 8003b56:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b6c:	443b      	add	r3, r7
 8003b6e:	3bd0      	subs	r3, #208	@ 0xd0
 8003b70:	edd3 6a00 	vldr	s13, [r3]
 8003b74:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b78:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3302      	adds	r3, #2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3304      	adds	r3, #4
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003bb8:	443b      	add	r3, r7
 8003bba:	3bf8      	subs	r3, #248	@ 0xf8
 8003bbc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003bc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003bca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	ddb2      	ble.n	8003b38 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003bd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003bdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	dd8e      	ble.n	8003b02 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003be4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003be8:	3301      	adds	r3, #1
 8003bea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003bee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	dd81      	ble.n	8003afa <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003bfc:	e098      	b.n	8003d30 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003c04:	e08a      	b.n	8003d1c <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003c06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c0a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003c0e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c12:	0059      	lsls	r1, r3, #1
 8003c14:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003c18:	440b      	add	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003c2a:	e042      	b.n	8003cb2 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003c2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c30:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003c34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c38:	0059      	lsls	r1, r3, #1
 8003c3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003c3e:	440b      	add	r3, r1
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c5e:	443b      	add	r3, r7
 8003c60:	3bf8      	subs	r3, #248	@ 0xf8
 8003c62:	edd3 6a00 	vldr	s13, [r3]
 8003c66:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c7c:	443b      	add	r3, r7
 8003c7e:	3bd0      	subs	r3, #208	@ 0xd0
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c90:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003c94:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c98:	0059      	lsls	r1, r3, #1
 8003c9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003c9e:	440b      	add	r3, r1
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ca8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003cac:	3301      	adds	r3, #1
 8003cae:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003cb2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	ddb8      	ble.n	8003c2c <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8003cba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cbe:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003cc2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003cc6:	0059      	lsls	r1, r3, #1
 8003cc8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ccc:	440b      	add	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	ed93 7a00 	vldr	s14, [r3]
 8003cd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cda:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8003cde:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ce2:	0059      	lsls	r1, r3, #1
 8003ce4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003ce8:	440b      	add	r3, r1
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cfa:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003cfe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d02:	0059      	lsls	r1, r3, #1
 8003d04:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d08:	440b      	add	r3, r1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8003d12:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d16:	3301      	adds	r3, #1
 8003d18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003d1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f77f af70 	ble.w	8003c06 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8003d26:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003d30:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f77f af62 	ble.w	8003bfe <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 8003d3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d42:	ed93 7a00 	vldr	s14, [r3]
 8003d46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d5e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d62:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d76:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8003d7a:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8003d7e:	eef0 7ae7 	vabs.f32	s15, s15
 8003d82:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003b34 <KalmanFilter_MeasurementUpdate+0x624>
 8003d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8e:	f100 8308 	bmi.w	80043a2 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8003d92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8003d9e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003da6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003daa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dae:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8003db2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dba:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dbe:	eef1 6a67 	vneg.f32	s13, s15
 8003dc2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003dca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dd2:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8003dd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dde:	edd3 7a02 	vldr	s15, [r3, #8]
 8003de2:	eef1 6a67 	vneg.f32	s13, s15
 8003de6:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003dee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003df2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003df6:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8003dfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e02:	edd3 6a00 	vldr	s13, [r3]
 8003e06:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8003e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8003e0e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e16:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 8003e1a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e1e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e22:	461a      	mov	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	6053      	str	r3, [r2, #4]
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	60d3      	str	r3, [r2, #12]
 8003e2e:	6113      	str	r3, [r2, #16]
 8003e30:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8003e32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e36:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	6053      	str	r3, [r2, #4]
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	60d3      	str	r3, [r2, #12]
 8003e46:	6113      	str	r3, [r2, #16]
 8003e48:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003e50:	e06f      	b.n	8003f32 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003e58:	e062      	b.n	8003f20 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 8003e5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e5e:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003e62:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003e66:	0059      	lsls	r1, r3, #1
 8003e68:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e6c:	440b      	add	r3, r1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003e7e:	e046      	b.n	8003f0e <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003e80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e84:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003e88:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003e8c:	0059      	lsls	r1, r3, #1
 8003e8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003e92:	440b      	add	r3, r1
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	ed93 7a00 	vldr	s14, [r3]
 8003e9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ea0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	edd3 6a00 	vldr	s13, [r3]
 8003ec2:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ed8:	443b      	add	r3, r7
 8003eda:	3bd0      	subs	r3, #208	@ 0xd0
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eec:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003ef0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003ef4:	0059      	lsls	r1, r3, #1
 8003ef6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003efa:	440b      	add	r3, r1
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003f04:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8003f0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	ddb4      	ble.n	8003e80 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8003f16:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003f20:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	dd98      	ble.n	8003e5a <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8003f28:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003f32:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	dd8b      	ble.n	8003e52 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003f40:	e069      	b.n	8004016 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003f48:	e05c      	b.n	8004004 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 8003f4a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f4e:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003f52:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f56:	0059      	lsls	r1, r3, #1
 8003f58:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003f5c:	440b      	add	r3, r1
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003f6e:	e040      	b.n	8003ff2 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8003f70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f74:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003f78:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f7c:	0059      	lsls	r1, r3, #1
 8003f7e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003f82:	440b      	add	r3, r1
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	ed93 7a00 	vldr	s14, [r3]
 8003f8c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f90:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8003f94:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003f98:	0059      	lsls	r1, r3, #1
 8003f9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f9e:	440b      	add	r3, r1
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	edd3 6a00 	vldr	s13, [r3]
 8003fa8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fac:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8003fb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fb4:	0059      	lsls	r1, r3, #1
 8003fb6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003fba:	440b      	add	r3, r1
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	edd3 7a00 	vldr	s15, [r3]
 8003fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fcc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fd0:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8003fd4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003fd8:	0059      	lsls	r1, r3, #1
 8003fda:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003fde:	440b      	add	r3, r1
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8003fe8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fec:	3301      	adds	r3, #1
 8003fee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ff2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	ddba      	ble.n	8003f70 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 8003ffa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003ffe:	3301      	adds	r3, #1
 8004000:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004004:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004008:	2b01      	cmp	r3, #1
 800400a:	dd9e      	ble.n	8003f4a <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 800400c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004010:	3301      	adds	r3, #1
 8004012:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004016:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800401a:	2b02      	cmp	r3, #2
 800401c:	dd91      	ble.n	8003f42 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004024:	e042      	b.n	80040ac <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800402c:	e035      	b.n	800409a <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 800402e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004032:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	ed93 7a00 	vldr	s14, [r3]
 8004044:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004048:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800404c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004050:	0059      	lsls	r1, r3, #1
 8004052:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004056:	440b      	add	r3, r1
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	edd3 6a00 	vldr	s13, [r3]
 8004060:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800406a:	443b      	add	r3, r7
 800406c:	3be0      	subs	r3, #224	@ 0xe0
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800407a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800407e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004090:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004094:	3301      	adds	r3, #1
 8004096:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800409a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800409e:	2b01      	cmp	r3, #1
 80040a0:	ddc5      	ble.n	800402e <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80040a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80040a6:	3301      	adds	r3, #1
 80040a8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80040ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	ddb8      	ble.n	8004026 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80040b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80040bc:	4618      	mov	r0, r3
 80040be:	2324      	movs	r3, #36	@ 0x24
 80040c0:	461a      	mov	r2, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	f008 ff5f 	bl	800cf86 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80040c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040cc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80040d0:	4618      	mov	r0, r3
 80040d2:	2324      	movs	r3, #36	@ 0x24
 80040d4:	461a      	mov	r2, r3
 80040d6:	2100      	movs	r1, #0
 80040d8:	f008 ff55 	bl	800cf86 <memset>

        for (int i = 0; i < 3; i++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80040e2:	e09e      	b.n	8004222 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80040ea:	e090      	b.n	800420e <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 80040ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040f0:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80040f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004114:	e045      	b.n	80041a2 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 8004116:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800411a:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800411e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	ed93 7a00 	vldr	s14, [r3]
 8004136:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800413a:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800413e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004142:	0059      	lsls	r1, r3, #1
 8004144:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004148:	440b      	add	r3, r1
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	edd3 6a00 	vldr	s13, [r3]
 8004152:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004168:	443b      	add	r3, r7
 800416a:	3bd0      	subs	r3, #208	@ 0xd0
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004178:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800417c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004180:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004198:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800419c:	3301      	adds	r3, #1
 800419e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80041a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	ddb5      	ble.n	8004116 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80041aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d102      	bne.n	80041bc <KalmanFilter_MeasurementUpdate+0xcac>
 80041b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ba:	e001      	b.n	80041c0 <KalmanFilter_MeasurementUpdate+0xcb0>
 80041bc:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80043ac <KalmanFilter_MeasurementUpdate+0xe9c>
 80041c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c4:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80041c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	edd3 7a00 	vldr	s15, [r3]
 80041e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041e8:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80041ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004204:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004208:	3301      	adds	r3, #1
 800420a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800420e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004212:	2b02      	cmp	r3, #2
 8004214:	f77f af6a 	ble.w	80040ec <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004218:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800421c:	3301      	adds	r3, #1
 800421e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004222:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004226:	2b02      	cmp	r3, #2
 8004228:	f77f af5c 	ble.w	80040e4 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004232:	e076      	b.n	8004322 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800423a:	e069      	b.n	8004310 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 800423c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004240:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004244:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004264:	e04b      	b.n	80042fe <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8004266:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800426a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800426e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	ed93 7a00 	vldr	s14, [r3]
 8004286:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800428a:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800428e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	edd3 6a00 	vldr	s13, [r3]
 80042a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042aa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80042be:	4413      	add	r3, r2
 80042c0:	3302      	adds	r3, #2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3304      	adds	r3, #4
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042d8:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80042dc:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80042f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80042f8:	3301      	adds	r3, #1
 80042fa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80042fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004302:	2b02      	cmp	r3, #2
 8004304:	ddaf      	ble.n	8004266 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 8004306:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800430a:	3301      	adds	r3, #1
 800430c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004310:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004314:	2b02      	cmp	r3, #2
 8004316:	dd91      	ble.n	800423c <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004318:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800431c:	3301      	adds	r3, #1
 800431e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004322:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004326:	2b02      	cmp	r3, #2
 8004328:	dd84      	ble.n	8004234 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800432a:	2300      	movs	r3, #0
 800432c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004330:	e032      	b.n	8004398 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004338:	e025      	b.n	8004386 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 800433a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800433e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004342:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004346:	4613      	mov	r3, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	4413      	add	r3, r2
 800434c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800435c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004370:	4413      	add	r3, r2
 8004372:	3302      	adds	r3, #2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4403      	add	r3, r0
 8004378:	3304      	adds	r3, #4
 800437a:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 800437c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004380:	3301      	adds	r3, #1
 8004382:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004386:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800438a:	2b02      	cmp	r3, #2
 800438c:	ddd5      	ble.n	800433a <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 800438e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004392:	3301      	adds	r3, #1
 8004394:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004398:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800439c:	2b02      	cmp	r3, #2
 800439e:	ddc8      	ble.n	8004332 <KalmanFilter_MeasurementUpdate+0xe22>
 80043a0:	e000      	b.n	80043a4 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80043a2:	bf00      	nop
            }
        }
    }
}
 80043a4:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bdb0      	pop	{r4, r5, r7, pc}
 80043ac:	00000000 	.word	0x00000000

080043b0 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80043be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c6:	d517      	bpl.n	80043f8 <KalmanFilter_DetectApogee+0x48>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80043d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043dc:	d50c      	bpl.n	80043f8 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	dd06      	ble.n	80043fe <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 80043f6:	e002      	b.n	80043fe <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004436:	f003 f9f7 	bl	8007828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800443a:	f000 f8bd 	bl	80045b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800443e:	f000 fa4d 	bl	80048dc <MX_GPIO_Init>
  MX_DMA_Init();
 8004442:	f000 fa23 	bl	800488c <MX_DMA_Init>
  MX_I2C1_Init();
 8004446:	f000 f923 	bl	8004690 <MX_I2C1_Init>
  MX_I2C3_Init();
 800444a:	f000 f94f 	bl	80046ec <MX_I2C3_Init>
  MX_TIM2_Init();
 800444e:	f000 f97b 	bl	8004748 <MX_TIM2_Init>
  MX_UART5_Init();
 8004452:	f000 f9c7 	bl	80047e4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004456:	f000 f9ef 	bl	8004838 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	MX_TIM2_Init();
 800445a:	f000 f975 	bl	8004748 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800445e:	4849      	ldr	r0, [pc, #292]	@ (8004584 <main+0x154>)
 8004460:	f006 f8d2 	bl	800a608 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004464:	2200      	movs	r2, #0
 8004466:	2102      	movs	r1, #2
 8004468:	201c      	movs	r0, #28
 800446a:	f003 fb4e 	bl	8007b0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800446e:	201c      	movs	r0, #28
 8004470:	f003 fb67 	bl	8007b42 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004474:	2200      	movs	r2, #0
 8004476:	2100      	movs	r1, #0
 8004478:	2028      	movs	r0, #40	@ 0x28
 800447a:	f003 fb46 	bl	8007b0a <HAL_NVIC_SetPriority>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800447e:	2201      	movs	r2, #1
 8004480:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004484:	4840      	ldr	r0, [pc, #256]	@ (8004588 <main+0x158>)
 8004486:	f004 fa01 	bl	800888c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800448a:	200a      	movs	r0, #10
 800448c:	f003 fa3e 	bl	800790c <HAL_Delay>
	bme280_begin();
 8004490:	f000 fab8 	bl	8004a04 <bme280_begin>
	bmi088_begin();
 8004494:	f000 face 	bl	8004a34 <bmi088_begin>
	HAL_Delay(1000);
 8004498:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800449c:	f003 fa36 	bl	800790c <HAL_Delay>
	bme280_config();
 80044a0:	f7fc ff9c 	bl	80013dc <bme280_config>
	bmi088_config();
 80044a4:	f7fd fd7e 	bl	8001fa4 <bmi088_config>
	if(is_BMI_ok){
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <main+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <main+0x84>
		  getOffset();
 80044b0:	f7fe fb72 	bl	8002b98 <getOffset>
	}

	bme280_update();
 80044b4:	f7fd f94e 	bl	8001754 <bme280_update>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80044b8:	2028      	movs	r0, #40	@ 0x28
 80044ba:	f003 fb42 	bl	8007b42 <HAL_NVIC_EnableIRQ>
	BMI_sensor.rawDatas.isGyroUpdated = 0;
 80044be:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <main+0x160>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	755a      	strb	r2, [r3, #21]
	BMI_sensor.rawDatas.isAccelUpdated = 0;
 80044c4:	4b32      	ldr	r3, [pc, #200]	@ (8004590 <main+0x160>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	759a      	strb	r2, [r3, #22]

	getInitialQuaternion();
 80044ca:	f001 ffcd 	bl	8006468 <getInitialQuaternion>

	//Lora Ayarı
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);

	sensor_fusion_init(&BME280_sensor);
 80044ce:	4831      	ldr	r0, [pc, #196]	@ (8004594 <main+0x164>)
 80044d0:	f002 fa4c 	bl	800696c <sensor_fusion_init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, 36);
 80044d4:	2224      	movs	r2, #36	@ 0x24
 80044d6:	4930      	ldr	r1, [pc, #192]	@ (8004598 <main+0x168>)
 80044d8:	4830      	ldr	r0, [pc, #192]	@ (800459c <main+0x16c>)
 80044da:	f006 fe0d 	bl	800b0f8 <HAL_UARTEx_ReceiveToIdle_DMA>
	flight_algorithm_set_parameters(50.0,2000.0,500.0,60.0);
 80044de:	eddf 1a30 	vldr	s3, [pc, #192]	@ 80045a0 <main+0x170>
 80044e2:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 80045a4 <main+0x174>
 80044e6:	eddf 0a30 	vldr	s1, [pc, #192]	@ 80045a8 <main+0x178>
 80044ea:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80045ac <main+0x17c>
 80044ee:	f7fe fd31 	bl	8002f54 <flight_algorithm_set_parameters>


	uart_handler_init();
 80044f2:	f002 ffd7 	bl	80074a4 <uart_handler_init>
	flight_algorithm_init();
 80044f6:	f7fe fbd9 	bl	8002cac <flight_algorithm_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	bmi088_update();
 80044fa:	f7fd ff99 	bl	8002430 <bmi088_update>
		  sensor_fusion_update_mahony(&BMI_sensor, &sensor_output);
 80044fe:	492c      	ldr	r1, [pc, #176]	@ (80045b0 <main+0x180>)
 8004500:	4823      	ldr	r0, [pc, #140]	@ (8004590 <main+0x160>)
 8004502:	f002 fb51 	bl	8006ba8 <sensor_fusion_update_mahony>
		  bme280_update();
 8004506:	f7fd f925 	bl	8001754 <bme280_update>

		  // Process UART packets and handle mode changes
		  uart_handler_process_packets();
 800450a:	f002 ffe5 	bl	80074d8 <uart_handler_process_packets>

		  // Clear command flag if it was set
		  if (uart_handler_command_ready()) {
 800450e:	f003 f8e1 	bl	80076d4 <uart_handler_command_ready>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <main+0xfa>
			  uart_handler_clear_command_flag();
 8004518:	f003 f90a 	bl	8007730 <uart_handler_clear_command_flag>
			  // Reset flight algorithm if switching to NORMAL mode
			  if (uart_handler_get_mode() == MODE_NORMAL) {
 800451c:	f003 f8ce 	bl	80076bc <uart_handler_get_mode>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <main+0xfa>
				  flight_algorithm_reset();
 8004526:	f7fe fbc7 	bl	8002cb8 <flight_algorithm_reset>
			  }
		  }

		  if (tx_timer_flag) {
 800452a:	4b22      	ldr	r3, [pc, #136]	@ (80045b4 <main+0x184>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0e2      	beq.n	80044fa <main+0xca>
			tx_timer_flag = 0;
 8004534:	4b1f      	ldr	r3, [pc, #124]	@ (80045b4 <main+0x184>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
			IMU_visual();
 800453a:	f000 fb27 	bl	8004b8c <IMU_visual>
			SystemMode_t current_mode = uart_handler_get_mode();
 800453e:	f003 f8bd 	bl	80076bc <uart_handler_get_mode>
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]

				switch (current_mode) {
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d016      	beq.n	800457a <main+0x14a>
 800454c:	2b02      	cmp	r3, #2
 800454e:	dcd4      	bgt.n	80044fa <main+0xca>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <main+0x12a>
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00b      	beq.n	8004570 <main+0x140>
 8004558:	e012      	b.n	8004580 <main+0x150>
					case MODE_NORMAL:
						sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 800455a:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <main+0x180>)
 800455c:	490c      	ldr	r1, [pc, #48]	@ (8004590 <main+0x160>)
 800455e:	480d      	ldr	r0, [pc, #52]	@ (8004594 <main+0x164>)
 8004560:	f002 fa5a 	bl	8006a18 <sensor_fusion_update_kalman>
						flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004564:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <main+0x180>)
 8004566:	490a      	ldr	r1, [pc, #40]	@ (8004590 <main+0x160>)
 8004568:	480a      	ldr	r0, [pc, #40]	@ (8004594 <main+0x164>)
 800456a:	f7fe fbdf 	bl	8002d2c <flight_algorithm_update>
						break;
 800456e:	e007      	b.n	8004580 <main+0x150>

					case MODE_SIT:
						test_modes_handle_sit(&BME280_sensor, &BMI_sensor);
 8004570:	4907      	ldr	r1, [pc, #28]	@ (8004590 <main+0x160>)
 8004572:	4808      	ldr	r0, [pc, #32]	@ (8004594 <main+0x164>)
 8004574:	f002 feb8 	bl	80072e8 <test_modes_handle_sit>
						break;
 8004578:	e002      	b.n	8004580 <main+0x150>

					case MODE_SUT:
						algorithm_update_sut();
 800457a:	f002 fecd 	bl	8007318 <algorithm_update_sut>
						break;
 800457e:	bf00      	nop
	bmi088_update();
 8004580:	e7bb      	b.n	80044fa <main+0xca>
 8004582:	bf00      	nop
 8004584:	20000354 	.word	0x20000354
 8004588:	40020400 	.word	0x40020400
 800458c:	20000738 	.word	0x20000738
 8004590:	20000530 	.word	0x20000530
 8004594:	200004ec 	.word	0x200004ec
 8004598:	2000066c 	.word	0x2000066c
 800459c:	200003e4 	.word	0x200003e4
 80045a0:	42700000 	.word	0x42700000
 80045a4:	43fa0000 	.word	0x43fa0000
 80045a8:	44fa0000 	.word	0x44fa0000
 80045ac:	42480000 	.word	0x42480000
 80045b0:	20000640 	.word	0x20000640
 80045b4:	20000740 	.word	0x20000740

080045b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b094      	sub	sp, #80	@ 0x50
 80045bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045be:	f107 031c 	add.w	r3, r7, #28
 80045c2:	2234      	movs	r2, #52	@ 0x34
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f008 fcdd 	bl	800cf86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045dc:	2300      	movs	r3, #0
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	4b29      	ldr	r3, [pc, #164]	@ (8004688 <SystemClock_Config+0xd0>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	4a28      	ldr	r2, [pc, #160]	@ (8004688 <SystemClock_Config+0xd0>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ec:	4b26      	ldr	r3, [pc, #152]	@ (8004688 <SystemClock_Config+0xd0>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045f8:	2300      	movs	r3, #0
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4b23      	ldr	r3, [pc, #140]	@ (800468c <SystemClock_Config+0xd4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a22      	ldr	r2, [pc, #136]	@ (800468c <SystemClock_Config+0xd4>)
 8004602:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b20      	ldr	r3, [pc, #128]	@ (800468c <SystemClock_Config+0xd4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004614:	2301      	movs	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800461c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800461e:	2302      	movs	r3, #2
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004628:	2308      	movs	r3, #8
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800462c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004630:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004632:	2302      	movs	r3, #2
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004636:	2302      	movs	r3, #2
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800463a:	2302      	movs	r3, #2
 800463c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800463e:	f107 031c 	add.w	r3, r7, #28
 8004642:	4618      	mov	r0, r3
 8004644:	f005 fcf2 	bl	800a02c <HAL_RCC_OscConfig>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800464e:	f000 fb3f 	bl	8004cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004652:	230f      	movs	r3, #15
 8004654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004656:	2302      	movs	r3, #2
 8004658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800465e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004668:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800466a:	f107 0308 	add.w	r3, r7, #8
 800466e:	2105      	movs	r1, #5
 8004670:	4618      	mov	r0, r3
 8004672:	f005 f991 	bl	8009998 <HAL_RCC_ClockConfig>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800467c:	f000 fb28 	bl	8004cd0 <Error_Handler>
  }
}
 8004680:	bf00      	nop
 8004682:	3750      	adds	r7, #80	@ 0x50
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	40007000 	.word	0x40007000

08004690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004694:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <MX_I2C1_Init+0x50>)
 8004696:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <MX_I2C1_Init+0x54>)
 8004698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800469a:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <MX_I2C1_Init+0x50>)
 800469c:	4a12      	ldr	r2, [pc, #72]	@ (80046e8 <MX_I2C1_Init+0x58>)
 800469e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80046a6:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80046b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80046ba:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046bc:	2200      	movs	r2, #0
 80046be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046cc:	4804      	ldr	r0, [pc, #16]	@ (80046e0 <MX_I2C1_Init+0x50>)
 80046ce:	f004 f90f 	bl	80088f0 <HAL_I2C_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80046d8:	f000 fafa 	bl	8004cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	200002ac 	.word	0x200002ac
 80046e4:	40005400 	.word	0x40005400
 80046e8:	000186a0 	.word	0x000186a0

080046ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80046f0:	4b12      	ldr	r3, [pc, #72]	@ (800473c <MX_I2C3_Init+0x50>)
 80046f2:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <MX_I2C3_Init+0x54>)
 80046f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80046f6:	4b11      	ldr	r3, [pc, #68]	@ (800473c <MX_I2C3_Init+0x50>)
 80046f8:	4a12      	ldr	r2, [pc, #72]	@ (8004744 <MX_I2C3_Init+0x58>)
 80046fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <MX_I2C3_Init+0x50>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004702:	4b0e      	ldr	r3, [pc, #56]	@ (800473c <MX_I2C3_Init+0x50>)
 8004704:	2200      	movs	r2, #0
 8004706:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <MX_I2C3_Init+0x50>)
 800470a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800470e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004710:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <MX_I2C3_Init+0x50>)
 8004712:	2200      	movs	r2, #0
 8004714:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <MX_I2C3_Init+0x50>)
 8004718:	2200      	movs	r2, #0
 800471a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800471c:	4b07      	ldr	r3, [pc, #28]	@ (800473c <MX_I2C3_Init+0x50>)
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <MX_I2C3_Init+0x50>)
 8004724:	2200      	movs	r2, #0
 8004726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004728:	4804      	ldr	r0, [pc, #16]	@ (800473c <MX_I2C3_Init+0x50>)
 800472a:	f004 f8e1 	bl	80088f0 <HAL_I2C_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004734:	f000 facc 	bl	8004cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000300 	.word	0x20000300
 8004740:	40005c00 	.word	0x40005c00
 8004744:	000186a0 	.word	0x000186a0

08004748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]
 800475a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800475c:	463b      	mov	r3, r7
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004764:	4b1e      	ldr	r3, [pc, #120]	@ (80047e0 <MX_TIM2_Init+0x98>)
 8004766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800476a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 800476c:	4b1c      	ldr	r3, [pc, #112]	@ (80047e0 <MX_TIM2_Init+0x98>)
 800476e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8004772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004774:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <MX_TIM2_Init+0x98>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <MX_TIM2_Init+0x98>)
 800477c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004782:	4b17      	ldr	r3, [pc, #92]	@ (80047e0 <MX_TIM2_Init+0x98>)
 8004784:	2200      	movs	r2, #0
 8004786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004788:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <MX_TIM2_Init+0x98>)
 800478a:	2200      	movs	r2, #0
 800478c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800478e:	4814      	ldr	r0, [pc, #80]	@ (80047e0 <MX_TIM2_Init+0x98>)
 8004790:	f005 feea 	bl	800a568 <HAL_TIM_Base_Init>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800479a:	f000 fa99 	bl	8004cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800479e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047a4:	f107 0308 	add.w	r3, r7, #8
 80047a8:	4619      	mov	r1, r3
 80047aa:	480d      	ldr	r0, [pc, #52]	@ (80047e0 <MX_TIM2_Init+0x98>)
 80047ac:	f006 f88c 	bl	800a8c8 <HAL_TIM_ConfigClockSource>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80047b6:	f000 fa8b 	bl	8004cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047c2:	463b      	mov	r3, r7
 80047c4:	4619      	mov	r1, r3
 80047c6:	4806      	ldr	r0, [pc, #24]	@ (80047e0 <MX_TIM2_Init+0x98>)
 80047c8:	f006 faae 	bl	800ad28 <HAL_TIMEx_MasterConfigSynchronization>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80047d2:	f000 fa7d 	bl	8004cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000354 	.word	0x20000354

080047e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <MX_UART5_Init+0x4c>)
 80047ea:	4a12      	ldr	r2, [pc, #72]	@ (8004834 <MX_UART5_Init+0x50>)
 80047ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80047ee:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <MX_UART5_Init+0x4c>)
 80047f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80047f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004830 <MX_UART5_Init+0x4c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80047fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <MX_UART5_Init+0x4c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <MX_UART5_Init+0x4c>)
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004808:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <MX_UART5_Init+0x4c>)
 800480a:	220c      	movs	r2, #12
 800480c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800480e:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <MX_UART5_Init+0x4c>)
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004814:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <MX_UART5_Init+0x4c>)
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800481a:	4805      	ldr	r0, [pc, #20]	@ (8004830 <MX_UART5_Init+0x4c>)
 800481c:	f006 fb14 	bl	800ae48 <HAL_UART_Init>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004826:	f000 fa53 	bl	8004cd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	2000039c 	.word	0x2000039c
 8004834:	40005000 	.word	0x40005000

08004838 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800483c:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 800483e:	4a12      	ldr	r2, [pc, #72]	@ (8004888 <MX_USART1_UART_Init+0x50>)
 8004840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004842:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 8004844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 800484c:	2200      	movs	r2, #0
 800484e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 8004858:	2200      	movs	r2, #0
 800485a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800485c:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 800485e:	220c      	movs	r2, #12
 8004860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 8004864:	2200      	movs	r2, #0
 8004866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004868:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 800486a:	2200      	movs	r2, #0
 800486c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800486e:	4805      	ldr	r0, [pc, #20]	@ (8004884 <MX_USART1_UART_Init+0x4c>)
 8004870:	f006 faea 	bl	800ae48 <HAL_UART_Init>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800487a:	f000 fa29 	bl	8004cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200003e4 	.word	0x200003e4
 8004888:	40011000 	.word	0x40011000

0800488c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	4b10      	ldr	r3, [pc, #64]	@ (80048d8 <MX_DMA_Init+0x4c>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	4a0f      	ldr	r2, [pc, #60]	@ (80048d8 <MX_DMA_Init+0x4c>)
 800489c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048a2:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <MX_DMA_Init+0x4c>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	203a      	movs	r0, #58	@ 0x3a
 80048b4:	f003 f929 	bl	8007b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80048b8:	203a      	movs	r0, #58	@ 0x3a
 80048ba:	f003 f942 	bl	8007b42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	2046      	movs	r0, #70	@ 0x46
 80048c4:	f003 f921 	bl	8007b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80048c8:	2046      	movs	r0, #70	@ 0x46
 80048ca:	f003 f93a 	bl	8007b42 <HAL_NVIC_EnableIRQ>

}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800

080048dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	@ 0x28
 80048e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e2:	f107 0314 	add.w	r3, r7, #20
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	4b40      	ldr	r3, [pc, #256]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	4a3f      	ldr	r2, [pc, #252]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 80048fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004900:	6313      	str	r3, [r2, #48]	@ 0x30
 8004902:	4b3d      	ldr	r3, [pc, #244]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	4b39      	ldr	r3, [pc, #228]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	4a38      	ldr	r2, [pc, #224]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	6313      	str	r3, [r2, #48]	@ 0x30
 800491e:	4b36      	ldr	r3, [pc, #216]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	4b32      	ldr	r3, [pc, #200]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	4a31      	ldr	r2, [pc, #196]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004934:	f043 0304 	orr.w	r3, r3, #4
 8004938:	6313      	str	r3, [r2, #48]	@ 0x30
 800493a:	4b2f      	ldr	r3, [pc, #188]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	4b2b      	ldr	r3, [pc, #172]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	4a2a      	ldr	r2, [pc, #168]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6313      	str	r3, [r2, #48]	@ 0x30
 8004956:	4b28      	ldr	r3, [pc, #160]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	4a23      	ldr	r2, [pc, #140]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 800496c:	f043 0308 	orr.w	r3, r3, #8
 8004970:	6313      	str	r3, [r2, #48]	@ 0x30
 8004972:	4b21      	ldr	r3, [pc, #132]	@ (80049f8 <MX_GPIO_Init+0x11c>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800497e:	2200      	movs	r2, #0
 8004980:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004984:	481d      	ldr	r0, [pc, #116]	@ (80049fc <MX_GPIO_Init+0x120>)
 8004986:	f003 ff81 	bl	800888c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800498a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800498e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004990:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	4619      	mov	r1, r3
 80049a0:	4816      	ldr	r0, [pc, #88]	@ (80049fc <MX_GPIO_Init+0x120>)
 80049a2:	f003 fceb 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80049a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ac:	2301      	movs	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b8:	f107 0314 	add.w	r3, r7, #20
 80049bc:	4619      	mov	r1, r3
 80049be:	480f      	ldr	r0, [pc, #60]	@ (80049fc <MX_GPIO_Init+0x120>)
 80049c0:	f003 fcdc 	bl	800837c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d4:	f107 0314 	add.w	r3, r7, #20
 80049d8:	4619      	mov	r1, r3
 80049da:	4809      	ldr	r0, [pc, #36]	@ (8004a00 <MX_GPIO_Init+0x124>)
 80049dc:	f003 fcce 	bl	800837c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	2100      	movs	r1, #0
 80049e4:	2028      	movs	r0, #40	@ 0x28
 80049e6:	f003 f890 	bl	8007b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049ea:	2028      	movs	r0, #40	@ 0x28
 80049ec:	f003 f8a9 	bl	8007b42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80049f0:	bf00      	nop
 80049f2:	3728      	adds	r7, #40	@ 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40020400 	.word	0x40020400
 8004a00:	40020000 	.word	0x40020000

08004a04 <bme280_begin>:

/* USER CODE BEGIN 4 */
void bme280_begin()
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
	BME280_sensor.device_config.bme280_filter = 			BME280_FILTER_8;
 8004a08:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <bme280_begin+0x28>)
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	711a      	strb	r2, [r3, #4]
	BME280_sensor.device_config.bme280_mode =				BME280_MODE_NORMAL;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <bme280_begin+0x28>)
 8004a10:	2203      	movs	r2, #3
 8004a12:	715a      	strb	r2, [r3, #5]
	BME280_sensor.device_config.bme280_output_speed =		BME280_OS_8;
 8004a14:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <bme280_begin+0x28>)
 8004a16:	2204      	movs	r2, #4
 8004a18:	719a      	strb	r2, [r3, #6]
	BME280_sensor.device_config.bme280_standby_time = 		BME280_STBY_20;
 8004a1a:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <bme280_begin+0x28>)
 8004a1c:	2207      	movs	r2, #7
 8004a1e:	71da      	strb	r2, [r3, #7]
	bme280_init(&BME280_sensor, &hi2c1);
 8004a20:	4903      	ldr	r1, [pc, #12]	@ (8004a30 <bme280_begin+0x2c>)
 8004a22:	4802      	ldr	r0, [pc, #8]	@ (8004a2c <bme280_begin+0x28>)
 8004a24:	f7fc fe5e 	bl	80016e4 <bme280_init>

}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200004ec 	.word	0x200004ec
 8004a30:	200002ac 	.word	0x200002ac

08004a34 <bmi088_begin>:

void bmi088_begin()
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
	//Acccel config
	BMI_sensor.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 8004a38:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	765a      	strb	r2, [r3, #25]
	BMI_sensor.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a40:	2209      	movs	r2, #9
 8004a42:	769a      	strb	r2, [r3, #26]
	BMI_sensor.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8004a44:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	75da      	strb	r2, [r3, #23]
	BMI_sensor.deviceConfig.acc_range = ACC_RANGE_12G;
 8004a4a:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	761a      	strb	r2, [r3, #24]

	//Gyro config
	BMI_sensor.deviceConfig.gyro_bandWidth = GYRO_BW_116;
 8004a50:	4b07      	ldr	r3, [pc, #28]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a52:	2202      	movs	r2, #2
 8004a54:	771a      	strb	r2, [r3, #28]
	BMI_sensor.deviceConfig.gyro_range = GYRO_RANGE_2000;
 8004a56:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	775a      	strb	r2, [r3, #29]
	BMI_sensor.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	76da      	strb	r2, [r3, #27]
	bmi088_init(&BMI_sensor, &hi2c3);
 8004a62:	4904      	ldr	r1, [pc, #16]	@ (8004a74 <bmi088_begin+0x40>)
 8004a64:	4802      	ldr	r0, [pc, #8]	@ (8004a70 <bmi088_begin+0x3c>)
 8004a66:	f7fd fc87 	bl	8002378 <bmi088_init>
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000530 	.word	0x20000530
 8004a74:	20000300 	.word	0x20000300

08004a78 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13)
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_EXTI_Callback+0x16>
    {
    	bmi088_getGyroDatas_INT();
 8004a8a:	f7fe f877 	bl	8002b7c <bmi088_getGyroDatas_INT>
    }
    if(GPIO_Pin == GPIO_PIN_12)
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a94:	d101      	bne.n	8004a9a <HAL_GPIO_EXTI_Callback+0x22>
    {
    	bmi088_getAccelDatas_INT();
 8004a96:	f7fe f863 	bl	8002b60 <bmi088_getAccelDatas_INT>
    }
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8004aec <HAL_UARTEx_RxEventCallback+0x48>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d114      	bne.n	8004ae4 <HAL_UARTEx_RxEventCallback+0x40>
        usart1_packet_ready = 1;
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
        usart1_packet_size = Size;
 8004ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8004af4 <HAL_UARTEx_RxEventCallback+0x50>)
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	8013      	strh	r3, [r2, #0]
        // RX DMA'yı tekrar başlat
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, usart1_rx_buffer, sizeof(usart1_rx_buffer));
 8004ac6:	2224      	movs	r2, #36	@ 0x24
 8004ac8:	490b      	ldr	r1, [pc, #44]	@ (8004af8 <HAL_UARTEx_RxEventCallback+0x54>)
 8004aca:	480c      	ldr	r0, [pc, #48]	@ (8004afc <HAL_UARTEx_RxEventCallback+0x58>)
 8004acc:	f006 fb14 	bl	800b0f8 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT); // Half-transfer interrupt'ı devre dışı bırak
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <HAL_UARTEx_RxEventCallback+0x58>)
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <HAL_UARTEx_RxEventCallback+0x58>)
 8004ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0208 	bic.w	r2, r2, #8
 8004ae2:	601a      	str	r2, [r3, #0]
    }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40011000 	.word	0x40011000
 8004af0:	2000073c 	.word	0x2000073c
 8004af4:	2000073e 	.word	0x2000073e
 8004af8:	2000066c 	.word	0x2000066c
 8004afc:	200003e4 	.word	0x200003e4

08004b00 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b10:	d102      	bne.n	8004b18 <HAL_TIM_PeriodElapsedCallback+0x18>
        tx_timer_flag = 1;
 8004b12:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
    }
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	20000740 	.word	0x20000740

08004b28 <HAL_UART_TxCpltCallback>:

// USART1 TX DMA tamam callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a05      	ldr	r2, [pc, #20]	@ (8004b4c <HAL_UART_TxCpltCallback+0x24>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d102      	bne.n	8004b40 <HAL_UART_TxCpltCallback+0x18>
        usart1_tx_busy = 0;
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_UART_TxCpltCallback+0x28>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
    }
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	20000741 	.word	0x20000741

08004b54 <uart1_send_packet_dma>:

// USART1 TX DMA başlatma fonksiyonu
void uart1_send_packet_dma(uint8_t *data, uint16_t size)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
    if (!usart1_tx_busy) {
 8004b60:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <uart1_send_packet_dma+0x30>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <uart1_send_packet_dma+0x28>
        usart1_tx_busy = 1;
 8004b6a:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <uart1_send_packet_dma+0x30>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart1, data, size);
 8004b70:	887b      	ldrh	r3, [r7, #2]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4804      	ldr	r0, [pc, #16]	@ (8004b88 <uart1_send_packet_dma+0x34>)
 8004b78:	f006 fa42 	bl	800b000 <HAL_UART_Transmit_DMA>
    }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000741 	.word	0x20000741
 8004b88:	200003e4 	.word	0x200003e4

08004b8c <IMU_visual>:

void IMU_visual(){
 8004b8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b90:	b08a      	sub	sp, #40	@ 0x28
 8004b92:	af04      	add	r7, sp, #16

	float yaw = BME280_sensor.altitude;
 8004b94:	4b44      	ldr	r3, [pc, #272]	@ (8004ca8 <IMU_visual+0x11c>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	617b      	str	r3, [r7, #20]
	float pitch = BMI_sensor.angleY;
 8004b9a:	4b44      	ldr	r3, [pc, #272]	@ (8004cac <IMU_visual+0x120>)
 8004b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ba0:	613b      	str	r3, [r7, #16]
	float roll = BMI_sensor.roll;
 8004ba2:	4b42      	ldr	r3, [pc, #264]	@ (8004cac <IMU_visual+0x120>)
 8004ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ba8:	60fb      	str	r3, [r7, #12]
	float yaw1 = BMI_sensor.gyro_x;
 8004baa:	4b40      	ldr	r3, [pc, #256]	@ (8004cac <IMU_visual+0x120>)
 8004bac:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f7fc f818 	bl	8000be8 <__aeabi_d2f>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	60bb      	str	r3, [r7, #8]
	float pitch1 = BMI_sensor.acc_z;
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <IMU_visual+0x120>)
 8004bbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004bc2:	607b      	str	r3, [r7, #4]
	float roll1 = BMI_sensor.roll1;
 8004bc4:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <IMU_visual+0x120>)
 8004bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004bca:	603b      	str	r3, [r7, #0]

	sprintf(uart_buffer, "A1 %.2f %.2f %.2f\r", yaw, pitch, roll);
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7fb fcdb 	bl	8000588 <__aeabi_f2d>
 8004bd2:	4680      	mov	r8, r0
 8004bd4:	4689      	mov	r9, r1
 8004bd6:	6938      	ldr	r0, [r7, #16]
 8004bd8:	f7fb fcd6 	bl	8000588 <__aeabi_f2d>
 8004bdc:	4604      	mov	r4, r0
 8004bde:	460d      	mov	r5, r1
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7fb fcd1 	bl	8000588 <__aeabi_f2d>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bee:	e9cd 4500 	strd	r4, r5, [sp]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	492e      	ldr	r1, [pc, #184]	@ (8004cb0 <IMU_visual+0x124>)
 8004bf8:	482e      	ldr	r0, [pc, #184]	@ (8004cb4 <IMU_visual+0x128>)
 8004bfa:	f008 f951 	bl	800cea0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004bfe:	482d      	ldr	r0, [pc, #180]	@ (8004cb4 <IMU_visual+0x128>)
 8004c00:	f7fb fb56 	bl	80002b0 <strlen>
 8004c04:	4603      	mov	r3, r0
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	2364      	movs	r3, #100	@ 0x64
 8004c0a:	492a      	ldr	r1, [pc, #168]	@ (8004cb4 <IMU_visual+0x128>)
 8004c0c:	482a      	ldr	r0, [pc, #168]	@ (8004cb8 <IMU_visual+0x12c>)
 8004c0e:	f006 f96b 	bl	800aee8 <HAL_UART_Transmit>

	sprintf(uart_buffer, "A2 %.2f %.2f %.2f\r\n", yaw1, pitch1, roll1);
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	f7fb fcb8 	bl	8000588 <__aeabi_f2d>
 8004c18:	4680      	mov	r8, r0
 8004c1a:	4689      	mov	r9, r1
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fb fcb3 	bl	8000588 <__aeabi_f2d>
 8004c22:	4604      	mov	r4, r0
 8004c24:	460d      	mov	r5, r1
 8004c26:	6838      	ldr	r0, [r7, #0]
 8004c28:	f7fb fcae 	bl	8000588 <__aeabi_f2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c34:	e9cd 4500 	strd	r4, r5, [sp]
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	491f      	ldr	r1, [pc, #124]	@ (8004cbc <IMU_visual+0x130>)
 8004c3e:	481d      	ldr	r0, [pc, #116]	@ (8004cb4 <IMU_visual+0x128>)
 8004c40:	f008 f92e 	bl	800cea0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004c44:	481b      	ldr	r0, [pc, #108]	@ (8004cb4 <IMU_visual+0x128>)
 8004c46:	f7fb fb33 	bl	80002b0 <strlen>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	2364      	movs	r3, #100	@ 0x64
 8004c50:	4918      	ldr	r1, [pc, #96]	@ (8004cb4 <IMU_visual+0x128>)
 8004c52:	4819      	ldr	r0, [pc, #100]	@ (8004cb8 <IMU_visual+0x12c>)
 8004c54:	f006 f948 	bl	800aee8 <HAL_UART_Transmit>

	sprintf(uart_buffer, "G %d\r", Gain);
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <IMU_visual+0x134>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4919      	ldr	r1, [pc, #100]	@ (8004cc4 <IMU_visual+0x138>)
 8004c60:	4814      	ldr	r0, [pc, #80]	@ (8004cb4 <IMU_visual+0x128>)
 8004c62:	f008 f91d 	bl	800cea0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004c66:	4813      	ldr	r0, [pc, #76]	@ (8004cb4 <IMU_visual+0x128>)
 8004c68:	f7fb fb22 	bl	80002b0 <strlen>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	2364      	movs	r3, #100	@ 0x64
 8004c72:	4910      	ldr	r1, [pc, #64]	@ (8004cb4 <IMU_visual+0x128>)
 8004c74:	4810      	ldr	r0, [pc, #64]	@ (8004cb8 <IMU_visual+0x12c>)
 8004c76:	f006 f937 	bl	800aee8 <HAL_UART_Transmit>

	sprintf(uart_buffer, "M %d\r", gyroOnlyMode);
 8004c7a:	4b13      	ldr	r3, [pc, #76]	@ (8004cc8 <IMU_visual+0x13c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4912      	ldr	r1, [pc, #72]	@ (8004ccc <IMU_visual+0x140>)
 8004c82:	480c      	ldr	r0, [pc, #48]	@ (8004cb4 <IMU_visual+0x128>)
 8004c84:	f008 f90c 	bl	800cea0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8004c88:	480a      	ldr	r0, [pc, #40]	@ (8004cb4 <IMU_visual+0x128>)
 8004c8a:	f7fb fb11 	bl	80002b0 <strlen>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	2364      	movs	r3, #100	@ 0x64
 8004c94:	4907      	ldr	r1, [pc, #28]	@ (8004cb4 <IMU_visual+0x128>)
 8004c96:	4808      	ldr	r0, [pc, #32]	@ (8004cb8 <IMU_visual+0x12c>)
 8004c98:	f006 f926 	bl	800aee8 <HAL_UART_Transmit>

}
 8004c9c:	bf00      	nop
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200004ec 	.word	0x200004ec
 8004cac:	20000530 	.word	0x20000530
 8004cb0:	080118a8 	.word	0x080118a8
 8004cb4:	20000690 	.word	0x20000690
 8004cb8:	200003e4 	.word	0x200003e4
 8004cbc:	080118bc 	.word	0x080118bc
 8004cc0:	200007b4 	.word	0x200007b4
 8004cc4:	080118d0 	.word	0x080118d0
 8004cc8:	200007b5 	.word	0x200007b5
 8004ccc:	080118d8 	.word	0x080118d8

08004cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd4:	b672      	cpsid	i
}
 8004cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <Error_Handler+0x8>

08004cdc <check_sum_hesapla_sit>:
        check_sum += normal_paket[i];
    }
    return (unsigned char) (check_sum % 256);
}

unsigned char check_sum_hesapla_sit(int a){
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	e00a      	b.n	8004d04 <check_sum_hesapla_sit+0x28>
        check_sum += sit_paket[i];
 8004cee:	4a0e      	ldr	r2, [pc, #56]	@ (8004d28 <check_sum_hesapla_sit+0x4c>)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	dbf0      	blt.n	8004cee <check_sum_hesapla_sit+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	425a      	negs	r2, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	bf58      	it	pl
 8004d16:	4253      	negpl	r3, r2
 8004d18:	b2db      	uxtb	r3, r3
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000744 	.word	0x20000744

08004d2c <round2>:

// Float değerleri iki ondalık basamağa yuvarlamak için yardımcı fonksiyon
double round2(double value) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	ed87 0b00 	vstr	d0, [r7]
    return round(value * 100.0) / 100.0;
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <round2+0x50>)
 8004d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d40:	f7fb fc7a 	bl	8000638 <__aeabi_dmul>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	ec43 2b17 	vmov	d7, r2, r3
 8004d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d50:	eef0 0a67 	vmov.f32	s1, s15
 8004d54:	f00a fc98 	bl	800f688 <round>
 8004d58:	ec51 0b10 	vmov	r0, r1, d0
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <round2+0x50>)
 8004d62:	f7fb fd93 	bl	800088c <__aeabi_ddiv>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004d72:	eef0 0a67 	vmov.f32	s1, s15
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40590000 	.word	0x40590000

08004d80 <addDataPacketSit>:
  normal_paket[56] = check_sum_hesapla_normal(56); // Check_sum = check_sum_hesapla();
  normal_paket[57] = 0x0D; // Sabit
  normal_paket[58] = 0x0A;
}

void addDataPacketSit(BME_280_t* BME, bmi088_struct_t* BMI){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	@ 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  sit_paket[0] = 0xAB; // Sabit
 8004d8a:	4b92      	ldr	r3, [pc, #584]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004d8c:	22ab      	movs	r2, #171	@ 0xab
 8004d8e:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (float)round2(BME->base_altitude + BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da0:	ee17 0a90 	vmov	r0, s15
 8004da4:	f7fb fbf0 	bl	8000588 <__aeabi_f2d>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	ec43 2b10 	vmov	d0, r2, r3
 8004db0:	f7ff ffbc 	bl	8004d2c <round2>
 8004db4:	ec53 2b10 	vmov	r2, r3, d0
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7fb ff14 	bl	8000be8 <__aeabi_d2f>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sit_paket[1] = irtifa_float32_uint8_donusturucu.array[3];
 8004dc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004dc8:	4b82      	ldr	r3, [pc, #520]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004dca:	705a      	strb	r2, [r3, #1]
  sit_paket[2] = irtifa_float32_uint8_donusturucu.array[2];
 8004dcc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004dd0:	4b80      	ldr	r3, [pc, #512]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004dd2:	709a      	strb	r2, [r3, #2]
  sit_paket[3] = irtifa_float32_uint8_donusturucu.array[1];
 8004dd4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004dda:	70da      	strb	r2, [r3, #3]
  sit_paket[4] = irtifa_float32_uint8_donusturucu.array[0];
 8004ddc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004de0:	4b7c      	ldr	r3, [pc, #496]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004de2:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (float)round2(BME->pressure); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fb fbcd 	bl	8000588 <__aeabi_f2d>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	ec43 2b10 	vmov	d0, r2, r3
 8004df6:	f7ff ff99 	bl	8004d2c <round2>
 8004dfa:	ec53 2b10 	vmov	r2, r3, d0
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fb fef1 	bl	8000be8 <__aeabi_d2f>
 8004e06:	4603      	mov	r3, r0
 8004e08:	623b      	str	r3, [r7, #32]
  sit_paket[5] = basinc_float32_uint8_donusturucu.array[3];
 8004e0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004e0e:	4b71      	ldr	r3, [pc, #452]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e10:	715a      	strb	r2, [r3, #5]
  sit_paket[6] = basinc_float32_uint8_donusturucu.array[2];
 8004e12:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8004e16:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e18:	719a      	strb	r2, [r3, #6]
  sit_paket[7] = basinc_float32_uint8_donusturucu.array[1];
 8004e1a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e20:	71da      	strb	r2, [r3, #7]
  sit_paket[8] = basinc_float32_uint8_donusturucu.array[0];
 8004e22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004e26:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e28:	721a      	strb	r2, [r3, #8]

  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
  ivme_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_x); // Ivme X degerinin atamasini yapiyoruz.
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fb fba9 	bl	8000588 <__aeabi_f2d>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	ec43 2b10 	vmov	d0, r2, r3
 8004e3e:	f7ff ff75 	bl	8004d2c <round2>
 8004e42:	ec53 2b10 	vmov	r2, r3, d0
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fb fecd 	bl	8000be8 <__aeabi_d2f>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	61fb      	str	r3, [r7, #28]
  sit_paket[9] = ivme_x_float32_uint8_donusturucu.array[3];
 8004e52:	7ffa      	ldrb	r2, [r7, #31]
 8004e54:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e56:	725a      	strb	r2, [r3, #9]
  sit_paket[10] = ivme_x_float32_uint8_donusturucu.array[2];
 8004e58:	7fba      	ldrb	r2, [r7, #30]
 8004e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e5c:	729a      	strb	r2, [r3, #10]
  sit_paket[11] = ivme_x_float32_uint8_donusturucu.array[1];
 8004e5e:	7f7a      	ldrb	r2, [r7, #29]
 8004e60:	4b5c      	ldr	r3, [pc, #368]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e62:	72da      	strb	r2, [r3, #11]
  sit_paket[12] = ivme_x_float32_uint8_donusturucu.array[0];
 8004e64:	7f3a      	ldrb	r2, [r7, #28]
 8004e66:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e68:	731a      	strb	r2, [r3, #12]

  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
  ivme_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fb fb89 	bl	8000588 <__aeabi_f2d>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	ec43 2b10 	vmov	d0, r2, r3
 8004e7e:	f7ff ff55 	bl	8004d2c <round2>
 8004e82:	ec53 2b10 	vmov	r2, r3, d0
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fead 	bl	8000be8 <__aeabi_d2f>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	61bb      	str	r3, [r7, #24]
  sit_paket[13] = ivme_y_float32_uint8_donusturucu.array[3];
 8004e92:	7efa      	ldrb	r2, [r7, #27]
 8004e94:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e96:	735a      	strb	r2, [r3, #13]
  sit_paket[14] = ivme_y_float32_uint8_donusturucu.array[2];
 8004e98:	7eba      	ldrb	r2, [r7, #26]
 8004e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004e9c:	739a      	strb	r2, [r3, #14]
  sit_paket[15] = ivme_y_float32_uint8_donusturucu.array[1];
 8004e9e:	7e7a      	ldrb	r2, [r7, #25]
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004ea2:	73da      	strb	r2, [r3, #15]
  sit_paket[16] = ivme_y_float32_uint8_donusturucu.array[0];
 8004ea4:	7e3a      	ldrb	r2, [r7, #24]
 8004ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004ea8:	741a      	strb	r2, [r3, #16]

  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
  ivme_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fb fb69 	bl	8000588 <__aeabi_f2d>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	ec43 2b10 	vmov	d0, r2, r3
 8004ebe:	f7ff ff35 	bl	8004d2c <round2>
 8004ec2:	ec53 2b10 	vmov	r2, r3, d0
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fb fe8d 	bl	8000be8 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	617b      	str	r3, [r7, #20]
  sit_paket[17] = ivme_z_float32_uint8_donusturucu.array[3];
 8004ed2:	7dfa      	ldrb	r2, [r7, #23]
 8004ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004ed6:	745a      	strb	r2, [r3, #17]
  sit_paket[18] = ivme_z_float32_uint8_donusturucu.array[2];
 8004ed8:	7dba      	ldrb	r2, [r7, #22]
 8004eda:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004edc:	749a      	strb	r2, [r3, #18]
  sit_paket[19] = ivme_z_float32_uint8_donusturucu.array[1];
 8004ede:	7d7a      	ldrb	r2, [r7, #21]
 8004ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004ee2:	74da      	strb	r2, [r3, #19]
  sit_paket[20] = ivme_z_float32_uint8_donusturucu.array[0];
 8004ee4:	7d3a      	ldrb	r2, [r7, #20]
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004ee8:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
  jiroskop_x_float32_uint8_donusturucu.sayi = (float)round2(BMI->yaw); // Jiroskop X degerinin atamasini yapiyoruz.
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fb49 	bl	8000588 <__aeabi_f2d>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	ec43 2b10 	vmov	d0, r2, r3
 8004efe:	f7ff ff15 	bl	8004d2c <round2>
 8004f02:	ec53 2b10 	vmov	r2, r3, d0
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f7fb fe6d 	bl	8000be8 <__aeabi_d2f>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	613b      	str	r3, [r7, #16]
  sit_paket[21] = jiroskop_x_float32_uint8_donusturucu.array[3];
 8004f12:	7cfa      	ldrb	r2, [r7, #19]
 8004f14:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f16:	755a      	strb	r2, [r3, #21]
  sit_paket[22] = jiroskop_x_float32_uint8_donusturucu.array[2];
 8004f18:	7cba      	ldrb	r2, [r7, #18]
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f1c:	759a      	strb	r2, [r3, #22]
  sit_paket[23] = jiroskop_x_float32_uint8_donusturucu.array[1];
 8004f1e:	7c7a      	ldrb	r2, [r7, #17]
 8004f20:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f22:	75da      	strb	r2, [r3, #23]
  sit_paket[24] = jiroskop_x_float32_uint8_donusturucu.array[0];
 8004f24:	7c3a      	ldrb	r2, [r7, #16]
 8004f26:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f28:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
  jiroskop_y_float32_uint8_donusturucu.sayi = (float)round2(BMI->pitch); // Jiroskop Y degerinin atamasini yapiyoruz.
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb fb29 	bl	8000588 <__aeabi_f2d>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	ec43 2b10 	vmov	d0, r2, r3
 8004f3e:	f7ff fef5 	bl	8004d2c <round2>
 8004f42:	ec53 2b10 	vmov	r2, r3, d0
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	f7fb fe4d 	bl	8000be8 <__aeabi_d2f>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	60fb      	str	r3, [r7, #12]
  sit_paket[25] = jiroskop_y_float32_uint8_donusturucu.array[3];
 8004f52:	7bfa      	ldrb	r2, [r7, #15]
 8004f54:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f56:	765a      	strb	r2, [r3, #25]
  sit_paket[26] = jiroskop_y_float32_uint8_donusturucu.array[2];
 8004f58:	7bba      	ldrb	r2, [r7, #14]
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f5c:	769a      	strb	r2, [r3, #26]
  sit_paket[27] = jiroskop_y_float32_uint8_donusturucu.array[1];
 8004f5e:	7b7a      	ldrb	r2, [r7, #13]
 8004f60:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f62:	76da      	strb	r2, [r3, #27]
  sit_paket[28] = jiroskop_y_float32_uint8_donusturucu.array[0];
 8004f64:	7b3a      	ldrb	r2, [r7, #12]
 8004f66:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f68:	771a      	strb	r2, [r3, #28]
  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
  jiroskop_z_float32_uint8_donusturucu.sayi = (float)round2(BMI->roll); // Jiroskop Z degerinin atamasini yapiyoruz.
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fb fb09 	bl	8000588 <__aeabi_f2d>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	ec43 2b10 	vmov	d0, r2, r3
 8004f7e:	f7ff fed5 	bl	8004d2c <round2>
 8004f82:	ec53 2b10 	vmov	r2, r3, d0
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fb fe2d 	bl	8000be8 <__aeabi_d2f>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	60bb      	str	r3, [r7, #8]
  sit_paket[29] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8004f92:	7afa      	ldrb	r2, [r7, #11]
 8004f94:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f96:	775a      	strb	r2, [r3, #29]
  sit_paket[30] = jiroskop_z_float32_uint8_donusturucu.array[2];
 8004f98:	7aba      	ldrb	r2, [r7, #10]
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004f9c:	779a      	strb	r2, [r3, #30]
  sit_paket[31] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8004f9e:	7a7a      	ldrb	r2, [r7, #9]
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004fa2:	77da      	strb	r2, [r3, #31]
  sit_paket[32] = jiroskop_z_float32_uint8_donusturucu.array[0];
 8004fa4:	7a3a      	ldrb	r2, [r7, #8]
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004fa8:	f883 2020 	strb.w	r2, [r3, #32]

  sit_paket[33] = check_sum_hesapla_sit(33); // Check_sum = check_sum_hesapla();
 8004fac:	2021      	movs	r0, #33	@ 0x21
 8004fae:	f7ff fe95 	bl	8004cdc <check_sum_hesapla_sit>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  sit_paket[34] = 0x0D;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004fbe:	220d      	movs	r2, #13
 8004fc0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sit_paket[35] = 0x0A;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	@ (8004fd4 <addDataPacketSit+0x254>)
 8004fc6:	220a      	movs	r2, #10
 8004fc8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

}
 8004fcc:	bf00      	nop
 8004fce:	3728      	adds	r7, #40	@ 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000744 	.word	0x20000744

08004fd8 <uint8_arrayi_float32_ye_donustur>:

float uint8_arrayi_float32_ye_donustur(uint8_t byte_array_u8[4]) {
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
    FLOAT32_UINT8_DONUSTURUCU float32_uint8_donusturucu;
    float32_uint8_donusturucu.array[0] = byte_array_u8[3];
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	733b      	strb	r3, [r7, #12]
    float32_uint8_donusturucu.array[1] = byte_array_u8[2];
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	789b      	ldrb	r3, [r3, #2]
 8004fea:	737b      	strb	r3, [r7, #13]
    float32_uint8_donusturucu.array[2] = byte_array_u8[1];
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	73bb      	strb	r3, [r7, #14]
    float32_uint8_donusturucu.array[3] = byte_array_u8[0];
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	73fb      	strb	r3, [r7, #15]
    return float32_uint8_donusturucu.sayi;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	ee07 3a90 	vmov	s15, r3
}
 8004ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b09e      	sub	sp, #120	@ 0x78
 8005010:	af00      	add	r7, sp, #0
 8005012:	ed87 0a03 	vstr	s0, [r7, #12]
 8005016:	edc7 0a02 	vstr	s1, [r7, #8]
 800501a:	ed87 1a01 	vstr	s2, [r7, #4]
 800501e:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8005028:	edd7 7a03 	vldr	s15, [r7, #12]
 800502c:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005030:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8005034:	edd7 7a02 	vldr	s15, [r7, #8]
 8005038:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800503c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8005040:	edd7 7a01 	vldr	s15, [r7, #4]
 8005044:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005048:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	637b      	str	r3, [r7, #52]	@ 0x34
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 800505a:	edd7 7a02 	vldr	s15, [r7, #8]
 800505e:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005062:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 800506a:	edd7 7a01 	vldr	s15, [r7, #4]
 800506e:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005072:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	653b      	str	r3, [r7, #80]	@ 0x50
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8005088:	edd7 7a03 	vldr	s15, [r7, #12]
 800508c:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8005090:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 800509a:	f107 0310 	add.w	r3, r7, #16
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	605a      	str	r2, [r3, #4]
 80050a4:	609a      	str	r2, [r3, #8]
 80050a6:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 80050a8:	2300      	movs	r3, #0
 80050aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80050ac:	e043      	b.n	8005136 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 80050ae:	2300      	movs	r3, #0
 80050b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b2:	e024      	b.n	80050fe <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 80050b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3378      	adds	r3, #120	@ 0x78
 80050ba:	443b      	add	r3, r7
 80050bc:	3b68      	subs	r3, #104	@ 0x68
 80050be:	ed93 7a00 	vldr	s14, [r3]
 80050c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c4:	009a      	lsls	r2, r3, #2
 80050c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	3378      	adds	r3, #120	@ 0x78
 80050ce:	443b      	add	r3, r7
 80050d0:	3b58      	subs	r3, #88	@ 0x58
 80050d2:	edd3 6a00 	vldr	s13, [r3]
 80050d6:	4a5d      	ldr	r2, [pc, #372]	@ (800524c <ekf_predict+0x240>)
 80050d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	edd3 7a00 	vldr	s15, [r3]
 80050e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	3378      	adds	r3, #120	@ 0x78
 80050f0:	443b      	add	r3, r7
 80050f2:	3b68      	subs	r3, #104	@ 0x68
 80050f4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 80050f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050fa:	3301      	adds	r3, #1
 80050fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80050fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005100:	2b03      	cmp	r3, #3
 8005102:	ddd7      	ble.n	80050b4 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8005104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	3378      	adds	r3, #120	@ 0x78
 800510a:	443b      	add	r3, r7
 800510c:	3b68      	subs	r3, #104	@ 0x68
 800510e:	ed93 7a00 	vldr	s14, [r3]
 8005112:	edd7 7a00 	vldr	s15, [r7]
 8005116:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800511a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	3378      	adds	r3, #120	@ 0x78
 8005128:	443b      	add	r3, r7
 800512a:	3b68      	subs	r3, #104	@ 0x68
 800512c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8005130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005132:	3301      	adds	r3, #1
 8005134:	677b      	str	r3, [r7, #116]	@ 0x74
 8005136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005138:	2b03      	cmp	r3, #3
 800513a:	ddb8      	ble.n	80050ae <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 800513c:	2300      	movs	r3, #0
 800513e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005140:	e017      	b.n	8005172 <ekf_predict+0x166>
        q[i] += dq[i];
 8005142:	4a42      	ldr	r2, [pc, #264]	@ (800524c <ekf_predict+0x240>)
 8005144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	ed93 7a00 	vldr	s14, [r3]
 800514e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	3378      	adds	r3, #120	@ 0x78
 8005154:	443b      	add	r3, r7
 8005156:	3b68      	subs	r3, #104	@ 0x68
 8005158:	edd3 7a00 	vldr	s15, [r3]
 800515c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005160:	4a3a      	ldr	r2, [pc, #232]	@ (800524c <ekf_predict+0x240>)
 8005162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 800516c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800516e:	3301      	adds	r3, #1
 8005170:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005174:	2b03      	cmp	r3, #3
 8005176:	dde4      	ble.n	8005142 <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005178:	4b34      	ldr	r3, [pc, #208]	@ (800524c <ekf_predict+0x240>)
 800517a:	ed93 7a00 	vldr	s14, [r3]
 800517e:	4b33      	ldr	r3, [pc, #204]	@ (800524c <ekf_predict+0x240>)
 8005180:	edd3 7a00 	vldr	s15, [r3]
 8005184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005188:	4b30      	ldr	r3, [pc, #192]	@ (800524c <ekf_predict+0x240>)
 800518a:	edd3 6a01 	vldr	s13, [r3, #4]
 800518e:	4b2f      	ldr	r3, [pc, #188]	@ (800524c <ekf_predict+0x240>)
 8005190:	edd3 7a01 	vldr	s15, [r3, #4]
 8005194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <ekf_predict+0x240>)
 800519e:	edd3 6a02 	vldr	s13, [r3, #8]
 80051a2:	4b2a      	ldr	r3, [pc, #168]	@ (800524c <ekf_predict+0x240>)
 80051a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80051a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051b0:	4b26      	ldr	r3, [pc, #152]	@ (800524c <ekf_predict+0x240>)
 80051b2:	edd3 6a03 	vldr	s13, [r3, #12]
 80051b6:	4b25      	ldr	r3, [pc, #148]	@ (800524c <ekf_predict+0x240>)
 80051b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80051bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c4:	eeb0 0a67 	vmov.f32	s0, s15
 80051c8:	f00a f8f4 	bl	800f3b4 <sqrtf>
 80051cc:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d4:	e012      	b.n	80051fc <ekf_predict+0x1f0>
        q[i] /= norm;
 80051d6:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <ekf_predict+0x240>)
 80051d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	edd3 6a00 	vldr	s13, [r3]
 80051e2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80051e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ea:	4a18      	ldr	r2, [pc, #96]	@ (800524c <ekf_predict+0x240>)
 80051ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80051f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051f8:	3301      	adds	r3, #1
 80051fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051fe:	2b03      	cmp	r3, #3
 8005200:	dde9      	ble.n	80051d6 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	667b      	str	r3, [r7, #100]	@ 0x64
 8005206:	e018      	b.n	800523a <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8005208:	4911      	ldr	r1, [pc, #68]	@ (8005250 <ekf_predict+0x244>)
 800520a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005254 <ekf_predict+0x248>
 800521e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005222:	490b      	ldr	r1, [pc, #44]	@ (8005250 <ekf_predict+0x244>)
 8005224:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8005234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005236:	3301      	adds	r3, #1
 8005238:	667b      	str	r3, [r7, #100]	@ 0x64
 800523a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800523c:	2b03      	cmp	r3, #3
 800523e:	dde3      	ble.n	8005208 <ekf_predict+0x1fc>
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3778      	adds	r7, #120	@ 0x78
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000018 	.word	0x20000018
 8005250:	20000768 	.word	0x20000768
 8005254:	3727c5ac 	.word	0x3727c5ac

08005258 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800525e:	4b2a      	ldr	r3, [pc, #168]	@ (8005308 <quaternionToYaw1+0xb0>)
 8005260:	ed93 7a01 	vldr	s14, [r3, #4]
 8005264:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <quaternionToYaw1+0xb0>)
 8005266:	edd3 7a02 	vldr	s15, [r3, #8]
 800526a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800526e:	4b26      	ldr	r3, [pc, #152]	@ (8005308 <quaternionToYaw1+0xb0>)
 8005270:	edd3 6a00 	vldr	s13, [r3]
 8005274:	4b24      	ldr	r3, [pc, #144]	@ (8005308 <quaternionToYaw1+0xb0>)
 8005276:	edd3 7a03 	vldr	s15, [r3, #12]
 800527a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800527e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005282:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005286:	4b20      	ldr	r3, [pc, #128]	@ (8005308 <quaternionToYaw1+0xb0>)
 8005288:	ed93 7a00 	vldr	s14, [r3]
 800528c:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <quaternionToYaw1+0xb0>)
 800528e:	edd3 7a00 	vldr	s15, [r3]
 8005292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005296:	4b1c      	ldr	r3, [pc, #112]	@ (8005308 <quaternionToYaw1+0xb0>)
 8005298:	edd3 6a01 	vldr	s13, [r3, #4]
 800529c:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <quaternionToYaw1+0xb0>)
 800529e:	edd3 7a01 	vldr	s15, [r3, #4]
 80052a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052aa:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <quaternionToYaw1+0xb0>)
 80052ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80052b0:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <quaternionToYaw1+0xb0>)
 80052b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80052b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052be:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <quaternionToYaw1+0xb0>)
 80052c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80052c4:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <quaternionToYaw1+0xb0>)
 80052c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80052ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d2:	eef0 0a67 	vmov.f32	s1, s15
 80052d6:	eeb0 0a46 	vmov.f32	s0, s12
 80052da:	f00a f869 	bl	800f3b0 <atan2f>
 80052de:	eef0 7a40 	vmov.f32	s15, s0
 80052e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800530c <quaternionToYaw1+0xb4>
 80052e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052ea:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005310 <quaternionToYaw1+0xb8>
 80052ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052f2:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	ee07 3a90 	vmov	s15, r3
}
 80052fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000018 	.word	0x20000018
 800530c:	43340000 	.word	0x43340000
 8005310:	40490fd0 	.word	0x40490fd0

08005314 <quaternionToPitch1>:

float quaternionToPitch1(){
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800531a:	4b17      	ldr	r3, [pc, #92]	@ (8005378 <quaternionToPitch1+0x64>)
 800531c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005320:	4b15      	ldr	r3, [pc, #84]	@ (8005378 <quaternionToPitch1+0x64>)
 8005322:	edd3 7a03 	vldr	s15, [r3, #12]
 8005326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <quaternionToPitch1+0x64>)
 800532c:	edd3 6a00 	vldr	s13, [r3]
 8005330:	4b11      	ldr	r3, [pc, #68]	@ (8005378 <quaternionToPitch1+0x64>)
 8005332:	edd3 7a02 	vldr	s15, [r3, #8]
 8005336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800533a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800533e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005342:	eeb0 0a67 	vmov.f32	s0, s15
 8005346:	f00a f807 	bl	800f358 <asinf>
 800534a:	eef0 7a40 	vmov.f32	s15, s0
 800534e:	eef1 7a67 	vneg.f32	s15, s15
 8005352:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800537c <quaternionToPitch1+0x68>
 8005356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800535a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005380 <quaternionToPitch1+0x6c>
 800535e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005362:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	ee07 3a90 	vmov	s15, r3
}
 800536c:	eeb0 0a67 	vmov.f32	s0, s15
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000018 	.word	0x20000018
 800537c:	43340000 	.word	0x43340000
 8005380:	40490fd0 	.word	0x40490fd0

08005384 <quaternionToRoll1>:

float quaternionToRoll1(){
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800538a:	4b2a      	ldr	r3, [pc, #168]	@ (8005434 <quaternionToRoll1+0xb0>)
 800538c:	ed93 7a00 	vldr	s14, [r3]
 8005390:	4b28      	ldr	r3, [pc, #160]	@ (8005434 <quaternionToRoll1+0xb0>)
 8005392:	edd3 7a01 	vldr	s15, [r3, #4]
 8005396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800539a:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <quaternionToRoll1+0xb0>)
 800539c:	edd3 6a02 	vldr	s13, [r3, #8]
 80053a0:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80053a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ae:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80053b2:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053b4:	ed93 7a00 	vldr	s14, [r3]
 80053b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053ba:	edd3 7a00 	vldr	s15, [r3]
 80053be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80053c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053d6:	4b17      	ldr	r3, [pc, #92]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80053dc:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053de:	edd3 7a02 	vldr	s15, [r3, #8]
 80053e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80053f0:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <quaternionToRoll1+0xb0>)
 80053f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80053f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053fe:	eef0 0a67 	vmov.f32	s1, s15
 8005402:	eeb0 0a46 	vmov.f32	s0, s12
 8005406:	f009 ffd3 	bl	800f3b0 <atan2f>
 800540a:	eef0 7a40 	vmov.f32	s15, s0
 800540e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005438 <quaternionToRoll1+0xb4>
 8005412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005416:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800543c <quaternionToRoll1+0xb8>
 800541a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800541e:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	ee07 3a90 	vmov	s15, r3
}
 8005428:	eeb0 0a67 	vmov.f32	s0, s15
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000018 	.word	0x20000018
 8005438:	43340000 	.word	0x43340000
 800543c:	40490fd0 	.word	0x40490fd0

08005440 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	@ 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	ed87 0a03 	vstr	s0, [r7, #12]
 800544a:	edc7 0a02 	vstr	s1, [r7, #8]
 800544e:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005452:	4bd5      	ldr	r3, [pc, #852]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005454:	ed93 7a00 	vldr	s14, [r3]
 8005458:	4bd3      	ldr	r3, [pc, #844]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005462:	4bd1      	ldr	r3, [pc, #836]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005464:	edd3 6a01 	vldr	s13, [r3, #4]
 8005468:	4bcf      	ldr	r3, [pc, #828]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800546a:	edd3 7a01 	vldr	s15, [r3, #4]
 800546e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005476:	4bcc      	ldr	r3, [pc, #816]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005478:	edd3 6a02 	vldr	s13, [r3, #8]
 800547c:	4bca      	ldr	r3, [pc, #808]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800547e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800548a:	4bc7      	ldr	r3, [pc, #796]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800548c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005490:	4bc5      	ldr	r3, [pc, #788]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005492:	edd3 7a03 	vldr	s15, [r3, #12]
 8005496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800549a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549e:	eeb0 0a67 	vmov.f32	s0, s15
 80054a2:	f009 ff87 	bl	800f3b4 <sqrtf>
 80054a6:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80054aa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80054ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	f000 8172 	beq.w	800579e <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 80054ba:	4bbb      	ldr	r3, [pc, #748]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054bc:	edd3 6a00 	vldr	s13, [r3]
 80054c0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80054c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c8:	4bb7      	ldr	r3, [pc, #732]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054ca:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 80054ce:	4bb6      	ldr	r3, [pc, #728]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80054d4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80054d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054dc:	4bb2      	ldr	r3, [pc, #712]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054de:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80054e2:	4bb1      	ldr	r3, [pc, #708]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80054e8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80054ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f0:	4bad      	ldr	r3, [pc, #692]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054f2:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 80054f6:	4bac      	ldr	r3, [pc, #688]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80054f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80054fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005504:	4ba8      	ldr	r3, [pc, #672]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005506:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 800550a:	4ba7      	ldr	r3, [pc, #668]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800550c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005510:	4ba5      	ldr	r3, [pc, #660]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005512:	edd3 7a03 	vldr	s15, [r3, #12]
 8005516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800551a:	4ba3      	ldr	r3, [pc, #652]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800551c:	edd3 6a00 	vldr	s13, [r3]
 8005520:	4ba1      	ldr	r3, [pc, #644]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005522:	edd3 7a02 	vldr	s15, [r3, #8]
 8005526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800552a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800552e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005532:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005536:	4b9c      	ldr	r3, [pc, #624]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005538:	ed93 7a00 	vldr	s14, [r3]
 800553c:	4b9a      	ldr	r3, [pc, #616]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800553e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005546:	4b98      	ldr	r3, [pc, #608]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005548:	edd3 6a02 	vldr	s13, [r3, #8]
 800554c:	4b96      	ldr	r3, [pc, #600]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800554e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800555e:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005562:	4b91      	ldr	r3, [pc, #580]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005564:	ed93 7a00 	vldr	s14, [r3]
 8005568:	4b8f      	ldr	r3, [pc, #572]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005572:	4b8d      	ldr	r3, [pc, #564]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005574:	edd3 6a01 	vldr	s13, [r3, #4]
 8005578:	4b8b      	ldr	r3, [pc, #556]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800557a:	edd3 7a01 	vldr	s15, [r3, #4]
 800557e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005586:	4b88      	ldr	r3, [pc, #544]	@ (80057a8 <UpdateMahonyGains+0x368>)
 8005588:	edd3 6a02 	vldr	s13, [r3, #8]
 800558c:	4b86      	ldr	r3, [pc, #536]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800558e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005596:	ee37 7a67 	vsub.f32	s14, s14, s15
 800559a:	4b83      	ldr	r3, [pc, #524]	@ (80057a8 <UpdateMahonyGains+0x368>)
 800559c:	edd3 6a03 	vldr	s13, [r3, #12]
 80055a0:	4b81      	ldr	r3, [pc, #516]	@ (80057a8 <UpdateMahonyGains+0x368>)
 80055a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80055a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ae:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80055b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80055b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80055ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80055be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80055c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80055ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80055ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d2:	eeb0 0a67 	vmov.f32	s0, s15
 80055d6:	f001 f885 	bl	80066e4 <invSqrt>
 80055da:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80055de:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80055e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80055e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 80055ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80055f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 80055fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8005602:	edd7 7a06 	vldr	s15, [r7, #24]
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 800560e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005612:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005616:	edd7 7a02 	vldr	s15, [r7, #8]
 800561a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800561e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005622:	edd7 7a01 	vldr	s15, [r7, #4]
 8005626:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800562a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562e:	eeb0 0a67 	vmov.f32	s0, s15
 8005632:	f001 f857 	bl	80066e4 <invSqrt>
 8005636:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 800563a:	ed97 7a03 	vldr	s14, [r7, #12]
 800563e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005646:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 800564a:	ed97 7a02 	vldr	s14, [r7, #8]
 800564e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800565a:	ed97 7a01 	vldr	s14, [r7, #4]
 800565e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800566a:	ed97 7a03 	vldr	s14, [r7, #12]
 800566e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005676:	edd7 6a02 	vldr	s13, [r7, #8]
 800567a:	edd7 7a08 	vldr	s15, [r7, #32]
 800567e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005682:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005686:	edd7 6a01 	vldr	s13, [r7, #4]
 800568a:	edd7 7a07 	vldr	s15, [r7, #28]
 800568e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005696:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800569a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800569e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056aa:	dd02      	ble.n	80056b2 <UpdateMahonyGains+0x272>
 80056ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80056b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 80056b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80056b6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80056ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	d501      	bpl.n	80056c8 <UpdateMahonyGains+0x288>
 80056c4:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <UpdateMahonyGains+0x36c>)
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80056c8:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80056cc:	f009 fe18 	bl	800f300 <acosf>
 80056d0:	eef0 7a40 	vmov.f32	s15, s0
 80056d4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80057b0 <UpdateMahonyGains+0x370>
 80056d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056dc:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80056e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80056e4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80056e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	dd0a      	ble.n	8005708 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 80056f2:	4b30      	ldr	r3, [pc, #192]	@ (80057b4 <UpdateMahonyGains+0x374>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80056f8:	4b2f      	ldr	r3, [pc, #188]	@ (80057b8 <UpdateMahonyGains+0x378>)
 80056fa:	4a30      	ldr	r2, [pc, #192]	@ (80057bc <UpdateMahonyGains+0x37c>)
 80056fc:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 80056fe:	4b30      	ldr	r3, [pc, #192]	@ (80057c0 <UpdateMahonyGains+0x380>)
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e01d      	b.n	8005744 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005708:	edd7 7a04 	vldr	s15, [r7, #16]
 800570c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	dd0a      	ble.n	8005730 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 800571a:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <UpdateMahonyGains+0x374>)
 800571c:	2202      	movs	r2, #2
 800571e:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005720:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <UpdateMahonyGains+0x378>)
 8005722:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005726:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005728:	4b25      	ldr	r3, [pc, #148]	@ (80057c0 <UpdateMahonyGains+0x380>)
 800572a:	4a26      	ldr	r2, [pc, #152]	@ (80057c4 <UpdateMahonyGains+0x384>)
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e009      	b.n	8005744 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005730:	4b20      	ldr	r3, [pc, #128]	@ (80057b4 <UpdateMahonyGains+0x374>)
 8005732:	2203      	movs	r2, #3
 8005734:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <UpdateMahonyGains+0x378>)
 8005738:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800573c:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 800573e:	4b20      	ldr	r3, [pc, #128]	@ (80057c0 <UpdateMahonyGains+0x380>)
 8005740:	4a21      	ldr	r2, [pc, #132]	@ (80057c8 <UpdateMahonyGains+0x388>)
 8005742:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005744:	4b1c      	ldr	r3, [pc, #112]	@ (80057b8 <UpdateMahonyGains+0x378>)
 8005746:	edd3 7a00 	vldr	s15, [r3]
 800574a:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 800574e:	eeb0 0a67 	vmov.f32	s0, s15
 8005752:	f009 fe82 	bl	800f45a <fminf>
 8005756:	eef0 7a40 	vmov.f32	s15, s0
 800575a:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80057cc <UpdateMahonyGains+0x38c>
 800575e:	eeb0 0a67 	vmov.f32	s0, s15
 8005762:	f009 fe5d 	bl	800f420 <fmaxf>
 8005766:	eef0 7a40 	vmov.f32	s15, s0
 800576a:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <UpdateMahonyGains+0x378>)
 800576c:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005770:	4b13      	ldr	r3, [pc, #76]	@ (80057c0 <UpdateMahonyGains+0x380>)
 8005772:	edd3 7a00 	vldr	s15, [r3]
 8005776:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80057d0 <UpdateMahonyGains+0x390>
 800577a:	eeb0 0a67 	vmov.f32	s0, s15
 800577e:	f009 fe6c 	bl	800f45a <fminf>
 8005782:	eef0 7a40 	vmov.f32	s15, s0
 8005786:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80057d4 <UpdateMahonyGains+0x394>
 800578a:	eeb0 0a67 	vmov.f32	s0, s15
 800578e:	f009 fe47 	bl	800f420 <fmaxf>
 8005792:	eef0 7a40 	vmov.f32	s15, s0
 8005796:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <UpdateMahonyGains+0x380>)
 8005798:	edc3 7a00 	vstr	s15, [r3]
 800579c:	e000      	b.n	80057a0 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 800579e:	bf00      	nop
}
 80057a0:	3730      	adds	r7, #48	@ 0x30
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000028 	.word	0x20000028
 80057ac:	bf800000 	.word	0xbf800000
 80057b0:	42652ee2 	.word	0x42652ee2
 80057b4:	200007b4 	.word	0x200007b4
 80057b8:	20000038 	.word	0x20000038
 80057bc:	3e4ccccd 	.word	0x3e4ccccd
 80057c0:	2000003c 	.word	0x2000003c
 80057c4:	3c23d70a 	.word	0x3c23d70a
 80057c8:	3d4ccccd 	.word	0x3d4ccccd
 80057cc:	3dcccccd 	.word	0x3dcccccd
 80057d0:	3d4ccccd 	.word	0x3d4ccccd
 80057d4:	00000000 	.word	0x00000000

080057d8 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	@ 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	ed87 0a07 	vstr	s0, [r7, #28]
 80057e2:	edc7 0a06 	vstr	s1, [r7, #24]
 80057e6:	ed87 1a05 	vstr	s2, [r7, #20]
 80057ea:	edc7 1a04 	vstr	s3, [r7, #16]
 80057ee:	ed87 2a03 	vstr	s4, [r7, #12]
 80057f2:	edc7 2a02 	vstr	s5, [r7, #8]
 80057f6:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 80057fa:	4b60      	ldr	r3, [pc, #384]	@ (800597c <Orientation_Update+0x1a4>)
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 80057fe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005802:	edd7 7a04 	vldr	s15, [r7, #16]
 8005806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005812:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005816:	4b5a      	ldr	r3, [pc, #360]	@ (8005980 <Orientation_Update+0x1a8>)
 8005818:	edd3 7a00 	vldr	s15, [r3]
 800581c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005824:	4b56      	ldr	r3, [pc, #344]	@ (8005980 <Orientation_Update+0x1a8>)
 8005826:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 800582a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800582e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800583a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800583e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005842:	4b50      	ldr	r3, [pc, #320]	@ (8005984 <Orientation_Update+0x1ac>)
 8005844:	edd3 7a00 	vldr	s15, [r3]
 8005848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800584c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005850:	4b4c      	ldr	r3, [pc, #304]	@ (8005984 <Orientation_Update+0x1ac>)
 8005852:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8005856:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800585a:	edd7 7a02 	vldr	s15, [r7, #8]
 800585e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005866:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800586a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800586e:	4b46      	ldr	r3, [pc, #280]	@ (8005988 <Orientation_Update+0x1b0>)
 8005870:	edd3 7a00 	vldr	s15, [r3]
 8005874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587c:	4b42      	ldr	r3, [pc, #264]	@ (8005988 <Orientation_Update+0x1b0>)
 800587e:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8005882:	4b3f      	ldr	r3, [pc, #252]	@ (8005980 <Orientation_Update+0x1a8>)
 8005884:	edd3 7a00 	vldr	s15, [r3]
 8005888:	4b3e      	ldr	r3, [pc, #248]	@ (8005984 <Orientation_Update+0x1ac>)
 800588a:	ed93 7a00 	vldr	s14, [r3]
 800588e:	4b3e      	ldr	r3, [pc, #248]	@ (8005988 <Orientation_Update+0x1b0>)
 8005890:	edd3 6a00 	vldr	s13, [r3]
 8005894:	eeb0 1a66 	vmov.f32	s2, s13
 8005898:	eef0 0a47 	vmov.f32	s1, s14
 800589c:	eeb0 0a67 	vmov.f32	s0, s15
 80058a0:	f7ff fdce 	bl	8005440 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80058a4:	4b36      	ldr	r3, [pc, #216]	@ (8005980 <Orientation_Update+0x1a8>)
 80058a6:	ed93 7a00 	vldr	s14, [r3]
 80058aa:	4b35      	ldr	r3, [pc, #212]	@ (8005980 <Orientation_Update+0x1a8>)
 80058ac:	edd3 7a00 	vldr	s15, [r3]
 80058b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058b4:	4b33      	ldr	r3, [pc, #204]	@ (8005984 <Orientation_Update+0x1ac>)
 80058b6:	edd3 6a00 	vldr	s13, [r3]
 80058ba:	4b32      	ldr	r3, [pc, #200]	@ (8005984 <Orientation_Update+0x1ac>)
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005988 <Orientation_Update+0x1b0>)
 80058ca:	edd3 6a00 	vldr	s13, [r3]
 80058ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005988 <Orientation_Update+0x1b0>)
 80058d0:	edd3 7a00 	vldr	s15, [r3]
 80058d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	eeb0 0a67 	vmov.f32	s0, s15
 80058e0:	f009 fd68 	bl	800f3b4 <sqrtf>
 80058e4:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 80058e8:	4b28      	ldr	r3, [pc, #160]	@ (800598c <Orientation_Update+0x1b4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 80058f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80058f4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005990 <Orientation_Update+0x1b8>
 80058f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005900:	d50f      	bpl.n	8005922 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8005902:	4b22      	ldr	r3, [pc, #136]	@ (800598c <Orientation_Update+0x1b4>)
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e00b      	b.n	8005922 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 800590a:	edd7 7a08 	vldr	s15, [r7, #32]
 800590e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005994 <Orientation_Update+0x1bc>
 8005912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591a:	dd02      	ble.n	8005922 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 800591c:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <Orientation_Update+0x1b4>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8005922:	4b1a      	ldr	r3, [pc, #104]	@ (800598c <Orientation_Update+0x1b4>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 800592a:	edd7 1a01 	vldr	s3, [r7, #4]
 800592e:	ed97 1a05 	vldr	s2, [r7, #20]
 8005932:	edd7 0a06 	vldr	s1, [r7, #24]
 8005936:	ed97 0a07 	vldr	s0, [r7, #28]
 800593a:	f000 f82d 	bl	8005998 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 800593e:	e018      	b.n	8005972 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8005940:	4b0f      	ldr	r3, [pc, #60]	@ (8005980 <Orientation_Update+0x1a8>)
 8005942:	edd3 7a00 	vldr	s15, [r3]
 8005946:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <Orientation_Update+0x1ac>)
 8005948:	ed93 7a00 	vldr	s14, [r3]
 800594c:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <Orientation_Update+0x1b0>)
 800594e:	edd3 6a00 	vldr	s13, [r3]
 8005952:	ed97 3a01 	vldr	s6, [r7, #4]
 8005956:	eef0 2a66 	vmov.f32	s5, s13
 800595a:	eeb0 2a47 	vmov.f32	s4, s14
 800595e:	eef0 1a67 	vmov.f32	s3, s15
 8005962:	ed97 1a05 	vldr	s2, [r7, #20]
 8005966:	edd7 0a06 	vldr	s1, [r7, #24]
 800596a:	ed97 0a07 	vldr	s0, [r7, #28]
 800596e:	f000 f93b 	bl	8005be8 <MahonyAHRSupdateIMU>
}
 8005972:	bf00      	nop
 8005974:	3728      	adds	r7, #40	@ 0x28
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	3e99999a 	.word	0x3e99999a
 8005980:	200007b8 	.word	0x200007b8
 8005984:	200007bc 	.word	0x200007bc
 8005988:	200007c0 	.word	0x200007c0
 800598c:	200007b5 	.word	0x200007b5
 8005990:	41d3d2db 	.word	0x41d3d2db
 8005994:	420172a2 	.word	0x420172a2

08005998 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	@ 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	ed87 0a03 	vstr	s0, [r7, #12]
 80059a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80059a6:	ed87 1a01 	vstr	s2, [r7, #4]
 80059aa:	edc7 1a00 	vstr	s3, [r7]
	gx = fminf(fmaxf(gx, -limit), limit);
	gy = fminf(fmaxf(gy, -limit), limit);
	gz = fminf(fmaxf(gz, -limit), limit);*/

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80059ae:	4b8c      	ldr	r3, [pc, #560]	@ (8005be0 <updateQuaternion+0x248>)
 80059b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80059b4:	eeb1 7a67 	vneg.f32	s14, s15
 80059b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80059bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c0:	4b87      	ldr	r3, [pc, #540]	@ (8005be0 <updateQuaternion+0x248>)
 80059c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80059c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80059ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059d2:	4b83      	ldr	r3, [pc, #524]	@ (8005be0 <updateQuaternion+0x248>)
 80059d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80059d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80059dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80059f0:	4b7b      	ldr	r3, [pc, #492]	@ (8005be0 <updateQuaternion+0x248>)
 80059f2:	ed93 7a00 	vldr	s14, [r3]
 80059f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80059fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059fe:	4b78      	ldr	r3, [pc, #480]	@ (8005be0 <updateQuaternion+0x248>)
 8005a00:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a10:	4b73      	ldr	r3, [pc, #460]	@ (8005be0 <updateQuaternion+0x248>)
 8005a12:	edd3 6a03 	vldr	s13, [r3, #12]
 8005a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a2a:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8005a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8005be0 <updateQuaternion+0x248>)
 8005a30:	ed93 7a00 	vldr	s14, [r3]
 8005a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a3c:	4b68      	ldr	r3, [pc, #416]	@ (8005be0 <updateQuaternion+0x248>)
 8005a3e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a4e:	4b64      	ldr	r3, [pc, #400]	@ (8005be0 <updateQuaternion+0x248>)
 8005a50:	edd3 6a03 	vldr	s13, [r3, #12]
 8005a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a68:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8005a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005be0 <updateQuaternion+0x248>)
 8005a6e:	ed93 7a00 	vldr	s14, [r3]
 8005a72:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a7a:	4b59      	ldr	r3, [pc, #356]	@ (8005be0 <updateQuaternion+0x248>)
 8005a7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a80:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a8c:	4b54      	ldr	r3, [pc, #336]	@ (8005be0 <updateQuaternion+0x248>)
 8005a8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aa6:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8005aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8005be0 <updateQuaternion+0x248>)
 8005aac:	ed93 7a00 	vldr	s14, [r3]
 8005ab0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ab4:	edd7 7a00 	vldr	s15, [r7]
 8005ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac0:	4b47      	ldr	r3, [pc, #284]	@ (8005be0 <updateQuaternion+0x248>)
 8005ac2:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8005ac6:	4b46      	ldr	r3, [pc, #280]	@ (8005be0 <updateQuaternion+0x248>)
 8005ac8:	ed93 7a01 	vldr	s14, [r3, #4]
 8005acc:	edd7 6a08 	vldr	s13, [r7, #32]
 8005ad0:	edd7 7a00 	vldr	s15, [r7]
 8005ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005adc:	4b40      	ldr	r3, [pc, #256]	@ (8005be0 <updateQuaternion+0x248>)
 8005ade:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8005be0 <updateQuaternion+0x248>)
 8005ae4:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aec:	edd7 7a00 	vldr	s15, [r7]
 8005af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af8:	4b39      	ldr	r3, [pc, #228]	@ (8005be0 <updateQuaternion+0x248>)
 8005afa:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8005afe:	4b38      	ldr	r3, [pc, #224]	@ (8005be0 <updateQuaternion+0x248>)
 8005b00:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b04:	edd7 6a06 	vldr	s13, [r7, #24]
 8005b08:	edd7 7a00 	vldr	s15, [r7]
 8005b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b14:	4b32      	ldr	r3, [pc, #200]	@ (8005be0 <updateQuaternion+0x248>)
 8005b16:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005b1a:	4b31      	ldr	r3, [pc, #196]	@ (8005be0 <updateQuaternion+0x248>)
 8005b1c:	ed93 7a00 	vldr	s14, [r3]
 8005b20:	4b2f      	ldr	r3, [pc, #188]	@ (8005be0 <updateQuaternion+0x248>)
 8005b22:	edd3 7a00 	vldr	s15, [r3]
 8005b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005be0 <updateQuaternion+0x248>)
 8005b2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b30:	4b2b      	ldr	r3, [pc, #172]	@ (8005be0 <updateQuaternion+0x248>)
 8005b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b3e:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <updateQuaternion+0x248>)
 8005b40:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b44:	4b26      	ldr	r3, [pc, #152]	@ (8005be0 <updateQuaternion+0x248>)
 8005b46:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b52:	4b23      	ldr	r3, [pc, #140]	@ (8005be0 <updateQuaternion+0x248>)
 8005b54:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b58:	4b21      	ldr	r3, [pc, #132]	@ (8005be0 <updateQuaternion+0x248>)
 8005b5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b66:	eeb0 0a67 	vmov.f32	s0, s15
 8005b6a:	f009 fc23 	bl	800f3b4 <sqrtf>
 8005b6e:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8005b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b76:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005be4 <updateQuaternion+0x24c>
 8005b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	dc00      	bgt.n	8005b86 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8005b84:	e027      	b.n	8005bd6 <updateQuaternion+0x23e>
        q[0] /= norm;
 8005b86:	4b16      	ldr	r3, [pc, #88]	@ (8005be0 <updateQuaternion+0x248>)
 8005b88:	edd3 6a00 	vldr	s13, [r3]
 8005b8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b94:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <updateQuaternion+0x248>)
 8005b96:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <updateQuaternion+0x248>)
 8005b9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ba0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <updateQuaternion+0x248>)
 8005baa:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8005bae:	4b0c      	ldr	r3, [pc, #48]	@ (8005be0 <updateQuaternion+0x248>)
 8005bb0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bbc:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <updateQuaternion+0x248>)
 8005bbe:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8005bc2:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <updateQuaternion+0x248>)
 8005bc4:	edd3 6a03 	vldr	s13, [r3, #12]
 8005bc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd0:	4b03      	ldr	r3, [pc, #12]	@ (8005be0 <updateQuaternion+0x248>)
 8005bd2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	3728      	adds	r7, #40	@ 0x28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000028 	.word	0x20000028
 8005be4:	358637bd 	.word	0x358637bd

08005be8 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b092      	sub	sp, #72	@ 0x48
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	ed87 0a07 	vstr	s0, [r7, #28]
 8005bf2:	edc7 0a06 	vstr	s1, [r7, #24]
 8005bf6:	ed87 1a05 	vstr	s2, [r7, #20]
 8005bfa:	edc7 1a04 	vstr	s3, [r7, #16]
 8005bfe:	ed87 2a03 	vstr	s4, [r7, #12]
 8005c02:	edc7 2a02 	vstr	s5, [r7, #8]
 8005c06:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8005c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c16:	d10e      	bne.n	8005c36 <MahonyAHRSupdateIMU+0x4e>
 8005c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c24:	d107      	bne.n	8005c36 <MahonyAHRSupdateIMU+0x4e>
 8005c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	f000 8138 	beq.w	8005ea6 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8005c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c3a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c56:	eeb0 0a67 	vmov.f32	s0, s15
 8005c5a:	f000 fd43 	bl	80066e4 <invSqrt>
 8005c5e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8005c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c66:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6e:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8005c72:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c76:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8005c82:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c86:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8005c92:	4b66      	ldr	r3, [pc, #408]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005c94:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c98:	4b64      	ldr	r3, [pc, #400]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005c9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ca2:	4b62      	ldr	r3, [pc, #392]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005ca4:	edd3 6a00 	vldr	s13, [r3]
 8005ca8:	4b60      	ldr	r3, [pc, #384]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005caa:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cb6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8005cba:	4b5c      	ldr	r3, [pc, #368]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005cbc:	ed93 7a00 	vldr	s14, [r3]
 8005cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cca:	4b58      	ldr	r3, [pc, #352]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005ccc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cd0:	4b56      	ldr	r3, [pc, #344]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cde:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8005ce2:	4b52      	ldr	r3, [pc, #328]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005ce4:	ed93 7a00 	vldr	s14, [r3]
 8005ce8:	4b50      	ldr	r3, [pc, #320]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005cea:	edd3 7a00 	vldr	s15, [r3]
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cf6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005cfc:	edd3 6a03 	vldr	s13, [r3, #12]
 8005d00:	4b4a      	ldr	r3, [pc, #296]	@ (8005e2c <MahonyAHRSupdateIMU+0x244>)
 8005d02:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d0e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8005d12:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d16:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d1e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005d22:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d2e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8005d32:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d36:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d3e:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d42:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8005d52:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d56:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8005d62:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d6e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8005d72:	4b2f      	ldr	r3, [pc, #188]	@ (8005e30 <MahonyAHRSupdateIMU+0x248>)
 8005d74:	edd3 7a00 	vldr	s15, [r3]
 8005d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d80:	dd5e      	ble.n	8005e40 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8005d82:	4b2b      	ldr	r3, [pc, #172]	@ (8005e30 <MahonyAHRSupdateIMU+0x248>)
 8005d84:	ed93 7a00 	vldr	s14, [r3]
 8005d88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d98:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <MahonyAHRSupdateIMU+0x24c>)
 8005d9a:	edd3 7a00 	vldr	s15, [r3]
 8005d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da2:	4b24      	ldr	r3, [pc, #144]	@ (8005e34 <MahonyAHRSupdateIMU+0x24c>)
 8005da4:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8005da8:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <MahonyAHRSupdateIMU+0x248>)
 8005daa:	ed93 7a00 	vldr	s14, [r3]
 8005dae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <MahonyAHRSupdateIMU+0x250>)
 8005dc0:	edd3 7a00 	vldr	s15, [r3]
 8005dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e38 <MahonyAHRSupdateIMU+0x250>)
 8005dca:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8005dce:	4b18      	ldr	r3, [pc, #96]	@ (8005e30 <MahonyAHRSupdateIMU+0x248>)
 8005dd0:	ed93 7a00 	vldr	s14, [r3]
 8005dd4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005de4:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <MahonyAHRSupdateIMU+0x254>)
 8005de6:	edd3 7a00 	vldr	s15, [r3]
 8005dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dee:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <MahonyAHRSupdateIMU+0x254>)
 8005df0:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8005df4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <MahonyAHRSupdateIMU+0x24c>)
 8005df6:	edd3 7a00 	vldr	s15, [r3]
 8005dfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8005dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8005e06:	4b0c      	ldr	r3, [pc, #48]	@ (8005e38 <MahonyAHRSupdateIMU+0x250>)
 8005e08:	edd3 7a00 	vldr	s15, [r3]
 8005e0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e14:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8005e18:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <MahonyAHRSupdateIMU+0x254>)
 8005e1a:	edd3 7a00 	vldr	s15, [r3]
 8005e1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e26:	edc7 7a05 	vstr	s15, [r7, #20]
 8005e2a:	e015      	b.n	8005e58 <MahonyAHRSupdateIMU+0x270>
 8005e2c:	20000028 	.word	0x20000028
 8005e30:	2000003c 	.word	0x2000003c
 8005e34:	200007a8 	.word	0x200007a8
 8005e38:	200007ac 	.word	0x200007ac
 8005e3c:	200007b0 	.word	0x200007b0
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8005e40:	4b9a      	ldr	r3, [pc, #616]	@ (80060ac <MahonyAHRSupdateIMU+0x4c4>)
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8005e48:	4b99      	ldr	r3, [pc, #612]	@ (80060b0 <MahonyAHRSupdateIMU+0x4c8>)
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8005e50:	4b98      	ldr	r3, [pc, #608]	@ (80060b4 <MahonyAHRSupdateIMU+0x4cc>)
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8005e58:	4b97      	ldr	r3, [pc, #604]	@ (80060b8 <MahonyAHRSupdateIMU+0x4d0>)
 8005e5a:	ed93 7a00 	vldr	s14, [r3]
 8005e5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e6e:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8005e72:	4b91      	ldr	r3, [pc, #580]	@ (80060b8 <MahonyAHRSupdateIMU+0x4d0>)
 8005e74:	ed93 7a00 	vldr	s14, [r3]
 8005e78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e80:	ed97 7a06 	vldr	s14, [r7, #24]
 8005e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e88:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8005e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80060b8 <MahonyAHRSupdateIMU+0x4d0>)
 8005e8e:	ed93 7a00 	vldr	s14, [r3]
 8005e92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea2:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8005ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eaa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8005ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ec2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8005ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed2:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8005ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ee2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8005eee:	4b73      	ldr	r3, [pc, #460]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8005ef4:	4b71      	ldr	r3, [pc, #452]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8005efa:	4b70      	ldr	r3, [pc, #448]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8005f00:	4b6e      	ldr	r3, [pc, #440]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f02:	ed93 7a00 	vldr	s14, [r3]
 8005f06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f0a:	eef1 6a67 	vneg.f32	s13, s15
 8005f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f16:	ed97 6a08 	vldr	s12, [r7, #32]
 8005f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f22:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f26:	4b65      	ldr	r3, [pc, #404]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f28:	ed93 6a03 	vldr	s12, [r3, #12]
 8005f2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f3e:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8005f42:	4b5e      	ldr	r3, [pc, #376]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f44:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f48:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f54:	ed97 6a08 	vldr	s12, [r7, #32]
 8005f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f64:	4b55      	ldr	r3, [pc, #340]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f66:	ed93 6a03 	vldr	s12, [r3, #12]
 8005f6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f7a:	4b50      	ldr	r3, [pc, #320]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f7c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8005f80:	4b4e      	ldr	r3, [pc, #312]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005f82:	ed93 7a02 	vldr	s14, [r3, #8]
 8005f86:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f92:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005fa2:	4b46      	ldr	r3, [pc, #280]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005fa4:	ed93 6a03 	vldr	s12, [r3, #12]
 8005fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb8:	4b40      	ldr	r3, [pc, #256]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005fba:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005fc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8005fc4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fd0:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005fd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fdc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005fe0:	ed97 6a08 	vldr	s12, [r7, #32]
 8005fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fe8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ff4:	4b31      	ldr	r3, [pc, #196]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005ff6:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8005ffa:	4b30      	ldr	r3, [pc, #192]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8005ffc:	ed93 7a00 	vldr	s14, [r3]
 8006000:	4b2e      	ldr	r3, [pc, #184]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006002:	edd3 7a00 	vldr	s15, [r3]
 8006006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800600a:	4b2c      	ldr	r3, [pc, #176]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 800600c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006010:	4b2a      	ldr	r3, [pc, #168]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006012:	edd3 7a01 	vldr	s15, [r3, #4]
 8006016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800601a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800601e:	4b27      	ldr	r3, [pc, #156]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006020:	edd3 6a02 	vldr	s13, [r3, #8]
 8006024:	4b25      	ldr	r3, [pc, #148]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006026:	edd3 7a02 	vldr	s15, [r3, #8]
 800602a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800602e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006032:	4b22      	ldr	r3, [pc, #136]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006034:	edd3 6a03 	vldr	s13, [r3, #12]
 8006038:	4b20      	ldr	r3, [pc, #128]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 800603a:	edd3 7a03 	vldr	s15, [r3, #12]
 800603e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006046:	eeb0 0a67 	vmov.f32	s0, s15
 800604a:	f000 fb4b 	bl	80066e4 <invSqrt>
 800604e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006052:	4b1a      	ldr	r3, [pc, #104]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006054:	ed93 7a00 	vldr	s14, [r3]
 8006058:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	4b16      	ldr	r3, [pc, #88]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006062:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006066:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006068:	ed93 7a01 	vldr	s14, [r3, #4]
 800606c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006074:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006076:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 800607a:	4b10      	ldr	r3, [pc, #64]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 800607c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006080:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006088:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 800608a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 8006090:	ed93 7a03 	vldr	s14, [r3, #12]
 8006094:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609c:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <MahonyAHRSupdateIMU+0x4d4>)
 800609e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80060a2:	bf00      	nop
 80060a4:	3748      	adds	r7, #72	@ 0x48
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200007a8 	.word	0x200007a8
 80060b0:	200007ac 	.word	0x200007ac
 80060b4:	200007b0 	.word	0x200007b0
 80060b8:	20000038 	.word	0x20000038
 80060bc:	20000028 	.word	0x20000028

080060c0 <quaternionToYawDegree>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYawDegree() {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80060c6:	4b20      	ldr	r3, [pc, #128]	@ (8006148 <quaternionToYawDegree+0x88>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006148 <quaternionToYawDegree+0x88>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <quaternionToYawDegree+0x88>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <quaternionToYawDegree+0x88>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 80060de:	ed97 7a05 	vldr	s14, [r7, #20]
 80060e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80060e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ea:	edd7 6a04 	vldr	s13, [r7, #16]
 80060ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80060f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060fe:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 8006102:	edd7 7a03 	vldr	s15, [r7, #12]
 8006106:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800610a:	edd7 7a02 	vldr	s15, [r7, #8]
 800610e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800611a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800611e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006122:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 8006126:	edd7 0a00 	vldr	s1, [r7]
 800612a:	ed97 0a01 	vldr	s0, [r7, #4]
 800612e:	f009 f93f 	bl	800f3b0 <atan2f>
 8006132:	eef0 7a40 	vmov.f32	s15, s0
 8006136:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800614c <quaternionToYawDegree+0x8c>
 800613a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800613e:	eeb0 0a67 	vmov.f32	s0, s15
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000028 	.word	0x20000028
 800614c:	42652ee0 	.word	0x42652ee0

08006150 <quaternionToPitchDegree>:

float quaternionToPitchDegree() {
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8006156:	4b22      	ldr	r3, [pc, #136]	@ (80061e0 <quaternionToPitchDegree+0x90>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <quaternionToPitchDegree+0x90>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	4b1f      	ldr	r3, [pc, #124]	@ (80061e0 <quaternionToPitchDegree+0x90>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	4b1d      	ldr	r3, [pc, #116]	@ (80061e0 <quaternionToPitchDegree+0x90>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 800616e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006172:	edd7 7a03 	vldr	s15, [r7, #12]
 8006176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800617a:	edd7 6a02 	vldr	s13, [r7, #8]
 800617e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800618e:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 8006192:	edd7 7a01 	vldr	s15, [r7, #4]
 8006196:	eef0 7ae7 	vabs.f32	s15, s15
 800619a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800619e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a6:	db0c      	blt.n	80061c2 <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 80061a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b4:	dd02      	ble.n	80061bc <quaternionToPitchDegree+0x6c>
 80061b6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80061e4 <quaternionToPitchDegree+0x94>
 80061ba:	e00c      	b.n	80061d6 <quaternionToPitchDegree+0x86>
 80061bc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80061e8 <quaternionToPitchDegree+0x98>
 80061c0:	e009      	b.n	80061d6 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 80061c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80061c6:	f009 f8c7 	bl	800f358 <asinf>
 80061ca:	eef0 7a40 	vmov.f32	s15, s0
 80061ce:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80061ec <quaternionToPitchDegree+0x9c>
 80061d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80061d6:	eeb0 0a67 	vmov.f32	s0, s15
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000028 	.word	0x20000028
 80061e4:	42b40000 	.word	0x42b40000
 80061e8:	c2b40000 	.word	0xc2b40000
 80061ec:	42652ee0 	.word	0x42652ee0

080061f0 <quaternionToRollDegree>:

float quaternionToRollDegree(){
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80061f6:	4b20      	ldr	r3, [pc, #128]	@ (8006278 <quaternionToRollDegree+0x88>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006278 <quaternionToRollDegree+0x88>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	4b1d      	ldr	r3, [pc, #116]	@ (8006278 <quaternionToRollDegree+0x88>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	4b1b      	ldr	r3, [pc, #108]	@ (8006278 <quaternionToRollDegree+0x88>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 800620e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006212:	edd7 7a04 	vldr	s15, [r7, #16]
 8006216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800621a:	edd7 6a03 	vldr	s13, [r7, #12]
 800621e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800622e:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 8006232:	edd7 7a04 	vldr	s15, [r7, #16]
 8006236:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800623a:	edd7 7a03 	vldr	s15, [r7, #12]
 800623e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006246:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800624e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006252:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 8006256:	edd7 0a00 	vldr	s1, [r7]
 800625a:	ed97 0a01 	vldr	s0, [r7, #4]
 800625e:	f009 f8a7 	bl	800f3b0 <atan2f>
 8006262:	eef0 7a40 	vmov.f32	s15, s0
 8006266:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800627c <quaternionToRollDegree+0x8c>
 800626a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800626e:	eeb0 0a67 	vmov.f32	s0, s15
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000028 	.word	0x20000028
 800627c:	42652ee0 	.word	0x42652ee0

08006280 <quaternionToYaw>:


float quaternionToYaw(){
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8006286:	4b2a      	ldr	r3, [pc, #168]	@ (8006330 <quaternionToYaw+0xb0>)
 8006288:	ed93 7a01 	vldr	s14, [r3, #4]
 800628c:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <quaternionToYaw+0xb0>)
 800628e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006296:	4b26      	ldr	r3, [pc, #152]	@ (8006330 <quaternionToYaw+0xb0>)
 8006298:	edd3 6a00 	vldr	s13, [r3]
 800629c:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <quaternionToYaw+0xb0>)
 800629e:	edd3 7a03 	vldr	s15, [r3, #12]
 80062a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062aa:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80062ae:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <quaternionToYaw+0xb0>)
 80062b0:	ed93 7a00 	vldr	s14, [r3]
 80062b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006330 <quaternionToYaw+0xb0>)
 80062b6:	edd3 7a00 	vldr	s15, [r3]
 80062ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062be:	4b1c      	ldr	r3, [pc, #112]	@ (8006330 <quaternionToYaw+0xb0>)
 80062c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80062c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <quaternionToYaw+0xb0>)
 80062c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80062ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062d2:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <quaternionToYaw+0xb0>)
 80062d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80062d8:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <quaternionToYaw+0xb0>)
 80062da:	edd3 7a02 	vldr	s15, [r3, #8]
 80062de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062e6:	4b12      	ldr	r3, [pc, #72]	@ (8006330 <quaternionToYaw+0xb0>)
 80062e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80062ec:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <quaternionToYaw+0xb0>)
 80062ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80062f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062fa:	eef0 0a67 	vmov.f32	s1, s15
 80062fe:	eeb0 0a46 	vmov.f32	s0, s12
 8006302:	f009 f855 	bl	800f3b0 <atan2f>
 8006306:	eef0 7a40 	vmov.f32	s15, s0
 800630a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006334 <quaternionToYaw+0xb4>
 800630e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006312:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006338 <quaternionToYaw+0xb8>
 8006316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800631a:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	ee07 3a90 	vmov	s15, r3
}
 8006324:	eeb0 0a67 	vmov.f32	s0, s15
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000028 	.word	0x20000028
 8006334:	43340000 	.word	0x43340000
 8006338:	40490fd0 	.word	0x40490fd0

0800633c <quaternionToPitch>:

float quaternionToPitch(){
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 8006342:	4b17      	ldr	r3, [pc, #92]	@ (80063a0 <quaternionToPitch+0x64>)
 8006344:	ed93 7a01 	vldr	s14, [r3, #4]
 8006348:	4b15      	ldr	r3, [pc, #84]	@ (80063a0 <quaternionToPitch+0x64>)
 800634a:	edd3 7a03 	vldr	s15, [r3, #12]
 800634e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006352:	4b13      	ldr	r3, [pc, #76]	@ (80063a0 <quaternionToPitch+0x64>)
 8006354:	edd3 6a00 	vldr	s13, [r3]
 8006358:	4b11      	ldr	r3, [pc, #68]	@ (80063a0 <quaternionToPitch+0x64>)
 800635a:	edd3 7a02 	vldr	s15, [r3, #8]
 800635e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006366:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800636a:	eeb0 0a67 	vmov.f32	s0, s15
 800636e:	f008 fff3 	bl	800f358 <asinf>
 8006372:	eef0 7a40 	vmov.f32	s15, s0
 8006376:	eef1 7a67 	vneg.f32	s15, s15
 800637a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80063a4 <quaternionToPitch+0x68>
 800637e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006382:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80063a8 <quaternionToPitch+0x6c>
 8006386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800638a:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	ee07 3a90 	vmov	s15, r3
}
 8006394:	eeb0 0a67 	vmov.f32	s0, s15
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000028 	.word	0x20000028
 80063a4:	43340000 	.word	0x43340000
 80063a8:	40490fd0 	.word	0x40490fd0

080063ac <quaternionToRoll>:

float quaternionToRoll(){
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 80063b2:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <quaternionToRoll+0xb0>)
 80063b4:	ed93 7a00 	vldr	s14, [r3]
 80063b8:	4b28      	ldr	r3, [pc, #160]	@ (800645c <quaternionToRoll+0xb0>)
 80063ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80063be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063c2:	4b26      	ldr	r3, [pc, #152]	@ (800645c <quaternionToRoll+0xb0>)
 80063c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80063c8:	4b24      	ldr	r3, [pc, #144]	@ (800645c <quaternionToRoll+0xb0>)
 80063ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80063ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80063da:	4b20      	ldr	r3, [pc, #128]	@ (800645c <quaternionToRoll+0xb0>)
 80063dc:	ed93 7a00 	vldr	s14, [r3]
 80063e0:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <quaternionToRoll+0xb0>)
 80063e2:	edd3 7a00 	vldr	s15, [r3]
 80063e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ea:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <quaternionToRoll+0xb0>)
 80063ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80063f0:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <quaternionToRoll+0xb0>)
 80063f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80063f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063fe:	4b17      	ldr	r3, [pc, #92]	@ (800645c <quaternionToRoll+0xb0>)
 8006400:	edd3 6a02 	vldr	s13, [r3, #8]
 8006404:	4b15      	ldr	r3, [pc, #84]	@ (800645c <quaternionToRoll+0xb0>)
 8006406:	edd3 7a02 	vldr	s15, [r3, #8]
 800640a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800640e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <quaternionToRoll+0xb0>)
 8006414:	edd3 6a03 	vldr	s13, [r3, #12]
 8006418:	4b10      	ldr	r3, [pc, #64]	@ (800645c <quaternionToRoll+0xb0>)
 800641a:	edd3 7a03 	vldr	s15, [r3, #12]
 800641e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006426:	eef0 0a67 	vmov.f32	s1, s15
 800642a:	eeb0 0a46 	vmov.f32	s0, s12
 800642e:	f008 ffbf 	bl	800f3b0 <atan2f>
 8006432:	eef0 7a40 	vmov.f32	s15, s0
 8006436:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006460 <quaternionToRoll+0xb4>
 800643a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800643e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006464 <quaternionToRoll+0xb8>
 8006442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006446:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	ee07 3a90 	vmov	s15, r3
}
 8006450:	eeb0 0a67 	vmov.f32	s0, s15
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000028 	.word	0x20000028
 8006460:	43340000 	.word	0x43340000
 8006464:	40490fd0 	.word	0x40490fd0

08006468 <getInitialQuaternion>:

void getInitialQuaternion() {
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b092      	sub	sp, #72	@ 0x48
 800646c:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.acc_z * BMI_sensor.acc_z + BMI_sensor.acc_x * BMI_sensor.acc_x + BMI_sensor.acc_y * BMI_sensor.acc_y);
 800646e:	4b99      	ldr	r3, [pc, #612]	@ (80066d4 <getInitialQuaternion+0x26c>)
 8006470:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006474:	4b97      	ldr	r3, [pc, #604]	@ (80066d4 <getInitialQuaternion+0x26c>)
 8006476:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 800647a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800647e:	4b95      	ldr	r3, [pc, #596]	@ (80066d4 <getInitialQuaternion+0x26c>)
 8006480:	edd3 6a2f 	vldr	s13, [r3, #188]	@ 0xbc
 8006484:	4b93      	ldr	r3, [pc, #588]	@ (80066d4 <getInitialQuaternion+0x26c>)
 8006486:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 800648a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800648e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006492:	4b90      	ldr	r3, [pc, #576]	@ (80066d4 <getInitialQuaternion+0x26c>)
 8006494:	edd3 6a30 	vldr	s13, [r3, #192]	@ 0xc0
 8006498:	4b8e      	ldr	r3, [pc, #568]	@ (80066d4 <getInitialQuaternion+0x26c>)
 800649a:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800649e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a6:	ee17 0a90 	vmov	r0, s15
 80064aa:	f7fa f86d 	bl	8000588 <__aeabi_f2d>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	ec43 2b10 	vmov	d0, r2, r3
 80064b6:	f008 fea1 	bl	800f1fc <sqrt>
 80064ba:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.acc_x;
 80064be:	4b85      	ldr	r3, [pc, #532]	@ (80066d4 <getInitialQuaternion+0x26c>)
 80064c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fa f85f 	bl	8000588 <__aeabi_f2d>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.acc_z;
 80064d2:	4b80      	ldr	r3, [pc, #512]	@ (80066d4 <getInitialQuaternion+0x26c>)
 80064d4:	edd3 7a31 	vldr	s15, [r3, #196]	@ 0xc4
 80064d8:	eef1 7a67 	vneg.f32	s15, s15
 80064dc:	ee17 3a90 	vmov	r3, s15
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa f851 	bl	8000588 <__aeabi_f2d>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.acc_y;
 80064ee:	4b79      	ldr	r3, [pc, #484]	@ (80066d4 <getInitialQuaternion+0x26c>)
 80064f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fa f847 	bl	8000588 <__aeabi_f2d>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006502:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800650a:	f7fa f9bf 	bl	800088c <__aeabi_ddiv>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8006516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800651a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800651e:	f7fa f9b5 	bl	800088c <__aeabi_ddiv>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 800652a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800652e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006532:	f7fa f9ab 	bl	800088c <__aeabi_ddiv>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 800653e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	4964      	ldr	r1, [pc, #400]	@ (80066d8 <getInitialQuaternion+0x270>)
 8006548:	f7f9 febe 	bl	80002c8 <__aeabi_dsub>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	ec43 2b17 	vmov	d7, r2, r3
 8006554:	eeb0 0a47 	vmov.f32	s0, s14
 8006558:	eef0 0a67 	vmov.f32	s1, s15
 800655c:	f008 fe4e 	bl	800f1fc <sqrt>
 8006560:	ec51 0b10 	vmov	r0, r1, d0
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	4b5c      	ldr	r3, [pc, #368]	@ (80066dc <getInitialQuaternion+0x274>)
 800656a:	f7fa f865 	bl	8000638 <__aeabi_dmul>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	4957      	ldr	r1, [pc, #348]	@ (80066dc <getInitialQuaternion+0x274>)
 8006580:	f7fa f984 	bl	800088c <__aeabi_ddiv>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 800658c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006594:	f7fa f850 	bl	8000638 <__aeabi_dmul>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	4b4d      	ldr	r3, [pc, #308]	@ (80066dc <getInitialQuaternion+0x274>)
 80065a6:	f7fa f847 	bl	8000638 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80065b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80065b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065ba:	f7fa f83d 	bl	8000638 <__aeabi_dmul>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	4b44      	ldr	r3, [pc, #272]	@ (80066dc <getInitialQuaternion+0x274>)
 80065cc:	f7fa f834 	bl	8000638 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80065e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ec:	f7fa f824 	bl	8000638 <__aeabi_dmul>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006600:	f7fa f81a 	bl	8000638 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7f9 fe5e 	bl	80002cc <__adddf3>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4614      	mov	r4, r2
 8006616:	461d      	mov	r5, r3
 8006618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800661c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006620:	f7fa f80a 	bl	8000638 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fe4e 	bl	80002cc <__adddf3>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800663c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006640:	f7f9 fffa 	bl	8000638 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4620      	mov	r0, r4
 800664a:	4629      	mov	r1, r5
 800664c:	f7f9 fe3e 	bl	80002cc <__adddf3>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	ec43 2b17 	vmov	d7, r2, r3
 8006658:	eeb0 0a47 	vmov.f32	s0, s14
 800665c:	eef0 0a67 	vmov.f32	s1, s15
 8006660:	f008 fdcc 	bl	800f1fc <sqrt>
 8006664:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800666c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006670:	f7fa f90c 	bl	800088c <__aeabi_ddiv>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4610      	mov	r0, r2
 800667a:	4619      	mov	r1, r3
 800667c:	f7fa fab4 	bl	8000be8 <__aeabi_d2f>
 8006680:	4603      	mov	r3, r0
 8006682:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <getInitialQuaternion+0x278>)
 8006684:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800668a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800668e:	f7fa f8fd 	bl	800088c <__aeabi_ddiv>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	f7fa faa5 	bl	8000be8 <__aeabi_d2f>
 800669e:	4603      	mov	r3, r0
 80066a0:	4a0f      	ldr	r2, [pc, #60]	@ (80066e0 <getInitialQuaternion+0x278>)
 80066a2:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 80066a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066ac:	f7fa f8ee 	bl	800088c <__aeabi_ddiv>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	f7fa fa96 	bl	8000be8 <__aeabi_d2f>
 80066bc:	4603      	mov	r3, r0
 80066be:	4a08      	ldr	r2, [pc, #32]	@ (80066e0 <getInitialQuaternion+0x278>)
 80066c0:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 80066c2:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <getInitialQuaternion+0x278>)
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	60da      	str	r2, [r3, #12]
}
 80066ca:	bf00      	nop
 80066cc:	3748      	adds	r7, #72	@ 0x48
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bdb0      	pop	{r4, r5, r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000530 	.word	0x20000530
 80066d8:	3ff00000 	.word	0x3ff00000
 80066dc:	3fe00000 	.word	0x3fe00000
 80066e0:	20000028 	.word	0x20000028

080066e4 <invSqrt>:

float invSqrt(float x) {
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80066ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80066f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066fa:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006702:	f107 0310 	add.w	r3, r7, #16
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	105a      	asrs	r2, r3, #1
 800670e:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <invSqrt+0x74>)
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800671c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006720:	edd7 7a05 	vldr	s15, [r7, #20]
 8006724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006728:	edd7 7a04 	vldr	s15, [r7, #16]
 800672c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006730:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006738:	edd7 7a04 	vldr	s15, [r7, #16]
 800673c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006740:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	ee07 3a90 	vmov	s15, r3
}
 800674a:	eeb0 0a67 	vmov.f32	s0, s15
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	5f3759df 	.word	0x5f3759df

0800675c <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006762:	4b3d      	ldr	r3, [pc, #244]	@ (8006858 <calculate_accel_std_deviation+0xfc>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <calculate_accel_std_deviation+0x1c>
 800676a:	4b3c      	ldr	r3, [pc, #240]	@ (800685c <calculate_accel_std_deviation+0x100>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d802      	bhi.n	8006778 <calculate_accel_std_deviation+0x1c>
 8006772:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006860 <calculate_accel_std_deviation+0x104>
 8006776:	e069      	b.n	800684c <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006778:	4b37      	ldr	r3, [pc, #220]	@ (8006858 <calculate_accel_std_deviation+0xfc>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <calculate_accel_std_deviation+0x2a>
 8006780:	4b36      	ldr	r3, [pc, #216]	@ (800685c <calculate_accel_std_deviation+0x100>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	e000      	b.n	8006788 <calculate_accel_std_deviation+0x2c>
 8006786:	2305      	movs	r3, #5
 8006788:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e00e      	b.n	80067c0 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 80067a2:	4a30      	ldr	r2, [pc, #192]	@ (8006864 <calculate_accel_std_deviation+0x108>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	edd3 7a00 	vldr	s15, [r3]
 80067ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80067b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b6:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	dbec      	blt.n	80067a2 <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067d2:	edd7 6a05 	vldr	s13, [r7, #20]
 80067d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067da:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]
 80067e2:	e01e      	b.n	8006822 <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 80067e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006864 <calculate_accel_std_deviation+0x108>)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	ed93 7a00 	vldr	s14, [r3]
 80067f0:	edd7 7a00 	vldr	s15, [r7]
 80067f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006864 <calculate_accel_std_deviation+0x108>)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	edd3 6a00 	vldr	s13, [r3]
 8006804:	edd7 7a00 	vldr	s15, [r7]
 8006808:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800680c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006810:	ed97 7a04 	vldr	s14, [r7, #16]
 8006814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006818:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	3301      	adds	r3, #1
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	dbdc      	blt.n	80067e4 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006834:	edd7 6a04 	vldr	s13, [r7, #16]
 8006838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683c:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8006840:	ed97 0a04 	vldr	s0, [r7, #16]
 8006844:	f008 fdb6 	bl	800f3b4 <sqrtf>
 8006848:	eef0 7a40 	vmov.f32	s15, s0
}
 800684c:	eeb0 0a67 	vmov.f32	s0, s15
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000835 	.word	0x20000835
 800685c:	20000834 	.word	0x20000834
 8006860:	00000000 	.word	0x00000000
 8006864:	20000820 	.word	0x20000820

08006868 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006872:	edd7 7a01 	vldr	s15, [r7, #4]
 8006876:	eef0 7ae7 	vabs.f32	s15, s15
 800687a:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 800687e:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <detect_accel_failure+0xdc>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	4a31      	ldr	r2, [pc, #196]	@ (8006948 <detect_accel_failure+0xe0>)
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 800688c:	4b2d      	ldr	r3, [pc, #180]	@ (8006944 <detect_accel_failure+0xdc>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	4b2e      	ldr	r3, [pc, #184]	@ (800694c <detect_accel_failure+0xe4>)
 8006894:	fb83 1302 	smull	r1, r3, r3, r2
 8006898:	1059      	asrs	r1, r3, #1
 800689a:	17d3      	asrs	r3, r2, #31
 800689c:	1ac9      	subs	r1, r1, r3
 800689e:	460b      	mov	r3, r1
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	1ad1      	subs	r1, r2, r3
 80068a6:	b2ca      	uxtb	r2, r1
 80068a8:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <detect_accel_failure+0xdc>)
 80068aa:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 80068ac:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <detect_accel_failure+0xdc>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 80068b4:	4b26      	ldr	r3, [pc, #152]	@ (8006950 <detect_accel_failure+0xe8>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 80068ba:	f7ff ff4f 	bl	800675c <calculate_accel_std_deviation>
 80068be:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 80068c2:	f7fc fb6d 	bl	8002fa0 <flight_algorithm_get_start_time>
 80068c6:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 80068ce:	4a21      	ldr	r2, [pc, #132]	@ (8006954 <detect_accel_failure+0xec>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 80068d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006954 <detect_accel_failure+0xec>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 80068dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006958 <detect_accel_failure+0xf0>)
 80068de:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 80068e0:	4b1e      	ldr	r3, [pc, #120]	@ (800695c <detect_accel_failure+0xf4>)
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e014      	b.n	8006910 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 80068e6:	f001 f805 	bl	80078f4 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	4b19      	ldr	r3, [pc, #100]	@ (8006954 <detect_accel_failure+0xec>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d804      	bhi.n	8006908 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 80068fe:	4b18      	ldr	r3, [pc, #96]	@ (8006960 <detect_accel_failure+0xf8>)
 8006900:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 8006902:	4b18      	ldr	r3, [pc, #96]	@ (8006964 <detect_accel_failure+0xfc>)
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e003      	b.n	8006910 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006908:	4b16      	ldr	r3, [pc, #88]	@ (8006964 <detect_accel_failure+0xfc>)
 800690a:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 800690c:	4b16      	ldr	r3, [pc, #88]	@ (8006968 <detect_accel_failure+0x100>)
 800690e:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8006910:	ed97 7a05 	vldr	s14, [r7, #20]
 8006914:	edd7 7a07 	vldr	s15, [r7, #28]
 8006918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800691c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006920:	dc08      	bgt.n	8006934 <detect_accel_failure+0xcc>
 8006922:	ed97 7a04 	vldr	s14, [r7, #16]
 8006926:	edd7 7a06 	vldr	s15, [r7, #24]
 800692a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800692e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006932:	dd01      	ble.n	8006938 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000834 	.word	0x20000834
 8006948:	20000820 	.word	0x20000820
 800694c:	66666667 	.word	0x66666667
 8006950:	20000835 	.word	0x20000835
 8006954:	2000081c 	.word	0x2000081c
 8006958:	43480000 	.word	0x43480000
 800695c:	42c80000 	.word	0x42c80000
 8006960:	43160000 	.word	0x43160000
 8006964:	42480000 	.word	0x42480000
 8006968:	41700000 	.word	0x41700000

0800696c <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006974:	481b      	ldr	r0, [pc, #108]	@ (80069e4 <sensor_fusion_init+0x78>)
 8006976:	f7fc fb1f 	bl	8002fb8 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 800697a:	4b1a      	ldr	r3, [pc, #104]	@ (80069e4 <sensor_fusion_init+0x78>)
 800697c:	4a1a      	ldr	r2, [pc, #104]	@ (80069e8 <sensor_fusion_init+0x7c>)
 800697e:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006980:	4b18      	ldr	r3, [pc, #96]	@ (80069e4 <sensor_fusion_init+0x78>)
 8006982:	4a1a      	ldr	r2, [pc, #104]	@ (80069ec <sensor_fusion_init+0x80>)
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006986:	4b17      	ldr	r3, [pc, #92]	@ (80069e4 <sensor_fusion_init+0x78>)
 8006988:	4a19      	ldr	r2, [pc, #100]	@ (80069f0 <sensor_fusion_init+0x84>)
 800698a:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e009      	b.n	80069a6 <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006992:	4a18      	ldr	r2, [pc, #96]	@ (80069f4 <sensor_fusion_init+0x88>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	ddf2      	ble.n	8006992 <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 80069ac:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <sensor_fusion_init+0x8c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 80069b2:	4b12      	ldr	r3, [pc, #72]	@ (80069fc <sensor_fusion_init+0x90>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 80069b8:	4b11      	ldr	r3, [pc, #68]	@ (8006a00 <sensor_fusion_init+0x94>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 80069be:	4b11      	ldr	r3, [pc, #68]	@ (8006a04 <sensor_fusion_init+0x98>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006a08 <sensor_fusion_init+0x9c>)
 80069ca:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 80069cc:	f000 ff92 	bl	80078f4 <HAL_GetTick>
 80069d0:	4603      	mov	r3, r0
 80069d2:	4a0e      	ldr	r2, [pc, #56]	@ (8006a0c <sensor_fusion_init+0xa0>)
 80069d4:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 80069d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006a10 <sensor_fusion_init+0xa4>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	200007c4 	.word	0x200007c4
 80069e8:	3dcccccd 	.word	0x3dcccccd
 80069ec:	3ba3d70a 	.word	0x3ba3d70a
 80069f0:	40a00000 	.word	0x40a00000
 80069f4:	20000820 	.word	0x20000820
 80069f8:	20000834 	.word	0x20000834
 80069fc:	20000835 	.word	0x20000835
 8006a00:	20000836 	.word	0x20000836
 8006a04:	20000810 	.word	0x20000810
 8006a08:	20000814 	.word	0x20000814
 8006a0c:	20000818 	.word	0x20000818
 8006a10:	2000081c 	.word	0x2000081c
 8006a14:	00000000 	.word	0x00000000

08006a18 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	@ 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 8006a24:	f000 ff66 	bl	80078f4 <HAL_GetTick>
 8006a28:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8006a2a:	4b55      	ldr	r3, [pc, #340]	@ (8006b80 <sensor_fusion_update_kalman+0x168>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a3a:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8006b84 <sensor_fusion_update_kalman+0x16c>
 8006a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8006a46:	4a4e      	ldr	r2, [pc, #312]	@ (8006b80 <sensor_fusion_update_kalman+0x168>)
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 8006a52:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006a56:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006b88 <sensor_fusion_update_kalman+0x170>
 8006a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a62:	d801      	bhi.n	8006a68 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 8006a64:	4b49      	ldr	r3, [pc, #292]	@ (8006b8c <sensor_fusion_update_kalman+0x174>)
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->angleZ * (M_PI / 180.0f);  // dereceyse radyana çevir
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7f9 fd8a 	bl	8000588 <__aeabi_f2d>
 8006a74:	a33e      	add	r3, pc, #248	@ (adr r3, 8006b70 <sensor_fusion_update_kalman+0x158>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fddd 	bl	8000638 <__aeabi_dmul>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	f7fa f8af 	bl	8000be8 <__aeabi_d2f>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8006a8e:	69b8      	ldr	r0, [r7, #24]
 8006a90:	f7f9 fd7a 	bl	8000588 <__aeabi_f2d>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	ec43 2b10 	vmov	d0, r2, r3
 8006a9c:	f008 fbdc 	bl	800f258 <cos>
 8006aa0:	ec51 0b10 	vmov	r0, r1, d0
 8006aa4:	a334      	add	r3, pc, #208	@ (adr r3, 8006b78 <sensor_fusion_update_kalman+0x160>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fdc5 	bl	8000638 <__aeabi_dmul>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7fa f897 	bl	8000be8 <__aeabi_d2f>
 8006aba:	4603      	mov	r3, r0
 8006abc:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->acc_z - g_local_z;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8006ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006acc:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8006ad0:	ed97 0a04 	vldr	s0, [r7, #16]
 8006ad4:	f7ff fec8 	bl	8006868 <detect_accel_failure>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	4b2c      	ldr	r3, [pc, #176]	@ (8006b90 <sensor_fusion_update_kalman+0x178>)
 8006ade:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8006ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b90 <sensor_fusion_update_kalman+0x178>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <sensor_fusion_update_kalman+0xd8>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b94 <sensor_fusion_update_kalman+0x17c>)
 8006aea:	4a2b      	ldr	r2, [pc, #172]	@ (8006b98 <sensor_fusion_update_kalman+0x180>)
 8006aec:	639a      	str	r2, [r3, #56]	@ 0x38
 8006aee:	e002      	b.n	8006af6 <sensor_fusion_update_kalman+0xde>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8006af0:	4b28      	ldr	r3, [pc, #160]	@ (8006b94 <sensor_fusion_update_kalman+0x17c>)
 8006af2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b9c <sensor_fusion_update_kalman+0x184>)
 8006af4:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8006af6:	4b2a      	ldr	r3, [pc, #168]	@ (8006ba0 <sensor_fusion_update_kalman+0x188>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d034      	beq.n	8006b68 <sensor_fusion_update_kalman+0x150>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8006afe:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8006b02:	edd7 0a04 	vldr	s1, [r7, #16]
 8006b06:	ed97 0a07 	vldr	s0, [r7, #28]
 8006b0a:	4822      	ldr	r0, [pc, #136]	@ (8006b94 <sensor_fusion_update_kalman+0x17c>)
 8006b0c:	f7fc faae 	bl	800306c <KalmanFilter_Update>
 8006b10:	eef0 7a40 	vmov.f32	s15, s0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8006b1a:	481e      	ldr	r0, [pc, #120]	@ (8006b94 <sensor_fusion_update_kalman+0x17c>)
 8006b1c:	f7fd fc7b 	bl	8004416 <KalmanFilter_IsApogeeDetected>
 8006b20:	4603      	mov	r3, r0
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	761a      	strb	r2, [r3, #24]
        // Store velocity estimate for later use
        static float prev_altitude = 0.0f;
        if (time_sec > 0.001f) {
 8006b28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006b2c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006b88 <sensor_fusion_update_kalman+0x170>
 8006b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b38:	dd0e      	ble.n	8006b58 <sensor_fusion_update_kalman+0x140>
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	ed93 7a00 	vldr	s14, [r3]
 8006b40:	4b18      	ldr	r3, [pc, #96]	@ (8006ba4 <sensor_fusion_update_kalman+0x18c>)
 8006b42:	edd3 7a00 	vldr	s15, [r3]
 8006b46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006b4a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        prev_altitude = sensor->filtered_altitude;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ba4 <sensor_fusion_update_kalman+0x18c>)
 8006b5e:	6013      	str	r3, [r2, #0]

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 8006b60:	4b0b      	ldr	r3, [pc, #44]	@ (8006b90 <sensor_fusion_update_kalman+0x178>)
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	765a      	strb	r2, [r3, #25]
    }
}
 8006b68:	bf00      	nop
 8006b6a:	3728      	adds	r7, #40	@ 0x28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	a2529d39 	.word	0xa2529d39
 8006b74:	3f91df46 	.word	0x3f91df46
 8006b78:	60000000 	.word	0x60000000
 8006b7c:	40239eb8 	.word	0x40239eb8
 8006b80:	20000818 	.word	0x20000818
 8006b84:	447a0000 	.word	0x447a0000
 8006b88:	3a83126f 	.word	0x3a83126f
 8006b8c:	3c23d70a 	.word	0x3c23d70a
 8006b90:	20000836 	.word	0x20000836
 8006b94:	200007c4 	.word	0x200007c4
 8006b98:	42480000 	.word	0x42480000
 8006b9c:	3e99999a 	.word	0x3e99999a
 8006ba0:	20000810 	.word	0x20000810
 8006ba4:	20000838 	.word	0x20000838

08006ba8 <sensor_fusion_update_mahony>:

/**
 * @brief Update orientation using Mahony filter
 */
void sensor_fusion_update_mahony(bmi088_struct_t* BMI, sensor_fusion_t *sensor)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
		sensor->yaw = quaternionToYaw();
		sensor->pitch = quaternionToPitch();
		sensor->roll = quaternionToRoll();
		BMI->isUpdated = 0;
	}*/
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <HAL_MspInit+0x4c>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bce:	4a0f      	ldr	r2, [pc, #60]	@ (8006c0c <HAL_MspInit+0x4c>)
 8006bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <HAL_MspInit+0x4c>)
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006be2:	2300      	movs	r3, #0
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <HAL_MspInit+0x4c>)
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	4a08      	ldr	r2, [pc, #32]	@ (8006c0c <HAL_MspInit+0x4c>)
 8006bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bf2:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <HAL_MspInit+0x4c>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800

08006c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	@ 0x30
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c18:	f107 031c 	add.w	r3, r7, #28
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	609a      	str	r2, [r3, #8]
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a42      	ldr	r2, [pc, #264]	@ (8006d38 <HAL_I2C_MspInit+0x128>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d12d      	bne.n	8006c8e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	4b41      	ldr	r3, [pc, #260]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3a:	4a40      	ldr	r2, [pc, #256]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c3c:	f043 0302 	orr.w	r3, r3, #2
 8006c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c42:	4b3e      	ldr	r3, [pc, #248]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006c4e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8006c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c54:	2312      	movs	r3, #18
 8006c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c60:	2304      	movs	r3, #4
 8006c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c64:	f107 031c 	add.w	r3, r7, #28
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4835      	ldr	r0, [pc, #212]	@ (8006d40 <HAL_I2C_MspInit+0x130>)
 8006c6c:	f001 fb86 	bl	800837c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	4b31      	ldr	r3, [pc, #196]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c78:	4a30      	ldr	r2, [pc, #192]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c80:	4b2e      	ldr	r3, [pc, #184]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006c8c:	e050      	b.n	8006d30 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a2c      	ldr	r2, [pc, #176]	@ (8006d44 <HAL_I2C_MspInit+0x134>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d14b      	bne.n	8006d30 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c98:	2300      	movs	r3, #0
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca0:	4a26      	ldr	r2, [pc, #152]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006ca2:	f043 0304 	orr.w	r3, r3, #4
 8006ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ca8:	4b24      	ldr	r3, [pc, #144]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cd6:	2312      	movs	r3, #18
 8006cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006ce2:	2304      	movs	r3, #4
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ce6:	f107 031c 	add.w	r3, r7, #28
 8006cea:	4619      	mov	r1, r3
 8006cec:	4816      	ldr	r0, [pc, #88]	@ (8006d48 <HAL_I2C_MspInit+0x138>)
 8006cee:	f001 fb45 	bl	800837c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cf8:	2312      	movs	r3, #18
 8006cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d00:	2303      	movs	r3, #3
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006d04:	2304      	movs	r3, #4
 8006d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d08:	f107 031c 	add.w	r3, r7, #28
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	480f      	ldr	r0, [pc, #60]	@ (8006d4c <HAL_I2C_MspInit+0x13c>)
 8006d10:	f001 fb34 	bl	800837c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	4b08      	ldr	r3, [pc, #32]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1c:	4a07      	ldr	r2, [pc, #28]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006d1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <HAL_I2C_MspInit+0x12c>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d2c:	60bb      	str	r3, [r7, #8]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
}
 8006d30:	bf00      	nop
 8006d32:	3730      	adds	r7, #48	@ 0x30
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40005400 	.word	0x40005400
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40020400 	.word	0x40020400
 8006d44:	40005c00 	.word	0x40005c00
 8006d48:	40020800 	.word	0x40020800
 8006d4c:	40020000 	.word	0x40020000

08006d50 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <HAL_I2C_MspDeInit+0x64>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10f      	bne.n	8006d82 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006d62:	4b15      	ldr	r3, [pc, #84]	@ (8006db8 <HAL_I2C_MspDeInit+0x68>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	4a14      	ldr	r2, [pc, #80]	@ (8006db8 <HAL_I2C_MspDeInit+0x68>)
 8006d68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d6c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8006d6e:	2180      	movs	r1, #128	@ 0x80
 8006d70:	4812      	ldr	r0, [pc, #72]	@ (8006dbc <HAL_I2C_MspDeInit+0x6c>)
 8006d72:	f001 fc97 	bl	80086a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8006d76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006d7a:	4810      	ldr	r0, [pc, #64]	@ (8006dbc <HAL_I2C_MspDeInit+0x6c>)
 8006d7c:	f001 fc92 	bl	80086a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8006d80:	e014      	b.n	8006dac <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a0e      	ldr	r2, [pc, #56]	@ (8006dc0 <HAL_I2C_MspDeInit+0x70>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10f      	bne.n	8006dac <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006db8 <HAL_I2C_MspDeInit+0x68>)
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d90:	4a09      	ldr	r2, [pc, #36]	@ (8006db8 <HAL_I2C_MspDeInit+0x68>)
 8006d92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006d96:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8006d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d9c:	4809      	ldr	r0, [pc, #36]	@ (8006dc4 <HAL_I2C_MspDeInit+0x74>)
 8006d9e:	f001 fc81 	bl	80086a4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8006da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006da6:	4808      	ldr	r0, [pc, #32]	@ (8006dc8 <HAL_I2C_MspDeInit+0x78>)
 8006da8:	f001 fc7c 	bl	80086a4 <HAL_GPIO_DeInit>
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40005400 	.word	0x40005400
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	40020400 	.word	0x40020400
 8006dc0:	40005c00 	.word	0x40005c00
 8006dc4:	40020800 	.word	0x40020800
 8006dc8:	40020000 	.word	0x40020000

08006dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ddc:	d115      	bne.n	8006e0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e14 <HAL_TIM_Base_MspInit+0x48>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	4a0b      	ldr	r2, [pc, #44]	@ (8006e14 <HAL_TIM_Base_MspInit+0x48>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <HAL_TIM_Base_MspInit+0x48>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	201c      	movs	r0, #28
 8006e00:	f000 fe83 	bl	8007b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e04:	201c      	movs	r0, #28
 8006e06:	f000 fe9c 	bl	8007b42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40023800 	.word	0x40023800

08006e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	@ 0x38
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	60da      	str	r2, [r3, #12]
 8006e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a83      	ldr	r2, [pc, #524]	@ (8007044 <HAL_UART_MspInit+0x22c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d14b      	bne.n	8006ed2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	4b82      	ldr	r3, [pc, #520]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e42:	4a81      	ldr	r2, [pc, #516]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e52:	623b      	str	r3, [r7, #32]
 8006e54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5e:	4a7a      	ldr	r2, [pc, #488]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e60:	f043 0304 	orr.w	r3, r3, #4
 8006e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e66:	4b78      	ldr	r3, [pc, #480]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	4b74      	ldr	r3, [pc, #464]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7a:	4a73      	ldr	r2, [pc, #460]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e82:	4b71      	ldr	r3, [pc, #452]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e94:	2302      	movs	r3, #2
 8006e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4868      	ldr	r0, [pc, #416]	@ (800704c <HAL_UART_MspInit+0x234>)
 8006eac:	f001 fa66 	bl	800837c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006ec0:	2308      	movs	r3, #8
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4861      	ldr	r0, [pc, #388]	@ (8007050 <HAL_UART_MspInit+0x238>)
 8006ecc:	f001 fa56 	bl	800837c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006ed0:	e0b4      	b.n	800703c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8007054 <HAL_UART_MspInit+0x23c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	f040 80af 	bne.w	800703c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	4b59      	ldr	r3, [pc, #356]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee6:	4a58      	ldr	r2, [pc, #352]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006ee8:	f043 0310 	orr.w	r3, r3, #16
 8006eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8006eee:	4b56      	ldr	r3, [pc, #344]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	4b52      	ldr	r3, [pc, #328]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f02:	4a51      	ldr	r2, [pc, #324]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006f20:	f043 0302 	orr.w	r3, r3, #2
 8006f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f26:	4b48      	ldr	r3, [pc, #288]	@ (8007048 <HAL_UART_MspInit+0x230>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f40:	2303      	movs	r3, #3
 8006f42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f44:	2307      	movs	r3, #7
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4842      	ldr	r0, [pc, #264]	@ (8007058 <HAL_UART_MspInit+0x240>)
 8006f50:	f001 fa14 	bl	800837c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006f54:	2340      	movs	r3, #64	@ 0x40
 8006f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f60:	2303      	movs	r3, #3
 8006f62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f64:	2307      	movs	r3, #7
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	483b      	ldr	r0, [pc, #236]	@ (800705c <HAL_UART_MspInit+0x244>)
 8006f70:	f001 fa04 	bl	800837c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006f74:	4b3a      	ldr	r3, [pc, #232]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f76:	4a3b      	ldr	r2, [pc, #236]	@ (8007064 <HAL_UART_MspInit+0x24c>)
 8006f78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006f7a:	4b39      	ldr	r3, [pc, #228]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006f80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f82:	4b37      	ldr	r3, [pc, #220]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f88:	4b35      	ldr	r3, [pc, #212]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f8e:	4b34      	ldr	r3, [pc, #208]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f96:	4b32      	ldr	r3, [pc, #200]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f9c:	4b30      	ldr	r3, [pc, #192]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006fae:	4b2c      	ldr	r3, [pc, #176]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006fb4:	482a      	ldr	r0, [pc, #168]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006fb6:	f000 fddf 	bl	8007b78 <HAL_DMA_Init>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8006fc0:	f7fd fe86 	bl	8004cd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a26      	ldr	r2, [pc, #152]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006fca:	4a25      	ldr	r2, [pc, #148]	@ (8007060 <HAL_UART_MspInit+0x248>)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006fd0:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006fd2:	4a26      	ldr	r2, [pc, #152]	@ (800706c <HAL_UART_MspInit+0x254>)
 8006fd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006fd6:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006fd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006fdc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fde:	4b22      	ldr	r3, [pc, #136]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006fe0:	2240      	movs	r2, #64	@ 0x40
 8006fe2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fe4:	4b20      	ldr	r3, [pc, #128]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ff0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8007000:	2200      	movs	r2, #0
 8007002:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007004:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8007006:	2200      	movs	r2, #0
 8007008:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800700a:	4b17      	ldr	r3, [pc, #92]	@ (8007068 <HAL_UART_MspInit+0x250>)
 800700c:	2200      	movs	r2, #0
 800700e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007010:	4815      	ldr	r0, [pc, #84]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8007012:	f000 fdb1 	bl	8007b78 <HAL_DMA_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <HAL_UART_MspInit+0x208>
      Error_Handler();
 800701c:	f7fd fe58 	bl	8004cd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a11      	ldr	r2, [pc, #68]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8007024:	639a      	str	r2, [r3, #56]	@ 0x38
 8007026:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <HAL_UART_MspInit+0x250>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800702c:	2200      	movs	r2, #0
 800702e:	2100      	movs	r1, #0
 8007030:	2025      	movs	r0, #37	@ 0x25
 8007032:	f000 fd6a 	bl	8007b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007036:	2025      	movs	r0, #37	@ 0x25
 8007038:	f000 fd83 	bl	8007b42 <HAL_NVIC_EnableIRQ>
}
 800703c:	bf00      	nop
 800703e:	3738      	adds	r7, #56	@ 0x38
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40005000 	.word	0x40005000
 8007048:	40023800 	.word	0x40023800
 800704c:	40020800 	.word	0x40020800
 8007050:	40020c00 	.word	0x40020c00
 8007054:	40011000 	.word	0x40011000
 8007058:	40020000 	.word	0x40020000
 800705c:	40020400 	.word	0x40020400
 8007060:	2000042c 	.word	0x2000042c
 8007064:	40026440 	.word	0x40026440
 8007068:	2000048c 	.word	0x2000048c
 800706c:	400264b8 	.word	0x400264b8

08007070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <NMI_Handler+0x4>

08007078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <HardFault_Handler+0x4>

08007080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007080:	b480      	push	{r7}
 8007082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <MemManage_Handler+0x4>

08007088 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <BusFault_Handler+0x4>

08007090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <UsageFault_Handler+0x4>

08007098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070a6:	b480      	push	{r7}
 80070a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070aa:	bf00      	nop
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070c6:	f000 fc01 	bl	80078cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070ca:	bf00      	nop
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80070d4:	4802      	ldr	r0, [pc, #8]	@ (80070e0 <TIM2_IRQHandler+0x10>)
 80070d6:	f003 fb07 	bl	800a6e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000354 	.word	0x20000354

080070e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80070e8:	4802      	ldr	r0, [pc, #8]	@ (80070f4 <USART1_IRQHandler+0x10>)
 80070ea:	f004 f85f 	bl	800b1ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80070ee:	bf00      	nop
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200003e4 	.word	0x200003e4

080070f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80070fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007100:	f001 fbde 	bl	80088c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007104:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007108:	f001 fbda 	bl	80088c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800710c:	bf00      	nop
 800710e:	bd80      	pop	{r7, pc}

08007110 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007114:	4802      	ldr	r0, [pc, #8]	@ (8007120 <DMA2_Stream2_IRQHandler+0x10>)
 8007116:	f000 fec7 	bl	8007ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800711a:	bf00      	nop
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	2000042c 	.word	0x2000042c

08007124 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007128:	4802      	ldr	r0, [pc, #8]	@ (8007134 <DMA2_Stream7_IRQHandler+0x10>)
 800712a:	f000 febd 	bl	8007ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800712e:	bf00      	nop
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	2000048c 	.word	0x2000048c

08007138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return 1;
 800713c:	2301      	movs	r3, #1
}
 800713e:	4618      	mov	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <_kill>:

int _kill(int pid, int sig)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007152:	f005 ff6b 	bl	800d02c <__errno>
 8007156:	4603      	mov	r3, r0
 8007158:	2216      	movs	r2, #22
 800715a:	601a      	str	r2, [r3, #0]
  return -1;
 800715c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <_exit>:

void _exit (int status)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007170:	f04f 31ff 	mov.w	r1, #4294967295
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ffe7 	bl	8007148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <_exit+0x12>

0800717e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e00a      	b.n	80071a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007190:	f3af 8000 	nop.w
 8007194:	4601      	mov	r1, r0
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	60ba      	str	r2, [r7, #8]
 800719c:	b2ca      	uxtb	r2, r1
 800719e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	3301      	adds	r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	dbf0      	blt.n	8007190 <_read+0x12>
  }

  return len;
 80071ae:	687b      	ldr	r3, [r7, #4]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e009      	b.n	80071de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	60ba      	str	r2, [r7, #8]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	3301      	adds	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	dbf1      	blt.n	80071ca <_write+0x12>
  }
  return len;
 80071e6:	687b      	ldr	r3, [r7, #4]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <_close>:

int _close(int file)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007218:	605a      	str	r2, [r3, #4]
  return 0;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <_isatty>:

int _isatty(int file)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007230:	2301      	movs	r3, #1
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007260:	4a14      	ldr	r2, [pc, #80]	@ (80072b4 <_sbrk+0x5c>)
 8007262:	4b15      	ldr	r3, [pc, #84]	@ (80072b8 <_sbrk+0x60>)
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800726c:	4b13      	ldr	r3, [pc, #76]	@ (80072bc <_sbrk+0x64>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007274:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <_sbrk+0x64>)
 8007276:	4a12      	ldr	r2, [pc, #72]	@ (80072c0 <_sbrk+0x68>)
 8007278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800727a:	4b10      	ldr	r3, [pc, #64]	@ (80072bc <_sbrk+0x64>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	429a      	cmp	r2, r3
 8007286:	d207      	bcs.n	8007298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007288:	f005 fed0 	bl	800d02c <__errno>
 800728c:	4603      	mov	r3, r0
 800728e:	220c      	movs	r2, #12
 8007290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007292:	f04f 33ff 	mov.w	r3, #4294967295
 8007296:	e009      	b.n	80072ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007298:	4b08      	ldr	r3, [pc, #32]	@ (80072bc <_sbrk+0x64>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800729e:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <_sbrk+0x64>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4413      	add	r3, r2
 80072a6:	4a05      	ldr	r2, [pc, #20]	@ (80072bc <_sbrk+0x64>)
 80072a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072aa:	68fb      	ldr	r3, [r7, #12]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20020000 	.word	0x20020000
 80072b8:	00000400 	.word	0x00000400
 80072bc:	2000083c 	.word	0x2000083c
 80072c0:	200009c0 	.word	0x200009c0

080072c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <SystemInit+0x20>)
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ce:	4a05      	ldr	r2, [pc, #20]	@ (80072e4 <SystemInit+0x20>)
 80072d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80072d8:	bf00      	nop
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	e000ed00 	.word	0xe000ed00

080072e8 <test_modes_handle_sit>:

/**
 * @brief Handle SIT (Sensor Interface Test) mode
 */
void test_modes_handle_sit(BME_280_t* bme, bmi088_struct_t* bmi)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	addDataPacketSit(bme, bmi);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fd fd43 	bl	8004d80 <addDataPacketSit>
   // if (!usart1_tx_busy) {
       // uart1_send_packet_dma((uint8_t*)sit_paket, 36);
    	HAL_UART_Transmit(&huart1, (uint8_t*)sit_paket, 36, 100);
 80072fa:	2364      	movs	r3, #100	@ 0x64
 80072fc:	2224      	movs	r2, #36	@ 0x24
 80072fe:	4904      	ldr	r1, [pc, #16]	@ (8007310 <test_modes_handle_sit+0x28>)
 8007300:	4804      	ldr	r0, [pc, #16]	@ (8007314 <test_modes_handle_sit+0x2c>)
 8007302:	f003 fdf1 	bl	800aee8 <HAL_UART_Transmit>
    //}
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000744 	.word	0x20000744
 8007314:	200003e4 	.word	0x200003e4

08007318 <algorithm_update_sut>:


void algorithm_update_sut(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	@ 0x28
 800731c:	af00      	add	r7, sp, #0
    // Check if SUT data is ready
    if (uart_handler_sut_data_ready()) {
 800731e:	f000 f9e5 	bl	80076ec <uart_handler_sut_data_ready>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d013      	beq.n	8007350 <algorithm_update_sut+0x38>
        uart_handler_clear_sut_flag();
 8007328:	f000 fa0e 	bl	8007748 <uart_handler_clear_sut_flag>

        sut_data_t sut_data;
        if (uart_handler_get_sut_data(&sut_data)) {
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f9e8 	bl	8007704 <uart_handler_get_sut_data>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <algorithm_update_sut+0x38>
            // Process SUT data through test modes handler
            uint16_t status_bits = test_modes_handle_sut(&sut_data, &sensor_output);
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	4906      	ldr	r1, [pc, #24]	@ (8007358 <algorithm_update_sut+0x40>)
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f80c 	bl	800735c <test_modes_handle_sut>
 8007344:	4603      	mov	r3, r0
 8007346:	84fb      	strh	r3, [r7, #38]	@ 0x26
            uart_handler_send_status(status_bits);
 8007348:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fa08 	bl	8007760 <uart_handler_send_status>
        }
    }
}
 8007350:	bf00      	nop
 8007352:	3728      	adds	r7, #40	@ 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000640 	.word	0x20000640

0800735c <test_modes_handle_sut>:

/**
 * @brief Handle SUT (System Under Test) mode
 */
uint16_t test_modes_handle_sut(sut_data_t* sut_data, sensor_fusion_t* sensor_output)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b0d8      	sub	sp, #352	@ 0x160
 8007360:	af00      	add	r7, sp, #0
 8007362:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007366:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800736a:	6018      	str	r0, [r3, #0]
 800736c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007370:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8007374:	6019      	str	r1, [r3, #0]
    // Convert SUT data to BME and BMI structures
    BME_280_t bme_sut = {0};
 8007376:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800737a:	2244      	movs	r2, #68	@ 0x44
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f005 fe01 	bl	800cf86 <memset>
    bmi088_struct_t bmi_sut = {0};
 8007384:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007388:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800738c:	4618      	mov	r0, r3
 800738e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007392:	461a      	mov	r2, r3
 8007394:	2100      	movs	r1, #0
 8007396:	f005 fdf6 	bl	800cf86 <memset>

    // Fill BME data
    bme_sut.altitude = sut_data->altitude;
 800739a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800739e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    bme_sut.pressure = sut_data->pressure;
 80073aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073ae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    // Fill BMI data
    bmi_sut.acc_x = sut_data->acc_x;
 80073ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073be:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073ca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80073ce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    bmi_sut.acc_y = sut_data->acc_y;
 80073d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073d6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073e2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80073e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    bmi_sut.acc_z = sut_data->acc_z;
 80073ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073ee:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80073fa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80073fe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    bmi_sut.gyro_x = sut_data->gyro_x;
 8007402:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007406:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	4618      	mov	r0, r3
 8007410:	f7f9 f8ba 	bl	8000588 <__aeabi_f2d>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800741c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8007420:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    bmi_sut.angleY = sut_data->gyro_y;
 8007424:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007428:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007434:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007438:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    bmi_sut.gyro_z = sut_data->gyro_z;
 800743c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007440:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 f89d 	bl	8000588 <__aeabi_f2d>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8007456:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 800745a:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

    // Process synthetic data through sensor fusion first
    //sensor_fusion_update_mahony(&bmi_sut, sensor_output);
	sensor_fusion_update_kalman(&bme_sut, &bmi_sut, sensor_output);
 800745e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007462:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8007466:	f107 0108 	add.w	r1, r7, #8
 800746a:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	f7ff fad2 	bl	8006a18 <sensor_fusion_update_kalman>

    // Then run flight algorithm with fused data
    flight_algorithm_update(&bme_sut, &bmi_sut, sensor_output);
 8007474:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007478:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800747c:	f107 0108 	add.w	r1, r7, #8
 8007480:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	f7fb fc51 	bl	8002d2c <flight_algorithm_update>
    uint16_t status_bits = flight_algorithm_get_status_bits();
 800748a:	f7fb fd57 	bl	8002f3c <flight_algorithm_get_status_bits>
 800748e:	4603      	mov	r3, r0
 8007490:	f8a7 315e 	strh.w	r3, [r7, #350]	@ 0x15e

    return status_bits;
 8007494:	f8b7 315e 	ldrh.w	r3, [r7, #350]	@ 0x15e
}
 8007498:	4618      	mov	r0, r3
 800749a:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <uart_handler_init>:

/**
 * @brief Initialize UART handler
 */
void uart_handler_init(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
    current_mode = MODE_NORMAL;
 80074a8:	4b07      	ldr	r3, [pc, #28]	@ (80074c8 <uart_handler_init+0x24>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
    command_packet_ready = 0;
 80074ae:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <uart_handler_init+0x28>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
    sut_packet_ready = 0;
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <uart_handler_init+0x2c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
    memset(&latest_sut_data, 0, sizeof(latest_sut_data));
 80074ba:	2220      	movs	r2, #32
 80074bc:	2100      	movs	r1, #0
 80074be:	4805      	ldr	r0, [pc, #20]	@ (80074d4 <uart_handler_init+0x30>)
 80074c0:	f005 fd61 	bl	800cf86 <memset>
}
 80074c4:	bf00      	nop
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000840 	.word	0x20000840
 80074cc:	20000841 	.word	0x20000841
 80074d0:	20000842 	.word	0x20000842
 80074d4:	20000844 	.word	0x20000844

080074d8 <uart_handler_process_packets>:

/**
 * @brief Process incoming UART packets (call from main loop)
 */
void uart_handler_process_packets(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
    if (usart1_packet_ready) {
 80074dc:	4b14      	ldr	r3, [pc, #80]	@ (8007530 <uart_handler_process_packets+0x58>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d021      	beq.n	800752a <uart_handler_process_packets+0x52>
        usart1_packet_ready = 0; // Clear flag immediately
 80074e6:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <uart_handler_process_packets+0x58>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]

        // Command packet (5 bytes with header 0xAA)
        if (usart1_rx_buffer[0] == CMD_HEADER && usart1_packet_size == 5) {
 80074ec:	4b11      	ldr	r3, [pc, #68]	@ (8007534 <uart_handler_process_packets+0x5c>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2baa      	cmp	r3, #170	@ 0xaa
 80074f2:	d10b      	bne.n	800750c <uart_handler_process_packets+0x34>
 80074f4:	4b10      	ldr	r3, [pc, #64]	@ (8007538 <uart_handler_process_packets+0x60>)
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d106      	bne.n	800750c <uart_handler_process_packets+0x34>
            command_packet_ready = 1;
 80074fe:	4b0f      	ldr	r3, [pc, #60]	@ (800753c <uart_handler_process_packets+0x64>)
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
            process_command_packet(usart1_rx_buffer);
 8007504:	480b      	ldr	r0, [pc, #44]	@ (8007534 <uart_handler_process_packets+0x5c>)
 8007506:	f000 f81d 	bl	8007544 <process_command_packet>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
            sut_packet_ready = 1;
            process_sut_packet(usart1_rx_buffer);
        }
    }
}
 800750a:	e00e      	b.n	800752a <uart_handler_process_packets+0x52>
        else if (usart1_rx_buffer[0] == PACKET_HEADER && usart1_packet_size == 36) {
 800750c:	4b09      	ldr	r3, [pc, #36]	@ (8007534 <uart_handler_process_packets+0x5c>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2bab      	cmp	r3, #171	@ 0xab
 8007512:	d10a      	bne.n	800752a <uart_handler_process_packets+0x52>
 8007514:	4b08      	ldr	r3, [pc, #32]	@ (8007538 <uart_handler_process_packets+0x60>)
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b24      	cmp	r3, #36	@ 0x24
 800751c:	d105      	bne.n	800752a <uart_handler_process_packets+0x52>
            sut_packet_ready = 1;
 800751e:	4b08      	ldr	r3, [pc, #32]	@ (8007540 <uart_handler_process_packets+0x68>)
 8007520:	2201      	movs	r2, #1
 8007522:	701a      	strb	r2, [r3, #0]
            process_sut_packet(usart1_rx_buffer);
 8007524:	4803      	ldr	r0, [pc, #12]	@ (8007534 <uart_handler_process_packets+0x5c>)
 8007526:	f000 f843 	bl	80075b0 <process_sut_packet>
}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	2000073c 	.word	0x2000073c
 8007534:	2000066c 	.word	0x2000066c
 8007538:	2000073e 	.word	0x2000073e
 800753c:	20000841 	.word	0x20000841
 8007540:	20000842 	.word	0x20000842

08007544 <process_command_packet>:
/**
 * @brief Process command packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_command_packet(uint8_t* buffer)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    if (buffer[0] == CMD_HEADER) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2baa      	cmp	r3, #170	@ 0xaa
 8007552:	d124      	bne.n	800759e <process_command_packet+0x5a>
        uint8_t command = buffer[1];
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	73fb      	strb	r3, [r7, #15]
        //uint8_t checksum = buffer[2];
        uint8_t footer1 = buffer[3];
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	78db      	ldrb	r3, [r3, #3]
 800755e:	73bb      	strb	r3, [r7, #14]
        uint8_t footer2 = buffer[4];
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	791b      	ldrb	r3, [r3, #4]
 8007564:	737b      	strb	r3, [r7, #13]

        if (footer1 == CMD_FOOTER1 && footer2 == CMD_FOOTER2) {
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b0d      	cmp	r3, #13
 800756a:	d118      	bne.n	800759e <process_command_packet+0x5a>
 800756c:	7b7b      	ldrb	r3, [r7, #13]
 800756e:	2b0a      	cmp	r3, #10
 8007570:	d115      	bne.n	800759e <process_command_packet+0x5a>
            switch (command) {
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b24      	cmp	r3, #36	@ 0x24
 8007576:	d00e      	beq.n	8007596 <process_command_packet+0x52>
 8007578:	2b24      	cmp	r3, #36	@ 0x24
 800757a:	dc10      	bgt.n	800759e <process_command_packet+0x5a>
 800757c:	2b20      	cmp	r3, #32
 800757e:	d002      	beq.n	8007586 <process_command_packet+0x42>
 8007580:	2b22      	cmp	r3, #34	@ 0x22
 8007582:	d004      	beq.n	800758e <process_command_packet+0x4a>
                    current_mode = MODE_NORMAL;
                    break;
            }
        }
    }
}
 8007584:	e00b      	b.n	800759e <process_command_packet+0x5a>
                    current_mode = MODE_SIT;
 8007586:	4b09      	ldr	r3, [pc, #36]	@ (80075ac <process_command_packet+0x68>)
 8007588:	2201      	movs	r2, #1
 800758a:	701a      	strb	r2, [r3, #0]
                    break;
 800758c:	e007      	b.n	800759e <process_command_packet+0x5a>
                    current_mode = MODE_SUT;
 800758e:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <process_command_packet+0x68>)
 8007590:	2202      	movs	r2, #2
 8007592:	701a      	strb	r2, [r3, #0]
                    break;
 8007594:	e003      	b.n	800759e <process_command_packet+0x5a>
                    current_mode = MODE_NORMAL;
 8007596:	4b05      	ldr	r3, [pc, #20]	@ (80075ac <process_command_packet+0x68>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
                    break;
 800759c:	bf00      	nop
}
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000840 	.word	0x20000840

080075b0 <process_sut_packet>:
/**
 * @brief Process SUT data packet from buffer
 * @param buffer Pointer to received buffer
 */
void process_sut_packet(uint8_t* buffer)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
    // Header, footer and checksum verification
    if (buffer[0] != PACKET_HEADER) return;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2bab      	cmp	r3, #171	@ 0xab
 80075be:	d172      	bne.n	80076a6 <process_sut_packet+0xf6>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3322      	adds	r3, #34	@ 0x22
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b0d      	cmp	r3, #13
 80075c8:	d16f      	bne.n	80076aa <process_sut_packet+0xfa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3323      	adds	r3, #35	@ 0x23
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b0a      	cmp	r3, #10
 80075d2:	d16a      	bne.n	80076aa <process_sut_packet+0xfa>

    uint8_t calculated_checksum = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 80075d8:	2300      	movs	r3, #0
 80075da:	60bb      	str	r3, [r7, #8]
 80075dc:	e009      	b.n	80075f2 <process_sut_packet+0x42>
        calculated_checksum += buffer[i];
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	4413      	add	r3, r2
 80075ea:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 33; i++) {
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	ddf2      	ble.n	80075de <process_sut_packet+0x2e>
    }
    calculated_checksum %= 256;
    if (calculated_checksum != buffer[33]) return;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3321      	adds	r3, #33	@ 0x21
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	7bfa      	ldrb	r2, [r7, #15]
 8007600:	429a      	cmp	r2, r3
 8007602:	d154      	bne.n	80076ae <process_sut_packet+0xfe>

    // Parse data
    latest_sut_data.altitude = uint8_arrayi_float32_ye_donustur(&buffer[1]);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3301      	adds	r3, #1
 8007608:	4618      	mov	r0, r3
 800760a:	f7fd fce5 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 800760e:	eef0 7a40 	vmov.f32	s15, s0
 8007612:	4b29      	ldr	r3, [pc, #164]	@ (80076b8 <process_sut_packet+0x108>)
 8007614:	edc3 7a00 	vstr	s15, [r3]
    latest_sut_data.pressure = uint8_arrayi_float32_ye_donustur(&buffer[5]);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3305      	adds	r3, #5
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fcdb 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 8007622:	eef0 7a40 	vmov.f32	s15, s0
 8007626:	4b24      	ldr	r3, [pc, #144]	@ (80076b8 <process_sut_packet+0x108>)
 8007628:	edc3 7a01 	vstr	s15, [r3, #4]
    latest_sut_data.acc_x = uint8_arrayi_float32_ye_donustur(&buffer[9]);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3309      	adds	r3, #9
 8007630:	4618      	mov	r0, r3
 8007632:	f7fd fcd1 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 8007636:	eef0 7a40 	vmov.f32	s15, s0
 800763a:	4b1f      	ldr	r3, [pc, #124]	@ (80076b8 <process_sut_packet+0x108>)
 800763c:	edc3 7a02 	vstr	s15, [r3, #8]
    latest_sut_data.acc_y = uint8_arrayi_float32_ye_donustur(&buffer[13]);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	330d      	adds	r3, #13
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd fcc7 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 800764a:	eef0 7a40 	vmov.f32	s15, s0
 800764e:	4b1a      	ldr	r3, [pc, #104]	@ (80076b8 <process_sut_packet+0x108>)
 8007650:	edc3 7a03 	vstr	s15, [r3, #12]
    latest_sut_data.acc_z = uint8_arrayi_float32_ye_donustur(&buffer[17]);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3311      	adds	r3, #17
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd fcbd 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 800765e:	eef0 7a40 	vmov.f32	s15, s0
 8007662:	4b15      	ldr	r3, [pc, #84]	@ (80076b8 <process_sut_packet+0x108>)
 8007664:	edc3 7a04 	vstr	s15, [r3, #16]
    latest_sut_data.gyro_x = uint8_arrayi_float32_ye_donustur(&buffer[21]);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3315      	adds	r3, #21
 800766c:	4618      	mov	r0, r3
 800766e:	f7fd fcb3 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 8007672:	eef0 7a40 	vmov.f32	s15, s0
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <process_sut_packet+0x108>)
 8007678:	edc3 7a05 	vstr	s15, [r3, #20]
    latest_sut_data.gyro_y = uint8_arrayi_float32_ye_donustur(&buffer[25]);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3319      	adds	r3, #25
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd fca9 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 8007686:	eef0 7a40 	vmov.f32	s15, s0
 800768a:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <process_sut_packet+0x108>)
 800768c:	edc3 7a06 	vstr	s15, [r3, #24]
    latest_sut_data.gyro_z = uint8_arrayi_float32_ye_donustur(&buffer[29]);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	331d      	adds	r3, #29
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd fc9f 	bl	8004fd8 <uint8_arrayi_float32_ye_donustur>
 800769a:	eef0 7a40 	vmov.f32	s15, s0
 800769e:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <process_sut_packet+0x108>)
 80076a0:	edc3 7a07 	vstr	s15, [r3, #28]
 80076a4:	e004      	b.n	80076b0 <process_sut_packet+0x100>
    if (buffer[0] != PACKET_HEADER) return;
 80076a6:	bf00      	nop
 80076a8:	e002      	b.n	80076b0 <process_sut_packet+0x100>
    if (buffer[34] != CMD_FOOTER1 || buffer[35] != CMD_FOOTER2) return;
 80076aa:	bf00      	nop
 80076ac:	e000      	b.n	80076b0 <process_sut_packet+0x100>
    if (calculated_checksum != buffer[33]) return;
 80076ae:	bf00      	nop
}
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000844 	.word	0x20000844

080076bc <uart_handler_get_mode>:

/**
 * @brief Get current system mode
 */
SystemMode_t uart_handler_get_mode(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
    return current_mode;
 80076c0:	4b03      	ldr	r3, [pc, #12]	@ (80076d0 <uart_handler_get_mode+0x14>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000840 	.word	0x20000840

080076d4 <uart_handler_command_ready>:

/**
 * @brief Check if command packet is ready
 */
uint8_t uart_handler_command_ready(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
    return command_packet_ready;
 80076d8:	4b03      	ldr	r3, [pc, #12]	@ (80076e8 <uart_handler_command_ready+0x14>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b2db      	uxtb	r3, r3
}
 80076de:	4618      	mov	r0, r3
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	20000841 	.word	0x20000841

080076ec <uart_handler_sut_data_ready>:

/**
 * @brief Check if SUT data packet is ready
 */
uint8_t uart_handler_sut_data_ready(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
    return sut_packet_ready;
 80076f0:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <uart_handler_sut_data_ready+0x14>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b2db      	uxtb	r3, r3
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000842 	.word	0x20000842

08007704 <uart_handler_get_sut_data>:

/**
 * @brief Get the latest SUT data
 */
uint8_t uart_handler_get_sut_data(sut_data_t* data)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
    if (data == NULL) return 0;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <uart_handler_get_sut_data+0x12>
 8007712:	2300      	movs	r3, #0
 8007714:	e005      	b.n	8007722 <uart_handler_get_sut_data+0x1e>

    memcpy(data, &latest_sut_data, sizeof(sut_data_t));
 8007716:	2220      	movs	r2, #32
 8007718:	4904      	ldr	r1, [pc, #16]	@ (800772c <uart_handler_get_sut_data+0x28>)
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f005 fcb3 	bl	800d086 <memcpy>
    return 1;
 8007720:	2301      	movs	r3, #1
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000844 	.word	0x20000844

08007730 <uart_handler_clear_command_flag>:

/**
 * @brief Clear command ready flag
 */
void uart_handler_clear_command_flag(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
    command_packet_ready = 0;
 8007734:	4b03      	ldr	r3, [pc, #12]	@ (8007744 <uart_handler_clear_command_flag+0x14>)
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
}
 800773a:	bf00      	nop
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000841 	.word	0x20000841

08007748 <uart_handler_clear_sut_flag>:

/**
 * @brief Clear SUT data ready flag
 */
void uart_handler_clear_sut_flag(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
    sut_packet_ready = 0;
 800774c:	4b03      	ldr	r3, [pc, #12]	@ (800775c <uart_handler_clear_sut_flag+0x14>)
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
}
 8007752:	bf00      	nop
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	20000842 	.word	0x20000842

08007760 <uart_handler_send_status>:

/**
 * @brief Send status packet (for SUT mode)
 */
void uart_handler_send_status(uint16_t status_bits)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	80fb      	strh	r3, [r7, #6]
    if (!usart1_tx_busy) {
 800776a:	4b18      	ldr	r3, [pc, #96]	@ (80077cc <uart_handler_send_status+0x6c>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d127      	bne.n	80077c4 <uart_handler_send_status+0x64>
        // Use static buffer for DMA safety
        status_packet_dma[0] = CMD_HEADER;
 8007774:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <uart_handler_send_status+0x70>)
 8007776:	22aa      	movs	r2, #170	@ 0xaa
 8007778:	701a      	strb	r2, [r3, #0]
        status_packet_dma[1] = status_bits & 0xFF;         // Low byte of status
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <uart_handler_send_status+0x70>)
 8007780:	705a      	strb	r2, [r3, #1]
        status_packet_dma[2] = (status_bits >> 8) & 0xFF;  // High byte of status
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	b29b      	uxth	r3, r3
 8007788:	b2da      	uxtb	r2, r3
 800778a:	4b11      	ldr	r3, [pc, #68]	@ (80077d0 <uart_handler_send_status+0x70>)
 800778c:	709a      	strb	r2, [r3, #2]

        // Calculate checksum (only for header and status bytes)
        status_packet_dma[3] = (status_packet_dma[0] + status_packet_dma[1] + status_packet_dma[2]) % 256;
 800778e:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <uart_handler_send_status+0x70>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	4b0e      	ldr	r3, [pc, #56]	@ (80077d0 <uart_handler_send_status+0x70>)
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	4413      	add	r3, r2
 800779a:	4a0d      	ldr	r2, [pc, #52]	@ (80077d0 <uart_handler_send_status+0x70>)
 800779c:	7892      	ldrb	r2, [r2, #2]
 800779e:	4413      	add	r3, r2
 80077a0:	425a      	negs	r2, r3
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	bf58      	it	pl
 80077a8:	4253      	negpl	r3, r2
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <uart_handler_send_status+0x70>)
 80077ae:	70da      	strb	r2, [r3, #3]

        status_packet_dma[4] = CMD_FOOTER1;
 80077b0:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <uart_handler_send_status+0x70>)
 80077b2:	220d      	movs	r2, #13
 80077b4:	711a      	strb	r2, [r3, #4]
        status_packet_dma[5] = CMD_FOOTER2;
 80077b6:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <uart_handler_send_status+0x70>)
 80077b8:	220a      	movs	r2, #10
 80077ba:	715a      	strb	r2, [r3, #5]

        uart1_send_packet_dma(status_packet_dma, 6);
 80077bc:	2106      	movs	r1, #6
 80077be:	4804      	ldr	r0, [pc, #16]	@ (80077d0 <uart_handler_send_status+0x70>)
 80077c0:	f7fd f9c8 	bl	8004b54 <uart1_send_packet_dma>
    }
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000741 	.word	0x20000741
 80077d0:	20000864 	.word	0x20000864

080077d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80077d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800780c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80077d8:	f7ff fd74 	bl	80072c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80077dc:	480c      	ldr	r0, [pc, #48]	@ (8007810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80077de:	490d      	ldr	r1, [pc, #52]	@ (8007814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80077e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80077e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80077e4:	e002      	b.n	80077ec <LoopCopyDataInit>

080077e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80077e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077ea:	3304      	adds	r3, #4

080077ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80077f0:	d3f9      	bcc.n	80077e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80077f2:	4a0a      	ldr	r2, [pc, #40]	@ (800781c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80077f4:	4c0a      	ldr	r4, [pc, #40]	@ (8007820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80077f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80077f8:	e001      	b.n	80077fe <LoopFillZerobss>

080077fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80077fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80077fc:	3204      	adds	r2, #4

080077fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80077fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007800:	d3fb      	bcc.n	80077fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007802:	f005 fc19 	bl	800d038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007806:	f7fc fe13 	bl	8004430 <main>
  bx  lr    
 800780a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800780c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007814:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8007818:	08011ec0 	.word	0x08011ec0
  ldr r2, =_sbss
 800781c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8007820:	200009bc 	.word	0x200009bc

08007824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007824:	e7fe      	b.n	8007824 <ADC_IRQHandler>
	...

08007828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800782c:	4b0e      	ldr	r3, [pc, #56]	@ (8007868 <HAL_Init+0x40>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a0d      	ldr	r2, [pc, #52]	@ (8007868 <HAL_Init+0x40>)
 8007832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007838:	4b0b      	ldr	r3, [pc, #44]	@ (8007868 <HAL_Init+0x40>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a0a      	ldr	r2, [pc, #40]	@ (8007868 <HAL_Init+0x40>)
 800783e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007844:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <HAL_Init+0x40>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a07      	ldr	r2, [pc, #28]	@ (8007868 <HAL_Init+0x40>)
 800784a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007850:	2003      	movs	r0, #3
 8007852:	f000 f94f 	bl	8007af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007856:	200f      	movs	r0, #15
 8007858:	f000 f808 	bl	800786c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800785c:	f7ff f9b0 	bl	8006bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40023c00 	.word	0x40023c00

0800786c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007874:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <HAL_InitTick+0x54>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <HAL_InitTick+0x58>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007882:	fbb3 f3f1 	udiv	r3, r3, r1
 8007886:	fbb2 f3f3 	udiv	r3, r2, r3
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f967 	bl	8007b5e <HAL_SYSTICK_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e00e      	b.n	80078b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d80a      	bhi.n	80078b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078a0:	2200      	movs	r2, #0
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	f000 f92f 	bl	8007b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078ac:	4a06      	ldr	r2, [pc, #24]	@ (80078c8 <HAL_InitTick+0x5c>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e000      	b.n	80078b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000040 	.word	0x20000040
 80078c4:	20000048 	.word	0x20000048
 80078c8:	20000044 	.word	0x20000044

080078cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80078d0:	4b06      	ldr	r3, [pc, #24]	@ (80078ec <HAL_IncTick+0x20>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <HAL_IncTick+0x24>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4413      	add	r3, r2
 80078dc:	4a04      	ldr	r2, [pc, #16]	@ (80078f0 <HAL_IncTick+0x24>)
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000048 	.word	0x20000048
 80078f0:	2000086c 	.word	0x2000086c

080078f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return uwTick;
 80078f8:	4b03      	ldr	r3, [pc, #12]	@ (8007908 <HAL_GetTick+0x14>)
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2000086c 	.word	0x2000086c

0800790c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007914:	f7ff ffee 	bl	80078f4 <HAL_GetTick>
 8007918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d005      	beq.n	8007932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007926:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <HAL_Delay+0x44>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007932:	bf00      	nop
 8007934:	f7ff ffde 	bl	80078f4 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	429a      	cmp	r2, r3
 8007942:	d8f7      	bhi.n	8007934 <HAL_Delay+0x28>
  {
  }
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20000048 	.word	0x20000048

08007954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007964:	4b0c      	ldr	r3, [pc, #48]	@ (8007998 <__NVIC_SetPriorityGrouping+0x44>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007970:	4013      	ands	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800797c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007986:	4a04      	ldr	r2, [pc, #16]	@ (8007998 <__NVIC_SetPriorityGrouping+0x44>)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	60d3      	str	r3, [r2, #12]
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	e000ed00 	.word	0xe000ed00

0800799c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079a0:	4b04      	ldr	r3, [pc, #16]	@ (80079b4 <__NVIC_GetPriorityGrouping+0x18>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	0a1b      	lsrs	r3, r3, #8
 80079a6:	f003 0307 	and.w	r3, r3, #7
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	db0b      	blt.n	80079e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	f003 021f 	and.w	r2, r3, #31
 80079d0:	4907      	ldr	r1, [pc, #28]	@ (80079f0 <__NVIC_EnableIRQ+0x38>)
 80079d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	2001      	movs	r0, #1
 80079da:	fa00 f202 	lsl.w	r2, r0, r2
 80079de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	e000e100 	.word	0xe000e100

080079f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	db0a      	blt.n	8007a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	490c      	ldr	r1, [pc, #48]	@ (8007a40 <__NVIC_SetPriority+0x4c>)
 8007a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a12:	0112      	lsls	r2, r2, #4
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	440b      	add	r3, r1
 8007a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a1c:	e00a      	b.n	8007a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4908      	ldr	r1, [pc, #32]	@ (8007a44 <__NVIC_SetPriority+0x50>)
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	3b04      	subs	r3, #4
 8007a2c:	0112      	lsls	r2, r2, #4
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	440b      	add	r3, r1
 8007a32:	761a      	strb	r2, [r3, #24]
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	e000e100 	.word	0xe000e100
 8007a44:	e000ed00 	.word	0xe000ed00

08007a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	@ 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f1c3 0307 	rsb	r3, r3, #7
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	bf28      	it	cs
 8007a66:	2304      	movcs	r3, #4
 8007a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d902      	bls.n	8007a78 <NVIC_EncodePriority+0x30>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3b03      	subs	r3, #3
 8007a76:	e000      	b.n	8007a7a <NVIC_EncodePriority+0x32>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43da      	mvns	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	401a      	ands	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a90:	f04f 31ff 	mov.w	r1, #4294967295
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9a:	43d9      	mvns	r1, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aa0:	4313      	orrs	r3, r2
         );
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3724      	adds	r7, #36	@ 0x24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ac0:	d301      	bcc.n	8007ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e00f      	b.n	8007ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8007af0 <SysTick_Config+0x40>)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ace:	210f      	movs	r1, #15
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	f7ff ff8e 	bl	80079f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <SysTick_Config+0x40>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ade:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <SysTick_Config+0x40>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	e000e010 	.word	0xe000e010

08007af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff ff29 	bl	8007954 <__NVIC_SetPriorityGrouping>
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	4603      	mov	r3, r0
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b1c:	f7ff ff3e 	bl	800799c <__NVIC_GetPriorityGrouping>
 8007b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	6978      	ldr	r0, [r7, #20]
 8007b28:	f7ff ff8e 	bl	8007a48 <NVIC_EncodePriority>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff ff5d 	bl	80079f4 <__NVIC_SetPriority>
}
 8007b3a:	bf00      	nop
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	4603      	mov	r3, r0
 8007b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff ff31 	bl	80079b8 <__NVIC_EnableIRQ>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff ffa2 	bl	8007ab0 <SysTick_Config>
 8007b6c:	4603      	mov	r3, r0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b84:	f7ff feb6 	bl	80078f4 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e099      	b.n	8007cc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0201 	bic.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bb4:	e00f      	b.n	8007bd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bb6:	f7ff fe9d 	bl	80078f4 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d908      	bls.n	8007bd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e078      	b.n	8007cc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e8      	bne.n	8007bb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4b38      	ldr	r3, [pc, #224]	@ (8007cd0 <HAL_DMA_Init+0x158>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d107      	bne.n	8007c40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f023 0307 	bic.w	r3, r3, #7
 8007c56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d117      	bne.n	8007c9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00e      	beq.n	8007c9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fb01 	bl	8008284 <DMA_CheckFifoParam>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2240      	movs	r2, #64	@ 0x40
 8007c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007c96:	2301      	movs	r3, #1
 8007c98:	e016      	b.n	8007cc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fab8 	bl	8008218 <DMA_CalcBaseAndBitshift>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb0:	223f      	movs	r2, #63	@ 0x3f
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	f010803f 	.word	0xf010803f

08007cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_DMA_Start_IT+0x26>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e040      	b.n	8007d7c <HAL_DMA_Start_IT+0xa8>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d12f      	bne.n	8007d6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fa4a 	bl	80081bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d2c:	223f      	movs	r2, #63	@ 0x3f
 8007d2e:	409a      	lsls	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0216 	orr.w	r2, r2, #22
 8007d42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0208 	orr.w	r2, r2, #8
 8007d5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e005      	b.n	8007d7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d76:	2302      	movs	r3, #2
 8007d78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d92:	f7ff fdaf 	bl	80078f4 <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d008      	beq.n	8007db6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2280      	movs	r2, #128	@ 0x80
 8007da8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e052      	b.n	8007e5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0216 	bic.w	r2, r2, #22
 8007dc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007dd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d103      	bne.n	8007de6 <HAL_DMA_Abort+0x62>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0208 	bic.w	r2, r2, #8
 8007df4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e06:	e013      	b.n	8007e30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e08:	f7ff fd74 	bl	80078f4 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	d90c      	bls.n	8007e30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e015      	b.n	8007e5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e4      	bne.n	8007e08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e42:	223f      	movs	r2, #63	@ 0x3f
 8007e44:	409a      	lsls	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d004      	beq.n	8007e82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2280      	movs	r2, #128	@ 0x80
 8007e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e00c      	b.n	8007e9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2205      	movs	r2, #5
 8007e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0201 	bic.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007eb4:	4b8e      	ldr	r3, [pc, #568]	@ (80080f0 <HAL_DMA_IRQHandler+0x248>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80080f4 <HAL_DMA_IRQHandler+0x24c>)
 8007eba:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebe:	0a9b      	lsrs	r3, r3, #10
 8007ec0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed2:	2208      	movs	r2, #8
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01a      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d013      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0204 	bic.w	r2, r2, #4
 8007efa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f00:	2208      	movs	r2, #8
 8007f02:	409a      	lsls	r2, r3
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0c:	f043 0201 	orr.w	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f18:	2201      	movs	r2, #1
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f36:	2201      	movs	r2, #1
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	f043 0202 	orr.w	r2, r3, #2
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f4e:	2204      	movs	r2, #4
 8007f50:	409a      	lsls	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d012      	beq.n	8007f80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f6c:	2204      	movs	r2, #4
 8007f6e:	409a      	lsls	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f78:	f043 0204 	orr.w	r2, r3, #4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f84:	2210      	movs	r2, #16
 8007f86:	409a      	lsls	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d043      	beq.n	8008018 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d03c      	beq.n	8008018 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	409a      	lsls	r2, r3
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d018      	beq.n	8007fea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d108      	bne.n	8007fd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d024      	beq.n	8008018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	e01f      	b.n	8008018 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01b      	beq.n	8008018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	e016      	b.n	8008018 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d107      	bne.n	8008008 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0208 	bic.w	r2, r2, #8
 8008006:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800801c:	2220      	movs	r2, #32
 800801e:	409a      	lsls	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4013      	ands	r3, r2
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 808f 	beq.w	8008148 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8087 	beq.w	8008148 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800803e:	2220      	movs	r2, #32
 8008040:	409a      	lsls	r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b05      	cmp	r3, #5
 8008050:	d136      	bne.n	80080c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0216 	bic.w	r2, r2, #22
 8008060:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008070:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <HAL_DMA_IRQHandler+0x1da>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0208 	bic.w	r2, r2, #8
 8008090:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008096:	223f      	movs	r2, #63	@ 0x3f
 8008098:	409a      	lsls	r2, r3
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d07e      	beq.n	80081b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
        }
        return;
 80080be:	e079      	b.n	80081b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01d      	beq.n	800810a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10d      	bne.n	80080f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d031      	beq.n	8008148 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
 80080ec:	e02c      	b.n	8008148 <HAL_DMA_IRQHandler+0x2a0>
 80080ee:	bf00      	nop
 80080f0:	20000040 	.word	0x20000040
 80080f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d023      	beq.n	8008148 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
 8008108:	e01e      	b.n	8008148 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10f      	bne.n	8008138 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0210 	bic.w	r2, r2, #16
 8008126:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814c:	2b00      	cmp	r3, #0
 800814e:	d032      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d022      	beq.n	80081a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2205      	movs	r2, #5
 8008160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	3301      	adds	r3, #1
 8008178:	60bb      	str	r3, [r7, #8]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	429a      	cmp	r2, r3
 800817e:	d307      	bcc.n	8008190 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f2      	bne.n	8008174 <HAL_DMA_IRQHandler+0x2cc>
 800818e:	e000      	b.n	8008192 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008190:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
 80081b2:	e000      	b.n	80081b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80081b4:	bf00      	nop
    }
  }
}
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80081d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b40      	cmp	r3, #64	@ 0x40
 80081e8:	d108      	bne.n	80081fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80081fa:	e007      	b.n	800820c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	60da      	str	r2, [r3, #12]
}
 800820c:	bf00      	nop
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	3b10      	subs	r3, #16
 8008228:	4a14      	ldr	r2, [pc, #80]	@ (800827c <DMA_CalcBaseAndBitshift+0x64>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	091b      	lsrs	r3, r3, #4
 8008230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008232:	4a13      	ldr	r2, [pc, #76]	@ (8008280 <DMA_CalcBaseAndBitshift+0x68>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b03      	cmp	r3, #3
 8008244:	d909      	bls.n	800825a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800824e:	f023 0303 	bic.w	r3, r3, #3
 8008252:	1d1a      	adds	r2, r3, #4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	659a      	str	r2, [r3, #88]	@ 0x58
 8008258:	e007      	b.n	800826a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	aaaaaaab 	.word	0xaaaaaaab
 8008280:	080118f8 	.word	0x080118f8

08008284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d11f      	bne.n	80082de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d856      	bhi.n	8008352 <DMA_CheckFifoParam+0xce>
 80082a4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <DMA_CheckFifoParam+0x28>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082bd 	.word	0x080082bd
 80082b0:	080082cf 	.word	0x080082cf
 80082b4:	080082bd 	.word	0x080082bd
 80082b8:	08008353 	.word	0x08008353
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d046      	beq.n	8008356 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082cc:	e043      	b.n	8008356 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082d6:	d140      	bne.n	800835a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082dc:	e03d      	b.n	800835a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e6:	d121      	bne.n	800832c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d837      	bhi.n	800835e <DMA_CheckFifoParam+0xda>
 80082ee:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <DMA_CheckFifoParam+0x70>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008305 	.word	0x08008305
 80082f8:	0800830b 	.word	0x0800830b
 80082fc:	08008305 	.word	0x08008305
 8008300:	0800831d 	.word	0x0800831d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
      break;
 8008308:	e030      	b.n	800836c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d025      	beq.n	8008362 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800831a:	e022      	b.n	8008362 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008324:	d11f      	bne.n	8008366 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800832a:	e01c      	b.n	8008366 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d903      	bls.n	800833a <DMA_CheckFifoParam+0xb6>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d003      	beq.n	8008340 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008338:	e018      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
      break;
 800833e:	e015      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00e      	beq.n	800836a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
      break;
 8008350:	e00b      	b.n	800836a <DMA_CheckFifoParam+0xe6>
      break;
 8008352:	bf00      	nop
 8008354:	e00a      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      break;
 8008356:	bf00      	nop
 8008358:	e008      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      break;
 800835a:	bf00      	nop
 800835c:	e006      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      break;
 800835e:	bf00      	nop
 8008360:	e004      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      break;
 8008362:	bf00      	nop
 8008364:	e002      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      break;   
 8008366:	bf00      	nop
 8008368:	e000      	b.n	800836c <DMA_CheckFifoParam+0xe8>
      break;
 800836a:	bf00      	nop
    }
  } 
  
  return status; 
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop

0800837c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800837c:	b480      	push	{r7}
 800837e:	b089      	sub	sp, #36	@ 0x24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800838e:	2300      	movs	r3, #0
 8008390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	e165      	b.n	8008664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008398:	2201      	movs	r2, #1
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4013      	ands	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	f040 8154 	bne.w	800865e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d005      	beq.n	80083ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d130      	bne.n	8008430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	2203      	movs	r2, #3
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	43db      	mvns	r3, r3
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	4013      	ands	r3, r2
 80083e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008404:	2201      	movs	r2, #1
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	43db      	mvns	r3, r3
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	4013      	ands	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f003 0201 	and.w	r2, r3, #1
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	fa02 f303 	lsl.w	r3, r2, r3
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	4313      	orrs	r3, r2
 8008428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	2b03      	cmp	r3, #3
 800843a:	d017      	beq.n	800846c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	2203      	movs	r2, #3
 8008448:	fa02 f303 	lsl.w	r3, r2, r3
 800844c:	43db      	mvns	r3, r3
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	4013      	ands	r3, r2
 8008452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	4313      	orrs	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f003 0303 	and.w	r3, r3, #3
 8008474:	2b02      	cmp	r3, #2
 8008476:	d123      	bne.n	80084c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	08da      	lsrs	r2, r3, #3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3208      	adds	r2, #8
 8008480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	220f      	movs	r2, #15
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	43db      	mvns	r3, r3
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	4013      	ands	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	08da      	lsrs	r2, r3, #3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3208      	adds	r2, #8
 80084ba:	69b9      	ldr	r1, [r7, #24]
 80084bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	2203      	movs	r2, #3
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	43db      	mvns	r3, r3
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	4013      	ands	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f003 0203 	and.w	r2, r3, #3
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	fa02 f303 	lsl.w	r3, r2, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80ae 	beq.w	800865e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	4b5d      	ldr	r3, [pc, #372]	@ (800867c <HAL_GPIO_Init+0x300>)
 8008508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850a:	4a5c      	ldr	r2, [pc, #368]	@ (800867c <HAL_GPIO_Init+0x300>)
 800850c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008510:	6453      	str	r3, [r2, #68]	@ 0x44
 8008512:	4b5a      	ldr	r3, [pc, #360]	@ (800867c <HAL_GPIO_Init+0x300>)
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800851e:	4a58      	ldr	r2, [pc, #352]	@ (8008680 <HAL_GPIO_Init+0x304>)
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	3302      	adds	r3, #2
 8008526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800852a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	220f      	movs	r2, #15
 8008536:	fa02 f303 	lsl.w	r3, r2, r3
 800853a:	43db      	mvns	r3, r3
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	4013      	ands	r3, r2
 8008540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a4f      	ldr	r2, [pc, #316]	@ (8008684 <HAL_GPIO_Init+0x308>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d025      	beq.n	8008596 <HAL_GPIO_Init+0x21a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a4e      	ldr	r2, [pc, #312]	@ (8008688 <HAL_GPIO_Init+0x30c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <HAL_GPIO_Init+0x216>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a4d      	ldr	r2, [pc, #308]	@ (800868c <HAL_GPIO_Init+0x310>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d019      	beq.n	800858e <HAL_GPIO_Init+0x212>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a4c      	ldr	r2, [pc, #304]	@ (8008690 <HAL_GPIO_Init+0x314>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d013      	beq.n	800858a <HAL_GPIO_Init+0x20e>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a4b      	ldr	r2, [pc, #300]	@ (8008694 <HAL_GPIO_Init+0x318>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00d      	beq.n	8008586 <HAL_GPIO_Init+0x20a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a4a      	ldr	r2, [pc, #296]	@ (8008698 <HAL_GPIO_Init+0x31c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d007      	beq.n	8008582 <HAL_GPIO_Init+0x206>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a49      	ldr	r2, [pc, #292]	@ (800869c <HAL_GPIO_Init+0x320>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d101      	bne.n	800857e <HAL_GPIO_Init+0x202>
 800857a:	2306      	movs	r3, #6
 800857c:	e00c      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 800857e:	2307      	movs	r3, #7
 8008580:	e00a      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 8008582:	2305      	movs	r3, #5
 8008584:	e008      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 8008586:	2304      	movs	r3, #4
 8008588:	e006      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 800858a:	2303      	movs	r3, #3
 800858c:	e004      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 800858e:	2302      	movs	r3, #2
 8008590:	e002      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <HAL_GPIO_Init+0x21c>
 8008596:	2300      	movs	r3, #0
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	f002 0203 	and.w	r2, r2, #3
 800859e:	0092      	lsls	r2, r2, #2
 80085a0:	4093      	lsls	r3, r2
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085a8:	4935      	ldr	r1, [pc, #212]	@ (8008680 <HAL_GPIO_Init+0x304>)
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	089b      	lsrs	r3, r3, #2
 80085ae:	3302      	adds	r3, #2
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085b6:	4b3a      	ldr	r3, [pc, #232]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	43db      	mvns	r3, r3
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	4013      	ands	r3, r2
 80085c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80085da:	4a31      	ldr	r2, [pc, #196]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80085e0:	4b2f      	ldr	r3, [pc, #188]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	43db      	mvns	r3, r3
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	4013      	ands	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008604:	4a26      	ldr	r2, [pc, #152]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800860a:	4b25      	ldr	r3, [pc, #148]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	43db      	mvns	r3, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4013      	ands	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800862e:	4a1c      	ldr	r2, [pc, #112]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008634:	4b1a      	ldr	r3, [pc, #104]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	43db      	mvns	r3, r3
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	4013      	ands	r3, r2
 8008642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008658:	4a11      	ldr	r2, [pc, #68]	@ (80086a0 <HAL_GPIO_Init+0x324>)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	2b0f      	cmp	r3, #15
 8008668:	f67f ae96 	bls.w	8008398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	3724      	adds	r7, #36	@ 0x24
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40023800 	.word	0x40023800
 8008680:	40013800 	.word	0x40013800
 8008684:	40020000 	.word	0x40020000
 8008688:	40020400 	.word	0x40020400
 800868c:	40020800 	.word	0x40020800
 8008690:	40020c00 	.word	0x40020c00
 8008694:	40021000 	.word	0x40021000
 8008698:	40021400 	.word	0x40021400
 800869c:	40021800 	.word	0x40021800
 80086a0:	40013c00 	.word	0x40013c00

080086a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ba:	2300      	movs	r3, #0
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	e0c7      	b.n	8008850 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086c0:	2201      	movs	r2, #1
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	fa02 f303 	lsl.w	r3, r2, r3
 80086c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4013      	ands	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	f040 80b7 	bne.w	800884a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80086dc:	4a62      	ldr	r2, [pc, #392]	@ (8008868 <HAL_GPIO_DeInit+0x1c4>)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	089b      	lsrs	r3, r3, #2
 80086e2:	3302      	adds	r3, #2
 80086e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	220f      	movs	r2, #15
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	4013      	ands	r3, r2
 80086fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a5a      	ldr	r2, [pc, #360]	@ (800886c <HAL_GPIO_DeInit+0x1c8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d025      	beq.n	8008752 <HAL_GPIO_DeInit+0xae>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a59      	ldr	r2, [pc, #356]	@ (8008870 <HAL_GPIO_DeInit+0x1cc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d01f      	beq.n	800874e <HAL_GPIO_DeInit+0xaa>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a58      	ldr	r2, [pc, #352]	@ (8008874 <HAL_GPIO_DeInit+0x1d0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d019      	beq.n	800874a <HAL_GPIO_DeInit+0xa6>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a57      	ldr	r2, [pc, #348]	@ (8008878 <HAL_GPIO_DeInit+0x1d4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <HAL_GPIO_DeInit+0xa2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a56      	ldr	r2, [pc, #344]	@ (800887c <HAL_GPIO_DeInit+0x1d8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d00d      	beq.n	8008742 <HAL_GPIO_DeInit+0x9e>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a55      	ldr	r2, [pc, #340]	@ (8008880 <HAL_GPIO_DeInit+0x1dc>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d007      	beq.n	800873e <HAL_GPIO_DeInit+0x9a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a54      	ldr	r2, [pc, #336]	@ (8008884 <HAL_GPIO_DeInit+0x1e0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d101      	bne.n	800873a <HAL_GPIO_DeInit+0x96>
 8008736:	2306      	movs	r3, #6
 8008738:	e00c      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 800873a:	2307      	movs	r3, #7
 800873c:	e00a      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 800873e:	2305      	movs	r3, #5
 8008740:	e008      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 8008742:	2304      	movs	r3, #4
 8008744:	e006      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 8008746:	2303      	movs	r3, #3
 8008748:	e004      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 800874a:	2302      	movs	r3, #2
 800874c:	e002      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <HAL_GPIO_DeInit+0xb0>
 8008752:	2300      	movs	r3, #0
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	f002 0203 	and.w	r2, r2, #3
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	4093      	lsls	r3, r2
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	429a      	cmp	r2, r3
 8008762:	d132      	bne.n	80087ca <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008764:	4b48      	ldr	r3, [pc, #288]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	43db      	mvns	r3, r3
 800876c:	4946      	ldr	r1, [pc, #280]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 800876e:	4013      	ands	r3, r2
 8008770:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008772:	4b45      	ldr	r3, [pc, #276]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	43db      	mvns	r3, r3
 800877a:	4943      	ldr	r1, [pc, #268]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 800877c:	4013      	ands	r3, r2
 800877e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008780:	4b41      	ldr	r3, [pc, #260]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	43db      	mvns	r3, r3
 8008788:	493f      	ldr	r1, [pc, #252]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 800878a:	4013      	ands	r3, r2
 800878c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800878e:	4b3e      	ldr	r3, [pc, #248]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	43db      	mvns	r3, r3
 8008796:	493c      	ldr	r1, [pc, #240]	@ (8008888 <HAL_GPIO_DeInit+0x1e4>)
 8008798:	4013      	ands	r3, r2
 800879a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	220f      	movs	r2, #15
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80087ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008868 <HAL_GPIO_DeInit+0x1c4>)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	089b      	lsrs	r3, r3, #2
 80087b2:	3302      	adds	r3, #2
 80087b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	43da      	mvns	r2, r3
 80087bc:	482a      	ldr	r0, [pc, #168]	@ (8008868 <HAL_GPIO_DeInit+0x1c4>)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	400a      	ands	r2, r1
 80087c4:	3302      	adds	r3, #2
 80087c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	2103      	movs	r1, #3
 80087d4:	fa01 f303 	lsl.w	r3, r1, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	401a      	ands	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	08da      	lsrs	r2, r3, #3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3208      	adds	r2, #8
 80087e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	220f      	movs	r2, #15
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	43db      	mvns	r3, r3
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	08d2      	lsrs	r2, r2, #3
 8008800:	4019      	ands	r1, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3208      	adds	r2, #8
 8008806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	2103      	movs	r1, #3
 8008814:	fa01 f303 	lsl.w	r3, r1, r3
 8008818:	43db      	mvns	r3, r3
 800881a:	401a      	ands	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	2101      	movs	r1, #1
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	fa01 f303 	lsl.w	r3, r1, r3
 800882c:	43db      	mvns	r3, r3
 800882e:	401a      	ands	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	2103      	movs	r1, #3
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	43db      	mvns	r3, r3
 8008844:	401a      	ands	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	3301      	adds	r3, #1
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b0f      	cmp	r3, #15
 8008854:	f67f af34 	bls.w	80086c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40013800 	.word	0x40013800
 800886c:	40020000 	.word	0x40020000
 8008870:	40020400 	.word	0x40020400
 8008874:	40020800 	.word	0x40020800
 8008878:	40020c00 	.word	0x40020c00
 800887c:	40021000 	.word	0x40021000
 8008880:	40021400 	.word	0x40021400
 8008884:	40021800 	.word	0x40021800
 8008888:	40013c00 	.word	0x40013c00

0800888c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	807b      	strh	r3, [r7, #2]
 8008898:	4613      	mov	r3, r2
 800889a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800889c:	787b      	ldrb	r3, [r7, #1]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088a2:	887a      	ldrh	r2, [r7, #2]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088a8:	e003      	b.n	80088b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088aa:	887b      	ldrh	r3, [r7, #2]
 80088ac:	041a      	lsls	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	619a      	str	r2, [r3, #24]
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80088ca:	4b08      	ldr	r3, [pc, #32]	@ (80088ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088cc:	695a      	ldr	r2, [r3, #20]
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d006      	beq.n	80088e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088d6:	4a05      	ldr	r2, [pc, #20]	@ (80088ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fc f8ca 	bl	8004a78 <HAL_GPIO_EXTI_Callback>
  }
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40013c00 	.word	0x40013c00

080088f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e12b      	b.n	8008b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7fe f97a 	bl	8006c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2224      	movs	r2, #36	@ 0x24
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008954:	f001 f912 	bl	8009b7c <HAL_RCC_GetPCLK1Freq>
 8008958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4a81      	ldr	r2, [pc, #516]	@ (8008b64 <HAL_I2C_Init+0x274>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d807      	bhi.n	8008974 <HAL_I2C_Init+0x84>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a80      	ldr	r2, [pc, #512]	@ (8008b68 <HAL_I2C_Init+0x278>)
 8008968:	4293      	cmp	r3, r2
 800896a:	bf94      	ite	ls
 800896c:	2301      	movls	r3, #1
 800896e:	2300      	movhi	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	e006      	b.n	8008982 <HAL_I2C_Init+0x92>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a7d      	ldr	r2, [pc, #500]	@ (8008b6c <HAL_I2C_Init+0x27c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	bf94      	ite	ls
 800897c:	2301      	movls	r3, #1
 800897e:	2300      	movhi	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e0e7      	b.n	8008b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	4a78      	ldr	r2, [pc, #480]	@ (8008b70 <HAL_I2C_Init+0x280>)
 800898e:	fba2 2303 	umull	r2, r3, r2, r3
 8008992:	0c9b      	lsrs	r3, r3, #18
 8008994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4a6a      	ldr	r2, [pc, #424]	@ (8008b64 <HAL_I2C_Init+0x274>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d802      	bhi.n	80089c4 <HAL_I2C_Init+0xd4>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	3301      	adds	r3, #1
 80089c2:	e009      	b.n	80089d8 <HAL_I2C_Init+0xe8>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80089ca:	fb02 f303 	mul.w	r3, r2, r3
 80089ce:	4a69      	ldr	r2, [pc, #420]	@ (8008b74 <HAL_I2C_Init+0x284>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	099b      	lsrs	r3, r3, #6
 80089d6:	3301      	adds	r3, #1
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	430b      	orrs	r3, r1
 80089de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80089ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	495c      	ldr	r1, [pc, #368]	@ (8008b64 <HAL_I2C_Init+0x274>)
 80089f4:	428b      	cmp	r3, r1
 80089f6:	d819      	bhi.n	8008a2c <HAL_I2C_Init+0x13c>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1e59      	subs	r1, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a06:	1c59      	adds	r1, r3, #1
 8008a08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008a0c:	400b      	ands	r3, r1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <HAL_I2C_Init+0x138>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1e59      	subs	r1, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	005b      	lsls	r3, r3, #1
 8008a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a20:	3301      	adds	r3, #1
 8008a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a26:	e051      	b.n	8008acc <HAL_I2C_Init+0x1dc>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	e04f      	b.n	8008acc <HAL_I2C_Init+0x1dc>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d111      	bne.n	8008a58 <HAL_I2C_Init+0x168>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	1e58      	subs	r0, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6859      	ldr	r1, [r3, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	440b      	add	r3, r1
 8008a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a46:	3301      	adds	r3, #1
 8008a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bf0c      	ite	eq
 8008a50:	2301      	moveq	r3, #1
 8008a52:	2300      	movne	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	e012      	b.n	8008a7e <HAL_I2C_Init+0x18e>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	1e58      	subs	r0, r3, #1
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6859      	ldr	r1, [r3, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	0099      	lsls	r1, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bf0c      	ite	eq
 8008a78:	2301      	moveq	r3, #1
 8008a7a:	2300      	movne	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <HAL_I2C_Init+0x196>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e022      	b.n	8008acc <HAL_I2C_Init+0x1dc>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10e      	bne.n	8008aac <HAL_I2C_Init+0x1bc>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1e58      	subs	r0, r3, #1
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6859      	ldr	r1, [r3, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	440b      	add	r3, r1
 8008a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aaa:	e00f      	b.n	8008acc <HAL_I2C_Init+0x1dc>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	1e58      	subs	r0, r3, #1
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6859      	ldr	r1, [r3, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	0099      	lsls	r1, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	6809      	ldr	r1, [r1, #0]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69da      	ldr	r2, [r3, #28]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6911      	ldr	r1, [r2, #16]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	68d2      	ldr	r2, [r2, #12]
 8008b06:	4311      	orrs	r1, r2
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695a      	ldr	r2, [r3, #20]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	000186a0 	.word	0x000186a0
 8008b68:	001e847f 	.word	0x001e847f
 8008b6c:	003d08ff 	.word	0x003d08ff
 8008b70:	431bde83 	.word	0x431bde83
 8008b74:	10624dd3 	.word	0x10624dd3

08008b78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e021      	b.n	8008bce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2224      	movs	r2, #36	@ 0x24
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0201 	bic.w	r2, r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fe f8d4 	bl	8006d50 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af02      	add	r7, sp, #8
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	4608      	mov	r0, r1
 8008be2:	4611      	mov	r1, r2
 8008be4:	461a      	mov	r2, r3
 8008be6:	4603      	mov	r3, r0
 8008be8:	817b      	strh	r3, [r7, #10]
 8008bea:	460b      	mov	r3, r1
 8008bec:	813b      	strh	r3, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bf2:	f7fe fe7f 	bl	80078f4 <HAL_GetTick>
 8008bf6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	f040 80d9 	bne.w	8008db8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	2319      	movs	r3, #25
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	496d      	ldr	r1, [pc, #436]	@ (8008dc4 <HAL_I2C_Mem_Write+0x1ec>)
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 fc8b 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e0cc      	b.n	8008dba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <HAL_I2C_Mem_Write+0x56>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e0c5      	b.n	8008dba <HAL_I2C_Mem_Write+0x1e2>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d007      	beq.n	8008c54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f042 0201 	orr.w	r2, r2, #1
 8008c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2221      	movs	r2, #33	@ 0x21
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2240      	movs	r2, #64	@ 0x40
 8008c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a3a      	ldr	r2, [r7, #32]
 8008c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4a4d      	ldr	r2, [pc, #308]	@ (8008dc8 <HAL_I2C_Mem_Write+0x1f0>)
 8008c94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c96:	88f8      	ldrh	r0, [r7, #6]
 8008c98:	893a      	ldrh	r2, [r7, #8]
 8008c9a:	8979      	ldrh	r1, [r7, #10]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 fac2 	bl	8009230 <I2C_RequestMemoryWrite>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d052      	beq.n	8008d58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e081      	b.n	8008dba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fd50 	bl	8009760 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d107      	bne.n	8008cde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e06b      	b.n	8008dba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d11b      	bne.n	8008d58 <HAL_I2C_Mem_Write+0x180>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d017      	beq.n	8008d58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2c:	781a      	ldrb	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1aa      	bne.n	8008cb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fd43 	bl	80097f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00d      	beq.n	8008d8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d107      	bne.n	8008d88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e016      	b.n	8008dba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	e000      	b.n	8008dba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008db8:	2302      	movs	r3, #2
  }
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	00100002 	.word	0x00100002
 8008dc8:	ffff0000 	.word	0xffff0000

08008dcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08c      	sub	sp, #48	@ 0x30
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	817b      	strh	r3, [r7, #10]
 8008dde:	460b      	mov	r3, r1
 8008de0:	813b      	strh	r3, [r7, #8]
 8008de2:	4613      	mov	r3, r2
 8008de4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008de6:	f7fe fd85 	bl	80078f4 <HAL_GetTick>
 8008dea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	f040 8214 	bne.w	8009222 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	2319      	movs	r3, #25
 8008e00:	2201      	movs	r2, #1
 8008e02:	497b      	ldr	r1, [pc, #492]	@ (8008ff0 <HAL_I2C_Mem_Read+0x224>)
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fb91 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008e10:	2302      	movs	r3, #2
 8008e12:	e207      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d101      	bne.n	8008e22 <HAL_I2C_Mem_Read+0x56>
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e200      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d007      	beq.n	8008e48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0201 	orr.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2222      	movs	r2, #34	@ 0x22
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2240      	movs	r2, #64	@ 0x40
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4a5b      	ldr	r2, [pc, #364]	@ (8008ff4 <HAL_I2C_Mem_Read+0x228>)
 8008e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e8a:	88f8      	ldrh	r0, [r7, #6]
 8008e8c:	893a      	ldrh	r2, [r7, #8]
 8008e8e:	8979      	ldrh	r1, [r7, #10]
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	4603      	mov	r3, r0
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 fa5e 	bl	800935c <I2C_RequestMemoryRead>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e1bc      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d113      	bne.n	8008eda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	623b      	str	r3, [r7, #32]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	623b      	str	r3, [r7, #32]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	623b      	str	r3, [r7, #32]
 8008ec6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e190      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d11b      	bne.n	8008f1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	61fb      	str	r3, [r7, #28]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	61fb      	str	r3, [r7, #28]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	e170      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d11b      	bne.n	8008f5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f42:	2300      	movs	r3, #0
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	e150      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f70:	e144      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	f200 80f1 	bhi.w	800915e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d123      	bne.n	8008fcc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 fc79 	bl	8009880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e145      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691a      	ldr	r2, [r3, #16]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008fca:	e117      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d14e      	bne.n	8009072 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4906      	ldr	r1, [pc, #24]	@ (8008ff8 <HAL_I2C_Mem_Read+0x22c>)
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 faa4 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d008      	beq.n	8008ffc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e11a      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
 8008fee:	bf00      	nop
 8008ff0:	00100002 	.word	0x00100002
 8008ff4:	ffff0000 	.word	0xffff0000
 8008ff8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800900a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691a      	ldr	r2, [r3, #16]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009070:	e0c4      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009078:	2200      	movs	r2, #0
 800907a:	496c      	ldr	r1, [pc, #432]	@ (800922c <HAL_I2C_Mem_Read+0x460>)
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 fa55 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0cb      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800909a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	2200      	movs	r2, #0
 80090d6:	4955      	ldr	r1, [pc, #340]	@ (800922c <HAL_I2C_Mem_Read+0x460>)
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 fa27 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e09d      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	b29a      	uxth	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691a      	ldr	r2, [r3, #16]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009134:	b2d2      	uxtb	r2, r2
 8009136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800915c:	e04e      	b.n	80091fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800915e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fb8c 	bl	8009880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e058      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	691a      	ldr	r2, [r3, #16]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917c:	b2d2      	uxtb	r2, r2
 800917e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800918e:	3b01      	subs	r3, #1
 8009190:	b29a      	uxth	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800919a:	b29b      	uxth	r3, r3
 800919c:	3b01      	subs	r3, #1
 800919e:	b29a      	uxth	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d124      	bne.n	80091fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d107      	bne.n	80091ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009200:	2b00      	cmp	r3, #0
 8009202:	f47f aeb6 	bne.w	8008f72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2220      	movs	r2, #32
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	e000      	b.n	8009224 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009222:	2302      	movs	r3, #2
  }
}
 8009224:	4618      	mov	r0, r3
 8009226:	3728      	adds	r7, #40	@ 0x28
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	00010004 	.word	0x00010004

08009230 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4603      	mov	r3, r0
 8009240:	817b      	strh	r3, [r7, #10]
 8009242:	460b      	mov	r3, r1
 8009244:	813b      	strh	r3, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	2200      	movs	r2, #0
 8009262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f960 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00d      	beq.n	800928e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009280:	d103      	bne.n	800928a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009288:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e05f      	b.n	800934e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800928e:	897b      	ldrh	r3, [r7, #10]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	461a      	mov	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800929c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	492d      	ldr	r1, [pc, #180]	@ (8009358 <I2C_RequestMemoryWrite+0x128>)
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f9bb 	bl	8009620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e04c      	b.n	800934e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092cc:	6a39      	ldr	r1, [r7, #32]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fa46 	bl	8009760 <I2C_WaitOnTXEFlagUntilTimeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00d      	beq.n	80092f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d107      	bne.n	80092f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e02b      	b.n	800934e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d105      	bne.n	8009308 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092fc:	893b      	ldrh	r3, [r7, #8]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	611a      	str	r2, [r3, #16]
 8009306:	e021      	b.n	800934c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009308:	893b      	ldrh	r3, [r7, #8]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	b29b      	uxth	r3, r3
 800930e:	b2da      	uxtb	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009318:	6a39      	ldr	r1, [r7, #32]
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fa20 	bl	8009760 <I2C_WaitOnTXEFlagUntilTimeout>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	2b04      	cmp	r3, #4
 800932c:	d107      	bne.n	800933e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800933c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e005      	b.n	800934e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	b2da      	uxtb	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	00010002 	.word	0x00010002

0800935c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	4608      	mov	r0, r1
 8009366:	4611      	mov	r1, r2
 8009368:	461a      	mov	r2, r3
 800936a:	4603      	mov	r3, r0
 800936c:	817b      	strh	r3, [r7, #10]
 800936e:	460b      	mov	r3, r1
 8009370:	813b      	strh	r3, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009384:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	2200      	movs	r2, #0
 800939e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 f8c2 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00d      	beq.n	80093ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093bc:	d103      	bne.n	80093c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e0aa      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093ca:	897b      	ldrh	r3, [r7, #10]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	461a      	mov	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80093d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	4952      	ldr	r1, [pc, #328]	@ (8009528 <I2C_RequestMemoryRead+0x1cc>)
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f91d 	bl	8009620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e097      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009408:	6a39      	ldr	r1, [r7, #32]
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 f9a8 	bl	8009760 <I2C_WaitOnTXEFlagUntilTimeout>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00d      	beq.n	8009432 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941a:	2b04      	cmp	r3, #4
 800941c:	d107      	bne.n	800942e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800942c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e076      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d105      	bne.n	8009444 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009438:	893b      	ldrh	r3, [r7, #8]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	611a      	str	r2, [r3, #16]
 8009442:	e021      	b.n	8009488 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	0a1b      	lsrs	r3, r3, #8
 8009448:	b29b      	uxth	r3, r3
 800944a:	b2da      	uxtb	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009454:	6a39      	ldr	r1, [r7, #32]
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f982 	bl	8009760 <I2C_WaitOnTXEFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00d      	beq.n	800947e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009466:	2b04      	cmp	r3, #4
 8009468:	d107      	bne.n	800947a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e050      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800947e:	893b      	ldrh	r3, [r7, #8]
 8009480:	b2da      	uxtb	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800948a:	6a39      	ldr	r1, [r7, #32]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f967 	bl	8009760 <I2C_WaitOnTXEFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00d      	beq.n	80094b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949c:	2b04      	cmp	r3, #4
 800949e:	d107      	bne.n	80094b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e035      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f82b 	bl	800952c <I2C_WaitOnFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00d      	beq.n	80094f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ea:	d103      	bne.n	80094f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e013      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80094f8:	897b      	ldrh	r3, [r7, #10]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	b2da      	uxtb	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	6a3a      	ldr	r2, [r7, #32]
 800950c:	4906      	ldr	r1, [pc, #24]	@ (8009528 <I2C_RequestMemoryRead+0x1cc>)
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 f886 	bl	8009620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	00010002 	.word	0x00010002

0800952c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	4613      	mov	r3, r2
 800953a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800953c:	e048      	b.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d044      	beq.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009546:	f7fe f9d5 	bl	80078f4 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d302      	bcc.n	800955c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d139      	bne.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10d      	bne.n	8009582 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	43da      	mvns	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	4013      	ands	r3, r2
 8009572:	b29b      	uxth	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	bf0c      	ite	eq
 8009578:	2301      	moveq	r3, #1
 800957a:	2300      	movne	r3, #0
 800957c:	b2db      	uxtb	r3, r3
 800957e:	461a      	mov	r2, r3
 8009580:	e00c      	b.n	800959c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	43da      	mvns	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	bf0c      	ite	eq
 8009594:	2301      	moveq	r3, #1
 8009596:	2300      	movne	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d116      	bne.n	80095d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095bc:	f043 0220 	orr.w	r2, r3, #32
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e023      	b.n	8009618 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d10d      	bne.n	80095f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	43da      	mvns	r2, r3
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	4013      	ands	r3, r2
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bf0c      	ite	eq
 80095ec:	2301      	moveq	r3, #1
 80095ee:	2300      	movne	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	e00c      	b.n	8009610 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	43da      	mvns	r2, r3
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4013      	ands	r3, r2
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	bf0c      	ite	eq
 8009608:	2301      	moveq	r3, #1
 800960a:	2300      	movne	r3, #0
 800960c:	b2db      	uxtb	r3, r3
 800960e:	461a      	mov	r2, r3
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	429a      	cmp	r2, r3
 8009614:	d093      	beq.n	800953e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800962e:	e071      	b.n	8009714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800963a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800963e:	d123      	bne.n	8009688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800964e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009674:	f043 0204 	orr.w	r2, r3, #4
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e067      	b.n	8009758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d041      	beq.n	8009714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009690:	f7fe f930 	bl	80078f4 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d136      	bne.n	8009714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d10c      	bne.n	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	43da      	mvns	r2, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4013      	ands	r3, r2
 80096bc:	b29b      	uxth	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bf14      	ite	ne
 80096c2:	2301      	movne	r3, #1
 80096c4:	2300      	moveq	r3, #0
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	e00b      	b.n	80096e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	43da      	mvns	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4013      	ands	r3, r2
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bf14      	ite	ne
 80096dc:	2301      	movne	r3, #1
 80096de:	2300      	moveq	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d016      	beq.n	8009714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009700:	f043 0220 	orr.w	r2, r3, #32
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e021      	b.n	8009758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	0c1b      	lsrs	r3, r3, #16
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b01      	cmp	r3, #1
 800971c:	d10c      	bne.n	8009738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	43da      	mvns	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4013      	ands	r3, r2
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	bf14      	ite	ne
 8009730:	2301      	movne	r3, #1
 8009732:	2300      	moveq	r3, #0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	e00b      	b.n	8009750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	43da      	mvns	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4013      	ands	r3, r2
 8009744:	b29b      	uxth	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	bf14      	ite	ne
 800974a:	2301      	movne	r3, #1
 800974c:	2300      	moveq	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	f47f af6d 	bne.w	8009630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800976c:	e034      	b.n	80097d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f8e3 	bl	800993a <I2C_IsAcknowledgeFailed>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e034      	b.n	80097e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d028      	beq.n	80097d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009786:	f7fe f8b5 	bl	80078f4 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d302      	bcc.n	800979c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11d      	bne.n	80097d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a6:	2b80      	cmp	r3, #128	@ 0x80
 80097a8:	d016      	beq.n	80097d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c4:	f043 0220 	orr.w	r2, r3, #32
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e007      	b.n	80097e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e2:	2b80      	cmp	r3, #128	@ 0x80
 80097e4:	d1c3      	bne.n	800976e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097fc:	e034      	b.n	8009868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 f89b 	bl	800993a <I2C_IsAcknowledgeFailed>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e034      	b.n	8009878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009814:	d028      	beq.n	8009868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009816:	f7fe f86d 	bl	80078f4 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	429a      	cmp	r2, r3
 8009824:	d302      	bcc.n	800982c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d11d      	bne.n	8009868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 0304 	and.w	r3, r3, #4
 8009836:	2b04      	cmp	r3, #4
 8009838:	d016      	beq.n	8009868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009854:	f043 0220 	orr.w	r2, r3, #32
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e007      	b.n	8009878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	f003 0304 	and.w	r3, r3, #4
 8009872:	2b04      	cmp	r3, #4
 8009874:	d1c3      	bne.n	80097fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800988c:	e049      	b.n	8009922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0310 	and.w	r3, r3, #16
 8009898:	2b10      	cmp	r3, #16
 800989a:	d119      	bne.n	80098d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f06f 0210 	mvn.w	r2, #16
 80098a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e030      	b.n	8009932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d0:	f7fe f810 	bl	80078f4 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d302      	bcc.n	80098e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11d      	bne.n	8009922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f0:	2b40      	cmp	r3, #64	@ 0x40
 80098f2:	d016      	beq.n	8009922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990e:	f043 0220 	orr.w	r2, r3, #32
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e007      	b.n	8009932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992c:	2b40      	cmp	r3, #64	@ 0x40
 800992e:	d1ae      	bne.n	800988e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800993a:	b480      	push	{r7}
 800993c:	b083      	sub	sp, #12
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800994c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009950:	d11b      	bne.n	800998a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800995a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009976:	f043 0204 	orr.w	r2, r3, #4
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e0cc      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099ac:	4b68      	ldr	r3, [pc, #416]	@ (8009b50 <HAL_RCC_ClockConfig+0x1b8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d90c      	bls.n	80099d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ba:	4b65      	ldr	r3, [pc, #404]	@ (8009b50 <HAL_RCC_ClockConfig+0x1b8>)
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099c2:	4b63      	ldr	r3, [pc, #396]	@ (8009b50 <HAL_RCC_ClockConfig+0x1b8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d001      	beq.n	80099d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e0b8      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0302 	and.w	r3, r3, #2
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d020      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099ec:	4b59      	ldr	r3, [pc, #356]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	4a58      	ldr	r2, [pc, #352]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 80099f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80099f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0308 	and.w	r3, r3, #8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a04:	4b53      	ldr	r3, [pc, #332]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	4a52      	ldr	r2, [pc, #328]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a10:	4b50      	ldr	r3, [pc, #320]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	494d      	ldr	r1, [pc, #308]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d044      	beq.n	8009ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d107      	bne.n	8009a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a36:	4b47      	ldr	r3, [pc, #284]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d119      	bne.n	8009a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e07f      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d003      	beq.n	8009a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d107      	bne.n	8009a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a56:	4b3f      	ldr	r3, [pc, #252]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e06f      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a66:	4b3b      	ldr	r3, [pc, #236]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e067      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a76:	4b37      	ldr	r3, [pc, #220]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f023 0203 	bic.w	r2, r3, #3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	4934      	ldr	r1, [pc, #208]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a88:	f7fd ff34 	bl	80078f4 <HAL_GetTick>
 8009a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a8e:	e00a      	b.n	8009aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a90:	f7fd ff30 	bl	80078f4 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e04f      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f003 020c 	and.w	r2, r3, #12
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d1eb      	bne.n	8009a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ab8:	4b25      	ldr	r3, [pc, #148]	@ (8009b50 <HAL_RCC_ClockConfig+0x1b8>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d20c      	bcs.n	8009ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ac6:	4b22      	ldr	r3, [pc, #136]	@ (8009b50 <HAL_RCC_ClockConfig+0x1b8>)
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ace:	4b20      	ldr	r3, [pc, #128]	@ (8009b50 <HAL_RCC_ClockConfig+0x1b8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d001      	beq.n	8009ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e032      	b.n	8009b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009aec:	4b19      	ldr	r3, [pc, #100]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4916      	ldr	r1, [pc, #88]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b0a:	4b12      	ldr	r3, [pc, #72]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	490e      	ldr	r1, [pc, #56]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009b1e:	f000 f855 	bl	8009bcc <HAL_RCC_GetSysClockFreq>
 8009b22:	4602      	mov	r2, r0
 8009b24:	4b0b      	ldr	r3, [pc, #44]	@ (8009b54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	091b      	lsrs	r3, r3, #4
 8009b2a:	f003 030f 	and.w	r3, r3, #15
 8009b2e:	490a      	ldr	r1, [pc, #40]	@ (8009b58 <HAL_RCC_ClockConfig+0x1c0>)
 8009b30:	5ccb      	ldrb	r3, [r1, r3]
 8009b32:	fa22 f303 	lsr.w	r3, r2, r3
 8009b36:	4a09      	ldr	r2, [pc, #36]	@ (8009b5c <HAL_RCC_ClockConfig+0x1c4>)
 8009b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009b3a:	4b09      	ldr	r3, [pc, #36]	@ (8009b60 <HAL_RCC_ClockConfig+0x1c8>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fd fe94 	bl	800786c <HAL_InitTick>

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40023c00 	.word	0x40023c00
 8009b54:	40023800 	.word	0x40023800
 8009b58:	080118e0 	.word	0x080118e0
 8009b5c:	20000040 	.word	0x20000040
 8009b60:	20000044 	.word	0x20000044

08009b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b68:	4b03      	ldr	r3, [pc, #12]	@ (8009b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000040 	.word	0x20000040

08009b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b80:	f7ff fff0 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009b84:	4602      	mov	r2, r0
 8009b86:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	0a9b      	lsrs	r3, r3, #10
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	4903      	ldr	r1, [pc, #12]	@ (8009ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b92:	5ccb      	ldrb	r3, [r1, r3]
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	40023800 	.word	0x40023800
 8009ba0:	080118f0 	.word	0x080118f0

08009ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ba8:	f7ff ffdc 	bl	8009b64 <HAL_RCC_GetHCLKFreq>
 8009bac:	4602      	mov	r2, r0
 8009bae:	4b05      	ldr	r3, [pc, #20]	@ (8009bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	0b5b      	lsrs	r3, r3, #13
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	4903      	ldr	r1, [pc, #12]	@ (8009bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bba:	5ccb      	ldrb	r3, [r1, r3]
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40023800 	.word	0x40023800
 8009bc8:	080118f0 	.word	0x080118f0

08009bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bd0:	b0ae      	sub	sp, #184	@ 0xb8
 8009bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bf2:	4bcb      	ldr	r3, [pc, #812]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f003 030c 	and.w	r3, r3, #12
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	f200 8206 	bhi.w	800a00c <HAL_RCC_GetSysClockFreq+0x440>
 8009c00:	a201      	add	r2, pc, #4	@ (adr r2, 8009c08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c3d 	.word	0x08009c3d
 8009c0c:	0800a00d 	.word	0x0800a00d
 8009c10:	0800a00d 	.word	0x0800a00d
 8009c14:	0800a00d 	.word	0x0800a00d
 8009c18:	08009c45 	.word	0x08009c45
 8009c1c:	0800a00d 	.word	0x0800a00d
 8009c20:	0800a00d 	.word	0x0800a00d
 8009c24:	0800a00d 	.word	0x0800a00d
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	0800a00d 	.word	0x0800a00d
 8009c30:	0800a00d 	.word	0x0800a00d
 8009c34:	0800a00d 	.word	0x0800a00d
 8009c38:	08009e3d 	.word	0x08009e3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c3c:	4bb9      	ldr	r3, [pc, #740]	@ (8009f24 <HAL_RCC_GetSysClockFreq+0x358>)
 8009c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c42:	e1e7      	b.n	800a014 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c44:	4bb8      	ldr	r3, [pc, #736]	@ (8009f28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c4a:	e1e3      	b.n	800a014 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c4c:	4bb4      	ldr	r3, [pc, #720]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c58:	4bb1      	ldr	r3, [pc, #708]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d071      	beq.n	8009d48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c64:	4bae      	ldr	r3, [pc, #696]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	099b      	lsrs	r3, r3, #6
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c70:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	f04f 0000 	mov.w	r0, #0
 8009c92:	f04f 0100 	mov.w	r1, #0
 8009c96:	0159      	lsls	r1, r3, #5
 8009c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c9c:	0150      	lsls	r0, r2, #5
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	1a51      	subs	r1, r2, r1
 8009ca6:	6439      	str	r1, [r7, #64]	@ 0x40
 8009ca8:	4629      	mov	r1, r5
 8009caa:	eb63 0301 	sbc.w	r3, r3, r1
 8009cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	018b      	lsls	r3, r1, #6
 8009cc0:	4641      	mov	r1, r8
 8009cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009cc6:	4641      	mov	r1, r8
 8009cc8:	018a      	lsls	r2, r1, #6
 8009cca:	4641      	mov	r1, r8
 8009ccc:	1a51      	subs	r1, r2, r1
 8009cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	00cb      	lsls	r3, r1, #3
 8009ce8:	4641      	mov	r1, r8
 8009cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cee:	4641      	mov	r1, r8
 8009cf0:	00ca      	lsls	r2, r1, #3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cfe:	462b      	mov	r3, r5
 8009d00:	460a      	mov	r2, r1
 8009d02:	eb42 0303 	adc.w	r3, r2, r3
 8009d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	f04f 0300 	mov.w	r3, #0
 8009d10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009d14:	4629      	mov	r1, r5
 8009d16:	024b      	lsls	r3, r1, #9
 8009d18:	4621      	mov	r1, r4
 8009d1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009d1e:	4621      	mov	r1, r4
 8009d20:	024a      	lsls	r2, r1, #9
 8009d22:	4610      	mov	r0, r2
 8009d24:	4619      	mov	r1, r3
 8009d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009d38:	f7f7 f904 	bl	8000f44 <__aeabi_uldivmod>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4613      	mov	r3, r2
 8009d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d46:	e067      	b.n	8009e18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d48:	4b75      	ldr	r3, [pc, #468]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	099b      	lsrs	r3, r3, #6
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d62:	2300      	movs	r3, #0
 8009d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	f04f 0000 	mov.w	r0, #0
 8009d72:	f04f 0100 	mov.w	r1, #0
 8009d76:	0159      	lsls	r1, r3, #5
 8009d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d7c:	0150      	lsls	r0, r2, #5
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4621      	mov	r1, r4
 8009d84:	1a51      	subs	r1, r2, r1
 8009d86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d88:	4629      	mov	r1, r5
 8009d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8009d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d90:	f04f 0200 	mov.w	r2, #0
 8009d94:	f04f 0300 	mov.w	r3, #0
 8009d98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	018b      	lsls	r3, r1, #6
 8009da0:	4641      	mov	r1, r8
 8009da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009da6:	4641      	mov	r1, r8
 8009da8:	018a      	lsls	r2, r1, #6
 8009daa:	4641      	mov	r1, r8
 8009dac:	ebb2 0a01 	subs.w	sl, r2, r1
 8009db0:	4649      	mov	r1, r9
 8009db2:	eb63 0b01 	sbc.w	fp, r3, r1
 8009db6:	f04f 0200 	mov.w	r2, #0
 8009dba:	f04f 0300 	mov.w	r3, #0
 8009dbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009dc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dca:	4692      	mov	sl, r2
 8009dcc:	469b      	mov	fp, r3
 8009dce:	4623      	mov	r3, r4
 8009dd0:	eb1a 0303 	adds.w	r3, sl, r3
 8009dd4:	623b      	str	r3, [r7, #32]
 8009dd6:	462b      	mov	r3, r5
 8009dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8009ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	f04f 0300 	mov.w	r3, #0
 8009de6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009dea:	4629      	mov	r1, r5
 8009dec:	028b      	lsls	r3, r1, #10
 8009dee:	4621      	mov	r1, r4
 8009df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009df4:	4621      	mov	r1, r4
 8009df6:	028a      	lsls	r2, r1, #10
 8009df8:	4610      	mov	r0, r2
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e00:	2200      	movs	r2, #0
 8009e02:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e04:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009e0a:	f7f7 f89b 	bl	8000f44 <__aeabi_uldivmod>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	4613      	mov	r3, r2
 8009e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009e18:	4b41      	ldr	r3, [pc, #260]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	f003 0303 	and.w	r3, r3, #3
 8009e22:	3301      	adds	r3, #1
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009e3a:	e0eb      	b.n	800a014 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e3c:	4b38      	ldr	r3, [pc, #224]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e48:	4b35      	ldr	r3, [pc, #212]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d06b      	beq.n	8009f2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e54:	4b32      	ldr	r3, [pc, #200]	@ (8009f20 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	099b      	lsrs	r3, r3, #6
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e68:	2300      	movs	r3, #0
 8009e6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009e70:	4622      	mov	r2, r4
 8009e72:	462b      	mov	r3, r5
 8009e74:	f04f 0000 	mov.w	r0, #0
 8009e78:	f04f 0100 	mov.w	r1, #0
 8009e7c:	0159      	lsls	r1, r3, #5
 8009e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e82:	0150      	lsls	r0, r2, #5
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4621      	mov	r1, r4
 8009e8a:	1a51      	subs	r1, r2, r1
 8009e8c:	61b9      	str	r1, [r7, #24]
 8009e8e:	4629      	mov	r1, r5
 8009e90:	eb63 0301 	sbc.w	r3, r3, r1
 8009e94:	61fb      	str	r3, [r7, #28]
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009ea2:	4659      	mov	r1, fp
 8009ea4:	018b      	lsls	r3, r1, #6
 8009ea6:	4651      	mov	r1, sl
 8009ea8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009eac:	4651      	mov	r1, sl
 8009eae:	018a      	lsls	r2, r1, #6
 8009eb0:	4651      	mov	r1, sl
 8009eb2:	ebb2 0801 	subs.w	r8, r2, r1
 8009eb6:	4659      	mov	r1, fp
 8009eb8:	eb63 0901 	sbc.w	r9, r3, r1
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ec8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ecc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ed0:	4690      	mov	r8, r2
 8009ed2:	4699      	mov	r9, r3
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	eb18 0303 	adds.w	r3, r8, r3
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	462b      	mov	r3, r5
 8009ede:	eb49 0303 	adc.w	r3, r9, r3
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	f04f 0300 	mov.w	r3, #0
 8009eec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	024b      	lsls	r3, r1, #9
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009efa:	4621      	mov	r1, r4
 8009efc:	024a      	lsls	r2, r1, #9
 8009efe:	4610      	mov	r0, r2
 8009f00:	4619      	mov	r1, r3
 8009f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f06:	2200      	movs	r2, #0
 8009f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f0a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009f0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f10:	f7f7 f818 	bl	8000f44 <__aeabi_uldivmod>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4613      	mov	r3, r2
 8009f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f1e:	e065      	b.n	8009fec <HAL_RCC_GetSysClockFreq+0x420>
 8009f20:	40023800 	.word	0x40023800
 8009f24:	00f42400 	.word	0x00f42400
 8009f28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f2c:	4b3d      	ldr	r3, [pc, #244]	@ (800a024 <HAL_RCC_GetSysClockFreq+0x458>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	099b      	lsrs	r3, r3, #6
 8009f32:	2200      	movs	r2, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	4611      	mov	r1, r2
 8009f38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f3e:	2300      	movs	r3, #0
 8009f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009f46:	4642      	mov	r2, r8
 8009f48:	464b      	mov	r3, r9
 8009f4a:	f04f 0000 	mov.w	r0, #0
 8009f4e:	f04f 0100 	mov.w	r1, #0
 8009f52:	0159      	lsls	r1, r3, #5
 8009f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f58:	0150      	lsls	r0, r2, #5
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4641      	mov	r1, r8
 8009f60:	1a51      	subs	r1, r2, r1
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	4649      	mov	r1, r9
 8009f66:	eb63 0301 	sbc.w	r3, r3, r1
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	f04f 0300 	mov.w	r3, #0
 8009f74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009f78:	4659      	mov	r1, fp
 8009f7a:	018b      	lsls	r3, r1, #6
 8009f7c:	4651      	mov	r1, sl
 8009f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f82:	4651      	mov	r1, sl
 8009f84:	018a      	lsls	r2, r1, #6
 8009f86:	4651      	mov	r1, sl
 8009f88:	1a54      	subs	r4, r2, r1
 8009f8a:	4659      	mov	r1, fp
 8009f8c:	eb63 0501 	sbc.w	r5, r3, r1
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	00eb      	lsls	r3, r5, #3
 8009f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f9e:	00e2      	lsls	r2, r4, #3
 8009fa0:	4614      	mov	r4, r2
 8009fa2:	461d      	mov	r5, r3
 8009fa4:	4643      	mov	r3, r8
 8009fa6:	18e3      	adds	r3, r4, r3
 8009fa8:	603b      	str	r3, [r7, #0]
 8009faa:	464b      	mov	r3, r9
 8009fac:	eb45 0303 	adc.w	r3, r5, r3
 8009fb0:	607b      	str	r3, [r7, #4]
 8009fb2:	f04f 0200 	mov.w	r2, #0
 8009fb6:	f04f 0300 	mov.w	r3, #0
 8009fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	028b      	lsls	r3, r1, #10
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009fc8:	4621      	mov	r1, r4
 8009fca:	028a      	lsls	r2, r1, #10
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fd8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009fda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009fde:	f7f6 ffb1 	bl	8000f44 <__aeabi_uldivmod>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009fec:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <HAL_RCC_GetSysClockFreq+0x458>)
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	0f1b      	lsrs	r3, r3, #28
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a002:	fbb2 f3f3 	udiv	r3, r2, r3
 800a006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a00a:	e003      	b.n	800a014 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a00c:	4b06      	ldr	r3, [pc, #24]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a00e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a012:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	37b8      	adds	r7, #184	@ 0xb8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a022:	bf00      	nop
 800a024:	40023800 	.word	0x40023800
 800a028:	00f42400 	.word	0x00f42400

0800a02c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e28d      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 8083 	beq.w	800a152 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a04c:	4b94      	ldr	r3, [pc, #592]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f003 030c 	and.w	r3, r3, #12
 800a054:	2b04      	cmp	r3, #4
 800a056:	d019      	beq.n	800a08c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a058:	4b91      	ldr	r3, [pc, #580]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f003 030c 	and.w	r3, r3, #12
        || \
 800a060:	2b08      	cmp	r3, #8
 800a062:	d106      	bne.n	800a072 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a064:	4b8e      	ldr	r3, [pc, #568]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a06c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a070:	d00c      	beq.n	800a08c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a072:	4b8b      	ldr	r3, [pc, #556]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a07a:	2b0c      	cmp	r3, #12
 800a07c:	d112      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a07e:	4b88      	ldr	r3, [pc, #544]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a08a:	d10b      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a08c:	4b84      	ldr	r3, [pc, #528]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d05b      	beq.n	800a150 <HAL_RCC_OscConfig+0x124>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d157      	bne.n	800a150 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e25a      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ac:	d106      	bne.n	800a0bc <HAL_RCC_OscConfig+0x90>
 800a0ae:	4b7c      	ldr	r3, [pc, #496]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a7b      	ldr	r2, [pc, #492]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	e01d      	b.n	800a0f8 <HAL_RCC_OscConfig+0xcc>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0c4:	d10c      	bne.n	800a0e0 <HAL_RCC_OscConfig+0xb4>
 800a0c6:	4b76      	ldr	r3, [pc, #472]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a75      	ldr	r2, [pc, #468]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	4b73      	ldr	r3, [pc, #460]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a72      	ldr	r2, [pc, #456]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	e00b      	b.n	800a0f8 <HAL_RCC_OscConfig+0xcc>
 800a0e0:	4b6f      	ldr	r3, [pc, #444]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a6e      	ldr	r2, [pc, #440]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	4b6c      	ldr	r3, [pc, #432]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a6b      	ldr	r2, [pc, #428]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a0f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d013      	beq.n	800a128 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a100:	f7fd fbf8 	bl	80078f4 <HAL_GetTick>
 800a104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a106:	e008      	b.n	800a11a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a108:	f7fd fbf4 	bl	80078f4 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b64      	cmp	r3, #100	@ 0x64
 800a114:	d901      	bls.n	800a11a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e21f      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a11a:	4b61      	ldr	r3, [pc, #388]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0f0      	beq.n	800a108 <HAL_RCC_OscConfig+0xdc>
 800a126:	e014      	b.n	800a152 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a128:	f7fd fbe4 	bl	80078f4 <HAL_GetTick>
 800a12c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a12e:	e008      	b.n	800a142 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a130:	f7fd fbe0 	bl	80078f4 <HAL_GetTick>
 800a134:	4602      	mov	r2, r0
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b64      	cmp	r3, #100	@ 0x64
 800a13c:	d901      	bls.n	800a142 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e20b      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a142:	4b57      	ldr	r3, [pc, #348]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f0      	bne.n	800a130 <HAL_RCC_OscConfig+0x104>
 800a14e:	e000      	b.n	800a152 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d06f      	beq.n	800a23e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a15e:	4b50      	ldr	r3, [pc, #320]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 030c 	and.w	r3, r3, #12
 800a166:	2b00      	cmp	r3, #0
 800a168:	d017      	beq.n	800a19a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a16a:	4b4d      	ldr	r3, [pc, #308]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f003 030c 	and.w	r3, r3, #12
        || \
 800a172:	2b08      	cmp	r3, #8
 800a174:	d105      	bne.n	800a182 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a176:	4b4a      	ldr	r3, [pc, #296]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a182:	4b47      	ldr	r3, [pc, #284]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a18a:	2b0c      	cmp	r3, #12
 800a18c:	d11c      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a18e:	4b44      	ldr	r3, [pc, #272]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d116      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a19a:	4b41      	ldr	r3, [pc, #260]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x186>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d001      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e1d3      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1b2:	4b3b      	ldr	r3, [pc, #236]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4937      	ldr	r1, [pc, #220]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1c6:	e03a      	b.n	800a23e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d020      	beq.n	800a212 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1d0:	4b34      	ldr	r3, [pc, #208]	@ (800a2a4 <HAL_RCC_OscConfig+0x278>)
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d6:	f7fd fb8d 	bl	80078f4 <HAL_GetTick>
 800a1da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1de:	f7fd fb89 	bl	80078f4 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e1b4      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0f0      	beq.n	800a1de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1fc:	4b28      	ldr	r3, [pc, #160]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4925      	ldr	r1, [pc, #148]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	600b      	str	r3, [r1, #0]
 800a210:	e015      	b.n	800a23e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a212:	4b24      	ldr	r3, [pc, #144]	@ (800a2a4 <HAL_RCC_OscConfig+0x278>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a218:	f7fd fb6c 	bl	80078f4 <HAL_GetTick>
 800a21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a21e:	e008      	b.n	800a232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a220:	f7fd fb68 	bl	80078f4 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e193      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a232:	4b1b      	ldr	r3, [pc, #108]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1f0      	bne.n	800a220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d036      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d016      	beq.n	800a280 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a252:	4b15      	ldr	r3, [pc, #84]	@ (800a2a8 <HAL_RCC_OscConfig+0x27c>)
 800a254:	2201      	movs	r2, #1
 800a256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a258:	f7fd fb4c 	bl	80078f4 <HAL_GetTick>
 800a25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a25e:	e008      	b.n	800a272 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a260:	f7fd fb48 	bl	80078f4 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e173      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a272:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a0 <HAL_RCC_OscConfig+0x274>)
 800a274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <HAL_RCC_OscConfig+0x234>
 800a27e:	e01b      	b.n	800a2b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a280:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <HAL_RCC_OscConfig+0x27c>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a286:	f7fd fb35 	bl	80078f4 <HAL_GetTick>
 800a28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a28c:	e00e      	b.n	800a2ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a28e:	f7fd fb31 	bl	80078f4 <HAL_GetTick>
 800a292:	4602      	mov	r2, r0
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d907      	bls.n	800a2ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e15c      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
 800a2a0:	40023800 	.word	0x40023800
 800a2a4:	42470000 	.word	0x42470000
 800a2a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2ac:	4b8a      	ldr	r3, [pc, #552]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a2ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2b0:	f003 0302 	and.w	r3, r3, #2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1ea      	bne.n	800a28e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 8097 	beq.w	800a3f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2ca:	4b83      	ldr	r3, [pc, #524]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10f      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
 800a2da:	4b7f      	ldr	r3, [pc, #508]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2de:	4a7e      	ldr	r2, [pc, #504]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a2e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2e4:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2e6:	4b7c      	ldr	r3, [pc, #496]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ee:	60bb      	str	r3, [r7, #8]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2f6:	4b79      	ldr	r3, [pc, #484]	@ (800a4dc <HAL_RCC_OscConfig+0x4b0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d118      	bne.n	800a334 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a302:	4b76      	ldr	r3, [pc, #472]	@ (800a4dc <HAL_RCC_OscConfig+0x4b0>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a75      	ldr	r2, [pc, #468]	@ (800a4dc <HAL_RCC_OscConfig+0x4b0>)
 800a308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a30c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a30e:	f7fd faf1 	bl	80078f4 <HAL_GetTick>
 800a312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a314:	e008      	b.n	800a328 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a316:	f7fd faed 	bl	80078f4 <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	2b02      	cmp	r3, #2
 800a322:	d901      	bls.n	800a328 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e118      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a328:	4b6c      	ldr	r3, [pc, #432]	@ (800a4dc <HAL_RCC_OscConfig+0x4b0>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a330:	2b00      	cmp	r3, #0
 800a332:	d0f0      	beq.n	800a316 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d106      	bne.n	800a34a <HAL_RCC_OscConfig+0x31e>
 800a33c:	4b66      	ldr	r3, [pc, #408]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a33e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a340:	4a65      	ldr	r2, [pc, #404]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	6713      	str	r3, [r2, #112]	@ 0x70
 800a348:	e01c      	b.n	800a384 <HAL_RCC_OscConfig+0x358>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	2b05      	cmp	r3, #5
 800a350:	d10c      	bne.n	800a36c <HAL_RCC_OscConfig+0x340>
 800a352:	4b61      	ldr	r3, [pc, #388]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a356:	4a60      	ldr	r2, [pc, #384]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a358:	f043 0304 	orr.w	r3, r3, #4
 800a35c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a35e:	4b5e      	ldr	r3, [pc, #376]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a362:	4a5d      	ldr	r2, [pc, #372]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	6713      	str	r3, [r2, #112]	@ 0x70
 800a36a:	e00b      	b.n	800a384 <HAL_RCC_OscConfig+0x358>
 800a36c:	4b5a      	ldr	r3, [pc, #360]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a370:	4a59      	ldr	r2, [pc, #356]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a372:	f023 0301 	bic.w	r3, r3, #1
 800a376:	6713      	str	r3, [r2, #112]	@ 0x70
 800a378:	4b57      	ldr	r3, [pc, #348]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a37a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a37c:	4a56      	ldr	r2, [pc, #344]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a37e:	f023 0304 	bic.w	r3, r3, #4
 800a382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d015      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a38c:	f7fd fab2 	bl	80078f4 <HAL_GetTick>
 800a390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a392:	e00a      	b.n	800a3aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a394:	f7fd faae 	bl	80078f4 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d901      	bls.n	800a3aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e0d7      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0ee      	beq.n	800a394 <HAL_RCC_OscConfig+0x368>
 800a3b6:	e014      	b.n	800a3e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b8:	f7fd fa9c 	bl	80078f4 <HAL_GetTick>
 800a3bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3be:	e00a      	b.n	800a3d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3c0:	f7fd fa98 	bl	80078f4 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e0c1      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3d6:	4b40      	ldr	r3, [pc, #256]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1ee      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d105      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3e8:	4b3b      	ldr	r3, [pc, #236]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ec:	4a3a      	ldr	r2, [pc, #232]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 80ad 	beq.w	800a558 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3fe:	4b36      	ldr	r3, [pc, #216]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f003 030c 	and.w	r3, r3, #12
 800a406:	2b08      	cmp	r3, #8
 800a408:	d060      	beq.n	800a4cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d145      	bne.n	800a49e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a412:	4b33      	ldr	r3, [pc, #204]	@ (800a4e0 <HAL_RCC_OscConfig+0x4b4>)
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a418:	f7fd fa6c 	bl	80078f4 <HAL_GetTick>
 800a41c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a41e:	e008      	b.n	800a432 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a420:	f7fd fa68 	bl	80078f4 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e093      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a432:	4b29      	ldr	r3, [pc, #164]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1f0      	bne.n	800a420 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69da      	ldr	r2, [r3, #28]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a44c:	019b      	lsls	r3, r3, #6
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a454:	085b      	lsrs	r3, r3, #1
 800a456:	3b01      	subs	r3, #1
 800a458:	041b      	lsls	r3, r3, #16
 800a45a:	431a      	orrs	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a460:	061b      	lsls	r3, r3, #24
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a468:	071b      	lsls	r3, r3, #28
 800a46a:	491b      	ldr	r1, [pc, #108]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a470:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e0 <HAL_RCC_OscConfig+0x4b4>)
 800a472:	2201      	movs	r2, #1
 800a474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a476:	f7fd fa3d 	bl	80078f4 <HAL_GetTick>
 800a47a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a47c:	e008      	b.n	800a490 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a47e:	f7fd fa39 	bl	80078f4 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d901      	bls.n	800a490 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e064      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a490:	4b11      	ldr	r3, [pc, #68]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d0f0      	beq.n	800a47e <HAL_RCC_OscConfig+0x452>
 800a49c:	e05c      	b.n	800a558 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a49e:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <HAL_RCC_OscConfig+0x4b4>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a4:	f7fd fa26 	bl	80078f4 <HAL_GetTick>
 800a4a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4ac:	f7fd fa22 	bl	80078f4 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e04d      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4be:	4b06      	ldr	r3, [pc, #24]	@ (800a4d8 <HAL_RCC_OscConfig+0x4ac>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f0      	bne.n	800a4ac <HAL_RCC_OscConfig+0x480>
 800a4ca:	e045      	b.n	800a558 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e040      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40007000 	.word	0x40007000
 800a4e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4e4:	4b1f      	ldr	r3, [pc, #124]	@ (800a564 <HAL_RCC_OscConfig+0x538>)
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d030      	beq.n	800a554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d129      	bne.n	800a554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d122      	bne.n	800a554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a514:	4013      	ands	r3, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a51a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d119      	bne.n	800a554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	3b01      	subs	r3, #1
 800a52e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a530:	429a      	cmp	r2, r3
 800a532:	d10f      	bne.n	800a554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a540:	429a      	cmp	r2, r3
 800a542:	d107      	bne.n	800a554 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a54e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a550:	429a      	cmp	r2, r3
 800a552:	d001      	beq.n	800a558 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	40023800 	.word	0x40023800

0800a568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e041      	b.n	800a5fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7fc fc1c 	bl	8006dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	f000 fa7e 	bl	800aaa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d001      	beq.n	800a620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e04e      	b.n	800a6be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0201 	orr.w	r2, r2, #1
 800a636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a23      	ldr	r2, [pc, #140]	@ (800a6cc <HAL_TIM_Base_Start_IT+0xc4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d022      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a64a:	d01d      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1f      	ldr	r2, [pc, #124]	@ (800a6d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d018      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a1e      	ldr	r2, [pc, #120]	@ (800a6d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d013      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d00e      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a1b      	ldr	r2, [pc, #108]	@ (800a6dc <HAL_TIM_Base_Start_IT+0xd4>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d009      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a19      	ldr	r2, [pc, #100]	@ (800a6e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d004      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x80>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a18      	ldr	r2, [pc, #96]	@ (800a6e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d111      	bne.n	800a6ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b06      	cmp	r3, #6
 800a698:	d010      	beq.n	800a6bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f042 0201 	orr.w	r2, r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6aa:	e007      	b.n	800a6bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f042 0201 	orr.w	r2, r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	40010000 	.word	0x40010000
 800a6d0:	40000400 	.word	0x40000400
 800a6d4:	40000800 	.word	0x40000800
 800a6d8:	40000c00 	.word	0x40000c00
 800a6dc:	40010400 	.word	0x40010400
 800a6e0:	40014000 	.word	0x40014000
 800a6e4:	40001800 	.word	0x40001800

0800a6e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	2b00      	cmp	r3, #0
 800a708:	d020      	beq.n	800a74c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f003 0302 	and.w	r3, r3, #2
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01b      	beq.n	800a74c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f06f 0202 	mvn.w	r2, #2
 800a71c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d003      	beq.n	800a73a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f999 	bl	800aa6a <HAL_TIM_IC_CaptureCallback>
 800a738:	e005      	b.n	800a746 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f98b 	bl	800aa56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f99c 	bl	800aa7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	2b00      	cmp	r3, #0
 800a754:	d020      	beq.n	800a798 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d01b      	beq.n	800a798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f06f 0204 	mvn.w	r2, #4
 800a768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f973 	bl	800aa6a <HAL_TIM_IC_CaptureCallback>
 800a784:	e005      	b.n	800a792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f965 	bl	800aa56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f976 	bl	800aa7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f003 0308 	and.w	r3, r3, #8
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d020      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f003 0308 	and.w	r3, r3, #8
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01b      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0208 	mvn.w	r2, #8
 800a7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2204      	movs	r2, #4
 800a7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f94d 	bl	800aa6a <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f93f 	bl	800aa56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f950 	bl	800aa7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f003 0310 	and.w	r3, r3, #16
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d020      	beq.n	800a830 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d01b      	beq.n	800a830 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0210 	mvn.w	r2, #16
 800a800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2208      	movs	r2, #8
 800a806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f927 	bl	800aa6a <HAL_TIM_IC_CaptureCallback>
 800a81c:	e005      	b.n	800a82a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f919 	bl	800aa56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f92a 	bl	800aa7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00c      	beq.n	800a854 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	d007      	beq.n	800a854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f06f 0201 	mvn.w	r2, #1
 800a84c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7fa f956 	bl	8004b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00c      	beq.n	800a878 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a864:	2b00      	cmp	r3, #0
 800a866:	d007      	beq.n	800a878 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fade 	bl	800ae34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00c      	beq.n	800a89c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f8fb 	bl	800aa92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00c      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0220 	mvn.w	r2, #32
 800a8b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fab0 	bl	800ae20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d101      	bne.n	800a8e4 <HAL_TIM_ConfigClockSource+0x1c>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e0b4      	b.n	800aa4e <HAL_TIM_ConfigClockSource+0x186>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a90a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a91c:	d03e      	beq.n	800a99c <HAL_TIM_ConfigClockSource+0xd4>
 800a91e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a922:	f200 8087 	bhi.w	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92a:	f000 8086 	beq.w	800aa3a <HAL_TIM_ConfigClockSource+0x172>
 800a92e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a932:	d87f      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a934:	2b70      	cmp	r3, #112	@ 0x70
 800a936:	d01a      	beq.n	800a96e <HAL_TIM_ConfigClockSource+0xa6>
 800a938:	2b70      	cmp	r3, #112	@ 0x70
 800a93a:	d87b      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a93c:	2b60      	cmp	r3, #96	@ 0x60
 800a93e:	d050      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x11a>
 800a940:	2b60      	cmp	r3, #96	@ 0x60
 800a942:	d877      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a944:	2b50      	cmp	r3, #80	@ 0x50
 800a946:	d03c      	beq.n	800a9c2 <HAL_TIM_ConfigClockSource+0xfa>
 800a948:	2b50      	cmp	r3, #80	@ 0x50
 800a94a:	d873      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a94c:	2b40      	cmp	r3, #64	@ 0x40
 800a94e:	d058      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0x13a>
 800a950:	2b40      	cmp	r3, #64	@ 0x40
 800a952:	d86f      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a954:	2b30      	cmp	r3, #48	@ 0x30
 800a956:	d064      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x15a>
 800a958:	2b30      	cmp	r3, #48	@ 0x30
 800a95a:	d86b      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a95c:	2b20      	cmp	r3, #32
 800a95e:	d060      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x15a>
 800a960:	2b20      	cmp	r3, #32
 800a962:	d867      	bhi.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d05c      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x15a>
 800a968:	2b10      	cmp	r3, #16
 800a96a:	d05a      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x15a>
 800a96c:	e062      	b.n	800aa34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a97e:	f000 f9b3 	bl	800ace8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	609a      	str	r2, [r3, #8]
      break;
 800a99a:	e04f      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9ac:	f000 f99c 	bl	800ace8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	689a      	ldr	r2, [r3, #8]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9be:	609a      	str	r2, [r3, #8]
      break;
 800a9c0:	e03c      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f000 f910 	bl	800abf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2150      	movs	r1, #80	@ 0x50
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f969 	bl	800acb2 <TIM_ITRx_SetConfig>
      break;
 800a9e0:	e02c      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f000 f92f 	bl	800ac52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2160      	movs	r1, #96	@ 0x60
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 f959 	bl	800acb2 <TIM_ITRx_SetConfig>
      break;
 800aa00:	e01c      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f000 f8f0 	bl	800abf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2140      	movs	r1, #64	@ 0x40
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f949 	bl	800acb2 <TIM_ITRx_SetConfig>
      break;
 800aa20:	e00c      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f000 f940 	bl	800acb2 <TIM_ITRx_SetConfig>
      break;
 800aa32:	e003      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	73fb      	strb	r3, [r7, #15]
      break;
 800aa38:	e000      	b.n	800aa3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa72:	bf00      	nop
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa86:	bf00      	nop
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa9a:	bf00      	nop
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a43      	ldr	r2, [pc, #268]	@ (800abc8 <TIM_Base_SetConfig+0x120>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d013      	beq.n	800aae8 <TIM_Base_SetConfig+0x40>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac6:	d00f      	beq.n	800aae8 <TIM_Base_SetConfig+0x40>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a40      	ldr	r2, [pc, #256]	@ (800abcc <TIM_Base_SetConfig+0x124>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00b      	beq.n	800aae8 <TIM_Base_SetConfig+0x40>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a3f      	ldr	r2, [pc, #252]	@ (800abd0 <TIM_Base_SetConfig+0x128>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d007      	beq.n	800aae8 <TIM_Base_SetConfig+0x40>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a3e      	ldr	r2, [pc, #248]	@ (800abd4 <TIM_Base_SetConfig+0x12c>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d003      	beq.n	800aae8 <TIM_Base_SetConfig+0x40>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a3d      	ldr	r2, [pc, #244]	@ (800abd8 <TIM_Base_SetConfig+0x130>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d108      	bne.n	800aafa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a32      	ldr	r2, [pc, #200]	@ (800abc8 <TIM_Base_SetConfig+0x120>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d02b      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab08:	d027      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a2f      	ldr	r2, [pc, #188]	@ (800abcc <TIM_Base_SetConfig+0x124>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d023      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a2e      	ldr	r2, [pc, #184]	@ (800abd0 <TIM_Base_SetConfig+0x128>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d01f      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a2d      	ldr	r2, [pc, #180]	@ (800abd4 <TIM_Base_SetConfig+0x12c>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d01b      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a2c      	ldr	r2, [pc, #176]	@ (800abd8 <TIM_Base_SetConfig+0x130>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d017      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a2b      	ldr	r2, [pc, #172]	@ (800abdc <TIM_Base_SetConfig+0x134>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d013      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a2a      	ldr	r2, [pc, #168]	@ (800abe0 <TIM_Base_SetConfig+0x138>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d00f      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a29      	ldr	r2, [pc, #164]	@ (800abe4 <TIM_Base_SetConfig+0x13c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00b      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a28      	ldr	r2, [pc, #160]	@ (800abe8 <TIM_Base_SetConfig+0x140>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d007      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a27      	ldr	r2, [pc, #156]	@ (800abec <TIM_Base_SetConfig+0x144>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <TIM_Base_SetConfig+0xb2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a26      	ldr	r2, [pc, #152]	@ (800abf0 <TIM_Base_SetConfig+0x148>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d108      	bne.n	800ab6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	689a      	ldr	r2, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a0e      	ldr	r2, [pc, #56]	@ (800abc8 <TIM_Base_SetConfig+0x120>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d003      	beq.n	800ab9a <TIM_Base_SetConfig+0xf2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a10      	ldr	r2, [pc, #64]	@ (800abd8 <TIM_Base_SetConfig+0x130>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d103      	bne.n	800aba2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	691a      	ldr	r2, [r3, #16]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f043 0204 	orr.w	r2, r3, #4
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]
}
 800abba:	bf00      	nop
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40000400 	.word	0x40000400
 800abd0:	40000800 	.word	0x40000800
 800abd4:	40000c00 	.word	0x40000c00
 800abd8:	40010400 	.word	0x40010400
 800abdc:	40014000 	.word	0x40014000
 800abe0:	40014400 	.word	0x40014400
 800abe4:	40014800 	.word	0x40014800
 800abe8:	40001800 	.word	0x40001800
 800abec:	40001c00 	.word	0x40001c00
 800abf0:	40002000 	.word	0x40002000

0800abf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f023 0201 	bic.w	r2, r3, #1
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	011b      	lsls	r3, r3, #4
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f023 030a 	bic.w	r3, r3, #10
 800ac30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	621a      	str	r2, [r3, #32]
}
 800ac46:	bf00      	nop
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b087      	sub	sp, #28
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	f023 0210 	bic.w	r2, r3, #16
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	031b      	lsls	r3, r3, #12
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	621a      	str	r2, [r3, #32]
}
 800aca6:	bf00      	nop
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4313      	orrs	r3, r2
 800acd0:	f043 0307 	orr.w	r3, r3, #7
 800acd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	609a      	str	r2, [r3, #8]
}
 800acdc:	bf00      	nop
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	021a      	lsls	r2, r3, #8
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	609a      	str	r2, [r3, #8]
}
 800ad1c:	bf00      	nop
 800ad1e:	371c      	adds	r7, #28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d101      	bne.n	800ad40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e05a      	b.n	800adf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a21      	ldr	r2, [pc, #132]	@ (800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d022      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad8c:	d01d      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a1d      	ldr	r2, [pc, #116]	@ (800ae08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d018      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d013      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a1a      	ldr	r2, [pc, #104]	@ (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00e      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a18      	ldr	r2, [pc, #96]	@ (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d009      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a17      	ldr	r2, [pc, #92]	@ (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d004      	beq.n	800adca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a15      	ldr	r2, [pc, #84]	@ (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d10c      	bne.n	800ade4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800add0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	4313      	orrs	r3, r2
 800adda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40000400 	.word	0x40000400
 800ae0c:	40000800 	.word	0x40000800
 800ae10:	40000c00 	.word	0x40000c00
 800ae14:	40010400 	.word	0x40010400
 800ae18:	40014000 	.word	0x40014000
 800ae1c:	40001800 	.word	0x40001800

0800ae20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e042      	b.n	800aee0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7fb ffd2 	bl	8006e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2224      	movs	r2, #36	@ 0x24
 800ae78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68da      	ldr	r2, [r3, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 f879 	bl	800bf84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	691a      	ldr	r2, [r3, #16]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	695a      	ldr	r2, [r3, #20]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aeb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08a      	sub	sp, #40	@ 0x28
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4613      	mov	r3, r2
 800aef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b20      	cmp	r3, #32
 800af06:	d175      	bne.n	800aff4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <HAL_UART_Transmit+0x2c>
 800af0e:	88fb      	ldrh	r3, [r7, #6]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e06e      	b.n	800aff6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2221      	movs	r2, #33	@ 0x21
 800af22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af26:	f7fc fce5 	bl	80078f4 <HAL_GetTick>
 800af2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	88fa      	ldrh	r2, [r7, #6]
 800af30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	88fa      	ldrh	r2, [r7, #6]
 800af36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af40:	d108      	bne.n	800af54 <HAL_UART_Transmit+0x6c>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	61bb      	str	r3, [r7, #24]
 800af52:	e003      	b.n	800af5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af5c:	e02e      	b.n	800afbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	2200      	movs	r2, #0
 800af66:	2180      	movs	r1, #128	@ 0x80
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 fd4a 	bl	800ba02 <UART_WaitOnFlagUntilTimeout>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2220      	movs	r2, #32
 800af78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e03a      	b.n	800aff6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10b      	bne.n	800af9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	3302      	adds	r3, #2
 800af9a:	61bb      	str	r3, [r7, #24]
 800af9c:	e007      	b.n	800afae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	781a      	ldrb	r2, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	3301      	adds	r3, #1
 800afac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	3b01      	subs	r3, #1
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1cb      	bne.n	800af5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2200      	movs	r2, #0
 800afce:	2140      	movs	r1, #64	@ 0x40
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 fd16 	bl	800ba02 <UART_WaitOnFlagUntilTimeout>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2220      	movs	r2, #32
 800afe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e006      	b.n	800aff6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e000      	b.n	800aff6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800aff4:	2302      	movs	r3, #2
  }
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3720      	adds	r7, #32
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08c      	sub	sp, #48	@ 0x30
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b20      	cmp	r3, #32
 800b018:	d162      	bne.n	800b0e0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <HAL_UART_Transmit_DMA+0x26>
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e05b      	b.n	800b0e2 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	88fa      	ldrh	r2, [r7, #6]
 800b034:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	88fa      	ldrh	r2, [r7, #6]
 800b03a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2221      	movs	r2, #33	@ 0x21
 800b046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b04e:	4a27      	ldr	r2, [pc, #156]	@ (800b0ec <HAL_UART_Transmit_DMA+0xec>)
 800b050:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b056:	4a26      	ldr	r2, [pc, #152]	@ (800b0f0 <HAL_UART_Transmit_DMA+0xf0>)
 800b058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05e:	4a25      	ldr	r2, [pc, #148]	@ (800b0f4 <HAL_UART_Transmit_DMA+0xf4>)
 800b060:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b066:	2200      	movs	r2, #0
 800b068:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b06a:	f107 0308 	add.w	r3, r7, #8
 800b06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b076:	6819      	ldr	r1, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3304      	adds	r3, #4
 800b07e:	461a      	mov	r2, r3
 800b080:	88fb      	ldrh	r3, [r7, #6]
 800b082:	f7fc fe27 	bl	8007cd4 <HAL_DMA_Start_IT>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2210      	movs	r2, #16
 800b090:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2220      	movs	r2, #32
 800b096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e021      	b.n	800b0e2 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b0a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3314      	adds	r3, #20
 800b0ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3314      	adds	r3, #20
 800b0c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0cc:	6a39      	ldr	r1, [r7, #32]
 800b0ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e5      	bne.n	800b0a8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e000      	b.n	800b0e2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800b0e0:	2302      	movs	r3, #2
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3730      	adds	r7, #48	@ 0x30
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	0800b751 	.word	0x0800b751
 800b0f0:	0800b7eb 	.word	0x0800b7eb
 800b0f4:	0800b96f 	.word	0x0800b96f

0800b0f8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08c      	sub	sp, #48	@ 0x30
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4613      	mov	r3, r2
 800b104:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b20      	cmp	r3, #32
 800b110:	d146      	bne.n	800b1a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e03f      	b.n	800b1a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b12e:	88fb      	ldrh	r3, [r7, #6]
 800b130:	461a      	mov	r2, r3
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fcbd 	bl	800bab4 <UART_Start_Receive_DMA>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b144:	2b01      	cmp	r3, #1
 800b146:	d125      	bne.n	800b194 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b148:	2300      	movs	r3, #0
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	613b      	str	r3, [r7, #16]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	613b      	str	r3, [r7, #16]
 800b15c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	330c      	adds	r3, #12
 800b164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	617b      	str	r3, [r7, #20]
   return(result);
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f043 0310 	orr.w	r3, r3, #16
 800b174:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	330c      	adds	r3, #12
 800b17c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b17e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	6a39      	ldr	r1, [r7, #32]
 800b184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e5      	bne.n	800b15e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800b192:	e002      	b.n	800b19a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800b19a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b19e:	e000      	b.n	800b1a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800b1a0:	2302      	movs	r3, #2
  }
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3730      	adds	r7, #48	@ 0x30
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b0ba      	sub	sp, #232	@ 0xe8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1e2:	f003 030f 	and.w	r3, r3, #15
 800b1e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b1ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10f      	bne.n	800b212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f6:	f003 0320 	and.w	r3, r3, #32
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <HAL_UART_IRQHandler+0x66>
 800b1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fdfc 	bl	800be08 <UART_Receive_IT>
      return;
 800b210:	e273      	b.n	800b6fa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 80de 	beq.w	800b3d8 <HAL_UART_IRQHandler+0x22c>
 800b21c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	d106      	bne.n	800b236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b22c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 80d1 	beq.w	800b3d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00b      	beq.n	800b25a <HAL_UART_IRQHandler+0xae>
 800b242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b252:	f043 0201 	orr.w	r2, r3, #1
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <HAL_UART_IRQHandler+0xd2>
 800b266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d005      	beq.n	800b27e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b276:	f043 0202 	orr.w	r2, r3, #2
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00b      	beq.n	800b2a2 <HAL_UART_IRQHandler+0xf6>
 800b28a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b29a:	f043 0204 	orr.w	r2, r3, #4
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d011      	beq.n	800b2d2 <HAL_UART_IRQHandler+0x126>
 800b2ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d105      	bne.n	800b2c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ca:	f043 0208 	orr.w	r2, r3, #8
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 820a 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e0:	f003 0320 	and.w	r3, r3, #32
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d008      	beq.n	800b2fa <HAL_UART_IRQHandler+0x14e>
 800b2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fd87 	bl	800be08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b304:	2b40      	cmp	r3, #64	@ 0x40
 800b306:	bf0c      	ite	eq
 800b308:	2301      	moveq	r3, #1
 800b30a:	2300      	movne	r3, #0
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b316:	f003 0308 	and.w	r3, r3, #8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d103      	bne.n	800b326 <HAL_UART_IRQHandler+0x17a>
 800b31e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b322:	2b00      	cmp	r3, #0
 800b324:	d04f      	beq.n	800b3c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fc92 	bl	800bc50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b336:	2b40      	cmp	r3, #64	@ 0x40
 800b338:	d141      	bne.n	800b3be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3314      	adds	r3, #20
 800b340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3314      	adds	r3, #20
 800b362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b366:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b36a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b376:	e841 2300 	strex	r3, r2, [r1]
 800b37a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b37e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1d9      	bne.n	800b33a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d013      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b392:	4a8a      	ldr	r2, [pc, #552]	@ (800b5bc <HAL_UART_IRQHandler+0x410>)
 800b394:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fc fd62 	bl	8007e64 <HAL_DMA_Abort_IT>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d016      	beq.n	800b3d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b4:	e00e      	b.n	800b3d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f9c0 	bl	800b73c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3bc:	e00a      	b.n	800b3d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f9bc 	bl	800b73c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c4:	e006      	b.n	800b3d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f9b8 	bl	800b73c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b3d2:	e18d      	b.n	800b6f0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d4:	bf00      	nop
    return;
 800b3d6:	e18b      	b.n	800b6f0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	f040 8167 	bne.w	800b6b0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3e6:	f003 0310 	and.w	r3, r3, #16
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 8160 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3f4:	f003 0310 	and.w	r3, r3, #16
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 8159 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3fe:	2300      	movs	r3, #0
 800b400:	60bb      	str	r3, [r7, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	60bb      	str	r3, [r7, #8]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	60bb      	str	r3, [r7, #8]
 800b412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b41e:	2b40      	cmp	r3, #64	@ 0x40
 800b420:	f040 80ce 	bne.w	800b5c0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 80a9 	beq.w	800b58c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b43e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b442:	429a      	cmp	r2, r3
 800b444:	f080 80a2 	bcs.w	800b58c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b44e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b45a:	f000 8088 	beq.w	800b56e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	330c      	adds	r3, #12
 800b464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b46c:	e853 3f00 	ldrex	r3, [r3]
 800b470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b474:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b47c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	330c      	adds	r3, #12
 800b486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b48a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b48e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b496:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b4a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1d9      	bne.n	800b45e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3314      	adds	r3, #20
 800b4b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b4ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4bc:	f023 0301 	bic.w	r3, r3, #1
 800b4c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3314      	adds	r3, #20
 800b4ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b4d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b4da:	e841 2300 	strex	r3, r2, [r1]
 800b4de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b4e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1e1      	bne.n	800b4aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3314      	adds	r3, #20
 800b4ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4f0:	e853 3f00 	ldrex	r3, [r3]
 800b4f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3314      	adds	r3, #20
 800b506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b50a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b50c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b510:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b512:	e841 2300 	strex	r3, r2, [r1]
 800b516:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1e3      	bne.n	800b4e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	330c      	adds	r3, #12
 800b532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b53c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b53e:	f023 0310 	bic.w	r3, r3, #16
 800b542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	330c      	adds	r3, #12
 800b54c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b550:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b552:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e3      	bne.n	800b52c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fc fc0b 	bl	8007d84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2202      	movs	r2, #2
 800b572:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b29b      	uxth	r3, r3
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7f9 fa8d 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b58a:	e0b3      	b.n	800b6f4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b590:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b594:	429a      	cmp	r2, r3
 800b596:	f040 80ad 	bne.w	800b6f4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5a4:	f040 80a6 	bne.w	800b6f4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7f9 fa75 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
      return;
 800b5ba:	e09b      	b.n	800b6f4 <HAL_UART_IRQHandler+0x548>
 800b5bc:	0800bd17 	.word	0x0800bd17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 808e 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b5dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 8089 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b60a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b60c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b610:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e3      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3314      	adds	r3, #20
 800b624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	e853 3f00 	ldrex	r3, [r3]
 800b62c:	623b      	str	r3, [r7, #32]
   return(result);
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	f023 0301 	bic.w	r3, r3, #1
 800b634:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3314      	adds	r3, #20
 800b63e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b642:	633a      	str	r2, [r7, #48]	@ 0x30
 800b644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b64a:	e841 2300 	strex	r3, r2, [r1]
 800b64e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e3      	bne.n	800b61e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2220      	movs	r2, #32
 800b65a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	330c      	adds	r3, #12
 800b66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	60fb      	str	r3, [r7, #12]
   return(result);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0310 	bic.w	r3, r3, #16
 800b67a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	330c      	adds	r3, #12
 800b684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b688:	61fa      	str	r2, [r7, #28]
 800b68a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	69b9      	ldr	r1, [r7, #24]
 800b68e:	69fa      	ldr	r2, [r7, #28]
 800b690:	e841 2300 	strex	r3, r2, [r1]
 800b694:	617b      	str	r3, [r7, #20]
   return(result);
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e3      	bne.n	800b664 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7f9 f9fb 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6ae:	e023      	b.n	800b6f8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d009      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x524>
 800b6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fb35 	bl	800bd38 <UART_Transmit_IT>
    return;
 800b6ce:	e014      	b.n	800b6fa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00e      	beq.n	800b6fa <HAL_UART_IRQHandler+0x54e>
 800b6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d008      	beq.n	800b6fa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fb75 	bl	800bdd8 <UART_EndTransmit_IT>
    return;
 800b6ee:	e004      	b.n	800b6fa <HAL_UART_IRQHandler+0x54e>
    return;
 800b6f0:	bf00      	nop
 800b6f2:	e002      	b.n	800b6fa <HAL_UART_IRQHandler+0x54e>
      return;
 800b6f4:	bf00      	nop
 800b6f6:	e000      	b.n	800b6fa <HAL_UART_IRQHandler+0x54e>
      return;
 800b6f8:	bf00      	nop
  }
}
 800b6fa:	37e8      	adds	r7, #232	@ 0xe8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b090      	sub	sp, #64	@ 0x40
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d137      	bne.n	800b7dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76e:	2200      	movs	r2, #0
 800b770:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3314      	adds	r3, #20
 800b778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	623b      	str	r3, [r7, #32]
   return(result);
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b788:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3314      	adds	r3, #20
 800b790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b792:	633a      	str	r2, [r7, #48]	@ 0x30
 800b794:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e5      	bne.n	800b772 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	330c      	adds	r3, #12
 800b7ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	330c      	adds	r3, #12
 800b7c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7c6:	61fa      	str	r2, [r7, #28]
 800b7c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	69b9      	ldr	r1, [r7, #24]
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	617b      	str	r3, [r7, #20]
   return(result);
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e5      	bne.n	800b7a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7da:	e002      	b.n	800b7e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b7dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b7de:	f7f9 f9a3 	bl	8004b28 <HAL_UART_TxCpltCallback>
}
 800b7e2:	bf00      	nop
 800b7e4:	3740      	adds	r7, #64	@ 0x40
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7ff ff81 	bl	800b700 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7fe:	bf00      	nop
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b09c      	sub	sp, #112	@ 0x70
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b812:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d172      	bne.n	800b908 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b824:	2200      	movs	r2, #0
 800b826:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	330c      	adds	r3, #12
 800b82e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b83a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b83e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	330c      	adds	r3, #12
 800b846:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b848:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b84a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b84e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e5      	bne.n	800b828 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b85c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3314      	adds	r3, #20
 800b862:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b866:	e853 3f00 	ldrex	r3, [r3]
 800b86a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86e:	f023 0301 	bic.w	r3, r3, #1
 800b872:	667b      	str	r3, [r7, #100]	@ 0x64
 800b874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3314      	adds	r3, #20
 800b87a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b87c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b87e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b880:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b882:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b884:	e841 2300 	strex	r3, r2, [r1]
 800b888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e5      	bne.n	800b85c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3314      	adds	r3, #20
 800b896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	623b      	str	r3, [r7, #32]
   return(result);
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3314      	adds	r3, #20
 800b8ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b8b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b8:	e841 2300 	strex	r3, r2, [r1]
 800b8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1e5      	bne.n	800b890 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d119      	bne.n	800b908 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	330c      	adds	r3, #12
 800b8da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	e853 3f00 	ldrex	r3, [r3]
 800b8e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0310 	bic.w	r3, r3, #16
 800b8ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	330c      	adds	r3, #12
 800b8f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8f4:	61fa      	str	r2, [r7, #28]
 800b8f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f8:	69b9      	ldr	r1, [r7, #24]
 800b8fa:	69fa      	ldr	r2, [r7, #28]
 800b8fc:	e841 2300 	strex	r3, r2, [r1]
 800b900:	617b      	str	r3, [r7, #20]
   return(result);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e5      	bne.n	800b8d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b90a:	2200      	movs	r2, #0
 800b90c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b912:	2b01      	cmp	r3, #1
 800b914:	d106      	bne.n	800b924 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b91a:	4619      	mov	r1, r3
 800b91c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b91e:	f7f9 f8c1 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b922:	e002      	b.n	800b92a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b924:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b926:	f7ff fef5 	bl	800b714 <HAL_UART_RxCpltCallback>
}
 800b92a:	bf00      	nop
 800b92c:	3770      	adds	r7, #112	@ 0x70
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2201      	movs	r2, #1
 800b944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d108      	bne.n	800b960 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b952:	085b      	lsrs	r3, r3, #1
 800b954:	b29b      	uxth	r3, r3
 800b956:	4619      	mov	r1, r3
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f7f9 f8a3 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b95e:	e002      	b.n	800b966 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff fee1 	bl	800b728 <HAL_UART_RxHalfCpltCallback>
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b97e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b98a:	2b80      	cmp	r3, #128	@ 0x80
 800b98c:	bf0c      	ite	eq
 800b98e:	2301      	moveq	r3, #1
 800b990:	2300      	movne	r3, #0
 800b992:	b2db      	uxtb	r3, r3
 800b994:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b21      	cmp	r3, #33	@ 0x21
 800b9a0:	d108      	bne.n	800b9b4 <UART_DMAError+0x46>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d005      	beq.n	800b9b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b9ae:	68b8      	ldr	r0, [r7, #8]
 800b9b0:	f000 f926 	bl	800bc00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9be:	2b40      	cmp	r3, #64	@ 0x40
 800b9c0:	bf0c      	ite	eq
 800b9c2:	2301      	moveq	r3, #1
 800b9c4:	2300      	movne	r3, #0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b22      	cmp	r3, #34	@ 0x22
 800b9d4:	d108      	bne.n	800b9e8 <UART_DMAError+0x7a>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b9e2:	68b8      	ldr	r0, [r7, #8]
 800b9e4:	f000 f934 	bl	800bc50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ec:	f043 0210 	orr.w	r2, r3, #16
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9f4:	68b8      	ldr	r0, [r7, #8]
 800b9f6:	f7ff fea1 	bl	800b73c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9fa:	bf00      	nop
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b086      	sub	sp, #24
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	603b      	str	r3, [r7, #0]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba12:	e03b      	b.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d037      	beq.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba1c:	f7fb ff6a 	bl	80078f4 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	6a3a      	ldr	r2, [r7, #32]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d302      	bcc.n	800ba32 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e03a      	b.n	800baac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d023      	beq.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x8a>
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b80      	cmp	r3, #128	@ 0x80
 800ba48:	d020      	beq.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x8a>
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b40      	cmp	r3, #64	@ 0x40
 800ba4e:	d01d      	beq.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 0308 	and.w	r3, r3, #8
 800ba5a:	2b08      	cmp	r3, #8
 800ba5c:	d116      	bne.n	800ba8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 f8eb 	bl	800bc50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e00f      	b.n	800baac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	4013      	ands	r3, r2
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	bf0c      	ite	eq
 800ba9c:	2301      	moveq	r3, #1
 800ba9e:	2300      	movne	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d0b4      	beq.n	800ba14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b098      	sub	sp, #96	@ 0x60
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	88fa      	ldrh	r2, [r7, #6]
 800bacc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2222      	movs	r2, #34	@ 0x22
 800bad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae0:	4a44      	ldr	r2, [pc, #272]	@ (800bbf4 <UART_Start_Receive_DMA+0x140>)
 800bae2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae8:	4a43      	ldr	r2, [pc, #268]	@ (800bbf8 <UART_Start_Receive_DMA+0x144>)
 800baea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf0:	4a42      	ldr	r2, [pc, #264]	@ (800bbfc <UART_Start_Receive_DMA+0x148>)
 800baf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf8:	2200      	movs	r2, #0
 800bafa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	f7fc f8de 	bl	8007cd4 <HAL_DMA_Start_IT>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d008      	beq.n	800bb30 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2210      	movs	r2, #16
 800bb22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e05d      	b.n	800bbec <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bb30:	2300      	movs	r3, #0
 800bb32:	613b      	str	r3, [r7, #16]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	613b      	str	r3, [r7, #16]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	613b      	str	r3, [r7, #16]
 800bb44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d019      	beq.n	800bb82 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	330c      	adds	r3, #12
 800bb54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	330c      	adds	r3, #12
 800bb6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bb70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bb74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb76:	e841 2300 	strex	r3, r2, [r1]
 800bb7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bb7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1e5      	bne.n	800bb4e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3314      	adds	r3, #20
 800bb88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb94:	f043 0301 	orr.w	r3, r3, #1
 800bb98:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3314      	adds	r3, #20
 800bba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bba2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e5      	bne.n	800bb82 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3314      	adds	r3, #20
 800bbbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbcc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3314      	adds	r3, #20
 800bbd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bbd6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6a39      	ldr	r1, [r7, #32]
 800bbdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3760      	adds	r7, #96	@ 0x60
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	0800b807 	.word	0x0800b807
 800bbf8:	0800b933 	.word	0x0800b933
 800bbfc:	0800b96f 	.word	0x0800b96f

0800bc00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b089      	sub	sp, #36	@ 0x24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	330c      	adds	r3, #12
 800bc26:	69fa      	ldr	r2, [r7, #28]
 800bc28:	61ba      	str	r2, [r7, #24]
 800bc2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	6979      	ldr	r1, [r7, #20]
 800bc2e:	69ba      	ldr	r2, [r7, #24]
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	613b      	str	r3, [r7, #16]
   return(result);
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e5      	bne.n	800bc08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bc44:	bf00      	nop
 800bc46:	3724      	adds	r7, #36	@ 0x24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b095      	sub	sp, #84	@ 0x54
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	330c      	adds	r3, #12
 800bc5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc62:	e853 3f00 	ldrex	r3, [r3]
 800bc66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	330c      	adds	r3, #12
 800bc76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc78:	643a      	str	r2, [r7, #64]	@ 0x40
 800bc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc80:	e841 2300 	strex	r3, r2, [r1]
 800bc84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e5      	bne.n	800bc58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3314      	adds	r3, #20
 800bc92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f023 0301 	bic.w	r3, r3, #1
 800bca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3314      	adds	r3, #20
 800bcaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e5      	bne.n	800bc8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d119      	bne.n	800bcfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	330c      	adds	r3, #12
 800bcce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	e853 3f00 	ldrex	r3, [r3]
 800bcd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f023 0310 	bic.w	r3, r3, #16
 800bcde:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	330c      	adds	r3, #12
 800bce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bce8:	61ba      	str	r2, [r7, #24]
 800bcea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcec:	6979      	ldr	r1, [r7, #20]
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	613b      	str	r3, [r7, #16]
   return(result);
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1e5      	bne.n	800bcc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2220      	movs	r2, #32
 800bd00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bd0a:	bf00      	nop
 800bd0c:	3754      	adds	r7, #84	@ 0x54
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f7ff fd06 	bl	800b73c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd30:	bf00      	nop
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b21      	cmp	r3, #33	@ 0x21
 800bd4a:	d13e      	bne.n	800bdca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd54:	d114      	bne.n	800bd80 <UART_Transmit_IT+0x48>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d110      	bne.n	800bd80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	1c9a      	adds	r2, r3, #2
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	621a      	str	r2, [r3, #32]
 800bd7e:	e008      	b.n	800bd92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	1c59      	adds	r1, r3, #1
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6211      	str	r1, [r2, #32]
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10f      	bne.n	800bdc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bdc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e000      	b.n	800bdcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bdca:	2302      	movs	r3, #2
  }
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bdee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7f8 fe95 	bl	8004b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08c      	sub	sp, #48	@ 0x30
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800be10:	2300      	movs	r3, #0
 800be12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800be14:	2300      	movs	r3, #0
 800be16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b22      	cmp	r3, #34	@ 0x22
 800be22:	f040 80aa 	bne.w	800bf7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2e:	d115      	bne.n	800be5c <UART_Receive_IT+0x54>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d111      	bne.n	800be5c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	b29b      	uxth	r3, r3
 800be46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be54:	1c9a      	adds	r2, r3, #2
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	629a      	str	r2, [r3, #40]	@ 0x28
 800be5a:	e024      	b.n	800bea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be6a:	d007      	beq.n	800be7c <UART_Receive_IT+0x74>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <UART_Receive_IT+0x82>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d106      	bne.n	800be8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	b2da      	uxtb	r2, r3
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e008      	b.n	800be9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be96:	b2da      	uxtb	r2, r3
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800beaa:	b29b      	uxth	r3, r3
 800beac:	3b01      	subs	r3, #1
 800beae:	b29b      	uxth	r3, r3
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	4619      	mov	r1, r3
 800beb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d15d      	bne.n	800bf76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68da      	ldr	r2, [r3, #12]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f022 0220 	bic.w	r2, r2, #32
 800bec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68da      	ldr	r2, [r3, #12]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	695a      	ldr	r2, [r3, #20]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f022 0201 	bic.w	r2, r2, #1
 800bee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befc:	2b01      	cmp	r3, #1
 800befe:	d135      	bne.n	800bf6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	330c      	adds	r3, #12
 800bf0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	613b      	str	r3, [r7, #16]
   return(result);
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	f023 0310 	bic.w	r3, r3, #16
 800bf1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	330c      	adds	r3, #12
 800bf24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf26:	623a      	str	r2, [r7, #32]
 800bf28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	69f9      	ldr	r1, [r7, #28]
 800bf2c:	6a3a      	ldr	r2, [r7, #32]
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e5      	bne.n	800bf06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b10      	cmp	r3, #16
 800bf46:	d10a      	bne.n	800bf5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7f8 fd9d 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
 800bf6a:	e002      	b.n	800bf72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7ff fbd1 	bl	800b714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	e002      	b.n	800bf7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	e000      	b.n	800bf7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf7a:	2302      	movs	r3, #2
  }
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3730      	adds	r7, #48	@ 0x30
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf88:	b0c0      	sub	sp, #256	@ 0x100
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bf9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfa0:	68d9      	ldr	r1, [r3, #12]
 800bfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	ea40 0301 	orr.w	r3, r0, r1
 800bfac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bfae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb2:	689a      	ldr	r2, [r3, #8]
 800bfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bfd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bfdc:	f021 010c 	bic.w	r1, r1, #12
 800bfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bfea:	430b      	orrs	r3, r1
 800bfec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bffe:	6999      	ldr	r1, [r3, #24]
 800c000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	ea40 0301 	orr.w	r3, r0, r1
 800c00a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	4b8f      	ldr	r3, [pc, #572]	@ (800c250 <UART_SetConfig+0x2cc>)
 800c014:	429a      	cmp	r2, r3
 800c016:	d005      	beq.n	800c024 <UART_SetConfig+0xa0>
 800c018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	4b8d      	ldr	r3, [pc, #564]	@ (800c254 <UART_SetConfig+0x2d0>)
 800c020:	429a      	cmp	r2, r3
 800c022:	d104      	bne.n	800c02e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c024:	f7fd fdbe 	bl	8009ba4 <HAL_RCC_GetPCLK2Freq>
 800c028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c02c:	e003      	b.n	800c036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c02e:	f7fd fda5 	bl	8009b7c <HAL_RCC_GetPCLK1Freq>
 800c032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c03a:	69db      	ldr	r3, [r3, #28]
 800c03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c040:	f040 810c 	bne.w	800c25c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c048:	2200      	movs	r2, #0
 800c04a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c04e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c056:	4622      	mov	r2, r4
 800c058:	462b      	mov	r3, r5
 800c05a:	1891      	adds	r1, r2, r2
 800c05c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c05e:	415b      	adcs	r3, r3
 800c060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c066:	4621      	mov	r1, r4
 800c068:	eb12 0801 	adds.w	r8, r2, r1
 800c06c:	4629      	mov	r1, r5
 800c06e:	eb43 0901 	adc.w	r9, r3, r1
 800c072:	f04f 0200 	mov.w	r2, #0
 800c076:	f04f 0300 	mov.w	r3, #0
 800c07a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c07e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c086:	4690      	mov	r8, r2
 800c088:	4699      	mov	r9, r3
 800c08a:	4623      	mov	r3, r4
 800c08c:	eb18 0303 	adds.w	r3, r8, r3
 800c090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c094:	462b      	mov	r3, r5
 800c096:	eb49 0303 	adc.w	r3, r9, r3
 800c09a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c0aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c0ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	18db      	adds	r3, r3, r3
 800c0b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	eb42 0303 	adc.w	r3, r2, r3
 800c0be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c0c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c0c8:	f7f4 ff3c 	bl	8000f44 <__aeabi_uldivmod>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4b61      	ldr	r3, [pc, #388]	@ (800c258 <UART_SetConfig+0x2d4>)
 800c0d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c0d6:	095b      	lsrs	r3, r3, #5
 800c0d8:	011c      	lsls	r4, r3, #4
 800c0da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c0e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	1891      	adds	r1, r2, r2
 800c0f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c0f4:	415b      	adcs	r3, r3
 800c0f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c0fc:	4641      	mov	r1, r8
 800c0fe:	eb12 0a01 	adds.w	sl, r2, r1
 800c102:	4649      	mov	r1, r9
 800c104:	eb43 0b01 	adc.w	fp, r3, r1
 800c108:	f04f 0200 	mov.w	r2, #0
 800c10c:	f04f 0300 	mov.w	r3, #0
 800c110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c11c:	4692      	mov	sl, r2
 800c11e:	469b      	mov	fp, r3
 800c120:	4643      	mov	r3, r8
 800c122:	eb1a 0303 	adds.w	r3, sl, r3
 800c126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c12a:	464b      	mov	r3, r9
 800c12c:	eb4b 0303 	adc.w	r3, fp, r3
 800c130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c148:	460b      	mov	r3, r1
 800c14a:	18db      	adds	r3, r3, r3
 800c14c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c14e:	4613      	mov	r3, r2
 800c150:	eb42 0303 	adc.w	r3, r2, r3
 800c154:	647b      	str	r3, [r7, #68]	@ 0x44
 800c156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c15a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c15e:	f7f4 fef1 	bl	8000f44 <__aeabi_uldivmod>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4611      	mov	r1, r2
 800c168:	4b3b      	ldr	r3, [pc, #236]	@ (800c258 <UART_SetConfig+0x2d4>)
 800c16a:	fba3 2301 	umull	r2, r3, r3, r1
 800c16e:	095b      	lsrs	r3, r3, #5
 800c170:	2264      	movs	r2, #100	@ 0x64
 800c172:	fb02 f303 	mul.w	r3, r2, r3
 800c176:	1acb      	subs	r3, r1, r3
 800c178:	00db      	lsls	r3, r3, #3
 800c17a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c17e:	4b36      	ldr	r3, [pc, #216]	@ (800c258 <UART_SetConfig+0x2d4>)
 800c180:	fba3 2302 	umull	r2, r3, r3, r2
 800c184:	095b      	lsrs	r3, r3, #5
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c18c:	441c      	add	r4, r3
 800c18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c192:	2200      	movs	r2, #0
 800c194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c19c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c1a0:	4642      	mov	r2, r8
 800c1a2:	464b      	mov	r3, r9
 800c1a4:	1891      	adds	r1, r2, r2
 800c1a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c1a8:	415b      	adcs	r3, r3
 800c1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	1851      	adds	r1, r2, r1
 800c1b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	414b      	adcs	r3, r1
 800c1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1bc:	f04f 0200 	mov.w	r2, #0
 800c1c0:	f04f 0300 	mov.w	r3, #0
 800c1c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c1c8:	4659      	mov	r1, fp
 800c1ca:	00cb      	lsls	r3, r1, #3
 800c1cc:	4651      	mov	r1, sl
 800c1ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1d2:	4651      	mov	r1, sl
 800c1d4:	00ca      	lsls	r2, r1, #3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4642      	mov	r2, r8
 800c1de:	189b      	adds	r3, r3, r2
 800c1e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	460a      	mov	r2, r1
 800c1e8:	eb42 0303 	adc.w	r3, r2, r3
 800c1ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c204:	460b      	mov	r3, r1
 800c206:	18db      	adds	r3, r3, r3
 800c208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c20a:	4613      	mov	r3, r2
 800c20c:	eb42 0303 	adc.w	r3, r2, r3
 800c210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c21a:	f7f4 fe93 	bl	8000f44 <__aeabi_uldivmod>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4b0d      	ldr	r3, [pc, #52]	@ (800c258 <UART_SetConfig+0x2d4>)
 800c224:	fba3 1302 	umull	r1, r3, r3, r2
 800c228:	095b      	lsrs	r3, r3, #5
 800c22a:	2164      	movs	r1, #100	@ 0x64
 800c22c:	fb01 f303 	mul.w	r3, r1, r3
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	3332      	adds	r3, #50	@ 0x32
 800c236:	4a08      	ldr	r2, [pc, #32]	@ (800c258 <UART_SetConfig+0x2d4>)
 800c238:	fba2 2303 	umull	r2, r3, r2, r3
 800c23c:	095b      	lsrs	r3, r3, #5
 800c23e:	f003 0207 	and.w	r2, r3, #7
 800c242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4422      	add	r2, r4
 800c24a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c24c:	e106      	b.n	800c45c <UART_SetConfig+0x4d8>
 800c24e:	bf00      	nop
 800c250:	40011000 	.word	0x40011000
 800c254:	40011400 	.word	0x40011400
 800c258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c25c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c260:	2200      	movs	r2, #0
 800c262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c26a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c26e:	4642      	mov	r2, r8
 800c270:	464b      	mov	r3, r9
 800c272:	1891      	adds	r1, r2, r2
 800c274:	6239      	str	r1, [r7, #32]
 800c276:	415b      	adcs	r3, r3
 800c278:	627b      	str	r3, [r7, #36]	@ 0x24
 800c27a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c27e:	4641      	mov	r1, r8
 800c280:	1854      	adds	r4, r2, r1
 800c282:	4649      	mov	r1, r9
 800c284:	eb43 0501 	adc.w	r5, r3, r1
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	f04f 0300 	mov.w	r3, #0
 800c290:	00eb      	lsls	r3, r5, #3
 800c292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c296:	00e2      	lsls	r2, r4, #3
 800c298:	4614      	mov	r4, r2
 800c29a:	461d      	mov	r5, r3
 800c29c:	4643      	mov	r3, r8
 800c29e:	18e3      	adds	r3, r4, r3
 800c2a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c2a4:	464b      	mov	r3, r9
 800c2a6:	eb45 0303 	adc.w	r3, r5, r3
 800c2aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c2ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c2be:	f04f 0200 	mov.w	r2, #0
 800c2c2:	f04f 0300 	mov.w	r3, #0
 800c2c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	008b      	lsls	r3, r1, #2
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	008a      	lsls	r2, r1, #2
 800c2d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c2dc:	f7f4 fe32 	bl	8000f44 <__aeabi_uldivmod>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4b60      	ldr	r3, [pc, #384]	@ (800c468 <UART_SetConfig+0x4e4>)
 800c2e6:	fba3 2302 	umull	r2, r3, r3, r2
 800c2ea:	095b      	lsrs	r3, r3, #5
 800c2ec:	011c      	lsls	r4, r3, #4
 800c2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c2f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c2fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c300:	4642      	mov	r2, r8
 800c302:	464b      	mov	r3, r9
 800c304:	1891      	adds	r1, r2, r2
 800c306:	61b9      	str	r1, [r7, #24]
 800c308:	415b      	adcs	r3, r3
 800c30a:	61fb      	str	r3, [r7, #28]
 800c30c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c310:	4641      	mov	r1, r8
 800c312:	1851      	adds	r1, r2, r1
 800c314:	6139      	str	r1, [r7, #16]
 800c316:	4649      	mov	r1, r9
 800c318:	414b      	adcs	r3, r1
 800c31a:	617b      	str	r3, [r7, #20]
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c328:	4659      	mov	r1, fp
 800c32a:	00cb      	lsls	r3, r1, #3
 800c32c:	4651      	mov	r1, sl
 800c32e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c332:	4651      	mov	r1, sl
 800c334:	00ca      	lsls	r2, r1, #3
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	4603      	mov	r3, r0
 800c33c:	4642      	mov	r2, r8
 800c33e:	189b      	adds	r3, r3, r2
 800c340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c344:	464b      	mov	r3, r9
 800c346:	460a      	mov	r2, r1
 800c348:	eb42 0303 	adc.w	r3, r2, r3
 800c34c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c35a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c35c:	f04f 0200 	mov.w	r2, #0
 800c360:	f04f 0300 	mov.w	r3, #0
 800c364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c368:	4649      	mov	r1, r9
 800c36a:	008b      	lsls	r3, r1, #2
 800c36c:	4641      	mov	r1, r8
 800c36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c372:	4641      	mov	r1, r8
 800c374:	008a      	lsls	r2, r1, #2
 800c376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c37a:	f7f4 fde3 	bl	8000f44 <__aeabi_uldivmod>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4611      	mov	r1, r2
 800c384:	4b38      	ldr	r3, [pc, #224]	@ (800c468 <UART_SetConfig+0x4e4>)
 800c386:	fba3 2301 	umull	r2, r3, r3, r1
 800c38a:	095b      	lsrs	r3, r3, #5
 800c38c:	2264      	movs	r2, #100	@ 0x64
 800c38e:	fb02 f303 	mul.w	r3, r2, r3
 800c392:	1acb      	subs	r3, r1, r3
 800c394:	011b      	lsls	r3, r3, #4
 800c396:	3332      	adds	r3, #50	@ 0x32
 800c398:	4a33      	ldr	r2, [pc, #204]	@ (800c468 <UART_SetConfig+0x4e4>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c3a4:	441c      	add	r4, r3
 800c3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800c3ae:	677a      	str	r2, [r7, #116]	@ 0x74
 800c3b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	1891      	adds	r1, r2, r2
 800c3ba:	60b9      	str	r1, [r7, #8]
 800c3bc:	415b      	adcs	r3, r3
 800c3be:	60fb      	str	r3, [r7, #12]
 800c3c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3c4:	4641      	mov	r1, r8
 800c3c6:	1851      	adds	r1, r2, r1
 800c3c8:	6039      	str	r1, [r7, #0]
 800c3ca:	4649      	mov	r1, r9
 800c3cc:	414b      	adcs	r3, r1
 800c3ce:	607b      	str	r3, [r7, #4]
 800c3d0:	f04f 0200 	mov.w	r2, #0
 800c3d4:	f04f 0300 	mov.w	r3, #0
 800c3d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c3dc:	4659      	mov	r1, fp
 800c3de:	00cb      	lsls	r3, r1, #3
 800c3e0:	4651      	mov	r1, sl
 800c3e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3e6:	4651      	mov	r1, sl
 800c3e8:	00ca      	lsls	r2, r1, #3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	189b      	adds	r3, r3, r2
 800c3f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	460a      	mov	r2, r1
 800c3fa:	eb42 0303 	adc.w	r3, r2, r3
 800c3fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	663b      	str	r3, [r7, #96]	@ 0x60
 800c40a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c40c:	f04f 0200 	mov.w	r2, #0
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c418:	4649      	mov	r1, r9
 800c41a:	008b      	lsls	r3, r1, #2
 800c41c:	4641      	mov	r1, r8
 800c41e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c422:	4641      	mov	r1, r8
 800c424:	008a      	lsls	r2, r1, #2
 800c426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c42a:	f7f4 fd8b 	bl	8000f44 <__aeabi_uldivmod>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4b0d      	ldr	r3, [pc, #52]	@ (800c468 <UART_SetConfig+0x4e4>)
 800c434:	fba3 1302 	umull	r1, r3, r3, r2
 800c438:	095b      	lsrs	r3, r3, #5
 800c43a:	2164      	movs	r1, #100	@ 0x64
 800c43c:	fb01 f303 	mul.w	r3, r1, r3
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	011b      	lsls	r3, r3, #4
 800c444:	3332      	adds	r3, #50	@ 0x32
 800c446:	4a08      	ldr	r2, [pc, #32]	@ (800c468 <UART_SetConfig+0x4e4>)
 800c448:	fba2 2303 	umull	r2, r3, r2, r3
 800c44c:	095b      	lsrs	r3, r3, #5
 800c44e:	f003 020f 	and.w	r2, r3, #15
 800c452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4422      	add	r2, r4
 800c45a:	609a      	str	r2, [r3, #8]
}
 800c45c:	bf00      	nop
 800c45e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c462:	46bd      	mov	sp, r7
 800c464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c468:	51eb851f 	.word	0x51eb851f

0800c46c <__cvt>:
 800c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	ec57 6b10 	vmov	r6, r7, d0
 800c474:	2f00      	cmp	r7, #0
 800c476:	460c      	mov	r4, r1
 800c478:	4619      	mov	r1, r3
 800c47a:	463b      	mov	r3, r7
 800c47c:	bfbb      	ittet	lt
 800c47e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c482:	461f      	movlt	r7, r3
 800c484:	2300      	movge	r3, #0
 800c486:	232d      	movlt	r3, #45	@ 0x2d
 800c488:	700b      	strb	r3, [r1, #0]
 800c48a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c48c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c490:	4691      	mov	r9, r2
 800c492:	f023 0820 	bic.w	r8, r3, #32
 800c496:	bfbc      	itt	lt
 800c498:	4632      	movlt	r2, r6
 800c49a:	4616      	movlt	r6, r2
 800c49c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4a0:	d005      	beq.n	800c4ae <__cvt+0x42>
 800c4a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c4a6:	d100      	bne.n	800c4aa <__cvt+0x3e>
 800c4a8:	3401      	adds	r4, #1
 800c4aa:	2102      	movs	r1, #2
 800c4ac:	e000      	b.n	800c4b0 <__cvt+0x44>
 800c4ae:	2103      	movs	r1, #3
 800c4b0:	ab03      	add	r3, sp, #12
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	ab02      	add	r3, sp, #8
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	ec47 6b10 	vmov	d0, r6, r7
 800c4bc:	4653      	mov	r3, sl
 800c4be:	4622      	mov	r2, r4
 800c4c0:	f000 fe7a 	bl	800d1b8 <_dtoa_r>
 800c4c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	d119      	bne.n	800c500 <__cvt+0x94>
 800c4cc:	f019 0f01 	tst.w	r9, #1
 800c4d0:	d00e      	beq.n	800c4f0 <__cvt+0x84>
 800c4d2:	eb00 0904 	add.w	r9, r0, r4
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4630      	mov	r0, r6
 800c4dc:	4639      	mov	r1, r7
 800c4de:	f7f4 fb13 	bl	8000b08 <__aeabi_dcmpeq>
 800c4e2:	b108      	cbz	r0, 800c4e8 <__cvt+0x7c>
 800c4e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4e8:	2230      	movs	r2, #48	@ 0x30
 800c4ea:	9b03      	ldr	r3, [sp, #12]
 800c4ec:	454b      	cmp	r3, r9
 800c4ee:	d31e      	bcc.n	800c52e <__cvt+0xc2>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4f4:	1b5b      	subs	r3, r3, r5
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	6013      	str	r3, [r2, #0]
 800c4fa:	b004      	add	sp, #16
 800c4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c504:	eb00 0904 	add.w	r9, r0, r4
 800c508:	d1e5      	bne.n	800c4d6 <__cvt+0x6a>
 800c50a:	7803      	ldrb	r3, [r0, #0]
 800c50c:	2b30      	cmp	r3, #48	@ 0x30
 800c50e:	d10a      	bne.n	800c526 <__cvt+0xba>
 800c510:	2200      	movs	r2, #0
 800c512:	2300      	movs	r3, #0
 800c514:	4630      	mov	r0, r6
 800c516:	4639      	mov	r1, r7
 800c518:	f7f4 faf6 	bl	8000b08 <__aeabi_dcmpeq>
 800c51c:	b918      	cbnz	r0, 800c526 <__cvt+0xba>
 800c51e:	f1c4 0401 	rsb	r4, r4, #1
 800c522:	f8ca 4000 	str.w	r4, [sl]
 800c526:	f8da 3000 	ldr.w	r3, [sl]
 800c52a:	4499      	add	r9, r3
 800c52c:	e7d3      	b.n	800c4d6 <__cvt+0x6a>
 800c52e:	1c59      	adds	r1, r3, #1
 800c530:	9103      	str	r1, [sp, #12]
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	e7d9      	b.n	800c4ea <__cvt+0x7e>

0800c536 <__exponent>:
 800c536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c538:	2900      	cmp	r1, #0
 800c53a:	bfba      	itte	lt
 800c53c:	4249      	neglt	r1, r1
 800c53e:	232d      	movlt	r3, #45	@ 0x2d
 800c540:	232b      	movge	r3, #43	@ 0x2b
 800c542:	2909      	cmp	r1, #9
 800c544:	7002      	strb	r2, [r0, #0]
 800c546:	7043      	strb	r3, [r0, #1]
 800c548:	dd29      	ble.n	800c59e <__exponent+0x68>
 800c54a:	f10d 0307 	add.w	r3, sp, #7
 800c54e:	461d      	mov	r5, r3
 800c550:	270a      	movs	r7, #10
 800c552:	461a      	mov	r2, r3
 800c554:	fbb1 f6f7 	udiv	r6, r1, r7
 800c558:	fb07 1416 	mls	r4, r7, r6, r1
 800c55c:	3430      	adds	r4, #48	@ 0x30
 800c55e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c562:	460c      	mov	r4, r1
 800c564:	2c63      	cmp	r4, #99	@ 0x63
 800c566:	f103 33ff 	add.w	r3, r3, #4294967295
 800c56a:	4631      	mov	r1, r6
 800c56c:	dcf1      	bgt.n	800c552 <__exponent+0x1c>
 800c56e:	3130      	adds	r1, #48	@ 0x30
 800c570:	1e94      	subs	r4, r2, #2
 800c572:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c576:	1c41      	adds	r1, r0, #1
 800c578:	4623      	mov	r3, r4
 800c57a:	42ab      	cmp	r3, r5
 800c57c:	d30a      	bcc.n	800c594 <__exponent+0x5e>
 800c57e:	f10d 0309 	add.w	r3, sp, #9
 800c582:	1a9b      	subs	r3, r3, r2
 800c584:	42ac      	cmp	r4, r5
 800c586:	bf88      	it	hi
 800c588:	2300      	movhi	r3, #0
 800c58a:	3302      	adds	r3, #2
 800c58c:	4403      	add	r3, r0
 800c58e:	1a18      	subs	r0, r3, r0
 800c590:	b003      	add	sp, #12
 800c592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c594:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c598:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c59c:	e7ed      	b.n	800c57a <__exponent+0x44>
 800c59e:	2330      	movs	r3, #48	@ 0x30
 800c5a0:	3130      	adds	r1, #48	@ 0x30
 800c5a2:	7083      	strb	r3, [r0, #2]
 800c5a4:	70c1      	strb	r1, [r0, #3]
 800c5a6:	1d03      	adds	r3, r0, #4
 800c5a8:	e7f1      	b.n	800c58e <__exponent+0x58>
	...

0800c5ac <_printf_float>:
 800c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b0:	b08d      	sub	sp, #52	@ 0x34
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	461f      	mov	r7, r3
 800c5bc:	4605      	mov	r5, r0
 800c5be:	f000 fceb 	bl	800cf98 <_localeconv_r>
 800c5c2:	6803      	ldr	r3, [r0, #0]
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f3 fe72 	bl	80002b0 <strlen>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d4:	9005      	str	r0, [sp, #20]
 800c5d6:	3307      	adds	r3, #7
 800c5d8:	f023 0307 	bic.w	r3, r3, #7
 800c5dc:	f103 0208 	add.w	r2, r3, #8
 800c5e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5e4:	f8d4 b000 	ldr.w	fp, [r4]
 800c5e8:	f8c8 2000 	str.w	r2, [r8]
 800c5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c5f4:	9307      	str	r3, [sp, #28]
 800c5f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c5fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c602:	4b9c      	ldr	r3, [pc, #624]	@ (800c874 <_printf_float+0x2c8>)
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	f7f4 fab0 	bl	8000b6c <__aeabi_dcmpun>
 800c60c:	bb70      	cbnz	r0, 800c66c <_printf_float+0xc0>
 800c60e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c612:	4b98      	ldr	r3, [pc, #608]	@ (800c874 <_printf_float+0x2c8>)
 800c614:	f04f 32ff 	mov.w	r2, #4294967295
 800c618:	f7f4 fa8a 	bl	8000b30 <__aeabi_dcmple>
 800c61c:	bb30      	cbnz	r0, 800c66c <_printf_float+0xc0>
 800c61e:	2200      	movs	r2, #0
 800c620:	2300      	movs	r3, #0
 800c622:	4640      	mov	r0, r8
 800c624:	4649      	mov	r1, r9
 800c626:	f7f4 fa79 	bl	8000b1c <__aeabi_dcmplt>
 800c62a:	b110      	cbz	r0, 800c632 <_printf_float+0x86>
 800c62c:	232d      	movs	r3, #45	@ 0x2d
 800c62e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c632:	4a91      	ldr	r2, [pc, #580]	@ (800c878 <_printf_float+0x2cc>)
 800c634:	4b91      	ldr	r3, [pc, #580]	@ (800c87c <_printf_float+0x2d0>)
 800c636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c63a:	bf94      	ite	ls
 800c63c:	4690      	movls	r8, r2
 800c63e:	4698      	movhi	r8, r3
 800c640:	2303      	movs	r3, #3
 800c642:	6123      	str	r3, [r4, #16]
 800c644:	f02b 0304 	bic.w	r3, fp, #4
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	f04f 0900 	mov.w	r9, #0
 800c64e:	9700      	str	r7, [sp, #0]
 800c650:	4633      	mov	r3, r6
 800c652:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c654:	4621      	mov	r1, r4
 800c656:	4628      	mov	r0, r5
 800c658:	f000 f9d2 	bl	800ca00 <_printf_common>
 800c65c:	3001      	adds	r0, #1
 800c65e:	f040 808d 	bne.w	800c77c <_printf_float+0x1d0>
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	b00d      	add	sp, #52	@ 0x34
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	4642      	mov	r2, r8
 800c66e:	464b      	mov	r3, r9
 800c670:	4640      	mov	r0, r8
 800c672:	4649      	mov	r1, r9
 800c674:	f7f4 fa7a 	bl	8000b6c <__aeabi_dcmpun>
 800c678:	b140      	cbz	r0, 800c68c <_printf_float+0xe0>
 800c67a:	464b      	mov	r3, r9
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bfbc      	itt	lt
 800c680:	232d      	movlt	r3, #45	@ 0x2d
 800c682:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c686:	4a7e      	ldr	r2, [pc, #504]	@ (800c880 <_printf_float+0x2d4>)
 800c688:	4b7e      	ldr	r3, [pc, #504]	@ (800c884 <_printf_float+0x2d8>)
 800c68a:	e7d4      	b.n	800c636 <_printf_float+0x8a>
 800c68c:	6863      	ldr	r3, [r4, #4]
 800c68e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c692:	9206      	str	r2, [sp, #24]
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	d13b      	bne.n	800c710 <_printf_float+0x164>
 800c698:	2306      	movs	r3, #6
 800c69a:	6063      	str	r3, [r4, #4]
 800c69c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	6022      	str	r2, [r4, #0]
 800c6a4:	9303      	str	r3, [sp, #12]
 800c6a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c6ac:	ab09      	add	r3, sp, #36	@ 0x24
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	6861      	ldr	r1, [r4, #4]
 800c6b2:	ec49 8b10 	vmov	d0, r8, r9
 800c6b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f7ff fed6 	bl	800c46c <__cvt>
 800c6c0:	9b06      	ldr	r3, [sp, #24]
 800c6c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6c4:	2b47      	cmp	r3, #71	@ 0x47
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	d129      	bne.n	800c71e <_printf_float+0x172>
 800c6ca:	1cc8      	adds	r0, r1, #3
 800c6cc:	db02      	blt.n	800c6d4 <_printf_float+0x128>
 800c6ce:	6863      	ldr	r3, [r4, #4]
 800c6d0:	4299      	cmp	r1, r3
 800c6d2:	dd41      	ble.n	800c758 <_printf_float+0x1ac>
 800c6d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6d8:	fa5f fa8a 	uxtb.w	sl, sl
 800c6dc:	3901      	subs	r1, #1
 800c6de:	4652      	mov	r2, sl
 800c6e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6e6:	f7ff ff26 	bl	800c536 <__exponent>
 800c6ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6ec:	1813      	adds	r3, r2, r0
 800c6ee:	2a01      	cmp	r2, #1
 800c6f0:	4681      	mov	r9, r0
 800c6f2:	6123      	str	r3, [r4, #16]
 800c6f4:	dc02      	bgt.n	800c6fc <_printf_float+0x150>
 800c6f6:	6822      	ldr	r2, [r4, #0]
 800c6f8:	07d2      	lsls	r2, r2, #31
 800c6fa:	d501      	bpl.n	800c700 <_printf_float+0x154>
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0a2      	beq.n	800c64e <_printf_float+0xa2>
 800c708:	232d      	movs	r3, #45	@ 0x2d
 800c70a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c70e:	e79e      	b.n	800c64e <_printf_float+0xa2>
 800c710:	9a06      	ldr	r2, [sp, #24]
 800c712:	2a47      	cmp	r2, #71	@ 0x47
 800c714:	d1c2      	bne.n	800c69c <_printf_float+0xf0>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1c0      	bne.n	800c69c <_printf_float+0xf0>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e7bd      	b.n	800c69a <_printf_float+0xee>
 800c71e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c722:	d9db      	bls.n	800c6dc <_printf_float+0x130>
 800c724:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c728:	d118      	bne.n	800c75c <_printf_float+0x1b0>
 800c72a:	2900      	cmp	r1, #0
 800c72c:	6863      	ldr	r3, [r4, #4]
 800c72e:	dd0b      	ble.n	800c748 <_printf_float+0x19c>
 800c730:	6121      	str	r1, [r4, #16]
 800c732:	b913      	cbnz	r3, 800c73a <_printf_float+0x18e>
 800c734:	6822      	ldr	r2, [r4, #0]
 800c736:	07d0      	lsls	r0, r2, #31
 800c738:	d502      	bpl.n	800c740 <_printf_float+0x194>
 800c73a:	3301      	adds	r3, #1
 800c73c:	440b      	add	r3, r1
 800c73e:	6123      	str	r3, [r4, #16]
 800c740:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c742:	f04f 0900 	mov.w	r9, #0
 800c746:	e7db      	b.n	800c700 <_printf_float+0x154>
 800c748:	b913      	cbnz	r3, 800c750 <_printf_float+0x1a4>
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	07d2      	lsls	r2, r2, #31
 800c74e:	d501      	bpl.n	800c754 <_printf_float+0x1a8>
 800c750:	3302      	adds	r3, #2
 800c752:	e7f4      	b.n	800c73e <_printf_float+0x192>
 800c754:	2301      	movs	r3, #1
 800c756:	e7f2      	b.n	800c73e <_printf_float+0x192>
 800c758:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c75e:	4299      	cmp	r1, r3
 800c760:	db05      	blt.n	800c76e <_printf_float+0x1c2>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6121      	str	r1, [r4, #16]
 800c766:	07d8      	lsls	r0, r3, #31
 800c768:	d5ea      	bpl.n	800c740 <_printf_float+0x194>
 800c76a:	1c4b      	adds	r3, r1, #1
 800c76c:	e7e7      	b.n	800c73e <_printf_float+0x192>
 800c76e:	2900      	cmp	r1, #0
 800c770:	bfd4      	ite	le
 800c772:	f1c1 0202 	rsble	r2, r1, #2
 800c776:	2201      	movgt	r2, #1
 800c778:	4413      	add	r3, r2
 800c77a:	e7e0      	b.n	800c73e <_printf_float+0x192>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	055a      	lsls	r2, r3, #21
 800c780:	d407      	bmi.n	800c792 <_printf_float+0x1e6>
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	4642      	mov	r2, r8
 800c786:	4631      	mov	r1, r6
 800c788:	4628      	mov	r0, r5
 800c78a:	47b8      	blx	r7
 800c78c:	3001      	adds	r0, #1
 800c78e:	d12b      	bne.n	800c7e8 <_printf_float+0x23c>
 800c790:	e767      	b.n	800c662 <_printf_float+0xb6>
 800c792:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c796:	f240 80dd 	bls.w	800c954 <_printf_float+0x3a8>
 800c79a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	f7f4 f9b1 	bl	8000b08 <__aeabi_dcmpeq>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d033      	beq.n	800c812 <_printf_float+0x266>
 800c7aa:	4a37      	ldr	r2, [pc, #220]	@ (800c888 <_printf_float+0x2dc>)
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b8      	blx	r7
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	f43f af54 	beq.w	800c662 <_printf_float+0xb6>
 800c7ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c7be:	4543      	cmp	r3, r8
 800c7c0:	db02      	blt.n	800c7c8 <_printf_float+0x21c>
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	07d8      	lsls	r0, r3, #31
 800c7c6:	d50f      	bpl.n	800c7e8 <_printf_float+0x23c>
 800c7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f af45 	beq.w	800c662 <_printf_float+0xb6>
 800c7d8:	f04f 0900 	mov.w	r9, #0
 800c7dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7e0:	f104 0a1a 	add.w	sl, r4, #26
 800c7e4:	45c8      	cmp	r8, r9
 800c7e6:	dc09      	bgt.n	800c7fc <_printf_float+0x250>
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	079b      	lsls	r3, r3, #30
 800c7ec:	f100 8103 	bmi.w	800c9f6 <_printf_float+0x44a>
 800c7f0:	68e0      	ldr	r0, [r4, #12]
 800c7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f4:	4298      	cmp	r0, r3
 800c7f6:	bfb8      	it	lt
 800c7f8:	4618      	movlt	r0, r3
 800c7fa:	e734      	b.n	800c666 <_printf_float+0xba>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4652      	mov	r2, sl
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	47b8      	blx	r7
 800c806:	3001      	adds	r0, #1
 800c808:	f43f af2b 	beq.w	800c662 <_printf_float+0xb6>
 800c80c:	f109 0901 	add.w	r9, r9, #1
 800c810:	e7e8      	b.n	800c7e4 <_printf_float+0x238>
 800c812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	dc39      	bgt.n	800c88c <_printf_float+0x2e0>
 800c818:	4a1b      	ldr	r2, [pc, #108]	@ (800c888 <_printf_float+0x2dc>)
 800c81a:	2301      	movs	r3, #1
 800c81c:	4631      	mov	r1, r6
 800c81e:	4628      	mov	r0, r5
 800c820:	47b8      	blx	r7
 800c822:	3001      	adds	r0, #1
 800c824:	f43f af1d 	beq.w	800c662 <_printf_float+0xb6>
 800c828:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c82c:	ea59 0303 	orrs.w	r3, r9, r3
 800c830:	d102      	bne.n	800c838 <_printf_float+0x28c>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	07d9      	lsls	r1, r3, #31
 800c836:	d5d7      	bpl.n	800c7e8 <_printf_float+0x23c>
 800c838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c83c:	4631      	mov	r1, r6
 800c83e:	4628      	mov	r0, r5
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f43f af0d 	beq.w	800c662 <_printf_float+0xb6>
 800c848:	f04f 0a00 	mov.w	sl, #0
 800c84c:	f104 0b1a 	add.w	fp, r4, #26
 800c850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c852:	425b      	negs	r3, r3
 800c854:	4553      	cmp	r3, sl
 800c856:	dc01      	bgt.n	800c85c <_printf_float+0x2b0>
 800c858:	464b      	mov	r3, r9
 800c85a:	e793      	b.n	800c784 <_printf_float+0x1d8>
 800c85c:	2301      	movs	r3, #1
 800c85e:	465a      	mov	r2, fp
 800c860:	4631      	mov	r1, r6
 800c862:	4628      	mov	r0, r5
 800c864:	47b8      	blx	r7
 800c866:	3001      	adds	r0, #1
 800c868:	f43f aefb 	beq.w	800c662 <_printf_float+0xb6>
 800c86c:	f10a 0a01 	add.w	sl, sl, #1
 800c870:	e7ee      	b.n	800c850 <_printf_float+0x2a4>
 800c872:	bf00      	nop
 800c874:	7fefffff 	.word	0x7fefffff
 800c878:	08011900 	.word	0x08011900
 800c87c:	08011904 	.word	0x08011904
 800c880:	08011908 	.word	0x08011908
 800c884:	0801190c 	.word	0x0801190c
 800c888:	08011910 	.word	0x08011910
 800c88c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c88e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c892:	4553      	cmp	r3, sl
 800c894:	bfa8      	it	ge
 800c896:	4653      	movge	r3, sl
 800c898:	2b00      	cmp	r3, #0
 800c89a:	4699      	mov	r9, r3
 800c89c:	dc36      	bgt.n	800c90c <_printf_float+0x360>
 800c89e:	f04f 0b00 	mov.w	fp, #0
 800c8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8a6:	f104 021a 	add.w	r2, r4, #26
 800c8aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8ac:	9306      	str	r3, [sp, #24]
 800c8ae:	eba3 0309 	sub.w	r3, r3, r9
 800c8b2:	455b      	cmp	r3, fp
 800c8b4:	dc31      	bgt.n	800c91a <_printf_float+0x36e>
 800c8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b8:	459a      	cmp	sl, r3
 800c8ba:	dc3a      	bgt.n	800c932 <_printf_float+0x386>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	07da      	lsls	r2, r3, #31
 800c8c0:	d437      	bmi.n	800c932 <_printf_float+0x386>
 800c8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c4:	ebaa 0903 	sub.w	r9, sl, r3
 800c8c8:	9b06      	ldr	r3, [sp, #24]
 800c8ca:	ebaa 0303 	sub.w	r3, sl, r3
 800c8ce:	4599      	cmp	r9, r3
 800c8d0:	bfa8      	it	ge
 800c8d2:	4699      	movge	r9, r3
 800c8d4:	f1b9 0f00 	cmp.w	r9, #0
 800c8d8:	dc33      	bgt.n	800c942 <_printf_float+0x396>
 800c8da:	f04f 0800 	mov.w	r8, #0
 800c8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8e2:	f104 0b1a 	add.w	fp, r4, #26
 800c8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800c8ec:	eba3 0309 	sub.w	r3, r3, r9
 800c8f0:	4543      	cmp	r3, r8
 800c8f2:	f77f af79 	ble.w	800c7e8 <_printf_float+0x23c>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	465a      	mov	r2, fp
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	47b8      	blx	r7
 800c900:	3001      	adds	r0, #1
 800c902:	f43f aeae 	beq.w	800c662 <_printf_float+0xb6>
 800c906:	f108 0801 	add.w	r8, r8, #1
 800c90a:	e7ec      	b.n	800c8e6 <_printf_float+0x33a>
 800c90c:	4642      	mov	r2, r8
 800c90e:	4631      	mov	r1, r6
 800c910:	4628      	mov	r0, r5
 800c912:	47b8      	blx	r7
 800c914:	3001      	adds	r0, #1
 800c916:	d1c2      	bne.n	800c89e <_printf_float+0x2f2>
 800c918:	e6a3      	b.n	800c662 <_printf_float+0xb6>
 800c91a:	2301      	movs	r3, #1
 800c91c:	4631      	mov	r1, r6
 800c91e:	4628      	mov	r0, r5
 800c920:	9206      	str	r2, [sp, #24]
 800c922:	47b8      	blx	r7
 800c924:	3001      	adds	r0, #1
 800c926:	f43f ae9c 	beq.w	800c662 <_printf_float+0xb6>
 800c92a:	9a06      	ldr	r2, [sp, #24]
 800c92c:	f10b 0b01 	add.w	fp, fp, #1
 800c930:	e7bb      	b.n	800c8aa <_printf_float+0x2fe>
 800c932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	d1c0      	bne.n	800c8c2 <_printf_float+0x316>
 800c940:	e68f      	b.n	800c662 <_printf_float+0xb6>
 800c942:	9a06      	ldr	r2, [sp, #24]
 800c944:	464b      	mov	r3, r9
 800c946:	4442      	add	r2, r8
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	d1c3      	bne.n	800c8da <_printf_float+0x32e>
 800c952:	e686      	b.n	800c662 <_printf_float+0xb6>
 800c954:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c958:	f1ba 0f01 	cmp.w	sl, #1
 800c95c:	dc01      	bgt.n	800c962 <_printf_float+0x3b6>
 800c95e:	07db      	lsls	r3, r3, #31
 800c960:	d536      	bpl.n	800c9d0 <_printf_float+0x424>
 800c962:	2301      	movs	r3, #1
 800c964:	4642      	mov	r2, r8
 800c966:	4631      	mov	r1, r6
 800c968:	4628      	mov	r0, r5
 800c96a:	47b8      	blx	r7
 800c96c:	3001      	adds	r0, #1
 800c96e:	f43f ae78 	beq.w	800c662 <_printf_float+0xb6>
 800c972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c976:	4631      	mov	r1, r6
 800c978:	4628      	mov	r0, r5
 800c97a:	47b8      	blx	r7
 800c97c:	3001      	adds	r0, #1
 800c97e:	f43f ae70 	beq.w	800c662 <_printf_float+0xb6>
 800c982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c986:	2200      	movs	r2, #0
 800c988:	2300      	movs	r3, #0
 800c98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c98e:	f7f4 f8bb 	bl	8000b08 <__aeabi_dcmpeq>
 800c992:	b9c0      	cbnz	r0, 800c9c6 <_printf_float+0x41a>
 800c994:	4653      	mov	r3, sl
 800c996:	f108 0201 	add.w	r2, r8, #1
 800c99a:	4631      	mov	r1, r6
 800c99c:	4628      	mov	r0, r5
 800c99e:	47b8      	blx	r7
 800c9a0:	3001      	adds	r0, #1
 800c9a2:	d10c      	bne.n	800c9be <_printf_float+0x412>
 800c9a4:	e65d      	b.n	800c662 <_printf_float+0xb6>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	465a      	mov	r2, fp
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b8      	blx	r7
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	f43f ae56 	beq.w	800c662 <_printf_float+0xb6>
 800c9b6:	f108 0801 	add.w	r8, r8, #1
 800c9ba:	45d0      	cmp	r8, sl
 800c9bc:	dbf3      	blt.n	800c9a6 <_printf_float+0x3fa>
 800c9be:	464b      	mov	r3, r9
 800c9c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c9c4:	e6df      	b.n	800c786 <_printf_float+0x1da>
 800c9c6:	f04f 0800 	mov.w	r8, #0
 800c9ca:	f104 0b1a 	add.w	fp, r4, #26
 800c9ce:	e7f4      	b.n	800c9ba <_printf_float+0x40e>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	4642      	mov	r2, r8
 800c9d4:	e7e1      	b.n	800c99a <_printf_float+0x3ee>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	464a      	mov	r2, r9
 800c9da:	4631      	mov	r1, r6
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b8      	blx	r7
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	f43f ae3e 	beq.w	800c662 <_printf_float+0xb6>
 800c9e6:	f108 0801 	add.w	r8, r8, #1
 800c9ea:	68e3      	ldr	r3, [r4, #12]
 800c9ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c9ee:	1a5b      	subs	r3, r3, r1
 800c9f0:	4543      	cmp	r3, r8
 800c9f2:	dcf0      	bgt.n	800c9d6 <_printf_float+0x42a>
 800c9f4:	e6fc      	b.n	800c7f0 <_printf_float+0x244>
 800c9f6:	f04f 0800 	mov.w	r8, #0
 800c9fa:	f104 0919 	add.w	r9, r4, #25
 800c9fe:	e7f4      	b.n	800c9ea <_printf_float+0x43e>

0800ca00 <_printf_common>:
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	4616      	mov	r6, r2
 800ca06:	4698      	mov	r8, r3
 800ca08:	688a      	ldr	r2, [r1, #8]
 800ca0a:	690b      	ldr	r3, [r1, #16]
 800ca0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca10:	4293      	cmp	r3, r2
 800ca12:	bfb8      	it	lt
 800ca14:	4613      	movlt	r3, r2
 800ca16:	6033      	str	r3, [r6, #0]
 800ca18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	b10a      	cbz	r2, 800ca26 <_printf_common+0x26>
 800ca22:	3301      	adds	r3, #1
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	0699      	lsls	r1, r3, #26
 800ca2a:	bf42      	ittt	mi
 800ca2c:	6833      	ldrmi	r3, [r6, #0]
 800ca2e:	3302      	addmi	r3, #2
 800ca30:	6033      	strmi	r3, [r6, #0]
 800ca32:	6825      	ldr	r5, [r4, #0]
 800ca34:	f015 0506 	ands.w	r5, r5, #6
 800ca38:	d106      	bne.n	800ca48 <_printf_common+0x48>
 800ca3a:	f104 0a19 	add.w	sl, r4, #25
 800ca3e:	68e3      	ldr	r3, [r4, #12]
 800ca40:	6832      	ldr	r2, [r6, #0]
 800ca42:	1a9b      	subs	r3, r3, r2
 800ca44:	42ab      	cmp	r3, r5
 800ca46:	dc26      	bgt.n	800ca96 <_printf_common+0x96>
 800ca48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca4c:	6822      	ldr	r2, [r4, #0]
 800ca4e:	3b00      	subs	r3, #0
 800ca50:	bf18      	it	ne
 800ca52:	2301      	movne	r3, #1
 800ca54:	0692      	lsls	r2, r2, #26
 800ca56:	d42b      	bmi.n	800cab0 <_printf_common+0xb0>
 800ca58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca5c:	4641      	mov	r1, r8
 800ca5e:	4638      	mov	r0, r7
 800ca60:	47c8      	blx	r9
 800ca62:	3001      	adds	r0, #1
 800ca64:	d01e      	beq.n	800caa4 <_printf_common+0xa4>
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	6922      	ldr	r2, [r4, #16]
 800ca6a:	f003 0306 	and.w	r3, r3, #6
 800ca6e:	2b04      	cmp	r3, #4
 800ca70:	bf02      	ittt	eq
 800ca72:	68e5      	ldreq	r5, [r4, #12]
 800ca74:	6833      	ldreq	r3, [r6, #0]
 800ca76:	1aed      	subeq	r5, r5, r3
 800ca78:	68a3      	ldr	r3, [r4, #8]
 800ca7a:	bf0c      	ite	eq
 800ca7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca80:	2500      	movne	r5, #0
 800ca82:	4293      	cmp	r3, r2
 800ca84:	bfc4      	itt	gt
 800ca86:	1a9b      	subgt	r3, r3, r2
 800ca88:	18ed      	addgt	r5, r5, r3
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	341a      	adds	r4, #26
 800ca8e:	42b5      	cmp	r5, r6
 800ca90:	d11a      	bne.n	800cac8 <_printf_common+0xc8>
 800ca92:	2000      	movs	r0, #0
 800ca94:	e008      	b.n	800caa8 <_printf_common+0xa8>
 800ca96:	2301      	movs	r3, #1
 800ca98:	4652      	mov	r2, sl
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	4638      	mov	r0, r7
 800ca9e:	47c8      	blx	r9
 800caa0:	3001      	adds	r0, #1
 800caa2:	d103      	bne.n	800caac <_printf_common+0xac>
 800caa4:	f04f 30ff 	mov.w	r0, #4294967295
 800caa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caac:	3501      	adds	r5, #1
 800caae:	e7c6      	b.n	800ca3e <_printf_common+0x3e>
 800cab0:	18e1      	adds	r1, r4, r3
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	2030      	movs	r0, #48	@ 0x30
 800cab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800caba:	4422      	add	r2, r4
 800cabc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cac4:	3302      	adds	r3, #2
 800cac6:	e7c7      	b.n	800ca58 <_printf_common+0x58>
 800cac8:	2301      	movs	r3, #1
 800caca:	4622      	mov	r2, r4
 800cacc:	4641      	mov	r1, r8
 800cace:	4638      	mov	r0, r7
 800cad0:	47c8      	blx	r9
 800cad2:	3001      	adds	r0, #1
 800cad4:	d0e6      	beq.n	800caa4 <_printf_common+0xa4>
 800cad6:	3601      	adds	r6, #1
 800cad8:	e7d9      	b.n	800ca8e <_printf_common+0x8e>
	...

0800cadc <_printf_i>:
 800cadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cae0:	7e0f      	ldrb	r7, [r1, #24]
 800cae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cae4:	2f78      	cmp	r7, #120	@ 0x78
 800cae6:	4691      	mov	r9, r2
 800cae8:	4680      	mov	r8, r0
 800caea:	460c      	mov	r4, r1
 800caec:	469a      	mov	sl, r3
 800caee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800caf2:	d807      	bhi.n	800cb04 <_printf_i+0x28>
 800caf4:	2f62      	cmp	r7, #98	@ 0x62
 800caf6:	d80a      	bhi.n	800cb0e <_printf_i+0x32>
 800caf8:	2f00      	cmp	r7, #0
 800cafa:	f000 80d2 	beq.w	800cca2 <_printf_i+0x1c6>
 800cafe:	2f58      	cmp	r7, #88	@ 0x58
 800cb00:	f000 80b9 	beq.w	800cc76 <_printf_i+0x19a>
 800cb04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb0c:	e03a      	b.n	800cb84 <_printf_i+0xa8>
 800cb0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb12:	2b15      	cmp	r3, #21
 800cb14:	d8f6      	bhi.n	800cb04 <_printf_i+0x28>
 800cb16:	a101      	add	r1, pc, #4	@ (adr r1, 800cb1c <_printf_i+0x40>)
 800cb18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb1c:	0800cb75 	.word	0x0800cb75
 800cb20:	0800cb89 	.word	0x0800cb89
 800cb24:	0800cb05 	.word	0x0800cb05
 800cb28:	0800cb05 	.word	0x0800cb05
 800cb2c:	0800cb05 	.word	0x0800cb05
 800cb30:	0800cb05 	.word	0x0800cb05
 800cb34:	0800cb89 	.word	0x0800cb89
 800cb38:	0800cb05 	.word	0x0800cb05
 800cb3c:	0800cb05 	.word	0x0800cb05
 800cb40:	0800cb05 	.word	0x0800cb05
 800cb44:	0800cb05 	.word	0x0800cb05
 800cb48:	0800cc89 	.word	0x0800cc89
 800cb4c:	0800cbb3 	.word	0x0800cbb3
 800cb50:	0800cc43 	.word	0x0800cc43
 800cb54:	0800cb05 	.word	0x0800cb05
 800cb58:	0800cb05 	.word	0x0800cb05
 800cb5c:	0800ccab 	.word	0x0800ccab
 800cb60:	0800cb05 	.word	0x0800cb05
 800cb64:	0800cbb3 	.word	0x0800cbb3
 800cb68:	0800cb05 	.word	0x0800cb05
 800cb6c:	0800cb05 	.word	0x0800cb05
 800cb70:	0800cc4b 	.word	0x0800cc4b
 800cb74:	6833      	ldr	r3, [r6, #0]
 800cb76:	1d1a      	adds	r2, r3, #4
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6032      	str	r2, [r6, #0]
 800cb7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb84:	2301      	movs	r3, #1
 800cb86:	e09d      	b.n	800ccc4 <_printf_i+0x1e8>
 800cb88:	6833      	ldr	r3, [r6, #0]
 800cb8a:	6820      	ldr	r0, [r4, #0]
 800cb8c:	1d19      	adds	r1, r3, #4
 800cb8e:	6031      	str	r1, [r6, #0]
 800cb90:	0606      	lsls	r6, r0, #24
 800cb92:	d501      	bpl.n	800cb98 <_printf_i+0xbc>
 800cb94:	681d      	ldr	r5, [r3, #0]
 800cb96:	e003      	b.n	800cba0 <_printf_i+0xc4>
 800cb98:	0645      	lsls	r5, r0, #25
 800cb9a:	d5fb      	bpl.n	800cb94 <_printf_i+0xb8>
 800cb9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	da03      	bge.n	800cbac <_printf_i+0xd0>
 800cba4:	232d      	movs	r3, #45	@ 0x2d
 800cba6:	426d      	negs	r5, r5
 800cba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbac:	4859      	ldr	r0, [pc, #356]	@ (800cd14 <_printf_i+0x238>)
 800cbae:	230a      	movs	r3, #10
 800cbb0:	e011      	b.n	800cbd6 <_printf_i+0xfa>
 800cbb2:	6821      	ldr	r1, [r4, #0]
 800cbb4:	6833      	ldr	r3, [r6, #0]
 800cbb6:	0608      	lsls	r0, r1, #24
 800cbb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbbc:	d402      	bmi.n	800cbc4 <_printf_i+0xe8>
 800cbbe:	0649      	lsls	r1, r1, #25
 800cbc0:	bf48      	it	mi
 800cbc2:	b2ad      	uxthmi	r5, r5
 800cbc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbc6:	4853      	ldr	r0, [pc, #332]	@ (800cd14 <_printf_i+0x238>)
 800cbc8:	6033      	str	r3, [r6, #0]
 800cbca:	bf14      	ite	ne
 800cbcc:	230a      	movne	r3, #10
 800cbce:	2308      	moveq	r3, #8
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbd6:	6866      	ldr	r6, [r4, #4]
 800cbd8:	60a6      	str	r6, [r4, #8]
 800cbda:	2e00      	cmp	r6, #0
 800cbdc:	bfa2      	ittt	ge
 800cbde:	6821      	ldrge	r1, [r4, #0]
 800cbe0:	f021 0104 	bicge.w	r1, r1, #4
 800cbe4:	6021      	strge	r1, [r4, #0]
 800cbe6:	b90d      	cbnz	r5, 800cbec <_printf_i+0x110>
 800cbe8:	2e00      	cmp	r6, #0
 800cbea:	d04b      	beq.n	800cc84 <_printf_i+0x1a8>
 800cbec:	4616      	mov	r6, r2
 800cbee:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbf2:	fb03 5711 	mls	r7, r3, r1, r5
 800cbf6:	5dc7      	ldrb	r7, [r0, r7]
 800cbf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbfc:	462f      	mov	r7, r5
 800cbfe:	42bb      	cmp	r3, r7
 800cc00:	460d      	mov	r5, r1
 800cc02:	d9f4      	bls.n	800cbee <_printf_i+0x112>
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	d10b      	bne.n	800cc20 <_printf_i+0x144>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	07df      	lsls	r7, r3, #31
 800cc0c:	d508      	bpl.n	800cc20 <_printf_i+0x144>
 800cc0e:	6923      	ldr	r3, [r4, #16]
 800cc10:	6861      	ldr	r1, [r4, #4]
 800cc12:	4299      	cmp	r1, r3
 800cc14:	bfde      	ittt	le
 800cc16:	2330      	movle	r3, #48	@ 0x30
 800cc18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc20:	1b92      	subs	r2, r2, r6
 800cc22:	6122      	str	r2, [r4, #16]
 800cc24:	f8cd a000 	str.w	sl, [sp]
 800cc28:	464b      	mov	r3, r9
 800cc2a:	aa03      	add	r2, sp, #12
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	4640      	mov	r0, r8
 800cc30:	f7ff fee6 	bl	800ca00 <_printf_common>
 800cc34:	3001      	adds	r0, #1
 800cc36:	d14a      	bne.n	800ccce <_printf_i+0x1f2>
 800cc38:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3c:	b004      	add	sp, #16
 800cc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	f043 0320 	orr.w	r3, r3, #32
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	4833      	ldr	r0, [pc, #204]	@ (800cd18 <_printf_i+0x23c>)
 800cc4c:	2778      	movs	r7, #120	@ 0x78
 800cc4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	6831      	ldr	r1, [r6, #0]
 800cc56:	061f      	lsls	r7, r3, #24
 800cc58:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc5c:	d402      	bmi.n	800cc64 <_printf_i+0x188>
 800cc5e:	065f      	lsls	r7, r3, #25
 800cc60:	bf48      	it	mi
 800cc62:	b2ad      	uxthmi	r5, r5
 800cc64:	6031      	str	r1, [r6, #0]
 800cc66:	07d9      	lsls	r1, r3, #31
 800cc68:	bf44      	itt	mi
 800cc6a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc6e:	6023      	strmi	r3, [r4, #0]
 800cc70:	b11d      	cbz	r5, 800cc7a <_printf_i+0x19e>
 800cc72:	2310      	movs	r3, #16
 800cc74:	e7ac      	b.n	800cbd0 <_printf_i+0xf4>
 800cc76:	4827      	ldr	r0, [pc, #156]	@ (800cd14 <_printf_i+0x238>)
 800cc78:	e7e9      	b.n	800cc4e <_printf_i+0x172>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f023 0320 	bic.w	r3, r3, #32
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	e7f6      	b.n	800cc72 <_printf_i+0x196>
 800cc84:	4616      	mov	r6, r2
 800cc86:	e7bd      	b.n	800cc04 <_printf_i+0x128>
 800cc88:	6833      	ldr	r3, [r6, #0]
 800cc8a:	6825      	ldr	r5, [r4, #0]
 800cc8c:	6961      	ldr	r1, [r4, #20]
 800cc8e:	1d18      	adds	r0, r3, #4
 800cc90:	6030      	str	r0, [r6, #0]
 800cc92:	062e      	lsls	r6, r5, #24
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	d501      	bpl.n	800cc9c <_printf_i+0x1c0>
 800cc98:	6019      	str	r1, [r3, #0]
 800cc9a:	e002      	b.n	800cca2 <_printf_i+0x1c6>
 800cc9c:	0668      	lsls	r0, r5, #25
 800cc9e:	d5fb      	bpl.n	800cc98 <_printf_i+0x1bc>
 800cca0:	8019      	strh	r1, [r3, #0]
 800cca2:	2300      	movs	r3, #0
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	4616      	mov	r6, r2
 800cca8:	e7bc      	b.n	800cc24 <_printf_i+0x148>
 800ccaa:	6833      	ldr	r3, [r6, #0]
 800ccac:	1d1a      	adds	r2, r3, #4
 800ccae:	6032      	str	r2, [r6, #0]
 800ccb0:	681e      	ldr	r6, [r3, #0]
 800ccb2:	6862      	ldr	r2, [r4, #4]
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f7f3 faaa 	bl	8000210 <memchr>
 800ccbc:	b108      	cbz	r0, 800ccc2 <_printf_i+0x1e6>
 800ccbe:	1b80      	subs	r0, r0, r6
 800ccc0:	6060      	str	r0, [r4, #4]
 800ccc2:	6863      	ldr	r3, [r4, #4]
 800ccc4:	6123      	str	r3, [r4, #16]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cccc:	e7aa      	b.n	800cc24 <_printf_i+0x148>
 800ccce:	6923      	ldr	r3, [r4, #16]
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	4640      	mov	r0, r8
 800ccd6:	47d0      	blx	sl
 800ccd8:	3001      	adds	r0, #1
 800ccda:	d0ad      	beq.n	800cc38 <_printf_i+0x15c>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	079b      	lsls	r3, r3, #30
 800cce0:	d413      	bmi.n	800cd0a <_printf_i+0x22e>
 800cce2:	68e0      	ldr	r0, [r4, #12]
 800cce4:	9b03      	ldr	r3, [sp, #12]
 800cce6:	4298      	cmp	r0, r3
 800cce8:	bfb8      	it	lt
 800ccea:	4618      	movlt	r0, r3
 800ccec:	e7a6      	b.n	800cc3c <_printf_i+0x160>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	47d0      	blx	sl
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d09d      	beq.n	800cc38 <_printf_i+0x15c>
 800ccfc:	3501      	adds	r5, #1
 800ccfe:	68e3      	ldr	r3, [r4, #12]
 800cd00:	9903      	ldr	r1, [sp, #12]
 800cd02:	1a5b      	subs	r3, r3, r1
 800cd04:	42ab      	cmp	r3, r5
 800cd06:	dcf2      	bgt.n	800ccee <_printf_i+0x212>
 800cd08:	e7eb      	b.n	800cce2 <_printf_i+0x206>
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	f104 0619 	add.w	r6, r4, #25
 800cd10:	e7f5      	b.n	800ccfe <_printf_i+0x222>
 800cd12:	bf00      	nop
 800cd14:	08011912 	.word	0x08011912
 800cd18:	08011923 	.word	0x08011923

0800cd1c <std>:
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	b510      	push	{r4, lr}
 800cd20:	4604      	mov	r4, r0
 800cd22:	e9c0 3300 	strd	r3, r3, [r0]
 800cd26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd2a:	6083      	str	r3, [r0, #8]
 800cd2c:	8181      	strh	r1, [r0, #12]
 800cd2e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd30:	81c2      	strh	r2, [r0, #14]
 800cd32:	6183      	str	r3, [r0, #24]
 800cd34:	4619      	mov	r1, r3
 800cd36:	2208      	movs	r2, #8
 800cd38:	305c      	adds	r0, #92	@ 0x5c
 800cd3a:	f000 f924 	bl	800cf86 <memset>
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd74 <std+0x58>)
 800cd40:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd42:	4b0d      	ldr	r3, [pc, #52]	@ (800cd78 <std+0x5c>)
 800cd44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd46:	4b0d      	ldr	r3, [pc, #52]	@ (800cd7c <std+0x60>)
 800cd48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd80 <std+0x64>)
 800cd4c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd4e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd84 <std+0x68>)
 800cd50:	6224      	str	r4, [r4, #32]
 800cd52:	429c      	cmp	r4, r3
 800cd54:	d006      	beq.n	800cd64 <std+0x48>
 800cd56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd5a:	4294      	cmp	r4, r2
 800cd5c:	d002      	beq.n	800cd64 <std+0x48>
 800cd5e:	33d0      	adds	r3, #208	@ 0xd0
 800cd60:	429c      	cmp	r4, r3
 800cd62:	d105      	bne.n	800cd70 <std+0x54>
 800cd64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd6c:	f000 b988 	b.w	800d080 <__retarget_lock_init_recursive>
 800cd70:	bd10      	pop	{r4, pc}
 800cd72:	bf00      	nop
 800cd74:	0800cee1 	.word	0x0800cee1
 800cd78:	0800cf03 	.word	0x0800cf03
 800cd7c:	0800cf3b 	.word	0x0800cf3b
 800cd80:	0800cf5f 	.word	0x0800cf5f
 800cd84:	20000870 	.word	0x20000870

0800cd88 <stdio_exit_handler>:
 800cd88:	4a02      	ldr	r2, [pc, #8]	@ (800cd94 <stdio_exit_handler+0xc>)
 800cd8a:	4903      	ldr	r1, [pc, #12]	@ (800cd98 <stdio_exit_handler+0x10>)
 800cd8c:	4803      	ldr	r0, [pc, #12]	@ (800cd9c <stdio_exit_handler+0x14>)
 800cd8e:	f000 b869 	b.w	800ce64 <_fwalk_sglue>
 800cd92:	bf00      	nop
 800cd94:	2000004c 	.word	0x2000004c
 800cd98:	0800e9fd 	.word	0x0800e9fd
 800cd9c:	2000005c 	.word	0x2000005c

0800cda0 <cleanup_stdio>:
 800cda0:	6841      	ldr	r1, [r0, #4]
 800cda2:	4b0c      	ldr	r3, [pc, #48]	@ (800cdd4 <cleanup_stdio+0x34>)
 800cda4:	4299      	cmp	r1, r3
 800cda6:	b510      	push	{r4, lr}
 800cda8:	4604      	mov	r4, r0
 800cdaa:	d001      	beq.n	800cdb0 <cleanup_stdio+0x10>
 800cdac:	f001 fe26 	bl	800e9fc <_fflush_r>
 800cdb0:	68a1      	ldr	r1, [r4, #8]
 800cdb2:	4b09      	ldr	r3, [pc, #36]	@ (800cdd8 <cleanup_stdio+0x38>)
 800cdb4:	4299      	cmp	r1, r3
 800cdb6:	d002      	beq.n	800cdbe <cleanup_stdio+0x1e>
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f001 fe1f 	bl	800e9fc <_fflush_r>
 800cdbe:	68e1      	ldr	r1, [r4, #12]
 800cdc0:	4b06      	ldr	r3, [pc, #24]	@ (800cddc <cleanup_stdio+0x3c>)
 800cdc2:	4299      	cmp	r1, r3
 800cdc4:	d004      	beq.n	800cdd0 <cleanup_stdio+0x30>
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdcc:	f001 be16 	b.w	800e9fc <_fflush_r>
 800cdd0:	bd10      	pop	{r4, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000870 	.word	0x20000870
 800cdd8:	200008d8 	.word	0x200008d8
 800cddc:	20000940 	.word	0x20000940

0800cde0 <global_stdio_init.part.0>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	4b0b      	ldr	r3, [pc, #44]	@ (800ce10 <global_stdio_init.part.0+0x30>)
 800cde4:	4c0b      	ldr	r4, [pc, #44]	@ (800ce14 <global_stdio_init.part.0+0x34>)
 800cde6:	4a0c      	ldr	r2, [pc, #48]	@ (800ce18 <global_stdio_init.part.0+0x38>)
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	4620      	mov	r0, r4
 800cdec:	2200      	movs	r2, #0
 800cdee:	2104      	movs	r1, #4
 800cdf0:	f7ff ff94 	bl	800cd1c <std>
 800cdf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	2109      	movs	r1, #9
 800cdfc:	f7ff ff8e 	bl	800cd1c <std>
 800ce00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce04:	2202      	movs	r2, #2
 800ce06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce0a:	2112      	movs	r1, #18
 800ce0c:	f7ff bf86 	b.w	800cd1c <std>
 800ce10:	200009a8 	.word	0x200009a8
 800ce14:	20000870 	.word	0x20000870
 800ce18:	0800cd89 	.word	0x0800cd89

0800ce1c <__sfp_lock_acquire>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	@ (800ce24 <__sfp_lock_acquire+0x8>)
 800ce1e:	f000 b930 	b.w	800d082 <__retarget_lock_acquire_recursive>
 800ce22:	bf00      	nop
 800ce24:	200009b1 	.word	0x200009b1

0800ce28 <__sfp_lock_release>:
 800ce28:	4801      	ldr	r0, [pc, #4]	@ (800ce30 <__sfp_lock_release+0x8>)
 800ce2a:	f000 b92b 	b.w	800d084 <__retarget_lock_release_recursive>
 800ce2e:	bf00      	nop
 800ce30:	200009b1 	.word	0x200009b1

0800ce34 <__sinit>:
 800ce34:	b510      	push	{r4, lr}
 800ce36:	4604      	mov	r4, r0
 800ce38:	f7ff fff0 	bl	800ce1c <__sfp_lock_acquire>
 800ce3c:	6a23      	ldr	r3, [r4, #32]
 800ce3e:	b11b      	cbz	r3, 800ce48 <__sinit+0x14>
 800ce40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce44:	f7ff bff0 	b.w	800ce28 <__sfp_lock_release>
 800ce48:	4b04      	ldr	r3, [pc, #16]	@ (800ce5c <__sinit+0x28>)
 800ce4a:	6223      	str	r3, [r4, #32]
 800ce4c:	4b04      	ldr	r3, [pc, #16]	@ (800ce60 <__sinit+0x2c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1f5      	bne.n	800ce40 <__sinit+0xc>
 800ce54:	f7ff ffc4 	bl	800cde0 <global_stdio_init.part.0>
 800ce58:	e7f2      	b.n	800ce40 <__sinit+0xc>
 800ce5a:	bf00      	nop
 800ce5c:	0800cda1 	.word	0x0800cda1
 800ce60:	200009a8 	.word	0x200009a8

0800ce64 <_fwalk_sglue>:
 800ce64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce68:	4607      	mov	r7, r0
 800ce6a:	4688      	mov	r8, r1
 800ce6c:	4614      	mov	r4, r2
 800ce6e:	2600      	movs	r6, #0
 800ce70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce74:	f1b9 0901 	subs.w	r9, r9, #1
 800ce78:	d505      	bpl.n	800ce86 <_fwalk_sglue+0x22>
 800ce7a:	6824      	ldr	r4, [r4, #0]
 800ce7c:	2c00      	cmp	r4, #0
 800ce7e:	d1f7      	bne.n	800ce70 <_fwalk_sglue+0xc>
 800ce80:	4630      	mov	r0, r6
 800ce82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce86:	89ab      	ldrh	r3, [r5, #12]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d907      	bls.n	800ce9c <_fwalk_sglue+0x38>
 800ce8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce90:	3301      	adds	r3, #1
 800ce92:	d003      	beq.n	800ce9c <_fwalk_sglue+0x38>
 800ce94:	4629      	mov	r1, r5
 800ce96:	4638      	mov	r0, r7
 800ce98:	47c0      	blx	r8
 800ce9a:	4306      	orrs	r6, r0
 800ce9c:	3568      	adds	r5, #104	@ 0x68
 800ce9e:	e7e9      	b.n	800ce74 <_fwalk_sglue+0x10>

0800cea0 <siprintf>:
 800cea0:	b40e      	push	{r1, r2, r3}
 800cea2:	b500      	push	{lr}
 800cea4:	b09c      	sub	sp, #112	@ 0x70
 800cea6:	ab1d      	add	r3, sp, #116	@ 0x74
 800cea8:	9002      	str	r0, [sp, #8]
 800ceaa:	9006      	str	r0, [sp, #24]
 800ceac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ceb0:	4809      	ldr	r0, [pc, #36]	@ (800ced8 <siprintf+0x38>)
 800ceb2:	9107      	str	r1, [sp, #28]
 800ceb4:	9104      	str	r1, [sp, #16]
 800ceb6:	4909      	ldr	r1, [pc, #36]	@ (800cedc <siprintf+0x3c>)
 800ceb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cebc:	9105      	str	r1, [sp, #20]
 800cebe:	6800      	ldr	r0, [r0, #0]
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	a902      	add	r1, sp, #8
 800cec4:	f001 fc1a 	bl	800e6fc <_svfiprintf_r>
 800cec8:	9b02      	ldr	r3, [sp, #8]
 800ceca:	2200      	movs	r2, #0
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	b01c      	add	sp, #112	@ 0x70
 800ced0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ced4:	b003      	add	sp, #12
 800ced6:	4770      	bx	lr
 800ced8:	20000058 	.word	0x20000058
 800cedc:	ffff0208 	.word	0xffff0208

0800cee0 <__sread>:
 800cee0:	b510      	push	{r4, lr}
 800cee2:	460c      	mov	r4, r1
 800cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee8:	f000 f87c 	bl	800cfe4 <_read_r>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	bfab      	itete	ge
 800cef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cef2:	89a3      	ldrhlt	r3, [r4, #12]
 800cef4:	181b      	addge	r3, r3, r0
 800cef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cefa:	bfac      	ite	ge
 800cefc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cefe:	81a3      	strhlt	r3, [r4, #12]
 800cf00:	bd10      	pop	{r4, pc}

0800cf02 <__swrite>:
 800cf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf06:	461f      	mov	r7, r3
 800cf08:	898b      	ldrh	r3, [r1, #12]
 800cf0a:	05db      	lsls	r3, r3, #23
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	4616      	mov	r6, r2
 800cf12:	d505      	bpl.n	800cf20 <__swrite+0x1e>
 800cf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf18:	2302      	movs	r3, #2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f000 f850 	bl	800cfc0 <_lseek_r>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	463b      	mov	r3, r7
 800cf30:	4628      	mov	r0, r5
 800cf32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf36:	f000 b867 	b.w	800d008 <_write_r>

0800cf3a <__sseek>:
 800cf3a:	b510      	push	{r4, lr}
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf42:	f000 f83d 	bl	800cfc0 <_lseek_r>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	bf15      	itete	ne
 800cf4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf56:	81a3      	strheq	r3, [r4, #12]
 800cf58:	bf18      	it	ne
 800cf5a:	81a3      	strhne	r3, [r4, #12]
 800cf5c:	bd10      	pop	{r4, pc}

0800cf5e <__sclose>:
 800cf5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf62:	f000 b81d 	b.w	800cfa0 <_close_r>

0800cf66 <memcmp>:
 800cf66:	b510      	push	{r4, lr}
 800cf68:	3901      	subs	r1, #1
 800cf6a:	4402      	add	r2, r0
 800cf6c:	4290      	cmp	r0, r2
 800cf6e:	d101      	bne.n	800cf74 <memcmp+0xe>
 800cf70:	2000      	movs	r0, #0
 800cf72:	e005      	b.n	800cf80 <memcmp+0x1a>
 800cf74:	7803      	ldrb	r3, [r0, #0]
 800cf76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	d001      	beq.n	800cf82 <memcmp+0x1c>
 800cf7e:	1b18      	subs	r0, r3, r4
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	3001      	adds	r0, #1
 800cf84:	e7f2      	b.n	800cf6c <memcmp+0x6>

0800cf86 <memset>:
 800cf86:	4402      	add	r2, r0
 800cf88:	4603      	mov	r3, r0
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d100      	bne.n	800cf90 <memset+0xa>
 800cf8e:	4770      	bx	lr
 800cf90:	f803 1b01 	strb.w	r1, [r3], #1
 800cf94:	e7f9      	b.n	800cf8a <memset+0x4>
	...

0800cf98 <_localeconv_r>:
 800cf98:	4800      	ldr	r0, [pc, #0]	@ (800cf9c <_localeconv_r+0x4>)
 800cf9a:	4770      	bx	lr
 800cf9c:	20000198 	.word	0x20000198

0800cfa0 <_close_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d06      	ldr	r5, [pc, #24]	@ (800cfbc <_close_r+0x1c>)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	602b      	str	r3, [r5, #0]
 800cfac:	f7fa f920 	bl	80071f0 <_close>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d102      	bne.n	800cfba <_close_r+0x1a>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b103      	cbz	r3, 800cfba <_close_r+0x1a>
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	200009ac 	.word	0x200009ac

0800cfc0 <_lseek_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4d07      	ldr	r5, [pc, #28]	@ (800cfe0 <_lseek_r+0x20>)
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	4608      	mov	r0, r1
 800cfc8:	4611      	mov	r1, r2
 800cfca:	2200      	movs	r2, #0
 800cfcc:	602a      	str	r2, [r5, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f7fa f935 	bl	800723e <_lseek>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_lseek_r+0x1e>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_lseek_r+0x1e>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	200009ac 	.word	0x200009ac

0800cfe4 <_read_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d07      	ldr	r5, [pc, #28]	@ (800d004 <_read_r+0x20>)
 800cfe8:	4604      	mov	r4, r0
 800cfea:	4608      	mov	r0, r1
 800cfec:	4611      	mov	r1, r2
 800cfee:	2200      	movs	r2, #0
 800cff0:	602a      	str	r2, [r5, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	f7fa f8c3 	bl	800717e <_read>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_read_r+0x1e>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_read_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	200009ac 	.word	0x200009ac

0800d008 <_write_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d07      	ldr	r5, [pc, #28]	@ (800d028 <_write_r+0x20>)
 800d00c:	4604      	mov	r4, r0
 800d00e:	4608      	mov	r0, r1
 800d010:	4611      	mov	r1, r2
 800d012:	2200      	movs	r2, #0
 800d014:	602a      	str	r2, [r5, #0]
 800d016:	461a      	mov	r2, r3
 800d018:	f7fa f8ce 	bl	80071b8 <_write>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d102      	bne.n	800d026 <_write_r+0x1e>
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	b103      	cbz	r3, 800d026 <_write_r+0x1e>
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	200009ac 	.word	0x200009ac

0800d02c <__errno>:
 800d02c:	4b01      	ldr	r3, [pc, #4]	@ (800d034 <__errno+0x8>)
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	20000058 	.word	0x20000058

0800d038 <__libc_init_array>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	4d0d      	ldr	r5, [pc, #52]	@ (800d070 <__libc_init_array+0x38>)
 800d03c:	4c0d      	ldr	r4, [pc, #52]	@ (800d074 <__libc_init_array+0x3c>)
 800d03e:	1b64      	subs	r4, r4, r5
 800d040:	10a4      	asrs	r4, r4, #2
 800d042:	2600      	movs	r6, #0
 800d044:	42a6      	cmp	r6, r4
 800d046:	d109      	bne.n	800d05c <__libc_init_array+0x24>
 800d048:	4d0b      	ldr	r5, [pc, #44]	@ (800d078 <__libc_init_array+0x40>)
 800d04a:	4c0c      	ldr	r4, [pc, #48]	@ (800d07c <__libc_init_array+0x44>)
 800d04c:	f004 fc14 	bl	8011878 <_init>
 800d050:	1b64      	subs	r4, r4, r5
 800d052:	10a4      	asrs	r4, r4, #2
 800d054:	2600      	movs	r6, #0
 800d056:	42a6      	cmp	r6, r4
 800d058:	d105      	bne.n	800d066 <__libc_init_array+0x2e>
 800d05a:	bd70      	pop	{r4, r5, r6, pc}
 800d05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d060:	4798      	blx	r3
 800d062:	3601      	adds	r6, #1
 800d064:	e7ee      	b.n	800d044 <__libc_init_array+0xc>
 800d066:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06a:	4798      	blx	r3
 800d06c:	3601      	adds	r6, #1
 800d06e:	e7f2      	b.n	800d056 <__libc_init_array+0x1e>
 800d070:	08011eb8 	.word	0x08011eb8
 800d074:	08011eb8 	.word	0x08011eb8
 800d078:	08011eb8 	.word	0x08011eb8
 800d07c:	08011ebc 	.word	0x08011ebc

0800d080 <__retarget_lock_init_recursive>:
 800d080:	4770      	bx	lr

0800d082 <__retarget_lock_acquire_recursive>:
 800d082:	4770      	bx	lr

0800d084 <__retarget_lock_release_recursive>:
 800d084:	4770      	bx	lr

0800d086 <memcpy>:
 800d086:	440a      	add	r2, r1
 800d088:	4291      	cmp	r1, r2
 800d08a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d08e:	d100      	bne.n	800d092 <memcpy+0xc>
 800d090:	4770      	bx	lr
 800d092:	b510      	push	{r4, lr}
 800d094:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d09c:	4291      	cmp	r1, r2
 800d09e:	d1f9      	bne.n	800d094 <memcpy+0xe>
 800d0a0:	bd10      	pop	{r4, pc}

0800d0a2 <quorem>:
 800d0a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a6:	6903      	ldr	r3, [r0, #16]
 800d0a8:	690c      	ldr	r4, [r1, #16]
 800d0aa:	42a3      	cmp	r3, r4
 800d0ac:	4607      	mov	r7, r0
 800d0ae:	db7e      	blt.n	800d1ae <quorem+0x10c>
 800d0b0:	3c01      	subs	r4, #1
 800d0b2:	f101 0814 	add.w	r8, r1, #20
 800d0b6:	00a3      	lsls	r3, r4, #2
 800d0b8:	f100 0514 	add.w	r5, r0, #20
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0d8:	d32e      	bcc.n	800d138 <quorem+0x96>
 800d0da:	f04f 0a00 	mov.w	sl, #0
 800d0de:	46c4      	mov	ip, r8
 800d0e0:	46ae      	mov	lr, r5
 800d0e2:	46d3      	mov	fp, sl
 800d0e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0e8:	b298      	uxth	r0, r3
 800d0ea:	fb06 a000 	mla	r0, r6, r0, sl
 800d0ee:	0c02      	lsrs	r2, r0, #16
 800d0f0:	0c1b      	lsrs	r3, r3, #16
 800d0f2:	fb06 2303 	mla	r3, r6, r3, r2
 800d0f6:	f8de 2000 	ldr.w	r2, [lr]
 800d0fa:	b280      	uxth	r0, r0
 800d0fc:	b292      	uxth	r2, r2
 800d0fe:	1a12      	subs	r2, r2, r0
 800d100:	445a      	add	r2, fp
 800d102:	f8de 0000 	ldr.w	r0, [lr]
 800d106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d110:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d114:	b292      	uxth	r2, r2
 800d116:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d11a:	45e1      	cmp	r9, ip
 800d11c:	f84e 2b04 	str.w	r2, [lr], #4
 800d120:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d124:	d2de      	bcs.n	800d0e4 <quorem+0x42>
 800d126:	9b00      	ldr	r3, [sp, #0]
 800d128:	58eb      	ldr	r3, [r5, r3]
 800d12a:	b92b      	cbnz	r3, 800d138 <quorem+0x96>
 800d12c:	9b01      	ldr	r3, [sp, #4]
 800d12e:	3b04      	subs	r3, #4
 800d130:	429d      	cmp	r5, r3
 800d132:	461a      	mov	r2, r3
 800d134:	d32f      	bcc.n	800d196 <quorem+0xf4>
 800d136:	613c      	str	r4, [r7, #16]
 800d138:	4638      	mov	r0, r7
 800d13a:	f001 f97b 	bl	800e434 <__mcmp>
 800d13e:	2800      	cmp	r0, #0
 800d140:	db25      	blt.n	800d18e <quorem+0xec>
 800d142:	4629      	mov	r1, r5
 800d144:	2000      	movs	r0, #0
 800d146:	f858 2b04 	ldr.w	r2, [r8], #4
 800d14a:	f8d1 c000 	ldr.w	ip, [r1]
 800d14e:	fa1f fe82 	uxth.w	lr, r2
 800d152:	fa1f f38c 	uxth.w	r3, ip
 800d156:	eba3 030e 	sub.w	r3, r3, lr
 800d15a:	4403      	add	r3, r0
 800d15c:	0c12      	lsrs	r2, r2, #16
 800d15e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d162:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d166:	b29b      	uxth	r3, r3
 800d168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d16c:	45c1      	cmp	r9, r8
 800d16e:	f841 3b04 	str.w	r3, [r1], #4
 800d172:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d176:	d2e6      	bcs.n	800d146 <quorem+0xa4>
 800d178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d17c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d180:	b922      	cbnz	r2, 800d18c <quorem+0xea>
 800d182:	3b04      	subs	r3, #4
 800d184:	429d      	cmp	r5, r3
 800d186:	461a      	mov	r2, r3
 800d188:	d30b      	bcc.n	800d1a2 <quorem+0x100>
 800d18a:	613c      	str	r4, [r7, #16]
 800d18c:	3601      	adds	r6, #1
 800d18e:	4630      	mov	r0, r6
 800d190:	b003      	add	sp, #12
 800d192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	3b04      	subs	r3, #4
 800d19a:	2a00      	cmp	r2, #0
 800d19c:	d1cb      	bne.n	800d136 <quorem+0x94>
 800d19e:	3c01      	subs	r4, #1
 800d1a0:	e7c6      	b.n	800d130 <quorem+0x8e>
 800d1a2:	6812      	ldr	r2, [r2, #0]
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	d1ef      	bne.n	800d18a <quorem+0xe8>
 800d1aa:	3c01      	subs	r4, #1
 800d1ac:	e7ea      	b.n	800d184 <quorem+0xe2>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e7ee      	b.n	800d190 <quorem+0xee>
 800d1b2:	0000      	movs	r0, r0
 800d1b4:	0000      	movs	r0, r0
	...

0800d1b8 <_dtoa_r>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	69c7      	ldr	r7, [r0, #28]
 800d1be:	b099      	sub	sp, #100	@ 0x64
 800d1c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1c4:	ec55 4b10 	vmov	r4, r5, d0
 800d1c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d1ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1cc:	4683      	mov	fp, r0
 800d1ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1d2:	b97f      	cbnz	r7, 800d1f4 <_dtoa_r+0x3c>
 800d1d4:	2010      	movs	r0, #16
 800d1d6:	f000 fdfd 	bl	800ddd4 <malloc>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d1e0:	b920      	cbnz	r0, 800d1ec <_dtoa_r+0x34>
 800d1e2:	4ba7      	ldr	r3, [pc, #668]	@ (800d480 <_dtoa_r+0x2c8>)
 800d1e4:	21ef      	movs	r1, #239	@ 0xef
 800d1e6:	48a7      	ldr	r0, [pc, #668]	@ (800d484 <_dtoa_r+0x2cc>)
 800d1e8:	f001 fc5a 	bl	800eaa0 <__assert_func>
 800d1ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1f0:	6007      	str	r7, [r0, #0]
 800d1f2:	60c7      	str	r7, [r0, #12]
 800d1f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1f8:	6819      	ldr	r1, [r3, #0]
 800d1fa:	b159      	cbz	r1, 800d214 <_dtoa_r+0x5c>
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	604a      	str	r2, [r1, #4]
 800d200:	2301      	movs	r3, #1
 800d202:	4093      	lsls	r3, r2
 800d204:	608b      	str	r3, [r1, #8]
 800d206:	4658      	mov	r0, fp
 800d208:	f000 feda 	bl	800dfc0 <_Bfree>
 800d20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d210:	2200      	movs	r2, #0
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	1e2b      	subs	r3, r5, #0
 800d216:	bfb9      	ittee	lt
 800d218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d21c:	9303      	strlt	r3, [sp, #12]
 800d21e:	2300      	movge	r3, #0
 800d220:	6033      	strge	r3, [r6, #0]
 800d222:	9f03      	ldr	r7, [sp, #12]
 800d224:	4b98      	ldr	r3, [pc, #608]	@ (800d488 <_dtoa_r+0x2d0>)
 800d226:	bfbc      	itt	lt
 800d228:	2201      	movlt	r2, #1
 800d22a:	6032      	strlt	r2, [r6, #0]
 800d22c:	43bb      	bics	r3, r7
 800d22e:	d112      	bne.n	800d256 <_dtoa_r+0x9e>
 800d230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d232:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d23c:	4323      	orrs	r3, r4
 800d23e:	f000 854d 	beq.w	800dcdc <_dtoa_r+0xb24>
 800d242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d49c <_dtoa_r+0x2e4>
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 854f 	beq.w	800dcec <_dtoa_r+0xb34>
 800d24e:	f10a 0303 	add.w	r3, sl, #3
 800d252:	f000 bd49 	b.w	800dce8 <_dtoa_r+0xb30>
 800d256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d25a:	2200      	movs	r2, #0
 800d25c:	ec51 0b17 	vmov	r0, r1, d7
 800d260:	2300      	movs	r3, #0
 800d262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d266:	f7f3 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800d26a:	4680      	mov	r8, r0
 800d26c:	b158      	cbz	r0, 800d286 <_dtoa_r+0xce>
 800d26e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d270:	2301      	movs	r3, #1
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d276:	b113      	cbz	r3, 800d27e <_dtoa_r+0xc6>
 800d278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d27a:	4b84      	ldr	r3, [pc, #528]	@ (800d48c <_dtoa_r+0x2d4>)
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d4a0 <_dtoa_r+0x2e8>
 800d282:	f000 bd33 	b.w	800dcec <_dtoa_r+0xb34>
 800d286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d28a:	aa16      	add	r2, sp, #88	@ 0x58
 800d28c:	a917      	add	r1, sp, #92	@ 0x5c
 800d28e:	4658      	mov	r0, fp
 800d290:	f001 f980 	bl	800e594 <__d2b>
 800d294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d298:	4681      	mov	r9, r0
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	d077      	beq.n	800d38e <_dtoa_r+0x1d6>
 800d29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d2a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	4b74      	ldr	r3, [pc, #464]	@ (800d490 <_dtoa_r+0x2d8>)
 800d2be:	f7f3 f803 	bl	80002c8 <__aeabi_dsub>
 800d2c2:	a369      	add	r3, pc, #420	@ (adr r3, 800d468 <_dtoa_r+0x2b0>)
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f7f3 f9b6 	bl	8000638 <__aeabi_dmul>
 800d2cc:	a368      	add	r3, pc, #416	@ (adr r3, 800d470 <_dtoa_r+0x2b8>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	f7f2 fffb 	bl	80002cc <__adddf3>
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4630      	mov	r0, r6
 800d2da:	460d      	mov	r5, r1
 800d2dc:	f7f3 f942 	bl	8000564 <__aeabi_i2d>
 800d2e0:	a365      	add	r3, pc, #404	@ (adr r3, 800d478 <_dtoa_r+0x2c0>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	f7f3 f9a7 	bl	8000638 <__aeabi_dmul>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7f2 ffeb 	bl	80002cc <__adddf3>
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	460d      	mov	r5, r1
 800d2fa:	f7f3 fc4d 	bl	8000b98 <__aeabi_d2iz>
 800d2fe:	2200      	movs	r2, #0
 800d300:	4607      	mov	r7, r0
 800d302:	2300      	movs	r3, #0
 800d304:	4620      	mov	r0, r4
 800d306:	4629      	mov	r1, r5
 800d308:	f7f3 fc08 	bl	8000b1c <__aeabi_dcmplt>
 800d30c:	b140      	cbz	r0, 800d320 <_dtoa_r+0x168>
 800d30e:	4638      	mov	r0, r7
 800d310:	f7f3 f928 	bl	8000564 <__aeabi_i2d>
 800d314:	4622      	mov	r2, r4
 800d316:	462b      	mov	r3, r5
 800d318:	f7f3 fbf6 	bl	8000b08 <__aeabi_dcmpeq>
 800d31c:	b900      	cbnz	r0, 800d320 <_dtoa_r+0x168>
 800d31e:	3f01      	subs	r7, #1
 800d320:	2f16      	cmp	r7, #22
 800d322:	d851      	bhi.n	800d3c8 <_dtoa_r+0x210>
 800d324:	4b5b      	ldr	r3, [pc, #364]	@ (800d494 <_dtoa_r+0x2dc>)
 800d326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d332:	f7f3 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800d336:	2800      	cmp	r0, #0
 800d338:	d048      	beq.n	800d3cc <_dtoa_r+0x214>
 800d33a:	3f01      	subs	r7, #1
 800d33c:	2300      	movs	r3, #0
 800d33e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d342:	1b9b      	subs	r3, r3, r6
 800d344:	1e5a      	subs	r2, r3, #1
 800d346:	bf44      	itt	mi
 800d348:	f1c3 0801 	rsbmi	r8, r3, #1
 800d34c:	2300      	movmi	r3, #0
 800d34e:	9208      	str	r2, [sp, #32]
 800d350:	bf54      	ite	pl
 800d352:	f04f 0800 	movpl.w	r8, #0
 800d356:	9308      	strmi	r3, [sp, #32]
 800d358:	2f00      	cmp	r7, #0
 800d35a:	db39      	blt.n	800d3d0 <_dtoa_r+0x218>
 800d35c:	9b08      	ldr	r3, [sp, #32]
 800d35e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d360:	443b      	add	r3, r7
 800d362:	9308      	str	r3, [sp, #32]
 800d364:	2300      	movs	r3, #0
 800d366:	930a      	str	r3, [sp, #40]	@ 0x28
 800d368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d864      	bhi.n	800d438 <_dtoa_r+0x280>
 800d36e:	2b05      	cmp	r3, #5
 800d370:	bfc4      	itt	gt
 800d372:	3b04      	subgt	r3, #4
 800d374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d378:	f1a3 0302 	sub.w	r3, r3, #2
 800d37c:	bfcc      	ite	gt
 800d37e:	2400      	movgt	r4, #0
 800d380:	2401      	movle	r4, #1
 800d382:	2b03      	cmp	r3, #3
 800d384:	d863      	bhi.n	800d44e <_dtoa_r+0x296>
 800d386:	e8df f003 	tbb	[pc, r3]
 800d38a:	372a      	.short	0x372a
 800d38c:	5535      	.short	0x5535
 800d38e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d392:	441e      	add	r6, r3
 800d394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d398:	2b20      	cmp	r3, #32
 800d39a:	bfc1      	itttt	gt
 800d39c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d3a0:	409f      	lslgt	r7, r3
 800d3a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d3a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d3aa:	bfd6      	itet	le
 800d3ac:	f1c3 0320 	rsble	r3, r3, #32
 800d3b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3b4:	fa04 f003 	lslle.w	r0, r4, r3
 800d3b8:	f7f3 f8c4 	bl	8000544 <__aeabi_ui2d>
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3c2:	3e01      	subs	r6, #1
 800d3c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d3c6:	e777      	b.n	800d2b8 <_dtoa_r+0x100>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e7b8      	b.n	800d33e <_dtoa_r+0x186>
 800d3cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3ce:	e7b7      	b.n	800d340 <_dtoa_r+0x188>
 800d3d0:	427b      	negs	r3, r7
 800d3d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	eba8 0807 	sub.w	r8, r8, r7
 800d3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3dc:	e7c4      	b.n	800d368 <_dtoa_r+0x1b0>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	dc35      	bgt.n	800d454 <_dtoa_r+0x29c>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	9307      	str	r3, [sp, #28]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3f2:	e00b      	b.n	800d40c <_dtoa_r+0x254>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e7f3      	b.n	800d3e0 <_dtoa_r+0x228>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3fe:	18fb      	adds	r3, r7, r3
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	3301      	adds	r3, #1
 800d404:	2b01      	cmp	r3, #1
 800d406:	9307      	str	r3, [sp, #28]
 800d408:	bfb8      	it	lt
 800d40a:	2301      	movlt	r3, #1
 800d40c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d410:	2100      	movs	r1, #0
 800d412:	2204      	movs	r2, #4
 800d414:	f102 0514 	add.w	r5, r2, #20
 800d418:	429d      	cmp	r5, r3
 800d41a:	d91f      	bls.n	800d45c <_dtoa_r+0x2a4>
 800d41c:	6041      	str	r1, [r0, #4]
 800d41e:	4658      	mov	r0, fp
 800d420:	f000 fd8e 	bl	800df40 <_Balloc>
 800d424:	4682      	mov	sl, r0
 800d426:	2800      	cmp	r0, #0
 800d428:	d13c      	bne.n	800d4a4 <_dtoa_r+0x2ec>
 800d42a:	4b1b      	ldr	r3, [pc, #108]	@ (800d498 <_dtoa_r+0x2e0>)
 800d42c:	4602      	mov	r2, r0
 800d42e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d432:	e6d8      	b.n	800d1e6 <_dtoa_r+0x2e>
 800d434:	2301      	movs	r3, #1
 800d436:	e7e0      	b.n	800d3fa <_dtoa_r+0x242>
 800d438:	2401      	movs	r4, #1
 800d43a:	2300      	movs	r3, #0
 800d43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d43e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d440:	f04f 33ff 	mov.w	r3, #4294967295
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	9307      	str	r3, [sp, #28]
 800d448:	2200      	movs	r2, #0
 800d44a:	2312      	movs	r3, #18
 800d44c:	e7d0      	b.n	800d3f0 <_dtoa_r+0x238>
 800d44e:	2301      	movs	r3, #1
 800d450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d452:	e7f5      	b.n	800d440 <_dtoa_r+0x288>
 800d454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	9307      	str	r3, [sp, #28]
 800d45a:	e7d7      	b.n	800d40c <_dtoa_r+0x254>
 800d45c:	3101      	adds	r1, #1
 800d45e:	0052      	lsls	r2, r2, #1
 800d460:	e7d8      	b.n	800d414 <_dtoa_r+0x25c>
 800d462:	bf00      	nop
 800d464:	f3af 8000 	nop.w
 800d468:	636f4361 	.word	0x636f4361
 800d46c:	3fd287a7 	.word	0x3fd287a7
 800d470:	8b60c8b3 	.word	0x8b60c8b3
 800d474:	3fc68a28 	.word	0x3fc68a28
 800d478:	509f79fb 	.word	0x509f79fb
 800d47c:	3fd34413 	.word	0x3fd34413
 800d480:	08011941 	.word	0x08011941
 800d484:	08011958 	.word	0x08011958
 800d488:	7ff00000 	.word	0x7ff00000
 800d48c:	08011911 	.word	0x08011911
 800d490:	3ff80000 	.word	0x3ff80000
 800d494:	08011a50 	.word	0x08011a50
 800d498:	080119b0 	.word	0x080119b0
 800d49c:	0801193d 	.word	0x0801193d
 800d4a0:	08011910 	.word	0x08011910
 800d4a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4a8:	6018      	str	r0, [r3, #0]
 800d4aa:	9b07      	ldr	r3, [sp, #28]
 800d4ac:	2b0e      	cmp	r3, #14
 800d4ae:	f200 80a4 	bhi.w	800d5fa <_dtoa_r+0x442>
 800d4b2:	2c00      	cmp	r4, #0
 800d4b4:	f000 80a1 	beq.w	800d5fa <_dtoa_r+0x442>
 800d4b8:	2f00      	cmp	r7, #0
 800d4ba:	dd33      	ble.n	800d524 <_dtoa_r+0x36c>
 800d4bc:	4bad      	ldr	r3, [pc, #692]	@ (800d774 <_dtoa_r+0x5bc>)
 800d4be:	f007 020f 	and.w	r2, r7, #15
 800d4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4c6:	ed93 7b00 	vldr	d7, [r3]
 800d4ca:	05f8      	lsls	r0, r7, #23
 800d4cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d4d4:	d516      	bpl.n	800d504 <_dtoa_r+0x34c>
 800d4d6:	4ba8      	ldr	r3, [pc, #672]	@ (800d778 <_dtoa_r+0x5c0>)
 800d4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4e0:	f7f3 f9d4 	bl	800088c <__aeabi_ddiv>
 800d4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e8:	f004 040f 	and.w	r4, r4, #15
 800d4ec:	2603      	movs	r6, #3
 800d4ee:	4da2      	ldr	r5, [pc, #648]	@ (800d778 <_dtoa_r+0x5c0>)
 800d4f0:	b954      	cbnz	r4, 800d508 <_dtoa_r+0x350>
 800d4f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4fa:	f7f3 f9c7 	bl	800088c <__aeabi_ddiv>
 800d4fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d502:	e028      	b.n	800d556 <_dtoa_r+0x39e>
 800d504:	2602      	movs	r6, #2
 800d506:	e7f2      	b.n	800d4ee <_dtoa_r+0x336>
 800d508:	07e1      	lsls	r1, r4, #31
 800d50a:	d508      	bpl.n	800d51e <_dtoa_r+0x366>
 800d50c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d510:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d514:	f7f3 f890 	bl	8000638 <__aeabi_dmul>
 800d518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d51c:	3601      	adds	r6, #1
 800d51e:	1064      	asrs	r4, r4, #1
 800d520:	3508      	adds	r5, #8
 800d522:	e7e5      	b.n	800d4f0 <_dtoa_r+0x338>
 800d524:	f000 80d2 	beq.w	800d6cc <_dtoa_r+0x514>
 800d528:	427c      	negs	r4, r7
 800d52a:	4b92      	ldr	r3, [pc, #584]	@ (800d774 <_dtoa_r+0x5bc>)
 800d52c:	4d92      	ldr	r5, [pc, #584]	@ (800d778 <_dtoa_r+0x5c0>)
 800d52e:	f004 020f 	and.w	r2, r4, #15
 800d532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d53e:	f7f3 f87b 	bl	8000638 <__aeabi_dmul>
 800d542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d546:	1124      	asrs	r4, r4, #4
 800d548:	2300      	movs	r3, #0
 800d54a:	2602      	movs	r6, #2
 800d54c:	2c00      	cmp	r4, #0
 800d54e:	f040 80b2 	bne.w	800d6b6 <_dtoa_r+0x4fe>
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1d3      	bne.n	800d4fe <_dtoa_r+0x346>
 800d556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 80b7 	beq.w	800d6d0 <_dtoa_r+0x518>
 800d562:	4b86      	ldr	r3, [pc, #536]	@ (800d77c <_dtoa_r+0x5c4>)
 800d564:	2200      	movs	r2, #0
 800d566:	4620      	mov	r0, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	f7f3 fad7 	bl	8000b1c <__aeabi_dcmplt>
 800d56e:	2800      	cmp	r0, #0
 800d570:	f000 80ae 	beq.w	800d6d0 <_dtoa_r+0x518>
 800d574:	9b07      	ldr	r3, [sp, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 80aa 	beq.w	800d6d0 <_dtoa_r+0x518>
 800d57c:	9b00      	ldr	r3, [sp, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	dd37      	ble.n	800d5f2 <_dtoa_r+0x43a>
 800d582:	1e7b      	subs	r3, r7, #1
 800d584:	9304      	str	r3, [sp, #16]
 800d586:	4620      	mov	r0, r4
 800d588:	4b7d      	ldr	r3, [pc, #500]	@ (800d780 <_dtoa_r+0x5c8>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	4629      	mov	r1, r5
 800d58e:	f7f3 f853 	bl	8000638 <__aeabi_dmul>
 800d592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d596:	9c00      	ldr	r4, [sp, #0]
 800d598:	3601      	adds	r6, #1
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7f2 ffe2 	bl	8000564 <__aeabi_i2d>
 800d5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5a4:	f7f3 f848 	bl	8000638 <__aeabi_dmul>
 800d5a8:	4b76      	ldr	r3, [pc, #472]	@ (800d784 <_dtoa_r+0x5cc>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f7f2 fe8e 	bl	80002cc <__adddf3>
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5b6:	2c00      	cmp	r4, #0
 800d5b8:	f040 808d 	bne.w	800d6d6 <_dtoa_r+0x51e>
 800d5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c0:	4b71      	ldr	r3, [pc, #452]	@ (800d788 <_dtoa_r+0x5d0>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f7f2 fe80 	bl	80002c8 <__aeabi_dsub>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5d0:	462a      	mov	r2, r5
 800d5d2:	4633      	mov	r3, r6
 800d5d4:	f7f3 fac0 	bl	8000b58 <__aeabi_dcmpgt>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f040 828b 	bne.w	800daf4 <_dtoa_r+0x93c>
 800d5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5e2:	462a      	mov	r2, r5
 800d5e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5e8:	f7f3 fa98 	bl	8000b1c <__aeabi_dcmplt>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	f040 8128 	bne.w	800d842 <_dtoa_r+0x68a>
 800d5f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d5f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d5fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f2c0 815a 	blt.w	800d8b6 <_dtoa_r+0x6fe>
 800d602:	2f0e      	cmp	r7, #14
 800d604:	f300 8157 	bgt.w	800d8b6 <_dtoa_r+0x6fe>
 800d608:	4b5a      	ldr	r3, [pc, #360]	@ (800d774 <_dtoa_r+0x5bc>)
 800d60a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d60e:	ed93 7b00 	vldr	d7, [r3]
 800d612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d614:	2b00      	cmp	r3, #0
 800d616:	ed8d 7b00 	vstr	d7, [sp]
 800d61a:	da03      	bge.n	800d624 <_dtoa_r+0x46c>
 800d61c:	9b07      	ldr	r3, [sp, #28]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f340 8101 	ble.w	800d826 <_dtoa_r+0x66e>
 800d624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d628:	4656      	mov	r6, sl
 800d62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d62e:	4620      	mov	r0, r4
 800d630:	4629      	mov	r1, r5
 800d632:	f7f3 f92b 	bl	800088c <__aeabi_ddiv>
 800d636:	f7f3 faaf 	bl	8000b98 <__aeabi_d2iz>
 800d63a:	4680      	mov	r8, r0
 800d63c:	f7f2 ff92 	bl	8000564 <__aeabi_i2d>
 800d640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d644:	f7f2 fff8 	bl	8000638 <__aeabi_dmul>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	4620      	mov	r0, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d654:	f7f2 fe38 	bl	80002c8 <__aeabi_dsub>
 800d658:	f806 4b01 	strb.w	r4, [r6], #1
 800d65c:	9d07      	ldr	r5, [sp, #28]
 800d65e:	eba6 040a 	sub.w	r4, r6, sl
 800d662:	42a5      	cmp	r5, r4
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	f040 8117 	bne.w	800d89a <_dtoa_r+0x6e2>
 800d66c:	f7f2 fe2e 	bl	80002cc <__adddf3>
 800d670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d674:	4604      	mov	r4, r0
 800d676:	460d      	mov	r5, r1
 800d678:	f7f3 fa6e 	bl	8000b58 <__aeabi_dcmpgt>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f040 80f9 	bne.w	800d874 <_dtoa_r+0x6bc>
 800d682:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d686:	4620      	mov	r0, r4
 800d688:	4629      	mov	r1, r5
 800d68a:	f7f3 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800d68e:	b118      	cbz	r0, 800d698 <_dtoa_r+0x4e0>
 800d690:	f018 0f01 	tst.w	r8, #1
 800d694:	f040 80ee 	bne.w	800d874 <_dtoa_r+0x6bc>
 800d698:	4649      	mov	r1, r9
 800d69a:	4658      	mov	r0, fp
 800d69c:	f000 fc90 	bl	800dfc0 <_Bfree>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	7033      	strb	r3, [r6, #0]
 800d6a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d6a6:	3701      	adds	r7, #1
 800d6a8:	601f      	str	r7, [r3, #0]
 800d6aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 831d 	beq.w	800dcec <_dtoa_r+0xb34>
 800d6b2:	601e      	str	r6, [r3, #0]
 800d6b4:	e31a      	b.n	800dcec <_dtoa_r+0xb34>
 800d6b6:	07e2      	lsls	r2, r4, #31
 800d6b8:	d505      	bpl.n	800d6c6 <_dtoa_r+0x50e>
 800d6ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6be:	f7f2 ffbb 	bl	8000638 <__aeabi_dmul>
 800d6c2:	3601      	adds	r6, #1
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	1064      	asrs	r4, r4, #1
 800d6c8:	3508      	adds	r5, #8
 800d6ca:	e73f      	b.n	800d54c <_dtoa_r+0x394>
 800d6cc:	2602      	movs	r6, #2
 800d6ce:	e742      	b.n	800d556 <_dtoa_r+0x39e>
 800d6d0:	9c07      	ldr	r4, [sp, #28]
 800d6d2:	9704      	str	r7, [sp, #16]
 800d6d4:	e761      	b.n	800d59a <_dtoa_r+0x3e2>
 800d6d6:	4b27      	ldr	r3, [pc, #156]	@ (800d774 <_dtoa_r+0x5bc>)
 800d6d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6e2:	4454      	add	r4, sl
 800d6e4:	2900      	cmp	r1, #0
 800d6e6:	d053      	beq.n	800d790 <_dtoa_r+0x5d8>
 800d6e8:	4928      	ldr	r1, [pc, #160]	@ (800d78c <_dtoa_r+0x5d4>)
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	f7f3 f8ce 	bl	800088c <__aeabi_ddiv>
 800d6f0:	4633      	mov	r3, r6
 800d6f2:	462a      	mov	r2, r5
 800d6f4:	f7f2 fde8 	bl	80002c8 <__aeabi_dsub>
 800d6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6fc:	4656      	mov	r6, sl
 800d6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d702:	f7f3 fa49 	bl	8000b98 <__aeabi_d2iz>
 800d706:	4605      	mov	r5, r0
 800d708:	f7f2 ff2c 	bl	8000564 <__aeabi_i2d>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d714:	f7f2 fdd8 	bl	80002c8 <__aeabi_dsub>
 800d718:	3530      	adds	r5, #48	@ 0x30
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d722:	f806 5b01 	strb.w	r5, [r6], #1
 800d726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d72a:	f7f3 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800d72e:	2800      	cmp	r0, #0
 800d730:	d171      	bne.n	800d816 <_dtoa_r+0x65e>
 800d732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d736:	4911      	ldr	r1, [pc, #68]	@ (800d77c <_dtoa_r+0x5c4>)
 800d738:	2000      	movs	r0, #0
 800d73a:	f7f2 fdc5 	bl	80002c8 <__aeabi_dsub>
 800d73e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d742:	f7f3 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 800d746:	2800      	cmp	r0, #0
 800d748:	f040 8095 	bne.w	800d876 <_dtoa_r+0x6be>
 800d74c:	42a6      	cmp	r6, r4
 800d74e:	f43f af50 	beq.w	800d5f2 <_dtoa_r+0x43a>
 800d752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d756:	4b0a      	ldr	r3, [pc, #40]	@ (800d780 <_dtoa_r+0x5c8>)
 800d758:	2200      	movs	r2, #0
 800d75a:	f7f2 ff6d 	bl	8000638 <__aeabi_dmul>
 800d75e:	4b08      	ldr	r3, [pc, #32]	@ (800d780 <_dtoa_r+0x5c8>)
 800d760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d764:	2200      	movs	r2, #0
 800d766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d76a:	f7f2 ff65 	bl	8000638 <__aeabi_dmul>
 800d76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d772:	e7c4      	b.n	800d6fe <_dtoa_r+0x546>
 800d774:	08011a50 	.word	0x08011a50
 800d778:	08011a28 	.word	0x08011a28
 800d77c:	3ff00000 	.word	0x3ff00000
 800d780:	40240000 	.word	0x40240000
 800d784:	401c0000 	.word	0x401c0000
 800d788:	40140000 	.word	0x40140000
 800d78c:	3fe00000 	.word	0x3fe00000
 800d790:	4631      	mov	r1, r6
 800d792:	4628      	mov	r0, r5
 800d794:	f7f2 ff50 	bl	8000638 <__aeabi_dmul>
 800d798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d79c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d79e:	4656      	mov	r6, sl
 800d7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a4:	f7f3 f9f8 	bl	8000b98 <__aeabi_d2iz>
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	f7f2 fedb 	bl	8000564 <__aeabi_i2d>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b6:	f7f2 fd87 	bl	80002c8 <__aeabi_dsub>
 800d7ba:	3530      	adds	r5, #48	@ 0x30
 800d7bc:	f806 5b01 	strb.w	r5, [r6], #1
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	42a6      	cmp	r6, r4
 800d7c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7ca:	f04f 0200 	mov.w	r2, #0
 800d7ce:	d124      	bne.n	800d81a <_dtoa_r+0x662>
 800d7d0:	4bac      	ldr	r3, [pc, #688]	@ (800da84 <_dtoa_r+0x8cc>)
 800d7d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7d6:	f7f2 fd79 	bl	80002cc <__adddf3>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	460b      	mov	r3, r1
 800d7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e2:	f7f3 f9b9 	bl	8000b58 <__aeabi_dcmpgt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d145      	bne.n	800d876 <_dtoa_r+0x6be>
 800d7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7ee:	49a5      	ldr	r1, [pc, #660]	@ (800da84 <_dtoa_r+0x8cc>)
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	f7f2 fd69 	bl	80002c8 <__aeabi_dsub>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7fe:	f7f3 f98d 	bl	8000b1c <__aeabi_dcmplt>
 800d802:	2800      	cmp	r0, #0
 800d804:	f43f aef5 	beq.w	800d5f2 <_dtoa_r+0x43a>
 800d808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d80a:	1e73      	subs	r3, r6, #1
 800d80c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d80e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d812:	2b30      	cmp	r3, #48	@ 0x30
 800d814:	d0f8      	beq.n	800d808 <_dtoa_r+0x650>
 800d816:	9f04      	ldr	r7, [sp, #16]
 800d818:	e73e      	b.n	800d698 <_dtoa_r+0x4e0>
 800d81a:	4b9b      	ldr	r3, [pc, #620]	@ (800da88 <_dtoa_r+0x8d0>)
 800d81c:	f7f2 ff0c 	bl	8000638 <__aeabi_dmul>
 800d820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d824:	e7bc      	b.n	800d7a0 <_dtoa_r+0x5e8>
 800d826:	d10c      	bne.n	800d842 <_dtoa_r+0x68a>
 800d828:	4b98      	ldr	r3, [pc, #608]	@ (800da8c <_dtoa_r+0x8d4>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d830:	f7f2 ff02 	bl	8000638 <__aeabi_dmul>
 800d834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d838:	f7f3 f984 	bl	8000b44 <__aeabi_dcmpge>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	f000 8157 	beq.w	800daf0 <_dtoa_r+0x938>
 800d842:	2400      	movs	r4, #0
 800d844:	4625      	mov	r5, r4
 800d846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d848:	43db      	mvns	r3, r3
 800d84a:	9304      	str	r3, [sp, #16]
 800d84c:	4656      	mov	r6, sl
 800d84e:	2700      	movs	r7, #0
 800d850:	4621      	mov	r1, r4
 800d852:	4658      	mov	r0, fp
 800d854:	f000 fbb4 	bl	800dfc0 <_Bfree>
 800d858:	2d00      	cmp	r5, #0
 800d85a:	d0dc      	beq.n	800d816 <_dtoa_r+0x65e>
 800d85c:	b12f      	cbz	r7, 800d86a <_dtoa_r+0x6b2>
 800d85e:	42af      	cmp	r7, r5
 800d860:	d003      	beq.n	800d86a <_dtoa_r+0x6b2>
 800d862:	4639      	mov	r1, r7
 800d864:	4658      	mov	r0, fp
 800d866:	f000 fbab 	bl	800dfc0 <_Bfree>
 800d86a:	4629      	mov	r1, r5
 800d86c:	4658      	mov	r0, fp
 800d86e:	f000 fba7 	bl	800dfc0 <_Bfree>
 800d872:	e7d0      	b.n	800d816 <_dtoa_r+0x65e>
 800d874:	9704      	str	r7, [sp, #16]
 800d876:	4633      	mov	r3, r6
 800d878:	461e      	mov	r6, r3
 800d87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d87e:	2a39      	cmp	r2, #57	@ 0x39
 800d880:	d107      	bne.n	800d892 <_dtoa_r+0x6da>
 800d882:	459a      	cmp	sl, r3
 800d884:	d1f8      	bne.n	800d878 <_dtoa_r+0x6c0>
 800d886:	9a04      	ldr	r2, [sp, #16]
 800d888:	3201      	adds	r2, #1
 800d88a:	9204      	str	r2, [sp, #16]
 800d88c:	2230      	movs	r2, #48	@ 0x30
 800d88e:	f88a 2000 	strb.w	r2, [sl]
 800d892:	781a      	ldrb	r2, [r3, #0]
 800d894:	3201      	adds	r2, #1
 800d896:	701a      	strb	r2, [r3, #0]
 800d898:	e7bd      	b.n	800d816 <_dtoa_r+0x65e>
 800d89a:	4b7b      	ldr	r3, [pc, #492]	@ (800da88 <_dtoa_r+0x8d0>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	f7f2 fecb 	bl	8000638 <__aeabi_dmul>
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	460d      	mov	r5, r1
 800d8aa:	f7f3 f92d 	bl	8000b08 <__aeabi_dcmpeq>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f43f aebb 	beq.w	800d62a <_dtoa_r+0x472>
 800d8b4:	e6f0      	b.n	800d698 <_dtoa_r+0x4e0>
 800d8b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8b8:	2a00      	cmp	r2, #0
 800d8ba:	f000 80db 	beq.w	800da74 <_dtoa_r+0x8bc>
 800d8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8c0:	2a01      	cmp	r2, #1
 800d8c2:	f300 80bf 	bgt.w	800da44 <_dtoa_r+0x88c>
 800d8c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8c8:	2a00      	cmp	r2, #0
 800d8ca:	f000 80b7 	beq.w	800da3c <_dtoa_r+0x884>
 800d8ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8d4:	4646      	mov	r6, r8
 800d8d6:	9a08      	ldr	r2, [sp, #32]
 800d8d8:	2101      	movs	r1, #1
 800d8da:	441a      	add	r2, r3
 800d8dc:	4658      	mov	r0, fp
 800d8de:	4498      	add	r8, r3
 800d8e0:	9208      	str	r2, [sp, #32]
 800d8e2:	f000 fc21 	bl	800e128 <__i2b>
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	b15e      	cbz	r6, 800d902 <_dtoa_r+0x74a>
 800d8ea:	9b08      	ldr	r3, [sp, #32]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dd08      	ble.n	800d902 <_dtoa_r+0x74a>
 800d8f0:	42b3      	cmp	r3, r6
 800d8f2:	9a08      	ldr	r2, [sp, #32]
 800d8f4:	bfa8      	it	ge
 800d8f6:	4633      	movge	r3, r6
 800d8f8:	eba8 0803 	sub.w	r8, r8, r3
 800d8fc:	1af6      	subs	r6, r6, r3
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	9308      	str	r3, [sp, #32]
 800d902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d904:	b1f3      	cbz	r3, 800d944 <_dtoa_r+0x78c>
 800d906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 80b7 	beq.w	800da7c <_dtoa_r+0x8c4>
 800d90e:	b18c      	cbz	r4, 800d934 <_dtoa_r+0x77c>
 800d910:	4629      	mov	r1, r5
 800d912:	4622      	mov	r2, r4
 800d914:	4658      	mov	r0, fp
 800d916:	f000 fcc7 	bl	800e2a8 <__pow5mult>
 800d91a:	464a      	mov	r2, r9
 800d91c:	4601      	mov	r1, r0
 800d91e:	4605      	mov	r5, r0
 800d920:	4658      	mov	r0, fp
 800d922:	f000 fc17 	bl	800e154 <__multiply>
 800d926:	4649      	mov	r1, r9
 800d928:	9004      	str	r0, [sp, #16]
 800d92a:	4658      	mov	r0, fp
 800d92c:	f000 fb48 	bl	800dfc0 <_Bfree>
 800d930:	9b04      	ldr	r3, [sp, #16]
 800d932:	4699      	mov	r9, r3
 800d934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d936:	1b1a      	subs	r2, r3, r4
 800d938:	d004      	beq.n	800d944 <_dtoa_r+0x78c>
 800d93a:	4649      	mov	r1, r9
 800d93c:	4658      	mov	r0, fp
 800d93e:	f000 fcb3 	bl	800e2a8 <__pow5mult>
 800d942:	4681      	mov	r9, r0
 800d944:	2101      	movs	r1, #1
 800d946:	4658      	mov	r0, fp
 800d948:	f000 fbee 	bl	800e128 <__i2b>
 800d94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d94e:	4604      	mov	r4, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	f000 81cf 	beq.w	800dcf4 <_dtoa_r+0xb3c>
 800d956:	461a      	mov	r2, r3
 800d958:	4601      	mov	r1, r0
 800d95a:	4658      	mov	r0, fp
 800d95c:	f000 fca4 	bl	800e2a8 <__pow5mult>
 800d960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d962:	2b01      	cmp	r3, #1
 800d964:	4604      	mov	r4, r0
 800d966:	f300 8095 	bgt.w	800da94 <_dtoa_r+0x8dc>
 800d96a:	9b02      	ldr	r3, [sp, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 8087 	bne.w	800da80 <_dtoa_r+0x8c8>
 800d972:	9b03      	ldr	r3, [sp, #12]
 800d974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f040 8089 	bne.w	800da90 <_dtoa_r+0x8d8>
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d984:	0d1b      	lsrs	r3, r3, #20
 800d986:	051b      	lsls	r3, r3, #20
 800d988:	b12b      	cbz	r3, 800d996 <_dtoa_r+0x7de>
 800d98a:	9b08      	ldr	r3, [sp, #32]
 800d98c:	3301      	adds	r3, #1
 800d98e:	9308      	str	r3, [sp, #32]
 800d990:	f108 0801 	add.w	r8, r8, #1
 800d994:	2301      	movs	r3, #1
 800d996:	930a      	str	r3, [sp, #40]	@ 0x28
 800d998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 81b0 	beq.w	800dd00 <_dtoa_r+0xb48>
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9a6:	6918      	ldr	r0, [r3, #16]
 800d9a8:	f000 fb72 	bl	800e090 <__hi0bits>
 800d9ac:	f1c0 0020 	rsb	r0, r0, #32
 800d9b0:	9b08      	ldr	r3, [sp, #32]
 800d9b2:	4418      	add	r0, r3
 800d9b4:	f010 001f 	ands.w	r0, r0, #31
 800d9b8:	d077      	beq.n	800daaa <_dtoa_r+0x8f2>
 800d9ba:	f1c0 0320 	rsb	r3, r0, #32
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	dd6b      	ble.n	800da9a <_dtoa_r+0x8e2>
 800d9c2:	9b08      	ldr	r3, [sp, #32]
 800d9c4:	f1c0 001c 	rsb	r0, r0, #28
 800d9c8:	4403      	add	r3, r0
 800d9ca:	4480      	add	r8, r0
 800d9cc:	4406      	add	r6, r0
 800d9ce:	9308      	str	r3, [sp, #32]
 800d9d0:	f1b8 0f00 	cmp.w	r8, #0
 800d9d4:	dd05      	ble.n	800d9e2 <_dtoa_r+0x82a>
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	4642      	mov	r2, r8
 800d9da:	4658      	mov	r0, fp
 800d9dc:	f000 fcbe 	bl	800e35c <__lshift>
 800d9e0:	4681      	mov	r9, r0
 800d9e2:	9b08      	ldr	r3, [sp, #32]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dd05      	ble.n	800d9f4 <_dtoa_r+0x83c>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	4658      	mov	r0, fp
 800d9ee:	f000 fcb5 	bl	800e35c <__lshift>
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d059      	beq.n	800daae <_dtoa_r+0x8f6>
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f000 fd19 	bl	800e434 <__mcmp>
 800da02:	2800      	cmp	r0, #0
 800da04:	da53      	bge.n	800daae <_dtoa_r+0x8f6>
 800da06:	1e7b      	subs	r3, r7, #1
 800da08:	9304      	str	r3, [sp, #16]
 800da0a:	4649      	mov	r1, r9
 800da0c:	2300      	movs	r3, #0
 800da0e:	220a      	movs	r2, #10
 800da10:	4658      	mov	r0, fp
 800da12:	f000 faf7 	bl	800e004 <__multadd>
 800da16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da18:	4681      	mov	r9, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f000 8172 	beq.w	800dd04 <_dtoa_r+0xb4c>
 800da20:	2300      	movs	r3, #0
 800da22:	4629      	mov	r1, r5
 800da24:	220a      	movs	r2, #10
 800da26:	4658      	mov	r0, fp
 800da28:	f000 faec 	bl	800e004 <__multadd>
 800da2c:	9b00      	ldr	r3, [sp, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	4605      	mov	r5, r0
 800da32:	dc67      	bgt.n	800db04 <_dtoa_r+0x94c>
 800da34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da36:	2b02      	cmp	r3, #2
 800da38:	dc41      	bgt.n	800dabe <_dtoa_r+0x906>
 800da3a:	e063      	b.n	800db04 <_dtoa_r+0x94c>
 800da3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da42:	e746      	b.n	800d8d2 <_dtoa_r+0x71a>
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	1e5c      	subs	r4, r3, #1
 800da48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da4a:	42a3      	cmp	r3, r4
 800da4c:	bfbf      	itttt	lt
 800da4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da54:	1ae3      	sublt	r3, r4, r3
 800da56:	bfb4      	ite	lt
 800da58:	18d2      	addlt	r2, r2, r3
 800da5a:	1b1c      	subge	r4, r3, r4
 800da5c:	9b07      	ldr	r3, [sp, #28]
 800da5e:	bfbc      	itt	lt
 800da60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da62:	2400      	movlt	r4, #0
 800da64:	2b00      	cmp	r3, #0
 800da66:	bfb5      	itete	lt
 800da68:	eba8 0603 	sublt.w	r6, r8, r3
 800da6c:	9b07      	ldrge	r3, [sp, #28]
 800da6e:	2300      	movlt	r3, #0
 800da70:	4646      	movge	r6, r8
 800da72:	e730      	b.n	800d8d6 <_dtoa_r+0x71e>
 800da74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da78:	4646      	mov	r6, r8
 800da7a:	e735      	b.n	800d8e8 <_dtoa_r+0x730>
 800da7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da7e:	e75c      	b.n	800d93a <_dtoa_r+0x782>
 800da80:	2300      	movs	r3, #0
 800da82:	e788      	b.n	800d996 <_dtoa_r+0x7de>
 800da84:	3fe00000 	.word	0x3fe00000
 800da88:	40240000 	.word	0x40240000
 800da8c:	40140000 	.word	0x40140000
 800da90:	9b02      	ldr	r3, [sp, #8]
 800da92:	e780      	b.n	800d996 <_dtoa_r+0x7de>
 800da94:	2300      	movs	r3, #0
 800da96:	930a      	str	r3, [sp, #40]	@ 0x28
 800da98:	e782      	b.n	800d9a0 <_dtoa_r+0x7e8>
 800da9a:	d099      	beq.n	800d9d0 <_dtoa_r+0x818>
 800da9c:	9a08      	ldr	r2, [sp, #32]
 800da9e:	331c      	adds	r3, #28
 800daa0:	441a      	add	r2, r3
 800daa2:	4498      	add	r8, r3
 800daa4:	441e      	add	r6, r3
 800daa6:	9208      	str	r2, [sp, #32]
 800daa8:	e792      	b.n	800d9d0 <_dtoa_r+0x818>
 800daaa:	4603      	mov	r3, r0
 800daac:	e7f6      	b.n	800da9c <_dtoa_r+0x8e4>
 800daae:	9b07      	ldr	r3, [sp, #28]
 800dab0:	9704      	str	r7, [sp, #16]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dc20      	bgt.n	800daf8 <_dtoa_r+0x940>
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daba:	2b02      	cmp	r3, #2
 800dabc:	dd1e      	ble.n	800dafc <_dtoa_r+0x944>
 800dabe:	9b00      	ldr	r3, [sp, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f47f aec0 	bne.w	800d846 <_dtoa_r+0x68e>
 800dac6:	4621      	mov	r1, r4
 800dac8:	2205      	movs	r2, #5
 800daca:	4658      	mov	r0, fp
 800dacc:	f000 fa9a 	bl	800e004 <__multadd>
 800dad0:	4601      	mov	r1, r0
 800dad2:	4604      	mov	r4, r0
 800dad4:	4648      	mov	r0, r9
 800dad6:	f000 fcad 	bl	800e434 <__mcmp>
 800dada:	2800      	cmp	r0, #0
 800dadc:	f77f aeb3 	ble.w	800d846 <_dtoa_r+0x68e>
 800dae0:	4656      	mov	r6, sl
 800dae2:	2331      	movs	r3, #49	@ 0x31
 800dae4:	f806 3b01 	strb.w	r3, [r6], #1
 800dae8:	9b04      	ldr	r3, [sp, #16]
 800daea:	3301      	adds	r3, #1
 800daec:	9304      	str	r3, [sp, #16]
 800daee:	e6ae      	b.n	800d84e <_dtoa_r+0x696>
 800daf0:	9c07      	ldr	r4, [sp, #28]
 800daf2:	9704      	str	r7, [sp, #16]
 800daf4:	4625      	mov	r5, r4
 800daf6:	e7f3      	b.n	800dae0 <_dtoa_r+0x928>
 800daf8:	9b07      	ldr	r3, [sp, #28]
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 8104 	beq.w	800dd0c <_dtoa_r+0xb54>
 800db04:	2e00      	cmp	r6, #0
 800db06:	dd05      	ble.n	800db14 <_dtoa_r+0x95c>
 800db08:	4629      	mov	r1, r5
 800db0a:	4632      	mov	r2, r6
 800db0c:	4658      	mov	r0, fp
 800db0e:	f000 fc25 	bl	800e35c <__lshift>
 800db12:	4605      	mov	r5, r0
 800db14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db16:	2b00      	cmp	r3, #0
 800db18:	d05a      	beq.n	800dbd0 <_dtoa_r+0xa18>
 800db1a:	6869      	ldr	r1, [r5, #4]
 800db1c:	4658      	mov	r0, fp
 800db1e:	f000 fa0f 	bl	800df40 <_Balloc>
 800db22:	4606      	mov	r6, r0
 800db24:	b928      	cbnz	r0, 800db32 <_dtoa_r+0x97a>
 800db26:	4b84      	ldr	r3, [pc, #528]	@ (800dd38 <_dtoa_r+0xb80>)
 800db28:	4602      	mov	r2, r0
 800db2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db2e:	f7ff bb5a 	b.w	800d1e6 <_dtoa_r+0x2e>
 800db32:	692a      	ldr	r2, [r5, #16]
 800db34:	3202      	adds	r2, #2
 800db36:	0092      	lsls	r2, r2, #2
 800db38:	f105 010c 	add.w	r1, r5, #12
 800db3c:	300c      	adds	r0, #12
 800db3e:	f7ff faa2 	bl	800d086 <memcpy>
 800db42:	2201      	movs	r2, #1
 800db44:	4631      	mov	r1, r6
 800db46:	4658      	mov	r0, fp
 800db48:	f000 fc08 	bl	800e35c <__lshift>
 800db4c:	f10a 0301 	add.w	r3, sl, #1
 800db50:	9307      	str	r3, [sp, #28]
 800db52:	9b00      	ldr	r3, [sp, #0]
 800db54:	4453      	add	r3, sl
 800db56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db58:	9b02      	ldr	r3, [sp, #8]
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	462f      	mov	r7, r5
 800db60:	930a      	str	r3, [sp, #40]	@ 0x28
 800db62:	4605      	mov	r5, r0
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	4621      	mov	r1, r4
 800db68:	3b01      	subs	r3, #1
 800db6a:	4648      	mov	r0, r9
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	f7ff fa98 	bl	800d0a2 <quorem>
 800db72:	4639      	mov	r1, r7
 800db74:	9002      	str	r0, [sp, #8]
 800db76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db7a:	4648      	mov	r0, r9
 800db7c:	f000 fc5a 	bl	800e434 <__mcmp>
 800db80:	462a      	mov	r2, r5
 800db82:	9008      	str	r0, [sp, #32]
 800db84:	4621      	mov	r1, r4
 800db86:	4658      	mov	r0, fp
 800db88:	f000 fc70 	bl	800e46c <__mdiff>
 800db8c:	68c2      	ldr	r2, [r0, #12]
 800db8e:	4606      	mov	r6, r0
 800db90:	bb02      	cbnz	r2, 800dbd4 <_dtoa_r+0xa1c>
 800db92:	4601      	mov	r1, r0
 800db94:	4648      	mov	r0, r9
 800db96:	f000 fc4d 	bl	800e434 <__mcmp>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4631      	mov	r1, r6
 800db9e:	4658      	mov	r0, fp
 800dba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dba2:	f000 fa0d 	bl	800dfc0 <_Bfree>
 800dba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbaa:	9e07      	ldr	r6, [sp, #28]
 800dbac:	ea43 0102 	orr.w	r1, r3, r2
 800dbb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbb2:	4319      	orrs	r1, r3
 800dbb4:	d110      	bne.n	800dbd8 <_dtoa_r+0xa20>
 800dbb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbba:	d029      	beq.n	800dc10 <_dtoa_r+0xa58>
 800dbbc:	9b08      	ldr	r3, [sp, #32]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dd02      	ble.n	800dbc8 <_dtoa_r+0xa10>
 800dbc2:	9b02      	ldr	r3, [sp, #8]
 800dbc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dbc8:	9b00      	ldr	r3, [sp, #0]
 800dbca:	f883 8000 	strb.w	r8, [r3]
 800dbce:	e63f      	b.n	800d850 <_dtoa_r+0x698>
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	e7bb      	b.n	800db4c <_dtoa_r+0x994>
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	e7e1      	b.n	800db9c <_dtoa_r+0x9e4>
 800dbd8:	9b08      	ldr	r3, [sp, #32]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	db04      	blt.n	800dbe8 <_dtoa_r+0xa30>
 800dbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbe0:	430b      	orrs	r3, r1
 800dbe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbe4:	430b      	orrs	r3, r1
 800dbe6:	d120      	bne.n	800dc2a <_dtoa_r+0xa72>
 800dbe8:	2a00      	cmp	r2, #0
 800dbea:	dded      	ble.n	800dbc8 <_dtoa_r+0xa10>
 800dbec:	4649      	mov	r1, r9
 800dbee:	2201      	movs	r2, #1
 800dbf0:	4658      	mov	r0, fp
 800dbf2:	f000 fbb3 	bl	800e35c <__lshift>
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4681      	mov	r9, r0
 800dbfa:	f000 fc1b 	bl	800e434 <__mcmp>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	dc03      	bgt.n	800dc0a <_dtoa_r+0xa52>
 800dc02:	d1e1      	bne.n	800dbc8 <_dtoa_r+0xa10>
 800dc04:	f018 0f01 	tst.w	r8, #1
 800dc08:	d0de      	beq.n	800dbc8 <_dtoa_r+0xa10>
 800dc0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc0e:	d1d8      	bne.n	800dbc2 <_dtoa_r+0xa0a>
 800dc10:	9a00      	ldr	r2, [sp, #0]
 800dc12:	2339      	movs	r3, #57	@ 0x39
 800dc14:	7013      	strb	r3, [r2, #0]
 800dc16:	4633      	mov	r3, r6
 800dc18:	461e      	mov	r6, r3
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc20:	2a39      	cmp	r2, #57	@ 0x39
 800dc22:	d052      	beq.n	800dcca <_dtoa_r+0xb12>
 800dc24:	3201      	adds	r2, #1
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	e612      	b.n	800d850 <_dtoa_r+0x698>
 800dc2a:	2a00      	cmp	r2, #0
 800dc2c:	dd07      	ble.n	800dc3e <_dtoa_r+0xa86>
 800dc2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc32:	d0ed      	beq.n	800dc10 <_dtoa_r+0xa58>
 800dc34:	9a00      	ldr	r2, [sp, #0]
 800dc36:	f108 0301 	add.w	r3, r8, #1
 800dc3a:	7013      	strb	r3, [r2, #0]
 800dc3c:	e608      	b.n	800d850 <_dtoa_r+0x698>
 800dc3e:	9b07      	ldr	r3, [sp, #28]
 800dc40:	9a07      	ldr	r2, [sp, #28]
 800dc42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dc46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d028      	beq.n	800dc9e <_dtoa_r+0xae6>
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	2300      	movs	r3, #0
 800dc50:	220a      	movs	r2, #10
 800dc52:	4658      	mov	r0, fp
 800dc54:	f000 f9d6 	bl	800e004 <__multadd>
 800dc58:	42af      	cmp	r7, r5
 800dc5a:	4681      	mov	r9, r0
 800dc5c:	f04f 0300 	mov.w	r3, #0
 800dc60:	f04f 020a 	mov.w	r2, #10
 800dc64:	4639      	mov	r1, r7
 800dc66:	4658      	mov	r0, fp
 800dc68:	d107      	bne.n	800dc7a <_dtoa_r+0xac2>
 800dc6a:	f000 f9cb 	bl	800e004 <__multadd>
 800dc6e:	4607      	mov	r7, r0
 800dc70:	4605      	mov	r5, r0
 800dc72:	9b07      	ldr	r3, [sp, #28]
 800dc74:	3301      	adds	r3, #1
 800dc76:	9307      	str	r3, [sp, #28]
 800dc78:	e774      	b.n	800db64 <_dtoa_r+0x9ac>
 800dc7a:	f000 f9c3 	bl	800e004 <__multadd>
 800dc7e:	4629      	mov	r1, r5
 800dc80:	4607      	mov	r7, r0
 800dc82:	2300      	movs	r3, #0
 800dc84:	220a      	movs	r2, #10
 800dc86:	4658      	mov	r0, fp
 800dc88:	f000 f9bc 	bl	800e004 <__multadd>
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	e7f0      	b.n	800dc72 <_dtoa_r+0xaba>
 800dc90:	9b00      	ldr	r3, [sp, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	bfcc      	ite	gt
 800dc96:	461e      	movgt	r6, r3
 800dc98:	2601      	movle	r6, #1
 800dc9a:	4456      	add	r6, sl
 800dc9c:	2700      	movs	r7, #0
 800dc9e:	4649      	mov	r1, r9
 800dca0:	2201      	movs	r2, #1
 800dca2:	4658      	mov	r0, fp
 800dca4:	f000 fb5a 	bl	800e35c <__lshift>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4681      	mov	r9, r0
 800dcac:	f000 fbc2 	bl	800e434 <__mcmp>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	dcb0      	bgt.n	800dc16 <_dtoa_r+0xa5e>
 800dcb4:	d102      	bne.n	800dcbc <_dtoa_r+0xb04>
 800dcb6:	f018 0f01 	tst.w	r8, #1
 800dcba:	d1ac      	bne.n	800dc16 <_dtoa_r+0xa5e>
 800dcbc:	4633      	mov	r3, r6
 800dcbe:	461e      	mov	r6, r3
 800dcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcc4:	2a30      	cmp	r2, #48	@ 0x30
 800dcc6:	d0fa      	beq.n	800dcbe <_dtoa_r+0xb06>
 800dcc8:	e5c2      	b.n	800d850 <_dtoa_r+0x698>
 800dcca:	459a      	cmp	sl, r3
 800dccc:	d1a4      	bne.n	800dc18 <_dtoa_r+0xa60>
 800dcce:	9b04      	ldr	r3, [sp, #16]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	9304      	str	r3, [sp, #16]
 800dcd4:	2331      	movs	r3, #49	@ 0x31
 800dcd6:	f88a 3000 	strb.w	r3, [sl]
 800dcda:	e5b9      	b.n	800d850 <_dtoa_r+0x698>
 800dcdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dd3c <_dtoa_r+0xb84>
 800dce2:	b11b      	cbz	r3, 800dcec <_dtoa_r+0xb34>
 800dce4:	f10a 0308 	add.w	r3, sl, #8
 800dce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	4650      	mov	r0, sl
 800dcee:	b019      	add	sp, #100	@ 0x64
 800dcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	f77f ae37 	ble.w	800d96a <_dtoa_r+0x7b2>
 800dcfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd00:	2001      	movs	r0, #1
 800dd02:	e655      	b.n	800d9b0 <_dtoa_r+0x7f8>
 800dd04:	9b00      	ldr	r3, [sp, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f77f aed6 	ble.w	800dab8 <_dtoa_r+0x900>
 800dd0c:	4656      	mov	r6, sl
 800dd0e:	4621      	mov	r1, r4
 800dd10:	4648      	mov	r0, r9
 800dd12:	f7ff f9c6 	bl	800d0a2 <quorem>
 800dd16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd1a:	f806 8b01 	strb.w	r8, [r6], #1
 800dd1e:	9b00      	ldr	r3, [sp, #0]
 800dd20:	eba6 020a 	sub.w	r2, r6, sl
 800dd24:	4293      	cmp	r3, r2
 800dd26:	ddb3      	ble.n	800dc90 <_dtoa_r+0xad8>
 800dd28:	4649      	mov	r1, r9
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	220a      	movs	r2, #10
 800dd2e:	4658      	mov	r0, fp
 800dd30:	f000 f968 	bl	800e004 <__multadd>
 800dd34:	4681      	mov	r9, r0
 800dd36:	e7ea      	b.n	800dd0e <_dtoa_r+0xb56>
 800dd38:	080119b0 	.word	0x080119b0
 800dd3c:	08011934 	.word	0x08011934

0800dd40 <_free_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4605      	mov	r5, r0
 800dd44:	2900      	cmp	r1, #0
 800dd46:	d041      	beq.n	800ddcc <_free_r+0x8c>
 800dd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd4c:	1f0c      	subs	r4, r1, #4
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	bfb8      	it	lt
 800dd52:	18e4      	addlt	r4, r4, r3
 800dd54:	f000 f8e8 	bl	800df28 <__malloc_lock>
 800dd58:	4a1d      	ldr	r2, [pc, #116]	@ (800ddd0 <_free_r+0x90>)
 800dd5a:	6813      	ldr	r3, [r2, #0]
 800dd5c:	b933      	cbnz	r3, 800dd6c <_free_r+0x2c>
 800dd5e:	6063      	str	r3, [r4, #4]
 800dd60:	6014      	str	r4, [r2, #0]
 800dd62:	4628      	mov	r0, r5
 800dd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd68:	f000 b8e4 	b.w	800df34 <__malloc_unlock>
 800dd6c:	42a3      	cmp	r3, r4
 800dd6e:	d908      	bls.n	800dd82 <_free_r+0x42>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	1821      	adds	r1, r4, r0
 800dd74:	428b      	cmp	r3, r1
 800dd76:	bf01      	itttt	eq
 800dd78:	6819      	ldreq	r1, [r3, #0]
 800dd7a:	685b      	ldreq	r3, [r3, #4]
 800dd7c:	1809      	addeq	r1, r1, r0
 800dd7e:	6021      	streq	r1, [r4, #0]
 800dd80:	e7ed      	b.n	800dd5e <_free_r+0x1e>
 800dd82:	461a      	mov	r2, r3
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	b10b      	cbz	r3, 800dd8c <_free_r+0x4c>
 800dd88:	42a3      	cmp	r3, r4
 800dd8a:	d9fa      	bls.n	800dd82 <_free_r+0x42>
 800dd8c:	6811      	ldr	r1, [r2, #0]
 800dd8e:	1850      	adds	r0, r2, r1
 800dd90:	42a0      	cmp	r0, r4
 800dd92:	d10b      	bne.n	800ddac <_free_r+0x6c>
 800dd94:	6820      	ldr	r0, [r4, #0]
 800dd96:	4401      	add	r1, r0
 800dd98:	1850      	adds	r0, r2, r1
 800dd9a:	4283      	cmp	r3, r0
 800dd9c:	6011      	str	r1, [r2, #0]
 800dd9e:	d1e0      	bne.n	800dd62 <_free_r+0x22>
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	6053      	str	r3, [r2, #4]
 800dda6:	4408      	add	r0, r1
 800dda8:	6010      	str	r0, [r2, #0]
 800ddaa:	e7da      	b.n	800dd62 <_free_r+0x22>
 800ddac:	d902      	bls.n	800ddb4 <_free_r+0x74>
 800ddae:	230c      	movs	r3, #12
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	e7d6      	b.n	800dd62 <_free_r+0x22>
 800ddb4:	6820      	ldr	r0, [r4, #0]
 800ddb6:	1821      	adds	r1, r4, r0
 800ddb8:	428b      	cmp	r3, r1
 800ddba:	bf04      	itt	eq
 800ddbc:	6819      	ldreq	r1, [r3, #0]
 800ddbe:	685b      	ldreq	r3, [r3, #4]
 800ddc0:	6063      	str	r3, [r4, #4]
 800ddc2:	bf04      	itt	eq
 800ddc4:	1809      	addeq	r1, r1, r0
 800ddc6:	6021      	streq	r1, [r4, #0]
 800ddc8:	6054      	str	r4, [r2, #4]
 800ddca:	e7ca      	b.n	800dd62 <_free_r+0x22>
 800ddcc:	bd38      	pop	{r3, r4, r5, pc}
 800ddce:	bf00      	nop
 800ddd0:	200009b8 	.word	0x200009b8

0800ddd4 <malloc>:
 800ddd4:	4b02      	ldr	r3, [pc, #8]	@ (800dde0 <malloc+0xc>)
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	f000 b825 	b.w	800de28 <_malloc_r>
 800ddde:	bf00      	nop
 800dde0:	20000058 	.word	0x20000058

0800dde4 <sbrk_aligned>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	4e0f      	ldr	r6, [pc, #60]	@ (800de24 <sbrk_aligned+0x40>)
 800dde8:	460c      	mov	r4, r1
 800ddea:	6831      	ldr	r1, [r6, #0]
 800ddec:	4605      	mov	r5, r0
 800ddee:	b911      	cbnz	r1, 800ddf6 <sbrk_aligned+0x12>
 800ddf0:	f000 fe46 	bl	800ea80 <_sbrk_r>
 800ddf4:	6030      	str	r0, [r6, #0]
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 fe41 	bl	800ea80 <_sbrk_r>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d103      	bne.n	800de0a <sbrk_aligned+0x26>
 800de02:	f04f 34ff 	mov.w	r4, #4294967295
 800de06:	4620      	mov	r0, r4
 800de08:	bd70      	pop	{r4, r5, r6, pc}
 800de0a:	1cc4      	adds	r4, r0, #3
 800de0c:	f024 0403 	bic.w	r4, r4, #3
 800de10:	42a0      	cmp	r0, r4
 800de12:	d0f8      	beq.n	800de06 <sbrk_aligned+0x22>
 800de14:	1a21      	subs	r1, r4, r0
 800de16:	4628      	mov	r0, r5
 800de18:	f000 fe32 	bl	800ea80 <_sbrk_r>
 800de1c:	3001      	adds	r0, #1
 800de1e:	d1f2      	bne.n	800de06 <sbrk_aligned+0x22>
 800de20:	e7ef      	b.n	800de02 <sbrk_aligned+0x1e>
 800de22:	bf00      	nop
 800de24:	200009b4 	.word	0x200009b4

0800de28 <_malloc_r>:
 800de28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de2c:	1ccd      	adds	r5, r1, #3
 800de2e:	f025 0503 	bic.w	r5, r5, #3
 800de32:	3508      	adds	r5, #8
 800de34:	2d0c      	cmp	r5, #12
 800de36:	bf38      	it	cc
 800de38:	250c      	movcc	r5, #12
 800de3a:	2d00      	cmp	r5, #0
 800de3c:	4606      	mov	r6, r0
 800de3e:	db01      	blt.n	800de44 <_malloc_r+0x1c>
 800de40:	42a9      	cmp	r1, r5
 800de42:	d904      	bls.n	800de4e <_malloc_r+0x26>
 800de44:	230c      	movs	r3, #12
 800de46:	6033      	str	r3, [r6, #0]
 800de48:	2000      	movs	r0, #0
 800de4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df24 <_malloc_r+0xfc>
 800de52:	f000 f869 	bl	800df28 <__malloc_lock>
 800de56:	f8d8 3000 	ldr.w	r3, [r8]
 800de5a:	461c      	mov	r4, r3
 800de5c:	bb44      	cbnz	r4, 800deb0 <_malloc_r+0x88>
 800de5e:	4629      	mov	r1, r5
 800de60:	4630      	mov	r0, r6
 800de62:	f7ff ffbf 	bl	800dde4 <sbrk_aligned>
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	4604      	mov	r4, r0
 800de6a:	d158      	bne.n	800df1e <_malloc_r+0xf6>
 800de6c:	f8d8 4000 	ldr.w	r4, [r8]
 800de70:	4627      	mov	r7, r4
 800de72:	2f00      	cmp	r7, #0
 800de74:	d143      	bne.n	800defe <_malloc_r+0xd6>
 800de76:	2c00      	cmp	r4, #0
 800de78:	d04b      	beq.n	800df12 <_malloc_r+0xea>
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	4639      	mov	r1, r7
 800de7e:	4630      	mov	r0, r6
 800de80:	eb04 0903 	add.w	r9, r4, r3
 800de84:	f000 fdfc 	bl	800ea80 <_sbrk_r>
 800de88:	4581      	cmp	r9, r0
 800de8a:	d142      	bne.n	800df12 <_malloc_r+0xea>
 800de8c:	6821      	ldr	r1, [r4, #0]
 800de8e:	1a6d      	subs	r5, r5, r1
 800de90:	4629      	mov	r1, r5
 800de92:	4630      	mov	r0, r6
 800de94:	f7ff ffa6 	bl	800dde4 <sbrk_aligned>
 800de98:	3001      	adds	r0, #1
 800de9a:	d03a      	beq.n	800df12 <_malloc_r+0xea>
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	442b      	add	r3, r5
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	f8d8 3000 	ldr.w	r3, [r8]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	bb62      	cbnz	r2, 800df04 <_malloc_r+0xdc>
 800deaa:	f8c8 7000 	str.w	r7, [r8]
 800deae:	e00f      	b.n	800ded0 <_malloc_r+0xa8>
 800deb0:	6822      	ldr	r2, [r4, #0]
 800deb2:	1b52      	subs	r2, r2, r5
 800deb4:	d420      	bmi.n	800def8 <_malloc_r+0xd0>
 800deb6:	2a0b      	cmp	r2, #11
 800deb8:	d917      	bls.n	800deea <_malloc_r+0xc2>
 800deba:	1961      	adds	r1, r4, r5
 800debc:	42a3      	cmp	r3, r4
 800debe:	6025      	str	r5, [r4, #0]
 800dec0:	bf18      	it	ne
 800dec2:	6059      	strne	r1, [r3, #4]
 800dec4:	6863      	ldr	r3, [r4, #4]
 800dec6:	bf08      	it	eq
 800dec8:	f8c8 1000 	streq.w	r1, [r8]
 800decc:	5162      	str	r2, [r4, r5]
 800dece:	604b      	str	r3, [r1, #4]
 800ded0:	4630      	mov	r0, r6
 800ded2:	f000 f82f 	bl	800df34 <__malloc_unlock>
 800ded6:	f104 000b 	add.w	r0, r4, #11
 800deda:	1d23      	adds	r3, r4, #4
 800dedc:	f020 0007 	bic.w	r0, r0, #7
 800dee0:	1ac2      	subs	r2, r0, r3
 800dee2:	bf1c      	itt	ne
 800dee4:	1a1b      	subne	r3, r3, r0
 800dee6:	50a3      	strne	r3, [r4, r2]
 800dee8:	e7af      	b.n	800de4a <_malloc_r+0x22>
 800deea:	6862      	ldr	r2, [r4, #4]
 800deec:	42a3      	cmp	r3, r4
 800deee:	bf0c      	ite	eq
 800def0:	f8c8 2000 	streq.w	r2, [r8]
 800def4:	605a      	strne	r2, [r3, #4]
 800def6:	e7eb      	b.n	800ded0 <_malloc_r+0xa8>
 800def8:	4623      	mov	r3, r4
 800defa:	6864      	ldr	r4, [r4, #4]
 800defc:	e7ae      	b.n	800de5c <_malloc_r+0x34>
 800defe:	463c      	mov	r4, r7
 800df00:	687f      	ldr	r7, [r7, #4]
 800df02:	e7b6      	b.n	800de72 <_malloc_r+0x4a>
 800df04:	461a      	mov	r2, r3
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	42a3      	cmp	r3, r4
 800df0a:	d1fb      	bne.n	800df04 <_malloc_r+0xdc>
 800df0c:	2300      	movs	r3, #0
 800df0e:	6053      	str	r3, [r2, #4]
 800df10:	e7de      	b.n	800ded0 <_malloc_r+0xa8>
 800df12:	230c      	movs	r3, #12
 800df14:	6033      	str	r3, [r6, #0]
 800df16:	4630      	mov	r0, r6
 800df18:	f000 f80c 	bl	800df34 <__malloc_unlock>
 800df1c:	e794      	b.n	800de48 <_malloc_r+0x20>
 800df1e:	6005      	str	r5, [r0, #0]
 800df20:	e7d6      	b.n	800ded0 <_malloc_r+0xa8>
 800df22:	bf00      	nop
 800df24:	200009b8 	.word	0x200009b8

0800df28 <__malloc_lock>:
 800df28:	4801      	ldr	r0, [pc, #4]	@ (800df30 <__malloc_lock+0x8>)
 800df2a:	f7ff b8aa 	b.w	800d082 <__retarget_lock_acquire_recursive>
 800df2e:	bf00      	nop
 800df30:	200009b0 	.word	0x200009b0

0800df34 <__malloc_unlock>:
 800df34:	4801      	ldr	r0, [pc, #4]	@ (800df3c <__malloc_unlock+0x8>)
 800df36:	f7ff b8a5 	b.w	800d084 <__retarget_lock_release_recursive>
 800df3a:	bf00      	nop
 800df3c:	200009b0 	.word	0x200009b0

0800df40 <_Balloc>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	69c6      	ldr	r6, [r0, #28]
 800df44:	4604      	mov	r4, r0
 800df46:	460d      	mov	r5, r1
 800df48:	b976      	cbnz	r6, 800df68 <_Balloc+0x28>
 800df4a:	2010      	movs	r0, #16
 800df4c:	f7ff ff42 	bl	800ddd4 <malloc>
 800df50:	4602      	mov	r2, r0
 800df52:	61e0      	str	r0, [r4, #28]
 800df54:	b920      	cbnz	r0, 800df60 <_Balloc+0x20>
 800df56:	4b18      	ldr	r3, [pc, #96]	@ (800dfb8 <_Balloc+0x78>)
 800df58:	4818      	ldr	r0, [pc, #96]	@ (800dfbc <_Balloc+0x7c>)
 800df5a:	216b      	movs	r1, #107	@ 0x6b
 800df5c:	f000 fda0 	bl	800eaa0 <__assert_func>
 800df60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df64:	6006      	str	r6, [r0, #0]
 800df66:	60c6      	str	r6, [r0, #12]
 800df68:	69e6      	ldr	r6, [r4, #28]
 800df6a:	68f3      	ldr	r3, [r6, #12]
 800df6c:	b183      	cbz	r3, 800df90 <_Balloc+0x50>
 800df6e:	69e3      	ldr	r3, [r4, #28]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df76:	b9b8      	cbnz	r0, 800dfa8 <_Balloc+0x68>
 800df78:	2101      	movs	r1, #1
 800df7a:	fa01 f605 	lsl.w	r6, r1, r5
 800df7e:	1d72      	adds	r2, r6, #5
 800df80:	0092      	lsls	r2, r2, #2
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fdaa 	bl	800eadc <_calloc_r>
 800df88:	b160      	cbz	r0, 800dfa4 <_Balloc+0x64>
 800df8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df8e:	e00e      	b.n	800dfae <_Balloc+0x6e>
 800df90:	2221      	movs	r2, #33	@ 0x21
 800df92:	2104      	movs	r1, #4
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fda1 	bl	800eadc <_calloc_r>
 800df9a:	69e3      	ldr	r3, [r4, #28]
 800df9c:	60f0      	str	r0, [r6, #12]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e4      	bne.n	800df6e <_Balloc+0x2e>
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	bd70      	pop	{r4, r5, r6, pc}
 800dfa8:	6802      	ldr	r2, [r0, #0]
 800dfaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfb4:	e7f7      	b.n	800dfa6 <_Balloc+0x66>
 800dfb6:	bf00      	nop
 800dfb8:	08011941 	.word	0x08011941
 800dfbc:	080119c1 	.word	0x080119c1

0800dfc0 <_Bfree>:
 800dfc0:	b570      	push	{r4, r5, r6, lr}
 800dfc2:	69c6      	ldr	r6, [r0, #28]
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	b976      	cbnz	r6, 800dfe8 <_Bfree+0x28>
 800dfca:	2010      	movs	r0, #16
 800dfcc:	f7ff ff02 	bl	800ddd4 <malloc>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	61e8      	str	r0, [r5, #28]
 800dfd4:	b920      	cbnz	r0, 800dfe0 <_Bfree+0x20>
 800dfd6:	4b09      	ldr	r3, [pc, #36]	@ (800dffc <_Bfree+0x3c>)
 800dfd8:	4809      	ldr	r0, [pc, #36]	@ (800e000 <_Bfree+0x40>)
 800dfda:	218f      	movs	r1, #143	@ 0x8f
 800dfdc:	f000 fd60 	bl	800eaa0 <__assert_func>
 800dfe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfe4:	6006      	str	r6, [r0, #0]
 800dfe6:	60c6      	str	r6, [r0, #12]
 800dfe8:	b13c      	cbz	r4, 800dffa <_Bfree+0x3a>
 800dfea:	69eb      	ldr	r3, [r5, #28]
 800dfec:	6862      	ldr	r2, [r4, #4]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dff4:	6021      	str	r1, [r4, #0]
 800dff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	08011941 	.word	0x08011941
 800e000:	080119c1 	.word	0x080119c1

0800e004 <__multadd>:
 800e004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e008:	690d      	ldr	r5, [r1, #16]
 800e00a:	4607      	mov	r7, r0
 800e00c:	460c      	mov	r4, r1
 800e00e:	461e      	mov	r6, r3
 800e010:	f101 0c14 	add.w	ip, r1, #20
 800e014:	2000      	movs	r0, #0
 800e016:	f8dc 3000 	ldr.w	r3, [ip]
 800e01a:	b299      	uxth	r1, r3
 800e01c:	fb02 6101 	mla	r1, r2, r1, r6
 800e020:	0c1e      	lsrs	r6, r3, #16
 800e022:	0c0b      	lsrs	r3, r1, #16
 800e024:	fb02 3306 	mla	r3, r2, r6, r3
 800e028:	b289      	uxth	r1, r1
 800e02a:	3001      	adds	r0, #1
 800e02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e030:	4285      	cmp	r5, r0
 800e032:	f84c 1b04 	str.w	r1, [ip], #4
 800e036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e03a:	dcec      	bgt.n	800e016 <__multadd+0x12>
 800e03c:	b30e      	cbz	r6, 800e082 <__multadd+0x7e>
 800e03e:	68a3      	ldr	r3, [r4, #8]
 800e040:	42ab      	cmp	r3, r5
 800e042:	dc19      	bgt.n	800e078 <__multadd+0x74>
 800e044:	6861      	ldr	r1, [r4, #4]
 800e046:	4638      	mov	r0, r7
 800e048:	3101      	adds	r1, #1
 800e04a:	f7ff ff79 	bl	800df40 <_Balloc>
 800e04e:	4680      	mov	r8, r0
 800e050:	b928      	cbnz	r0, 800e05e <__multadd+0x5a>
 800e052:	4602      	mov	r2, r0
 800e054:	4b0c      	ldr	r3, [pc, #48]	@ (800e088 <__multadd+0x84>)
 800e056:	480d      	ldr	r0, [pc, #52]	@ (800e08c <__multadd+0x88>)
 800e058:	21ba      	movs	r1, #186	@ 0xba
 800e05a:	f000 fd21 	bl	800eaa0 <__assert_func>
 800e05e:	6922      	ldr	r2, [r4, #16]
 800e060:	3202      	adds	r2, #2
 800e062:	f104 010c 	add.w	r1, r4, #12
 800e066:	0092      	lsls	r2, r2, #2
 800e068:	300c      	adds	r0, #12
 800e06a:	f7ff f80c 	bl	800d086 <memcpy>
 800e06e:	4621      	mov	r1, r4
 800e070:	4638      	mov	r0, r7
 800e072:	f7ff ffa5 	bl	800dfc0 <_Bfree>
 800e076:	4644      	mov	r4, r8
 800e078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e07c:	3501      	adds	r5, #1
 800e07e:	615e      	str	r6, [r3, #20]
 800e080:	6125      	str	r5, [r4, #16]
 800e082:	4620      	mov	r0, r4
 800e084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e088:	080119b0 	.word	0x080119b0
 800e08c:	080119c1 	.word	0x080119c1

0800e090 <__hi0bits>:
 800e090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e094:	4603      	mov	r3, r0
 800e096:	bf36      	itet	cc
 800e098:	0403      	lslcc	r3, r0, #16
 800e09a:	2000      	movcs	r0, #0
 800e09c:	2010      	movcc	r0, #16
 800e09e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0a2:	bf3c      	itt	cc
 800e0a4:	021b      	lslcc	r3, r3, #8
 800e0a6:	3008      	addcc	r0, #8
 800e0a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0ac:	bf3c      	itt	cc
 800e0ae:	011b      	lslcc	r3, r3, #4
 800e0b0:	3004      	addcc	r0, #4
 800e0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0b6:	bf3c      	itt	cc
 800e0b8:	009b      	lslcc	r3, r3, #2
 800e0ba:	3002      	addcc	r0, #2
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	db05      	blt.n	800e0cc <__hi0bits+0x3c>
 800e0c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0c4:	f100 0001 	add.w	r0, r0, #1
 800e0c8:	bf08      	it	eq
 800e0ca:	2020      	moveq	r0, #32
 800e0cc:	4770      	bx	lr

0800e0ce <__lo0bits>:
 800e0ce:	6803      	ldr	r3, [r0, #0]
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	f013 0007 	ands.w	r0, r3, #7
 800e0d6:	d00b      	beq.n	800e0f0 <__lo0bits+0x22>
 800e0d8:	07d9      	lsls	r1, r3, #31
 800e0da:	d421      	bmi.n	800e120 <__lo0bits+0x52>
 800e0dc:	0798      	lsls	r0, r3, #30
 800e0de:	bf49      	itett	mi
 800e0e0:	085b      	lsrmi	r3, r3, #1
 800e0e2:	089b      	lsrpl	r3, r3, #2
 800e0e4:	2001      	movmi	r0, #1
 800e0e6:	6013      	strmi	r3, [r2, #0]
 800e0e8:	bf5c      	itt	pl
 800e0ea:	6013      	strpl	r3, [r2, #0]
 800e0ec:	2002      	movpl	r0, #2
 800e0ee:	4770      	bx	lr
 800e0f0:	b299      	uxth	r1, r3
 800e0f2:	b909      	cbnz	r1, 800e0f8 <__lo0bits+0x2a>
 800e0f4:	0c1b      	lsrs	r3, r3, #16
 800e0f6:	2010      	movs	r0, #16
 800e0f8:	b2d9      	uxtb	r1, r3
 800e0fa:	b909      	cbnz	r1, 800e100 <__lo0bits+0x32>
 800e0fc:	3008      	adds	r0, #8
 800e0fe:	0a1b      	lsrs	r3, r3, #8
 800e100:	0719      	lsls	r1, r3, #28
 800e102:	bf04      	itt	eq
 800e104:	091b      	lsreq	r3, r3, #4
 800e106:	3004      	addeq	r0, #4
 800e108:	0799      	lsls	r1, r3, #30
 800e10a:	bf04      	itt	eq
 800e10c:	089b      	lsreq	r3, r3, #2
 800e10e:	3002      	addeq	r0, #2
 800e110:	07d9      	lsls	r1, r3, #31
 800e112:	d403      	bmi.n	800e11c <__lo0bits+0x4e>
 800e114:	085b      	lsrs	r3, r3, #1
 800e116:	f100 0001 	add.w	r0, r0, #1
 800e11a:	d003      	beq.n	800e124 <__lo0bits+0x56>
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	4770      	bx	lr
 800e120:	2000      	movs	r0, #0
 800e122:	4770      	bx	lr
 800e124:	2020      	movs	r0, #32
 800e126:	4770      	bx	lr

0800e128 <__i2b>:
 800e128:	b510      	push	{r4, lr}
 800e12a:	460c      	mov	r4, r1
 800e12c:	2101      	movs	r1, #1
 800e12e:	f7ff ff07 	bl	800df40 <_Balloc>
 800e132:	4602      	mov	r2, r0
 800e134:	b928      	cbnz	r0, 800e142 <__i2b+0x1a>
 800e136:	4b05      	ldr	r3, [pc, #20]	@ (800e14c <__i2b+0x24>)
 800e138:	4805      	ldr	r0, [pc, #20]	@ (800e150 <__i2b+0x28>)
 800e13a:	f240 1145 	movw	r1, #325	@ 0x145
 800e13e:	f000 fcaf 	bl	800eaa0 <__assert_func>
 800e142:	2301      	movs	r3, #1
 800e144:	6144      	str	r4, [r0, #20]
 800e146:	6103      	str	r3, [r0, #16]
 800e148:	bd10      	pop	{r4, pc}
 800e14a:	bf00      	nop
 800e14c:	080119b0 	.word	0x080119b0
 800e150:	080119c1 	.word	0x080119c1

0800e154 <__multiply>:
 800e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e158:	4614      	mov	r4, r2
 800e15a:	690a      	ldr	r2, [r1, #16]
 800e15c:	6923      	ldr	r3, [r4, #16]
 800e15e:	429a      	cmp	r2, r3
 800e160:	bfa8      	it	ge
 800e162:	4623      	movge	r3, r4
 800e164:	460f      	mov	r7, r1
 800e166:	bfa4      	itt	ge
 800e168:	460c      	movge	r4, r1
 800e16a:	461f      	movge	r7, r3
 800e16c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e174:	68a3      	ldr	r3, [r4, #8]
 800e176:	6861      	ldr	r1, [r4, #4]
 800e178:	eb0a 0609 	add.w	r6, sl, r9
 800e17c:	42b3      	cmp	r3, r6
 800e17e:	b085      	sub	sp, #20
 800e180:	bfb8      	it	lt
 800e182:	3101      	addlt	r1, #1
 800e184:	f7ff fedc 	bl	800df40 <_Balloc>
 800e188:	b930      	cbnz	r0, 800e198 <__multiply+0x44>
 800e18a:	4602      	mov	r2, r0
 800e18c:	4b44      	ldr	r3, [pc, #272]	@ (800e2a0 <__multiply+0x14c>)
 800e18e:	4845      	ldr	r0, [pc, #276]	@ (800e2a4 <__multiply+0x150>)
 800e190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e194:	f000 fc84 	bl	800eaa0 <__assert_func>
 800e198:	f100 0514 	add.w	r5, r0, #20
 800e19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1a0:	462b      	mov	r3, r5
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	4543      	cmp	r3, r8
 800e1a6:	d321      	bcc.n	800e1ec <__multiply+0x98>
 800e1a8:	f107 0114 	add.w	r1, r7, #20
 800e1ac:	f104 0214 	add.w	r2, r4, #20
 800e1b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1b8:	9302      	str	r3, [sp, #8]
 800e1ba:	1b13      	subs	r3, r2, r4
 800e1bc:	3b15      	subs	r3, #21
 800e1be:	f023 0303 	bic.w	r3, r3, #3
 800e1c2:	3304      	adds	r3, #4
 800e1c4:	f104 0715 	add.w	r7, r4, #21
 800e1c8:	42ba      	cmp	r2, r7
 800e1ca:	bf38      	it	cc
 800e1cc:	2304      	movcc	r3, #4
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	9b02      	ldr	r3, [sp, #8]
 800e1d2:	9103      	str	r1, [sp, #12]
 800e1d4:	428b      	cmp	r3, r1
 800e1d6:	d80c      	bhi.n	800e1f2 <__multiply+0x9e>
 800e1d8:	2e00      	cmp	r6, #0
 800e1da:	dd03      	ble.n	800e1e4 <__multiply+0x90>
 800e1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d05b      	beq.n	800e29c <__multiply+0x148>
 800e1e4:	6106      	str	r6, [r0, #16]
 800e1e6:	b005      	add	sp, #20
 800e1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	f843 2b04 	str.w	r2, [r3], #4
 800e1f0:	e7d8      	b.n	800e1a4 <__multiply+0x50>
 800e1f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1f6:	f1ba 0f00 	cmp.w	sl, #0
 800e1fa:	d024      	beq.n	800e246 <__multiply+0xf2>
 800e1fc:	f104 0e14 	add.w	lr, r4, #20
 800e200:	46a9      	mov	r9, r5
 800e202:	f04f 0c00 	mov.w	ip, #0
 800e206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e20a:	f8d9 3000 	ldr.w	r3, [r9]
 800e20e:	fa1f fb87 	uxth.w	fp, r7
 800e212:	b29b      	uxth	r3, r3
 800e214:	fb0a 330b 	mla	r3, sl, fp, r3
 800e218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e21c:	f8d9 7000 	ldr.w	r7, [r9]
 800e220:	4463      	add	r3, ip
 800e222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e226:	fb0a c70b 	mla	r7, sl, fp, ip
 800e22a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e22e:	b29b      	uxth	r3, r3
 800e230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e234:	4572      	cmp	r2, lr
 800e236:	f849 3b04 	str.w	r3, [r9], #4
 800e23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e23e:	d8e2      	bhi.n	800e206 <__multiply+0xb2>
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	f845 c003 	str.w	ip, [r5, r3]
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e24c:	3104      	adds	r1, #4
 800e24e:	f1b9 0f00 	cmp.w	r9, #0
 800e252:	d021      	beq.n	800e298 <__multiply+0x144>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	f104 0c14 	add.w	ip, r4, #20
 800e25a:	46ae      	mov	lr, r5
 800e25c:	f04f 0a00 	mov.w	sl, #0
 800e260:	f8bc b000 	ldrh.w	fp, [ip]
 800e264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e268:	fb09 770b 	mla	r7, r9, fp, r7
 800e26c:	4457      	add	r7, sl
 800e26e:	b29b      	uxth	r3, r3
 800e270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e274:	f84e 3b04 	str.w	r3, [lr], #4
 800e278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e27c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e280:	f8be 3000 	ldrh.w	r3, [lr]
 800e284:	fb09 330a 	mla	r3, r9, sl, r3
 800e288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e28c:	4562      	cmp	r2, ip
 800e28e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e292:	d8e5      	bhi.n	800e260 <__multiply+0x10c>
 800e294:	9f01      	ldr	r7, [sp, #4]
 800e296:	51eb      	str	r3, [r5, r7]
 800e298:	3504      	adds	r5, #4
 800e29a:	e799      	b.n	800e1d0 <__multiply+0x7c>
 800e29c:	3e01      	subs	r6, #1
 800e29e:	e79b      	b.n	800e1d8 <__multiply+0x84>
 800e2a0:	080119b0 	.word	0x080119b0
 800e2a4:	080119c1 	.word	0x080119c1

0800e2a8 <__pow5mult>:
 800e2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2ac:	4615      	mov	r5, r2
 800e2ae:	f012 0203 	ands.w	r2, r2, #3
 800e2b2:	4607      	mov	r7, r0
 800e2b4:	460e      	mov	r6, r1
 800e2b6:	d007      	beq.n	800e2c8 <__pow5mult+0x20>
 800e2b8:	4c25      	ldr	r4, [pc, #148]	@ (800e350 <__pow5mult+0xa8>)
 800e2ba:	3a01      	subs	r2, #1
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2c2:	f7ff fe9f 	bl	800e004 <__multadd>
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	10ad      	asrs	r5, r5, #2
 800e2ca:	d03d      	beq.n	800e348 <__pow5mult+0xa0>
 800e2cc:	69fc      	ldr	r4, [r7, #28]
 800e2ce:	b97c      	cbnz	r4, 800e2f0 <__pow5mult+0x48>
 800e2d0:	2010      	movs	r0, #16
 800e2d2:	f7ff fd7f 	bl	800ddd4 <malloc>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	61f8      	str	r0, [r7, #28]
 800e2da:	b928      	cbnz	r0, 800e2e8 <__pow5mult+0x40>
 800e2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e354 <__pow5mult+0xac>)
 800e2de:	481e      	ldr	r0, [pc, #120]	@ (800e358 <__pow5mult+0xb0>)
 800e2e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2e4:	f000 fbdc 	bl	800eaa0 <__assert_func>
 800e2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2ec:	6004      	str	r4, [r0, #0]
 800e2ee:	60c4      	str	r4, [r0, #12]
 800e2f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2f8:	b94c      	cbnz	r4, 800e30e <__pow5mult+0x66>
 800e2fa:	f240 2171 	movw	r1, #625	@ 0x271
 800e2fe:	4638      	mov	r0, r7
 800e300:	f7ff ff12 	bl	800e128 <__i2b>
 800e304:	2300      	movs	r3, #0
 800e306:	f8c8 0008 	str.w	r0, [r8, #8]
 800e30a:	4604      	mov	r4, r0
 800e30c:	6003      	str	r3, [r0, #0]
 800e30e:	f04f 0900 	mov.w	r9, #0
 800e312:	07eb      	lsls	r3, r5, #31
 800e314:	d50a      	bpl.n	800e32c <__pow5mult+0x84>
 800e316:	4631      	mov	r1, r6
 800e318:	4622      	mov	r2, r4
 800e31a:	4638      	mov	r0, r7
 800e31c:	f7ff ff1a 	bl	800e154 <__multiply>
 800e320:	4631      	mov	r1, r6
 800e322:	4680      	mov	r8, r0
 800e324:	4638      	mov	r0, r7
 800e326:	f7ff fe4b 	bl	800dfc0 <_Bfree>
 800e32a:	4646      	mov	r6, r8
 800e32c:	106d      	asrs	r5, r5, #1
 800e32e:	d00b      	beq.n	800e348 <__pow5mult+0xa0>
 800e330:	6820      	ldr	r0, [r4, #0]
 800e332:	b938      	cbnz	r0, 800e344 <__pow5mult+0x9c>
 800e334:	4622      	mov	r2, r4
 800e336:	4621      	mov	r1, r4
 800e338:	4638      	mov	r0, r7
 800e33a:	f7ff ff0b 	bl	800e154 <__multiply>
 800e33e:	6020      	str	r0, [r4, #0]
 800e340:	f8c0 9000 	str.w	r9, [r0]
 800e344:	4604      	mov	r4, r0
 800e346:	e7e4      	b.n	800e312 <__pow5mult+0x6a>
 800e348:	4630      	mov	r0, r6
 800e34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e34e:	bf00      	nop
 800e350:	08011a1c 	.word	0x08011a1c
 800e354:	08011941 	.word	0x08011941
 800e358:	080119c1 	.word	0x080119c1

0800e35c <__lshift>:
 800e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e360:	460c      	mov	r4, r1
 800e362:	6849      	ldr	r1, [r1, #4]
 800e364:	6923      	ldr	r3, [r4, #16]
 800e366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e36a:	68a3      	ldr	r3, [r4, #8]
 800e36c:	4607      	mov	r7, r0
 800e36e:	4691      	mov	r9, r2
 800e370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e374:	f108 0601 	add.w	r6, r8, #1
 800e378:	42b3      	cmp	r3, r6
 800e37a:	db0b      	blt.n	800e394 <__lshift+0x38>
 800e37c:	4638      	mov	r0, r7
 800e37e:	f7ff fddf 	bl	800df40 <_Balloc>
 800e382:	4605      	mov	r5, r0
 800e384:	b948      	cbnz	r0, 800e39a <__lshift+0x3e>
 800e386:	4602      	mov	r2, r0
 800e388:	4b28      	ldr	r3, [pc, #160]	@ (800e42c <__lshift+0xd0>)
 800e38a:	4829      	ldr	r0, [pc, #164]	@ (800e430 <__lshift+0xd4>)
 800e38c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e390:	f000 fb86 	bl	800eaa0 <__assert_func>
 800e394:	3101      	adds	r1, #1
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	e7ee      	b.n	800e378 <__lshift+0x1c>
 800e39a:	2300      	movs	r3, #0
 800e39c:	f100 0114 	add.w	r1, r0, #20
 800e3a0:	f100 0210 	add.w	r2, r0, #16
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	4553      	cmp	r3, sl
 800e3a8:	db33      	blt.n	800e412 <__lshift+0xb6>
 800e3aa:	6920      	ldr	r0, [r4, #16]
 800e3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3b0:	f104 0314 	add.w	r3, r4, #20
 800e3b4:	f019 091f 	ands.w	r9, r9, #31
 800e3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3c0:	d02b      	beq.n	800e41a <__lshift+0xbe>
 800e3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800e3c6:	468a      	mov	sl, r1
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800e3d0:	4310      	orrs	r0, r2
 800e3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800e3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3da:	459c      	cmp	ip, r3
 800e3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3e0:	d8f3      	bhi.n	800e3ca <__lshift+0x6e>
 800e3e2:	ebac 0304 	sub.w	r3, ip, r4
 800e3e6:	3b15      	subs	r3, #21
 800e3e8:	f023 0303 	bic.w	r3, r3, #3
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	f104 0015 	add.w	r0, r4, #21
 800e3f2:	4584      	cmp	ip, r0
 800e3f4:	bf38      	it	cc
 800e3f6:	2304      	movcc	r3, #4
 800e3f8:	50ca      	str	r2, [r1, r3]
 800e3fa:	b10a      	cbz	r2, 800e400 <__lshift+0xa4>
 800e3fc:	f108 0602 	add.w	r6, r8, #2
 800e400:	3e01      	subs	r6, #1
 800e402:	4638      	mov	r0, r7
 800e404:	612e      	str	r6, [r5, #16]
 800e406:	4621      	mov	r1, r4
 800e408:	f7ff fdda 	bl	800dfc0 <_Bfree>
 800e40c:	4628      	mov	r0, r5
 800e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e412:	f842 0f04 	str.w	r0, [r2, #4]!
 800e416:	3301      	adds	r3, #1
 800e418:	e7c5      	b.n	800e3a6 <__lshift+0x4a>
 800e41a:	3904      	subs	r1, #4
 800e41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e420:	f841 2f04 	str.w	r2, [r1, #4]!
 800e424:	459c      	cmp	ip, r3
 800e426:	d8f9      	bhi.n	800e41c <__lshift+0xc0>
 800e428:	e7ea      	b.n	800e400 <__lshift+0xa4>
 800e42a:	bf00      	nop
 800e42c:	080119b0 	.word	0x080119b0
 800e430:	080119c1 	.word	0x080119c1

0800e434 <__mcmp>:
 800e434:	690a      	ldr	r2, [r1, #16]
 800e436:	4603      	mov	r3, r0
 800e438:	6900      	ldr	r0, [r0, #16]
 800e43a:	1a80      	subs	r0, r0, r2
 800e43c:	b530      	push	{r4, r5, lr}
 800e43e:	d10e      	bne.n	800e45e <__mcmp+0x2a>
 800e440:	3314      	adds	r3, #20
 800e442:	3114      	adds	r1, #20
 800e444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e454:	4295      	cmp	r5, r2
 800e456:	d003      	beq.n	800e460 <__mcmp+0x2c>
 800e458:	d205      	bcs.n	800e466 <__mcmp+0x32>
 800e45a:	f04f 30ff 	mov.w	r0, #4294967295
 800e45e:	bd30      	pop	{r4, r5, pc}
 800e460:	42a3      	cmp	r3, r4
 800e462:	d3f3      	bcc.n	800e44c <__mcmp+0x18>
 800e464:	e7fb      	b.n	800e45e <__mcmp+0x2a>
 800e466:	2001      	movs	r0, #1
 800e468:	e7f9      	b.n	800e45e <__mcmp+0x2a>
	...

0800e46c <__mdiff>:
 800e46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e470:	4689      	mov	r9, r1
 800e472:	4606      	mov	r6, r0
 800e474:	4611      	mov	r1, r2
 800e476:	4648      	mov	r0, r9
 800e478:	4614      	mov	r4, r2
 800e47a:	f7ff ffdb 	bl	800e434 <__mcmp>
 800e47e:	1e05      	subs	r5, r0, #0
 800e480:	d112      	bne.n	800e4a8 <__mdiff+0x3c>
 800e482:	4629      	mov	r1, r5
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff fd5b 	bl	800df40 <_Balloc>
 800e48a:	4602      	mov	r2, r0
 800e48c:	b928      	cbnz	r0, 800e49a <__mdiff+0x2e>
 800e48e:	4b3f      	ldr	r3, [pc, #252]	@ (800e58c <__mdiff+0x120>)
 800e490:	f240 2137 	movw	r1, #567	@ 0x237
 800e494:	483e      	ldr	r0, [pc, #248]	@ (800e590 <__mdiff+0x124>)
 800e496:	f000 fb03 	bl	800eaa0 <__assert_func>
 800e49a:	2301      	movs	r3, #1
 800e49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	b003      	add	sp, #12
 800e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a8:	bfbc      	itt	lt
 800e4aa:	464b      	movlt	r3, r9
 800e4ac:	46a1      	movlt	r9, r4
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4b4:	bfba      	itte	lt
 800e4b6:	461c      	movlt	r4, r3
 800e4b8:	2501      	movlt	r5, #1
 800e4ba:	2500      	movge	r5, #0
 800e4bc:	f7ff fd40 	bl	800df40 <_Balloc>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	b918      	cbnz	r0, 800e4cc <__mdiff+0x60>
 800e4c4:	4b31      	ldr	r3, [pc, #196]	@ (800e58c <__mdiff+0x120>)
 800e4c6:	f240 2145 	movw	r1, #581	@ 0x245
 800e4ca:	e7e3      	b.n	800e494 <__mdiff+0x28>
 800e4cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4d0:	6926      	ldr	r6, [r4, #16]
 800e4d2:	60c5      	str	r5, [r0, #12]
 800e4d4:	f109 0310 	add.w	r3, r9, #16
 800e4d8:	f109 0514 	add.w	r5, r9, #20
 800e4dc:	f104 0e14 	add.w	lr, r4, #20
 800e4e0:	f100 0b14 	add.w	fp, r0, #20
 800e4e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	46d9      	mov	r9, fp
 800e4f0:	f04f 0c00 	mov.w	ip, #0
 800e4f4:	9b01      	ldr	r3, [sp, #4]
 800e4f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e4fe:	9301      	str	r3, [sp, #4]
 800e500:	fa1f f38a 	uxth.w	r3, sl
 800e504:	4619      	mov	r1, r3
 800e506:	b283      	uxth	r3, r0
 800e508:	1acb      	subs	r3, r1, r3
 800e50a:	0c00      	lsrs	r0, r0, #16
 800e50c:	4463      	add	r3, ip
 800e50e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e516:	b29b      	uxth	r3, r3
 800e518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e51c:	4576      	cmp	r6, lr
 800e51e:	f849 3b04 	str.w	r3, [r9], #4
 800e522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e526:	d8e5      	bhi.n	800e4f4 <__mdiff+0x88>
 800e528:	1b33      	subs	r3, r6, r4
 800e52a:	3b15      	subs	r3, #21
 800e52c:	f023 0303 	bic.w	r3, r3, #3
 800e530:	3415      	adds	r4, #21
 800e532:	3304      	adds	r3, #4
 800e534:	42a6      	cmp	r6, r4
 800e536:	bf38      	it	cc
 800e538:	2304      	movcc	r3, #4
 800e53a:	441d      	add	r5, r3
 800e53c:	445b      	add	r3, fp
 800e53e:	461e      	mov	r6, r3
 800e540:	462c      	mov	r4, r5
 800e542:	4544      	cmp	r4, r8
 800e544:	d30e      	bcc.n	800e564 <__mdiff+0xf8>
 800e546:	f108 0103 	add.w	r1, r8, #3
 800e54a:	1b49      	subs	r1, r1, r5
 800e54c:	f021 0103 	bic.w	r1, r1, #3
 800e550:	3d03      	subs	r5, #3
 800e552:	45a8      	cmp	r8, r5
 800e554:	bf38      	it	cc
 800e556:	2100      	movcc	r1, #0
 800e558:	440b      	add	r3, r1
 800e55a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e55e:	b191      	cbz	r1, 800e586 <__mdiff+0x11a>
 800e560:	6117      	str	r7, [r2, #16]
 800e562:	e79d      	b.n	800e4a0 <__mdiff+0x34>
 800e564:	f854 1b04 	ldr.w	r1, [r4], #4
 800e568:	46e6      	mov	lr, ip
 800e56a:	0c08      	lsrs	r0, r1, #16
 800e56c:	fa1c fc81 	uxtah	ip, ip, r1
 800e570:	4471      	add	r1, lr
 800e572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e576:	b289      	uxth	r1, r1
 800e578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e57c:	f846 1b04 	str.w	r1, [r6], #4
 800e580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e584:	e7dd      	b.n	800e542 <__mdiff+0xd6>
 800e586:	3f01      	subs	r7, #1
 800e588:	e7e7      	b.n	800e55a <__mdiff+0xee>
 800e58a:	bf00      	nop
 800e58c:	080119b0 	.word	0x080119b0
 800e590:	080119c1 	.word	0x080119c1

0800e594 <__d2b>:
 800e594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e598:	460f      	mov	r7, r1
 800e59a:	2101      	movs	r1, #1
 800e59c:	ec59 8b10 	vmov	r8, r9, d0
 800e5a0:	4616      	mov	r6, r2
 800e5a2:	f7ff fccd 	bl	800df40 <_Balloc>
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	b930      	cbnz	r0, 800e5b8 <__d2b+0x24>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	4b23      	ldr	r3, [pc, #140]	@ (800e63c <__d2b+0xa8>)
 800e5ae:	4824      	ldr	r0, [pc, #144]	@ (800e640 <__d2b+0xac>)
 800e5b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5b4:	f000 fa74 	bl	800eaa0 <__assert_func>
 800e5b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5c0:	b10d      	cbz	r5, 800e5c6 <__d2b+0x32>
 800e5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5c6:	9301      	str	r3, [sp, #4]
 800e5c8:	f1b8 0300 	subs.w	r3, r8, #0
 800e5cc:	d023      	beq.n	800e616 <__d2b+0x82>
 800e5ce:	4668      	mov	r0, sp
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	f7ff fd7c 	bl	800e0ce <__lo0bits>
 800e5d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5da:	b1d0      	cbz	r0, 800e612 <__d2b+0x7e>
 800e5dc:	f1c0 0320 	rsb	r3, r0, #32
 800e5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e4:	430b      	orrs	r3, r1
 800e5e6:	40c2      	lsrs	r2, r0
 800e5e8:	6163      	str	r3, [r4, #20]
 800e5ea:	9201      	str	r2, [sp, #4]
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	61a3      	str	r3, [r4, #24]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bf0c      	ite	eq
 800e5f4:	2201      	moveq	r2, #1
 800e5f6:	2202      	movne	r2, #2
 800e5f8:	6122      	str	r2, [r4, #16]
 800e5fa:	b1a5      	cbz	r5, 800e626 <__d2b+0x92>
 800e5fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e600:	4405      	add	r5, r0
 800e602:	603d      	str	r5, [r7, #0]
 800e604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e608:	6030      	str	r0, [r6, #0]
 800e60a:	4620      	mov	r0, r4
 800e60c:	b003      	add	sp, #12
 800e60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e612:	6161      	str	r1, [r4, #20]
 800e614:	e7ea      	b.n	800e5ec <__d2b+0x58>
 800e616:	a801      	add	r0, sp, #4
 800e618:	f7ff fd59 	bl	800e0ce <__lo0bits>
 800e61c:	9b01      	ldr	r3, [sp, #4]
 800e61e:	6163      	str	r3, [r4, #20]
 800e620:	3020      	adds	r0, #32
 800e622:	2201      	movs	r2, #1
 800e624:	e7e8      	b.n	800e5f8 <__d2b+0x64>
 800e626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e62a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e62e:	6038      	str	r0, [r7, #0]
 800e630:	6918      	ldr	r0, [r3, #16]
 800e632:	f7ff fd2d 	bl	800e090 <__hi0bits>
 800e636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e63a:	e7e5      	b.n	800e608 <__d2b+0x74>
 800e63c:	080119b0 	.word	0x080119b0
 800e640:	080119c1 	.word	0x080119c1

0800e644 <__ssputs_r>:
 800e644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	688e      	ldr	r6, [r1, #8]
 800e64a:	461f      	mov	r7, r3
 800e64c:	42be      	cmp	r6, r7
 800e64e:	680b      	ldr	r3, [r1, #0]
 800e650:	4682      	mov	sl, r0
 800e652:	460c      	mov	r4, r1
 800e654:	4690      	mov	r8, r2
 800e656:	d82d      	bhi.n	800e6b4 <__ssputs_r+0x70>
 800e658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e65c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e660:	d026      	beq.n	800e6b0 <__ssputs_r+0x6c>
 800e662:	6965      	ldr	r5, [r4, #20]
 800e664:	6909      	ldr	r1, [r1, #16]
 800e666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e66a:	eba3 0901 	sub.w	r9, r3, r1
 800e66e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e672:	1c7b      	adds	r3, r7, #1
 800e674:	444b      	add	r3, r9
 800e676:	106d      	asrs	r5, r5, #1
 800e678:	429d      	cmp	r5, r3
 800e67a:	bf38      	it	cc
 800e67c:	461d      	movcc	r5, r3
 800e67e:	0553      	lsls	r3, r2, #21
 800e680:	d527      	bpl.n	800e6d2 <__ssputs_r+0x8e>
 800e682:	4629      	mov	r1, r5
 800e684:	f7ff fbd0 	bl	800de28 <_malloc_r>
 800e688:	4606      	mov	r6, r0
 800e68a:	b360      	cbz	r0, 800e6e6 <__ssputs_r+0xa2>
 800e68c:	6921      	ldr	r1, [r4, #16]
 800e68e:	464a      	mov	r2, r9
 800e690:	f7fe fcf9 	bl	800d086 <memcpy>
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e69e:	81a3      	strh	r3, [r4, #12]
 800e6a0:	6126      	str	r6, [r4, #16]
 800e6a2:	6165      	str	r5, [r4, #20]
 800e6a4:	444e      	add	r6, r9
 800e6a6:	eba5 0509 	sub.w	r5, r5, r9
 800e6aa:	6026      	str	r6, [r4, #0]
 800e6ac:	60a5      	str	r5, [r4, #8]
 800e6ae:	463e      	mov	r6, r7
 800e6b0:	42be      	cmp	r6, r7
 800e6b2:	d900      	bls.n	800e6b6 <__ssputs_r+0x72>
 800e6b4:	463e      	mov	r6, r7
 800e6b6:	6820      	ldr	r0, [r4, #0]
 800e6b8:	4632      	mov	r2, r6
 800e6ba:	4641      	mov	r1, r8
 800e6bc:	f000 f9c6 	bl	800ea4c <memmove>
 800e6c0:	68a3      	ldr	r3, [r4, #8]
 800e6c2:	1b9b      	subs	r3, r3, r6
 800e6c4:	60a3      	str	r3, [r4, #8]
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	4433      	add	r3, r6
 800e6ca:	6023      	str	r3, [r4, #0]
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d2:	462a      	mov	r2, r5
 800e6d4:	f000 fa28 	bl	800eb28 <_realloc_r>
 800e6d8:	4606      	mov	r6, r0
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d1e0      	bne.n	800e6a0 <__ssputs_r+0x5c>
 800e6de:	6921      	ldr	r1, [r4, #16]
 800e6e0:	4650      	mov	r0, sl
 800e6e2:	f7ff fb2d 	bl	800dd40 <_free_r>
 800e6e6:	230c      	movs	r3, #12
 800e6e8:	f8ca 3000 	str.w	r3, [sl]
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	e7e9      	b.n	800e6ce <__ssputs_r+0x8a>
	...

0800e6fc <_svfiprintf_r>:
 800e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	4698      	mov	r8, r3
 800e702:	898b      	ldrh	r3, [r1, #12]
 800e704:	061b      	lsls	r3, r3, #24
 800e706:	b09d      	sub	sp, #116	@ 0x74
 800e708:	4607      	mov	r7, r0
 800e70a:	460d      	mov	r5, r1
 800e70c:	4614      	mov	r4, r2
 800e70e:	d510      	bpl.n	800e732 <_svfiprintf_r+0x36>
 800e710:	690b      	ldr	r3, [r1, #16]
 800e712:	b973      	cbnz	r3, 800e732 <_svfiprintf_r+0x36>
 800e714:	2140      	movs	r1, #64	@ 0x40
 800e716:	f7ff fb87 	bl	800de28 <_malloc_r>
 800e71a:	6028      	str	r0, [r5, #0]
 800e71c:	6128      	str	r0, [r5, #16]
 800e71e:	b930      	cbnz	r0, 800e72e <_svfiprintf_r+0x32>
 800e720:	230c      	movs	r3, #12
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b01d      	add	sp, #116	@ 0x74
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	2340      	movs	r3, #64	@ 0x40
 800e730:	616b      	str	r3, [r5, #20]
 800e732:	2300      	movs	r3, #0
 800e734:	9309      	str	r3, [sp, #36]	@ 0x24
 800e736:	2320      	movs	r3, #32
 800e738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e740:	2330      	movs	r3, #48	@ 0x30
 800e742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8e0 <_svfiprintf_r+0x1e4>
 800e746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e74a:	f04f 0901 	mov.w	r9, #1
 800e74e:	4623      	mov	r3, r4
 800e750:	469a      	mov	sl, r3
 800e752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e756:	b10a      	cbz	r2, 800e75c <_svfiprintf_r+0x60>
 800e758:	2a25      	cmp	r2, #37	@ 0x25
 800e75a:	d1f9      	bne.n	800e750 <_svfiprintf_r+0x54>
 800e75c:	ebba 0b04 	subs.w	fp, sl, r4
 800e760:	d00b      	beq.n	800e77a <_svfiprintf_r+0x7e>
 800e762:	465b      	mov	r3, fp
 800e764:	4622      	mov	r2, r4
 800e766:	4629      	mov	r1, r5
 800e768:	4638      	mov	r0, r7
 800e76a:	f7ff ff6b 	bl	800e644 <__ssputs_r>
 800e76e:	3001      	adds	r0, #1
 800e770:	f000 80a7 	beq.w	800e8c2 <_svfiprintf_r+0x1c6>
 800e774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e776:	445a      	add	r2, fp
 800e778:	9209      	str	r2, [sp, #36]	@ 0x24
 800e77a:	f89a 3000 	ldrb.w	r3, [sl]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 809f 	beq.w	800e8c2 <_svfiprintf_r+0x1c6>
 800e784:	2300      	movs	r3, #0
 800e786:	f04f 32ff 	mov.w	r2, #4294967295
 800e78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e78e:	f10a 0a01 	add.w	sl, sl, #1
 800e792:	9304      	str	r3, [sp, #16]
 800e794:	9307      	str	r3, [sp, #28]
 800e796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e79a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e79c:	4654      	mov	r4, sl
 800e79e:	2205      	movs	r2, #5
 800e7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7a4:	484e      	ldr	r0, [pc, #312]	@ (800e8e0 <_svfiprintf_r+0x1e4>)
 800e7a6:	f7f1 fd33 	bl	8000210 <memchr>
 800e7aa:	9a04      	ldr	r2, [sp, #16]
 800e7ac:	b9d8      	cbnz	r0, 800e7e6 <_svfiprintf_r+0xea>
 800e7ae:	06d0      	lsls	r0, r2, #27
 800e7b0:	bf44      	itt	mi
 800e7b2:	2320      	movmi	r3, #32
 800e7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7b8:	0711      	lsls	r1, r2, #28
 800e7ba:	bf44      	itt	mi
 800e7bc:	232b      	movmi	r3, #43	@ 0x2b
 800e7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7c8:	d015      	beq.n	800e7f6 <_svfiprintf_r+0xfa>
 800e7ca:	9a07      	ldr	r2, [sp, #28]
 800e7cc:	4654      	mov	r4, sl
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	f04f 0c0a 	mov.w	ip, #10
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7da:	3b30      	subs	r3, #48	@ 0x30
 800e7dc:	2b09      	cmp	r3, #9
 800e7de:	d94b      	bls.n	800e878 <_svfiprintf_r+0x17c>
 800e7e0:	b1b0      	cbz	r0, 800e810 <_svfiprintf_r+0x114>
 800e7e2:	9207      	str	r2, [sp, #28]
 800e7e4:	e014      	b.n	800e810 <_svfiprintf_r+0x114>
 800e7e6:	eba0 0308 	sub.w	r3, r0, r8
 800e7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	46a2      	mov	sl, r4
 800e7f4:	e7d2      	b.n	800e79c <_svfiprintf_r+0xa0>
 800e7f6:	9b03      	ldr	r3, [sp, #12]
 800e7f8:	1d19      	adds	r1, r3, #4
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	9103      	str	r1, [sp, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bfbb      	ittet	lt
 800e802:	425b      	neglt	r3, r3
 800e804:	f042 0202 	orrlt.w	r2, r2, #2
 800e808:	9307      	strge	r3, [sp, #28]
 800e80a:	9307      	strlt	r3, [sp, #28]
 800e80c:	bfb8      	it	lt
 800e80e:	9204      	strlt	r2, [sp, #16]
 800e810:	7823      	ldrb	r3, [r4, #0]
 800e812:	2b2e      	cmp	r3, #46	@ 0x2e
 800e814:	d10a      	bne.n	800e82c <_svfiprintf_r+0x130>
 800e816:	7863      	ldrb	r3, [r4, #1]
 800e818:	2b2a      	cmp	r3, #42	@ 0x2a
 800e81a:	d132      	bne.n	800e882 <_svfiprintf_r+0x186>
 800e81c:	9b03      	ldr	r3, [sp, #12]
 800e81e:	1d1a      	adds	r2, r3, #4
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	9203      	str	r2, [sp, #12]
 800e824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e828:	3402      	adds	r4, #2
 800e82a:	9305      	str	r3, [sp, #20]
 800e82c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8f0 <_svfiprintf_r+0x1f4>
 800e830:	7821      	ldrb	r1, [r4, #0]
 800e832:	2203      	movs	r2, #3
 800e834:	4650      	mov	r0, sl
 800e836:	f7f1 fceb 	bl	8000210 <memchr>
 800e83a:	b138      	cbz	r0, 800e84c <_svfiprintf_r+0x150>
 800e83c:	9b04      	ldr	r3, [sp, #16]
 800e83e:	eba0 000a 	sub.w	r0, r0, sl
 800e842:	2240      	movs	r2, #64	@ 0x40
 800e844:	4082      	lsls	r2, r0
 800e846:	4313      	orrs	r3, r2
 800e848:	3401      	adds	r4, #1
 800e84a:	9304      	str	r3, [sp, #16]
 800e84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e850:	4824      	ldr	r0, [pc, #144]	@ (800e8e4 <_svfiprintf_r+0x1e8>)
 800e852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e856:	2206      	movs	r2, #6
 800e858:	f7f1 fcda 	bl	8000210 <memchr>
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d036      	beq.n	800e8ce <_svfiprintf_r+0x1d2>
 800e860:	4b21      	ldr	r3, [pc, #132]	@ (800e8e8 <_svfiprintf_r+0x1ec>)
 800e862:	bb1b      	cbnz	r3, 800e8ac <_svfiprintf_r+0x1b0>
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	3307      	adds	r3, #7
 800e868:	f023 0307 	bic.w	r3, r3, #7
 800e86c:	3308      	adds	r3, #8
 800e86e:	9303      	str	r3, [sp, #12]
 800e870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e872:	4433      	add	r3, r6
 800e874:	9309      	str	r3, [sp, #36]	@ 0x24
 800e876:	e76a      	b.n	800e74e <_svfiprintf_r+0x52>
 800e878:	fb0c 3202 	mla	r2, ip, r2, r3
 800e87c:	460c      	mov	r4, r1
 800e87e:	2001      	movs	r0, #1
 800e880:	e7a8      	b.n	800e7d4 <_svfiprintf_r+0xd8>
 800e882:	2300      	movs	r3, #0
 800e884:	3401      	adds	r4, #1
 800e886:	9305      	str	r3, [sp, #20]
 800e888:	4619      	mov	r1, r3
 800e88a:	f04f 0c0a 	mov.w	ip, #10
 800e88e:	4620      	mov	r0, r4
 800e890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e894:	3a30      	subs	r2, #48	@ 0x30
 800e896:	2a09      	cmp	r2, #9
 800e898:	d903      	bls.n	800e8a2 <_svfiprintf_r+0x1a6>
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d0c6      	beq.n	800e82c <_svfiprintf_r+0x130>
 800e89e:	9105      	str	r1, [sp, #20]
 800e8a0:	e7c4      	b.n	800e82c <_svfiprintf_r+0x130>
 800e8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e7f0      	b.n	800e88e <_svfiprintf_r+0x192>
 800e8ac:	ab03      	add	r3, sp, #12
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ec <_svfiprintf_r+0x1f0>)
 800e8b4:	a904      	add	r1, sp, #16
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f7fd fe78 	bl	800c5ac <_printf_float>
 800e8bc:	1c42      	adds	r2, r0, #1
 800e8be:	4606      	mov	r6, r0
 800e8c0:	d1d6      	bne.n	800e870 <_svfiprintf_r+0x174>
 800e8c2:	89ab      	ldrh	r3, [r5, #12]
 800e8c4:	065b      	lsls	r3, r3, #25
 800e8c6:	f53f af2d 	bmi.w	800e724 <_svfiprintf_r+0x28>
 800e8ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8cc:	e72c      	b.n	800e728 <_svfiprintf_r+0x2c>
 800e8ce:	ab03      	add	r3, sp, #12
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	462a      	mov	r2, r5
 800e8d4:	4b05      	ldr	r3, [pc, #20]	@ (800e8ec <_svfiprintf_r+0x1f0>)
 800e8d6:	a904      	add	r1, sp, #16
 800e8d8:	4638      	mov	r0, r7
 800e8da:	f7fe f8ff 	bl	800cadc <_printf_i>
 800e8de:	e7ed      	b.n	800e8bc <_svfiprintf_r+0x1c0>
 800e8e0:	08011b18 	.word	0x08011b18
 800e8e4:	08011b22 	.word	0x08011b22
 800e8e8:	0800c5ad 	.word	0x0800c5ad
 800e8ec:	0800e645 	.word	0x0800e645
 800e8f0:	08011b1e 	.word	0x08011b1e

0800e8f4 <__sflush_r>:
 800e8f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fc:	0716      	lsls	r6, r2, #28
 800e8fe:	4605      	mov	r5, r0
 800e900:	460c      	mov	r4, r1
 800e902:	d454      	bmi.n	800e9ae <__sflush_r+0xba>
 800e904:	684b      	ldr	r3, [r1, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	dc02      	bgt.n	800e910 <__sflush_r+0x1c>
 800e90a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	dd48      	ble.n	800e9a2 <__sflush_r+0xae>
 800e910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e912:	2e00      	cmp	r6, #0
 800e914:	d045      	beq.n	800e9a2 <__sflush_r+0xae>
 800e916:	2300      	movs	r3, #0
 800e918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e91c:	682f      	ldr	r7, [r5, #0]
 800e91e:	6a21      	ldr	r1, [r4, #32]
 800e920:	602b      	str	r3, [r5, #0]
 800e922:	d030      	beq.n	800e986 <__sflush_r+0x92>
 800e924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	0759      	lsls	r1, r3, #29
 800e92a:	d505      	bpl.n	800e938 <__sflush_r+0x44>
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e932:	b10b      	cbz	r3, 800e938 <__sflush_r+0x44>
 800e934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e936:	1ad2      	subs	r2, r2, r3
 800e938:	2300      	movs	r3, #0
 800e93a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e93c:	6a21      	ldr	r1, [r4, #32]
 800e93e:	4628      	mov	r0, r5
 800e940:	47b0      	blx	r6
 800e942:	1c43      	adds	r3, r0, #1
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	d106      	bne.n	800e956 <__sflush_r+0x62>
 800e948:	6829      	ldr	r1, [r5, #0]
 800e94a:	291d      	cmp	r1, #29
 800e94c:	d82b      	bhi.n	800e9a6 <__sflush_r+0xb2>
 800e94e:	4a2a      	ldr	r2, [pc, #168]	@ (800e9f8 <__sflush_r+0x104>)
 800e950:	410a      	asrs	r2, r1
 800e952:	07d6      	lsls	r6, r2, #31
 800e954:	d427      	bmi.n	800e9a6 <__sflush_r+0xb2>
 800e956:	2200      	movs	r2, #0
 800e958:	6062      	str	r2, [r4, #4]
 800e95a:	04d9      	lsls	r1, r3, #19
 800e95c:	6922      	ldr	r2, [r4, #16]
 800e95e:	6022      	str	r2, [r4, #0]
 800e960:	d504      	bpl.n	800e96c <__sflush_r+0x78>
 800e962:	1c42      	adds	r2, r0, #1
 800e964:	d101      	bne.n	800e96a <__sflush_r+0x76>
 800e966:	682b      	ldr	r3, [r5, #0]
 800e968:	b903      	cbnz	r3, 800e96c <__sflush_r+0x78>
 800e96a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e96e:	602f      	str	r7, [r5, #0]
 800e970:	b1b9      	cbz	r1, 800e9a2 <__sflush_r+0xae>
 800e972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e976:	4299      	cmp	r1, r3
 800e978:	d002      	beq.n	800e980 <__sflush_r+0x8c>
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7ff f9e0 	bl	800dd40 <_free_r>
 800e980:	2300      	movs	r3, #0
 800e982:	6363      	str	r3, [r4, #52]	@ 0x34
 800e984:	e00d      	b.n	800e9a2 <__sflush_r+0xae>
 800e986:	2301      	movs	r3, #1
 800e988:	4628      	mov	r0, r5
 800e98a:	47b0      	blx	r6
 800e98c:	4602      	mov	r2, r0
 800e98e:	1c50      	adds	r0, r2, #1
 800e990:	d1c9      	bne.n	800e926 <__sflush_r+0x32>
 800e992:	682b      	ldr	r3, [r5, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d0c6      	beq.n	800e926 <__sflush_r+0x32>
 800e998:	2b1d      	cmp	r3, #29
 800e99a:	d001      	beq.n	800e9a0 <__sflush_r+0xac>
 800e99c:	2b16      	cmp	r3, #22
 800e99e:	d11e      	bne.n	800e9de <__sflush_r+0xea>
 800e9a0:	602f      	str	r7, [r5, #0]
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	e022      	b.n	800e9ec <__sflush_r+0xf8>
 800e9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9aa:	b21b      	sxth	r3, r3
 800e9ac:	e01b      	b.n	800e9e6 <__sflush_r+0xf2>
 800e9ae:	690f      	ldr	r7, [r1, #16]
 800e9b0:	2f00      	cmp	r7, #0
 800e9b2:	d0f6      	beq.n	800e9a2 <__sflush_r+0xae>
 800e9b4:	0793      	lsls	r3, r2, #30
 800e9b6:	680e      	ldr	r6, [r1, #0]
 800e9b8:	bf08      	it	eq
 800e9ba:	694b      	ldreq	r3, [r1, #20]
 800e9bc:	600f      	str	r7, [r1, #0]
 800e9be:	bf18      	it	ne
 800e9c0:	2300      	movne	r3, #0
 800e9c2:	eba6 0807 	sub.w	r8, r6, r7
 800e9c6:	608b      	str	r3, [r1, #8]
 800e9c8:	f1b8 0f00 	cmp.w	r8, #0
 800e9cc:	dde9      	ble.n	800e9a2 <__sflush_r+0xae>
 800e9ce:	6a21      	ldr	r1, [r4, #32]
 800e9d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9d2:	4643      	mov	r3, r8
 800e9d4:	463a      	mov	r2, r7
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	47b0      	blx	r6
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	dc08      	bgt.n	800e9f0 <__sflush_r+0xfc>
 800e9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9e6:	81a3      	strh	r3, [r4, #12]
 800e9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f0:	4407      	add	r7, r0
 800e9f2:	eba8 0800 	sub.w	r8, r8, r0
 800e9f6:	e7e7      	b.n	800e9c8 <__sflush_r+0xd4>
 800e9f8:	dfbffffe 	.word	0xdfbffffe

0800e9fc <_fflush_r>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	690b      	ldr	r3, [r1, #16]
 800ea00:	4605      	mov	r5, r0
 800ea02:	460c      	mov	r4, r1
 800ea04:	b913      	cbnz	r3, 800ea0c <_fflush_r+0x10>
 800ea06:	2500      	movs	r5, #0
 800ea08:	4628      	mov	r0, r5
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	b118      	cbz	r0, 800ea16 <_fflush_r+0x1a>
 800ea0e:	6a03      	ldr	r3, [r0, #32]
 800ea10:	b90b      	cbnz	r3, 800ea16 <_fflush_r+0x1a>
 800ea12:	f7fe fa0f 	bl	800ce34 <__sinit>
 800ea16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d0f3      	beq.n	800ea06 <_fflush_r+0xa>
 800ea1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea20:	07d0      	lsls	r0, r2, #31
 800ea22:	d404      	bmi.n	800ea2e <_fflush_r+0x32>
 800ea24:	0599      	lsls	r1, r3, #22
 800ea26:	d402      	bmi.n	800ea2e <_fflush_r+0x32>
 800ea28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea2a:	f7fe fb2a 	bl	800d082 <__retarget_lock_acquire_recursive>
 800ea2e:	4628      	mov	r0, r5
 800ea30:	4621      	mov	r1, r4
 800ea32:	f7ff ff5f 	bl	800e8f4 <__sflush_r>
 800ea36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea38:	07da      	lsls	r2, r3, #31
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	d4e4      	bmi.n	800ea08 <_fflush_r+0xc>
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	059b      	lsls	r3, r3, #22
 800ea42:	d4e1      	bmi.n	800ea08 <_fflush_r+0xc>
 800ea44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea46:	f7fe fb1d 	bl	800d084 <__retarget_lock_release_recursive>
 800ea4a:	e7dd      	b.n	800ea08 <_fflush_r+0xc>

0800ea4c <memmove>:
 800ea4c:	4288      	cmp	r0, r1
 800ea4e:	b510      	push	{r4, lr}
 800ea50:	eb01 0402 	add.w	r4, r1, r2
 800ea54:	d902      	bls.n	800ea5c <memmove+0x10>
 800ea56:	4284      	cmp	r4, r0
 800ea58:	4623      	mov	r3, r4
 800ea5a:	d807      	bhi.n	800ea6c <memmove+0x20>
 800ea5c:	1e43      	subs	r3, r0, #1
 800ea5e:	42a1      	cmp	r1, r4
 800ea60:	d008      	beq.n	800ea74 <memmove+0x28>
 800ea62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea6a:	e7f8      	b.n	800ea5e <memmove+0x12>
 800ea6c:	4402      	add	r2, r0
 800ea6e:	4601      	mov	r1, r0
 800ea70:	428a      	cmp	r2, r1
 800ea72:	d100      	bne.n	800ea76 <memmove+0x2a>
 800ea74:	bd10      	pop	{r4, pc}
 800ea76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea7e:	e7f7      	b.n	800ea70 <memmove+0x24>

0800ea80 <_sbrk_r>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4d06      	ldr	r5, [pc, #24]	@ (800ea9c <_sbrk_r+0x1c>)
 800ea84:	2300      	movs	r3, #0
 800ea86:	4604      	mov	r4, r0
 800ea88:	4608      	mov	r0, r1
 800ea8a:	602b      	str	r3, [r5, #0]
 800ea8c:	f7f8 fbe4 	bl	8007258 <_sbrk>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_sbrk_r+0x1a>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_sbrk_r+0x1a>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	200009ac 	.word	0x200009ac

0800eaa0 <__assert_func>:
 800eaa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaa2:	4614      	mov	r4, r2
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4b09      	ldr	r3, [pc, #36]	@ (800eacc <__assert_func+0x2c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4605      	mov	r5, r0
 800eaac:	68d8      	ldr	r0, [r3, #12]
 800eaae:	b954      	cbnz	r4, 800eac6 <__assert_func+0x26>
 800eab0:	4b07      	ldr	r3, [pc, #28]	@ (800ead0 <__assert_func+0x30>)
 800eab2:	461c      	mov	r4, r3
 800eab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eab8:	9100      	str	r1, [sp, #0]
 800eaba:	462b      	mov	r3, r5
 800eabc:	4905      	ldr	r1, [pc, #20]	@ (800ead4 <__assert_func+0x34>)
 800eabe:	f000 f86f 	bl	800eba0 <fiprintf>
 800eac2:	f000 f87f 	bl	800ebc4 <abort>
 800eac6:	4b04      	ldr	r3, [pc, #16]	@ (800ead8 <__assert_func+0x38>)
 800eac8:	e7f4      	b.n	800eab4 <__assert_func+0x14>
 800eaca:	bf00      	nop
 800eacc:	20000058 	.word	0x20000058
 800ead0:	08011b6e 	.word	0x08011b6e
 800ead4:	08011b40 	.word	0x08011b40
 800ead8:	08011b33 	.word	0x08011b33

0800eadc <_calloc_r>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	fba1 5402 	umull	r5, r4, r1, r2
 800eae2:	b93c      	cbnz	r4, 800eaf4 <_calloc_r+0x18>
 800eae4:	4629      	mov	r1, r5
 800eae6:	f7ff f99f 	bl	800de28 <_malloc_r>
 800eaea:	4606      	mov	r6, r0
 800eaec:	b928      	cbnz	r0, 800eafa <_calloc_r+0x1e>
 800eaee:	2600      	movs	r6, #0
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	220c      	movs	r2, #12
 800eaf6:	6002      	str	r2, [r0, #0]
 800eaf8:	e7f9      	b.n	800eaee <_calloc_r+0x12>
 800eafa:	462a      	mov	r2, r5
 800eafc:	4621      	mov	r1, r4
 800eafe:	f7fe fa42 	bl	800cf86 <memset>
 800eb02:	e7f5      	b.n	800eaf0 <_calloc_r+0x14>

0800eb04 <__ascii_mbtowc>:
 800eb04:	b082      	sub	sp, #8
 800eb06:	b901      	cbnz	r1, 800eb0a <__ascii_mbtowc+0x6>
 800eb08:	a901      	add	r1, sp, #4
 800eb0a:	b142      	cbz	r2, 800eb1e <__ascii_mbtowc+0x1a>
 800eb0c:	b14b      	cbz	r3, 800eb22 <__ascii_mbtowc+0x1e>
 800eb0e:	7813      	ldrb	r3, [r2, #0]
 800eb10:	600b      	str	r3, [r1, #0]
 800eb12:	7812      	ldrb	r2, [r2, #0]
 800eb14:	1e10      	subs	r0, r2, #0
 800eb16:	bf18      	it	ne
 800eb18:	2001      	movne	r0, #1
 800eb1a:	b002      	add	sp, #8
 800eb1c:	4770      	bx	lr
 800eb1e:	4610      	mov	r0, r2
 800eb20:	e7fb      	b.n	800eb1a <__ascii_mbtowc+0x16>
 800eb22:	f06f 0001 	mvn.w	r0, #1
 800eb26:	e7f8      	b.n	800eb1a <__ascii_mbtowc+0x16>

0800eb28 <_realloc_r>:
 800eb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2c:	4680      	mov	r8, r0
 800eb2e:	4615      	mov	r5, r2
 800eb30:	460c      	mov	r4, r1
 800eb32:	b921      	cbnz	r1, 800eb3e <_realloc_r+0x16>
 800eb34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb38:	4611      	mov	r1, r2
 800eb3a:	f7ff b975 	b.w	800de28 <_malloc_r>
 800eb3e:	b92a      	cbnz	r2, 800eb4c <_realloc_r+0x24>
 800eb40:	f7ff f8fe 	bl	800dd40 <_free_r>
 800eb44:	2400      	movs	r4, #0
 800eb46:	4620      	mov	r0, r4
 800eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4c:	f000 f841 	bl	800ebd2 <_malloc_usable_size_r>
 800eb50:	4285      	cmp	r5, r0
 800eb52:	4606      	mov	r6, r0
 800eb54:	d802      	bhi.n	800eb5c <_realloc_r+0x34>
 800eb56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb5a:	d8f4      	bhi.n	800eb46 <_realloc_r+0x1e>
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4640      	mov	r0, r8
 800eb60:	f7ff f962 	bl	800de28 <_malloc_r>
 800eb64:	4607      	mov	r7, r0
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d0ec      	beq.n	800eb44 <_realloc_r+0x1c>
 800eb6a:	42b5      	cmp	r5, r6
 800eb6c:	462a      	mov	r2, r5
 800eb6e:	4621      	mov	r1, r4
 800eb70:	bf28      	it	cs
 800eb72:	4632      	movcs	r2, r6
 800eb74:	f7fe fa87 	bl	800d086 <memcpy>
 800eb78:	4621      	mov	r1, r4
 800eb7a:	4640      	mov	r0, r8
 800eb7c:	f7ff f8e0 	bl	800dd40 <_free_r>
 800eb80:	463c      	mov	r4, r7
 800eb82:	e7e0      	b.n	800eb46 <_realloc_r+0x1e>

0800eb84 <__ascii_wctomb>:
 800eb84:	4603      	mov	r3, r0
 800eb86:	4608      	mov	r0, r1
 800eb88:	b141      	cbz	r1, 800eb9c <__ascii_wctomb+0x18>
 800eb8a:	2aff      	cmp	r2, #255	@ 0xff
 800eb8c:	d904      	bls.n	800eb98 <__ascii_wctomb+0x14>
 800eb8e:	228a      	movs	r2, #138	@ 0x8a
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	f04f 30ff 	mov.w	r0, #4294967295
 800eb96:	4770      	bx	lr
 800eb98:	700a      	strb	r2, [r1, #0]
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	4770      	bx	lr
	...

0800eba0 <fiprintf>:
 800eba0:	b40e      	push	{r1, r2, r3}
 800eba2:	b503      	push	{r0, r1, lr}
 800eba4:	4601      	mov	r1, r0
 800eba6:	ab03      	add	r3, sp, #12
 800eba8:	4805      	ldr	r0, [pc, #20]	@ (800ebc0 <fiprintf+0x20>)
 800ebaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebae:	6800      	ldr	r0, [r0, #0]
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	f000 f83f 	bl	800ec34 <_vfiprintf_r>
 800ebb6:	b002      	add	sp, #8
 800ebb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebbc:	b003      	add	sp, #12
 800ebbe:	4770      	bx	lr
 800ebc0:	20000058 	.word	0x20000058

0800ebc4 <abort>:
 800ebc4:	b508      	push	{r3, lr}
 800ebc6:	2006      	movs	r0, #6
 800ebc8:	f000 fa08 	bl	800efdc <raise>
 800ebcc:	2001      	movs	r0, #1
 800ebce:	f7f8 facb 	bl	8007168 <_exit>

0800ebd2 <_malloc_usable_size_r>:
 800ebd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebd6:	1f18      	subs	r0, r3, #4
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	bfbc      	itt	lt
 800ebdc:	580b      	ldrlt	r3, [r1, r0]
 800ebde:	18c0      	addlt	r0, r0, r3
 800ebe0:	4770      	bx	lr

0800ebe2 <__sfputc_r>:
 800ebe2:	6893      	ldr	r3, [r2, #8]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	b410      	push	{r4}
 800ebea:	6093      	str	r3, [r2, #8]
 800ebec:	da08      	bge.n	800ec00 <__sfputc_r+0x1e>
 800ebee:	6994      	ldr	r4, [r2, #24]
 800ebf0:	42a3      	cmp	r3, r4
 800ebf2:	db01      	blt.n	800ebf8 <__sfputc_r+0x16>
 800ebf4:	290a      	cmp	r1, #10
 800ebf6:	d103      	bne.n	800ec00 <__sfputc_r+0x1e>
 800ebf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebfc:	f000 b932 	b.w	800ee64 <__swbuf_r>
 800ec00:	6813      	ldr	r3, [r2, #0]
 800ec02:	1c58      	adds	r0, r3, #1
 800ec04:	6010      	str	r0, [r2, #0]
 800ec06:	7019      	strb	r1, [r3, #0]
 800ec08:	4608      	mov	r0, r1
 800ec0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <__sfputs_r>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	4614      	mov	r4, r2
 800ec18:	18d5      	adds	r5, r2, r3
 800ec1a:	42ac      	cmp	r4, r5
 800ec1c:	d101      	bne.n	800ec22 <__sfputs_r+0x12>
 800ec1e:	2000      	movs	r0, #0
 800ec20:	e007      	b.n	800ec32 <__sfputs_r+0x22>
 800ec22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec26:	463a      	mov	r2, r7
 800ec28:	4630      	mov	r0, r6
 800ec2a:	f7ff ffda 	bl	800ebe2 <__sfputc_r>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	d1f3      	bne.n	800ec1a <__sfputs_r+0xa>
 800ec32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec34 <_vfiprintf_r>:
 800ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec38:	460d      	mov	r5, r1
 800ec3a:	b09d      	sub	sp, #116	@ 0x74
 800ec3c:	4614      	mov	r4, r2
 800ec3e:	4698      	mov	r8, r3
 800ec40:	4606      	mov	r6, r0
 800ec42:	b118      	cbz	r0, 800ec4c <_vfiprintf_r+0x18>
 800ec44:	6a03      	ldr	r3, [r0, #32]
 800ec46:	b90b      	cbnz	r3, 800ec4c <_vfiprintf_r+0x18>
 800ec48:	f7fe f8f4 	bl	800ce34 <__sinit>
 800ec4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec4e:	07d9      	lsls	r1, r3, #31
 800ec50:	d405      	bmi.n	800ec5e <_vfiprintf_r+0x2a>
 800ec52:	89ab      	ldrh	r3, [r5, #12]
 800ec54:	059a      	lsls	r2, r3, #22
 800ec56:	d402      	bmi.n	800ec5e <_vfiprintf_r+0x2a>
 800ec58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec5a:	f7fe fa12 	bl	800d082 <__retarget_lock_acquire_recursive>
 800ec5e:	89ab      	ldrh	r3, [r5, #12]
 800ec60:	071b      	lsls	r3, r3, #28
 800ec62:	d501      	bpl.n	800ec68 <_vfiprintf_r+0x34>
 800ec64:	692b      	ldr	r3, [r5, #16]
 800ec66:	b99b      	cbnz	r3, 800ec90 <_vfiprintf_r+0x5c>
 800ec68:	4629      	mov	r1, r5
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f000 f938 	bl	800eee0 <__swsetup_r>
 800ec70:	b170      	cbz	r0, 800ec90 <_vfiprintf_r+0x5c>
 800ec72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec74:	07dc      	lsls	r4, r3, #31
 800ec76:	d504      	bpl.n	800ec82 <_vfiprintf_r+0x4e>
 800ec78:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7c:	b01d      	add	sp, #116	@ 0x74
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	89ab      	ldrh	r3, [r5, #12]
 800ec84:	0598      	lsls	r0, r3, #22
 800ec86:	d4f7      	bmi.n	800ec78 <_vfiprintf_r+0x44>
 800ec88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec8a:	f7fe f9fb 	bl	800d084 <__retarget_lock_release_recursive>
 800ec8e:	e7f3      	b.n	800ec78 <_vfiprintf_r+0x44>
 800ec90:	2300      	movs	r3, #0
 800ec92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec94:	2320      	movs	r3, #32
 800ec96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec9e:	2330      	movs	r3, #48	@ 0x30
 800eca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee50 <_vfiprintf_r+0x21c>
 800eca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eca8:	f04f 0901 	mov.w	r9, #1
 800ecac:	4623      	mov	r3, r4
 800ecae:	469a      	mov	sl, r3
 800ecb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecb4:	b10a      	cbz	r2, 800ecba <_vfiprintf_r+0x86>
 800ecb6:	2a25      	cmp	r2, #37	@ 0x25
 800ecb8:	d1f9      	bne.n	800ecae <_vfiprintf_r+0x7a>
 800ecba:	ebba 0b04 	subs.w	fp, sl, r4
 800ecbe:	d00b      	beq.n	800ecd8 <_vfiprintf_r+0xa4>
 800ecc0:	465b      	mov	r3, fp
 800ecc2:	4622      	mov	r2, r4
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	f7ff ffa2 	bl	800ec10 <__sfputs_r>
 800eccc:	3001      	adds	r0, #1
 800ecce:	f000 80a7 	beq.w	800ee20 <_vfiprintf_r+0x1ec>
 800ecd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecd4:	445a      	add	r2, fp
 800ecd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecd8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f000 809f 	beq.w	800ee20 <_vfiprintf_r+0x1ec>
 800ece2:	2300      	movs	r3, #0
 800ece4:	f04f 32ff 	mov.w	r2, #4294967295
 800ece8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecec:	f10a 0a01 	add.w	sl, sl, #1
 800ecf0:	9304      	str	r3, [sp, #16]
 800ecf2:	9307      	str	r3, [sp, #28]
 800ecf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecfa:	4654      	mov	r4, sl
 800ecfc:	2205      	movs	r2, #5
 800ecfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed02:	4853      	ldr	r0, [pc, #332]	@ (800ee50 <_vfiprintf_r+0x21c>)
 800ed04:	f7f1 fa84 	bl	8000210 <memchr>
 800ed08:	9a04      	ldr	r2, [sp, #16]
 800ed0a:	b9d8      	cbnz	r0, 800ed44 <_vfiprintf_r+0x110>
 800ed0c:	06d1      	lsls	r1, r2, #27
 800ed0e:	bf44      	itt	mi
 800ed10:	2320      	movmi	r3, #32
 800ed12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed16:	0713      	lsls	r3, r2, #28
 800ed18:	bf44      	itt	mi
 800ed1a:	232b      	movmi	r3, #43	@ 0x2b
 800ed1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed20:	f89a 3000 	ldrb.w	r3, [sl]
 800ed24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed26:	d015      	beq.n	800ed54 <_vfiprintf_r+0x120>
 800ed28:	9a07      	ldr	r2, [sp, #28]
 800ed2a:	4654      	mov	r4, sl
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	f04f 0c0a 	mov.w	ip, #10
 800ed32:	4621      	mov	r1, r4
 800ed34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed38:	3b30      	subs	r3, #48	@ 0x30
 800ed3a:	2b09      	cmp	r3, #9
 800ed3c:	d94b      	bls.n	800edd6 <_vfiprintf_r+0x1a2>
 800ed3e:	b1b0      	cbz	r0, 800ed6e <_vfiprintf_r+0x13a>
 800ed40:	9207      	str	r2, [sp, #28]
 800ed42:	e014      	b.n	800ed6e <_vfiprintf_r+0x13a>
 800ed44:	eba0 0308 	sub.w	r3, r0, r8
 800ed48:	fa09 f303 	lsl.w	r3, r9, r3
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	9304      	str	r3, [sp, #16]
 800ed50:	46a2      	mov	sl, r4
 800ed52:	e7d2      	b.n	800ecfa <_vfiprintf_r+0xc6>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	1d19      	adds	r1, r3, #4
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	9103      	str	r1, [sp, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bfbb      	ittet	lt
 800ed60:	425b      	neglt	r3, r3
 800ed62:	f042 0202 	orrlt.w	r2, r2, #2
 800ed66:	9307      	strge	r3, [sp, #28]
 800ed68:	9307      	strlt	r3, [sp, #28]
 800ed6a:	bfb8      	it	lt
 800ed6c:	9204      	strlt	r2, [sp, #16]
 800ed6e:	7823      	ldrb	r3, [r4, #0]
 800ed70:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed72:	d10a      	bne.n	800ed8a <_vfiprintf_r+0x156>
 800ed74:	7863      	ldrb	r3, [r4, #1]
 800ed76:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed78:	d132      	bne.n	800ede0 <_vfiprintf_r+0x1ac>
 800ed7a:	9b03      	ldr	r3, [sp, #12]
 800ed7c:	1d1a      	adds	r2, r3, #4
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	9203      	str	r2, [sp, #12]
 800ed82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed86:	3402      	adds	r4, #2
 800ed88:	9305      	str	r3, [sp, #20]
 800ed8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee60 <_vfiprintf_r+0x22c>
 800ed8e:	7821      	ldrb	r1, [r4, #0]
 800ed90:	2203      	movs	r2, #3
 800ed92:	4650      	mov	r0, sl
 800ed94:	f7f1 fa3c 	bl	8000210 <memchr>
 800ed98:	b138      	cbz	r0, 800edaa <_vfiprintf_r+0x176>
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	eba0 000a 	sub.w	r0, r0, sl
 800eda0:	2240      	movs	r2, #64	@ 0x40
 800eda2:	4082      	lsls	r2, r0
 800eda4:	4313      	orrs	r3, r2
 800eda6:	3401      	adds	r4, #1
 800eda8:	9304      	str	r3, [sp, #16]
 800edaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edae:	4829      	ldr	r0, [pc, #164]	@ (800ee54 <_vfiprintf_r+0x220>)
 800edb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edb4:	2206      	movs	r2, #6
 800edb6:	f7f1 fa2b 	bl	8000210 <memchr>
 800edba:	2800      	cmp	r0, #0
 800edbc:	d03f      	beq.n	800ee3e <_vfiprintf_r+0x20a>
 800edbe:	4b26      	ldr	r3, [pc, #152]	@ (800ee58 <_vfiprintf_r+0x224>)
 800edc0:	bb1b      	cbnz	r3, 800ee0a <_vfiprintf_r+0x1d6>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	3307      	adds	r3, #7
 800edc6:	f023 0307 	bic.w	r3, r3, #7
 800edca:	3308      	adds	r3, #8
 800edcc:	9303      	str	r3, [sp, #12]
 800edce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd0:	443b      	add	r3, r7
 800edd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800edd4:	e76a      	b.n	800ecac <_vfiprintf_r+0x78>
 800edd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800edda:	460c      	mov	r4, r1
 800eddc:	2001      	movs	r0, #1
 800edde:	e7a8      	b.n	800ed32 <_vfiprintf_r+0xfe>
 800ede0:	2300      	movs	r3, #0
 800ede2:	3401      	adds	r4, #1
 800ede4:	9305      	str	r3, [sp, #20]
 800ede6:	4619      	mov	r1, r3
 800ede8:	f04f 0c0a 	mov.w	ip, #10
 800edec:	4620      	mov	r0, r4
 800edee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edf2:	3a30      	subs	r2, #48	@ 0x30
 800edf4:	2a09      	cmp	r2, #9
 800edf6:	d903      	bls.n	800ee00 <_vfiprintf_r+0x1cc>
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d0c6      	beq.n	800ed8a <_vfiprintf_r+0x156>
 800edfc:	9105      	str	r1, [sp, #20]
 800edfe:	e7c4      	b.n	800ed8a <_vfiprintf_r+0x156>
 800ee00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee04:	4604      	mov	r4, r0
 800ee06:	2301      	movs	r3, #1
 800ee08:	e7f0      	b.n	800edec <_vfiprintf_r+0x1b8>
 800ee0a:	ab03      	add	r3, sp, #12
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	462a      	mov	r2, r5
 800ee10:	4b12      	ldr	r3, [pc, #72]	@ (800ee5c <_vfiprintf_r+0x228>)
 800ee12:	a904      	add	r1, sp, #16
 800ee14:	4630      	mov	r0, r6
 800ee16:	f7fd fbc9 	bl	800c5ac <_printf_float>
 800ee1a:	4607      	mov	r7, r0
 800ee1c:	1c78      	adds	r0, r7, #1
 800ee1e:	d1d6      	bne.n	800edce <_vfiprintf_r+0x19a>
 800ee20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee22:	07d9      	lsls	r1, r3, #31
 800ee24:	d405      	bmi.n	800ee32 <_vfiprintf_r+0x1fe>
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	059a      	lsls	r2, r3, #22
 800ee2a:	d402      	bmi.n	800ee32 <_vfiprintf_r+0x1fe>
 800ee2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee2e:	f7fe f929 	bl	800d084 <__retarget_lock_release_recursive>
 800ee32:	89ab      	ldrh	r3, [r5, #12]
 800ee34:	065b      	lsls	r3, r3, #25
 800ee36:	f53f af1f 	bmi.w	800ec78 <_vfiprintf_r+0x44>
 800ee3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee3c:	e71e      	b.n	800ec7c <_vfiprintf_r+0x48>
 800ee3e:	ab03      	add	r3, sp, #12
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	462a      	mov	r2, r5
 800ee44:	4b05      	ldr	r3, [pc, #20]	@ (800ee5c <_vfiprintf_r+0x228>)
 800ee46:	a904      	add	r1, sp, #16
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f7fd fe47 	bl	800cadc <_printf_i>
 800ee4e:	e7e4      	b.n	800ee1a <_vfiprintf_r+0x1e6>
 800ee50:	08011b18 	.word	0x08011b18
 800ee54:	08011b22 	.word	0x08011b22
 800ee58:	0800c5ad 	.word	0x0800c5ad
 800ee5c:	0800ec11 	.word	0x0800ec11
 800ee60:	08011b1e 	.word	0x08011b1e

0800ee64 <__swbuf_r>:
 800ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	4614      	mov	r4, r2
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	b118      	cbz	r0, 800ee76 <__swbuf_r+0x12>
 800ee6e:	6a03      	ldr	r3, [r0, #32]
 800ee70:	b90b      	cbnz	r3, 800ee76 <__swbuf_r+0x12>
 800ee72:	f7fd ffdf 	bl	800ce34 <__sinit>
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	60a3      	str	r3, [r4, #8]
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	071a      	lsls	r2, r3, #28
 800ee7e:	d501      	bpl.n	800ee84 <__swbuf_r+0x20>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	b943      	cbnz	r3, 800ee96 <__swbuf_r+0x32>
 800ee84:	4621      	mov	r1, r4
 800ee86:	4628      	mov	r0, r5
 800ee88:	f000 f82a 	bl	800eee0 <__swsetup_r>
 800ee8c:	b118      	cbz	r0, 800ee96 <__swbuf_r+0x32>
 800ee8e:	f04f 37ff 	mov.w	r7, #4294967295
 800ee92:	4638      	mov	r0, r7
 800ee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	6922      	ldr	r2, [r4, #16]
 800ee9a:	1a98      	subs	r0, r3, r2
 800ee9c:	6963      	ldr	r3, [r4, #20]
 800ee9e:	b2f6      	uxtb	r6, r6
 800eea0:	4283      	cmp	r3, r0
 800eea2:	4637      	mov	r7, r6
 800eea4:	dc05      	bgt.n	800eeb2 <__swbuf_r+0x4e>
 800eea6:	4621      	mov	r1, r4
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7ff fda7 	bl	800e9fc <_fflush_r>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d1ed      	bne.n	800ee8e <__swbuf_r+0x2a>
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	6823      	ldr	r3, [r4, #0]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	6022      	str	r2, [r4, #0]
 800eebe:	701e      	strb	r6, [r3, #0]
 800eec0:	6962      	ldr	r2, [r4, #20]
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d004      	beq.n	800eed2 <__swbuf_r+0x6e>
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	07db      	lsls	r3, r3, #31
 800eecc:	d5e1      	bpl.n	800ee92 <__swbuf_r+0x2e>
 800eece:	2e0a      	cmp	r6, #10
 800eed0:	d1df      	bne.n	800ee92 <__swbuf_r+0x2e>
 800eed2:	4621      	mov	r1, r4
 800eed4:	4628      	mov	r0, r5
 800eed6:	f7ff fd91 	bl	800e9fc <_fflush_r>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0d9      	beq.n	800ee92 <__swbuf_r+0x2e>
 800eede:	e7d6      	b.n	800ee8e <__swbuf_r+0x2a>

0800eee0 <__swsetup_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4b29      	ldr	r3, [pc, #164]	@ (800ef88 <__swsetup_r+0xa8>)
 800eee4:	4605      	mov	r5, r0
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	460c      	mov	r4, r1
 800eeea:	b118      	cbz	r0, 800eef4 <__swsetup_r+0x14>
 800eeec:	6a03      	ldr	r3, [r0, #32]
 800eeee:	b90b      	cbnz	r3, 800eef4 <__swsetup_r+0x14>
 800eef0:	f7fd ffa0 	bl	800ce34 <__sinit>
 800eef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef8:	0719      	lsls	r1, r3, #28
 800eefa:	d422      	bmi.n	800ef42 <__swsetup_r+0x62>
 800eefc:	06da      	lsls	r2, r3, #27
 800eefe:	d407      	bmi.n	800ef10 <__swsetup_r+0x30>
 800ef00:	2209      	movs	r2, #9
 800ef02:	602a      	str	r2, [r5, #0]
 800ef04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0e:	e033      	b.n	800ef78 <__swsetup_r+0x98>
 800ef10:	0758      	lsls	r0, r3, #29
 800ef12:	d512      	bpl.n	800ef3a <__swsetup_r+0x5a>
 800ef14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef16:	b141      	cbz	r1, 800ef2a <__swsetup_r+0x4a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__swsetup_r+0x46>
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7fe ff0d 	bl	800dd40 <_free_r>
 800ef26:	2300      	movs	r3, #0
 800ef28:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	2300      	movs	r3, #0
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f043 0308 	orr.w	r3, r3, #8
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	b94b      	cbnz	r3, 800ef5a <__swsetup_r+0x7a>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef50:	d003      	beq.n	800ef5a <__swsetup_r+0x7a>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 f883 	bl	800f060 <__smakebuf_r>
 800ef5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5e:	f013 0201 	ands.w	r2, r3, #1
 800ef62:	d00a      	beq.n	800ef7a <__swsetup_r+0x9a>
 800ef64:	2200      	movs	r2, #0
 800ef66:	60a2      	str	r2, [r4, #8]
 800ef68:	6962      	ldr	r2, [r4, #20]
 800ef6a:	4252      	negs	r2, r2
 800ef6c:	61a2      	str	r2, [r4, #24]
 800ef6e:	6922      	ldr	r2, [r4, #16]
 800ef70:	b942      	cbnz	r2, 800ef84 <__swsetup_r+0xa4>
 800ef72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef76:	d1c5      	bne.n	800ef04 <__swsetup_r+0x24>
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	0799      	lsls	r1, r3, #30
 800ef7c:	bf58      	it	pl
 800ef7e:	6962      	ldrpl	r2, [r4, #20]
 800ef80:	60a2      	str	r2, [r4, #8]
 800ef82:	e7f4      	b.n	800ef6e <__swsetup_r+0x8e>
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7f7      	b.n	800ef78 <__swsetup_r+0x98>
 800ef88:	20000058 	.word	0x20000058

0800ef8c <_raise_r>:
 800ef8c:	291f      	cmp	r1, #31
 800ef8e:	b538      	push	{r3, r4, r5, lr}
 800ef90:	4605      	mov	r5, r0
 800ef92:	460c      	mov	r4, r1
 800ef94:	d904      	bls.n	800efa0 <_raise_r+0x14>
 800ef96:	2316      	movs	r3, #22
 800ef98:	6003      	str	r3, [r0, #0]
 800ef9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef9e:	bd38      	pop	{r3, r4, r5, pc}
 800efa0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efa2:	b112      	cbz	r2, 800efaa <_raise_r+0x1e>
 800efa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efa8:	b94b      	cbnz	r3, 800efbe <_raise_r+0x32>
 800efaa:	4628      	mov	r0, r5
 800efac:	f000 f830 	bl	800f010 <_getpid_r>
 800efb0:	4622      	mov	r2, r4
 800efb2:	4601      	mov	r1, r0
 800efb4:	4628      	mov	r0, r5
 800efb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efba:	f000 b817 	b.w	800efec <_kill_r>
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d00a      	beq.n	800efd8 <_raise_r+0x4c>
 800efc2:	1c59      	adds	r1, r3, #1
 800efc4:	d103      	bne.n	800efce <_raise_r+0x42>
 800efc6:	2316      	movs	r3, #22
 800efc8:	6003      	str	r3, [r0, #0]
 800efca:	2001      	movs	r0, #1
 800efcc:	e7e7      	b.n	800ef9e <_raise_r+0x12>
 800efce:	2100      	movs	r1, #0
 800efd0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efd4:	4620      	mov	r0, r4
 800efd6:	4798      	blx	r3
 800efd8:	2000      	movs	r0, #0
 800efda:	e7e0      	b.n	800ef9e <_raise_r+0x12>

0800efdc <raise>:
 800efdc:	4b02      	ldr	r3, [pc, #8]	@ (800efe8 <raise+0xc>)
 800efde:	4601      	mov	r1, r0
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	f7ff bfd3 	b.w	800ef8c <_raise_r>
 800efe6:	bf00      	nop
 800efe8:	20000058 	.word	0x20000058

0800efec <_kill_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4d07      	ldr	r5, [pc, #28]	@ (800f00c <_kill_r+0x20>)
 800eff0:	2300      	movs	r3, #0
 800eff2:	4604      	mov	r4, r0
 800eff4:	4608      	mov	r0, r1
 800eff6:	4611      	mov	r1, r2
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	f7f8 f8a5 	bl	8007148 <_kill>
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	d102      	bne.n	800f008 <_kill_r+0x1c>
 800f002:	682b      	ldr	r3, [r5, #0]
 800f004:	b103      	cbz	r3, 800f008 <_kill_r+0x1c>
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	bd38      	pop	{r3, r4, r5, pc}
 800f00a:	bf00      	nop
 800f00c:	200009ac 	.word	0x200009ac

0800f010 <_getpid_r>:
 800f010:	f7f8 b892 	b.w	8007138 <_getpid>

0800f014 <__swhatbuf_r>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	460c      	mov	r4, r1
 800f018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f01c:	2900      	cmp	r1, #0
 800f01e:	b096      	sub	sp, #88	@ 0x58
 800f020:	4615      	mov	r5, r2
 800f022:	461e      	mov	r6, r3
 800f024:	da0d      	bge.n	800f042 <__swhatbuf_r+0x2e>
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f02c:	f04f 0100 	mov.w	r1, #0
 800f030:	bf14      	ite	ne
 800f032:	2340      	movne	r3, #64	@ 0x40
 800f034:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f038:	2000      	movs	r0, #0
 800f03a:	6031      	str	r1, [r6, #0]
 800f03c:	602b      	str	r3, [r5, #0]
 800f03e:	b016      	add	sp, #88	@ 0x58
 800f040:	bd70      	pop	{r4, r5, r6, pc}
 800f042:	466a      	mov	r2, sp
 800f044:	f000 f848 	bl	800f0d8 <_fstat_r>
 800f048:	2800      	cmp	r0, #0
 800f04a:	dbec      	blt.n	800f026 <__swhatbuf_r+0x12>
 800f04c:	9901      	ldr	r1, [sp, #4]
 800f04e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f052:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f056:	4259      	negs	r1, r3
 800f058:	4159      	adcs	r1, r3
 800f05a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f05e:	e7eb      	b.n	800f038 <__swhatbuf_r+0x24>

0800f060 <__smakebuf_r>:
 800f060:	898b      	ldrh	r3, [r1, #12]
 800f062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f064:	079d      	lsls	r5, r3, #30
 800f066:	4606      	mov	r6, r0
 800f068:	460c      	mov	r4, r1
 800f06a:	d507      	bpl.n	800f07c <__smakebuf_r+0x1c>
 800f06c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	6123      	str	r3, [r4, #16]
 800f074:	2301      	movs	r3, #1
 800f076:	6163      	str	r3, [r4, #20]
 800f078:	b003      	add	sp, #12
 800f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f07c:	ab01      	add	r3, sp, #4
 800f07e:	466a      	mov	r2, sp
 800f080:	f7ff ffc8 	bl	800f014 <__swhatbuf_r>
 800f084:	9f00      	ldr	r7, [sp, #0]
 800f086:	4605      	mov	r5, r0
 800f088:	4639      	mov	r1, r7
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7fe fecc 	bl	800de28 <_malloc_r>
 800f090:	b948      	cbnz	r0, 800f0a6 <__smakebuf_r+0x46>
 800f092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f096:	059a      	lsls	r2, r3, #22
 800f098:	d4ee      	bmi.n	800f078 <__smakebuf_r+0x18>
 800f09a:	f023 0303 	bic.w	r3, r3, #3
 800f09e:	f043 0302 	orr.w	r3, r3, #2
 800f0a2:	81a3      	strh	r3, [r4, #12]
 800f0a4:	e7e2      	b.n	800f06c <__smakebuf_r+0xc>
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	6020      	str	r0, [r4, #0]
 800f0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0ae:	81a3      	strh	r3, [r4, #12]
 800f0b0:	9b01      	ldr	r3, [sp, #4]
 800f0b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0b6:	b15b      	cbz	r3, 800f0d0 <__smakebuf_r+0x70>
 800f0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f000 f81d 	bl	800f0fc <_isatty_r>
 800f0c2:	b128      	cbz	r0, 800f0d0 <__smakebuf_r+0x70>
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	f023 0303 	bic.w	r3, r3, #3
 800f0ca:	f043 0301 	orr.w	r3, r3, #1
 800f0ce:	81a3      	strh	r3, [r4, #12]
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	431d      	orrs	r5, r3
 800f0d4:	81a5      	strh	r5, [r4, #12]
 800f0d6:	e7cf      	b.n	800f078 <__smakebuf_r+0x18>

0800f0d8 <_fstat_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d07      	ldr	r5, [pc, #28]	@ (800f0f8 <_fstat_r+0x20>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	602b      	str	r3, [r5, #0]
 800f0e6:	f7f8 f88f 	bl	8007208 <_fstat>
 800f0ea:	1c43      	adds	r3, r0, #1
 800f0ec:	d102      	bne.n	800f0f4 <_fstat_r+0x1c>
 800f0ee:	682b      	ldr	r3, [r5, #0]
 800f0f0:	b103      	cbz	r3, 800f0f4 <_fstat_r+0x1c>
 800f0f2:	6023      	str	r3, [r4, #0]
 800f0f4:	bd38      	pop	{r3, r4, r5, pc}
 800f0f6:	bf00      	nop
 800f0f8:	200009ac 	.word	0x200009ac

0800f0fc <_isatty_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d06      	ldr	r5, [pc, #24]	@ (800f118 <_isatty_r+0x1c>)
 800f100:	2300      	movs	r3, #0
 800f102:	4604      	mov	r4, r0
 800f104:	4608      	mov	r0, r1
 800f106:	602b      	str	r3, [r5, #0]
 800f108:	f7f8 f88e 	bl	8007228 <_isatty>
 800f10c:	1c43      	adds	r3, r0, #1
 800f10e:	d102      	bne.n	800f116 <_isatty_r+0x1a>
 800f110:	682b      	ldr	r3, [r5, #0]
 800f112:	b103      	cbz	r3, 800f116 <_isatty_r+0x1a>
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	bd38      	pop	{r3, r4, r5, pc}
 800f118:	200009ac 	.word	0x200009ac

0800f11c <pow>:
 800f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11e:	ed2d 8b02 	vpush	{d8}
 800f122:	eeb0 8a40 	vmov.f32	s16, s0
 800f126:	eef0 8a60 	vmov.f32	s17, s1
 800f12a:	ec55 4b11 	vmov	r4, r5, d1
 800f12e:	f000 fc77 	bl	800fa20 <__ieee754_pow>
 800f132:	4622      	mov	r2, r4
 800f134:	462b      	mov	r3, r5
 800f136:	4620      	mov	r0, r4
 800f138:	4629      	mov	r1, r5
 800f13a:	ec57 6b10 	vmov	r6, r7, d0
 800f13e:	f7f1 fd15 	bl	8000b6c <__aeabi_dcmpun>
 800f142:	2800      	cmp	r0, #0
 800f144:	d13b      	bne.n	800f1be <pow+0xa2>
 800f146:	ec51 0b18 	vmov	r0, r1, d8
 800f14a:	2200      	movs	r2, #0
 800f14c:	2300      	movs	r3, #0
 800f14e:	f7f1 fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 800f152:	b1b8      	cbz	r0, 800f184 <pow+0x68>
 800f154:	2200      	movs	r2, #0
 800f156:	2300      	movs	r3, #0
 800f158:	4620      	mov	r0, r4
 800f15a:	4629      	mov	r1, r5
 800f15c:	f7f1 fcd4 	bl	8000b08 <__aeabi_dcmpeq>
 800f160:	2800      	cmp	r0, #0
 800f162:	d146      	bne.n	800f1f2 <pow+0xd6>
 800f164:	ec45 4b10 	vmov	d0, r4, r5
 800f168:	f000 f949 	bl	800f3fe <finite>
 800f16c:	b338      	cbz	r0, 800f1be <pow+0xa2>
 800f16e:	2200      	movs	r2, #0
 800f170:	2300      	movs	r3, #0
 800f172:	4620      	mov	r0, r4
 800f174:	4629      	mov	r1, r5
 800f176:	f7f1 fcd1 	bl	8000b1c <__aeabi_dcmplt>
 800f17a:	b300      	cbz	r0, 800f1be <pow+0xa2>
 800f17c:	f7fd ff56 	bl	800d02c <__errno>
 800f180:	2322      	movs	r3, #34	@ 0x22
 800f182:	e01b      	b.n	800f1bc <pow+0xa0>
 800f184:	ec47 6b10 	vmov	d0, r6, r7
 800f188:	f000 f939 	bl	800f3fe <finite>
 800f18c:	b9e0      	cbnz	r0, 800f1c8 <pow+0xac>
 800f18e:	eeb0 0a48 	vmov.f32	s0, s16
 800f192:	eef0 0a68 	vmov.f32	s1, s17
 800f196:	f000 f932 	bl	800f3fe <finite>
 800f19a:	b1a8      	cbz	r0, 800f1c8 <pow+0xac>
 800f19c:	ec45 4b10 	vmov	d0, r4, r5
 800f1a0:	f000 f92d 	bl	800f3fe <finite>
 800f1a4:	b180      	cbz	r0, 800f1c8 <pow+0xac>
 800f1a6:	4632      	mov	r2, r6
 800f1a8:	463b      	mov	r3, r7
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	f7f1 fcdd 	bl	8000b6c <__aeabi_dcmpun>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d0e2      	beq.n	800f17c <pow+0x60>
 800f1b6:	f7fd ff39 	bl	800d02c <__errno>
 800f1ba:	2321      	movs	r3, #33	@ 0x21
 800f1bc:	6003      	str	r3, [r0, #0]
 800f1be:	ecbd 8b02 	vpop	{d8}
 800f1c2:	ec47 6b10 	vmov	d0, r6, r7
 800f1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	f7f1 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d0f2      	beq.n	800f1be <pow+0xa2>
 800f1d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f1dc:	eef0 0a68 	vmov.f32	s1, s17
 800f1e0:	f000 f90d 	bl	800f3fe <finite>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d0ea      	beq.n	800f1be <pow+0xa2>
 800f1e8:	ec45 4b10 	vmov	d0, r4, r5
 800f1ec:	f000 f907 	bl	800f3fe <finite>
 800f1f0:	e7c3      	b.n	800f17a <pow+0x5e>
 800f1f2:	4f01      	ldr	r7, [pc, #4]	@ (800f1f8 <pow+0xdc>)
 800f1f4:	2600      	movs	r6, #0
 800f1f6:	e7e2      	b.n	800f1be <pow+0xa2>
 800f1f8:	3ff00000 	.word	0x3ff00000

0800f1fc <sqrt>:
 800f1fc:	b538      	push	{r3, r4, r5, lr}
 800f1fe:	ed2d 8b02 	vpush	{d8}
 800f202:	ec55 4b10 	vmov	r4, r5, d0
 800f206:	f000 f961 	bl	800f4cc <__ieee754_sqrt>
 800f20a:	4622      	mov	r2, r4
 800f20c:	462b      	mov	r3, r5
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	eeb0 8a40 	vmov.f32	s16, s0
 800f216:	eef0 8a60 	vmov.f32	s17, s1
 800f21a:	f7f1 fca7 	bl	8000b6c <__aeabi_dcmpun>
 800f21e:	b990      	cbnz	r0, 800f246 <sqrt+0x4a>
 800f220:	2200      	movs	r2, #0
 800f222:	2300      	movs	r3, #0
 800f224:	4620      	mov	r0, r4
 800f226:	4629      	mov	r1, r5
 800f228:	f7f1 fc78 	bl	8000b1c <__aeabi_dcmplt>
 800f22c:	b158      	cbz	r0, 800f246 <sqrt+0x4a>
 800f22e:	f7fd fefd 	bl	800d02c <__errno>
 800f232:	2321      	movs	r3, #33	@ 0x21
 800f234:	6003      	str	r3, [r0, #0]
 800f236:	2200      	movs	r2, #0
 800f238:	2300      	movs	r3, #0
 800f23a:	4610      	mov	r0, r2
 800f23c:	4619      	mov	r1, r3
 800f23e:	f7f1 fb25 	bl	800088c <__aeabi_ddiv>
 800f242:	ec41 0b18 	vmov	d8, r0, r1
 800f246:	eeb0 0a48 	vmov.f32	s0, s16
 800f24a:	eef0 0a68 	vmov.f32	s1, s17
 800f24e:	ecbd 8b02 	vpop	{d8}
 800f252:	bd38      	pop	{r3, r4, r5, pc}
 800f254:	0000      	movs	r0, r0
	...

0800f258 <cos>:
 800f258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f25a:	ec53 2b10 	vmov	r2, r3, d0
 800f25e:	4826      	ldr	r0, [pc, #152]	@ (800f2f8 <cos+0xa0>)
 800f260:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f264:	4281      	cmp	r1, r0
 800f266:	d806      	bhi.n	800f276 <cos+0x1e>
 800f268:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f2f0 <cos+0x98>
 800f26c:	b005      	add	sp, #20
 800f26e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f272:	f000 ba51 	b.w	800f718 <__kernel_cos>
 800f276:	4821      	ldr	r0, [pc, #132]	@ (800f2fc <cos+0xa4>)
 800f278:	4281      	cmp	r1, r0
 800f27a:	d908      	bls.n	800f28e <cos+0x36>
 800f27c:	4610      	mov	r0, r2
 800f27e:	4619      	mov	r1, r3
 800f280:	f7f1 f822 	bl	80002c8 <__aeabi_dsub>
 800f284:	ec41 0b10 	vmov	d0, r0, r1
 800f288:	b005      	add	sp, #20
 800f28a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f28e:	4668      	mov	r0, sp
 800f290:	f001 f90a 	bl	80104a8 <__ieee754_rem_pio2>
 800f294:	f000 0003 	and.w	r0, r0, #3
 800f298:	2801      	cmp	r0, #1
 800f29a:	d00b      	beq.n	800f2b4 <cos+0x5c>
 800f29c:	2802      	cmp	r0, #2
 800f29e:	d015      	beq.n	800f2cc <cos+0x74>
 800f2a0:	b9d8      	cbnz	r0, 800f2da <cos+0x82>
 800f2a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2a6:	ed9d 0b00 	vldr	d0, [sp]
 800f2aa:	f000 fa35 	bl	800f718 <__kernel_cos>
 800f2ae:	ec51 0b10 	vmov	r0, r1, d0
 800f2b2:	e7e7      	b.n	800f284 <cos+0x2c>
 800f2b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2b8:	ed9d 0b00 	vldr	d0, [sp]
 800f2bc:	f000 faf4 	bl	800f8a8 <__kernel_sin>
 800f2c0:	ec53 2b10 	vmov	r2, r3, d0
 800f2c4:	4610      	mov	r0, r2
 800f2c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f2ca:	e7db      	b.n	800f284 <cos+0x2c>
 800f2cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2d0:	ed9d 0b00 	vldr	d0, [sp]
 800f2d4:	f000 fa20 	bl	800f718 <__kernel_cos>
 800f2d8:	e7f2      	b.n	800f2c0 <cos+0x68>
 800f2da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f2de:	ed9d 0b00 	vldr	d0, [sp]
 800f2e2:	2001      	movs	r0, #1
 800f2e4:	f000 fae0 	bl	800f8a8 <__kernel_sin>
 800f2e8:	e7e1      	b.n	800f2ae <cos+0x56>
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w
	...
 800f2f8:	3fe921fb 	.word	0x3fe921fb
 800f2fc:	7fefffff 	.word	0x7fefffff

0800f300 <acosf>:
 800f300:	b508      	push	{r3, lr}
 800f302:	ed2d 8b02 	vpush	{d8}
 800f306:	eeb0 8a40 	vmov.f32	s16, s0
 800f30a:	f001 fad1 	bl	80108b0 <__ieee754_acosf>
 800f30e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f316:	eef0 8a40 	vmov.f32	s17, s0
 800f31a:	d615      	bvs.n	800f348 <acosf+0x48>
 800f31c:	eeb0 0a48 	vmov.f32	s0, s16
 800f320:	f000 f866 	bl	800f3f0 <fabsf>
 800f324:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f328:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f330:	dd0a      	ble.n	800f348 <acosf+0x48>
 800f332:	f7fd fe7b 	bl	800d02c <__errno>
 800f336:	ecbd 8b02 	vpop	{d8}
 800f33a:	2321      	movs	r3, #33	@ 0x21
 800f33c:	6003      	str	r3, [r0, #0]
 800f33e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f342:	4804      	ldr	r0, [pc, #16]	@ (800f354 <acosf+0x54>)
 800f344:	f000 b866 	b.w	800f414 <nanf>
 800f348:	eeb0 0a68 	vmov.f32	s0, s17
 800f34c:	ecbd 8b02 	vpop	{d8}
 800f350:	bd08      	pop	{r3, pc}
 800f352:	bf00      	nop
 800f354:	08011b6e 	.word	0x08011b6e

0800f358 <asinf>:
 800f358:	b508      	push	{r3, lr}
 800f35a:	ed2d 8b02 	vpush	{d8}
 800f35e:	eeb0 8a40 	vmov.f32	s16, s0
 800f362:	f001 fb9d 	bl	8010aa0 <__ieee754_asinf>
 800f366:	eeb4 8a48 	vcmp.f32	s16, s16
 800f36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36e:	eef0 8a40 	vmov.f32	s17, s0
 800f372:	d615      	bvs.n	800f3a0 <asinf+0x48>
 800f374:	eeb0 0a48 	vmov.f32	s0, s16
 800f378:	f000 f83a 	bl	800f3f0 <fabsf>
 800f37c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f380:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f388:	dd0a      	ble.n	800f3a0 <asinf+0x48>
 800f38a:	f7fd fe4f 	bl	800d02c <__errno>
 800f38e:	ecbd 8b02 	vpop	{d8}
 800f392:	2321      	movs	r3, #33	@ 0x21
 800f394:	6003      	str	r3, [r0, #0]
 800f396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f39a:	4804      	ldr	r0, [pc, #16]	@ (800f3ac <asinf+0x54>)
 800f39c:	f000 b83a 	b.w	800f414 <nanf>
 800f3a0:	eeb0 0a68 	vmov.f32	s0, s17
 800f3a4:	ecbd 8b02 	vpop	{d8}
 800f3a8:	bd08      	pop	{r3, pc}
 800f3aa:	bf00      	nop
 800f3ac:	08011b6e 	.word	0x08011b6e

0800f3b0 <atan2f>:
 800f3b0:	f001 bc5c 	b.w	8010c6c <__ieee754_atan2f>

0800f3b4 <sqrtf>:
 800f3b4:	b508      	push	{r3, lr}
 800f3b6:	ed2d 8b02 	vpush	{d8}
 800f3ba:	eeb0 8a40 	vmov.f32	s16, s0
 800f3be:	f000 f95f 	bl	800f680 <__ieee754_sqrtf>
 800f3c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ca:	d60c      	bvs.n	800f3e6 <sqrtf+0x32>
 800f3cc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f3ec <sqrtf+0x38>
 800f3d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d8:	d505      	bpl.n	800f3e6 <sqrtf+0x32>
 800f3da:	f7fd fe27 	bl	800d02c <__errno>
 800f3de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f3e2:	2321      	movs	r3, #33	@ 0x21
 800f3e4:	6003      	str	r3, [r0, #0]
 800f3e6:	ecbd 8b02 	vpop	{d8}
 800f3ea:	bd08      	pop	{r3, pc}
 800f3ec:	00000000 	.word	0x00000000

0800f3f0 <fabsf>:
 800f3f0:	ee10 3a10 	vmov	r3, s0
 800f3f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f3f8:	ee00 3a10 	vmov	s0, r3
 800f3fc:	4770      	bx	lr

0800f3fe <finite>:
 800f3fe:	b082      	sub	sp, #8
 800f400:	ed8d 0b00 	vstr	d0, [sp]
 800f404:	9801      	ldr	r0, [sp, #4]
 800f406:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f40a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f40e:	0fc0      	lsrs	r0, r0, #31
 800f410:	b002      	add	sp, #8
 800f412:	4770      	bx	lr

0800f414 <nanf>:
 800f414:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f41c <nanf+0x8>
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	7fc00000 	.word	0x7fc00000

0800f420 <fmaxf>:
 800f420:	b508      	push	{r3, lr}
 800f422:	ed2d 8b02 	vpush	{d8}
 800f426:	eeb0 8a40 	vmov.f32	s16, s0
 800f42a:	eef0 8a60 	vmov.f32	s17, s1
 800f42e:	f000 f831 	bl	800f494 <__fpclassifyf>
 800f432:	b930      	cbnz	r0, 800f442 <fmaxf+0x22>
 800f434:	eeb0 8a68 	vmov.f32	s16, s17
 800f438:	eeb0 0a48 	vmov.f32	s0, s16
 800f43c:	ecbd 8b02 	vpop	{d8}
 800f440:	bd08      	pop	{r3, pc}
 800f442:	eeb0 0a68 	vmov.f32	s0, s17
 800f446:	f000 f825 	bl	800f494 <__fpclassifyf>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d0f4      	beq.n	800f438 <fmaxf+0x18>
 800f44e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	dded      	ble.n	800f434 <fmaxf+0x14>
 800f458:	e7ee      	b.n	800f438 <fmaxf+0x18>

0800f45a <fminf>:
 800f45a:	b508      	push	{r3, lr}
 800f45c:	ed2d 8b02 	vpush	{d8}
 800f460:	eeb0 8a40 	vmov.f32	s16, s0
 800f464:	eef0 8a60 	vmov.f32	s17, s1
 800f468:	f000 f814 	bl	800f494 <__fpclassifyf>
 800f46c:	b930      	cbnz	r0, 800f47c <fminf+0x22>
 800f46e:	eeb0 8a68 	vmov.f32	s16, s17
 800f472:	eeb0 0a48 	vmov.f32	s0, s16
 800f476:	ecbd 8b02 	vpop	{d8}
 800f47a:	bd08      	pop	{r3, pc}
 800f47c:	eeb0 0a68 	vmov.f32	s0, s17
 800f480:	f000 f808 	bl	800f494 <__fpclassifyf>
 800f484:	2800      	cmp	r0, #0
 800f486:	d0f4      	beq.n	800f472 <fminf+0x18>
 800f488:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f490:	d5ed      	bpl.n	800f46e <fminf+0x14>
 800f492:	e7ee      	b.n	800f472 <fminf+0x18>

0800f494 <__fpclassifyf>:
 800f494:	ee10 3a10 	vmov	r3, s0
 800f498:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f49c:	d00d      	beq.n	800f4ba <__fpclassifyf+0x26>
 800f49e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f4a2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f4a6:	d30a      	bcc.n	800f4be <__fpclassifyf+0x2a>
 800f4a8:	4b07      	ldr	r3, [pc, #28]	@ (800f4c8 <__fpclassifyf+0x34>)
 800f4aa:	1e42      	subs	r2, r0, #1
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d908      	bls.n	800f4c2 <__fpclassifyf+0x2e>
 800f4b0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f4b4:	4258      	negs	r0, r3
 800f4b6:	4158      	adcs	r0, r3
 800f4b8:	4770      	bx	lr
 800f4ba:	2002      	movs	r0, #2
 800f4bc:	4770      	bx	lr
 800f4be:	2004      	movs	r0, #4
 800f4c0:	4770      	bx	lr
 800f4c2:	2003      	movs	r0, #3
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	007ffffe 	.word	0x007ffffe

0800f4cc <__ieee754_sqrt>:
 800f4cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	4a68      	ldr	r2, [pc, #416]	@ (800f674 <__ieee754_sqrt+0x1a8>)
 800f4d2:	ec55 4b10 	vmov	r4, r5, d0
 800f4d6:	43aa      	bics	r2, r5
 800f4d8:	462b      	mov	r3, r5
 800f4da:	4621      	mov	r1, r4
 800f4dc:	d110      	bne.n	800f500 <__ieee754_sqrt+0x34>
 800f4de:	4622      	mov	r2, r4
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	f7f1 f8a8 	bl	8000638 <__aeabi_dmul>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	f7f0 feec 	bl	80002cc <__adddf3>
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	460d      	mov	r5, r1
 800f4f8:	ec45 4b10 	vmov	d0, r4, r5
 800f4fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f500:	2d00      	cmp	r5, #0
 800f502:	dc0e      	bgt.n	800f522 <__ieee754_sqrt+0x56>
 800f504:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f508:	4322      	orrs	r2, r4
 800f50a:	d0f5      	beq.n	800f4f8 <__ieee754_sqrt+0x2c>
 800f50c:	b19d      	cbz	r5, 800f536 <__ieee754_sqrt+0x6a>
 800f50e:	4622      	mov	r2, r4
 800f510:	4620      	mov	r0, r4
 800f512:	4629      	mov	r1, r5
 800f514:	f7f0 fed8 	bl	80002c8 <__aeabi_dsub>
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	f7f1 f9b6 	bl	800088c <__aeabi_ddiv>
 800f520:	e7e8      	b.n	800f4f4 <__ieee754_sqrt+0x28>
 800f522:	152a      	asrs	r2, r5, #20
 800f524:	d115      	bne.n	800f552 <__ieee754_sqrt+0x86>
 800f526:	2000      	movs	r0, #0
 800f528:	e009      	b.n	800f53e <__ieee754_sqrt+0x72>
 800f52a:	0acb      	lsrs	r3, r1, #11
 800f52c:	3a15      	subs	r2, #21
 800f52e:	0549      	lsls	r1, r1, #21
 800f530:	2b00      	cmp	r3, #0
 800f532:	d0fa      	beq.n	800f52a <__ieee754_sqrt+0x5e>
 800f534:	e7f7      	b.n	800f526 <__ieee754_sqrt+0x5a>
 800f536:	462a      	mov	r2, r5
 800f538:	e7fa      	b.n	800f530 <__ieee754_sqrt+0x64>
 800f53a:	005b      	lsls	r3, r3, #1
 800f53c:	3001      	adds	r0, #1
 800f53e:	02dc      	lsls	r4, r3, #11
 800f540:	d5fb      	bpl.n	800f53a <__ieee754_sqrt+0x6e>
 800f542:	1e44      	subs	r4, r0, #1
 800f544:	1b12      	subs	r2, r2, r4
 800f546:	f1c0 0420 	rsb	r4, r0, #32
 800f54a:	fa21 f404 	lsr.w	r4, r1, r4
 800f54e:	4323      	orrs	r3, r4
 800f550:	4081      	lsls	r1, r0
 800f552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f556:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f55a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f55e:	07d2      	lsls	r2, r2, #31
 800f560:	bf5c      	itt	pl
 800f562:	005b      	lslpl	r3, r3, #1
 800f564:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f568:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f56c:	bf58      	it	pl
 800f56e:	0049      	lslpl	r1, r1, #1
 800f570:	2600      	movs	r6, #0
 800f572:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f576:	106d      	asrs	r5, r5, #1
 800f578:	0049      	lsls	r1, r1, #1
 800f57a:	2016      	movs	r0, #22
 800f57c:	4632      	mov	r2, r6
 800f57e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f582:	1917      	adds	r7, r2, r4
 800f584:	429f      	cmp	r7, r3
 800f586:	bfde      	ittt	le
 800f588:	193a      	addle	r2, r7, r4
 800f58a:	1bdb      	suble	r3, r3, r7
 800f58c:	1936      	addle	r6, r6, r4
 800f58e:	0fcf      	lsrs	r7, r1, #31
 800f590:	3801      	subs	r0, #1
 800f592:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f596:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f59a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f59e:	d1f0      	bne.n	800f582 <__ieee754_sqrt+0xb6>
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	2720      	movs	r7, #32
 800f5a4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	eb00 0e0c 	add.w	lr, r0, ip
 800f5ae:	db02      	blt.n	800f5b6 <__ieee754_sqrt+0xea>
 800f5b0:	d113      	bne.n	800f5da <__ieee754_sqrt+0x10e>
 800f5b2:	458e      	cmp	lr, r1
 800f5b4:	d811      	bhi.n	800f5da <__ieee754_sqrt+0x10e>
 800f5b6:	f1be 0f00 	cmp.w	lr, #0
 800f5ba:	eb0e 000c 	add.w	r0, lr, ip
 800f5be:	da42      	bge.n	800f646 <__ieee754_sqrt+0x17a>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	db40      	blt.n	800f646 <__ieee754_sqrt+0x17a>
 800f5c4:	f102 0801 	add.w	r8, r2, #1
 800f5c8:	1a9b      	subs	r3, r3, r2
 800f5ca:	458e      	cmp	lr, r1
 800f5cc:	bf88      	it	hi
 800f5ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f5d2:	eba1 010e 	sub.w	r1, r1, lr
 800f5d6:	4464      	add	r4, ip
 800f5d8:	4642      	mov	r2, r8
 800f5da:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f5de:	3f01      	subs	r7, #1
 800f5e0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f5e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f5e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f5ec:	d1dc      	bne.n	800f5a8 <__ieee754_sqrt+0xdc>
 800f5ee:	4319      	orrs	r1, r3
 800f5f0:	d01b      	beq.n	800f62a <__ieee754_sqrt+0x15e>
 800f5f2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f678 <__ieee754_sqrt+0x1ac>
 800f5f6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f67c <__ieee754_sqrt+0x1b0>
 800f5fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800f5fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800f602:	f7f0 fe61 	bl	80002c8 <__aeabi_dsub>
 800f606:	e9da 8900 	ldrd	r8, r9, [sl]
 800f60a:	4602      	mov	r2, r0
 800f60c:	460b      	mov	r3, r1
 800f60e:	4640      	mov	r0, r8
 800f610:	4649      	mov	r1, r9
 800f612:	f7f1 fa8d 	bl	8000b30 <__aeabi_dcmple>
 800f616:	b140      	cbz	r0, 800f62a <__ieee754_sqrt+0x15e>
 800f618:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f61c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f620:	e9db 2300 	ldrd	r2, r3, [fp]
 800f624:	d111      	bne.n	800f64a <__ieee754_sqrt+0x17e>
 800f626:	3601      	adds	r6, #1
 800f628:	463c      	mov	r4, r7
 800f62a:	1072      	asrs	r2, r6, #1
 800f62c:	0863      	lsrs	r3, r4, #1
 800f62e:	07f1      	lsls	r1, r6, #31
 800f630:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f634:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f638:	bf48      	it	mi
 800f63a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f63e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f642:	4618      	mov	r0, r3
 800f644:	e756      	b.n	800f4f4 <__ieee754_sqrt+0x28>
 800f646:	4690      	mov	r8, r2
 800f648:	e7be      	b.n	800f5c8 <__ieee754_sqrt+0xfc>
 800f64a:	f7f0 fe3f 	bl	80002cc <__adddf3>
 800f64e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f652:	4602      	mov	r2, r0
 800f654:	460b      	mov	r3, r1
 800f656:	4640      	mov	r0, r8
 800f658:	4649      	mov	r1, r9
 800f65a:	f7f1 fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800f65e:	b120      	cbz	r0, 800f66a <__ieee754_sqrt+0x19e>
 800f660:	1ca0      	adds	r0, r4, #2
 800f662:	bf08      	it	eq
 800f664:	3601      	addeq	r6, #1
 800f666:	3402      	adds	r4, #2
 800f668:	e7df      	b.n	800f62a <__ieee754_sqrt+0x15e>
 800f66a:	1c63      	adds	r3, r4, #1
 800f66c:	f023 0401 	bic.w	r4, r3, #1
 800f670:	e7db      	b.n	800f62a <__ieee754_sqrt+0x15e>
 800f672:	bf00      	nop
 800f674:	7ff00000 	.word	0x7ff00000
 800f678:	20000220 	.word	0x20000220
 800f67c:	20000218 	.word	0x20000218

0800f680 <__ieee754_sqrtf>:
 800f680:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f684:	4770      	bx	lr
	...

0800f688 <round>:
 800f688:	ec51 0b10 	vmov	r0, r1, d0
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f692:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f696:	2a13      	cmp	r2, #19
 800f698:	460b      	mov	r3, r1
 800f69a:	4605      	mov	r5, r0
 800f69c:	dc1b      	bgt.n	800f6d6 <round+0x4e>
 800f69e:	2a00      	cmp	r2, #0
 800f6a0:	da0b      	bge.n	800f6ba <round+0x32>
 800f6a2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f6a6:	3201      	adds	r2, #1
 800f6a8:	bf04      	itt	eq
 800f6aa:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f6ae:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	e015      	b.n	800f6e6 <round+0x5e>
 800f6ba:	4c15      	ldr	r4, [pc, #84]	@ (800f710 <round+0x88>)
 800f6bc:	4114      	asrs	r4, r2
 800f6be:	ea04 0601 	and.w	r6, r4, r1
 800f6c2:	4306      	orrs	r6, r0
 800f6c4:	d00f      	beq.n	800f6e6 <round+0x5e>
 800f6c6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f6ca:	fa41 f202 	asr.w	r2, r1, r2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	ea23 0304 	bic.w	r3, r3, r4
 800f6d4:	e7ed      	b.n	800f6b2 <round+0x2a>
 800f6d6:	2a33      	cmp	r2, #51	@ 0x33
 800f6d8:	dd08      	ble.n	800f6ec <round+0x64>
 800f6da:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f6de:	d102      	bne.n	800f6e6 <round+0x5e>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	f7f0 fdf3 	bl	80002cc <__adddf3>
 800f6e6:	ec41 0b10 	vmov	d0, r0, r1
 800f6ea:	bd70      	pop	{r4, r5, r6, pc}
 800f6ec:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f6f4:	40f4      	lsrs	r4, r6
 800f6f6:	4204      	tst	r4, r0
 800f6f8:	d0f5      	beq.n	800f6e6 <round+0x5e>
 800f6fa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f6fe:	2201      	movs	r2, #1
 800f700:	408a      	lsls	r2, r1
 800f702:	1952      	adds	r2, r2, r5
 800f704:	bf28      	it	cs
 800f706:	3301      	addcs	r3, #1
 800f708:	ea22 0204 	bic.w	r2, r2, r4
 800f70c:	e7d2      	b.n	800f6b4 <round+0x2c>
 800f70e:	bf00      	nop
 800f710:	000fffff 	.word	0x000fffff
 800f714:	00000000 	.word	0x00000000

0800f718 <__kernel_cos>:
 800f718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71c:	ec57 6b10 	vmov	r6, r7, d0
 800f720:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f724:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f728:	ed8d 1b00 	vstr	d1, [sp]
 800f72c:	d206      	bcs.n	800f73c <__kernel_cos+0x24>
 800f72e:	4630      	mov	r0, r6
 800f730:	4639      	mov	r1, r7
 800f732:	f7f1 fa31 	bl	8000b98 <__aeabi_d2iz>
 800f736:	2800      	cmp	r0, #0
 800f738:	f000 8088 	beq.w	800f84c <__kernel_cos+0x134>
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	4630      	mov	r0, r6
 800f742:	4639      	mov	r1, r7
 800f744:	f7f0 ff78 	bl	8000638 <__aeabi_dmul>
 800f748:	4b51      	ldr	r3, [pc, #324]	@ (800f890 <__kernel_cos+0x178>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	4604      	mov	r4, r0
 800f74e:	460d      	mov	r5, r1
 800f750:	f7f0 ff72 	bl	8000638 <__aeabi_dmul>
 800f754:	a340      	add	r3, pc, #256	@ (adr r3, 800f858 <__kernel_cos+0x140>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	4682      	mov	sl, r0
 800f75c:	468b      	mov	fp, r1
 800f75e:	4620      	mov	r0, r4
 800f760:	4629      	mov	r1, r5
 800f762:	f7f0 ff69 	bl	8000638 <__aeabi_dmul>
 800f766:	a33e      	add	r3, pc, #248	@ (adr r3, 800f860 <__kernel_cos+0x148>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 fdae 	bl	80002cc <__adddf3>
 800f770:	4622      	mov	r2, r4
 800f772:	462b      	mov	r3, r5
 800f774:	f7f0 ff60 	bl	8000638 <__aeabi_dmul>
 800f778:	a33b      	add	r3, pc, #236	@ (adr r3, 800f868 <__kernel_cos+0x150>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f0 fda3 	bl	80002c8 <__aeabi_dsub>
 800f782:	4622      	mov	r2, r4
 800f784:	462b      	mov	r3, r5
 800f786:	f7f0 ff57 	bl	8000638 <__aeabi_dmul>
 800f78a:	a339      	add	r3, pc, #228	@ (adr r3, 800f870 <__kernel_cos+0x158>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 fd9c 	bl	80002cc <__adddf3>
 800f794:	4622      	mov	r2, r4
 800f796:	462b      	mov	r3, r5
 800f798:	f7f0 ff4e 	bl	8000638 <__aeabi_dmul>
 800f79c:	a336      	add	r3, pc, #216	@ (adr r3, 800f878 <__kernel_cos+0x160>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	f7f0 fd91 	bl	80002c8 <__aeabi_dsub>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	f7f0 ff45 	bl	8000638 <__aeabi_dmul>
 800f7ae:	a334      	add	r3, pc, #208	@ (adr r3, 800f880 <__kernel_cos+0x168>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	f7f0 fd8a 	bl	80002cc <__adddf3>
 800f7b8:	4622      	mov	r2, r4
 800f7ba:	462b      	mov	r3, r5
 800f7bc:	f7f0 ff3c 	bl	8000638 <__aeabi_dmul>
 800f7c0:	4622      	mov	r2, r4
 800f7c2:	462b      	mov	r3, r5
 800f7c4:	f7f0 ff38 	bl	8000638 <__aeabi_dmul>
 800f7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	4639      	mov	r1, r7
 800f7d4:	f7f0 ff30 	bl	8000638 <__aeabi_dmul>
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4602      	mov	r2, r0
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f7f0 fd72 	bl	80002c8 <__aeabi_dsub>
 800f7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800f894 <__kernel_cos+0x17c>)
 800f7e6:	4598      	cmp	r8, r3
 800f7e8:	4606      	mov	r6, r0
 800f7ea:	460f      	mov	r7, r1
 800f7ec:	d810      	bhi.n	800f810 <__kernel_cos+0xf8>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	4650      	mov	r0, sl
 800f7f4:	4659      	mov	r1, fp
 800f7f6:	f7f0 fd67 	bl	80002c8 <__aeabi_dsub>
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	4926      	ldr	r1, [pc, #152]	@ (800f898 <__kernel_cos+0x180>)
 800f7fe:	4602      	mov	r2, r0
 800f800:	2000      	movs	r0, #0
 800f802:	f7f0 fd61 	bl	80002c8 <__aeabi_dsub>
 800f806:	ec41 0b10 	vmov	d0, r0, r1
 800f80a:	b003      	add	sp, #12
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	4b22      	ldr	r3, [pc, #136]	@ (800f89c <__kernel_cos+0x184>)
 800f812:	4921      	ldr	r1, [pc, #132]	@ (800f898 <__kernel_cos+0x180>)
 800f814:	4598      	cmp	r8, r3
 800f816:	bf8c      	ite	hi
 800f818:	4d21      	ldrhi	r5, [pc, #132]	@ (800f8a0 <__kernel_cos+0x188>)
 800f81a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f81e:	2400      	movs	r4, #0
 800f820:	4622      	mov	r2, r4
 800f822:	462b      	mov	r3, r5
 800f824:	2000      	movs	r0, #0
 800f826:	f7f0 fd4f 	bl	80002c8 <__aeabi_dsub>
 800f82a:	4622      	mov	r2, r4
 800f82c:	4680      	mov	r8, r0
 800f82e:	4689      	mov	r9, r1
 800f830:	462b      	mov	r3, r5
 800f832:	4650      	mov	r0, sl
 800f834:	4659      	mov	r1, fp
 800f836:	f7f0 fd47 	bl	80002c8 <__aeabi_dsub>
 800f83a:	4632      	mov	r2, r6
 800f83c:	463b      	mov	r3, r7
 800f83e:	f7f0 fd43 	bl	80002c8 <__aeabi_dsub>
 800f842:	4602      	mov	r2, r0
 800f844:	460b      	mov	r3, r1
 800f846:	4640      	mov	r0, r8
 800f848:	4649      	mov	r1, r9
 800f84a:	e7da      	b.n	800f802 <__kernel_cos+0xea>
 800f84c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f888 <__kernel_cos+0x170>
 800f850:	e7db      	b.n	800f80a <__kernel_cos+0xf2>
 800f852:	bf00      	nop
 800f854:	f3af 8000 	nop.w
 800f858:	be8838d4 	.word	0xbe8838d4
 800f85c:	bda8fae9 	.word	0xbda8fae9
 800f860:	bdb4b1c4 	.word	0xbdb4b1c4
 800f864:	3e21ee9e 	.word	0x3e21ee9e
 800f868:	809c52ad 	.word	0x809c52ad
 800f86c:	3e927e4f 	.word	0x3e927e4f
 800f870:	19cb1590 	.word	0x19cb1590
 800f874:	3efa01a0 	.word	0x3efa01a0
 800f878:	16c15177 	.word	0x16c15177
 800f87c:	3f56c16c 	.word	0x3f56c16c
 800f880:	5555554c 	.word	0x5555554c
 800f884:	3fa55555 	.word	0x3fa55555
 800f888:	00000000 	.word	0x00000000
 800f88c:	3ff00000 	.word	0x3ff00000
 800f890:	3fe00000 	.word	0x3fe00000
 800f894:	3fd33332 	.word	0x3fd33332
 800f898:	3ff00000 	.word	0x3ff00000
 800f89c:	3fe90000 	.word	0x3fe90000
 800f8a0:	3fd20000 	.word	0x3fd20000
 800f8a4:	00000000 	.word	0x00000000

0800f8a8 <__kernel_sin>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	ec55 4b10 	vmov	r4, r5, d0
 800f8b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f8b4:	b085      	sub	sp, #20
 800f8b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f8ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f8be:	4680      	mov	r8, r0
 800f8c0:	d205      	bcs.n	800f8ce <__kernel_sin+0x26>
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	f7f1 f967 	bl	8000b98 <__aeabi_d2iz>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d052      	beq.n	800f974 <__kernel_sin+0xcc>
 800f8ce:	4622      	mov	r2, r4
 800f8d0:	462b      	mov	r3, r5
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	f7f0 feaf 	bl	8000638 <__aeabi_dmul>
 800f8da:	4682      	mov	sl, r0
 800f8dc:	468b      	mov	fp, r1
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	f7f0 fea7 	bl	8000638 <__aeabi_dmul>
 800f8ea:	a342      	add	r3, pc, #264	@ (adr r3, 800f9f4 <__kernel_sin+0x14c>)
 800f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f0:	e9cd 0100 	strd	r0, r1, [sp]
 800f8f4:	4650      	mov	r0, sl
 800f8f6:	4659      	mov	r1, fp
 800f8f8:	f7f0 fe9e 	bl	8000638 <__aeabi_dmul>
 800f8fc:	a33f      	add	r3, pc, #252	@ (adr r3, 800f9fc <__kernel_sin+0x154>)
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f7f0 fce1 	bl	80002c8 <__aeabi_dsub>
 800f906:	4652      	mov	r2, sl
 800f908:	465b      	mov	r3, fp
 800f90a:	f7f0 fe95 	bl	8000638 <__aeabi_dmul>
 800f90e:	a33d      	add	r3, pc, #244	@ (adr r3, 800fa04 <__kernel_sin+0x15c>)
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	f7f0 fcda 	bl	80002cc <__adddf3>
 800f918:	4652      	mov	r2, sl
 800f91a:	465b      	mov	r3, fp
 800f91c:	f7f0 fe8c 	bl	8000638 <__aeabi_dmul>
 800f920:	a33a      	add	r3, pc, #232	@ (adr r3, 800fa0c <__kernel_sin+0x164>)
 800f922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f926:	f7f0 fccf 	bl	80002c8 <__aeabi_dsub>
 800f92a:	4652      	mov	r2, sl
 800f92c:	465b      	mov	r3, fp
 800f92e:	f7f0 fe83 	bl	8000638 <__aeabi_dmul>
 800f932:	a338      	add	r3, pc, #224	@ (adr r3, 800fa14 <__kernel_sin+0x16c>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fcc8 	bl	80002cc <__adddf3>
 800f93c:	4606      	mov	r6, r0
 800f93e:	460f      	mov	r7, r1
 800f940:	f1b8 0f00 	cmp.w	r8, #0
 800f944:	d11b      	bne.n	800f97e <__kernel_sin+0xd6>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4650      	mov	r0, sl
 800f94c:	4659      	mov	r1, fp
 800f94e:	f7f0 fe73 	bl	8000638 <__aeabi_dmul>
 800f952:	a325      	add	r3, pc, #148	@ (adr r3, 800f9e8 <__kernel_sin+0x140>)
 800f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f958:	f7f0 fcb6 	bl	80002c8 <__aeabi_dsub>
 800f95c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f960:	f7f0 fe6a 	bl	8000638 <__aeabi_dmul>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	4620      	mov	r0, r4
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fcae 	bl	80002cc <__adddf3>
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	ec45 4b10 	vmov	d0, r4, r5
 800f978:	b005      	add	sp, #20
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f982:	4b1b      	ldr	r3, [pc, #108]	@ (800f9f0 <__kernel_sin+0x148>)
 800f984:	2200      	movs	r2, #0
 800f986:	f7f0 fe57 	bl	8000638 <__aeabi_dmul>
 800f98a:	4632      	mov	r2, r6
 800f98c:	4680      	mov	r8, r0
 800f98e:	4689      	mov	r9, r1
 800f990:	463b      	mov	r3, r7
 800f992:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f996:	f7f0 fe4f 	bl	8000638 <__aeabi_dmul>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	4640      	mov	r0, r8
 800f9a0:	4649      	mov	r1, r9
 800f9a2:	f7f0 fc91 	bl	80002c8 <__aeabi_dsub>
 800f9a6:	4652      	mov	r2, sl
 800f9a8:	465b      	mov	r3, fp
 800f9aa:	f7f0 fe45 	bl	8000638 <__aeabi_dmul>
 800f9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9b2:	f7f0 fc89 	bl	80002c8 <__aeabi_dsub>
 800f9b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f9e8 <__kernel_sin+0x140>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9c4:	f7f0 fe38 	bl	8000638 <__aeabi_dmul>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f0 fc7c 	bl	80002cc <__adddf3>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fc74 	bl	80002c8 <__aeabi_dsub>
 800f9e0:	e7c6      	b.n	800f970 <__kernel_sin+0xc8>
 800f9e2:	bf00      	nop
 800f9e4:	f3af 8000 	nop.w
 800f9e8:	55555549 	.word	0x55555549
 800f9ec:	3fc55555 	.word	0x3fc55555
 800f9f0:	3fe00000 	.word	0x3fe00000
 800f9f4:	5acfd57c 	.word	0x5acfd57c
 800f9f8:	3de5d93a 	.word	0x3de5d93a
 800f9fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa00:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa04:	57b1fe7d 	.word	0x57b1fe7d
 800fa08:	3ec71de3 	.word	0x3ec71de3
 800fa0c:	19c161d5 	.word	0x19c161d5
 800fa10:	3f2a01a0 	.word	0x3f2a01a0
 800fa14:	1110f8a6 	.word	0x1110f8a6
 800fa18:	3f811111 	.word	0x3f811111
 800fa1c:	00000000 	.word	0x00000000

0800fa20 <__ieee754_pow>:
 800fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	b091      	sub	sp, #68	@ 0x44
 800fa26:	ed8d 1b00 	vstr	d1, [sp]
 800fa2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fa2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fa32:	ea5a 0001 	orrs.w	r0, sl, r1
 800fa36:	ec57 6b10 	vmov	r6, r7, d0
 800fa3a:	d113      	bne.n	800fa64 <__ieee754_pow+0x44>
 800fa3c:	19b3      	adds	r3, r6, r6
 800fa3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fa42:	4152      	adcs	r2, r2
 800fa44:	4298      	cmp	r0, r3
 800fa46:	4b98      	ldr	r3, [pc, #608]	@ (800fca8 <__ieee754_pow+0x288>)
 800fa48:	4193      	sbcs	r3, r2
 800fa4a:	f080 84ea 	bcs.w	8010422 <__ieee754_pow+0xa02>
 800fa4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa52:	4630      	mov	r0, r6
 800fa54:	4639      	mov	r1, r7
 800fa56:	f7f0 fc39 	bl	80002cc <__adddf3>
 800fa5a:	ec41 0b10 	vmov	d0, r0, r1
 800fa5e:	b011      	add	sp, #68	@ 0x44
 800fa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa64:	4a91      	ldr	r2, [pc, #580]	@ (800fcac <__ieee754_pow+0x28c>)
 800fa66:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fa6a:	4590      	cmp	r8, r2
 800fa6c:	463d      	mov	r5, r7
 800fa6e:	4633      	mov	r3, r6
 800fa70:	d806      	bhi.n	800fa80 <__ieee754_pow+0x60>
 800fa72:	d101      	bne.n	800fa78 <__ieee754_pow+0x58>
 800fa74:	2e00      	cmp	r6, #0
 800fa76:	d1ea      	bne.n	800fa4e <__ieee754_pow+0x2e>
 800fa78:	4592      	cmp	sl, r2
 800fa7a:	d801      	bhi.n	800fa80 <__ieee754_pow+0x60>
 800fa7c:	d10e      	bne.n	800fa9c <__ieee754_pow+0x7c>
 800fa7e:	b169      	cbz	r1, 800fa9c <__ieee754_pow+0x7c>
 800fa80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fa84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fa88:	431d      	orrs	r5, r3
 800fa8a:	d1e0      	bne.n	800fa4e <__ieee754_pow+0x2e>
 800fa8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa90:	18db      	adds	r3, r3, r3
 800fa92:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fa96:	4152      	adcs	r2, r2
 800fa98:	429d      	cmp	r5, r3
 800fa9a:	e7d4      	b.n	800fa46 <__ieee754_pow+0x26>
 800fa9c:	2d00      	cmp	r5, #0
 800fa9e:	46c3      	mov	fp, r8
 800faa0:	da3a      	bge.n	800fb18 <__ieee754_pow+0xf8>
 800faa2:	4a83      	ldr	r2, [pc, #524]	@ (800fcb0 <__ieee754_pow+0x290>)
 800faa4:	4592      	cmp	sl, r2
 800faa6:	d84d      	bhi.n	800fb44 <__ieee754_pow+0x124>
 800faa8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800faac:	4592      	cmp	sl, r2
 800faae:	f240 84c7 	bls.w	8010440 <__ieee754_pow+0xa20>
 800fab2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fab6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800faba:	2a14      	cmp	r2, #20
 800fabc:	dd0f      	ble.n	800fade <__ieee754_pow+0xbe>
 800fabe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fac2:	fa21 f402 	lsr.w	r4, r1, r2
 800fac6:	fa04 f202 	lsl.w	r2, r4, r2
 800faca:	428a      	cmp	r2, r1
 800facc:	f040 84b8 	bne.w	8010440 <__ieee754_pow+0xa20>
 800fad0:	f004 0401 	and.w	r4, r4, #1
 800fad4:	f1c4 0402 	rsb	r4, r4, #2
 800fad8:	2900      	cmp	r1, #0
 800fada:	d158      	bne.n	800fb8e <__ieee754_pow+0x16e>
 800fadc:	e00e      	b.n	800fafc <__ieee754_pow+0xdc>
 800fade:	2900      	cmp	r1, #0
 800fae0:	d154      	bne.n	800fb8c <__ieee754_pow+0x16c>
 800fae2:	f1c2 0214 	rsb	r2, r2, #20
 800fae6:	fa4a f402 	asr.w	r4, sl, r2
 800faea:	fa04 f202 	lsl.w	r2, r4, r2
 800faee:	4552      	cmp	r2, sl
 800faf0:	f040 84a3 	bne.w	801043a <__ieee754_pow+0xa1a>
 800faf4:	f004 0401 	and.w	r4, r4, #1
 800faf8:	f1c4 0402 	rsb	r4, r4, #2
 800fafc:	4a6d      	ldr	r2, [pc, #436]	@ (800fcb4 <__ieee754_pow+0x294>)
 800fafe:	4592      	cmp	sl, r2
 800fb00:	d12e      	bne.n	800fb60 <__ieee754_pow+0x140>
 800fb02:	f1b9 0f00 	cmp.w	r9, #0
 800fb06:	f280 8494 	bge.w	8010432 <__ieee754_pow+0xa12>
 800fb0a:	496a      	ldr	r1, [pc, #424]	@ (800fcb4 <__ieee754_pow+0x294>)
 800fb0c:	4632      	mov	r2, r6
 800fb0e:	463b      	mov	r3, r7
 800fb10:	2000      	movs	r0, #0
 800fb12:	f7f0 febb 	bl	800088c <__aeabi_ddiv>
 800fb16:	e7a0      	b.n	800fa5a <__ieee754_pow+0x3a>
 800fb18:	2400      	movs	r4, #0
 800fb1a:	bbc1      	cbnz	r1, 800fb8e <__ieee754_pow+0x16e>
 800fb1c:	4a63      	ldr	r2, [pc, #396]	@ (800fcac <__ieee754_pow+0x28c>)
 800fb1e:	4592      	cmp	sl, r2
 800fb20:	d1ec      	bne.n	800fafc <__ieee754_pow+0xdc>
 800fb22:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800fb26:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fb2a:	431a      	orrs	r2, r3
 800fb2c:	f000 8479 	beq.w	8010422 <__ieee754_pow+0xa02>
 800fb30:	4b61      	ldr	r3, [pc, #388]	@ (800fcb8 <__ieee754_pow+0x298>)
 800fb32:	4598      	cmp	r8, r3
 800fb34:	d908      	bls.n	800fb48 <__ieee754_pow+0x128>
 800fb36:	f1b9 0f00 	cmp.w	r9, #0
 800fb3a:	f2c0 8476 	blt.w	801042a <__ieee754_pow+0xa0a>
 800fb3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb42:	e78a      	b.n	800fa5a <__ieee754_pow+0x3a>
 800fb44:	2402      	movs	r4, #2
 800fb46:	e7e8      	b.n	800fb1a <__ieee754_pow+0xfa>
 800fb48:	f1b9 0f00 	cmp.w	r9, #0
 800fb4c:	f04f 0000 	mov.w	r0, #0
 800fb50:	f04f 0100 	mov.w	r1, #0
 800fb54:	da81      	bge.n	800fa5a <__ieee754_pow+0x3a>
 800fb56:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fb5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fb5e:	e77c      	b.n	800fa5a <__ieee754_pow+0x3a>
 800fb60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fb64:	d106      	bne.n	800fb74 <__ieee754_pow+0x154>
 800fb66:	4632      	mov	r2, r6
 800fb68:	463b      	mov	r3, r7
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	f7f0 fd63 	bl	8000638 <__aeabi_dmul>
 800fb72:	e772      	b.n	800fa5a <__ieee754_pow+0x3a>
 800fb74:	4a51      	ldr	r2, [pc, #324]	@ (800fcbc <__ieee754_pow+0x29c>)
 800fb76:	4591      	cmp	r9, r2
 800fb78:	d109      	bne.n	800fb8e <__ieee754_pow+0x16e>
 800fb7a:	2d00      	cmp	r5, #0
 800fb7c:	db07      	blt.n	800fb8e <__ieee754_pow+0x16e>
 800fb7e:	ec47 6b10 	vmov	d0, r6, r7
 800fb82:	b011      	add	sp, #68	@ 0x44
 800fb84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb88:	f7ff bca0 	b.w	800f4cc <__ieee754_sqrt>
 800fb8c:	2400      	movs	r4, #0
 800fb8e:	ec47 6b10 	vmov	d0, r6, r7
 800fb92:	9302      	str	r3, [sp, #8]
 800fb94:	f000 fe84 	bl	80108a0 <fabs>
 800fb98:	9b02      	ldr	r3, [sp, #8]
 800fb9a:	ec51 0b10 	vmov	r0, r1, d0
 800fb9e:	bb53      	cbnz	r3, 800fbf6 <__ieee754_pow+0x1d6>
 800fba0:	4b44      	ldr	r3, [pc, #272]	@ (800fcb4 <__ieee754_pow+0x294>)
 800fba2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d002      	beq.n	800fbb0 <__ieee754_pow+0x190>
 800fbaa:	f1b8 0f00 	cmp.w	r8, #0
 800fbae:	d122      	bne.n	800fbf6 <__ieee754_pow+0x1d6>
 800fbb0:	f1b9 0f00 	cmp.w	r9, #0
 800fbb4:	da05      	bge.n	800fbc2 <__ieee754_pow+0x1a2>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	2000      	movs	r0, #0
 800fbbc:	493d      	ldr	r1, [pc, #244]	@ (800fcb4 <__ieee754_pow+0x294>)
 800fbbe:	f7f0 fe65 	bl	800088c <__aeabi_ddiv>
 800fbc2:	2d00      	cmp	r5, #0
 800fbc4:	f6bf af49 	bge.w	800fa5a <__ieee754_pow+0x3a>
 800fbc8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fbcc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fbd0:	ea58 0804 	orrs.w	r8, r8, r4
 800fbd4:	d108      	bne.n	800fbe8 <__ieee754_pow+0x1c8>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	4610      	mov	r0, r2
 800fbdc:	4619      	mov	r1, r3
 800fbde:	f7f0 fb73 	bl	80002c8 <__aeabi_dsub>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	e794      	b.n	800fb12 <__ieee754_pow+0xf2>
 800fbe8:	2c01      	cmp	r4, #1
 800fbea:	f47f af36 	bne.w	800fa5a <__ieee754_pow+0x3a>
 800fbee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	e731      	b.n	800fa5a <__ieee754_pow+0x3a>
 800fbf6:	0feb      	lsrs	r3, r5, #31
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	ea53 0204 	orrs.w	r2, r3, r4
 800fbfe:	d102      	bne.n	800fc06 <__ieee754_pow+0x1e6>
 800fc00:	4632      	mov	r2, r6
 800fc02:	463b      	mov	r3, r7
 800fc04:	e7e9      	b.n	800fbda <__ieee754_pow+0x1ba>
 800fc06:	3c01      	subs	r4, #1
 800fc08:	431c      	orrs	r4, r3
 800fc0a:	d016      	beq.n	800fc3a <__ieee754_pow+0x21a>
 800fc0c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800fc98 <__ieee754_pow+0x278>
 800fc10:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fc14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc18:	f240 8112 	bls.w	800fe40 <__ieee754_pow+0x420>
 800fc1c:	4b28      	ldr	r3, [pc, #160]	@ (800fcc0 <__ieee754_pow+0x2a0>)
 800fc1e:	459a      	cmp	sl, r3
 800fc20:	4b25      	ldr	r3, [pc, #148]	@ (800fcb8 <__ieee754_pow+0x298>)
 800fc22:	d916      	bls.n	800fc52 <__ieee754_pow+0x232>
 800fc24:	4598      	cmp	r8, r3
 800fc26:	d80b      	bhi.n	800fc40 <__ieee754_pow+0x220>
 800fc28:	f1b9 0f00 	cmp.w	r9, #0
 800fc2c:	da0b      	bge.n	800fc46 <__ieee754_pow+0x226>
 800fc2e:	2000      	movs	r0, #0
 800fc30:	b011      	add	sp, #68	@ 0x44
 800fc32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc36:	f001 ba43 	b.w	80110c0 <__math_oflow>
 800fc3a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800fca0 <__ieee754_pow+0x280>
 800fc3e:	e7e7      	b.n	800fc10 <__ieee754_pow+0x1f0>
 800fc40:	f1b9 0f00 	cmp.w	r9, #0
 800fc44:	dcf3      	bgt.n	800fc2e <__ieee754_pow+0x20e>
 800fc46:	2000      	movs	r0, #0
 800fc48:	b011      	add	sp, #68	@ 0x44
 800fc4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4e:	f001 ba2f 	b.w	80110b0 <__math_uflow>
 800fc52:	4598      	cmp	r8, r3
 800fc54:	d20c      	bcs.n	800fc70 <__ieee754_pow+0x250>
 800fc56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	f7f0 ff5d 	bl	8000b1c <__aeabi_dcmplt>
 800fc62:	3800      	subs	r0, #0
 800fc64:	bf18      	it	ne
 800fc66:	2001      	movne	r0, #1
 800fc68:	f1b9 0f00 	cmp.w	r9, #0
 800fc6c:	daec      	bge.n	800fc48 <__ieee754_pow+0x228>
 800fc6e:	e7df      	b.n	800fc30 <__ieee754_pow+0x210>
 800fc70:	4b10      	ldr	r3, [pc, #64]	@ (800fcb4 <__ieee754_pow+0x294>)
 800fc72:	4598      	cmp	r8, r3
 800fc74:	f04f 0200 	mov.w	r2, #0
 800fc78:	d924      	bls.n	800fcc4 <__ieee754_pow+0x2a4>
 800fc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f7f0 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 800fc84:	3800      	subs	r0, #0
 800fc86:	bf18      	it	ne
 800fc88:	2001      	movne	r0, #1
 800fc8a:	f1b9 0f00 	cmp.w	r9, #0
 800fc8e:	dccf      	bgt.n	800fc30 <__ieee754_pow+0x210>
 800fc90:	e7da      	b.n	800fc48 <__ieee754_pow+0x228>
 800fc92:	bf00      	nop
 800fc94:	f3af 8000 	nop.w
 800fc98:	00000000 	.word	0x00000000
 800fc9c:	3ff00000 	.word	0x3ff00000
 800fca0:	00000000 	.word	0x00000000
 800fca4:	bff00000 	.word	0xbff00000
 800fca8:	fff00000 	.word	0xfff00000
 800fcac:	7ff00000 	.word	0x7ff00000
 800fcb0:	433fffff 	.word	0x433fffff
 800fcb4:	3ff00000 	.word	0x3ff00000
 800fcb8:	3fefffff 	.word	0x3fefffff
 800fcbc:	3fe00000 	.word	0x3fe00000
 800fcc0:	43f00000 	.word	0x43f00000
 800fcc4:	4b5a      	ldr	r3, [pc, #360]	@ (800fe30 <__ieee754_pow+0x410>)
 800fcc6:	f7f0 faff 	bl	80002c8 <__aeabi_dsub>
 800fcca:	a351      	add	r3, pc, #324	@ (adr r3, 800fe10 <__ieee754_pow+0x3f0>)
 800fccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	460d      	mov	r5, r1
 800fcd4:	f7f0 fcb0 	bl	8000638 <__aeabi_dmul>
 800fcd8:	a34f      	add	r3, pc, #316	@ (adr r3, 800fe18 <__ieee754_pow+0x3f8>)
 800fcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcde:	4606      	mov	r6, r0
 800fce0:	460f      	mov	r7, r1
 800fce2:	4620      	mov	r0, r4
 800fce4:	4629      	mov	r1, r5
 800fce6:	f7f0 fca7 	bl	8000638 <__aeabi_dmul>
 800fcea:	4b52      	ldr	r3, [pc, #328]	@ (800fe34 <__ieee754_pow+0x414>)
 800fcec:	4682      	mov	sl, r0
 800fcee:	468b      	mov	fp, r1
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	f7f0 fc9f 	bl	8000638 <__aeabi_dmul>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	a148      	add	r1, pc, #288	@ (adr r1, 800fe20 <__ieee754_pow+0x400>)
 800fd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd04:	f7f0 fae0 	bl	80002c8 <__aeabi_dsub>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	f7f0 fc94 	bl	8000638 <__aeabi_dmul>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	2000      	movs	r0, #0
 800fd16:	4948      	ldr	r1, [pc, #288]	@ (800fe38 <__ieee754_pow+0x418>)
 800fd18:	f7f0 fad6 	bl	80002c8 <__aeabi_dsub>
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	4680      	mov	r8, r0
 800fd20:	4689      	mov	r9, r1
 800fd22:	462b      	mov	r3, r5
 800fd24:	4620      	mov	r0, r4
 800fd26:	4629      	mov	r1, r5
 800fd28:	f7f0 fc86 	bl	8000638 <__aeabi_dmul>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	460b      	mov	r3, r1
 800fd30:	4640      	mov	r0, r8
 800fd32:	4649      	mov	r1, r9
 800fd34:	f7f0 fc80 	bl	8000638 <__aeabi_dmul>
 800fd38:	a33b      	add	r3, pc, #236	@ (adr r3, 800fe28 <__ieee754_pow+0x408>)
 800fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3e:	f7f0 fc7b 	bl	8000638 <__aeabi_dmul>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	4650      	mov	r0, sl
 800fd48:	4659      	mov	r1, fp
 800fd4a:	f7f0 fabd 	bl	80002c8 <__aeabi_dsub>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	4680      	mov	r8, r0
 800fd54:	4689      	mov	r9, r1
 800fd56:	4630      	mov	r0, r6
 800fd58:	4639      	mov	r1, r7
 800fd5a:	f7f0 fab7 	bl	80002cc <__adddf3>
 800fd5e:	2400      	movs	r4, #0
 800fd60:	4632      	mov	r2, r6
 800fd62:	463b      	mov	r3, r7
 800fd64:	4620      	mov	r0, r4
 800fd66:	460d      	mov	r5, r1
 800fd68:	f7f0 faae 	bl	80002c8 <__aeabi_dsub>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4640      	mov	r0, r8
 800fd72:	4649      	mov	r1, r9
 800fd74:	f7f0 faa8 	bl	80002c8 <__aeabi_dsub>
 800fd78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd80:	2300      	movs	r3, #0
 800fd82:	9304      	str	r3, [sp, #16]
 800fd84:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd88:	4606      	mov	r6, r0
 800fd8a:	460f      	mov	r7, r1
 800fd8c:	4652      	mov	r2, sl
 800fd8e:	465b      	mov	r3, fp
 800fd90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd94:	f7f0 fa98 	bl	80002c8 <__aeabi_dsub>
 800fd98:	4622      	mov	r2, r4
 800fd9a:	462b      	mov	r3, r5
 800fd9c:	f7f0 fc4c 	bl	8000638 <__aeabi_dmul>
 800fda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fda4:	4680      	mov	r8, r0
 800fda6:	4689      	mov	r9, r1
 800fda8:	4630      	mov	r0, r6
 800fdaa:	4639      	mov	r1, r7
 800fdac:	f7f0 fc44 	bl	8000638 <__aeabi_dmul>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	4640      	mov	r0, r8
 800fdb6:	4649      	mov	r1, r9
 800fdb8:	f7f0 fa88 	bl	80002cc <__adddf3>
 800fdbc:	4652      	mov	r2, sl
 800fdbe:	465b      	mov	r3, fp
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	4629      	mov	r1, r5
 800fdc8:	f7f0 fc36 	bl	8000638 <__aeabi_dmul>
 800fdcc:	460b      	mov	r3, r1
 800fdce:	4602      	mov	r2, r0
 800fdd0:	4680      	mov	r8, r0
 800fdd2:	4689      	mov	r9, r1
 800fdd4:	4630      	mov	r0, r6
 800fdd6:	4639      	mov	r1, r7
 800fdd8:	f7f0 fa78 	bl	80002cc <__adddf3>
 800fddc:	4b17      	ldr	r3, [pc, #92]	@ (800fe3c <__ieee754_pow+0x41c>)
 800fdde:	4299      	cmp	r1, r3
 800fde0:	4604      	mov	r4, r0
 800fde2:	460d      	mov	r5, r1
 800fde4:	468a      	mov	sl, r1
 800fde6:	468b      	mov	fp, r1
 800fde8:	f340 82ef 	ble.w	80103ca <__ieee754_pow+0x9aa>
 800fdec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800fdf0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800fdf4:	4303      	orrs	r3, r0
 800fdf6:	f000 81e8 	beq.w	80101ca <__ieee754_pow+0x7aa>
 800fdfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	2300      	movs	r3, #0
 800fe02:	f7f0 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800fe06:	3800      	subs	r0, #0
 800fe08:	bf18      	it	ne
 800fe0a:	2001      	movne	r0, #1
 800fe0c:	e710      	b.n	800fc30 <__ieee754_pow+0x210>
 800fe0e:	bf00      	nop
 800fe10:	60000000 	.word	0x60000000
 800fe14:	3ff71547 	.word	0x3ff71547
 800fe18:	f85ddf44 	.word	0xf85ddf44
 800fe1c:	3e54ae0b 	.word	0x3e54ae0b
 800fe20:	55555555 	.word	0x55555555
 800fe24:	3fd55555 	.word	0x3fd55555
 800fe28:	652b82fe 	.word	0x652b82fe
 800fe2c:	3ff71547 	.word	0x3ff71547
 800fe30:	3ff00000 	.word	0x3ff00000
 800fe34:	3fd00000 	.word	0x3fd00000
 800fe38:	3fe00000 	.word	0x3fe00000
 800fe3c:	408fffff 	.word	0x408fffff
 800fe40:	4bd5      	ldr	r3, [pc, #852]	@ (8010198 <__ieee754_pow+0x778>)
 800fe42:	402b      	ands	r3, r5
 800fe44:	2200      	movs	r2, #0
 800fe46:	b92b      	cbnz	r3, 800fe54 <__ieee754_pow+0x434>
 800fe48:	4bd4      	ldr	r3, [pc, #848]	@ (801019c <__ieee754_pow+0x77c>)
 800fe4a:	f7f0 fbf5 	bl	8000638 <__aeabi_dmul>
 800fe4e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800fe52:	468b      	mov	fp, r1
 800fe54:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fe58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fe5c:	4413      	add	r3, r2
 800fe5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe60:	4bcf      	ldr	r3, [pc, #828]	@ (80101a0 <__ieee754_pow+0x780>)
 800fe62:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800fe66:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800fe6a:	459b      	cmp	fp, r3
 800fe6c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fe70:	dd08      	ble.n	800fe84 <__ieee754_pow+0x464>
 800fe72:	4bcc      	ldr	r3, [pc, #816]	@ (80101a4 <__ieee754_pow+0x784>)
 800fe74:	459b      	cmp	fp, r3
 800fe76:	f340 81a5 	ble.w	80101c4 <__ieee754_pow+0x7a4>
 800fe7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe80:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800fe84:	f04f 0a00 	mov.w	sl, #0
 800fe88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800fe8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe8e:	4bc6      	ldr	r3, [pc, #792]	@ (80101a8 <__ieee754_pow+0x788>)
 800fe90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe94:	ed93 7b00 	vldr	d7, [r3]
 800fe98:	4629      	mov	r1, r5
 800fe9a:	ec53 2b17 	vmov	r2, r3, d7
 800fe9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fea2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fea6:	f7f0 fa0f 	bl	80002c8 <__aeabi_dsub>
 800feaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800feae:	4606      	mov	r6, r0
 800feb0:	460f      	mov	r7, r1
 800feb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800feb6:	f7f0 fa09 	bl	80002cc <__adddf3>
 800feba:	4602      	mov	r2, r0
 800febc:	460b      	mov	r3, r1
 800febe:	2000      	movs	r0, #0
 800fec0:	49ba      	ldr	r1, [pc, #744]	@ (80101ac <__ieee754_pow+0x78c>)
 800fec2:	f7f0 fce3 	bl	800088c <__aeabi_ddiv>
 800fec6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800feca:	4602      	mov	r2, r0
 800fecc:	460b      	mov	r3, r1
 800fece:	4630      	mov	r0, r6
 800fed0:	4639      	mov	r1, r7
 800fed2:	f7f0 fbb1 	bl	8000638 <__aeabi_dmul>
 800fed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800feda:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800fede:	106d      	asrs	r5, r5, #1
 800fee0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800fee4:	f04f 0b00 	mov.w	fp, #0
 800fee8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800feec:	4661      	mov	r1, ip
 800feee:	2200      	movs	r2, #0
 800fef0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800fef4:	4658      	mov	r0, fp
 800fef6:	46e1      	mov	r9, ip
 800fef8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800fefc:	4614      	mov	r4, r2
 800fefe:	461d      	mov	r5, r3
 800ff00:	f7f0 fb9a 	bl	8000638 <__aeabi_dmul>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	4630      	mov	r0, r6
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7f0 f9dc 	bl	80002c8 <__aeabi_dsub>
 800ff10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff14:	4606      	mov	r6, r0
 800ff16:	460f      	mov	r7, r1
 800ff18:	4620      	mov	r0, r4
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	f7f0 f9d4 	bl	80002c8 <__aeabi_dsub>
 800ff20:	4602      	mov	r2, r0
 800ff22:	460b      	mov	r3, r1
 800ff24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff28:	f7f0 f9ce 	bl	80002c8 <__aeabi_dsub>
 800ff2c:	465a      	mov	r2, fp
 800ff2e:	464b      	mov	r3, r9
 800ff30:	f7f0 fb82 	bl	8000638 <__aeabi_dmul>
 800ff34:	4602      	mov	r2, r0
 800ff36:	460b      	mov	r3, r1
 800ff38:	4630      	mov	r0, r6
 800ff3a:	4639      	mov	r1, r7
 800ff3c:	f7f0 f9c4 	bl	80002c8 <__aeabi_dsub>
 800ff40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ff44:	f7f0 fb78 	bl	8000638 <__aeabi_dmul>
 800ff48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ff50:	4610      	mov	r0, r2
 800ff52:	4619      	mov	r1, r3
 800ff54:	f7f0 fb70 	bl	8000638 <__aeabi_dmul>
 800ff58:	a37d      	add	r3, pc, #500	@ (adr r3, 8010150 <__ieee754_pow+0x730>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	4604      	mov	r4, r0
 800ff60:	460d      	mov	r5, r1
 800ff62:	f7f0 fb69 	bl	8000638 <__aeabi_dmul>
 800ff66:	a37c      	add	r3, pc, #496	@ (adr r3, 8010158 <__ieee754_pow+0x738>)
 800ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6c:	f7f0 f9ae 	bl	80002cc <__adddf3>
 800ff70:	4622      	mov	r2, r4
 800ff72:	462b      	mov	r3, r5
 800ff74:	f7f0 fb60 	bl	8000638 <__aeabi_dmul>
 800ff78:	a379      	add	r3, pc, #484	@ (adr r3, 8010160 <__ieee754_pow+0x740>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	f7f0 f9a5 	bl	80002cc <__adddf3>
 800ff82:	4622      	mov	r2, r4
 800ff84:	462b      	mov	r3, r5
 800ff86:	f7f0 fb57 	bl	8000638 <__aeabi_dmul>
 800ff8a:	a377      	add	r3, pc, #476	@ (adr r3, 8010168 <__ieee754_pow+0x748>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 f99c 	bl	80002cc <__adddf3>
 800ff94:	4622      	mov	r2, r4
 800ff96:	462b      	mov	r3, r5
 800ff98:	f7f0 fb4e 	bl	8000638 <__aeabi_dmul>
 800ff9c:	a374      	add	r3, pc, #464	@ (adr r3, 8010170 <__ieee754_pow+0x750>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 f993 	bl	80002cc <__adddf3>
 800ffa6:	4622      	mov	r2, r4
 800ffa8:	462b      	mov	r3, r5
 800ffaa:	f7f0 fb45 	bl	8000638 <__aeabi_dmul>
 800ffae:	a372      	add	r3, pc, #456	@ (adr r3, 8010178 <__ieee754_pow+0x758>)
 800ffb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb4:	f7f0 f98a 	bl	80002cc <__adddf3>
 800ffb8:	4622      	mov	r2, r4
 800ffba:	4606      	mov	r6, r0
 800ffbc:	460f      	mov	r7, r1
 800ffbe:	462b      	mov	r3, r5
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	4629      	mov	r1, r5
 800ffc4:	f7f0 fb38 	bl	8000638 <__aeabi_dmul>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4630      	mov	r0, r6
 800ffce:	4639      	mov	r1, r7
 800ffd0:	f7f0 fb32 	bl	8000638 <__aeabi_dmul>
 800ffd4:	465a      	mov	r2, fp
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	460d      	mov	r5, r1
 800ffda:	464b      	mov	r3, r9
 800ffdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffe0:	f7f0 f974 	bl	80002cc <__adddf3>
 800ffe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ffe8:	f7f0 fb26 	bl	8000638 <__aeabi_dmul>
 800ffec:	4622      	mov	r2, r4
 800ffee:	462b      	mov	r3, r5
 800fff0:	f7f0 f96c 	bl	80002cc <__adddf3>
 800fff4:	465a      	mov	r2, fp
 800fff6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fffa:	464b      	mov	r3, r9
 800fffc:	4658      	mov	r0, fp
 800fffe:	4649      	mov	r1, r9
 8010000:	f7f0 fb1a 	bl	8000638 <__aeabi_dmul>
 8010004:	4b6a      	ldr	r3, [pc, #424]	@ (80101b0 <__ieee754_pow+0x790>)
 8010006:	2200      	movs	r2, #0
 8010008:	4606      	mov	r6, r0
 801000a:	460f      	mov	r7, r1
 801000c:	f7f0 f95e 	bl	80002cc <__adddf3>
 8010010:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010014:	f7f0 f95a 	bl	80002cc <__adddf3>
 8010018:	46d8      	mov	r8, fp
 801001a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801001e:	460d      	mov	r5, r1
 8010020:	465a      	mov	r2, fp
 8010022:	460b      	mov	r3, r1
 8010024:	4640      	mov	r0, r8
 8010026:	4649      	mov	r1, r9
 8010028:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801002c:	f7f0 fb04 	bl	8000638 <__aeabi_dmul>
 8010030:	465c      	mov	r4, fp
 8010032:	4680      	mov	r8, r0
 8010034:	4689      	mov	r9, r1
 8010036:	4b5e      	ldr	r3, [pc, #376]	@ (80101b0 <__ieee754_pow+0x790>)
 8010038:	2200      	movs	r2, #0
 801003a:	4620      	mov	r0, r4
 801003c:	4629      	mov	r1, r5
 801003e:	f7f0 f943 	bl	80002c8 <__aeabi_dsub>
 8010042:	4632      	mov	r2, r6
 8010044:	463b      	mov	r3, r7
 8010046:	f7f0 f93f 	bl	80002c8 <__aeabi_dsub>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010052:	f7f0 f939 	bl	80002c8 <__aeabi_dsub>
 8010056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801005a:	f7f0 faed 	bl	8000638 <__aeabi_dmul>
 801005e:	4622      	mov	r2, r4
 8010060:	4606      	mov	r6, r0
 8010062:	460f      	mov	r7, r1
 8010064:	462b      	mov	r3, r5
 8010066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801006a:	f7f0 fae5 	bl	8000638 <__aeabi_dmul>
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	4630      	mov	r0, r6
 8010074:	4639      	mov	r1, r7
 8010076:	f7f0 f929 	bl	80002cc <__adddf3>
 801007a:	4606      	mov	r6, r0
 801007c:	460f      	mov	r7, r1
 801007e:	4602      	mov	r2, r0
 8010080:	460b      	mov	r3, r1
 8010082:	4640      	mov	r0, r8
 8010084:	4649      	mov	r1, r9
 8010086:	f7f0 f921 	bl	80002cc <__adddf3>
 801008a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801008e:	a33c      	add	r3, pc, #240	@ (adr r3, 8010180 <__ieee754_pow+0x760>)
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	4658      	mov	r0, fp
 8010096:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801009a:	460d      	mov	r5, r1
 801009c:	f7f0 facc 	bl	8000638 <__aeabi_dmul>
 80100a0:	465c      	mov	r4, fp
 80100a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100a6:	4642      	mov	r2, r8
 80100a8:	464b      	mov	r3, r9
 80100aa:	4620      	mov	r0, r4
 80100ac:	4629      	mov	r1, r5
 80100ae:	f7f0 f90b 	bl	80002c8 <__aeabi_dsub>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4630      	mov	r0, r6
 80100b8:	4639      	mov	r1, r7
 80100ba:	f7f0 f905 	bl	80002c8 <__aeabi_dsub>
 80100be:	a332      	add	r3, pc, #200	@ (adr r3, 8010188 <__ieee754_pow+0x768>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	f7f0 fab8 	bl	8000638 <__aeabi_dmul>
 80100c8:	a331      	add	r3, pc, #196	@ (adr r3, 8010190 <__ieee754_pow+0x770>)
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	4606      	mov	r6, r0
 80100d0:	460f      	mov	r7, r1
 80100d2:	4620      	mov	r0, r4
 80100d4:	4629      	mov	r1, r5
 80100d6:	f7f0 faaf 	bl	8000638 <__aeabi_dmul>
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	4630      	mov	r0, r6
 80100e0:	4639      	mov	r1, r7
 80100e2:	f7f0 f8f3 	bl	80002cc <__adddf3>
 80100e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100e8:	4b32      	ldr	r3, [pc, #200]	@ (80101b4 <__ieee754_pow+0x794>)
 80100ea:	4413      	add	r3, r2
 80100ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f0:	f7f0 f8ec 	bl	80002cc <__adddf3>
 80100f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80100fa:	f7f0 fa33 	bl	8000564 <__aeabi_i2d>
 80100fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010100:	4b2d      	ldr	r3, [pc, #180]	@ (80101b8 <__ieee754_pow+0x798>)
 8010102:	4413      	add	r3, r2
 8010104:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010108:	4606      	mov	r6, r0
 801010a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801010e:	460f      	mov	r7, r1
 8010110:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010114:	f7f0 f8da 	bl	80002cc <__adddf3>
 8010118:	4642      	mov	r2, r8
 801011a:	464b      	mov	r3, r9
 801011c:	f7f0 f8d6 	bl	80002cc <__adddf3>
 8010120:	4632      	mov	r2, r6
 8010122:	463b      	mov	r3, r7
 8010124:	f7f0 f8d2 	bl	80002cc <__adddf3>
 8010128:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801012c:	4632      	mov	r2, r6
 801012e:	463b      	mov	r3, r7
 8010130:	4658      	mov	r0, fp
 8010132:	460d      	mov	r5, r1
 8010134:	f7f0 f8c8 	bl	80002c8 <__aeabi_dsub>
 8010138:	4642      	mov	r2, r8
 801013a:	464b      	mov	r3, r9
 801013c:	f7f0 f8c4 	bl	80002c8 <__aeabi_dsub>
 8010140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010144:	f7f0 f8c0 	bl	80002c8 <__aeabi_dsub>
 8010148:	465c      	mov	r4, fp
 801014a:	4602      	mov	r2, r0
 801014c:	e036      	b.n	80101bc <__ieee754_pow+0x79c>
 801014e:	bf00      	nop
 8010150:	4a454eef 	.word	0x4a454eef
 8010154:	3fca7e28 	.word	0x3fca7e28
 8010158:	93c9db65 	.word	0x93c9db65
 801015c:	3fcd864a 	.word	0x3fcd864a
 8010160:	a91d4101 	.word	0xa91d4101
 8010164:	3fd17460 	.word	0x3fd17460
 8010168:	518f264d 	.word	0x518f264d
 801016c:	3fd55555 	.word	0x3fd55555
 8010170:	db6fabff 	.word	0xdb6fabff
 8010174:	3fdb6db6 	.word	0x3fdb6db6
 8010178:	33333303 	.word	0x33333303
 801017c:	3fe33333 	.word	0x3fe33333
 8010180:	e0000000 	.word	0xe0000000
 8010184:	3feec709 	.word	0x3feec709
 8010188:	dc3a03fd 	.word	0xdc3a03fd
 801018c:	3feec709 	.word	0x3feec709
 8010190:	145b01f5 	.word	0x145b01f5
 8010194:	be3e2fe0 	.word	0xbe3e2fe0
 8010198:	7ff00000 	.word	0x7ff00000
 801019c:	43400000 	.word	0x43400000
 80101a0:	0003988e 	.word	0x0003988e
 80101a4:	000bb679 	.word	0x000bb679
 80101a8:	08011c90 	.word	0x08011c90
 80101ac:	3ff00000 	.word	0x3ff00000
 80101b0:	40080000 	.word	0x40080000
 80101b4:	08011c70 	.word	0x08011c70
 80101b8:	08011c80 	.word	0x08011c80
 80101bc:	460b      	mov	r3, r1
 80101be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101c2:	e5d7      	b.n	800fd74 <__ieee754_pow+0x354>
 80101c4:	f04f 0a01 	mov.w	sl, #1
 80101c8:	e65e      	b.n	800fe88 <__ieee754_pow+0x468>
 80101ca:	a3b4      	add	r3, pc, #720	@ (adr r3, 801049c <__ieee754_pow+0xa7c>)
 80101cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 f87a 	bl	80002cc <__adddf3>
 80101d8:	4642      	mov	r2, r8
 80101da:	e9cd 0100 	strd	r0, r1, [sp]
 80101de:	464b      	mov	r3, r9
 80101e0:	4620      	mov	r0, r4
 80101e2:	4629      	mov	r1, r5
 80101e4:	f7f0 f870 	bl	80002c8 <__aeabi_dsub>
 80101e8:	4602      	mov	r2, r0
 80101ea:	460b      	mov	r3, r1
 80101ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101f0:	f7f0 fcb2 	bl	8000b58 <__aeabi_dcmpgt>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	f47f ae00 	bne.w	800fdfa <__ieee754_pow+0x3da>
 80101fa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80101fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010202:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010206:	fa43 fa0a 	asr.w	sl, r3, sl
 801020a:	44da      	add	sl, fp
 801020c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010210:	489d      	ldr	r0, [pc, #628]	@ (8010488 <__ieee754_pow+0xa68>)
 8010212:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010216:	4108      	asrs	r0, r1
 8010218:	ea00 030a 	and.w	r3, r0, sl
 801021c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010220:	f1c1 0114 	rsb	r1, r1, #20
 8010224:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010228:	fa4a fa01 	asr.w	sl, sl, r1
 801022c:	f1bb 0f00 	cmp.w	fp, #0
 8010230:	4640      	mov	r0, r8
 8010232:	4649      	mov	r1, r9
 8010234:	f04f 0200 	mov.w	r2, #0
 8010238:	bfb8      	it	lt
 801023a:	f1ca 0a00 	rsblt	sl, sl, #0
 801023e:	f7f0 f843 	bl	80002c8 <__aeabi_dsub>
 8010242:	4680      	mov	r8, r0
 8010244:	4689      	mov	r9, r1
 8010246:	4632      	mov	r2, r6
 8010248:	463b      	mov	r3, r7
 801024a:	4640      	mov	r0, r8
 801024c:	4649      	mov	r1, r9
 801024e:	f7f0 f83d 	bl	80002cc <__adddf3>
 8010252:	2400      	movs	r4, #0
 8010254:	a37c      	add	r3, pc, #496	@ (adr r3, 8010448 <__ieee754_pow+0xa28>)
 8010256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025a:	4620      	mov	r0, r4
 801025c:	460d      	mov	r5, r1
 801025e:	f7f0 f9eb 	bl	8000638 <__aeabi_dmul>
 8010262:	4642      	mov	r2, r8
 8010264:	e9cd 0100 	strd	r0, r1, [sp]
 8010268:	464b      	mov	r3, r9
 801026a:	4620      	mov	r0, r4
 801026c:	4629      	mov	r1, r5
 801026e:	f7f0 f82b 	bl	80002c8 <__aeabi_dsub>
 8010272:	4602      	mov	r2, r0
 8010274:	460b      	mov	r3, r1
 8010276:	4630      	mov	r0, r6
 8010278:	4639      	mov	r1, r7
 801027a:	f7f0 f825 	bl	80002c8 <__aeabi_dsub>
 801027e:	a374      	add	r3, pc, #464	@ (adr r3, 8010450 <__ieee754_pow+0xa30>)
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	f7f0 f9d8 	bl	8000638 <__aeabi_dmul>
 8010288:	a373      	add	r3, pc, #460	@ (adr r3, 8010458 <__ieee754_pow+0xa38>)
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	4680      	mov	r8, r0
 8010290:	4689      	mov	r9, r1
 8010292:	4620      	mov	r0, r4
 8010294:	4629      	mov	r1, r5
 8010296:	f7f0 f9cf 	bl	8000638 <__aeabi_dmul>
 801029a:	4602      	mov	r2, r0
 801029c:	460b      	mov	r3, r1
 801029e:	4640      	mov	r0, r8
 80102a0:	4649      	mov	r1, r9
 80102a2:	f7f0 f813 	bl	80002cc <__adddf3>
 80102a6:	4604      	mov	r4, r0
 80102a8:	460d      	mov	r5, r1
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102b2:	f7f0 f80b 	bl	80002cc <__adddf3>
 80102b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102ba:	4680      	mov	r8, r0
 80102bc:	4689      	mov	r9, r1
 80102be:	f7f0 f803 	bl	80002c8 <__aeabi_dsub>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	4620      	mov	r0, r4
 80102c8:	4629      	mov	r1, r5
 80102ca:	f7ef fffd 	bl	80002c8 <__aeabi_dsub>
 80102ce:	4642      	mov	r2, r8
 80102d0:	4606      	mov	r6, r0
 80102d2:	460f      	mov	r7, r1
 80102d4:	464b      	mov	r3, r9
 80102d6:	4640      	mov	r0, r8
 80102d8:	4649      	mov	r1, r9
 80102da:	f7f0 f9ad 	bl	8000638 <__aeabi_dmul>
 80102de:	a360      	add	r3, pc, #384	@ (adr r3, 8010460 <__ieee754_pow+0xa40>)
 80102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e4:	4604      	mov	r4, r0
 80102e6:	460d      	mov	r5, r1
 80102e8:	f7f0 f9a6 	bl	8000638 <__aeabi_dmul>
 80102ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8010468 <__ieee754_pow+0xa48>)
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	f7ef ffe9 	bl	80002c8 <__aeabi_dsub>
 80102f6:	4622      	mov	r2, r4
 80102f8:	462b      	mov	r3, r5
 80102fa:	f7f0 f99d 	bl	8000638 <__aeabi_dmul>
 80102fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8010470 <__ieee754_pow+0xa50>)
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	f7ef ffe2 	bl	80002cc <__adddf3>
 8010308:	4622      	mov	r2, r4
 801030a:	462b      	mov	r3, r5
 801030c:	f7f0 f994 	bl	8000638 <__aeabi_dmul>
 8010310:	a359      	add	r3, pc, #356	@ (adr r3, 8010478 <__ieee754_pow+0xa58>)
 8010312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010316:	f7ef ffd7 	bl	80002c8 <__aeabi_dsub>
 801031a:	4622      	mov	r2, r4
 801031c:	462b      	mov	r3, r5
 801031e:	f7f0 f98b 	bl	8000638 <__aeabi_dmul>
 8010322:	a357      	add	r3, pc, #348	@ (adr r3, 8010480 <__ieee754_pow+0xa60>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	f7ef ffd0 	bl	80002cc <__adddf3>
 801032c:	4622      	mov	r2, r4
 801032e:	462b      	mov	r3, r5
 8010330:	f7f0 f982 	bl	8000638 <__aeabi_dmul>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	4640      	mov	r0, r8
 801033a:	4649      	mov	r1, r9
 801033c:	f7ef ffc4 	bl	80002c8 <__aeabi_dsub>
 8010340:	4604      	mov	r4, r0
 8010342:	460d      	mov	r5, r1
 8010344:	4602      	mov	r2, r0
 8010346:	460b      	mov	r3, r1
 8010348:	4640      	mov	r0, r8
 801034a:	4649      	mov	r1, r9
 801034c:	f7f0 f974 	bl	8000638 <__aeabi_dmul>
 8010350:	2200      	movs	r2, #0
 8010352:	e9cd 0100 	strd	r0, r1, [sp]
 8010356:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801035a:	4620      	mov	r0, r4
 801035c:	4629      	mov	r1, r5
 801035e:	f7ef ffb3 	bl	80002c8 <__aeabi_dsub>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	e9dd 0100 	ldrd	r0, r1, [sp]
 801036a:	f7f0 fa8f 	bl	800088c <__aeabi_ddiv>
 801036e:	4632      	mov	r2, r6
 8010370:	4604      	mov	r4, r0
 8010372:	460d      	mov	r5, r1
 8010374:	463b      	mov	r3, r7
 8010376:	4640      	mov	r0, r8
 8010378:	4649      	mov	r1, r9
 801037a:	f7f0 f95d 	bl	8000638 <__aeabi_dmul>
 801037e:	4632      	mov	r2, r6
 8010380:	463b      	mov	r3, r7
 8010382:	f7ef ffa3 	bl	80002cc <__adddf3>
 8010386:	4602      	mov	r2, r0
 8010388:	460b      	mov	r3, r1
 801038a:	4620      	mov	r0, r4
 801038c:	4629      	mov	r1, r5
 801038e:	f7ef ff9b 	bl	80002c8 <__aeabi_dsub>
 8010392:	4642      	mov	r2, r8
 8010394:	464b      	mov	r3, r9
 8010396:	f7ef ff97 	bl	80002c8 <__aeabi_dsub>
 801039a:	460b      	mov	r3, r1
 801039c:	4602      	mov	r2, r0
 801039e:	493b      	ldr	r1, [pc, #236]	@ (801048c <__ieee754_pow+0xa6c>)
 80103a0:	2000      	movs	r0, #0
 80103a2:	f7ef ff91 	bl	80002c8 <__aeabi_dsub>
 80103a6:	ec41 0b10 	vmov	d0, r0, r1
 80103aa:	ee10 3a90 	vmov	r3, s1
 80103ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80103b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103b6:	da30      	bge.n	801041a <__ieee754_pow+0x9fa>
 80103b8:	4650      	mov	r0, sl
 80103ba:	f000 fdcd 	bl	8010f58 <scalbn>
 80103be:	ec51 0b10 	vmov	r0, r1, d0
 80103c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103c6:	f7ff bbd2 	b.w	800fb6e <__ieee754_pow+0x14e>
 80103ca:	4c31      	ldr	r4, [pc, #196]	@ (8010490 <__ieee754_pow+0xa70>)
 80103cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80103d0:	42a3      	cmp	r3, r4
 80103d2:	d91a      	bls.n	801040a <__ieee754_pow+0x9ea>
 80103d4:	4b2f      	ldr	r3, [pc, #188]	@ (8010494 <__ieee754_pow+0xa74>)
 80103d6:	440b      	add	r3, r1
 80103d8:	4303      	orrs	r3, r0
 80103da:	d009      	beq.n	80103f0 <__ieee754_pow+0x9d0>
 80103dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103e0:	2200      	movs	r2, #0
 80103e2:	2300      	movs	r3, #0
 80103e4:	f7f0 fb9a 	bl	8000b1c <__aeabi_dcmplt>
 80103e8:	3800      	subs	r0, #0
 80103ea:	bf18      	it	ne
 80103ec:	2001      	movne	r0, #1
 80103ee:	e42b      	b.n	800fc48 <__ieee754_pow+0x228>
 80103f0:	4642      	mov	r2, r8
 80103f2:	464b      	mov	r3, r9
 80103f4:	f7ef ff68 	bl	80002c8 <__aeabi_dsub>
 80103f8:	4632      	mov	r2, r6
 80103fa:	463b      	mov	r3, r7
 80103fc:	f7f0 fba2 	bl	8000b44 <__aeabi_dcmpge>
 8010400:	2800      	cmp	r0, #0
 8010402:	d1eb      	bne.n	80103dc <__ieee754_pow+0x9bc>
 8010404:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80104a4 <__ieee754_pow+0xa84>
 8010408:	e6f7      	b.n	80101fa <__ieee754_pow+0x7da>
 801040a:	469a      	mov	sl, r3
 801040c:	4b22      	ldr	r3, [pc, #136]	@ (8010498 <__ieee754_pow+0xa78>)
 801040e:	459a      	cmp	sl, r3
 8010410:	f63f aef3 	bhi.w	80101fa <__ieee754_pow+0x7da>
 8010414:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010418:	e715      	b.n	8010246 <__ieee754_pow+0x826>
 801041a:	ec51 0b10 	vmov	r0, r1, d0
 801041e:	4619      	mov	r1, r3
 8010420:	e7cf      	b.n	80103c2 <__ieee754_pow+0x9a2>
 8010422:	491a      	ldr	r1, [pc, #104]	@ (801048c <__ieee754_pow+0xa6c>)
 8010424:	2000      	movs	r0, #0
 8010426:	f7ff bb18 	b.w	800fa5a <__ieee754_pow+0x3a>
 801042a:	2000      	movs	r0, #0
 801042c:	2100      	movs	r1, #0
 801042e:	f7ff bb14 	b.w	800fa5a <__ieee754_pow+0x3a>
 8010432:	4630      	mov	r0, r6
 8010434:	4639      	mov	r1, r7
 8010436:	f7ff bb10 	b.w	800fa5a <__ieee754_pow+0x3a>
 801043a:	460c      	mov	r4, r1
 801043c:	f7ff bb5e 	b.w	800fafc <__ieee754_pow+0xdc>
 8010440:	2400      	movs	r4, #0
 8010442:	f7ff bb49 	b.w	800fad8 <__ieee754_pow+0xb8>
 8010446:	bf00      	nop
 8010448:	00000000 	.word	0x00000000
 801044c:	3fe62e43 	.word	0x3fe62e43
 8010450:	fefa39ef 	.word	0xfefa39ef
 8010454:	3fe62e42 	.word	0x3fe62e42
 8010458:	0ca86c39 	.word	0x0ca86c39
 801045c:	be205c61 	.word	0xbe205c61
 8010460:	72bea4d0 	.word	0x72bea4d0
 8010464:	3e663769 	.word	0x3e663769
 8010468:	c5d26bf1 	.word	0xc5d26bf1
 801046c:	3ebbbd41 	.word	0x3ebbbd41
 8010470:	af25de2c 	.word	0xaf25de2c
 8010474:	3f11566a 	.word	0x3f11566a
 8010478:	16bebd93 	.word	0x16bebd93
 801047c:	3f66c16c 	.word	0x3f66c16c
 8010480:	5555553e 	.word	0x5555553e
 8010484:	3fc55555 	.word	0x3fc55555
 8010488:	fff00000 	.word	0xfff00000
 801048c:	3ff00000 	.word	0x3ff00000
 8010490:	4090cbff 	.word	0x4090cbff
 8010494:	3f6f3400 	.word	0x3f6f3400
 8010498:	3fe00000 	.word	0x3fe00000
 801049c:	652b82fe 	.word	0x652b82fe
 80104a0:	3c971547 	.word	0x3c971547
 80104a4:	4090cc00 	.word	0x4090cc00

080104a8 <__ieee754_rem_pio2>:
 80104a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ac:	ec57 6b10 	vmov	r6, r7, d0
 80104b0:	4bc5      	ldr	r3, [pc, #788]	@ (80107c8 <__ieee754_rem_pio2+0x320>)
 80104b2:	b08d      	sub	sp, #52	@ 0x34
 80104b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80104b8:	4598      	cmp	r8, r3
 80104ba:	4604      	mov	r4, r0
 80104bc:	9704      	str	r7, [sp, #16]
 80104be:	d807      	bhi.n	80104d0 <__ieee754_rem_pio2+0x28>
 80104c0:	2200      	movs	r2, #0
 80104c2:	2300      	movs	r3, #0
 80104c4:	ed80 0b00 	vstr	d0, [r0]
 80104c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80104cc:	2500      	movs	r5, #0
 80104ce:	e028      	b.n	8010522 <__ieee754_rem_pio2+0x7a>
 80104d0:	4bbe      	ldr	r3, [pc, #760]	@ (80107cc <__ieee754_rem_pio2+0x324>)
 80104d2:	4598      	cmp	r8, r3
 80104d4:	d878      	bhi.n	80105c8 <__ieee754_rem_pio2+0x120>
 80104d6:	9b04      	ldr	r3, [sp, #16]
 80104d8:	4dbd      	ldr	r5, [pc, #756]	@ (80107d0 <__ieee754_rem_pio2+0x328>)
 80104da:	2b00      	cmp	r3, #0
 80104dc:	4630      	mov	r0, r6
 80104de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010790 <__ieee754_rem_pio2+0x2e8>)
 80104e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e4:	4639      	mov	r1, r7
 80104e6:	dd38      	ble.n	801055a <__ieee754_rem_pio2+0xb2>
 80104e8:	f7ef feee 	bl	80002c8 <__aeabi_dsub>
 80104ec:	45a8      	cmp	r8, r5
 80104ee:	4606      	mov	r6, r0
 80104f0:	460f      	mov	r7, r1
 80104f2:	d01a      	beq.n	801052a <__ieee754_rem_pio2+0x82>
 80104f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010798 <__ieee754_rem_pio2+0x2f0>)
 80104f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fa:	f7ef fee5 	bl	80002c8 <__aeabi_dsub>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	4680      	mov	r8, r0
 8010504:	4689      	mov	r9, r1
 8010506:	4630      	mov	r0, r6
 8010508:	4639      	mov	r1, r7
 801050a:	f7ef fedd 	bl	80002c8 <__aeabi_dsub>
 801050e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010798 <__ieee754_rem_pio2+0x2f0>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7ef fed8 	bl	80002c8 <__aeabi_dsub>
 8010518:	e9c4 8900 	strd	r8, r9, [r4]
 801051c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010520:	2501      	movs	r5, #1
 8010522:	4628      	mov	r0, r5
 8010524:	b00d      	add	sp, #52	@ 0x34
 8010526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052a:	a39d      	add	r3, pc, #628	@ (adr r3, 80107a0 <__ieee754_rem_pio2+0x2f8>)
 801052c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010530:	f7ef feca 	bl	80002c8 <__aeabi_dsub>
 8010534:	a39c      	add	r3, pc, #624	@ (adr r3, 80107a8 <__ieee754_rem_pio2+0x300>)
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	4606      	mov	r6, r0
 801053c:	460f      	mov	r7, r1
 801053e:	f7ef fec3 	bl	80002c8 <__aeabi_dsub>
 8010542:	4602      	mov	r2, r0
 8010544:	460b      	mov	r3, r1
 8010546:	4680      	mov	r8, r0
 8010548:	4689      	mov	r9, r1
 801054a:	4630      	mov	r0, r6
 801054c:	4639      	mov	r1, r7
 801054e:	f7ef febb 	bl	80002c8 <__aeabi_dsub>
 8010552:	a395      	add	r3, pc, #596	@ (adr r3, 80107a8 <__ieee754_rem_pio2+0x300>)
 8010554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010558:	e7dc      	b.n	8010514 <__ieee754_rem_pio2+0x6c>
 801055a:	f7ef feb7 	bl	80002cc <__adddf3>
 801055e:	45a8      	cmp	r8, r5
 8010560:	4606      	mov	r6, r0
 8010562:	460f      	mov	r7, r1
 8010564:	d018      	beq.n	8010598 <__ieee754_rem_pio2+0xf0>
 8010566:	a38c      	add	r3, pc, #560	@ (adr r3, 8010798 <__ieee754_rem_pio2+0x2f0>)
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	f7ef feae 	bl	80002cc <__adddf3>
 8010570:	4602      	mov	r2, r0
 8010572:	460b      	mov	r3, r1
 8010574:	4680      	mov	r8, r0
 8010576:	4689      	mov	r9, r1
 8010578:	4630      	mov	r0, r6
 801057a:	4639      	mov	r1, r7
 801057c:	f7ef fea4 	bl	80002c8 <__aeabi_dsub>
 8010580:	a385      	add	r3, pc, #532	@ (adr r3, 8010798 <__ieee754_rem_pio2+0x2f0>)
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f7ef fea1 	bl	80002cc <__adddf3>
 801058a:	f04f 35ff 	mov.w	r5, #4294967295
 801058e:	e9c4 8900 	strd	r8, r9, [r4]
 8010592:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010596:	e7c4      	b.n	8010522 <__ieee754_rem_pio2+0x7a>
 8010598:	a381      	add	r3, pc, #516	@ (adr r3, 80107a0 <__ieee754_rem_pio2+0x2f8>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	f7ef fe95 	bl	80002cc <__adddf3>
 80105a2:	a381      	add	r3, pc, #516	@ (adr r3, 80107a8 <__ieee754_rem_pio2+0x300>)
 80105a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a8:	4606      	mov	r6, r0
 80105aa:	460f      	mov	r7, r1
 80105ac:	f7ef fe8e 	bl	80002cc <__adddf3>
 80105b0:	4602      	mov	r2, r0
 80105b2:	460b      	mov	r3, r1
 80105b4:	4680      	mov	r8, r0
 80105b6:	4689      	mov	r9, r1
 80105b8:	4630      	mov	r0, r6
 80105ba:	4639      	mov	r1, r7
 80105bc:	f7ef fe84 	bl	80002c8 <__aeabi_dsub>
 80105c0:	a379      	add	r3, pc, #484	@ (adr r3, 80107a8 <__ieee754_rem_pio2+0x300>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	e7de      	b.n	8010586 <__ieee754_rem_pio2+0xde>
 80105c8:	4b82      	ldr	r3, [pc, #520]	@ (80107d4 <__ieee754_rem_pio2+0x32c>)
 80105ca:	4598      	cmp	r8, r3
 80105cc:	f200 80d1 	bhi.w	8010772 <__ieee754_rem_pio2+0x2ca>
 80105d0:	f000 f966 	bl	80108a0 <fabs>
 80105d4:	ec57 6b10 	vmov	r6, r7, d0
 80105d8:	a375      	add	r3, pc, #468	@ (adr r3, 80107b0 <__ieee754_rem_pio2+0x308>)
 80105da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105de:	4630      	mov	r0, r6
 80105e0:	4639      	mov	r1, r7
 80105e2:	f7f0 f829 	bl	8000638 <__aeabi_dmul>
 80105e6:	4b7c      	ldr	r3, [pc, #496]	@ (80107d8 <__ieee754_rem_pio2+0x330>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	f7ef fe6f 	bl	80002cc <__adddf3>
 80105ee:	f7f0 fad3 	bl	8000b98 <__aeabi_d2iz>
 80105f2:	4605      	mov	r5, r0
 80105f4:	f7ef ffb6 	bl	8000564 <__aeabi_i2d>
 80105f8:	4602      	mov	r2, r0
 80105fa:	460b      	mov	r3, r1
 80105fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010600:	a363      	add	r3, pc, #396	@ (adr r3, 8010790 <__ieee754_rem_pio2+0x2e8>)
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	f7f0 f817 	bl	8000638 <__aeabi_dmul>
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	4630      	mov	r0, r6
 8010610:	4639      	mov	r1, r7
 8010612:	f7ef fe59 	bl	80002c8 <__aeabi_dsub>
 8010616:	a360      	add	r3, pc, #384	@ (adr r3, 8010798 <__ieee754_rem_pio2+0x2f0>)
 8010618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061c:	4682      	mov	sl, r0
 801061e:	468b      	mov	fp, r1
 8010620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010624:	f7f0 f808 	bl	8000638 <__aeabi_dmul>
 8010628:	2d1f      	cmp	r5, #31
 801062a:	4606      	mov	r6, r0
 801062c:	460f      	mov	r7, r1
 801062e:	dc0c      	bgt.n	801064a <__ieee754_rem_pio2+0x1a2>
 8010630:	4b6a      	ldr	r3, [pc, #424]	@ (80107dc <__ieee754_rem_pio2+0x334>)
 8010632:	1e6a      	subs	r2, r5, #1
 8010634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010638:	4543      	cmp	r3, r8
 801063a:	d006      	beq.n	801064a <__ieee754_rem_pio2+0x1a2>
 801063c:	4632      	mov	r2, r6
 801063e:	463b      	mov	r3, r7
 8010640:	4650      	mov	r0, sl
 8010642:	4659      	mov	r1, fp
 8010644:	f7ef fe40 	bl	80002c8 <__aeabi_dsub>
 8010648:	e00e      	b.n	8010668 <__ieee754_rem_pio2+0x1c0>
 801064a:	463b      	mov	r3, r7
 801064c:	4632      	mov	r2, r6
 801064e:	4650      	mov	r0, sl
 8010650:	4659      	mov	r1, fp
 8010652:	f7ef fe39 	bl	80002c8 <__aeabi_dsub>
 8010656:	ea4f 5328 	mov.w	r3, r8, asr #20
 801065a:	9305      	str	r3, [sp, #20]
 801065c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010660:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010664:	2b10      	cmp	r3, #16
 8010666:	dc02      	bgt.n	801066e <__ieee754_rem_pio2+0x1c6>
 8010668:	e9c4 0100 	strd	r0, r1, [r4]
 801066c:	e039      	b.n	80106e2 <__ieee754_rem_pio2+0x23a>
 801066e:	a34c      	add	r3, pc, #304	@ (adr r3, 80107a0 <__ieee754_rem_pio2+0x2f8>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010678:	f7ef ffde 	bl	8000638 <__aeabi_dmul>
 801067c:	4606      	mov	r6, r0
 801067e:	460f      	mov	r7, r1
 8010680:	4602      	mov	r2, r0
 8010682:	460b      	mov	r3, r1
 8010684:	4650      	mov	r0, sl
 8010686:	4659      	mov	r1, fp
 8010688:	f7ef fe1e 	bl	80002c8 <__aeabi_dsub>
 801068c:	4602      	mov	r2, r0
 801068e:	460b      	mov	r3, r1
 8010690:	4680      	mov	r8, r0
 8010692:	4689      	mov	r9, r1
 8010694:	4650      	mov	r0, sl
 8010696:	4659      	mov	r1, fp
 8010698:	f7ef fe16 	bl	80002c8 <__aeabi_dsub>
 801069c:	4632      	mov	r2, r6
 801069e:	463b      	mov	r3, r7
 80106a0:	f7ef fe12 	bl	80002c8 <__aeabi_dsub>
 80106a4:	a340      	add	r3, pc, #256	@ (adr r3, 80107a8 <__ieee754_rem_pio2+0x300>)
 80106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106aa:	4606      	mov	r6, r0
 80106ac:	460f      	mov	r7, r1
 80106ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106b2:	f7ef ffc1 	bl	8000638 <__aeabi_dmul>
 80106b6:	4632      	mov	r2, r6
 80106b8:	463b      	mov	r3, r7
 80106ba:	f7ef fe05 	bl	80002c8 <__aeabi_dsub>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	4606      	mov	r6, r0
 80106c4:	460f      	mov	r7, r1
 80106c6:	4640      	mov	r0, r8
 80106c8:	4649      	mov	r1, r9
 80106ca:	f7ef fdfd 	bl	80002c8 <__aeabi_dsub>
 80106ce:	9a05      	ldr	r2, [sp, #20]
 80106d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	2b31      	cmp	r3, #49	@ 0x31
 80106d8:	dc20      	bgt.n	801071c <__ieee754_rem_pio2+0x274>
 80106da:	e9c4 0100 	strd	r0, r1, [r4]
 80106de:	46c2      	mov	sl, r8
 80106e0:	46cb      	mov	fp, r9
 80106e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80106e6:	4650      	mov	r0, sl
 80106e8:	4642      	mov	r2, r8
 80106ea:	464b      	mov	r3, r9
 80106ec:	4659      	mov	r1, fp
 80106ee:	f7ef fdeb 	bl	80002c8 <__aeabi_dsub>
 80106f2:	463b      	mov	r3, r7
 80106f4:	4632      	mov	r2, r6
 80106f6:	f7ef fde7 	bl	80002c8 <__aeabi_dsub>
 80106fa:	9b04      	ldr	r3, [sp, #16]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010702:	f6bf af0e 	bge.w	8010522 <__ieee754_rem_pio2+0x7a>
 8010706:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801070a:	6063      	str	r3, [r4, #4]
 801070c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010710:	f8c4 8000 	str.w	r8, [r4]
 8010714:	60a0      	str	r0, [r4, #8]
 8010716:	60e3      	str	r3, [r4, #12]
 8010718:	426d      	negs	r5, r5
 801071a:	e702      	b.n	8010522 <__ieee754_rem_pio2+0x7a>
 801071c:	a326      	add	r3, pc, #152	@ (adr r3, 80107b8 <__ieee754_rem_pio2+0x310>)
 801071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010726:	f7ef ff87 	bl	8000638 <__aeabi_dmul>
 801072a:	4606      	mov	r6, r0
 801072c:	460f      	mov	r7, r1
 801072e:	4602      	mov	r2, r0
 8010730:	460b      	mov	r3, r1
 8010732:	4640      	mov	r0, r8
 8010734:	4649      	mov	r1, r9
 8010736:	f7ef fdc7 	bl	80002c8 <__aeabi_dsub>
 801073a:	4602      	mov	r2, r0
 801073c:	460b      	mov	r3, r1
 801073e:	4682      	mov	sl, r0
 8010740:	468b      	mov	fp, r1
 8010742:	4640      	mov	r0, r8
 8010744:	4649      	mov	r1, r9
 8010746:	f7ef fdbf 	bl	80002c8 <__aeabi_dsub>
 801074a:	4632      	mov	r2, r6
 801074c:	463b      	mov	r3, r7
 801074e:	f7ef fdbb 	bl	80002c8 <__aeabi_dsub>
 8010752:	a31b      	add	r3, pc, #108	@ (adr r3, 80107c0 <__ieee754_rem_pio2+0x318>)
 8010754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010758:	4606      	mov	r6, r0
 801075a:	460f      	mov	r7, r1
 801075c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010760:	f7ef ff6a 	bl	8000638 <__aeabi_dmul>
 8010764:	4632      	mov	r2, r6
 8010766:	463b      	mov	r3, r7
 8010768:	f7ef fdae 	bl	80002c8 <__aeabi_dsub>
 801076c:	4606      	mov	r6, r0
 801076e:	460f      	mov	r7, r1
 8010770:	e764      	b.n	801063c <__ieee754_rem_pio2+0x194>
 8010772:	4b1b      	ldr	r3, [pc, #108]	@ (80107e0 <__ieee754_rem_pio2+0x338>)
 8010774:	4598      	cmp	r8, r3
 8010776:	d935      	bls.n	80107e4 <__ieee754_rem_pio2+0x33c>
 8010778:	4632      	mov	r2, r6
 801077a:	463b      	mov	r3, r7
 801077c:	4630      	mov	r0, r6
 801077e:	4639      	mov	r1, r7
 8010780:	f7ef fda2 	bl	80002c8 <__aeabi_dsub>
 8010784:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010788:	e9c4 0100 	strd	r0, r1, [r4]
 801078c:	e69e      	b.n	80104cc <__ieee754_rem_pio2+0x24>
 801078e:	bf00      	nop
 8010790:	54400000 	.word	0x54400000
 8010794:	3ff921fb 	.word	0x3ff921fb
 8010798:	1a626331 	.word	0x1a626331
 801079c:	3dd0b461 	.word	0x3dd0b461
 80107a0:	1a600000 	.word	0x1a600000
 80107a4:	3dd0b461 	.word	0x3dd0b461
 80107a8:	2e037073 	.word	0x2e037073
 80107ac:	3ba3198a 	.word	0x3ba3198a
 80107b0:	6dc9c883 	.word	0x6dc9c883
 80107b4:	3fe45f30 	.word	0x3fe45f30
 80107b8:	2e000000 	.word	0x2e000000
 80107bc:	3ba3198a 	.word	0x3ba3198a
 80107c0:	252049c1 	.word	0x252049c1
 80107c4:	397b839a 	.word	0x397b839a
 80107c8:	3fe921fb 	.word	0x3fe921fb
 80107cc:	4002d97b 	.word	0x4002d97b
 80107d0:	3ff921fb 	.word	0x3ff921fb
 80107d4:	413921fb 	.word	0x413921fb
 80107d8:	3fe00000 	.word	0x3fe00000
 80107dc:	08011ca0 	.word	0x08011ca0
 80107e0:	7fefffff 	.word	0x7fefffff
 80107e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80107e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80107ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80107f0:	4630      	mov	r0, r6
 80107f2:	460f      	mov	r7, r1
 80107f4:	f7f0 f9d0 	bl	8000b98 <__aeabi_d2iz>
 80107f8:	f7ef feb4 	bl	8000564 <__aeabi_i2d>
 80107fc:	4602      	mov	r2, r0
 80107fe:	460b      	mov	r3, r1
 8010800:	4630      	mov	r0, r6
 8010802:	4639      	mov	r1, r7
 8010804:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010808:	f7ef fd5e 	bl	80002c8 <__aeabi_dsub>
 801080c:	4b22      	ldr	r3, [pc, #136]	@ (8010898 <__ieee754_rem_pio2+0x3f0>)
 801080e:	2200      	movs	r2, #0
 8010810:	f7ef ff12 	bl	8000638 <__aeabi_dmul>
 8010814:	460f      	mov	r7, r1
 8010816:	4606      	mov	r6, r0
 8010818:	f7f0 f9be 	bl	8000b98 <__aeabi_d2iz>
 801081c:	f7ef fea2 	bl	8000564 <__aeabi_i2d>
 8010820:	4602      	mov	r2, r0
 8010822:	460b      	mov	r3, r1
 8010824:	4630      	mov	r0, r6
 8010826:	4639      	mov	r1, r7
 8010828:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801082c:	f7ef fd4c 	bl	80002c8 <__aeabi_dsub>
 8010830:	4b19      	ldr	r3, [pc, #100]	@ (8010898 <__ieee754_rem_pio2+0x3f0>)
 8010832:	2200      	movs	r2, #0
 8010834:	f7ef ff00 	bl	8000638 <__aeabi_dmul>
 8010838:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801083c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010840:	f04f 0803 	mov.w	r8, #3
 8010844:	2600      	movs	r6, #0
 8010846:	2700      	movs	r7, #0
 8010848:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801084c:	4632      	mov	r2, r6
 801084e:	463b      	mov	r3, r7
 8010850:	46c2      	mov	sl, r8
 8010852:	f108 38ff 	add.w	r8, r8, #4294967295
 8010856:	f7f0 f957 	bl	8000b08 <__aeabi_dcmpeq>
 801085a:	2800      	cmp	r0, #0
 801085c:	d1f4      	bne.n	8010848 <__ieee754_rem_pio2+0x3a0>
 801085e:	4b0f      	ldr	r3, [pc, #60]	@ (801089c <__ieee754_rem_pio2+0x3f4>)
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	2302      	movs	r3, #2
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	462a      	mov	r2, r5
 8010868:	4653      	mov	r3, sl
 801086a:	4621      	mov	r1, r4
 801086c:	a806      	add	r0, sp, #24
 801086e:	f000 fc2f 	bl	80110d0 <__kernel_rem_pio2>
 8010872:	9b04      	ldr	r3, [sp, #16]
 8010874:	2b00      	cmp	r3, #0
 8010876:	4605      	mov	r5, r0
 8010878:	f6bf ae53 	bge.w	8010522 <__ieee754_rem_pio2+0x7a>
 801087c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010880:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010884:	e9c4 2300 	strd	r2, r3, [r4]
 8010888:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801088c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010890:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010894:	e740      	b.n	8010718 <__ieee754_rem_pio2+0x270>
 8010896:	bf00      	nop
 8010898:	41700000 	.word	0x41700000
 801089c:	08011d20 	.word	0x08011d20

080108a0 <fabs>:
 80108a0:	ec51 0b10 	vmov	r0, r1, d0
 80108a4:	4602      	mov	r2, r0
 80108a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80108aa:	ec43 2b10 	vmov	d0, r2, r3
 80108ae:	4770      	bx	lr

080108b0 <__ieee754_acosf>:
 80108b0:	b508      	push	{r3, lr}
 80108b2:	ee10 3a10 	vmov	r3, s0
 80108b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80108ba:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80108be:	ed2d 8b0c 	vpush	{d8-d13}
 80108c2:	d10a      	bne.n	80108da <__ieee754_acosf+0x2a>
 80108c4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8010a5c <__ieee754_acosf+0x1ac>
 80108c8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8010a60 <__ieee754_acosf+0x1b0>
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	bfc8      	it	gt
 80108d0:	eeb0 0a67 	vmovgt.f32	s0, s15
 80108d4:	ecbd 8b0c 	vpop	{d8-d13}
 80108d8:	bd08      	pop	{r3, pc}
 80108da:	d904      	bls.n	80108e6 <__ieee754_acosf+0x36>
 80108dc:	ee30 8a40 	vsub.f32	s16, s0, s0
 80108e0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80108e4:	e7f6      	b.n	80108d4 <__ieee754_acosf+0x24>
 80108e6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80108ea:	d23c      	bcs.n	8010966 <__ieee754_acosf+0xb6>
 80108ec:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80108f0:	f240 80b1 	bls.w	8010a56 <__ieee754_acosf+0x1a6>
 80108f4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80108f8:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8010a64 <__ieee754_acosf+0x1b4>
 80108fc:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8010a68 <__ieee754_acosf+0x1b8>
 8010900:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8010a6c <__ieee754_acosf+0x1bc>
 8010904:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010908:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010a70 <__ieee754_acosf+0x1c0>
 801090c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010910:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010a74 <__ieee754_acosf+0x1c4>
 8010914:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010918:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8010a78 <__ieee754_acosf+0x1c8>
 801091c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010920:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8010a7c <__ieee754_acosf+0x1cc>
 8010924:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010928:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8010a80 <__ieee754_acosf+0x1d0>
 801092c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010930:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010a84 <__ieee754_acosf+0x1d4>
 8010934:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010938:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8010a88 <__ieee754_acosf+0x1d8>
 801093c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010940:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010944:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010948:	ee27 7a27 	vmul.f32	s14, s14, s15
 801094c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8010a8c <__ieee754_acosf+0x1dc>
 8010950:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010954:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010958:	ee70 7a67 	vsub.f32	s15, s0, s15
 801095c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8010a90 <__ieee754_acosf+0x1e0>
 8010960:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010964:	e7b6      	b.n	80108d4 <__ieee754_acosf+0x24>
 8010966:	2b00      	cmp	r3, #0
 8010968:	eddf da3e 	vldr	s27, [pc, #248]	@ 8010a64 <__ieee754_acosf+0x1b4>
 801096c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8010a68 <__ieee754_acosf+0x1b8>
 8010970:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8010a70 <__ieee754_acosf+0x1c0>
 8010974:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8010a74 <__ieee754_acosf+0x1c4>
 8010978:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8010a78 <__ieee754_acosf+0x1c8>
 801097c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8010a7c <__ieee754_acosf+0x1cc>
 8010980:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8010a80 <__ieee754_acosf+0x1d0>
 8010984:	eddf aa39 	vldr	s21, [pc, #228]	@ 8010a6c <__ieee754_acosf+0x1bc>
 8010988:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8010a84 <__ieee754_acosf+0x1d4>
 801098c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8010a88 <__ieee754_acosf+0x1d8>
 8010990:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010994:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010998:	da28      	bge.n	80109ec <__ieee754_acosf+0x13c>
 801099a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801099e:	ee28 0a27 	vmul.f32	s0, s16, s15
 80109a2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80109a6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80109aa:	eeac ca80 	vfma.f32	s24, s25, s0
 80109ae:	eeaa aa80 	vfma.f32	s20, s21, s0
 80109b2:	eeec ba00 	vfma.f32	s23, s24, s0
 80109b6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80109ba:	eeab ba80 	vfma.f32	s22, s23, s0
 80109be:	eea9 9a80 	vfma.f32	s18, s19, s0
 80109c2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80109c6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80109ca:	f7fe fe59 	bl	800f680 <__ieee754_sqrtf>
 80109ce:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80109d2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010a94 <__ieee754_acosf+0x1e4>
 80109d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80109da:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80109de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80109e2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8010a98 <__ieee754_acosf+0x1e8>
 80109e6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80109ea:	e773      	b.n	80108d4 <__ieee754_acosf+0x24>
 80109ec:	ee39 8a40 	vsub.f32	s16, s18, s0
 80109f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80109f4:	eeb0 0a48 	vmov.f32	s0, s16
 80109f8:	f7fe fe42 	bl	800f680 <__ieee754_sqrtf>
 80109fc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010a00:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010a04:	eeac ca88 	vfma.f32	s24, s25, s16
 8010a08:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010a0c:	eeec ba08 	vfma.f32	s23, s24, s16
 8010a10:	ee10 3a10 	vmov	r3, s0
 8010a14:	eeab ba88 	vfma.f32	s22, s23, s16
 8010a18:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010a1c:	f023 030f 	bic.w	r3, r3, #15
 8010a20:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010a24:	ee07 3a90 	vmov	s15, r3
 8010a28:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010a2c:	eeb0 6a48 	vmov.f32	s12, s16
 8010a30:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010a34:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010a38:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010a3c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010a40:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010a44:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010a48:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010a4c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010a50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a54:	e73e      	b.n	80108d4 <__ieee754_acosf+0x24>
 8010a56:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8010a9c <__ieee754_acosf+0x1ec>
 8010a5a:	e73b      	b.n	80108d4 <__ieee754_acosf+0x24>
 8010a5c:	40490fdb 	.word	0x40490fdb
 8010a60:	00000000 	.word	0x00000000
 8010a64:	3811ef08 	.word	0x3811ef08
 8010a68:	3a4f7f04 	.word	0x3a4f7f04
 8010a6c:	bf303361 	.word	0xbf303361
 8010a70:	bd241146 	.word	0xbd241146
 8010a74:	3e4e0aa8 	.word	0x3e4e0aa8
 8010a78:	bea6b090 	.word	0xbea6b090
 8010a7c:	3e2aaaab 	.word	0x3e2aaaab
 8010a80:	3d9dc62e 	.word	0x3d9dc62e
 8010a84:	4001572d 	.word	0x4001572d
 8010a88:	c019d139 	.word	0xc019d139
 8010a8c:	33a22168 	.word	0x33a22168
 8010a90:	3fc90fda 	.word	0x3fc90fda
 8010a94:	b3a22168 	.word	0xb3a22168
 8010a98:	40490fda 	.word	0x40490fda
 8010a9c:	3fc90fdb 	.word	0x3fc90fdb

08010aa0 <__ieee754_asinf>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	ee10 5a10 	vmov	r5, s0
 8010aa6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010aaa:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8010aae:	ed2d 8b04 	vpush	{d8-d9}
 8010ab2:	d10c      	bne.n	8010ace <__ieee754_asinf+0x2e>
 8010ab4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8010c2c <__ieee754_asinf+0x18c>
 8010ab8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8010c30 <__ieee754_asinf+0x190>
 8010abc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010ac0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8010ac8:	ecbd 8b04 	vpop	{d8-d9}
 8010acc:	bd38      	pop	{r3, r4, r5, pc}
 8010ace:	d904      	bls.n	8010ada <__ieee754_asinf+0x3a>
 8010ad0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010ad4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010ad8:	e7f6      	b.n	8010ac8 <__ieee754_asinf+0x28>
 8010ada:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010ade:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010ae2:	d20b      	bcs.n	8010afc <__ieee754_asinf+0x5c>
 8010ae4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010ae8:	d252      	bcs.n	8010b90 <__ieee754_asinf+0xf0>
 8010aea:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8010c34 <__ieee754_asinf+0x194>
 8010aee:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010af2:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afa:	dce5      	bgt.n	8010ac8 <__ieee754_asinf+0x28>
 8010afc:	f7fe fc78 	bl	800f3f0 <fabsf>
 8010b00:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8010b04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010b08:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010b0c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8010c38 <__ieee754_asinf+0x198>
 8010b10:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8010c3c <__ieee754_asinf+0x19c>
 8010b14:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8010c40 <__ieee754_asinf+0x1a0>
 8010b18:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010b1c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010c44 <__ieee754_asinf+0x1a4>
 8010b20:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010b24:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8010c48 <__ieee754_asinf+0x1a8>
 8010b28:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010b2c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8010c4c <__ieee754_asinf+0x1ac>
 8010b30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010b34:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8010c50 <__ieee754_asinf+0x1b0>
 8010b38:	eea7 9a88 	vfma.f32	s18, s15, s16
 8010b3c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8010c54 <__ieee754_asinf+0x1b4>
 8010b40:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010b44:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8010c58 <__ieee754_asinf+0x1b8>
 8010b48:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010b4c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010c5c <__ieee754_asinf+0x1bc>
 8010b50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010b54:	eeb0 0a48 	vmov.f32	s0, s16
 8010b58:	eee7 8a88 	vfma.f32	s17, s15, s16
 8010b5c:	f7fe fd90 	bl	800f680 <__ieee754_sqrtf>
 8010b60:	4b3f      	ldr	r3, [pc, #252]	@ (8010c60 <__ieee754_asinf+0x1c0>)
 8010b62:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010b66:	429c      	cmp	r4, r3
 8010b68:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010b6c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010b70:	d93d      	bls.n	8010bee <__ieee754_asinf+0x14e>
 8010b72:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010b76:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010c64 <__ieee754_asinf+0x1c4>
 8010b7a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8010b7e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010c30 <__ieee754_asinf+0x190>
 8010b82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010b86:	2d00      	cmp	r5, #0
 8010b88:	bfd8      	it	le
 8010b8a:	eeb1 0a40 	vnegle.f32	s0, s0
 8010b8e:	e79b      	b.n	8010ac8 <__ieee754_asinf+0x28>
 8010b90:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010b94:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010c3c <__ieee754_asinf+0x19c>
 8010b98:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8010c38 <__ieee754_asinf+0x198>
 8010b9c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8010c50 <__ieee754_asinf+0x1b0>
 8010ba0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010ba4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010c44 <__ieee754_asinf+0x1a4>
 8010ba8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010bac:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010c48 <__ieee754_asinf+0x1a8>
 8010bb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bb4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8010c4c <__ieee754_asinf+0x1ac>
 8010bb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010bbc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8010c40 <__ieee754_asinf+0x1a0>
 8010bc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010bc4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8010c54 <__ieee754_asinf+0x1b4>
 8010bc8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010bcc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010c58 <__ieee754_asinf+0x1b8>
 8010bd0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010bd4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8010c5c <__ieee754_asinf+0x1bc>
 8010bd8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010be0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010be4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010be8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010bec:	e76c      	b.n	8010ac8 <__ieee754_asinf+0x28>
 8010bee:	ee10 3a10 	vmov	r3, s0
 8010bf2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010bf6:	f023 030f 	bic.w	r3, r3, #15
 8010bfa:	ee07 3a10 	vmov	s14, r3
 8010bfe:	eea7 8a47 	vfms.f32	s16, s14, s14
 8010c02:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010c06:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010c0a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010c2c <__ieee754_asinf+0x18c>
 8010c0e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8010c12:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010c68 <__ieee754_asinf+0x1c8>
 8010c16:	eee5 7a66 	vfms.f32	s15, s10, s13
 8010c1a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8010c1e:	eeb0 6a40 	vmov.f32	s12, s0
 8010c22:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010c26:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010c2a:	e7aa      	b.n	8010b82 <__ieee754_asinf+0xe2>
 8010c2c:	b33bbd2e 	.word	0xb33bbd2e
 8010c30:	3fc90fdb 	.word	0x3fc90fdb
 8010c34:	7149f2ca 	.word	0x7149f2ca
 8010c38:	3a4f7f04 	.word	0x3a4f7f04
 8010c3c:	3811ef08 	.word	0x3811ef08
 8010c40:	3e2aaaab 	.word	0x3e2aaaab
 8010c44:	bd241146 	.word	0xbd241146
 8010c48:	3e4e0aa8 	.word	0x3e4e0aa8
 8010c4c:	bea6b090 	.word	0xbea6b090
 8010c50:	3d9dc62e 	.word	0x3d9dc62e
 8010c54:	bf303361 	.word	0xbf303361
 8010c58:	4001572d 	.word	0x4001572d
 8010c5c:	c019d139 	.word	0xc019d139
 8010c60:	3f799999 	.word	0x3f799999
 8010c64:	333bbd2e 	.word	0x333bbd2e
 8010c68:	3f490fdb 	.word	0x3f490fdb

08010c6c <__ieee754_atan2f>:
 8010c6c:	ee10 2a90 	vmov	r2, s1
 8010c70:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010c74:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010c78:	b510      	push	{r4, lr}
 8010c7a:	eef0 7a40 	vmov.f32	s15, s0
 8010c7e:	d806      	bhi.n	8010c8e <__ieee754_atan2f+0x22>
 8010c80:	ee10 0a10 	vmov	r0, s0
 8010c84:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010c88:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010c8c:	d904      	bls.n	8010c98 <__ieee754_atan2f+0x2c>
 8010c8e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010c92:	eeb0 0a67 	vmov.f32	s0, s15
 8010c96:	bd10      	pop	{r4, pc}
 8010c98:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010c9c:	d103      	bne.n	8010ca6 <__ieee754_atan2f+0x3a>
 8010c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca2:	f000 b883 	b.w	8010dac <atanf>
 8010ca6:	1794      	asrs	r4, r2, #30
 8010ca8:	f004 0402 	and.w	r4, r4, #2
 8010cac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010cb0:	b943      	cbnz	r3, 8010cc4 <__ieee754_atan2f+0x58>
 8010cb2:	2c02      	cmp	r4, #2
 8010cb4:	d05e      	beq.n	8010d74 <__ieee754_atan2f+0x108>
 8010cb6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010d88 <__ieee754_atan2f+0x11c>
 8010cba:	2c03      	cmp	r4, #3
 8010cbc:	bf08      	it	eq
 8010cbe:	eef0 7a47 	vmoveq.f32	s15, s14
 8010cc2:	e7e6      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010cc4:	b941      	cbnz	r1, 8010cd8 <__ieee754_atan2f+0x6c>
 8010cc6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010d8c <__ieee754_atan2f+0x120>
 8010cca:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010d90 <__ieee754_atan2f+0x124>
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	bfb8      	it	lt
 8010cd2:	eef0 7a47 	vmovlt.f32	s15, s14
 8010cd6:	e7dc      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010cd8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010cdc:	d110      	bne.n	8010d00 <__ieee754_atan2f+0x94>
 8010cde:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010ce2:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ce6:	d107      	bne.n	8010cf8 <__ieee754_atan2f+0x8c>
 8010ce8:	2c02      	cmp	r4, #2
 8010cea:	d846      	bhi.n	8010d7a <__ieee754_atan2f+0x10e>
 8010cec:	4b29      	ldr	r3, [pc, #164]	@ (8010d94 <__ieee754_atan2f+0x128>)
 8010cee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010cf2:	edd3 7a00 	vldr	s15, [r3]
 8010cf6:	e7cc      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010cf8:	2c02      	cmp	r4, #2
 8010cfa:	d841      	bhi.n	8010d80 <__ieee754_atan2f+0x114>
 8010cfc:	4b26      	ldr	r3, [pc, #152]	@ (8010d98 <__ieee754_atan2f+0x12c>)
 8010cfe:	e7f6      	b.n	8010cee <__ieee754_atan2f+0x82>
 8010d00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010d04:	d0df      	beq.n	8010cc6 <__ieee754_atan2f+0x5a>
 8010d06:	1a5b      	subs	r3, r3, r1
 8010d08:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010d0c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010d10:	da1a      	bge.n	8010d48 <__ieee754_atan2f+0xdc>
 8010d12:	2a00      	cmp	r2, #0
 8010d14:	da01      	bge.n	8010d1a <__ieee754_atan2f+0xae>
 8010d16:	313c      	adds	r1, #60	@ 0x3c
 8010d18:	db19      	blt.n	8010d4e <__ieee754_atan2f+0xe2>
 8010d1a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010d1e:	f7fe fb67 	bl	800f3f0 <fabsf>
 8010d22:	f000 f843 	bl	8010dac <atanf>
 8010d26:	eef0 7a40 	vmov.f32	s15, s0
 8010d2a:	2c01      	cmp	r4, #1
 8010d2c:	d012      	beq.n	8010d54 <__ieee754_atan2f+0xe8>
 8010d2e:	2c02      	cmp	r4, #2
 8010d30:	d017      	beq.n	8010d62 <__ieee754_atan2f+0xf6>
 8010d32:	2c00      	cmp	r4, #0
 8010d34:	d0ad      	beq.n	8010c92 <__ieee754_atan2f+0x26>
 8010d36:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010d9c <__ieee754_atan2f+0x130>
 8010d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d3e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010da0 <__ieee754_atan2f+0x134>
 8010d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d46:	e7a4      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010d48:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010d8c <__ieee754_atan2f+0x120>
 8010d4c:	e7ed      	b.n	8010d2a <__ieee754_atan2f+0xbe>
 8010d4e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010da4 <__ieee754_atan2f+0x138>
 8010d52:	e7ea      	b.n	8010d2a <__ieee754_atan2f+0xbe>
 8010d54:	ee17 3a90 	vmov	r3, s15
 8010d58:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010d5c:	ee07 3a90 	vmov	s15, r3
 8010d60:	e797      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010d62:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010d9c <__ieee754_atan2f+0x130>
 8010d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d6a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010da0 <__ieee754_atan2f+0x134>
 8010d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d72:	e78e      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010d74:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010da0 <__ieee754_atan2f+0x134>
 8010d78:	e78b      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010d7a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010da8 <__ieee754_atan2f+0x13c>
 8010d7e:	e788      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010d80:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010da4 <__ieee754_atan2f+0x138>
 8010d84:	e785      	b.n	8010c92 <__ieee754_atan2f+0x26>
 8010d86:	bf00      	nop
 8010d88:	c0490fdb 	.word	0xc0490fdb
 8010d8c:	3fc90fdb 	.word	0x3fc90fdb
 8010d90:	bfc90fdb 	.word	0xbfc90fdb
 8010d94:	08011e34 	.word	0x08011e34
 8010d98:	08011e28 	.word	0x08011e28
 8010d9c:	33bbbd2e 	.word	0x33bbbd2e
 8010da0:	40490fdb 	.word	0x40490fdb
 8010da4:	00000000 	.word	0x00000000
 8010da8:	3f490fdb 	.word	0x3f490fdb

08010dac <atanf>:
 8010dac:	b538      	push	{r3, r4, r5, lr}
 8010dae:	ee10 5a10 	vmov	r5, s0
 8010db2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010db6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010dba:	eef0 7a40 	vmov.f32	s15, s0
 8010dbe:	d310      	bcc.n	8010de2 <atanf+0x36>
 8010dc0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010dc4:	d904      	bls.n	8010dd0 <atanf+0x24>
 8010dc6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010dca:	eeb0 0a67 	vmov.f32	s0, s15
 8010dce:	bd38      	pop	{r3, r4, r5, pc}
 8010dd0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010f08 <atanf+0x15c>
 8010dd4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010f0c <atanf+0x160>
 8010dd8:	2d00      	cmp	r5, #0
 8010dda:	bfc8      	it	gt
 8010ddc:	eef0 7a47 	vmovgt.f32	s15, s14
 8010de0:	e7f3      	b.n	8010dca <atanf+0x1e>
 8010de2:	4b4b      	ldr	r3, [pc, #300]	@ (8010f10 <atanf+0x164>)
 8010de4:	429c      	cmp	r4, r3
 8010de6:	d810      	bhi.n	8010e0a <atanf+0x5e>
 8010de8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010dec:	d20a      	bcs.n	8010e04 <atanf+0x58>
 8010dee:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010f14 <atanf+0x168>
 8010df2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010dfa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e02:	dce2      	bgt.n	8010dca <atanf+0x1e>
 8010e04:	f04f 33ff 	mov.w	r3, #4294967295
 8010e08:	e013      	b.n	8010e32 <atanf+0x86>
 8010e0a:	f7fe faf1 	bl	800f3f0 <fabsf>
 8010e0e:	4b42      	ldr	r3, [pc, #264]	@ (8010f18 <atanf+0x16c>)
 8010e10:	429c      	cmp	r4, r3
 8010e12:	d84f      	bhi.n	8010eb4 <atanf+0x108>
 8010e14:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010e18:	429c      	cmp	r4, r3
 8010e1a:	d841      	bhi.n	8010ea0 <atanf+0xf4>
 8010e1c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010e20:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010e24:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010e28:	2300      	movs	r3, #0
 8010e2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010e2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010e32:	1c5a      	adds	r2, r3, #1
 8010e34:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010e38:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010f1c <atanf+0x170>
 8010e3c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010f20 <atanf+0x174>
 8010e40:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010f24 <atanf+0x178>
 8010e44:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010e48:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010e4c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010f28 <atanf+0x17c>
 8010e50:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010e54:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010f2c <atanf+0x180>
 8010e58:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010e5c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010f30 <atanf+0x184>
 8010e60:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010e64:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010f34 <atanf+0x188>
 8010e68:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010e6c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010f38 <atanf+0x18c>
 8010e70:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010e74:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010f3c <atanf+0x190>
 8010e78:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010e7c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010f40 <atanf+0x194>
 8010e80:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010e84:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010f44 <atanf+0x198>
 8010e88:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010e8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e90:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010e94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e98:	d121      	bne.n	8010ede <atanf+0x132>
 8010e9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e9e:	e794      	b.n	8010dca <atanf+0x1e>
 8010ea0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010ea4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010ea8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010eac:	2301      	movs	r3, #1
 8010eae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010eb2:	e7be      	b.n	8010e32 <atanf+0x86>
 8010eb4:	4b24      	ldr	r3, [pc, #144]	@ (8010f48 <atanf+0x19c>)
 8010eb6:	429c      	cmp	r4, r3
 8010eb8:	d80b      	bhi.n	8010ed2 <atanf+0x126>
 8010eba:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ec2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010ec6:	2302      	movs	r3, #2
 8010ec8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ed0:	e7af      	b.n	8010e32 <atanf+0x86>
 8010ed2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010ed6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010eda:	2303      	movs	r3, #3
 8010edc:	e7a9      	b.n	8010e32 <atanf+0x86>
 8010ede:	4a1b      	ldr	r2, [pc, #108]	@ (8010f4c <atanf+0x1a0>)
 8010ee0:	491b      	ldr	r1, [pc, #108]	@ (8010f50 <atanf+0x1a4>)
 8010ee2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010ee6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010eea:	edd3 6a00 	vldr	s13, [r3]
 8010eee:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010ef2:	2d00      	cmp	r5, #0
 8010ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ef8:	edd2 7a00 	vldr	s15, [r2]
 8010efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f00:	bfb8      	it	lt
 8010f02:	eef1 7a67 	vneglt.f32	s15, s15
 8010f06:	e760      	b.n	8010dca <atanf+0x1e>
 8010f08:	bfc90fdb 	.word	0xbfc90fdb
 8010f0c:	3fc90fdb 	.word	0x3fc90fdb
 8010f10:	3edfffff 	.word	0x3edfffff
 8010f14:	7149f2ca 	.word	0x7149f2ca
 8010f18:	3f97ffff 	.word	0x3f97ffff
 8010f1c:	3c8569d7 	.word	0x3c8569d7
 8010f20:	3d4bda59 	.word	0x3d4bda59
 8010f24:	bd6ef16b 	.word	0xbd6ef16b
 8010f28:	3d886b35 	.word	0x3d886b35
 8010f2c:	3dba2e6e 	.word	0x3dba2e6e
 8010f30:	3e124925 	.word	0x3e124925
 8010f34:	3eaaaaab 	.word	0x3eaaaaab
 8010f38:	bd15a221 	.word	0xbd15a221
 8010f3c:	bd9d8795 	.word	0xbd9d8795
 8010f40:	bde38e38 	.word	0xbde38e38
 8010f44:	be4ccccd 	.word	0xbe4ccccd
 8010f48:	401bffff 	.word	0x401bffff
 8010f4c:	08011e50 	.word	0x08011e50
 8010f50:	08011e40 	.word	0x08011e40
 8010f54:	00000000 	.word	0x00000000

08010f58 <scalbn>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	ec55 4b10 	vmov	r4, r5, d0
 8010f5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010f62:	4606      	mov	r6, r0
 8010f64:	462b      	mov	r3, r5
 8010f66:	b991      	cbnz	r1, 8010f8e <scalbn+0x36>
 8010f68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010f6c:	4323      	orrs	r3, r4
 8010f6e:	d03d      	beq.n	8010fec <scalbn+0x94>
 8010f70:	4b35      	ldr	r3, [pc, #212]	@ (8011048 <scalbn+0xf0>)
 8010f72:	4620      	mov	r0, r4
 8010f74:	4629      	mov	r1, r5
 8010f76:	2200      	movs	r2, #0
 8010f78:	f7ef fb5e 	bl	8000638 <__aeabi_dmul>
 8010f7c:	4b33      	ldr	r3, [pc, #204]	@ (801104c <scalbn+0xf4>)
 8010f7e:	429e      	cmp	r6, r3
 8010f80:	4604      	mov	r4, r0
 8010f82:	460d      	mov	r5, r1
 8010f84:	da0f      	bge.n	8010fa6 <scalbn+0x4e>
 8010f86:	a328      	add	r3, pc, #160	@ (adr r3, 8011028 <scalbn+0xd0>)
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	e01e      	b.n	8010fcc <scalbn+0x74>
 8010f8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010f92:	4291      	cmp	r1, r2
 8010f94:	d10b      	bne.n	8010fae <scalbn+0x56>
 8010f96:	4622      	mov	r2, r4
 8010f98:	4620      	mov	r0, r4
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	f7ef f996 	bl	80002cc <__adddf3>
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	e022      	b.n	8010fec <scalbn+0x94>
 8010fa6:	460b      	mov	r3, r1
 8010fa8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010fac:	3936      	subs	r1, #54	@ 0x36
 8010fae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010fb2:	4296      	cmp	r6, r2
 8010fb4:	dd0d      	ble.n	8010fd2 <scalbn+0x7a>
 8010fb6:	2d00      	cmp	r5, #0
 8010fb8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011030 <scalbn+0xd8>)
 8010fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fbe:	da02      	bge.n	8010fc6 <scalbn+0x6e>
 8010fc0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011038 <scalbn+0xe0>)
 8010fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fc6:	a31a      	add	r3, pc, #104	@ (adr r3, 8011030 <scalbn+0xd8>)
 8010fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fcc:	f7ef fb34 	bl	8000638 <__aeabi_dmul>
 8010fd0:	e7e6      	b.n	8010fa0 <scalbn+0x48>
 8010fd2:	1872      	adds	r2, r6, r1
 8010fd4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010fd8:	428a      	cmp	r2, r1
 8010fda:	dcec      	bgt.n	8010fb6 <scalbn+0x5e>
 8010fdc:	2a00      	cmp	r2, #0
 8010fde:	dd08      	ble.n	8010ff2 <scalbn+0x9a>
 8010fe0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010fe4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010fe8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010fec:	ec45 4b10 	vmov	d0, r4, r5
 8010ff0:	bd70      	pop	{r4, r5, r6, pc}
 8010ff2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010ff6:	da08      	bge.n	801100a <scalbn+0xb2>
 8010ff8:	2d00      	cmp	r5, #0
 8010ffa:	a10b      	add	r1, pc, #44	@ (adr r1, 8011028 <scalbn+0xd0>)
 8010ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011000:	dac1      	bge.n	8010f86 <scalbn+0x2e>
 8011002:	a10f      	add	r1, pc, #60	@ (adr r1, 8011040 <scalbn+0xe8>)
 8011004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011008:	e7bd      	b.n	8010f86 <scalbn+0x2e>
 801100a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801100e:	3236      	adds	r2, #54	@ 0x36
 8011010:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011014:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011018:	4620      	mov	r0, r4
 801101a:	4b0d      	ldr	r3, [pc, #52]	@ (8011050 <scalbn+0xf8>)
 801101c:	4629      	mov	r1, r5
 801101e:	2200      	movs	r2, #0
 8011020:	e7d4      	b.n	8010fcc <scalbn+0x74>
 8011022:	bf00      	nop
 8011024:	f3af 8000 	nop.w
 8011028:	c2f8f359 	.word	0xc2f8f359
 801102c:	01a56e1f 	.word	0x01a56e1f
 8011030:	8800759c 	.word	0x8800759c
 8011034:	7e37e43c 	.word	0x7e37e43c
 8011038:	8800759c 	.word	0x8800759c
 801103c:	fe37e43c 	.word	0xfe37e43c
 8011040:	c2f8f359 	.word	0xc2f8f359
 8011044:	81a56e1f 	.word	0x81a56e1f
 8011048:	43500000 	.word	0x43500000
 801104c:	ffff3cb0 	.word	0xffff3cb0
 8011050:	3c900000 	.word	0x3c900000

08011054 <with_errno>:
 8011054:	b510      	push	{r4, lr}
 8011056:	ed2d 8b02 	vpush	{d8}
 801105a:	eeb0 8a40 	vmov.f32	s16, s0
 801105e:	eef0 8a60 	vmov.f32	s17, s1
 8011062:	4604      	mov	r4, r0
 8011064:	f7fb ffe2 	bl	800d02c <__errno>
 8011068:	eeb0 0a48 	vmov.f32	s0, s16
 801106c:	eef0 0a68 	vmov.f32	s1, s17
 8011070:	ecbd 8b02 	vpop	{d8}
 8011074:	6004      	str	r4, [r0, #0]
 8011076:	bd10      	pop	{r4, pc}

08011078 <xflow>:
 8011078:	4603      	mov	r3, r0
 801107a:	b507      	push	{r0, r1, r2, lr}
 801107c:	ec51 0b10 	vmov	r0, r1, d0
 8011080:	b183      	cbz	r3, 80110a4 <xflow+0x2c>
 8011082:	4602      	mov	r2, r0
 8011084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011088:	e9cd 2300 	strd	r2, r3, [sp]
 801108c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011090:	f7ef fad2 	bl	8000638 <__aeabi_dmul>
 8011094:	ec41 0b10 	vmov	d0, r0, r1
 8011098:	2022      	movs	r0, #34	@ 0x22
 801109a:	b003      	add	sp, #12
 801109c:	f85d eb04 	ldr.w	lr, [sp], #4
 80110a0:	f7ff bfd8 	b.w	8011054 <with_errno>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	e7ee      	b.n	8011088 <xflow+0x10>
 80110aa:	0000      	movs	r0, r0
 80110ac:	0000      	movs	r0, r0
	...

080110b0 <__math_uflow>:
 80110b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80110b8 <__math_uflow+0x8>
 80110b4:	f7ff bfe0 	b.w	8011078 <xflow>
 80110b8:	00000000 	.word	0x00000000
 80110bc:	10000000 	.word	0x10000000

080110c0 <__math_oflow>:
 80110c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80110c8 <__math_oflow+0x8>
 80110c4:	f7ff bfd8 	b.w	8011078 <xflow>
 80110c8:	00000000 	.word	0x00000000
 80110cc:	70000000 	.word	0x70000000

080110d0 <__kernel_rem_pio2>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	ed2d 8b02 	vpush	{d8}
 80110d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80110dc:	f112 0f14 	cmn.w	r2, #20
 80110e0:	9306      	str	r3, [sp, #24]
 80110e2:	9104      	str	r1, [sp, #16]
 80110e4:	4bbe      	ldr	r3, [pc, #760]	@ (80113e0 <__kernel_rem_pio2+0x310>)
 80110e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80110e8:	9008      	str	r0, [sp, #32]
 80110ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	9b06      	ldr	r3, [sp, #24]
 80110f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80110f6:	bfa8      	it	ge
 80110f8:	1ed4      	subge	r4, r2, #3
 80110fa:	9305      	str	r3, [sp, #20]
 80110fc:	bfb2      	itee	lt
 80110fe:	2400      	movlt	r4, #0
 8011100:	2318      	movge	r3, #24
 8011102:	fb94 f4f3 	sdivge	r4, r4, r3
 8011106:	f06f 0317 	mvn.w	r3, #23
 801110a:	fb04 3303 	mla	r3, r4, r3, r3
 801110e:	eb03 0b02 	add.w	fp, r3, r2
 8011112:	9b00      	ldr	r3, [sp, #0]
 8011114:	9a05      	ldr	r2, [sp, #20]
 8011116:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80113d0 <__kernel_rem_pio2+0x300>
 801111a:	eb03 0802 	add.w	r8, r3, r2
 801111e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011120:	1aa7      	subs	r7, r4, r2
 8011122:	ae20      	add	r6, sp, #128	@ 0x80
 8011124:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011128:	2500      	movs	r5, #0
 801112a:	4545      	cmp	r5, r8
 801112c:	dd13      	ble.n	8011156 <__kernel_rem_pio2+0x86>
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	aa20      	add	r2, sp, #128	@ 0x80
 8011132:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011136:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801113a:	f04f 0800 	mov.w	r8, #0
 801113e:	9b00      	ldr	r3, [sp, #0]
 8011140:	4598      	cmp	r8, r3
 8011142:	dc31      	bgt.n	80111a8 <__kernel_rem_pio2+0xd8>
 8011144:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80113d0 <__kernel_rem_pio2+0x300>
 8011148:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801114c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011150:	462f      	mov	r7, r5
 8011152:	2600      	movs	r6, #0
 8011154:	e01b      	b.n	801118e <__kernel_rem_pio2+0xbe>
 8011156:	42ef      	cmn	r7, r5
 8011158:	d407      	bmi.n	801116a <__kernel_rem_pio2+0x9a>
 801115a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801115e:	f7ef fa01 	bl	8000564 <__aeabi_i2d>
 8011162:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011166:	3501      	adds	r5, #1
 8011168:	e7df      	b.n	801112a <__kernel_rem_pio2+0x5a>
 801116a:	ec51 0b18 	vmov	r0, r1, d8
 801116e:	e7f8      	b.n	8011162 <__kernel_rem_pio2+0x92>
 8011170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011174:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011178:	f7ef fa5e 	bl	8000638 <__aeabi_dmul>
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011184:	f7ef f8a2 	bl	80002cc <__adddf3>
 8011188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801118c:	3601      	adds	r6, #1
 801118e:	9b05      	ldr	r3, [sp, #20]
 8011190:	429e      	cmp	r6, r3
 8011192:	f1a7 0708 	sub.w	r7, r7, #8
 8011196:	ddeb      	ble.n	8011170 <__kernel_rem_pio2+0xa0>
 8011198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801119c:	f108 0801 	add.w	r8, r8, #1
 80111a0:	ecaa 7b02 	vstmia	sl!, {d7}
 80111a4:	3508      	adds	r5, #8
 80111a6:	e7ca      	b.n	801113e <__kernel_rem_pio2+0x6e>
 80111a8:	9b00      	ldr	r3, [sp, #0]
 80111aa:	f8dd 8000 	ldr.w	r8, [sp]
 80111ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80111b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80111b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80111b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80111b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80111be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80111c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111c4:	ab98      	add	r3, sp, #608	@ 0x260
 80111c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80111ca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80111ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111d2:	ac0c      	add	r4, sp, #48	@ 0x30
 80111d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80111d6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80111da:	46a1      	mov	r9, r4
 80111dc:	46c2      	mov	sl, r8
 80111de:	f1ba 0f00 	cmp.w	sl, #0
 80111e2:	f1a5 0508 	sub.w	r5, r5, #8
 80111e6:	dc77      	bgt.n	80112d8 <__kernel_rem_pio2+0x208>
 80111e8:	4658      	mov	r0, fp
 80111ea:	ed9d 0b02 	vldr	d0, [sp, #8]
 80111ee:	f7ff feb3 	bl	8010f58 <scalbn>
 80111f2:	ec57 6b10 	vmov	r6, r7, d0
 80111f6:	2200      	movs	r2, #0
 80111f8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80111fc:	4630      	mov	r0, r6
 80111fe:	4639      	mov	r1, r7
 8011200:	f7ef fa1a 	bl	8000638 <__aeabi_dmul>
 8011204:	ec41 0b10 	vmov	d0, r0, r1
 8011208:	f000 faba 	bl	8011780 <floor>
 801120c:	4b75      	ldr	r3, [pc, #468]	@ (80113e4 <__kernel_rem_pio2+0x314>)
 801120e:	ec51 0b10 	vmov	r0, r1, d0
 8011212:	2200      	movs	r2, #0
 8011214:	f7ef fa10 	bl	8000638 <__aeabi_dmul>
 8011218:	4602      	mov	r2, r0
 801121a:	460b      	mov	r3, r1
 801121c:	4630      	mov	r0, r6
 801121e:	4639      	mov	r1, r7
 8011220:	f7ef f852 	bl	80002c8 <__aeabi_dsub>
 8011224:	460f      	mov	r7, r1
 8011226:	4606      	mov	r6, r0
 8011228:	f7ef fcb6 	bl	8000b98 <__aeabi_d2iz>
 801122c:	9002      	str	r0, [sp, #8]
 801122e:	f7ef f999 	bl	8000564 <__aeabi_i2d>
 8011232:	4602      	mov	r2, r0
 8011234:	460b      	mov	r3, r1
 8011236:	4630      	mov	r0, r6
 8011238:	4639      	mov	r1, r7
 801123a:	f7ef f845 	bl	80002c8 <__aeabi_dsub>
 801123e:	f1bb 0f00 	cmp.w	fp, #0
 8011242:	4606      	mov	r6, r0
 8011244:	460f      	mov	r7, r1
 8011246:	dd6c      	ble.n	8011322 <__kernel_rem_pio2+0x252>
 8011248:	f108 31ff 	add.w	r1, r8, #4294967295
 801124c:	ab0c      	add	r3, sp, #48	@ 0x30
 801124e:	9d02      	ldr	r5, [sp, #8]
 8011250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011254:	f1cb 0018 	rsb	r0, fp, #24
 8011258:	fa43 f200 	asr.w	r2, r3, r0
 801125c:	4415      	add	r5, r2
 801125e:	4082      	lsls	r2, r0
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	aa0c      	add	r2, sp, #48	@ 0x30
 8011264:	9502      	str	r5, [sp, #8]
 8011266:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801126a:	f1cb 0217 	rsb	r2, fp, #23
 801126e:	fa43 f902 	asr.w	r9, r3, r2
 8011272:	f1b9 0f00 	cmp.w	r9, #0
 8011276:	dd64      	ble.n	8011342 <__kernel_rem_pio2+0x272>
 8011278:	9b02      	ldr	r3, [sp, #8]
 801127a:	2200      	movs	r2, #0
 801127c:	3301      	adds	r3, #1
 801127e:	9302      	str	r3, [sp, #8]
 8011280:	4615      	mov	r5, r2
 8011282:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011286:	4590      	cmp	r8, r2
 8011288:	f300 80b8 	bgt.w	80113fc <__kernel_rem_pio2+0x32c>
 801128c:	f1bb 0f00 	cmp.w	fp, #0
 8011290:	dd07      	ble.n	80112a2 <__kernel_rem_pio2+0x1d2>
 8011292:	f1bb 0f01 	cmp.w	fp, #1
 8011296:	f000 80bf 	beq.w	8011418 <__kernel_rem_pio2+0x348>
 801129a:	f1bb 0f02 	cmp.w	fp, #2
 801129e:	f000 80c6 	beq.w	801142e <__kernel_rem_pio2+0x35e>
 80112a2:	f1b9 0f02 	cmp.w	r9, #2
 80112a6:	d14c      	bne.n	8011342 <__kernel_rem_pio2+0x272>
 80112a8:	4632      	mov	r2, r6
 80112aa:	463b      	mov	r3, r7
 80112ac:	494e      	ldr	r1, [pc, #312]	@ (80113e8 <__kernel_rem_pio2+0x318>)
 80112ae:	2000      	movs	r0, #0
 80112b0:	f7ef f80a 	bl	80002c8 <__aeabi_dsub>
 80112b4:	4606      	mov	r6, r0
 80112b6:	460f      	mov	r7, r1
 80112b8:	2d00      	cmp	r5, #0
 80112ba:	d042      	beq.n	8011342 <__kernel_rem_pio2+0x272>
 80112bc:	4658      	mov	r0, fp
 80112be:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80113d8 <__kernel_rem_pio2+0x308>
 80112c2:	f7ff fe49 	bl	8010f58 <scalbn>
 80112c6:	4630      	mov	r0, r6
 80112c8:	4639      	mov	r1, r7
 80112ca:	ec53 2b10 	vmov	r2, r3, d0
 80112ce:	f7ee fffb 	bl	80002c8 <__aeabi_dsub>
 80112d2:	4606      	mov	r6, r0
 80112d4:	460f      	mov	r7, r1
 80112d6:	e034      	b.n	8011342 <__kernel_rem_pio2+0x272>
 80112d8:	4b44      	ldr	r3, [pc, #272]	@ (80113ec <__kernel_rem_pio2+0x31c>)
 80112da:	2200      	movs	r2, #0
 80112dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112e0:	f7ef f9aa 	bl	8000638 <__aeabi_dmul>
 80112e4:	f7ef fc58 	bl	8000b98 <__aeabi_d2iz>
 80112e8:	f7ef f93c 	bl	8000564 <__aeabi_i2d>
 80112ec:	4b40      	ldr	r3, [pc, #256]	@ (80113f0 <__kernel_rem_pio2+0x320>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	4606      	mov	r6, r0
 80112f2:	460f      	mov	r7, r1
 80112f4:	f7ef f9a0 	bl	8000638 <__aeabi_dmul>
 80112f8:	4602      	mov	r2, r0
 80112fa:	460b      	mov	r3, r1
 80112fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011300:	f7ee ffe2 	bl	80002c8 <__aeabi_dsub>
 8011304:	f7ef fc48 	bl	8000b98 <__aeabi_d2iz>
 8011308:	e9d5 2300 	ldrd	r2, r3, [r5]
 801130c:	f849 0b04 	str.w	r0, [r9], #4
 8011310:	4639      	mov	r1, r7
 8011312:	4630      	mov	r0, r6
 8011314:	f7ee ffda 	bl	80002cc <__adddf3>
 8011318:	f10a 3aff 	add.w	sl, sl, #4294967295
 801131c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011320:	e75d      	b.n	80111de <__kernel_rem_pio2+0x10e>
 8011322:	d107      	bne.n	8011334 <__kernel_rem_pio2+0x264>
 8011324:	f108 33ff 	add.w	r3, r8, #4294967295
 8011328:	aa0c      	add	r2, sp, #48	@ 0x30
 801132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801132e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011332:	e79e      	b.n	8011272 <__kernel_rem_pio2+0x1a2>
 8011334:	4b2f      	ldr	r3, [pc, #188]	@ (80113f4 <__kernel_rem_pio2+0x324>)
 8011336:	2200      	movs	r2, #0
 8011338:	f7ef fc04 	bl	8000b44 <__aeabi_dcmpge>
 801133c:	2800      	cmp	r0, #0
 801133e:	d143      	bne.n	80113c8 <__kernel_rem_pio2+0x2f8>
 8011340:	4681      	mov	r9, r0
 8011342:	2200      	movs	r2, #0
 8011344:	2300      	movs	r3, #0
 8011346:	4630      	mov	r0, r6
 8011348:	4639      	mov	r1, r7
 801134a:	f7ef fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 801134e:	2800      	cmp	r0, #0
 8011350:	f000 80bf 	beq.w	80114d2 <__kernel_rem_pio2+0x402>
 8011354:	f108 33ff 	add.w	r3, r8, #4294967295
 8011358:	2200      	movs	r2, #0
 801135a:	9900      	ldr	r1, [sp, #0]
 801135c:	428b      	cmp	r3, r1
 801135e:	da6e      	bge.n	801143e <__kernel_rem_pio2+0x36e>
 8011360:	2a00      	cmp	r2, #0
 8011362:	f000 8089 	beq.w	8011478 <__kernel_rem_pio2+0x3a8>
 8011366:	f108 38ff 	add.w	r8, r8, #4294967295
 801136a:	ab0c      	add	r3, sp, #48	@ 0x30
 801136c:	f1ab 0b18 	sub.w	fp, fp, #24
 8011370:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d0f6      	beq.n	8011366 <__kernel_rem_pio2+0x296>
 8011378:	4658      	mov	r0, fp
 801137a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80113d8 <__kernel_rem_pio2+0x308>
 801137e:	f7ff fdeb 	bl	8010f58 <scalbn>
 8011382:	f108 0301 	add.w	r3, r8, #1
 8011386:	00da      	lsls	r2, r3, #3
 8011388:	9205      	str	r2, [sp, #20]
 801138a:	ec55 4b10 	vmov	r4, r5, d0
 801138e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011390:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80113ec <__kernel_rem_pio2+0x31c>
 8011394:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011398:	4646      	mov	r6, r8
 801139a:	f04f 0a00 	mov.w	sl, #0
 801139e:	2e00      	cmp	r6, #0
 80113a0:	f280 80cf 	bge.w	8011542 <__kernel_rem_pio2+0x472>
 80113a4:	4644      	mov	r4, r8
 80113a6:	2c00      	cmp	r4, #0
 80113a8:	f2c0 80fd 	blt.w	80115a6 <__kernel_rem_pio2+0x4d6>
 80113ac:	4b12      	ldr	r3, [pc, #72]	@ (80113f8 <__kernel_rem_pio2+0x328>)
 80113ae:	461f      	mov	r7, r3
 80113b0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80113b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80113b6:	9306      	str	r3, [sp, #24]
 80113b8:	f04f 0a00 	mov.w	sl, #0
 80113bc:	f04f 0b00 	mov.w	fp, #0
 80113c0:	2600      	movs	r6, #0
 80113c2:	eba8 0504 	sub.w	r5, r8, r4
 80113c6:	e0e2      	b.n	801158e <__kernel_rem_pio2+0x4be>
 80113c8:	f04f 0902 	mov.w	r9, #2
 80113cc:	e754      	b.n	8011278 <__kernel_rem_pio2+0x1a8>
 80113ce:	bf00      	nop
	...
 80113dc:	3ff00000 	.word	0x3ff00000
 80113e0:	08011ea0 	.word	0x08011ea0
 80113e4:	40200000 	.word	0x40200000
 80113e8:	3ff00000 	.word	0x3ff00000
 80113ec:	3e700000 	.word	0x3e700000
 80113f0:	41700000 	.word	0x41700000
 80113f4:	3fe00000 	.word	0x3fe00000
 80113f8:	08011e60 	.word	0x08011e60
 80113fc:	f854 3b04 	ldr.w	r3, [r4], #4
 8011400:	b945      	cbnz	r5, 8011414 <__kernel_rem_pio2+0x344>
 8011402:	b123      	cbz	r3, 801140e <__kernel_rem_pio2+0x33e>
 8011404:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011408:	f844 3c04 	str.w	r3, [r4, #-4]
 801140c:	2301      	movs	r3, #1
 801140e:	3201      	adds	r2, #1
 8011410:	461d      	mov	r5, r3
 8011412:	e738      	b.n	8011286 <__kernel_rem_pio2+0x1b6>
 8011414:	1acb      	subs	r3, r1, r3
 8011416:	e7f7      	b.n	8011408 <__kernel_rem_pio2+0x338>
 8011418:	f108 32ff 	add.w	r2, r8, #4294967295
 801141c:	ab0c      	add	r3, sp, #48	@ 0x30
 801141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011422:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011426:	a90c      	add	r1, sp, #48	@ 0x30
 8011428:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801142c:	e739      	b.n	80112a2 <__kernel_rem_pio2+0x1d2>
 801142e:	f108 32ff 	add.w	r2, r8, #4294967295
 8011432:	ab0c      	add	r3, sp, #48	@ 0x30
 8011434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011438:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801143c:	e7f3      	b.n	8011426 <__kernel_rem_pio2+0x356>
 801143e:	a90c      	add	r1, sp, #48	@ 0x30
 8011440:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011444:	3b01      	subs	r3, #1
 8011446:	430a      	orrs	r2, r1
 8011448:	e787      	b.n	801135a <__kernel_rem_pio2+0x28a>
 801144a:	3401      	adds	r4, #1
 801144c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011450:	2a00      	cmp	r2, #0
 8011452:	d0fa      	beq.n	801144a <__kernel_rem_pio2+0x37a>
 8011454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011456:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801145a:	eb0d 0503 	add.w	r5, sp, r3
 801145e:	9b06      	ldr	r3, [sp, #24]
 8011460:	aa20      	add	r2, sp, #128	@ 0x80
 8011462:	4443      	add	r3, r8
 8011464:	f108 0701 	add.w	r7, r8, #1
 8011468:	3d98      	subs	r5, #152	@ 0x98
 801146a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801146e:	4444      	add	r4, r8
 8011470:	42bc      	cmp	r4, r7
 8011472:	da04      	bge.n	801147e <__kernel_rem_pio2+0x3ae>
 8011474:	46a0      	mov	r8, r4
 8011476:	e6a2      	b.n	80111be <__kernel_rem_pio2+0xee>
 8011478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801147a:	2401      	movs	r4, #1
 801147c:	e7e6      	b.n	801144c <__kernel_rem_pio2+0x37c>
 801147e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011480:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011484:	f7ef f86e 	bl	8000564 <__aeabi_i2d>
 8011488:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8011750 <__kernel_rem_pio2+0x680>
 801148c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011490:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011498:	46b2      	mov	sl, r6
 801149a:	f04f 0800 	mov.w	r8, #0
 801149e:	9b05      	ldr	r3, [sp, #20]
 80114a0:	4598      	cmp	r8, r3
 80114a2:	dd05      	ble.n	80114b0 <__kernel_rem_pio2+0x3e0>
 80114a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80114a8:	3701      	adds	r7, #1
 80114aa:	eca5 7b02 	vstmia	r5!, {d7}
 80114ae:	e7df      	b.n	8011470 <__kernel_rem_pio2+0x3a0>
 80114b0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80114b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80114b8:	f7ef f8be 	bl	8000638 <__aeabi_dmul>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114c4:	f7ee ff02 	bl	80002cc <__adddf3>
 80114c8:	f108 0801 	add.w	r8, r8, #1
 80114cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114d0:	e7e5      	b.n	801149e <__kernel_rem_pio2+0x3ce>
 80114d2:	f1cb 0000 	rsb	r0, fp, #0
 80114d6:	ec47 6b10 	vmov	d0, r6, r7
 80114da:	f7ff fd3d 	bl	8010f58 <scalbn>
 80114de:	ec55 4b10 	vmov	r4, r5, d0
 80114e2:	4b9d      	ldr	r3, [pc, #628]	@ (8011758 <__kernel_rem_pio2+0x688>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	4620      	mov	r0, r4
 80114e8:	4629      	mov	r1, r5
 80114ea:	f7ef fb2b 	bl	8000b44 <__aeabi_dcmpge>
 80114ee:	b300      	cbz	r0, 8011532 <__kernel_rem_pio2+0x462>
 80114f0:	4b9a      	ldr	r3, [pc, #616]	@ (801175c <__kernel_rem_pio2+0x68c>)
 80114f2:	2200      	movs	r2, #0
 80114f4:	4620      	mov	r0, r4
 80114f6:	4629      	mov	r1, r5
 80114f8:	f7ef f89e 	bl	8000638 <__aeabi_dmul>
 80114fc:	f7ef fb4c 	bl	8000b98 <__aeabi_d2iz>
 8011500:	4606      	mov	r6, r0
 8011502:	f7ef f82f 	bl	8000564 <__aeabi_i2d>
 8011506:	4b94      	ldr	r3, [pc, #592]	@ (8011758 <__kernel_rem_pio2+0x688>)
 8011508:	2200      	movs	r2, #0
 801150a:	f7ef f895 	bl	8000638 <__aeabi_dmul>
 801150e:	460b      	mov	r3, r1
 8011510:	4602      	mov	r2, r0
 8011512:	4629      	mov	r1, r5
 8011514:	4620      	mov	r0, r4
 8011516:	f7ee fed7 	bl	80002c8 <__aeabi_dsub>
 801151a:	f7ef fb3d 	bl	8000b98 <__aeabi_d2iz>
 801151e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011520:	f10b 0b18 	add.w	fp, fp, #24
 8011524:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011528:	f108 0801 	add.w	r8, r8, #1
 801152c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011530:	e722      	b.n	8011378 <__kernel_rem_pio2+0x2a8>
 8011532:	4620      	mov	r0, r4
 8011534:	4629      	mov	r1, r5
 8011536:	f7ef fb2f 	bl	8000b98 <__aeabi_d2iz>
 801153a:	ab0c      	add	r3, sp, #48	@ 0x30
 801153c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011540:	e71a      	b.n	8011378 <__kernel_rem_pio2+0x2a8>
 8011542:	ab0c      	add	r3, sp, #48	@ 0x30
 8011544:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011548:	f7ef f80c 	bl	8000564 <__aeabi_i2d>
 801154c:	4622      	mov	r2, r4
 801154e:	462b      	mov	r3, r5
 8011550:	f7ef f872 	bl	8000638 <__aeabi_dmul>
 8011554:	4652      	mov	r2, sl
 8011556:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801155a:	465b      	mov	r3, fp
 801155c:	4620      	mov	r0, r4
 801155e:	4629      	mov	r1, r5
 8011560:	f7ef f86a 	bl	8000638 <__aeabi_dmul>
 8011564:	3e01      	subs	r6, #1
 8011566:	4604      	mov	r4, r0
 8011568:	460d      	mov	r5, r1
 801156a:	e718      	b.n	801139e <__kernel_rem_pio2+0x2ce>
 801156c:	9906      	ldr	r1, [sp, #24]
 801156e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011572:	9106      	str	r1, [sp, #24]
 8011574:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011578:	f7ef f85e 	bl	8000638 <__aeabi_dmul>
 801157c:	4602      	mov	r2, r0
 801157e:	460b      	mov	r3, r1
 8011580:	4650      	mov	r0, sl
 8011582:	4659      	mov	r1, fp
 8011584:	f7ee fea2 	bl	80002cc <__adddf3>
 8011588:	3601      	adds	r6, #1
 801158a:	4682      	mov	sl, r0
 801158c:	468b      	mov	fp, r1
 801158e:	9b00      	ldr	r3, [sp, #0]
 8011590:	429e      	cmp	r6, r3
 8011592:	dc01      	bgt.n	8011598 <__kernel_rem_pio2+0x4c8>
 8011594:	42b5      	cmp	r5, r6
 8011596:	dae9      	bge.n	801156c <__kernel_rem_pio2+0x49c>
 8011598:	ab48      	add	r3, sp, #288	@ 0x120
 801159a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801159e:	e9c5 ab00 	strd	sl, fp, [r5]
 80115a2:	3c01      	subs	r4, #1
 80115a4:	e6ff      	b.n	80113a6 <__kernel_rem_pio2+0x2d6>
 80115a6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80115a8:	2b02      	cmp	r3, #2
 80115aa:	dc0b      	bgt.n	80115c4 <__kernel_rem_pio2+0x4f4>
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	dc39      	bgt.n	8011624 <__kernel_rem_pio2+0x554>
 80115b0:	d05d      	beq.n	801166e <__kernel_rem_pio2+0x59e>
 80115b2:	9b02      	ldr	r3, [sp, #8]
 80115b4:	f003 0007 	and.w	r0, r3, #7
 80115b8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80115bc:	ecbd 8b02 	vpop	{d8}
 80115c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80115c6:	2b03      	cmp	r3, #3
 80115c8:	d1f3      	bne.n	80115b2 <__kernel_rem_pio2+0x4e2>
 80115ca:	9b05      	ldr	r3, [sp, #20]
 80115cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80115d0:	eb0d 0403 	add.w	r4, sp, r3
 80115d4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80115d8:	4625      	mov	r5, r4
 80115da:	46c2      	mov	sl, r8
 80115dc:	f1ba 0f00 	cmp.w	sl, #0
 80115e0:	f1a5 0508 	sub.w	r5, r5, #8
 80115e4:	dc6b      	bgt.n	80116be <__kernel_rem_pio2+0x5ee>
 80115e6:	4645      	mov	r5, r8
 80115e8:	2d01      	cmp	r5, #1
 80115ea:	f1a4 0408 	sub.w	r4, r4, #8
 80115ee:	f300 8087 	bgt.w	8011700 <__kernel_rem_pio2+0x630>
 80115f2:	9c05      	ldr	r4, [sp, #20]
 80115f4:	ab48      	add	r3, sp, #288	@ 0x120
 80115f6:	441c      	add	r4, r3
 80115f8:	2000      	movs	r0, #0
 80115fa:	2100      	movs	r1, #0
 80115fc:	f1b8 0f01 	cmp.w	r8, #1
 8011600:	f300 809c 	bgt.w	801173c <__kernel_rem_pio2+0x66c>
 8011604:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011608:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801160c:	f1b9 0f00 	cmp.w	r9, #0
 8011610:	f040 80a6 	bne.w	8011760 <__kernel_rem_pio2+0x690>
 8011614:	9b04      	ldr	r3, [sp, #16]
 8011616:	e9c3 7800 	strd	r7, r8, [r3]
 801161a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801161e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011622:	e7c6      	b.n	80115b2 <__kernel_rem_pio2+0x4e2>
 8011624:	9d05      	ldr	r5, [sp, #20]
 8011626:	ab48      	add	r3, sp, #288	@ 0x120
 8011628:	441d      	add	r5, r3
 801162a:	4644      	mov	r4, r8
 801162c:	2000      	movs	r0, #0
 801162e:	2100      	movs	r1, #0
 8011630:	2c00      	cmp	r4, #0
 8011632:	da35      	bge.n	80116a0 <__kernel_rem_pio2+0x5d0>
 8011634:	f1b9 0f00 	cmp.w	r9, #0
 8011638:	d038      	beq.n	80116ac <__kernel_rem_pio2+0x5dc>
 801163a:	4602      	mov	r2, r0
 801163c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011640:	9c04      	ldr	r4, [sp, #16]
 8011642:	e9c4 2300 	strd	r2, r3, [r4]
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801164e:	f7ee fe3b 	bl	80002c8 <__aeabi_dsub>
 8011652:	ad4a      	add	r5, sp, #296	@ 0x128
 8011654:	2401      	movs	r4, #1
 8011656:	45a0      	cmp	r8, r4
 8011658:	da2b      	bge.n	80116b2 <__kernel_rem_pio2+0x5e2>
 801165a:	f1b9 0f00 	cmp.w	r9, #0
 801165e:	d002      	beq.n	8011666 <__kernel_rem_pio2+0x596>
 8011660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011664:	4619      	mov	r1, r3
 8011666:	9b04      	ldr	r3, [sp, #16]
 8011668:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801166c:	e7a1      	b.n	80115b2 <__kernel_rem_pio2+0x4e2>
 801166e:	9c05      	ldr	r4, [sp, #20]
 8011670:	ab48      	add	r3, sp, #288	@ 0x120
 8011672:	441c      	add	r4, r3
 8011674:	2000      	movs	r0, #0
 8011676:	2100      	movs	r1, #0
 8011678:	f1b8 0f00 	cmp.w	r8, #0
 801167c:	da09      	bge.n	8011692 <__kernel_rem_pio2+0x5c2>
 801167e:	f1b9 0f00 	cmp.w	r9, #0
 8011682:	d002      	beq.n	801168a <__kernel_rem_pio2+0x5ba>
 8011684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011688:	4619      	mov	r1, r3
 801168a:	9b04      	ldr	r3, [sp, #16]
 801168c:	e9c3 0100 	strd	r0, r1, [r3]
 8011690:	e78f      	b.n	80115b2 <__kernel_rem_pio2+0x4e2>
 8011692:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011696:	f7ee fe19 	bl	80002cc <__adddf3>
 801169a:	f108 38ff 	add.w	r8, r8, #4294967295
 801169e:	e7eb      	b.n	8011678 <__kernel_rem_pio2+0x5a8>
 80116a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80116a4:	f7ee fe12 	bl	80002cc <__adddf3>
 80116a8:	3c01      	subs	r4, #1
 80116aa:	e7c1      	b.n	8011630 <__kernel_rem_pio2+0x560>
 80116ac:	4602      	mov	r2, r0
 80116ae:	460b      	mov	r3, r1
 80116b0:	e7c6      	b.n	8011640 <__kernel_rem_pio2+0x570>
 80116b2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80116b6:	f7ee fe09 	bl	80002cc <__adddf3>
 80116ba:	3401      	adds	r4, #1
 80116bc:	e7cb      	b.n	8011656 <__kernel_rem_pio2+0x586>
 80116be:	ed95 7b00 	vldr	d7, [r5]
 80116c2:	ed8d 7b00 	vstr	d7, [sp]
 80116c6:	ed95 7b02 	vldr	d7, [r5, #8]
 80116ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116ce:	ec53 2b17 	vmov	r2, r3, d7
 80116d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80116d6:	f7ee fdf9 	bl	80002cc <__adddf3>
 80116da:	4602      	mov	r2, r0
 80116dc:	460b      	mov	r3, r1
 80116de:	4606      	mov	r6, r0
 80116e0:	460f      	mov	r7, r1
 80116e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116e6:	f7ee fdef 	bl	80002c8 <__aeabi_dsub>
 80116ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116ee:	f7ee fded 	bl	80002cc <__adddf3>
 80116f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80116f6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80116fa:	e9c5 6700 	strd	r6, r7, [r5]
 80116fe:	e76d      	b.n	80115dc <__kernel_rem_pio2+0x50c>
 8011700:	ed94 7b00 	vldr	d7, [r4]
 8011704:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011708:	ec51 0b17 	vmov	r0, r1, d7
 801170c:	4652      	mov	r2, sl
 801170e:	465b      	mov	r3, fp
 8011710:	ed8d 7b00 	vstr	d7, [sp]
 8011714:	f7ee fdda 	bl	80002cc <__adddf3>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	4606      	mov	r6, r0
 801171e:	460f      	mov	r7, r1
 8011720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011724:	f7ee fdd0 	bl	80002c8 <__aeabi_dsub>
 8011728:	4652      	mov	r2, sl
 801172a:	465b      	mov	r3, fp
 801172c:	f7ee fdce 	bl	80002cc <__adddf3>
 8011730:	3d01      	subs	r5, #1
 8011732:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011736:	e9c4 6700 	strd	r6, r7, [r4]
 801173a:	e755      	b.n	80115e8 <__kernel_rem_pio2+0x518>
 801173c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011740:	f7ee fdc4 	bl	80002cc <__adddf3>
 8011744:	f108 38ff 	add.w	r8, r8, #4294967295
 8011748:	e758      	b.n	80115fc <__kernel_rem_pio2+0x52c>
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w
	...
 8011758:	41700000 	.word	0x41700000
 801175c:	3e700000 	.word	0x3e700000
 8011760:	9b04      	ldr	r3, [sp, #16]
 8011762:	9a04      	ldr	r2, [sp, #16]
 8011764:	601f      	str	r7, [r3, #0]
 8011766:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801176a:	605c      	str	r4, [r3, #4]
 801176c:	609d      	str	r5, [r3, #8]
 801176e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011772:	60d3      	str	r3, [r2, #12]
 8011774:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011778:	6110      	str	r0, [r2, #16]
 801177a:	6153      	str	r3, [r2, #20]
 801177c:	e719      	b.n	80115b2 <__kernel_rem_pio2+0x4e2>
 801177e:	bf00      	nop

08011780 <floor>:
 8011780:	ec51 0b10 	vmov	r0, r1, d0
 8011784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801178c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011790:	2e13      	cmp	r6, #19
 8011792:	460c      	mov	r4, r1
 8011794:	4605      	mov	r5, r0
 8011796:	4680      	mov	r8, r0
 8011798:	dc34      	bgt.n	8011804 <floor+0x84>
 801179a:	2e00      	cmp	r6, #0
 801179c:	da17      	bge.n	80117ce <floor+0x4e>
 801179e:	a332      	add	r3, pc, #200	@ (adr r3, 8011868 <floor+0xe8>)
 80117a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a4:	f7ee fd92 	bl	80002cc <__adddf3>
 80117a8:	2200      	movs	r2, #0
 80117aa:	2300      	movs	r3, #0
 80117ac:	f7ef f9d4 	bl	8000b58 <__aeabi_dcmpgt>
 80117b0:	b150      	cbz	r0, 80117c8 <floor+0x48>
 80117b2:	2c00      	cmp	r4, #0
 80117b4:	da55      	bge.n	8011862 <floor+0xe2>
 80117b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80117ba:	432c      	orrs	r4, r5
 80117bc:	2500      	movs	r5, #0
 80117be:	42ac      	cmp	r4, r5
 80117c0:	4c2b      	ldr	r4, [pc, #172]	@ (8011870 <floor+0xf0>)
 80117c2:	bf08      	it	eq
 80117c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80117c8:	4621      	mov	r1, r4
 80117ca:	4628      	mov	r0, r5
 80117cc:	e023      	b.n	8011816 <floor+0x96>
 80117ce:	4f29      	ldr	r7, [pc, #164]	@ (8011874 <floor+0xf4>)
 80117d0:	4137      	asrs	r7, r6
 80117d2:	ea01 0307 	and.w	r3, r1, r7
 80117d6:	4303      	orrs	r3, r0
 80117d8:	d01d      	beq.n	8011816 <floor+0x96>
 80117da:	a323      	add	r3, pc, #140	@ (adr r3, 8011868 <floor+0xe8>)
 80117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e0:	f7ee fd74 	bl	80002cc <__adddf3>
 80117e4:	2200      	movs	r2, #0
 80117e6:	2300      	movs	r3, #0
 80117e8:	f7ef f9b6 	bl	8000b58 <__aeabi_dcmpgt>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d0eb      	beq.n	80117c8 <floor+0x48>
 80117f0:	2c00      	cmp	r4, #0
 80117f2:	bfbe      	ittt	lt
 80117f4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80117f8:	4133      	asrlt	r3, r6
 80117fa:	18e4      	addlt	r4, r4, r3
 80117fc:	ea24 0407 	bic.w	r4, r4, r7
 8011800:	2500      	movs	r5, #0
 8011802:	e7e1      	b.n	80117c8 <floor+0x48>
 8011804:	2e33      	cmp	r6, #51	@ 0x33
 8011806:	dd0a      	ble.n	801181e <floor+0x9e>
 8011808:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801180c:	d103      	bne.n	8011816 <floor+0x96>
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	f7ee fd5b 	bl	80002cc <__adddf3>
 8011816:	ec41 0b10 	vmov	d0, r0, r1
 801181a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801181e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011822:	f04f 37ff 	mov.w	r7, #4294967295
 8011826:	40df      	lsrs	r7, r3
 8011828:	4207      	tst	r7, r0
 801182a:	d0f4      	beq.n	8011816 <floor+0x96>
 801182c:	a30e      	add	r3, pc, #56	@ (adr r3, 8011868 <floor+0xe8>)
 801182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011832:	f7ee fd4b 	bl	80002cc <__adddf3>
 8011836:	2200      	movs	r2, #0
 8011838:	2300      	movs	r3, #0
 801183a:	f7ef f98d 	bl	8000b58 <__aeabi_dcmpgt>
 801183e:	2800      	cmp	r0, #0
 8011840:	d0c2      	beq.n	80117c8 <floor+0x48>
 8011842:	2c00      	cmp	r4, #0
 8011844:	da0a      	bge.n	801185c <floor+0xdc>
 8011846:	2e14      	cmp	r6, #20
 8011848:	d101      	bne.n	801184e <floor+0xce>
 801184a:	3401      	adds	r4, #1
 801184c:	e006      	b.n	801185c <floor+0xdc>
 801184e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011852:	2301      	movs	r3, #1
 8011854:	40b3      	lsls	r3, r6
 8011856:	441d      	add	r5, r3
 8011858:	4545      	cmp	r5, r8
 801185a:	d3f6      	bcc.n	801184a <floor+0xca>
 801185c:	ea25 0507 	bic.w	r5, r5, r7
 8011860:	e7b2      	b.n	80117c8 <floor+0x48>
 8011862:	2500      	movs	r5, #0
 8011864:	462c      	mov	r4, r5
 8011866:	e7af      	b.n	80117c8 <floor+0x48>
 8011868:	8800759c 	.word	0x8800759c
 801186c:	7e37e43c 	.word	0x7e37e43c
 8011870:	bff00000 	.word	0xbff00000
 8011874:	000fffff 	.word	0x000fffff

08011878 <_init>:
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187a:	bf00      	nop
 801187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801187e:	bc08      	pop	{r3}
 8011880:	469e      	mov	lr, r3
 8011882:	4770      	bx	lr

08011884 <_fini>:
 8011884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011886:	bf00      	nop
 8011888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801188a:	bc08      	pop	{r3}
 801188c:	469e      	mov	lr, r3
 801188e:	4770      	bx	lr
